void *(*Calendar.locale.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[2] = v1;
  Calendar.locale.getter(a1);
  return Calendar.locale.modify;
}

void *Calendar.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if (a2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = v2;
    swift_unknownObjectRetain();
    Calendar.locale.setter(&v4);
    return (void *)swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = *a1;
    uint64_t v5 = v2;
    return Calendar.locale.setter(&v4);
  }
}

double key path getter for Calendar.timeZone : Calendar@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void (*v5)(long long *__return_ptr, uint64_t, uint64_t);
  double result;
  long long v7;

  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v5(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t (*Calendar.timeZone.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 48))(ObjectType, v2);
  return Calendar.timeZone.modify;
}

uint64_t Calendar.timeZone.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if (a2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = v2;
    swift_unknownObjectRetain();
    Calendar.timeZone.setter(&v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = *a1;
    uint64_t v5 = v2;
    return Calendar.timeZone.setter(&v4);
  }
}

uint64_t key path getter for Calendar.firstWeekday : Calendar@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  uint64_t v6 = v5(ObjectType, v3);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t (*Calendar.firstWeekday.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *a1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
  return Calendar.firstWeekday.modify;
}

uint64_t Calendar.firstWeekday.modify(uint64_t *a1)
{
  return Calendar.firstWeekday.setter(*a1);
}

uint64_t key path getter for Calendar.minimumDaysInFirstWeek : Calendar@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 72);
  swift_unknownObjectRetain();
  uint64_t v6 = v5(ObjectType, v3);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t (*Calendar.minimumDaysInFirstWeek.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *a1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(ObjectType, v3);
  return Calendar.minimumDaysInFirstWeek.modify;
}

uint64_t Calendar.minimumDaysInFirstWeek.modify(uint64_t *a1)
{
  return Calendar.minimumDaysInFirstWeek.setter(*a1);
}

Swift::Bool __swiftcall Calendar.dateInterval(of:start:interval:for:)(Foundation::Calendar::Component of, Foundation::Date *start, Swift::Double *interval, Foundation::Date a4)
{
  double v8 = *v4;
  uint64_t v9 = *(void *)(v5 + 8);
  if (*v4 > 1.59271755e13) {
    double v8 = 1.59271755e13;
  }
  char v16 = *(unsigned char *)of;
  double v10 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v15 = v10;
  (*(void (**)(void *__return_ptr, char *, double *, uint64_t, uint64_t))(v9 + 160))(v17, &v16, &v15, ObjectType, v9);
  char v12 = v18;
  if ((v18 & 1) == 0)
  {
    uint64_t v13 = v17[1];
    *(void *)&start->_time = v17[0];
    *(void *)interval = v13;
  }
  return v12 ^ 1;
}

uint64_t Calendar.dates(byAdding:value:startingAt:in:wrappingComponents:)@<X0>(unsigned char *a1@<X0>, long long a2@<X2:X1>, uint64_t *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  double v8 = **((double **)&a2 + 1);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  char v11 = *((unsigned char *)a3 + 16);
  long long v15 = *v5;
  LOBYTE(__src[0]) = *a1;
  DateComponents.init(component:value:)((Swift::Int_optional)a2, (unsigned __int8 *)__src, (uint64_t)v16);
  outlined init with take of DateComponents?((uint64_t)v16, (uint64_t)v18);
  outlined init with take of DateComponents?((uint64_t)v18, (uint64_t)__src);
  uint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg(__src);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    double v13 = 1.59271755e13;
    if (v8 <= 1.59271755e13) {
      double v13 = v8;
    }
    double v14 = fmax(v13, -2.11845067e11);
    char v17 = v11;
    memcpy(&v16[7], __src, 0x11AuLL);
    *(_OWORD *)a5 = v15;
    *(double *)(a5 + 16) = v14;
    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = v10;
    *(unsigned char *)(a5 + 40) = v17;
    memcpy((void *)(a5 + 41), v16, 0x121uLL);
    *(unsigned char *)(a5 + 330) = a4 & 1;
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t Calendar.dates(byAdding:startingAt:in:wrappingComponents:)@<X0>(void *__src@<X0>, double *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  memcpy(__dst, __src, 0x11AuLL);
  double v11 = *a2;
  if (*a2 > 1.59271755e13) {
    double v11 = 1.59271755e13;
  }
  double v12 = fmax(v11, -2.11845067e11);
  char v15 = *(unsigned char *)(a3 + 16);
  memcpy(&__srca[7], __src, 0x11AuLL);
  *(_OWORD *)a5 = *v5;
  *(double *)(a5 + 16) = v12;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)a3;
  *(unsigned char *)(a5 + 40) = v15;
  memcpy((void *)(a5 + 41), __srca, 0x121uLL);
  *(unsigned char *)(a5 + 330) = a4;
  swift_unknownObjectRetain();
  return outlined retain of DateComponents((uint64_t)__dst);
}

Swift::Bool __swiftcall Calendar.dateIntervalOfWeekend(containing:start:interval:)(Foundation::Date containing, Foundation::Date *start, Swift::Double *interval)
{
  uint64_t v4 = v3;
  Calendar.dateIntervalOfWeekend(containing:)(*(Foundation::Date *)&start->_time);
  if ((v9 & 1) == 0)
  {
    *(void *)interval = v7;
    *uint64_t v4 = v8;
  }
  return v9 ^ 1;
}

Foundation::DateInterval_optional __swiftcall Calendar.dateIntervalOfWeekend(containing:)(Foundation::Date containing)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v12 = *v3;
  uint64_t v13 = v7;
  double v11 = v5;
  Foundation::DateInterval_optional result = Calendar.nextWeekend(startingAfter:direction:)(containing, (Foundation::Calendar::SearchDirection)&v11);
  if (v16)
  {
    double v8 = v15;
    *(double *)uint64_t v4 = v14;
    *(double *)(v4 + 8) = v8;
LABEL_10:
    *(unsigned char *)(v4 + 16) = 1;
    return result;
  }
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  double v11 = v14;
  Foundation::DateInterval_optional result = Calendar.nextWeekend(startingAfter:direction:)(result.value.start, (Foundation::Calendar::SearchDirection)&v11);
  double v9 = v15;
  if (v16)
  {
    *(double *)uint64_t v4 = v14;
    *(double *)(v4 + 8) = v9;
    *(unsigned char *)(v4 + 16) = 1;
    return result;
  }
  result.value.start._time = v14;
  result.value.duration = v14 + v15;
  if (v5 < v14 || v5 >= result.value.duration)
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    goto LABEL_10;
  }
  *(double *)uint64_t v4 = v14;
  *(double *)(v4 + 8) = v9;
  *(unsigned char *)(v4 + 16) = 0;
  return result;
}

void Calendar.SearchDirection.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t Calendar.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 120))(a1, ObjectType, v3);
}

Swift::Int Calendar.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 120))(a1, ObjectType, v3);
}

uint64_t Calendar.description.getter()
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, void *);
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, void *);
  Swift::String v15;
  Swift::String v16;
  uint64_t (*v17)(uint64_t, void *);
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t (*v21)(uint64_t, void *);
  uint64_t v22;
  Swift::String v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;

  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  uint64_t v3 = (void *)0xE000000000000000;
  v27 = 0;
  v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(72);
  uint64_t ObjectType = swift_getObjectType();
  double v5 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v2[3];
  swift_unknownObjectRetain();
  v5(&v25, ObjectType, v2);
  swift_unknownObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 10272;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v25 = v1;
  v26 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x656C61636F6C2029;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  Calendar.locale.getter(&v25);
  if (v25)
  {
    double v8 = v26;
    double v9 = swift_getObjectType();
    uint64_t v10 = ((uint64_t (*)(uint64_t, void *))v8[8])(v9, v8);
    uint64_t v3 = v11;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  v12._countAndFlagsBits = v10;
  v12._object = v3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6F7A20656D697420;
  v13._object = (void *)0xEC000000203A656ELL;
  String.append(_:)(v13);
  double v14 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v2[6];
  swift_unknownObjectRetain();
  v14(&v25, ObjectType, v2);
  swift_unknownObjectRelease();
  swift_getObjectType();
  v15._countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  String.append(_:)(v15);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x6557747372696620;
  v16._object = (void *)0xEF203A7961646B65;
  String.append(_:)(v16);
  char v17 = (uint64_t (*)(uint64_t, void *))v2[7];
  swift_unknownObjectRetain();
  char v18 = v17(ObjectType, v2);
  swift_unknownObjectRelease();
  v25 = v18;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x80000001823AD310;
  v20._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v20);
  v21 = (uint64_t (*)(uint64_t, void *))v2[9];
  swift_unknownObjectRetain();
  v22 = v21(ObjectType, v2);
  swift_unknownObjectRelease();
  v25 = v22;
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t Calendar.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v23 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  v22 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  double v8 = (void *)v1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18210C660;
  *(_OWORD *)(v9 + 32) = xmmword_182110490;
  *(void *)(v9 + 72) = &type metadata for Calendar.Identifier;
  uint64_t ObjectType = swift_getObjectType();
  double v11 = (void (*)(uint64_t, void *))v8[3];
  swift_unknownObjectRetain();
  v11(ObjectType, v8);
  swift_unknownObjectRelease();
  *(_OWORD *)(v9 + 80) = xmmword_18210BAE0;
  *(void *)(v9 + 120) = ObjectType;
  *(void *)(v9 + 96) = v7;
  *(_OWORD *)(v9 + 128) = xmmword_1821104A0;
  uint64_t v26 = v7;
  v27 = v8;
  *(void *)(v9 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  swift_unknownObjectRetain();
  Calendar.locale.getter((void *)(v9 + 144));
  *(_OWORD *)(v9 + 176) = xmmword_18210BAF0;
  *(void *)(v9 + 216) = &type metadata for TimeZone;
  uint64_t v12 = (void (*)(uint64_t, void *))v8[6];
  swift_unknownObjectRetain();
  v12(ObjectType, v8);
  swift_unknownObjectRelease();
  *(_OWORD *)(v9 + 224) = xmmword_18219EDE0;
  uint64_t v13 = (uint64_t (*)(uint64_t, void *))v8[7];
  swift_unknownObjectRetain();
  uint64_t v14 = v13(ObjectType, v8);
  swift_unknownObjectRelease();
  uint64_t v15 = MEMORY[0x1E4FBB550];
  *(void *)(v9 + 240) = v14;
  *(void *)(v9 + 264) = v15;
  *(void *)(v9 + 272) = 0xD000000000000016;
  *(void *)(v9 + 280) = 0x80000001823ACD80;
  char v16 = (uint64_t (*)(uint64_t, void *))v8[9];
  swift_unknownObjectRetain();
  uint64_t v17 = v16(ObjectType, v8);
  swift_unknownObjectRelease();
  *(void *)(v9 + 312) = v15;
  *(void *)(v9 + 288) = v17;
  uint64_t v26 = v7;
  v27 = v8;
  uint64_t v25 = v9;
  uint64_t v18 = *MEMORY[0x1E4FBC410];
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v6, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v6, 0, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v22, *MEMORY[0x1E4FBC430], v23);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar()
{
  return Calendar.description.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Calendar.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Calendar.Identifier.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicUmmAlQuraCodingKeys>);
  uint64_t v92 = *(void *)(v4 - 8);
  uint64_t v93 = v4;
  MEMORY[0x1F4188790](v4);
  v91 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicTabularCodingKeys>);
  uint64_t v89 = *(void *)(v6 - 8);
  uint64_t v90 = v6;
  MEMORY[0x1F4188790](v6);
  v88 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.RepublicOfChinaCodingKeys>);
  uint64_t v86 = *(void *)(v8 - 8);
  uint64_t v87 = v8;
  MEMORY[0x1F4188790](v8);
  v85 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.PersianCodingKeys>);
  uint64_t v83 = *(void *)(v10 - 8);
  uint64_t v84 = v10;
  MEMORY[0x1F4188790](v10);
  v82 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.JapaneseCodingKeys>);
  uint64_t v80 = *(void *)(v12 - 8);
  uint64_t v81 = v12;
  MEMORY[0x1F4188790](v12);
  v79 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicCivilCodingKeys>);
  uint64_t v77 = *(void *)(v14 - 8);
  uint64_t v78 = v14;
  MEMORY[0x1F4188790](v14);
  v76 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicCodingKeys>);
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  v73 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IndianCodingKeys>);
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  v70 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.Iso8601CodingKeys>);
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  v67 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.HebrewCodingKeys>);
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  v64 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.EthiopicAmeteAlemCodingKeys>);
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  v61 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.EthiopicAmeteMihretCodingKeys>);
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  v58 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.CopticCodingKeys>);
  uint64_t v56 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  v55 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.ChineseCodingKeys>);
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  v52 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.BuddhistCodingKeys>);
  uint64_t v51 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.GregorianCodingKeys>);
  uint64_t v50 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  v29 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.CodingKeys>);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v95 = v30;
  uint64_t v96 = v31;
  MEMORY[0x1F4188790](v30);
  v33 = (char *)&v49 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  v94 = v33;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v34)
  {
    case 1:
      char v97 = 1;
      lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys();
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v24);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 2:
      char v97 = 2;
      lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys();
      v37 = v52;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v54);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 3:
      char v97 = 3;
      lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys();
      v38 = v55;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v57);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 4:
      char v97 = 4;
      lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys();
      v39 = v58;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v60);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 5:
      char v97 = 5;
      lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys();
      v40 = v61;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v63);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 6:
      char v97 = 6;
      lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys();
      v41 = v64;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v66);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 7:
      char v97 = 7;
      lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys();
      v42 = v67;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v42, v69);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 8:
      char v97 = 8;
      lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys();
      v43 = v70;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v43, v72);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 9:
      char v97 = 9;
      lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys();
      v44 = v73;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v75);
      return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
    case 10:
      char v97 = 10;
      lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys();
      v45 = v76;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v47 = v77;
      uint64_t v46 = v78;
      goto LABEL_18;
    case 11:
      char v97 = 11;
      lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys();
      v45 = v79;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v47 = v80;
      uint64_t v46 = v81;
      goto LABEL_18;
    case 12:
      char v97 = 12;
      lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys();
      v45 = v82;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v47 = v83;
      uint64_t v46 = v84;
      goto LABEL_18;
    case 13:
      char v97 = 13;
      lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys();
      v45 = v85;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v47 = v86;
      uint64_t v46 = v87;
      goto LABEL_18;
    case 14:
      char v97 = 14;
      lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys();
      v45 = v88;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v47 = v89;
      uint64_t v46 = v90;
      goto LABEL_18;
    case 15:
      char v97 = 15;
      lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys();
      v45 = v91;
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v47 = v92;
      uint64_t v46 = v93;
LABEL_18:
      (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
      break;
    default:
      char v97 = 0;
      lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();
      v36 = v94;
      uint64_t v35 = v95;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v27);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v36, v35);
}

uint64_t Calendar.Identifier.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  v103 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicUmmAlQuraCodingKeys>);
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v88 = v3;
  MEMORY[0x1F4188790](v3);
  v99 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicTabularCodingKeys>);
  uint64_t v85 = *(void *)(v5 - 8);
  uint64_t v86 = v5;
  MEMORY[0x1F4188790](v5);
  v98 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.RepublicOfChinaCodingKeys>);
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  char v97 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.PersianCodingKeys>);
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v96 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.JapaneseCodingKeys>);
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v95 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicCivilCodingKeys>);
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  v94 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicCodingKeys>);
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v93 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IndianCodingKeys>);
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v92 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.Iso8601CodingKeys>);
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  v102 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.HebrewCodingKeys>);
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  v101 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.EthiopicAmeteAlemCodingKeys>);
  uint64_t v67 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  v100 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.EthiopicAmeteMihretCodingKeys>);
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  v91 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.CopticCodingKeys>);
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v90 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.ChineseCodingKeys>);
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v89 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.BuddhistCodingKeys>);
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.GregorianCodingKeys>);
  uint64_t v58 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.CodingKeys>);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a1[3];
  v104 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  uint64_t v29 = v105;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v29)
  {
    uint64_t v56 = v23;
    uint64_t v55 = v21;
    uint64_t v57 = v20;
    uint64_t v31 = v100;
    uint64_t v30 = v101;
    v33 = v102;
    uint64_t v32 = v103;
    uint64_t v105 = v25;
    uint64_t v34 = v27;
    uint64_t v35 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v35 + 16) == 1)
    {
      char v36 = *(unsigned char *)(v35 + 32);
      switch(v36)
      {
        case 1:
          char v106 = 1;
          lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys();
          v42 = v57;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v42, v60);
          break;
        case 2:
          char v106 = 2;
          lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys();
          v43 = v89;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v62);
          break;
        case 3:
          char v106 = 3;
          lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys();
          v44 = v90;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v63 + 8))(v44, v64);
          break;
        case 4:
          char v106 = 4;
          lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys();
          v45 = v91;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v65 + 8))(v45, v66);
          break;
        case 5:
          char v106 = 5;
          lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v31, v68);
          break;
        case 6:
          char v106 = 6;
          lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v69 + 8))(v30, v70);
          break;
        case 7:
          char v106 = 7;
          lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v33, v72);
          break;
        case 8:
          char v106 = 8;
          lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys();
          uint64_t v46 = v92;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v74);
          break;
        case 9:
          char v106 = 9;
          lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys();
          uint64_t v47 = v93;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v76);
          break;
        case 10:
          char v106 = 10;
          lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys();
          v48 = v94;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v77 + 8))(v48, v78);
          break;
        case 11:
          char v106 = 11;
          lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys();
          uint64_t v49 = v95;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v79 + 8))(v49, v80);
          break;
        case 12:
          char v106 = 12;
          lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys();
          uint64_t v50 = v96;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v81 + 8))(v50, v82);
          break;
        case 13:
          char v106 = 13;
          lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys();
          uint64_t v51 = v97;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v83 + 8))(v51, v84);
          break;
        case 14:
          char v106 = 14;
          lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys();
          v52 = v98;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v54 = v85;
          uint64_t v53 = v86;
          goto LABEL_24;
        case 15:
          char v106 = 15;
          lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys();
          v52 = v99;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v54 = v87;
          uint64_t v53 = v88;
LABEL_24:
          (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v53);
          break;
        default:
          char v106 = 0;
          lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();
          v37 = v56;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v58 + 8))(v37, v55);
          break;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v105 + 8))(v34, v24);
      *uint64_t v32 = v36;
    }
    else
    {
      uint64_t v38 = type metadata accessor for DecodingError();
      swift_allocError();
      v40 = v39;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v40 = &type metadata for Calendar.Identifier;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v40, *MEMORY[0x1E4FBBA70], v38);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v105 + 8))(v34, v24);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Identifier@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Calendar.Identifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.Identifier(void *a1)
{
  return Calendar.Identifier.encode(to:)(a1);
}

uint64_t WeekendRange.onsetTime.getter()
{
  return *(void *)v0;
}

uint64_t WeekendRange.onsetTime.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t WeekendRange.ceaseTime.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t WeekendRange.ceaseTime.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*WeekendRange.ceaseTime.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t WeekendRange.start.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*WeekendRange.start.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t WeekendRange.end.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t WeekendRange.end.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*WeekendRange.end.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void WeekendRange.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v4 = *(void *)(v0 + 32);
  Swift::UInt v3 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v0 + 8) != 1)
  {
    Swift::UInt64 v6 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v7 = v6;
    }
    else {
      Swift::UInt64 v7 = 0;
    }
    Hasher._combine(_:)(v7);
    if (!v2) {
      goto LABEL_3;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  if (v2) {
    goto LABEL_11;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
LABEL_12:
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int WeekendRange.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = v1;
    }
    else {
      Swift::UInt64 v8 = 0;
    }
    Hasher._combine(_:)(v8);
    if (!v4) {
      goto LABEL_3;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  if (v4) {
    goto LABEL_11;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
LABEL_12:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WeekendRange()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = v1;
    }
    else {
      Swift::UInt64 v8 = 0;
    }
    Hasher._combine(_:)(v8);
    if (!v4) {
      goto LABEL_3;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  if (v4) {
    goto LABEL_11;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
LABEL_12:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Calendar.MatchingPolicy.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    unint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    char v6 = v5;
    if (v5 >= 4)
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Decoder.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA78], v7);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      *a2 = v6;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.MatchingPolicy.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.MatchingPolicy@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Calendar.MatchingPolicy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.MatchingPolicy(void *a1)
{
  return Calendar.MatchingPolicy.encode(to:)(a1);
}

uint64_t Calendar.RepeatedTimePolicy.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (!v5)
    {
      char v6 = 0;
      goto LABEL_8;
    }
    if (v5 == 1)
    {
      char v6 = 1;
LABEL_8:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      *a2 = v6;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x1E4FBBA78], v8);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RepeatedTimePolicy.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RepeatedTimePolicy@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Calendar.RepeatedTimePolicy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RepeatedTimePolicy(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t NSCalendar._toCustomAnyHashable()()
{
  type metadata accessor for _NSSwiftCalendar();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    uint64_t v3 = (_OWORD *)(v2 + 16);
    int v4 = (os_unfair_lock_s *)(v2 + 32);
    id v5 = v0;
    os_unfair_lock_lock(v4);
    closure #1 in _NSSwiftCalendar.calendar.getter(v3, &v10);
    os_unfair_lock_unlock(v4);

    unint64_t v7 = *((void *)&v10 + 1);
    uint64_t v6 = v10;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v0;
    unint64_t v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    id v8 = v0;
  }
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSCalendar()
{
  id v1 = *v0;
  NSCalendar._toCustomAnyHashable()();
}

BOOL specialized static WeekendRange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (v2 == v4) {
      int v6 = *(unsigned __int8 *)(a2 + 24);
    }
    else {
      int v6 = 0;
    }
    if (v6 != 1) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 24)) {
      return 0;
    }
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16) || v2 != v4) {
      return 0;
    }
  }
  return *(void *)(a1 + 40) == *(void *)(a2 + 40);
}

unint64_t lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged()
{
  unint64_t result = lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged;
  if (!lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged)
  {
    type metadata accessor for _CalendarBridged();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }
  return result;
}

uint64_t specialized Calendar.Identifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6169726F67657267 && a2 == 0xE90000000000006ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7473696864647562 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6573656E696863 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x636974706F63 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823ADDD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823ADDF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x776572626568 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x313036386F7369 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6169646E69 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x63696D616C7369 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4363696D616C7369 && a2 == 0xEC0000006C697669 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6573656E6170616ALL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6E616973726570 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x63696C6275706572 && a2 == 0xEF616E696843664FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x5463696D616C7369 && a2 == 0xEE0072616C756261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823ADE10)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

uint64_t specialized Calendar.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6565577473726966 && a2 == 0xEC0000007961646BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001823ACD80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E6572727563 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void specialized static Calendar._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftCalendar();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    char v6 = (_OWORD *)(v5 + 16);
    unint64_t v7 = (os_unfair_lock_s *)(v5 + 32);
    id v8 = a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v12);
    os_unfair_lock_unlock(v7);

    unint64_t v10 = *((void *)&v12 + 1);
    uint64_t v9 = v12;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    unint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    id v11 = a1;
  }
  *a2 = v9;
  a2[1] = v10;
}

unint64_t lazy protocol witness table accessor for type Calendar.ComponentSet and conformance Calendar.ComponentSet()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.SearchDirection and conformance Calendar.SearchDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection;
  if (!lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WeekendRange and conformance WeekendRange()
{
  unint64_t result = lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange;
  if (!lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Calendar(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[2] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[3] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  unint64_t result = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[4] = result;
  return result;
}

double sub_181CCD920@<D0>(_OWORD *a1@<X8>)
{
  Calendar.locale.getter(&v3);
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void *sub_181CCD964(long long *a1)
{
  long long v2 = *a1;
  swift_unknownObjectRetain();
  return Calendar.locale.setter((uint64_t *)&v2);
}

uint64_t sub_181CCD9A8(long long *a1)
{
  long long v2 = *a1;
  swift_unknownObjectRetain();
  return Calendar.timeZone.setter((uint64_t *)&v2);
}

uint64_t sub_181CCD9EC(uint64_t *a1)
{
  return Calendar.firstWeekday.setter(*a1);
}

uint64_t sub_181CCDA18(uint64_t *a1)
{
  return Calendar.minimumDaysInFirstWeek.setter(*a1);
}

ValueMetadata *type metadata accessor for Calendar.ComponentSet()
{
  return &type metadata for Calendar.ComponentSet;
}

unsigned char *storeEnumTagSinglePayload for Calendar.Component(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *double result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CCDB24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 17;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Calendar.SearchDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CCDC1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Calendar.MatchingPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *double result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CCDD10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WeekendRange()
{
  return &type metadata for WeekendRange;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Calendar.Identifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Calendar.Identifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CCDF54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Calendar.Identifier.CodingKeys()
{
  return &unk_1ECA4AA50;
}

void *type metadata accessor for Calendar.Identifier.GregorianCodingKeys()
{
  return &unk_1ECA4AC00;
}

void *type metadata accessor for Calendar.Identifier.BuddhistCodingKeys()
{
  return &unk_1ECA4ABC0;
}

void *type metadata accessor for Calendar.Identifier.ChineseCodingKeys()
{
  return &unk_1ECA4AB40;
}

void *type metadata accessor for Calendar.Identifier.CopticCodingKeys()
{
  return &unk_1ECA4AAE0;
}

void *type metadata accessor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  return &unk_1ECA4ACC0;
}

void *type metadata accessor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  return &unk_1ECA4ACA0;
}

void *type metadata accessor for Calendar.Identifier.HebrewCodingKeys()
{
  return &unk_1ECA4AB00;
}

void *type metadata accessor for Calendar.Identifier.Iso8601CodingKeys()
{
  return &unk_1ECA4AB80;
}

void *type metadata accessor for Calendar.Identifier.IndianCodingKeys()
{
  return &unk_1ECA4AB20;
}

void *type metadata accessor for Calendar.Identifier.IslamicCodingKeys()
{
  return &unk_1ECA4AB60;
}

void *type metadata accessor for Calendar.Identifier.IslamicCivilCodingKeys()
{
  return &unk_1ECA4AC20;
}

void *type metadata accessor for Calendar.Identifier.JapaneseCodingKeys()
{
  return &unk_1ECA4ABE0;
}

void *type metadata accessor for Calendar.Identifier.PersianCodingKeys()
{
  return &unk_1ECA4ABA0;
}

void *type metadata accessor for Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  return &unk_1ECA4AC60;
}

void *type metadata accessor for Calendar.Identifier.IslamicTabularCodingKeys()
{
  return &unk_1ECA4AC40;
}

void *type metadata accessor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  return &unk_1ECA4AC80;
}

void *type metadata accessor for Calendar.Current()
{
  return &unk_1ECA4BBF8;
}

uint64_t partial apply for closure #1 in _ProcessInfo.processName.setter(void *a1)
{
  return closure #1 in _ProcessInfo.processName.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::String __swiftcall Date.RelativeFormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  __int16 v4 = *(_WORD *)(v2 + 1);
  uint64_t v5 = *((void *)v2 + 5);
  char v13 = *v2;
  __int16 v14 = v4;
  long long v6 = *(_OWORD *)(v2 + 24);
  long long v15 = *(_OWORD *)(v2 + 8);
  long long v16 = v6;
  uint64_t v17 = v5;
  uint64_t v12 = v3;
  v11.tv_sec = 0;
  v11.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v11);
  Swift::String v9 = Date.RelativeFormatStyle._format(_:refDate:)(COERCE_FOUNDATION_DATE((double)v11.tv_sec + -978307200.0 + (double)v11.tv_nsec * 0.000000001), COERCE_FOUNDATION_DATE((double)v11.tv_nsec * 0.000000001));
  object = v9._object;
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t Date.RelativeFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static Date.RelativeFormatStyle.UnitsStyle.wide.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static Date.RelativeFormatStyle.UnitsStyle.spellOut.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static Date.RelativeFormatStyle.UnitsStyle.narrow.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void Date.RelativeFormatStyle.UnitsStyle.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Date.RelativeFormatStyle.UnitsStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.RelativeFormatStyle.UnitsStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.UnitsStyle.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.RelativeFormatStyle.UnitsStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.UnitsStyle.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.UnitsStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.UnitsStyle@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Date.RelativeFormatStyle.UnitsStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.UnitsStyle(void *a1)
{
  return Date.RelativeFormatStyle.UnitsStyle.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.Presentation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.Presentation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static Date.RelativeFormatStyle.Presentation.numeric.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static Date.RelativeFormatStyle.Presentation.named.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void Date.RelativeFormatStyle.Presentation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Date.RelativeFormatStyle.Presentation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.Presentation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.Presentation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.RelativeFormatStyle.Presentation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.Presentation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.RelativeFormatStyle.Presentation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.Presentation.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.Presentation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.Presentation@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Date.RelativeFormatStyle.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.Presentation(void *a1)
{
  return Date.RelativeFormatStyle.Presentation.encode(to:)(a1);
}

void Date.RelativeFormatStyle.presentation.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Date.RelativeFormatStyle.presentation.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.presentation.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.RelativeFormatStyle.unitsStyle.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *Date.RelativeFormatStyle.unitsStyle.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.unitsStyle.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.RelativeFormatStyle.capitalizationContext.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

unsigned char *Date.RelativeFormatStyle.capitalizationContext.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.capitalizationContext.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Date.RelativeFormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Date.RelativeFormatStyle.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.allowedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.RelativeFormatStyle.allowedFields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.allowedFields.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 40);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return Date.RelativeFormatStyle.allowedFields.modify;
}

uint64_t Date.RelativeFormatStyle.allowedFields.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = v2;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.RelativeFormatStyle.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.RelativeFormatStyle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.RelativeFormatStyle.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.RelativeFormatStyle.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.RelativeFormatStyle.CodingKeys(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEC0000006E6F6974;
  uint64_t v3 = 0x61746E6573657270;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA0000000000656CLL;
      uint64_t v3 = 0x7974537374696E75;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000015;
      *(void *)(a1 + 8) = 0x80000001823A8D30;
      break;
    case 3:
      *(void *)a1 = 0x656C61636F6CLL;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 4:
      *(void *)a1 = 0x7261646E656C6163;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
    case 5:
      strcpy((char *)a1, "allowedFields");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  unint64_t result = 0x61746E6573657270;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7974537374696E75;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 4:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 5:
      unint64_t result = 0x466465776F6C6C61;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.RelativeFormatStyle.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

__n128 Date.RelativeFormatStyle.init(presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>(char *a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v7 = *a1;
  char v8 = *a2;
  __n128 v26 = *a4;
  long long v27 = *a3;
  char v9 = *a5;
  uint64_t v10 = qword_1ECA48D18;
  if (qword_1ECA48D18)
  {
    char v25 = *a5;
    char v11 = *a2;
    char v12 = *a1;
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, qword_1ECA48D18, 0);
    uint64_t v13 = v29;
    unint64_t v14 = *(void *)(v29 + 16);
    long long v15 = &byte_1ECA48D28;
    do
    {
      char v17 = *v15++;
      char v16 = v17;
      uint64_t v29 = v13;
      unint64_t v18 = *(void *)(v13 + 24);
      if (v14 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v14 + 1, 1);
        uint64_t v13 = v29;
      }
      *(void *)(v13 + 16) = v14 + 1;
      *(unsigned char *)(v13 + v14++ + 32) = v16;
      --v10;
    }
    while (v10);
    char v7 = v12;
    char v8 = v11;
    char v9 = v25;
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  uint64_t v19 = Set.init(minimumCapacity:)();
  uint64_t v29 = v19;
  uint64_t v20 = *(void *)(v13 + 16);
  if (v20)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      uint64_t v22 = v13 + i;
      specialized Set._Variant.insert(_:)(&v28, *(unsigned __int8 *)(v22 + 32));
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = v29;
  }
  else
  {
    uint64_t v23 = v19;
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)a6 = v7;
  *(unsigned char *)(a6 + 1) = v8;
  *(unsigned char *)(a6 + 2) = v9;
  *(_OWORD *)(a6 + 8) = v27;
  __n128 result = v26;
  *(__n128 *)(a6 + 24) = v26;
  *(void *)(a6 + 40) = v23;
  return result;
}

__n128 Date.RelativeFormatStyle.init(allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, char *a3@<X2>, _OWORD *a4@<X3>, __n128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v7 = *a3;
  char v8 = *a6;
  *(unsigned char *)a7 = *a2;
  *(unsigned char *)(a7 + 1) = v7;
  *(unsigned char *)(a7 + 2) = v8;
  *(_OWORD *)(a7 + 8) = *a4;
  __n128 result = *a5;
  *(__n128 *)(a7 + 24) = *a5;
  *(void *)(a7 + 40) = a1;
  return result;
}

Swift::String __swiftcall Date.RelativeFormatStyle._format(_:refDate:)(Foundation::Date _, Foundation::Date refDate)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = *v6;
  double v12 = *v5;
  long long v13 = v4[1];
  *(_OWORD *)v126 = *v4;
  *(_OWORD *)&v126[16] = v13;
  *(_OWORD *)&v126[32] = v4[2];
  outlined retain of Date.RelativeFormatStyle((uint64_t)v126);
  if (one-time initialization token for sortedAllowedComponents != -1) {
    swift_once();
  }
  Swift::Int v14 = swift_bridgeObjectRetain();
  Swift::Int v15 = specialized _ArrayProtocol.filter(_:)(v14, (uint64_t)v126);
  outlined release of Date.RelativeFormatStyle((uint64_t)v126);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    int v17 = *(unsigned __int8 *)(v16 + v15 + 31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBBEA0], v7);
    double v18 = specialized BinaryFloatingPoint.rounded<A>(increment:rule:)((uint64_t)v10, 1.0, v12 - v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    double v19 = v11 + v18;
    outlined retain of Date.RelativeFormatStyle((uint64_t)v126);
    Swift::Int v20 = swift_bridgeObjectRetain();
    Swift::Int v21 = specialized _ArrayProtocol.filter(_:)(v20, (uint64_t)v126);
    outlined release of Date.RelativeFormatStyle((uint64_t)v126);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
    uint64_t v22 = Set.init(minimumCapacity:)();
    *(void *)&v125[0] = v22;
    uint64_t v23 = *(void *)(v21 + 16);
    if (v23)
    {
      for (uint64_t i = 0; i != v23; ++i)
      {
        Swift::Int v25 = v21 + i;
        specialized Set._Variant.insert(_:)(v124, *(unsigned __int8 *)(v25 + 32));
      }
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)&v125[0];
    }
    else
    {
      uint64_t v26 = v22;
      swift_bridgeObjectRelease();
    }
    long long v127 = *(_OWORD *)&v126[24];
    v125[0] = *(_OWORD *)&v126[24];
    v128[0] = v19;
    uint64_t v123 = *(void *)&v11;
    outlined retain of Locale((uint64_t)&v127);
    Calendar.dateComponents(_:from:to:)(v26, v128, (double *)&v123, v124);
    outlined release of Locale((uint64_t)&v127);
    memcpy(v125, v124, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v125);
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v30 = specialized Sequence.compactMap<A>(_:)(v29, v125);
    outlined release of DateComponents((uint64_t)v125);
    swift_bridgeObjectRelease();
    if (v30[2])
    {
      uint64_t v31 = *((unsigned __int8 *)v30 + 32);
      uint64_t v32 = v30[5];
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = 0;
      uint64_t v31 = 18;
    }
    if (v31 == 18)
    {
      uint64_t v32 = 0;
      int v33 = v17;
    }
    else
    {
      int v33 = v31;
    }
    if ((v33 - 4) > 2u)
    {
      v122[0] = v33;
      uint64_t v123 = *(void *)&v11;
      double v121 = v19;
      *(_OWORD *)v128 = v127;
      outlined retain of Locale((uint64_t)&v127);
      static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)(v122, (double *)&v123, &v121, (uint64_t *)v128, v26, (uint64_t)v124);
    }
    else
    {
      uint64_t v123 = *(void *)&v19;
      double v121 = v11;
      *(_OWORD *)v128 = v127;
      v122[0] = v33;
      outlined retain of Locale((uint64_t)&v127);
      static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)((double *)&v123, &v121, v128, v26, v122, (uint64_t)v124);
    }
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v125);
    outlined release of Locale((uint64_t)&v127);
    uint64_t v34 = v124[1];
    if (LOBYTE(v124[0]) == 18) {
      uint64_t v34 = v32;
    }
    uint64_t v120 = v34;
    if (LOBYTE(v124[0]) == 18) {
      int v35 = v33;
    }
    else {
      int v35 = v124[0];
    }
    int v119 = v35;
    uint64_t v36 = v126[1];
    *(_OWORD *)v128 = *(_OWORD *)&v126[8];
    long long v37 = *(_OWORD *)&v126[8];
    uint64_t ObjectType = swift_getObjectType();
    v39 = *(uint64_t (**)(uint64_t, void))(*((void *)&v37 + 1) + 64);
    outlined retain of Locale((uint64_t)v128);
    uint64_t v40 = v39(ObjectType, *((void *)&v37 + 1));
    uint64_t v42 = v41;
    uint64_t v43 = outlined release of Locale((uint64_t)v128);
    int v44 = 5;
    int v45 = 0;
    unsigned __int8 v46 = 0;
    switch(v36)
    {
      case 1:
        break;
      case 2:
        int v44 = 0;
        int v45 = 1;
        goto LABEL_27;
      case 3:
        int v44 = 0;
        unsigned __int8 v46 = 1;
        int v45 = 2;
        break;
      default:
        int v45 = 0;
        int v44 = 0;
LABEL_27:
        unsigned __int8 v46 = 1;
        break;
    }
    uint64_t v47 = dword_1821A0E04[v126[2]];
    if (one-time initialization token for cache != -1) {
      uint64_t v43 = swift_once();
    }
    unint64_t v48 = *(void *)algn_1E8EDF518;
    uint64_t v118 = static ICURelativeDateFormatter.cache;
    v124[0] = v40;
    v124[1] = v42;
    LODWORD(v124[2]) = v44;
    BYTE4(v124[2]) = v46;
    v124[3] = __PAIR64__(v47, v45);
    MEMORY[0x1F4188790](v43);
    uint64_t v117 = v40;
    *(&v105 - 2) = (uint64_t)v124;
    uint64_t v115 = v47;
    uint64_t v49 = (double *)(v48 + 16);
    LODWORD(v116) = v44;
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v48 + 24));
    partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v48 + 16, &v123);
    os_unfair_lock_unlock((os_unfair_lock_t)(v48 + 24));
    swift_release();
    uint64_t v50 = v123;
    if (v123 != 1) {
      goto LABEL_81;
    }
    type metadata accessor for ICURelativeDateFormatter();
    swift_allocObject();
    swift_bridgeObjectRetain();
    LOBYTE(v121) = v46;
    unint64_t v51 = v116 | ((unint64_t)v46 << 32);
    uint64_t v116 = v42;
    uint64_t v50 = ICURelativeDateFormatter.init(signature:)(v117, v42, v51);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v48 + 24));
    uint64_t v52 = *(void *)(v48 + 16);
    uint64_t v53 = *(void *)(v52 + 16);
    os_unfair_lock_t v112 = (os_unfair_lock_t)(v48 + 24);
    unint64_t v114 = v48;
    uint64_t v117 = v52;
    if (v118 >= v53) {
      swift_bridgeObjectRetain();
    }
    else {
      *(void *)uint64_t v49 = MEMORY[0x1E4FBC868];
    }
    uint64_t v54 = v124[0];
    uint64_t v55 = v124[1];
    uint64_t v56 = LODWORD(v124[2]);
    int v57 = BYTE4(v124[2]);
    unint64_t v58 = v124[3];
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v121 = *v49;
    double v60 = v121;
    *uint64_t v49 = -0.0;
    LODWORD(v118) = v57;
    v122[0] = v57;
    uint64_t v113 = v56;
    unint64_t v61 = v56 | ((unint64_t)v57 << 32);
    double v62 = v60;
    uint64_t v115 = v54;
    uint64_t v63 = v54;
    uint64_t v64 = v58;
    unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v55, v61, v58);
    uint64_t v67 = *(void *)(*(void *)&v62 + 16);
    BOOL v68 = (v65 & 1) == 0;
    uint64_t v69 = v67 + v68;
    if (__OFADD__(v67, v68))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v49) = v65;
      if (*(void *)(*(void *)&v62 + 24) < v69)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v69, isUniquelyReferenced_nonNull_native);
        double v70 = v121;
        v122[0] = v118;
        uint64_t v71 = v113;
        uint64_t v72 = v115;
        unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v55, v113 | ((unint64_t)v118 << 32), v58);
        unint64_t v58 = v114;
        if ((v49 & 1) != (v74 & 1)) {
          goto LABEL_88;
        }
        unint64_t v66 = v73;
        if ((v49 & 1) == 0) {
          goto LABEL_79;
        }
LABEL_42:
        uint64_t v75 = *(void *)(*(void *)&v70 + 56);
        uint64_t v76 = 8 * v66;
        swift_release();
        *(void *)(v75 + v76) = v50;
LABEL_80:
        *(double *)(v58 + 16) = v70;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v112);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of ICUDateIntervalFormatter??(v123);
LABEL_81:
        swift_bridgeObjectRelease();
        swift_release();
        if (v50)
        {
          LOBYTE(v124[0]) = v119;
          LOBYTE(v123) = v126[0];
          uint64_t v27 = ICURelativeDateFormatter.format(value:component:presentation:)(v120, (unsigned __int8 *)v124, (unsigned __int8 *)&v123);
          unint64_t v28 = v101;
          swift_release();
          if (v28) {
            goto LABEL_83;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x181CD0BCCLL);
      }
      unint64_t v58 = v114;
      if (isUniquelyReferenced_nonNull_native)
      {
        double v70 = v62;
        uint64_t v72 = v115;
        uint64_t v71 = v113;
        if (v65) {
          goto LABEL_42;
        }
LABEL_79:
        v122[0] = v118;
        specialized _NativeDictionary._insert(at:key:value:)(v66, v72, v55, v71 | ((unint64_t)v118 << 32), v64, v50, *(void **)&v70);
        swift_bridgeObjectRetain();
        goto LABEL_80;
      }
    }
    unint64_t v107 = v66;
    uint64_t v108 = v64;
    uint64_t v109 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICURelativeDateFormatter.Signature, ICURelativeDateFormatter?>);
    *(double *)&uint64_t v77 = COERCE_DOUBLE(static _DictionaryStorage.copy(original:)());
    double v70 = *(double *)&v77;
    if (*(void *)(*(void *)&v62 + 16))
    {
      uint64_t v78 = (char *)(v77 + 64);
      uint64_t v79 = 1 << *(unsigned char *)(*(void *)&v70 + 32);
      v111 = (char *)(*(void *)&v62 + 64);
      unint64_t v80 = (unint64_t)(v79 + 63) >> 6;
      double v106 = v62;
      if (*(void *)&v70 != *(void *)&v62 || v78 >= &v111[8 * v80]) {
        memmove(v78, v111, 8 * v80);
      }
      int64_t v81 = 0;
      double v82 = v106;
      *(void *)(*(void *)&v70 + 16) = *(void *)(*(void *)&v106 + 16);
      uint64_t v83 = 1 << *(unsigned char *)(*(void *)&v82 + 32);
      uint64_t v84 = -1;
      if (v83 < 64) {
        uint64_t v84 = ~(-1 << v83);
      }
      unint64_t v85 = v84 & *(void *)(*(void *)&v82 + 64);
      int64_t v110 = (unint64_t)(v83 + 63) >> 6;
      unint64_t v58 = v114;
      while (1)
      {
        if (v85)
        {
          unint64_t v86 = __clz(__rbit64(v85));
          v85 &= v85 - 1;
          unint64_t v87 = v86 | (v81 << 6);
        }
        else
        {
          int64_t v97 = v81 + 1;
          if (__OFADD__(v81, 1)) {
            goto LABEL_86;
          }
          if (v97 >= v110) {
            break;
          }
          unint64_t v98 = *(void *)&v111[8 * v97];
          int64_t v99 = v81 + 1;
          if (!v98)
          {
            int64_t v99 = v81 + 2;
            if (v81 + 2 >= v110) {
              break;
            }
            unint64_t v98 = *(void *)&v111[8 * v99];
            if (!v98)
            {
              int64_t v99 = v81 + 3;
              if (v81 + 3 >= v110) {
                break;
              }
              unint64_t v98 = *(void *)&v111[8 * v99];
              if (!v98)
              {
                int64_t v99 = v81 + 4;
                if (v81 + 4 >= v110) {
                  break;
                }
                unint64_t v98 = *(void *)&v111[8 * v99];
                if (!v98)
                {
                  int64_t v99 = v81 + 5;
                  if (v81 + 5 >= v110) {
                    break;
                  }
                  unint64_t v98 = *(void *)&v111[8 * v99];
                  if (!v98)
                  {
                    int64_t v99 = v81 + 6;
                    if (v81 + 6 >= v110) {
                      break;
                    }
                    unint64_t v98 = *(void *)&v111[8 * v99];
                    if (!v98)
                    {
                      int64_t v99 = v81 + 7;
                      if (v81 + 7 >= v110) {
                        break;
                      }
                      unint64_t v98 = *(void *)&v111[8 * v99];
                      if (!v98)
                      {
                        int64_t v99 = v81 + 8;
                        if (v81 + 8 >= v110) {
                          break;
                        }
                        unint64_t v98 = *(void *)&v111[8 * v99];
                        if (!v98)
                        {
                          int64_t v100 = v81 + 9;
                          if (v81 + 9 >= v110) {
                            break;
                          }
                          unint64_t v98 = *(void *)&v111[8 * v100];
                          if (!v98)
                          {
                            while (1)
                            {
                              int64_t v99 = v100 + 1;
                              if (__OFADD__(v100, 1)) {
                                goto LABEL_87;
                              }
                              unint64_t v58 = v114;
                              double v82 = v106;
                              if (v99 >= v110) {
                                goto LABEL_78;
                              }
                              unint64_t v98 = *(void *)&v111[8 * v99];
                              ++v100;
                              if (v98) {
                                goto LABEL_77;
                              }
                            }
                          }
                          int64_t v99 = v81 + 9;
                          unint64_t v58 = v114;
                          double v82 = v106;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_77:
          unint64_t v85 = (v98 - 1) & v98;
          int64_t v81 = v99;
          unint64_t v87 = __clz(__rbit64(v98)) + (v99 << 6);
        }
        uint64_t v88 = 32 * v87;
        uint64_t v89 = *(void *)(*(void *)&v82 + 48) + 32 * v87;
        uint64_t v90 = *(void *)(v89 + 8);
        int v91 = *(_DWORD *)(v89 + 16);
        uint64_t v92 = 8 * v87;
        uint64_t v93 = *(void *)(*(void *)(*(void *)&v82 + 56) + v92);
        char v94 = *(unsigned char *)(v89 + 20);
        uint64_t v95 = *(void *)(*(void *)&v70 + 48) + v88;
        uint64_t v96 = *(void *)(v89 + 24);
        *(void *)uint64_t v95 = *(void *)v89;
        *(void *)(v95 + 8) = v90;
        *(_DWORD *)(v95 + 16) = v91;
        *(unsigned char *)(v95 + 20) = v94;
        *(void *)(v95 + 24) = v96;
        *(void *)(*(void *)(*(void *)&v70 + 56) + v92) = v93;
        swift_retain();
        swift_bridgeObjectRetain();
      }
    }
LABEL_78:
    swift_bridgeObjectRelease();
    uint64_t v64 = v108;
    uint64_t v55 = v109;
    uint64_t v72 = v115;
    uint64_t v71 = v113;
    unint64_t v66 = v107;
    if (v49) {
      goto LABEL_42;
    }
    goto LABEL_79;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
LABEL_83:
  uint64_t v102 = v27;
  v103 = (void *)v28;
  result._object = v103;
  result._uint64_t countAndFlagsBits = v102;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

void *static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)@<X0>(unsigned char *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v8 = *a2;
  double v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = a4[1];
  double v12 = 1.59271755e13;
  if (*a3 <= 1.59271755e13) {
    double v12 = *a3;
  }
  LOBYTE(v22) = *a1;
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__src = v13;
  unint64_t result = (*(void *(**)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t))(v11 + 160))(__dst, &v22, __src, ObjectType, v11);
  if ((__dst[1] & 1) == 0)
  {
    double v16 = *(double *)__dst;
    if (v9 >= v8) {
      double v16 = *(double *)__dst + *((double *)__dst + 1) + -1.0;
    }
    *(void *)&__src[0] = v10;
    *((void *)&__src[0] + 1) = v11;
    double v21 = v8;
    double v22 = v16;
    Calendar.dateComponents(_:from:to:)(a5, &v22, &v21, __dst);
    *(void *)&__src[2] = *(void *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(void *)&__src[3] = *(void *)&__dst[3];
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(void *)&__src[4] = *(void *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(void *)&__src[5] = *(void *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(void *)&__src[6] = *(void *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(void *)&__src[7] = *(void *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(void *)&__src[8] = *(void *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(void *)&__src[9] = *(void *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(void *)&__src[10] = *(void *)&__dst[10];
    BYTE8(__src[10]) = BYTE8(__dst[10]);
    *(void *)&__src[11] = *(void *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(void *)&__src[12] = *(void *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(void *)&__src[13] = *(void *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(void *)&__src[14] = *(void *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(void *)&__src[15] = *(void *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    *(void *)&__src[16] = *(void *)&__dst[16];
    *(void *)&__src[17] = *(void *)&__dst[17];
    WORD4(__src[17]) = WORD4(__dst[17]);
    memcpy(__dst, __src, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)__src);
    if (one-time initialization token for sortedAllowedComponents != -1) {
      swift_once();
    }
    outlined retain of DateComponents((uint64_t)__src);
    uint64_t v17 = swift_bridgeObjectRetain();
    double v18 = specialized Sequence.compactMap<A>(_:)(v17, __dst);
    outlined release of DateComponents((uint64_t)__src);
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)__src);
    if (v18[2])
    {
      uint64_t v19 = v18[5];
      *(unsigned char *)a6 = *((unsigned char *)v18 + 32);
      *(void *)(a6 + 8) = v19;
      outlined release of DateComponents((uint64_t)__src);
      return (void *)swift_bridgeObjectRelease();
    }
    outlined release of DateComponents((uint64_t)__src);
    unint64_t result = (void *)swift_bridgeObjectRelease();
  }
  *(_OWORD *)a6 = xmmword_1821A0620;
  return result;
}

uint64_t static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X8>)
{
  double v7 = *a1;
  double v8 = *a2;
  int v9 = *a5;
  double v97 = a3[1];
  double v98 = *a3;
  *(double *)__dst = *a3;
  *(double *)&__dst[1] = v97;
  if (one-time initialization token for sortedAllowedComponents != -1) {
    swift_once();
  }
  uint64_t v10 = static ICURelativeDateFormatter.sortedAllowedComponents;
  uint64_t v11 = *(void *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
  uint64_t v99 = a4;
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    double v13 = MEMORY[0x1E4FBC860];
    while (2)
    {
      int v16 = *(unsigned __int8 *)(v10 + v12 + 32);
      char v17 = v16 - 1;
      if ((v16 - 1) > 0xA || ((0x63Fu >> v17) & 1) == 0) {
        goto LABEL_125;
      }
      switch(v9)
      {
        case 1:
          goto LABEL_23;
        case 2:
          if (((0x1C1u >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 3:
          if (((0x7C3u >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 4:
          if (((0x7C7u >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 5:
          if (((0x7CFu >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 6:
          if (((0x7DFu >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 10:
        case 11:
          if (((0x1C3u >> v17) & 1) == 0)
          {
LABEL_23:
            double v180 = v13;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v13 + 16) + 1, 1);
              double v13 = v180;
            }
            unint64_t v15 = *(void *)(*(void *)&v13 + 16);
            unint64_t v14 = *(void *)(*(void *)&v13 + 24);
            if (v15 >= v14 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
              double v13 = v180;
            }
            *(void *)(*(void *)&v13 + 16) = v15 + 1;
            *(unsigned char *)(*(void *)&v13 + v15 + 32) = v16;
          }
LABEL_8:
          if (v11 != ++v12) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        default:
          goto LABEL_127;
      }
      break;
    }
  }
  else
  {
    double v13 = MEMORY[0x1E4FBC860];
  }
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  *(double *)&uint64_t v18 = COERCE_DOUBLE(Set.init(minimumCapacity:)());
  double v180 = *(double *)&v18;
  uint64_t v19 = *(void *)(*(void *)&v13 + 16);
  if (v19)
  {
    for (uint64_t i = 0; i != v19; ++i)
    {
      uint64_t v21 = *(void *)&v13 + i;
      specialized Set._Variant.insert(_:)(__src, *(unsigned __int8 *)(v21 + 32));
    }
    swift_release();
    uint64_t v22 = *(void *)&v180;
  }
  else
  {
    uint64_t v22 = v18;
    swift_release();
  }
  uint64_t v23 = specialized Set.union<A>(_:)((uint64_t)&outlined read-only object #0 of static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:), v22);
  double v180 = v7;
  __src[0] = v8;
  Calendar.dateComponents(_:from:to:)(v23, &v180, __src, &v144);
  swift_bridgeObjectRelease();
  double v100 = v162;
  uint64_t v96 = v164;
  if (v163)
  {
    int v101 = 1;
    int v94 = v165;
  }
  else
  {
    if (v165)
    {
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    uint64_t v24 = v164;
    if (v164 < 0)
    {
      uint64_t v24 = -v164;
      if (__OFSUB__(0, v164)) {
        goto LABEL_122;
      }
    }
    if (v24 >= 500000000)
    {
      unint64_t v25 = (v164 > 0) | (unint64_t)(v164 >> 63);
      BOOL v26 = __OFADD__(*(void *)&v162, v25);
      *(void *)&double v27 = *(void *)&v162 + v25;
      if (v26)
      {
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
      int v94 = 0;
      BOOL v28 = *(void *)&v27 == 0x7FFFFFFFFFFFFFFFLL;
      if (v27 == NAN) {
        double v27 = 0.0;
      }
      double v100 = v27;
      double v162 = v27;
      int v101 = v28;
      BOOL v163 = v28;
    }
    else
    {
      int v94 = 0;
      int v101 = 0;
    }
  }
  int v102 = v175;
  int v103 = v177;
  double v63 = v144;
  double v64 = v145;
  __src[0] = v144;
  __src[1] = v145;
  double v65 = v146;
  double v66 = v147;
  __src[2] = v146;
  __src[3] = v147;
  double v91 = v148;
  __src[4] = v148;
  int v92 = v149;
  LOBYTE(__src[5]) = v149;
  double v89 = v150;
  __src[6] = v150;
  int v90 = v151;
  LOBYTE(__src[7]) = v151;
  double v74 = v152;
  __src[8] = v152;
  int v75 = v153;
  LOBYTE(__src[9]) = v153;
  double v76 = v154;
  __src[10] = v154;
  int v77 = v155;
  LOBYTE(__src[11]) = v155;
  double v70 = v156;
  __src[12] = v156;
  int v71 = v157;
  LOBYTE(__src[13]) = v157;
  double v78 = v158;
  __src[14] = v158;
  int v79 = v159;
  LOBYTE(__src[15]) = v159;
  double v80 = v160;
  __src[16] = v160;
  int v81 = v161;
  LOBYTE(__src[17]) = v161;
  _OWORD __src[18] = v100;
  LOBYTE(__src[19]) = v101;
  *(void *)&__src[20] = v164;
  LOBYTE(__src[21]) = v94;
  double v82 = v166;
  __src[22] = v166;
  int v83 = v167;
  LOBYTE(__src[23]) = v167;
  double v84 = v168;
  __src[24] = v168;
  int v85 = v169;
  LOBYTE(__src[25]) = v169;
  double v86 = v170;
  __src[26] = v170;
  int v87 = v171;
  LOBYTE(__src[27]) = v171;
  double v68 = v172;
  __src[28] = v172;
  char v69 = v173;
  LOBYTE(__src[29]) = v173;
  double v88 = v174;
  __src[30] = v174;
  LOBYTE(__src[31]) = v175;
  LOBYTE(__src[33]) = v177;
  int v73 = v179;
  LOWORD(__src[35]) = v179;
  double v95 = v176;
  __src[32] = v176;
  double v72 = v178;
  __src[34] = v178;
  char v67 = HIBYTE(v179);
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__src);
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = specialized Sequence.compactMap<A>(_:)(v29, __dst);
  swift_bridgeObjectRelease();
  outlined release of DateComponents((uint64_t)__src);
  if (v30[2]) {
    unsigned __int8 v31 = *((unsigned char *)v30 + 32);
  }
  else {
    unsigned __int8 v31 = 18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v32 = swift_bridgeObjectRetain();
  specialized BidirectionalCollection.last(where:)(v32, a4, v31, (char *)&v180);
  swift_bridgeObjectRelease();
  uint64_t v33 = LOBYTE(v180);
  if (LOBYTE(v180) == 18)
  {
    uint64_t result = outlined release of DateComponents((uint64_t)__src);
    *(_OWORD *)a6 = xmmword_1821A0620;
    return result;
  }
  uint64_t v35 = *(void *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
  if (v35)
  {
    uint64_t v36 = (unsigned __int8 *)(static ICURelativeDateFormatter.sortedAllowedComponents + 32);
    while (2)
    {
      int v38 = *v36++;
      char v37 = v38;
      int v39 = v38 - 1;
      if ((0x63Fu >> (v38 - 1)))
      {
        switch(LOBYTE(v180))
        {
          case 1:
            if (((0x63Eu >> v39) & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_63;
          case 2:
            if ((0x63Cu >> v39)) {
              goto LABEL_63;
            }
            goto LABEL_51;
          case 3:
            if ((0x38u >> v39)) {
              goto LABEL_63;
            }
            goto LABEL_51;
          case 4:
            if ((0x30u >> v39)) {
              goto LABEL_63;
            }
            goto LABEL_51;
          case 5:
            if (v39 == 5) {
              goto LABEL_63;
            }
            goto LABEL_51;
          case 6:
            goto LABEL_51;
          case 0xA:
          case 0xB:
            if ((0x3Cu >> v39))
            {
LABEL_63:
              uint64_t v40 = *(void *)&v89;
              int v41 = v90;
              switch(v39)
              {
                case 0:
                  goto LABEL_76;
                case 1:
                  uint64_t v40 = *(void *)&v74;
                  int v41 = v75;
                  goto LABEL_76;
                case 2:
                  uint64_t v40 = *(void *)&v76;
                  int v41 = v77;
                  goto LABEL_76;
                case 3:
                  uint64_t v40 = *(void *)&v78;
                  int v41 = v79;
                  goto LABEL_76;
                case 4:
                  uint64_t v40 = *(void *)&v80;
                  int v41 = v81;
                  goto LABEL_76;
                case 5:
                  uint64_t v40 = *(void *)&v100;
                  int v41 = v101;
                  goto LABEL_76;
                case 6:
                  uint64_t v40 = *(void *)&v82;
                  int v41 = v83;
                  goto LABEL_76;
                case 7:
                  uint64_t v40 = *(void *)&v84;
                  int v41 = v85;
                  goto LABEL_76;
                case 8:
                  uint64_t v40 = *(void *)&v86;
                  int v41 = v87;
                  goto LABEL_76;
                case 9:
                  uint64_t v40 = *(void *)&v88;
                  int v41 = v102;
                  goto LABEL_76;
                case 10:
                  uint64_t v40 = *(void *)&v95;
                  int v41 = v103;
LABEL_76:
                  double v42 = v100;
                  if (v41) {
                    uint64_t v43 = 0;
                  }
                  else {
                    uint64_t v43 = v40;
                  }
                  goto LABEL_79;
                default:
                  goto LABEL_126;
              }
            }
LABEL_51:
            if (--v35) {
              continue;
            }
            goto LABEL_65;
          default:
            goto LABEL_128;
        }
      }
      break;
    }
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
LABEL_65:
  if (v94)
  {
LABEL_130:
    __break(1u);
    JUMPOUT(0x181CD1D38);
  }
  double v42 = v100;
  char v37 = 13;
  uint64_t v43 = v96;
LABEL_79:
  double v44 = 0.0;
  double v45 = v91;
  int v46 = v92;
  switch(LOBYTE(v180))
  {
    case 1:
      double v45 = v89;
      int v46 = v90;
      goto LABEL_94;
    case 2:
      double v45 = v74;
      int v46 = v75;
      goto LABEL_94;
    case 3:
      double v45 = v76;
      int v46 = v77;
      goto LABEL_94;
    case 4:
      double v45 = v78;
      int v46 = v79;
      goto LABEL_94;
    case 5:
      double v45 = v80;
      int v46 = v81;
      goto LABEL_94;
    case 6:
      double v45 = v42;
      int v46 = v101;
      goto LABEL_94;
    case 7:
      double v45 = v82;
      int v46 = v83;
      goto LABEL_94;
    case 8:
      double v45 = v84;
      int v46 = v85;
      goto LABEL_94;
    case 9:
      double v45 = v86;
      int v46 = v87;
      goto LABEL_94;
    case 0xA:
      double v45 = v88;
      int v46 = v102;
      goto LABEL_94;
    case 0xB:
      double v45 = v95;
      int v46 = v103;
      goto LABEL_94;
    case 0xC:
      double v45 = v72;
      int v46 = v73;
      goto LABEL_94;
    case 0xD:
      double v45 = *(double *)&v96;
      int v46 = v94;
      goto LABEL_94;
    case 0xE:
    case 0xF:
    case 0x10:
      goto LABEL_97;
    case 0x11:
      double v45 = v70;
      int v46 = v71;
      goto LABEL_94;
    default:
LABEL_94:
      if (v46) {
        double v44 = 0.0;
      }
      else {
        double v44 = v45;
      }
LABEL_97:
      LOBYTE(v104) = v37;
      LOBYTE(v142[0]) = LOBYTE(v180);
      double v47 = 1.59271755e13;
      if (v8 <= 1.59271755e13) {
        double v47 = v8;
      }
      double v48 = fmax(v47, -2.11845067e11);
      uint64_t ObjectType = swift_getObjectType();
      double v180 = v48;
      uint64_t v50 = (*(uint64_t (**)(double *, double *, double *, uint64_t))(*(void *)&v97 + 144))(&v104, v142, &v180, ObjectType);
      if (v53) {
        goto LABEL_108;
      }
      uint64_t v54 = v43;
      if (v43 < 0)
      {
        uint64_t v54 = -v43;
        if (__OFSUB__(0, v43)) {
          goto LABEL_124;
        }
      }
      if (v54 + 0x4000000000000000 < 0) {
        goto LABEL_120;
      }
      if (__OFSUB__(v51, v50)) {
        goto LABEL_121;
      }
      if (2 * v54 >= v51 - v50)
      {
        uint64_t v55 = -1;
        if (v43 >= 1) {
          uint64_t v55 = 1;
        }
        BOOL v26 = __OFADD__(*(void *)&v44, v55);
        *(void *)&v44 += v55;
        if (v26) {
          goto LABEL_123;
        }
      }
LABEL_108:
      double v56 = v42;
      double v180 = v98;
      double v181 = v97;
      LOBYTE(v141) = v33;
      if (__OFSUB__(0, *(void *)&v44))
      {
        __break(1u);
        goto LABEL_119;
      }
      v142[0] = v8;
      Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v141, -*(void *)&v44, v52, (Swift::Bool)v142);
      if ((LOBYTE(v105) & 1) == 0)
      {
        double v58 = v104;
        double v104 = v98;
        double v105 = v97;
        v142[0] = v58;
        double v141 = v8;
        Calendar.dateComponents(_:from:to:)(v99, v142, &v141, &v180);
        outlined retain of DateComponents((uint64_t)&v180);
        uint64_t v59 = swift_bridgeObjectRetain();
        double v60 = specialized Sequence.compactMap<A>(_:)(v59, &v180);
        outlined release of DateComponents((uint64_t)&v180);
        swift_bridgeObjectRelease();
        outlined release of DateComponents((uint64_t)&v180);
        if (v60[2])
        {
          uint64_t v61 = *((unsigned __int8 *)v60 + 32);
          uint64_t v62 = v60[5];
          swift_bridgeObjectRelease();
          if (v61 != v33)
          {
            *(void *)a6 = v61;
            *(void *)(a6 + 8) = v62;
LABEL_116:
            double v104 = v63;
            double v105 = v64;
            double v106 = v65;
            double v107 = v66;
            double v108 = v91;
            char v109 = v92;
            double v110 = v89;
            char v111 = v90;
            double v112 = v74;
            char v113 = v75;
            double v114 = v76;
            char v115 = v77;
            double v116 = v70;
            char v117 = v71;
            double v118 = v78;
            char v119 = v79;
            double v120 = v80;
            char v121 = v81;
            double v122 = v56;
            char v123 = v101;
            uint64_t v124 = v96;
            char v125 = v94;
            double v126 = v82;
            char v127 = v83;
            double v128 = v84;
            char v129 = v85;
            double v130 = v86;
            char v131 = v87;
            double v132 = v68;
            char v133 = v69;
            double v134 = v88;
            char v135 = v102;
            char v137 = v103;
            double v136 = v95;
            double v138 = v72;
            char v139 = v73;
            char v140 = v67;
            int v57 = &v104;
            return outlined release of DateComponents((uint64_t)v57);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        *(void *)a6 = v33;
        *(double *)(a6 + 8) = v44;
        goto LABEL_116;
      }
      double v180 = v63;
      double v181 = v64;
      double v182 = v65;
      double v183 = v66;
      double v184 = v91;
      char v185 = v92;
      double v186 = v89;
      char v187 = v90;
      *(_OWORD *)a6 = xmmword_1821A0620;
      double v188 = v74;
      char v189 = v75;
      double v190 = v76;
      char v191 = v77;
      double v192 = v70;
      char v193 = v71;
      double v194 = v78;
      char v195 = v79;
      double v196 = v80;
      char v197 = v81;
      double v198 = v42;
      char v199 = v101;
      uint64_t v200 = v96;
      char v201 = v94;
      double v202 = v82;
      char v203 = v83;
      double v204 = v84;
      char v205 = v85;
      double v206 = v86;
      char v207 = v87;
      double v208 = v68;
      char v209 = v69;
      double v210 = v88;
      char v211 = v102;
      char v213 = v103;
      double v212 = v95;
      double v214 = v72;
      char v215 = v73;
      char v216 = v67;
      int v57 = &v180;
      return outlined release of DateComponents((uint64_t)v57);
  }
}

uint64_t specialized BidirectionalCollection.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_21:
    uint64_t result = swift_bridgeObjectRelease();
    char v19 = 18;
    goto LABEL_22;
  }
  uint64_t v7 = a1 + 32;
  uint64_t v8 = a2 + 56;
  int v9 = a3 - 1;
  while (1)
  {
    --v6;
    if (*(void *)(a2 + 16))
    {
      Swift::UInt v11 = *(unsigned __int8 *)(v7 + v6);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v11);
      Swift::Int v12 = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v14 = v12 & ~v13;
      if ((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
      {
        uint64_t v15 = *(void *)(a2 + 48);
        if (*(unsigned __int8 *)(v15 + v14) != v11)
        {
          uint64_t v16 = ~v13;
          do
          {
            unint64_t v14 = (v14 + 1) & v16;
            if (((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
              goto LABEL_6;
            }
          }
          while (*(unsigned __int8 *)(v15 + v14) != v11);
        }
        char v17 = v11 - 1;
        if (v11 - 1) <= 0xAu && ((0x63Fu >> v17)) {
          break;
        }
      }
    }
LABEL_6:
    if (!v6) {
      goto LABEL_21;
    }
  }
  switch(v9)
  {
    case 0:
      unsigned int v10 = 449;
      goto LABEL_5;
    case 1:
      unsigned int v10 = 451;
      goto LABEL_5;
    case 2:
      unsigned int v10 = 1991;
      goto LABEL_5;
    case 3:
      unsigned int v10 = 1999;
      goto LABEL_5;
    case 4:
      unsigned int v10 = 2015;
      goto LABEL_5;
    case 9:
    case 10:
      unsigned int v10 = 1987;
LABEL_5:
      if (((v10 >> v17) & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_23;
    default:
LABEL_23:
      char v19 = *(unsigned char *)(v7 + v6);
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
LABEL_22:
  *a4 = v19;
  return result;
}

uint64_t Date.RelativeFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  unsigned char v53[144];
  unsigned char v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  unsigned char v73[144];
  unsigned char v74[152];

  Swift::UInt v3 = v1[1];
  Swift::UInt v4 = v1[2];
  uint64_t v5 = *((void *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 4);
  uint64_t v7 = *((void *)v1 + 5);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  int v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v9(ObjectType, v5))
  {
    Swift::UInt8 v10 = 1;
LABEL_5:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v72, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v54);
  Hasher._combine(_:)(1u);
  if (v54[0] == 2)
  {
    Swift::Int v12 = 0;
  }
  else
  {
    Swift::Int v12 = v54[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  uint64_t v13 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
    char v17 = v54;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  unint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v53);
    char v17 = v53;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    if (!v56) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v58;
    if (!v58) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v16 = v58;
  if (!v58)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_23:
  uint64_t v18 = v59;
  Foundation::Date v52 = v6;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  char v19 = v60;
  Swift::Int v20 = v61;
  uint64_t v21 = v62;
  uint64_t v22 = v63;
  uint64_t v23 = v64;
  uint64_t v50 = v64;
  uint64_t v49 = v62;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v24 = v20;
    unint64_t v25 = v21;
    BOOL v26 = v22;
    double v27 = v22;
    BOOL v28 = v23;
    uint64_t v29 = v19;
    _CFObject.hash(into:)();
    uint64_t v51 = v19;
    if (v20)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v30 = v20;
      _CFObject.hash(into:)();

      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unsigned __int8 v31 = v23;
    uint64_t v32 = v20;
    uint64_t v33 = v21;
    BOOL v26 = v22;
    uint64_t v34 = v22;
    uint64_t v51 = 0;
    if (v20) {
      goto LABEL_28;
    }
  }
  Hasher._combine(_:)(0);
LABEL_31:
  if (v49)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v35 = v49;
    _CFObject.hash(into:)();

    if (v26) {
      goto LABEL_33;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    char v37 = v50;
    if (v50) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  Hasher._combine(_:)(0);
  if (!v26) {
    goto LABEL_36;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v36 = v26;
  _CFObject.hash(into:)();

  char v37 = v50;
  if (v50)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v38 = v37;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  int v38 = 0;
LABEL_38:

  int v39 = v65;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v6 = v52;
  uint64_t v40 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v41 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    double v42 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v70 == 2)
  {
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  if (v71 == 2)
  {
    double v44 = 0;
  }
  else
  {
    double v45 = v71 & 1;
    Hasher._combine(_:)(1u);
    double v44 = v45;
  }
  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  int v46 = swift_getObjectType();
  double v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 120);
  swift_unknownObjectRetain();
  v47(a1, v46, v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v7);
  return swift_bridgeObjectRelease();
}

uint64_t Date.RelativeFormatStyle.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  int v18 = v1[1];
  int v16 = v1[2];
  long long v9 = *(_OWORD *)(v1 + 8);
  long long v13 = *(_OWORD *)(v1 + 24);
  long long v14 = v9;
  uint64_t v15 = *((void *)v1 + 5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = v8;
  char v19 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v10 = v16;
    uint64_t v11 = v15;
    LOBYTE(v17) = v18;
    char v19 = 1;
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v17) = v10;
    char v19 = 2;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v17 = v14;
    char v19 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v17 = v13;
    char v19 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v17 = v11;
    char v19 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (void (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.RelativeFormatStyle.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(unsigned char *, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  unsigned char v48[144];
  unsigned char v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  void v67[18];
  unsigned char v68[144];
  unsigned char v69[144];
  unsigned char v70[80];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v6 = *((void *)v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if (v8(ObjectType, v4))
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v67, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v69) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v49);
  Hasher._combine(_:)(1u);
  if (v49[0] == 2)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v49[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  Swift::Int v12 = v50;
  if (!v50)
  {
    Hasher._combine(_:)(0);
    int v16 = v49;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  long long v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v48);
    int v16 = v48;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    if (!v51) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v52) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = v53;
    if (!v53) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v15 = v53;
  if (!v53)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v70, v15);
  swift_bridgeObjectRelease();
LABEL_23:
  long long v17 = v54;
  double v47 = v5;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v70, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v18 = v55;
  char v19 = v56;
  uint64_t v21 = v57;
  Swift::Int v20 = v58;
  uint64_t v22 = v59;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v23 = v19;
    uint64_t v24 = v21;
    unint64_t v25 = v20;
    BOOL v26 = v22;
    double v27 = v18;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    BOOL v28 = v22;
    uint64_t v29 = v19;
    uint64_t v30 = v21;
    unsigned __int8 v31 = v20;
  }
  int v46 = v18;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v32 = v19;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v21)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v33 = v21;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      if (v22) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v34 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  uint64_t v35 = 0;
LABEL_38:

  uint64_t v36 = v60;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v70, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v5 = v47;
  char v37 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    if (v62) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v70, v37);
  swift_bridgeObjectRelease();
  if (!v62) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v38 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v39 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v65 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = v65 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v66 == 2)
  {
    int v41 = 0;
  }
  else
  {
    double v42 = v66 & 1;
    Hasher._combine(_:)(1u);
    int v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  uint64_t v43 = swift_getObjectType();
  double v44 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v44(v70, v43, v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v70, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v19 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v9 = v17;
  char v19 = 1;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v10 = v17;
  char v19 = 2;
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v18 = v17;
  char v19 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v15 = v10;
  long long v16 = v17;
  char v19 = 4;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v14 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
  char v19 = 5;
  lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (void (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  v13[1] = v14;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v17;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)a2 = v9;
  *(unsigned char *)(a2 + 1) = v15;
  *(unsigned char *)(a2 + 2) = v18;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 24) = v14;
  *(void *)(a2 + 40) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle(void *a1)
{
  return Date.RelativeFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.RelativeFormatStyle()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  void (*v43)(unsigned char *, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  unsigned char v66[144];
  unsigned char v67[144];
  unsigned char v68[80];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v6 = *((void *)v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if (v8(ObjectType, v4))
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v65, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)&v47);
  Hasher._combine(_:)(1u);
  if (v47 == 2)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v47 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  Swift::Int v12 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v47);
    if (!v49) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  long long v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    int v15 = v51;
    if (!v51) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  int v15 = v51;
  if (!v51)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v15);
  swift_bridgeObjectRelease();
LABEL_22:
  long long v16 = v52;
  int v46 = v5;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v17 = v53;
  int v18 = v54;
  Swift::Int v20 = v55;
  char v19 = v56;
  uint64_t v21 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v22 = v18;
    uint64_t v23 = v20;
    uint64_t v24 = v19;
    unint64_t v25 = v21;
    BOOL v26 = v17;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    double v27 = v21;
    BOOL v28 = v18;
    uint64_t v29 = v20;
    uint64_t v30 = v19;
  }
  double v45 = v17;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unsigned __int8 v31 = v18;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v20)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v32 = v20;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_31;
      }
LABEL_35:
      Hasher._combine(_:)(0);
      if (v21) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_35;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v33 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v34 = v21;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  uint64_t v34 = 0;
LABEL_37:

  uint64_t v35 = v58;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v35);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v5 = v46;
  uint64_t v36 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_42;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v36);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v37 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v38 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v63 == 2)
  {
    int v39 = 0;
  }
  else
  {
    int v39 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v64 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    int v41 = v64 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  double v42 = swift_getObjectType();
  uint64_t v43 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v43(v68, v42, v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v68, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.RelativeFormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.RelativeFormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.RelativeFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();

  return swift_unknownObjectRetain();
}

__n128 static FormatStyle<>.relative(presentation:unitsStyle:)@<Q0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  char v5 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, (uint64_t *)v31);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = *(void *)&v31[0];
  uint64_t v9 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static CalendarCache.cache + 16;
  uint64_t v11 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v10, (uint64_t *)v31);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  __n128 v29 = (__n128)v31[0];
  uint64_t v12 = qword_1ECA48D18;
  if (qword_1ECA48D18)
  {
    uint64_t v27 = v9;
    uint64_t v28 = v8;
    char v13 = v5;
    char v14 = v4;
    *(void *)&v31[0] = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, qword_1ECA48D18, 0);
    uint64_t v15 = *(void *)&v31[0];
    unint64_t v16 = *(void *)(*(void *)&v31[0] + 16);
    long long v17 = &byte_1ECA48D28;
    do
    {
      char v19 = *v17++;
      char v18 = v19;
      *(void *)&v31[0] = v15;
      unint64_t v20 = *(void *)(v15 + 24);
      if (v16 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v16 + 1, 1);
        uint64_t v15 = *(void *)&v31[0];
      }
      *(void *)(v15 + 16) = v16 + 1;
      *(unsigned char *)(v15 + v16++ + 32) = v18;
      --v12;
    }
    while (v12);
    char v4 = v14;
    char v5 = v13;
    uint64_t v9 = v27;
    uint64_t v8 = v28;
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  uint64_t v21 = Set.init(minimumCapacity:)();
  *(void *)&v31[0] = v21;
  uint64_t v22 = *(void *)(v15 + 16);
  if (v22)
  {
    for (uint64_t i = 0; i != v22; ++i)
    {
      uint64_t v24 = v15 + i;
      specialized Set._Variant.insert(_:)(&v30, *(unsigned __int8 *)(v24 + 32));
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)&v31[0];
  }
  else
  {
    uint64_t v25 = v21;
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)a3 = v4;
  *(unsigned char *)(a3 + 1) = v5;
  *(unsigned char *)(a3 + 2) = 0;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v9;
  __n128 result = v29;
  *(__n128 *)(a3 + 24) = v29;
  *(void *)(a3 + 40) = v25;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

uint64_t specialized static Date.RelativeFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if ((*a1 ^ *a2)) {
    return 0;
  }
  if (a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v3 = *((void *)a1 + 5);
  long long v6 = *(_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *((void *)a2 + 5);
  long long v9 = *(_OWORD *)(a1 + 8);
  long long v8 = *(_OWORD *)(a2 + 8);
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) == 0) {
    return 0;
  }
  long long v9 = v7;
  long long v8 = v6;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) == 0) {
    return 0;
  }

  return specialized static Set.== infix(_:_:)(v3, v4);
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.RelativeFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  a1[3] = result;
  return result;
}

uint64_t sub_181CD4938@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_181CD4944(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t destroy for Date.RelativeFormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.RelativeFormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle()
{
  return &type metadata for Date.RelativeFormatStyle;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle()
{
  return &type metadata for Date.RelativeFormatStyle.UnitsStyle;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.Presentation()
{
  return &type metadata for Date.RelativeFormatStyle.Presentation;
}

unsigned char *storeEnumTagSinglePayload for Date.RelativeFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CD4CD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.RelativeFormatStyle.CodingKeys()
{
  return &unk_1ECA484E8;
}

unsigned char *storeEnumTagSinglePayload for Date.RelativeFormatStyle.Presentation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CD4DDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.Presentation.Option()
{
  return &type metadata for Date.RelativeFormatStyle.Presentation.Option;
}

void *type metadata accessor for Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  return &unk_1ECA48578;
}

unsigned char *storeEnumTagSinglePayload for Date.RelativeFormatStyle.UnitsStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CD4EF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle.Option()
{
  return &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option;
}

unsigned char *storeEnumTagSinglePayload for Date.RelativeFormatStyle.Presentation.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181CD4FC8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  return &unk_1ECA48298;
}

unint64_t specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.RelativeFormatStyle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t outlined retain of Date.RelativeFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Date.RelativeFormatStyle(uint64_t a1)
{
  return a1;
}

void *initializeBufferWithCopyOfBuffer for UTF16EndianAdaptor(void *a1, void *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t assignWithCopy for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t initializeWithTake for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF16EndianAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      BOOL v16 = v15 >= 2;
      unsigned int v17 = v15 - 2;
      if (!v16) {
        unsigned int v17 = -1;
      }
      if (v17 + 1 >= 2) {
        return v17;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for UTF16EndianAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x181CD5BC8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFD)
        {
          a1[v9] = a2 + 2;
        }
        else
        {
          char v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UTF16EndianAdaptor<A>()
{
  return swift_getWitnessTable();
}

Swift::UInt16_optional __swiftcall UTF16EndianAdaptor.Iterator.next()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(v0 + 40);
  if (*(unsigned char *)(v1 + v3) == 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
LABEL_3:
    dispatch thunk of IteratorProtocol.next()();
    if (v20 & 1) != 0 || (int v4 = v19, dispatch thunk of IteratorProtocol.next()(), (v18))
    {
      LOWORD(v5) = 0;
      int v6 = 1;
      return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
    }
    int v6 = 0;
    int v9 = v17;
    goto LABEL_17;
  }
  int v6 = 1;
  *(unsigned char *)(v1 + v3) = 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v26)
  {
LABEL_7:
    LOWORD(v5) = 0;
    return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
  }
  int v4 = v25;
  if (v25 >= 0xFEu)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v22 & 1) == 0)
    {
      if (v25 == 255 && v21 == 254)
      {
        uint64_t v7 = *(int *)(v2 + 36);
        int v8 = *(unsigned __int8 *)(v1 + v7);
        if (v8 != 2)
        {
          int v6 = 0;
          if (v8) {
            LOWORD(v5) = -2;
          }
          else {
            LOWORD(v5) = -257;
          }
          return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
        }
        *(unsigned char *)(v1 + v7) = 0;
      }
      else
      {
        if (v25 != 254 || v21 != 255)
        {
          int v6 = 0;
          unsigned int v5 = v25 | (v21 << 8);
          int v16 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
          BOOL v11 = (v16 & 1) != 0 || v16 == 2;
          LOWORD(v12) = __rev16(v5);
          goto LABEL_21;
        }
        uint64_t v14 = *(int *)(v2 + 36);
        int v15 = *(unsigned __int8 *)(v1 + v14);
        if (v15 != 2)
        {
          int v6 = 0;
          if (v15) {
            LOWORD(v5) = -257;
          }
          else {
            LOWORD(v5) = -2;
          }
          return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
        }
        *(unsigned char *)(v1 + v14) = 1;
      }
      goto LABEL_3;
    }
    goto LABEL_7;
  }
  dispatch thunk of IteratorProtocol.next()();
  if (v24) {
    goto LABEL_7;
  }
  int v6 = 0;
  int v9 = v23;
LABEL_17:
  int v10 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  unsigned int v5 = v4 | (v9 << 8);
  BOOL v11 = (v10 & 1) != 0 || v10 == 2;
  unsigned int v12 = bswap32(v5) >> 16;
LABEL_21:
  if (v11) {
    LOWORD(v5) = v12;
  }
  return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance UTF16EndianAdaptor<A>.Iterator@<X0>(uint64_t a1@<X8>)
{
  *(Swift::UInt16_optional *)&uint64_t result = UTF16EndianAdaptor.Iterator.next()();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>(a1, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UTF16EndianAdaptor.Iterator, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UTF16EndianAdaptor<A>(uint64_t a1)
{
  uint64_t v3 = specialized Sequence._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UTF32EndianAdaptor<A>()
{
  return swift_getWitnessTable();
}

uint64_t UTF16EndianAdaptor.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  char v26 = a2;
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v10 = &v23[-v9];
  uint64_t v11 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v16 = MEMORY[0x1F4188790](v15);
  char v18 = &v23[-v17];
  unsigned __int8 v19 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v11 + 16);
  v19(&v23[-v17], v4, v7, v16);
  int v24 = *(unsigned __int8 *)(v4 + *(int *)(a1 + 36));
  uint64_t v20 = v26(0, v7, v25);
  uint64_t v21 = *(int *)(v20 + 36);
  *(unsigned char *)(a3 + v21) = 2;
  *(unsigned char *)(a3 + *(int *)(v20 + 40)) = 0;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v19)(v14, v18, v7);
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v18, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v27 + 32))(a3, v10, v28);
  *(unsigned char *)(a3 + v21) = v24;
  return result;
}

Swift::UInt32_optional __swiftcall UTF32EndianAdaptor.Iterator.next()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(v0 + 40);
  if (*(unsigned char *)(v1 + v3) == 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
LABEL_3:
    dispatch thunk of IteratorProtocol.next()();
    if (v17)
    {
      unsigned int v7 = 0;
      unsigned __int8 v8 = 1;
      return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
    }
    int v4 = v16;
    dispatch thunk of IteratorProtocol.next()();
    int v5 = v16;
    dispatch thunk of IteratorProtocol.next()();
    int v6 = v16;
    dispatch thunk of IteratorProtocol.next()();
    goto LABEL_19;
  }
  unsigned __int8 v8 = 1;
  *(unsigned char *)(v1 + v3) = 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v17)
  {
LABEL_17:
    unsigned int v7 = 0;
    return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
  }
  int v4 = v16;
  if (v16 == 255 || !v16)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v17 & 1) == 0)
    {
      int v5 = v16;
      dispatch thunk of IteratorProtocol.next()();
      int v6 = v16;
      dispatch thunk of IteratorProtocol.next()();
      int v9 = v16;
      if (v16 != 255 || v16 != 254 || v16)
      {
        unsigned __int8 v8 = 0;
        goto LABEL_20;
      }
      uint64_t v10 = *(int *)(v2 + 36);
      int v11 = *(unsigned __int8 *)(v1 + v10);
      if (v11 != 2)
      {
        unsigned __int8 v8 = 0;
        if (v11) {
          unsigned int v7 = -131072;
        }
        else {
          unsigned int v7 = 65279;
        }
        return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
      }
      *(unsigned char *)(v1 + v10) = 0;
      goto LABEL_3;
    }
    goto LABEL_17;
  }
  dispatch thunk of IteratorProtocol.next()();
  if (v17) {
    goto LABEL_17;
  }
  int v5 = v16;
  dispatch thunk of IteratorProtocol.next()();
  int v6 = v16;
  dispatch thunk of IteratorProtocol.next()();
LABEL_19:
  unsigned __int8 v8 = 0;
  int v9 = v16;
LABEL_20:
  unsigned int v7 = v4 | (v5 << 8) | (v6 << 16) | (v9 << 24);
  int v13 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  BOOL v14 = (v13 & 1) != 0 || v13 == 2;
  unsigned int v15 = bswap32(v7);
  if (v14) {
    unsigned int v7 = v15;
  }
  return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance UTF32EndianAdaptor<A>.Iterator@<X0>(uint64_t a1@<X8>)
{
  *(Swift::UInt32_optional *)&uint64_t result = UTF32EndianAdaptor.Iterator.next()();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF32EndianAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>(a1, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UTF32EndianAdaptor.Iterator, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, uint64_t, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  UTF16EndianAdaptor.makeIterator()(a1, a2, a3);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v5(v3, a1);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UTF32EndianAdaptor<A>()
{
  return MEMORY[0x1F4183C10]();
}

uint64_t type metadata accessor for UTF32EndianAdaptor.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Sequence._copyToContiguousArray()()
{
  return MEMORY[0x1F4185CF8]();
}

uint64_t type metadata accessor for UTF16EndianAdaptor.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for UTF32EndianAdaptor.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for UTF32EndianAdaptor.Iterator(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    int v11 = (char *)a1 + v6;
    *int v11 = *((unsigned char *)a2 + v6);
    v11[1] = *((unsigned char *)a2 + v6 + 1);
  }
  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for UTF32EndianAdaptor.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned __int8 v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithCopy for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned __int8 v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned __int8 v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned __int8 v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF32EndianAdaptor.Iterator(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v9 = v8 + 2;
    char v10 = 8 * (v8 + 2);
    if ((v8 + 2) > 3) {
      goto LABEL_7;
    }
    unsigned int v12 = ((a2 - v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 >= 2)
    {
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v17 = v7 + (v9 | v13);
      return (v17 + 1);
    }
  }
LABEL_22:
  if (v6 < 0xFE)
  {
    unsigned int v16 = *((unsigned __int8 *)a1 + v8 + 1);
    if (v16 < 2) {
      return 0;
    }
    int v17 = (v16 + 2147483646) & 0x7FFFFFFF;
    return (v17 + 1);
  }
  BOOL v14 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for UTF32EndianAdaptor.Iterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = v10 + 2;
  if (a3 <= v9)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -2)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x181CD6E90);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 < 0xFE)
        {
          a1[v10 + 1] = a2 + 1;
        }
        else
        {
          int v17 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for Endianness(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CD6F84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Endianness()
{
  return &type metadata for Endianness;
}

unint64_t lazy protocol witness table accessor for type Endianness and conformance Endianness()
{
  unint64_t result = lazy protocol witness table cache variable for type Endianness and conformance Endianness;
  if (!lazy protocol witness table cache variable for type Endianness and conformance Endianness)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Endianness and conformance Endianness);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _CodingPathNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for _CodingPathNode()
{
  return swift_release();
}

void *assignWithCopy for _CodingPathNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for _CodingPathNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _CodingPathNode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _CodingPathNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for _CodingPathNode(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *destructiveProjectEnumData for _CodingPathNode(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for _CodingPathNode(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for _CodingPathNode()
{
  return &type metadata for _CodingPathNode;
}

uint64_t BufferReader.lineNumber.getter()
{
  uint64_t v1 = (unsigned char *)v0[2];
  unint64_t v2 = v0[3];
  uint64_t result = 1;
  if ((unint64_t)v1 >= v2) {
    return result;
  }
  while (*v1 == 13)
  {
    BOOL v4 = __OFADD__(result++, 1);
    if (v4) {
      goto LABEL_16;
    }
    if ((unint64_t)(v1 + 1) >= v2)
    {
LABEL_3:
      if ((unint64_t)++v1 >= v2) {
        return result;
      }
    }
    else
    {
      if (v1[1] == 10) {
        ++v1;
      }
      if ((unint64_t)++v1 >= v2) {
        return result;
      }
    }
  }
  if (v0[1] < 2) {
    goto LABEL_17;
  }
  if (*(unsigned char *)(*v0 + 1) != 10) {
    goto LABEL_3;
  }
  BOOL v4 = __OFADD__(result++, 1);
  if (!v4) {
    goto LABEL_3;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t static DecodingError._dataCorrupted<A>(_:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v31 = a6;
  unint64_t v32 = a3;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a7;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  size_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unsigned int v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  unsigned __int8 v19 = (char *)&v31 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v20((char *)&v31 - v18, a4, v12, v17);
  ((void (*)(char *, char *, uint64_t))v20)(v15, v19, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, a5) == 1)
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
    v21(v15, v12);
    _CodingPathNode.path.getter(v32);
    v21(v19, v12);
  }
  else
  {
    char v22 = v11;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a5);
    uint64_t v23 = _CodingPathNode.path.getter(v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    uint64_t v25 = v31;
    *(void *)(inited + 56) = a5;
    *(void *)(inited + 64) = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v22, a5);
    uint64_t v36 = v23;
    specialized Array.append<A>(contentsOf:)(inited);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v22, a5);
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = v35;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v28 = *MEMORY[0x1E4FBBA78];
  uint64_t v29 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v27, v28, v29);
}

uint64_t UInt8.digitValue.getter(char a1)
{
  if ((a1 - 58) >= 0xF6u) {
    return (a1 - 48);
  }
  else {
    return 0;
  }
}

uint64_t _parseHexIntegerDigits<A>(_:isNegative:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v47 = a3;
  uint64_t v49 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2 - 8);
  int v46 = (char *)v41 - v11;
  uint64_t v45 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  MEMORY[0x1F4188790](v13);
  unsigned int v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  MEMORY[0x1F4188790](v17);
  unsigned __int8 v19 = (char *)v41 - v18;
  v23.n128_f64[0] = MEMORY[0x1F4188790](v20);
  uint64_t v25 = (char *)v41 - v24;
  uint64_t v48 = a2;
  if (!a2)
  {
    int v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v21 + 56);
    uint64_t v40 = v49;
    return v39(v40, 1, 1, a4, v23);
  }
  uint64_t v50 = v22;
  uint64_t v44 = a5;
  uint64_t v52 = v21;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v51 = v25;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  unint64_t v26 = v52 + 8;
  if (v48 <= 0)
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))v26;
LABEL_18:
    v29(v51, a4);
    uint64_t v36 = v49;
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v49, v19, a4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v36, 0, 1, a4);
  }
  unint64_t v42 = (unint64_t)&a1[v48];
  uint64_t v27 = (void (**)(char *, char *, uint64_t))(v52 + 32);
  v41[1] = v26 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (1)
  {
    int v28 = *a1;
    if ((v28 - 48) <= 9)
    {
      uint64_t v43 = a1;
      char v53 = v28 - 48;
      lazy protocol witness table accessor for type UInt8 and conformance UInt8();
      goto LABEL_10;
    }
    if ((v28 - 65) > 5) {
      break;
    }
    uint64_t v43 = a1;
    char v54 = v28 - 55;
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
LABEL_10:
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    LODWORD(v48) = dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)();
    uint64_t v29 = *(void (**)(char *, uint64_t))v26;
    (*(void (**)(char *, uint64_t))v26)(v19, a4);
    char v30 = *v27;
    (*v27)(v19, v15, a4);
    uint64_t v31 = v15;
    unint64_t v32 = v50;
    if (v47) {
      int v33 = dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)();
    }
    else {
      int v33 = dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)();
    }
    int v34 = v33;
    v29(v32, a4);
    v29(v19, a4);
    uint64_t v35 = v46;
    v30(v46, v31, a4);
    v30(v19, v35, a4);
    if ((v48 | v34))
    {
      v29(v19, a4);
      v29(v51, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v49, 1, 1, a4);
    }
    unsigned int v15 = v31;
    a1 = v43 + 1;
    if ((unint64_t)(v43 + 1) >= v42) {
      goto LABEL_18;
    }
  }
  if ((v28 - 97) < 6)
  {
    uint64_t v43 = a1;
    char v55 = v28 - 87;
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    goto LABEL_10;
  }
  int v38 = *(void (**)(char *, uint64_t))(v52 + 8);
  v38(v19, a4);
  v38(v51, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v49, 1, 1, a4);
}

uint64_t sub_181CD7BA8()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t _asciiNumbers.getter()
{
  return 14640;
}

BOOL UInt8.isValidHexDigit.getter(unsigned __int8 a1)
{
  return a1 - 58 > 0xFFFFFFF5 || a1 - 71 > 0xFFFFFFF9 || a1 - 97 < 6;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _CodingKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _CodingKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

uint64_t assignWithCopy for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _CodingKey(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of _CodingKey(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of _CodingKey(v5, v7, v6, v8);
  return a1;
}

uint64_t storeEnumTagSinglePayload for _CodingKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _CodingKey(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _CodingKey()
{
  return &type metadata for _CodingKey;
}

uint64_t specialized static Date.daysBeforeMonth(_:year:)(char a1, uint64_t a2)
{
  int v2 = 0;
  int v3 = 0;
  switch(a1)
  {
    case 1:
      return v2 | (v3 << 16);
    case 2:
      int v3 = 0;
      int v2 = 31;
      return v2 | (v3 << 16);
    case 3:
      if (__OFADD__(a2, 1))
      {
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        JUMPOUT(0x181CD82C8);
      }
      uint64_t v4 = (a2 + 1) % 400;
      if (v4 < 0) {
        uint64_t v4 = -v4;
      }
      if ((v4 & 3) != 0 || v4 == 100 || v4 == 300 || v4 == 200)
      {
        int v3 = 0;
        int v2 = 59;
      }
      else
      {
        int v3 = 0;
        int v2 = 60;
      }
      break;
    case 4:
      if (__OFADD__(a2, 1)) {
        goto LABEL_105;
      }
      uint64_t v5 = (a2 + 1) % 400;
      if (v5 < 0) {
        uint64_t v5 = -v5;
      }
      if ((v5 & 3) != 0 || v5 == 100 || v5 == 300 || v5 == 200)
      {
        int v3 = 0;
        int v2 = 90;
      }
      else
      {
        int v3 = 0;
        int v2 = 91;
      }
      break;
    case 5:
      if (__OFADD__(a2, 1)) {
        goto LABEL_106;
      }
      uint64_t v6 = (a2 + 1) % 400;
      if (v6 < 0) {
        uint64_t v6 = -v6;
      }
      if ((v6 & 3) != 0 || v6 == 100 || v6 == 300 || v6 == 200)
      {
        int v3 = 0;
        int v2 = 120;
      }
      else
      {
        int v3 = 0;
        int v2 = 121;
      }
      break;
    case 6:
      if (__OFADD__(a2, 1)) {
        goto LABEL_107;
      }
      uint64_t v7 = (a2 + 1) % 400;
      if (v7 < 0) {
        uint64_t v7 = -v7;
      }
      if ((v7 & 3) != 0 || v7 == 100 || v7 == 300 || v7 == 200)
      {
        int v3 = 0;
        int v2 = 151;
      }
      else
      {
        int v3 = 0;
        int v2 = 152;
      }
      break;
    case 7:
      if (__OFADD__(a2, 1)) {
        goto LABEL_108;
      }
      uint64_t v8 = (a2 + 1) % 400;
      if (v8 < 0) {
        uint64_t v8 = -v8;
      }
      if ((v8 & 3) != 0 || v8 == 100 || v8 == 300 || v8 == 200)
      {
        int v3 = 0;
        int v2 = 181;
      }
      else
      {
        int v3 = 0;
        int v2 = 182;
      }
      break;
    case 8:
      if (__OFADD__(a2, 1)) {
        goto LABEL_109;
      }
      uint64_t v9 = (a2 + 1) % 400;
      if (v9 < 0) {
        uint64_t v9 = -v9;
      }
      if ((v9 & 3) != 0 || v9 == 100 || v9 == 300 || v9 == 200)
      {
        int v3 = 0;
        int v2 = 212;
      }
      else
      {
        int v3 = 0;
        int v2 = 213;
      }
      break;
    case 9:
      if (__OFADD__(a2, 1)) {
        goto LABEL_110;
      }
      uint64_t v10 = (a2 + 1) % 400;
      if (v10 < 0) {
        uint64_t v10 = -v10;
      }
      if ((v10 & 3) != 0 || v10 == 100 || v10 == 300 || v10 == 200)
      {
        int v3 = 0;
        int v2 = 243;
      }
      else
      {
        int v3 = 0;
        int v2 = 244;
      }
      break;
    case 10:
      if (__OFADD__(a2, 1)) {
        goto LABEL_111;
      }
      uint64_t v11 = (a2 + 1) % 400;
      if (v11 < 0) {
        uint64_t v11 = -v11;
      }
      if ((v11 & 3) != 0 || v11 == 100 || v11 == 300 || v11 == 200)
      {
        int v3 = 0;
        int v2 = 273;
      }
      else
      {
        int v3 = 0;
        int v2 = 274;
      }
      break;
    case 11:
      if (__OFADD__(a2, 1)) {
        goto LABEL_112;
      }
      uint64_t v12 = (a2 + 1) % 400;
      if (v12 < 0) {
        uint64_t v12 = -v12;
      }
      if ((v12 & 3) != 0 || v12 == 100 || v12 == 300 || v12 == 200)
      {
        int v3 = 0;
        int v2 = 304;
      }
      else
      {
        int v3 = 0;
        int v2 = 305;
      }
      break;
    case 12:
      if (__OFADD__(a2, 1)) {
        goto LABEL_113;
      }
      uint64_t v13 = (a2 + 1) % 400;
      if (v13 < 0) {
        uint64_t v13 = -v13;
      }
      if ((v13 & 3) != 0 || v13 == 100 || v13 == 300 || v13 == 200)
      {
        int v3 = 0;
        int v2 = 334;
      }
      else
      {
        int v3 = 0;
        int v2 = 335;
      }
      break;
    case 13:
      if (__OFADD__(a2, 1)) {
        goto LABEL_114;
      }
      uint64_t v14 = (a2 + 1) % 400;
      if (v14 < 0) {
        uint64_t v14 = -v14;
      }
      if ((v14 & 3) != 0 || v14 == 100 || v14 == 300 || v14 == 200)
      {
        int v3 = 0;
        int v2 = 365;
      }
      else
      {
        int v3 = 0;
        int v2 = 366;
      }
      break;
    default:
      int v2 = 0;
      int v3 = 1;
      return v2 | (v3 << 16);
  }
  return v2 | (v3 << 16);
}

uint64_t specialized static Date.daysSinceReferenceDate(year:month:day:)(uint64_t result, char a2, char a3)
{
  uint64_t v3 = result % 400;
  if (__OFSUB__(result, 400 * (result / 400)))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  double v5 = (double)(result / 400) * 146097.0;
  if (v3 < 0)
  {
    uint64_t v10 = v3 + 1;
    while (1)
    {
      uint64_t v13 = -(v10 % 400) & ((v10 % 400) >> 63);
      if ((v13 & 3) != 0)
      {
        uint64_t v11 = 0xD00000000000;
      }
      else
      {
        double v12 = 365.0;
        if (v13 == 100 || v13 == 300 || v13 == 200) {
          goto LABEL_18;
        }
        uint64_t v11 = 0xE00000000000;
      }
      *(void *)&double v12 = v11 & 0xFFFFFFFFFFFFLL | 0x4076000000000000;
LABEL_18:
      double v5 = v5 - v12;
      if (++v10 == 1) {
        goto LABEL_24;
      }
    }
  }
  if (v3)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v9 = ++v6 % 400;
      if (v6 % 400 < 0) {
        uint64_t v9 = -v9;
      }
      if ((v9 & 3) != 0)
      {
        uint64_t v7 = 0xD00000000000;
      }
      else
      {
        double v8 = 365.0;
        if (v9 == 100 || v9 == 300 || v9 == 200) {
          goto LABEL_7;
        }
        uint64_t v7 = 0xE00000000000;
      }
      *(void *)&double v8 = v7 & 0xFFFFFFFFFFFFLL | 0x4076000000000000;
LABEL_7:
      double v5 = v5 + v8;
    }
    while (v3 != v6);
  }
LABEL_24:
  uint64_t result = specialized static Date.daysBeforeMonth(_:year:)(a2, result);
  if ((char)(a3 - 1) != a3 - 1) {
    goto LABEL_27;
  }
  return result;
}

id protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance NSString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = NSString.init(stringLiteral:)(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t NSString._toCustomAnyHashable()()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  return AnyHashable.init<A>(_:)();
}

id NSString.init(format:locale:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = getVaList(_:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 488))(ObjectType, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFormat_locale_arguments_, a1, v7, v5);
  swift_unknownObjectRelease();
  return v8;
}

uint64_t static NSString.localizedStringWithFormat(_:_:)()
{
  withVaList<A>(_:_:)();
  return v1;
}

id closure #1 in static NSString.localizedStringWithFormat(_:_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v7 = v6;
  v10[3] = &type metadata for Locale;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v10[0] = LocaleCache.current.getter();
  v10[1] = v8;
  id result = NSString.__allocating_init(format:locale:arguments:)((uint64_t)v5, v7, v10, a1);
  *a3 = result;
  return result;
}

id partial apply for closure #1 in static NSString.localizedStringWithFormat(_:_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static NSString.localizedStringWithFormat(_:_:)(a1, *(void **)(v2 + 16), a2);
}

void specialized withVaList<A>(_:_:)(uint64_t a1, void *a2, void *a3)
{
  type metadata accessor for __VaListBuilder();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 8;
  v4[3] = 0;
  id v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_25:
    uint64_t v23 = __VaListBuilder.va_list()();
    static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    id v24 = objc_allocWithZone((Class)NSString);
    uint64_t v25 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v26 = objc_msgSend(v24, sel_initWithFormat_arguments_, v25, v23);
    swift_unknownObjectRelease();
    objc_msgSend(a2, sel_appendString_, v26);

    swift_release();
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v8 + 40 * v7, (uint64_t)v29);
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    uint64_t v9 = dispatch thunk of CVarArg._cVarArgEncoding.getter();
    uint64_t v10 = *v5;
    uint64_t v11 = *(void *)(v9 + 16);
    BOOL v12 = __OFADD__(*v5, v11);
    uint64_t v13 = *v5 + v11;
    if (v12) {
      break;
    }
    uint64_t v14 = v9;
    uint64_t v15 = v4[4];
    if (v15 >= v13) {
      goto LABEL_18;
    }
    if (v15 + 0x4000000000000000 < 0) {
      goto LABEL_28;
    }
    uint64_t v16 = (char *)v4[5];
    if (2 * v15 > v13) {
      uint64_t v13 = 2 * v15;
    }
    v4[4] = v13;
    if ((unint64_t)(v13 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_29;
    }
    uint64_t v17 = (char *)swift_slowAlloc();
    v4[5] = v17;
    if (v16)
    {
      if (v17 != v16 || v17 >= &v16[8 * v10]) {
        memmove(v17, v16, 8 * v10);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t v17 = (char *)v4[5];
    }
    if (!v17) {
      goto LABEL_30;
    }
    uint64_t v19 = *(void *)(v14 + 16);
    if (v19)
    {
      uint64_t v20 = (uint64_t *)(v14 + 32);
      uint64_t v21 = *v5;
      while (1)
      {
        uint64_t v22 = *v20++;
        *(void *)&v17[8 * v21] = v22;
        uint64_t v21 = *v5 + 1;
        if (__OFADD__(*v5, 1)) {
          break;
        }
        *id v5 = v21;
        if (!--v19) {
          goto LABEL_3;
        }
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v7;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    if (v7 == v6) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  void v30[4];

  type metadata accessor for __VaListBuilder();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 8;
  v4[3] = 0;
  id v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 32;
    while (1)
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v8 + 40 * v7, (uint64_t)v30);
      __swift_project_boxed_opaque_existential_1(v30, v30[3]);
      uint64_t v9 = dispatch thunk of CVarArg._cVarArgEncoding.getter();
      uint64_t v10 = *v5;
      uint64_t v11 = *(void *)(v9 + 16);
      BOOL v12 = __OFADD__(*v5, v11);
      uint64_t v13 = *v5 + v11;
      if (v12)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
      uint64_t v14 = v9;
      uint64_t v15 = v4[4];
      if (v15 >= v13) {
        goto LABEL_18;
      }
      if (v15 + 0x4000000000000000 < 0) {
        goto LABEL_29;
      }
      uint64_t v16 = (char *)v4[5];
      if (2 * v15 > v13) {
        uint64_t v13 = 2 * v15;
      }
      v4[4] = v13;
      if ((unint64_t)(v13 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_30;
      }
      uint64_t v17 = (char *)swift_slowAlloc();
      v4[5] = v17;
      if (v16) {
        break;
      }
LABEL_19:
      if (!v17) {
        goto LABEL_31;
      }
      uint64_t v19 = *(void *)(v14 + 16);
      if (v19)
      {
        uint64_t v20 = (uint64_t *)(v14 + 32);
        uint64_t v21 = *v5;
        while (1)
        {
          uint64_t v22 = *v20++;
          *(void *)&v17[8 * v21] = v22;
          uint64_t v21 = *v5 + 1;
          if (__OFADD__(*v5, 1)) {
            break;
          }
          *id v5 = v21;
          if (!--v19) {
            goto LABEL_3;
          }
        }
        __break(1u);
        goto LABEL_28;
      }
LABEL_3:
      ++v7;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      if (v7 == v6) {
        goto LABEL_25;
      }
    }
    if (v17 != v16 || v17 >= &v16[8 * v10]) {
      memmove(v17, v16, 8 * v10);
    }
    __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
    uint64_t v17 = (char *)v4[5];
    goto LABEL_19;
  }
LABEL_25:
  uint64_t v23 = __VaListBuilder.va_list()();
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v24 = objc_allocWithZone((Class)NSString);
  uint64_t v25 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v24, sel_initWithFormat_arguments_, v25, v23);
  swift_unknownObjectRelease();
  uint64_t v27 = objc_msgSend(a2, sel_stringByAppendingString_, v26);

  if (!v27) {
    goto LABEL_32;
  }
  swift_release();
}

uint64_t NSString.appendingFormat(_:_:)(void *a1, uint64_t a2)
{
  id v5 = v2;
  id v6 = a1;
  specialized withVaList<A>(_:_:)(a2, v5, v6);
  uint64_t v8 = v7;

  return v8;
}

void NSMutableString.appendFormat(_:_:)(void *a1, uint64_t a2)
{
  id v5 = v2;
  id v6 = a1;

  specialized withVaList<A>(_:_:)(a2, v5, v6);
}

id NSString.customPlaygroundQuickLook.getter@<X0>(uint64_t a1@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

id protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSString@<X0>(uint64_t a1@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t base witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral in NSString()
{
  return lazy protocol witness table accessor for type NSString and conformance NSString(&lazy protocol witness table cache variable for type NSString and conformance NSString);
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in NSString()
{
  return MEMORY[0x1E4FBBA08];
}

uint64_t base witness table accessor for ExpressibleByUnicodeScalarLiteral in NSString()
{
  return lazy protocol witness table accessor for type NSString and conformance NSString(&lazy protocol witness table cache variable for type NSString and conformance NSString);
}

uint64_t lazy protocol witness table accessor for type NSString and conformance NSString(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSString();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in NSString()
{
  return MEMORY[0x1E4FBBA20];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in NSString()
{
  return MEMORY[0x1E4FBBA18];
}

uint64_t Expression.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = 8 * v9;
  uint64_t v54 = v9;
  uint64_t v49 = a3;
  uint64_t v51 = v6;
  if (v9 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v12)
    {
      unint64_t v13 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v14 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v15 = v54;
      do
      {
        v13 += 8;
        *v14++ = type metadata accessor for PredicateExpressions.Variable();
        --v15;
      }
      while (v15);
    }
    uint64_t v16 = v54;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = v16;
    uint64_t v5 = v4;
    uint64_t v6 = v51;
  }
  uint64_t v17 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  char v53 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v5;
  if (v9 == 1)
  {
    uint64_t v20 = v18;
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t v21 = v20;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v23 = TupleTypeMetadata2;
  }
  else
  {
    uint64_t v52 = v18;
    uint64_t v48 = &v43;
    MEMORY[0x1F4188790](v18);
    if (v9)
    {
      unint64_t v24 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v25 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v26 = v54;
      do
      {
        v24 += 8;
        type metadata accessor for PredicateExpressions.Variable();
        *v25++ = swift_getTupleTypeMetadata2();
        --v26;
      }
      while (v26);
    }
    uint64_t v9 = v54;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata();
    uint64_t v23 = TupleTypeMetadata2;
    uint64_t v6 = v51;
    uint64_t v21 = v52;
  }
  uint64_t v48 = &v43;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v28 = (char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v6, (uint64_t)v56);
  uint64_t v45 = v58;
  uint64_t v46 = v57;
  uint64_t v44 = __swift_project_boxed_opaque_existential_1(v56, v57);
  int v47 = &v43;
  double v29 = MEMORY[0x1F4188790](v44);
  uint64_t v52 = (void **)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, void **, double))(v17 + 16))(v53, v6 + *(int *)(a2 + 44), v21, v29);
  uint64_t v51 = *(void *)(a2 + 24);
  if (v9)
  {
    char v30 = (char **)v52;
    uint64_t v31 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v32 = (int *)(v21 + 4);
    int v33 = (int *)(v23 + 32);
    uint64_t v34 = v9;
    do
    {
      if (v9 == 1) {
        int v39 = 0;
      }
      else {
        int v39 = *v33;
      }
      uint64_t v40 = *v31;
      type metadata accessor for PredicateExpressions.Variable();
      uint64_t v41 = swift_getTupleTypeMetadata2();
      if (v54 == 1) {
        int v35 = 0;
      }
      else {
        int v35 = *v32;
      }
      uint64_t v36 = &v28[v39];
      uint64_t v37 = &v36[*(int *)(v41 + 48)];
      *(void *)uint64_t v36 = *(void *)&v53[v35];
      uint64_t v38 = *v8++;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v37, v38, v40);
      *v30++ = v36;
      v32 += 4;
      v33 += 4;
      ++v31;
      --v34;
      uint64_t v9 = v54;
    }
    while (v34);
  }
  PredicateBindings.init<each A>(_:)(v52, v9, v51, &v59);
  uint64_t v55 = v59;
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v45 + 8) + 16))(&v55, v46);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
}

uint64_t Expression.expression.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v1, a1);
}

uint64_t Expression.variable.getter@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v7 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v5)
    {
      unint64_t v9 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v11 = v5;
      do
      {
        v9 += 8;
        *v10++ = type metadata accessor for PredicateExpressions.Variable();
        --v11;
      }
      while (v11);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  double v12 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v2 + *(int *)(a1 + 44), v7, v12);
  if (v5)
  {
    uint64_t v17 = (int *)(v7 + 32);
    uint64_t v18 = v5;
    do
    {
      if (v5 == 1) {
        int v19 = 0;
      }
      else {
        int v19 = *v17;
      }
      uint64_t v20 = *a2++;
      *uint64_t v20 = *(void *)&v14[v19];
      v17 += 4;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t Expression.init(_:)@<X0>(void (*a1)(long long *__return_ptr, char **)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v35)(long long *__return_ptr, char **);
  uint64_t v36;
  long long v37[2];

  v34[2] = a2;
  int v35 = a1;
  uint64_t v36 = a5;
  unint64_t v6 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v7 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v9 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (a3)
    {
      uint64_t v10 = (void *)((char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v11 = a3;
      do
      {
        v6 += 8;
        *v10++ = type metadata accessor for PredicateExpressions.Variable();
        --v11;
      }
      while (v11);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = v34;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v34 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v34 - v19;
  if (a3)
  {
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    uint64_t v21 = (int *)(v9 + 32);
    uint64_t v22 = a3;
    do
    {
      if (a3 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      *(void *)&v20[v23] = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  uint64_t v24 = v36 + *(int *)(type metadata accessor for Expression() + 44);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v24, v20, v9);
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char **)((char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v24, v9, v26);
  if (a3)
  {
    int v28 = (int *)(v9 + 32);
    double v29 = v27;
    uint64_t v30 = a3;
    do
    {
      if (a3 == 1)
      {
        LODWORD(v31) = 0;
        unint64_t v32 = v17;
      }
      else
      {
        uint64_t v31 = *v28;
        unint64_t v32 = &v17[v31];
      }
      *(void *)unint64_t v32 = *(void *)&v14[(int)v31];
      *v29++ = v32;
      v28 += 4;
      --v30;
    }
    while (v30);
  }
  v35(v37, v27);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v37, v36);
}

void *initializeBufferWithCopyOfBuffer for Expression(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    uint64_t v8 = (**(uint64_t (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v9 = *(int *)(a3 + 44);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    }
    else
    {
      MEMORY[0x1F4188790](v8);
      if (v12)
      {
        unint64_t v16 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v17 = (uint64_t *)((char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v18 = v12;
        do
        {
          v16 += 8;
          *v17++ = type metadata accessor for PredicateExpressions.Variable();
          --v18;
        }
        while (v18);
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16))(v10, v11);
  }
  return v4;
}

uint64_t initializeWithCopy for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = (**(uint64_t (***)(void))(v6 - 8))();
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v7);
    if (v9)
    {
      unint64_t v12 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v14 = v9;
      do
      {
        v12 += 8;
        *v13++ = type metadata accessor for PredicateExpressions.Variable();
        --v14;
      }
      while (v14);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16))(a1 + v8, a2 + v8);
  return a1;
}

uint64_t *assignWithCopy for Expression(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v6 = __swift_assign_boxed_opaque_existential_1(a1, a2);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    if (v8)
    {
      unint64_t v11 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v12 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v13 = v8;
      do
      {
        v11 += 8;
        *v12++ = type metadata accessor for PredicateExpressions.Variable();
        --v13;
      }
      while (v13);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 24))((char *)a1 + v7, (char *)a2 + v7);
  return a1;
}

uint64_t initializeWithTake for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v7)
    {
      unint64_t v11 = *(void *)(v9 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v12 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v13 = v7;
      do
      {
        v11 += 8;
        *v12++ = type metadata accessor for PredicateExpressions.Variable();
        --v13;
      }
      while (v13);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32))(a1 + v6, a2 + v6);
  return a1;
}

uint64_t assignWithTake for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_destroy_boxed_opaque_existential_1(a1);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    if (v9)
    {
      unint64_t v12 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v14 = v9;
      do
      {
        v12 += 8;
        *v13++ = type metadata accessor for PredicateExpressions.Variable();
        --v14;
      }
      while (v14);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40))(a1 + v8, a2 + v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181CD9DDC);
}

uint64_t sub_181CD9DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = *(void *)(a3 + 16);
    if (v8 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      if (v8)
      {
        unint64_t v11 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v12 = (uint64_t *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v13 = v8;
        do
        {
          v11 += 8;
          *v12++ = type metadata accessor for PredicateExpressions.Variable();
          --v13;
        }
        while (v13);
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 44), a2);
  }
}

uint64_t storeEnumTagSinglePayload for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181CD9F38);
}

uint64_t sub_181CD9F38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    }
    else
    {
      MEMORY[0x1F4188790](result);
      if (v7)
      {
        unint64_t v10 = *(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v11 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v12 = v7;
        do
        {
          v10 += 8;
          *v11++ = type metadata accessor for PredicateExpressions.Variable();
          --v12;
        }
        while (v12);
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2);
  }
  return result;
}

unint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v7 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = a1;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            unint64_t v7 = (BYTE1(a1) - 48);
            uint64_t v14 = v3 - 2;
            if (v14)
            {
              uint64_t v15 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v16 = *v15 - 48;
                if (v16 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v7, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v13 = __CFADD__(10 * v7, v16);
                unint64_t v7 = 10 * v7 + v16;
                if (v13) {
                  goto LABEL_36;
                }
                ++v15;
                if (!--v14) {
                  goto LABEL_43;
                }
              }
            }
            goto LABEL_43;
          }
          goto LABEL_36;
        }
        goto LABEL_56;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          if ((a1 - 48) <= 9u)
          {
            unint64_t v7 = (a1 - 48);
            uint64_t v19 = v3 - 1;
            if (v19)
            {
              uint64_t v20 = (unsigned __int8 *)v23 + 1;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v7, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v13 = __CFADD__(10 * v7, v21);
                unint64_t v7 = 10 * v7 + v21;
                if (v13) {
                  goto LABEL_36;
                }
                ++v20;
                if (!--v19) {
                  goto LABEL_43;
                }
              }
            }
            goto LABEL_43;
          }
LABEL_36:
          unint64_t v7 = 0;
          char v9 = 1;
LABEL_37:
          char v24 = v9;
LABEL_38:
          char v17 = v24;
          goto LABEL_39;
        }
        goto LABEL_55;
      }
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            unint64_t v7 = -(uint64_t)(BYTE1(a1) - 48);
            if (BYTE1(a1) == 48)
            {
              uint64_t v10 = v3 - 2;
              if (v10)
              {
                unint64_t v11 = (unsigned __int8 *)v23 + 2;
                do
                {
                  unsigned int v12 = *v11 - 48;
                  if (v12 > 9) {
                    goto LABEL_36;
                  }
                  if (!is_mul_ok(v7, 0xAuLL)) {
                    goto LABEL_36;
                  }
                  BOOL v13 = 10 * v7 >= v12;
                  unint64_t v7 = 10 * v7 - v12;
                  if (!v13) {
                    goto LABEL_36;
                  }
                  ++v11;
                }
                while (--v10);
              }
LABEL_43:
              char v24 = 0;
              goto LABEL_38;
            }
          }
          goto LABEL_36;
        }
LABEL_56:
        char v24 = v3;
        unint64_t v7 = 0;
        goto LABEL_38;
      }
      __break(1u);
    }
    __break(1u);
LABEL_55:
    LOBYTE(v3) = 1;
    goto LABEL_56;
  }
  unint64_t v7 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
  char v17 = v22;
LABEL_39:
  swift_bridgeObjectRelease();
  if (v17) {
    return 0;
  }
  else {
    return v7;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  void v24[2];
  char v25;

  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    char v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10);
    swift_bridgeObjectRelease();
    if ((v8 & 0x100000000) == 0) {
      goto LABEL_39;
    }
LABEL_48:
    LODWORD(v8) = 0;
    uint64_t v19 = 1;
    return v8 | ((unint64_t)v19 << 32);
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v24[0] = a1;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LODWORD(v8) = (BYTE1(a1) - 48);
          if (v8 <= 9)
          {
            BOOL v13 = v3 - 2;
            if (v13)
            {
              uint64_t v14 = (unsigned __int8 *)v24 + 2;
              while (1)
              {
                uint64_t v15 = *v14 - 48;
                if (v15 > 9) {
                  goto LABEL_35;
                }
                unsigned int v16 = 10 * v8;
                if ((v16 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_35;
                }
                LODWORD(v8) = v16 + v15;
                if (__CFADD__(v16, v15)) {
                  goto LABEL_35;
                }
                ++v14;
                if (!--v13) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_37;
          }
          goto LABEL_35;
        }
        goto LABEL_54;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LODWORD(v8) = (a1 - 48);
          if (v8 <= 9)
          {
            char v17 = v3 - 1;
            if (v17)
            {
              uint64_t v20 = (unsigned __int8 *)v24 + 1;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_35;
                }
                char v22 = 10 * v8;
                if ((v22 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_35;
                }
                LODWORD(v8) = v22 + v21;
                if (__CFADD__(v22, v21)) {
                  goto LABEL_35;
                }
                ++v20;
                if (!--v17) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_37;
          }
LABEL_35:
          LODWORD(v8) = 0;
          uint64_t v25 = 1;
          goto LABEL_38;
        }
        goto LABEL_53;
      }
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            LODWORD(v8) = -(BYTE1(a1) - 48);
            if (BYTE1(a1) == 48)
            {
              char v9 = v3 - 2;
              if (v9)
              {
                uint64_t v10 = (unsigned __int8 *)v24 + 2;
                do
                {
                  unint64_t v11 = *v10 - 48;
                  if (v11 > 9) {
                    goto LABEL_35;
                  }
                  unsigned int v12 = 10 * v8;
                  if ((v12 & 0xFFFFFFFF00000000) != 0) {
                    goto LABEL_35;
                  }
                  LODWORD(v8) = v12 - v11;
                  if (v12 < v11) {
                    goto LABEL_35;
                  }
                  ++v10;
                }
                while (--v9);
              }
LABEL_37:
              uint64_t v25 = 0;
              goto LABEL_38;
            }
          }
          goto LABEL_35;
        }
LABEL_54:
        uint64_t v25 = v3;
        LODWORD(v8) = 0;
        goto LABEL_38;
      }
      __break(1u);
    }
    __break(1u);
LABEL_53:
    LOBYTE(v3) = 1;
    goto LABEL_54;
  }
  if ((a1 & 0x1000000000000000) != 0) {
    uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  unint64_t v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
  uint64_t v25 = BYTE4(v7) & 1;
  LODWORD(v8) = v7;
LABEL_38:
  uint64_t v18 = v25;
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_48;
  }
LABEL_39:
  uint64_t v19 = 0;
  return v8 | ((unint64_t)v19 << 32);
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_35;
    }
    v25[0] = a1;
    v25[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            uint64_t v7 = (BYTE1(a1) - 48);
            uint64_t v14 = v3 - 2;
            if (v14)
            {
              uint64_t v15 = (unsigned __int8 *)v25 + 2;
              while (1)
              {
                unsigned int v16 = *v15 - 48;
                if (v16 > 9) {
                  goto LABEL_34;
                }
                uint64_t v17 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v17 + v16;
                if (__OFADD__(v17, v16)) {
                  goto LABEL_34;
                }
                ++v15;
                if (!--v14) {
                  goto LABEL_41;
                }
              }
            }
            goto LABEL_41;
          }
          goto LABEL_34;
        }
        goto LABEL_54;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          if ((a1 - 48) <= 9u)
          {
            uint64_t v7 = (a1 - 48);
            uint64_t v20 = v3 - 1;
            if (v20)
            {
              unsigned int v21 = (unsigned __int8 *)v25 + 1;
              while (1)
              {
                unsigned int v22 = *v21 - 48;
                if (v22 > 9) {
                  goto LABEL_34;
                }
                uint64_t v23 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v23 + v22;
                if (__OFADD__(v23, v22)) {
                  goto LABEL_34;
                }
                ++v21;
                if (!--v20) {
                  goto LABEL_41;
                }
              }
            }
            goto LABEL_41;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
LABEL_35:
          char v26 = v9;
LABEL_36:
          char v18 = v26;
          goto LABEL_37;
        }
        goto LABEL_53;
      }
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(a1) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              unint64_t v11 = (unsigned __int8 *)v25 + 2;
              do
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                ++v11;
              }
              while (--v10);
            }
LABEL_41:
            char v26 = 0;
            goto LABEL_36;
          }
          goto LABEL_34;
        }
LABEL_54:
        char v26 = v3;
        uint64_t v7 = 0;
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
LABEL_53:
    LOBYTE(v3) = 1;
    goto LABEL_54;
  }
  uint64_t v7 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
  char v18 = v24;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v18) {
    return 0;
  }
  else {
    return v7;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  char v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  void v22[2];
  char v23;

  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    char v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10);
    swift_bridgeObjectRelease();
    if ((v8 & 0x10000) == 0) {
      goto LABEL_38;
    }
LABEL_49:
    LOWORD(v8) = 0;
    uint64_t v17 = 1;
    return (unsigned __int16)v8 | (v17 << 16);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
    LOWORD(v8) = v7;
    char v9 = HIWORD(v7) & 1;
    goto LABEL_36;
  }
  v22[0] = a1;
  v22[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v3)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v3 == 1) {
      goto LABEL_55;
    }
    char v8 = (BYTE1(a1) - 48);
    if (v8 > 9) {
      goto LABEL_35;
    }
    uint64_t v13 = v3 - 2;
    if (v13)
    {
      uint64_t v14 = (unsigned __int8 *)v22 + 2;
      do
      {
        uint64_t v15 = *v14 - 48;
        if (v15 > 9) {
          goto LABEL_35;
        }
        if (((10 * (unsigned __int16)v8) & 0xF0000) != 0) {
          goto LABEL_35;
        }
        char v8 = (unsigned __int16)(10 * v8) + v15;
        if ((v8 & 0x10000) != 0) {
          goto LABEL_35;
        }
        ++v14;
      }
      while (--v13);
    }
LABEL_40:
    uint64_t v23 = 0;
    goto LABEL_37;
  }
  if (a1 != 45)
  {
    if (!v3)
    {
LABEL_54:
      LOBYTE(v3) = 1;
      goto LABEL_55;
    }
    char v8 = (a1 - 48);
    if (v8 > 9) {
      goto LABEL_35;
    }
    char v18 = v3 - 1;
    if (v18)
    {
      uint64_t v19 = (unsigned __int8 *)v22 + 1;
      while (1)
      {
        uint64_t v20 = *v19 - 48;
        if (v20 > 9) {
          goto LABEL_35;
        }
        if (((10 * (unsigned __int16)v8) & 0xF0000) != 0) {
          goto LABEL_35;
        }
        char v8 = (unsigned __int16)(10 * v8) + v20;
        if ((v8 & 0x10000) != 0) {
          goto LABEL_35;
        }
        ++v19;
        if (!--v18) {
          goto LABEL_40;
        }
      }
    }
    goto LABEL_40;
  }
  if (!v3)
  {
    __break(1u);
    goto LABEL_53;
  }
  if (v3 != 1)
  {
    if ((BYTE1(a1) - 48) <= 9u)
    {
      char v8 = -(BYTE1(a1) - 48);
      if ((v8 & 0xFFFF0000) == 0)
      {
        uint64_t v10 = v3 - 2;
        if (v10)
        {
          unint64_t v11 = (unsigned __int8 *)v22 + 2;
          while (1)
          {
            unsigned int v12 = *v11 - 48;
            if (v12 > 9) {
              goto LABEL_35;
            }
            if (((10 * (unsigned __int16)v8) & 0xF0000) != 0) {
              goto LABEL_35;
            }
            char v8 = (unsigned __int16)(10 * v8) - v12;
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_35;
            }
            ++v11;
            if (!--v10) {
              goto LABEL_40;
            }
          }
        }
        goto LABEL_40;
      }
    }
LABEL_35:
    LOWORD(v8) = 0;
    LOBYTE(v9) = 1;
LABEL_36:
    uint64_t v23 = v9;
    goto LABEL_37;
  }
LABEL_55:
  uint64_t v23 = v3;
  LOWORD(v8) = 0;
LABEL_37:
  unsigned int v16 = v23;
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_49;
  }
LABEL_38:
  uint64_t v17 = 0;
  return (unsigned __int16)v8 | (v17 << 16);
}

uint64_t LocalePreferences.metricUnits.getter()
{
  return *v0;
}

uint64_t LocalePreferences.metricUnits.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t LocalePreferences.languages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.languages.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*LocalePreferences.languages.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.locale.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t LocalePreferences.collationOrder.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalePreferences.collationOrder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t LocalePreferences.firstWeekday.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.firstWeekday.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*LocalePreferences.firstWeekday.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.minDaysInFirstWeek.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.minDaysInFirstWeek.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*LocalePreferences.minDaysInFirstWeek.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.ICUSymbolsAndStrings.hash(into:)()
{
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v2 = v1;
    _CFObject.hash(into:)();

    uint64_t v3 = *(void **)(v0 + 8);
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v3 = *(void **)(v0 + 8);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v4 = v3;
      _CFObject.hash(into:)();

      uint64_t v5 = *(void **)(v0 + 16);
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v5 = *(void **)(v0 + 16);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v5;
    _CFObject.hash(into:)();

    uint64_t v7 = *(void **)(v0 + 24);
    if (v7) {
      goto LABEL_5;
    }
LABEL_12:
    Hasher._combine(_:)(0);
    char v9 = *(void **)(v0 + 32);
    if (v9) {
      goto LABEL_6;
    }
LABEL_13:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_11:
  Hasher._combine(_:)(0);
  uint64_t v7 = *(void **)(v0 + 24);
  if (!v7) {
    goto LABEL_12;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v8 = v7;
  _CFObject.hash(into:)();

  char v9 = *(void **)(v0 + 32);
  if (!v9) {
    goto LABEL_13;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v10 = v9;
  _CFObject.hash(into:)();
}

Swift::Int LocalePreferences.ICUSymbolsAndStrings.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v2 = v1;
    _CFObject.hash(into:)();

    uint64_t v3 = *(void **)(v0 + 8);
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v3 = *(void **)(v0 + 8);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v4 = v3;
      _CFObject.hash(into:)();

      uint64_t v5 = *(void **)(v0 + 16);
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v5 = *(void **)(v0 + 16);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v5;
    _CFObject.hash(into:)();

    uint64_t v7 = *(void **)(v0 + 24);
    if (v7) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    char v9 = *(void **)(v0 + 32);
    if (v9) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  uint64_t v7 = *(void **)(v0 + 24);
  if (!v7) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v8 = v7;
  _CFObject.hash(into:)();

  char v9 = *(void **)(v0 + 32);
  if (!v9) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v10 = v9;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalePreferences.ICUSymbolsAndStrings()
{
  uint64_t v1 = *(void **)v0;
  id v2 = *(void **)(v0 + 8);
  id v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v1;
    _CFObject.hash(into:)();

    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v7 = v2;
      _CFObject.hash(into:)();

      if (v4) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v8 = v4;
    _CFObject.hash(into:)();

    if (v3) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v9 = v3;
  _CFObject.hash(into:)();

  if (!v5) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v10 = v5;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized static LocalePreferences.ICUSymbolsAndStrings.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t LocalePreferences.dateFormats.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.dateFormats.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*LocalePreferences.dateFormats.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.numberSymbols.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.numberSymbols.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = a1;
  return result;
}

uint64_t (*LocalePreferences.numberSymbols.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.country.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalePreferences.country.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return result;
}

uint64_t (*LocalePreferences.country.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.measurementUnits.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 136);
}

unsigned char *LocalePreferences.measurementUnits.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 136) = *result;
  return result;
}

uint64_t (*LocalePreferences.measurementUnits.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.temperatureUnit.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 137);
}

unsigned char *LocalePreferences.temperatureUnit.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 137) = *result;
  return result;
}

uint64_t (*LocalePreferences.temperatureUnit.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.force24Hour.getter()
{
  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t LocalePreferences.force24Hour.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 138) = result;
  return result;
}

uint64_t (*LocalePreferences.force24Hour.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.force12Hour.getter()
{
  return *(unsigned __int8 *)(v0 + 139);
}

uint64_t LocalePreferences.force12Hour.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 139) = result;
  return result;
}

uint64_t (*LocalePreferences.force12Hour.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double LocalePreferences.init()@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 33686018;
  return result;
}

double LocalePreferences.init(metricUnits:languages:locale:collationOrder:firstWeekday:minDaysInFirstWeek:country:measurementUnits:temperatureUnit:force24Hour:force12Hour:numberSymbols:dateFormats:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char *a12, char *a13, __int16 a14, uint64_t a15, uint64_t a16)
{
  char v16 = *a12;
  char v17 = *a13;
  *(unsigned char *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  double result = 0.0;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  *(void *)(a9 + 96) = 0;
  *(void *)(a9 + 104) = a16;
  *(void *)(a9 + 112) = a15;
  *(void *)(a9 + 120) = a10;
  *(void *)(a9 + 128) = a11;
  *(unsigned char *)(a9 + 136) = v16;
  *(unsigned char *)(a9 + 137) = v17;
  *(_WORD *)(a9 + 138) = a14;
  return result;
}

void LocalePreferences.apply(_:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  if (v2 != 2) {
    *(unsigned char *)uint64_t v1 = v2;
  }
  int v30 = a1[136];
  int v31 = a1[137];
  int v32 = a1[138];
  int v4 = a1[139];
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v8 = *((void *)a1 + 7);
  id v10 = (void *)*((void *)a1 + 8);
  char v24 = (void *)*((void *)a1 + 9);
  uint64_t v25 = (void *)*((void *)a1 + 10);
  char v26 = (void *)*((void *)a1 + 11);
  uint64_t v27 = (void *)*((void *)a1 + 12);
  uint64_t v11 = *((void *)a1 + 14);
  uint64_t v22 = *((void *)a1 + 2);
  uint64_t v23 = *((void *)a1 + 15);
  uint64_t v28 = *((void *)a1 + 13);
  uint64_t v29 = *((void *)a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v3;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 16) = v22;
    *(void *)(v1 + 24) = v5;
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 32) = v6;
    *(void *)(v1 + 40) = v7;
  }
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 48) = v9;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 56) = v8;
  }
  if (v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 112) = v11;
  }
  if (v10)
  {
    unsigned int v12 = *(void **)(v1 + 64);
    id v13 = v10;

    *(void *)(v1 + 64) = v10;
  }
  if (v24)
  {
    uint64_t v14 = *(void **)(v1 + 72);
    id v15 = v24;

    *(void *)(v1 + 72) = v24;
  }
  if (v25)
  {
    char v16 = *(void **)(v1 + 80);
    id v17 = v25;

    *(void *)(v1 + 80) = v25;
  }
  if (v26)
  {
    char v18 = *(void **)(v1 + 88);
    id v19 = v26;

    *(void *)(v1 + 88) = v26;
  }
  if (v27)
  {
    uint64_t v20 = *(void **)(v1 + 96);
    id v21 = v27;

    *(void *)(v1 + 96) = v27;
  }
  if (v28)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 104) = v28;
  }
  if (v29)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 120) = v23;
    *(void *)(v1 + 128) = v29;
  }
  if (v30 != 2) {
    *(unsigned char *)(v1 + 136) = v30;
  }
  if (v31 == 2)
  {
    if (v32 == 2) {
      goto LABEL_33;
    }
  }
  else
  {
    *(unsigned char *)(v1 + 137) = v31;
    if (v32 == 2)
    {
LABEL_33:
      if (v4 == 2) {
        return;
      }
      goto LABEL_34;
    }
  }
  *(unsigned char *)(v1 + 138) = v32;
  if (v4 == 2) {
    return;
  }
LABEL_34:
  *(unsigned char *)(v1 + 139) = v4;
}

void LocalePreferences.hourCycle.getter(char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 139)) {
    char v2 = 1;
  }
  else {
    char v2 = 4;
  }
  if (*(unsigned char *)(v1 + 138)) {
    char v3 = 2;
  }
  else {
    char v3 = v2;
  }
  *a1 = v3;
}

void LocalePreferences.hash(into:)(uint64_t a1)
{
  int v3 = *v1;
  uint64_t v4 = *((void *)v1 + 1);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v6 = *((void *)v1 + 6);
  uint64_t v8 = *((void *)v1 + 7);
  int v35 = (void *)*((void *)v1 + 8);
  uint64_t v36 = (void *)*((void *)v1 + 9);
  uint64_t v9 = (void *)*((void *)v1 + 12);
  uint64_t v37 = (void *)*((void *)v1 + 10);
  uint64_t v38 = (void *)*((void *)v1 + 11);
  uint64_t v39 = *((void *)v1 + 13);
  uint64_t v40 = *((void *)v1 + 14);
  uint64_t v41 = *((void *)v1 + 16);
  int v43 = v1[139];
  int v33 = v1[138];
  int v32 = v1[137];
  int v42 = v1[136];
  if (v3 == 2)
  {
    Swift::UInt8 v10 = 0;
  }
  else
  {
    Swift::UInt8 v10 = v3 & 1;
    Hasher._combine(_:)(1u);
  }
  uint64_t v34 = v9;
  Hasher._combine(_:)(v10);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v4 + 16));
    uint64_t v11 = *(void *)(v4 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = v4 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v12 += 16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    if (v5) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v5)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  Hasher._combine(_:)(0);
LABEL_13:
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    id v13 = v35;
    if (v6) {
      goto LABEL_15;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v13 = v35;
    if (v6)
    {
LABEL_15:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v6);
      swift_bridgeObjectRelease();
      uint64_t v14 = v36;
      if (v8) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v14 = v36;
  if (v8)
  {
LABEL_16:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v8);
    swift_bridgeObjectRelease();
    char v16 = v37;
    id v15 = v38;
    if (v13) {
      goto LABEL_17;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
  char v16 = v37;
  id v15 = v38;
  if (v13)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v17 = v14;
    id v18 = v16;
    id v19 = v15;
    id v20 = v34;
    id v21 = v13;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_18;
    }
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  id v26 = v34;
  id v27 = v14;
  id v28 = v16;
  id v29 = v15;
  if (v14)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v22 = v14;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_19:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v23 = v16;
    _CFObject.hash(into:)();

    if (v15) {
      goto LABEL_20;
    }
LABEL_28:
    Hasher._combine(_:)(0);
    if (v34) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v15) {
    goto LABEL_28;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v24 = v15;
  _CFObject.hash(into:)();

  if (v34)
  {
LABEL_21:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v25 = v34;
    _CFObject.hash(into:)();

    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  id v25 = 0;
LABEL_30:

  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
    if (v40) {
      goto LABEL_32;
    }
LABEL_35:
    Hasher._combine(_:)(0);
    if (v41) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  Hasher._combine(_:)(0);
  if (!v40) {
    goto LABEL_35;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (v41)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
LABEL_37:
  if (v42 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42 & 1);
  }
  if (v32 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32 & 1);
  }
  if (v33 == 2)
  {
    Swift::UInt8 v30 = 0;
  }
  else
  {
    Swift::UInt8 v30 = v33 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v43 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v31 = v43 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
}

Swift::Int LocalePreferences.hashValue.getter()
{
  int v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v5 = *((void *)v0 + 5);
  uint64_t v4 = *((void *)v0 + 6);
  uint64_t v6 = *((void *)v0 + 7);
  uint64_t v7 = (void *)*((void *)v0 + 9);
  uint64_t v41 = (void *)*((void *)v0 + 8);
  int v42 = (void *)*((void *)v0 + 10);
  int v47 = (void *)*((void *)v0 + 11);
  uint64_t v48 = (void *)*((void *)v0 + 12);
  uint64_t v43 = *((void *)v0 + 13);
  uint64_t v44 = *((void *)v0 + 14);
  uint64_t v45 = *((void *)v0 + 16);
  int v46 = v0[136];
  int v39 = v0[137];
  int v40 = v0[138];
  int v8 = v0[139];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt8 v9 = 0;
  }
  else
  {
    Swift::UInt8 v9 = v1 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v2 + 16));
    uint64_t v10 = *(void *)(v2 + 16);
    if (v10)
    {
      int v38 = v8;
      swift_bridgeObjectRetain();
      uint64_t v11 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v11 += 16;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      int v8 = v38;
    }
    if (v3) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  Hasher._combine(_:)(0);
LABEL_13:
  uint64_t v12 = v7;
  id v13 = v41;
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v14 = v42;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  id v15 = v47;
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v17 = v43;
  uint64_t v16 = v44;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v18 = v7;
    id v19 = v42;
    id v20 = v47;
    id v21 = v48;
    id v22 = v41;
    _CFObject.hash(into:)();
    if (v7) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v31 = v48;
    id v32 = v7;
    id v33 = v42;
    id v34 = v47;
    if (v7)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v23 = v7;
      _CFObject.hash(into:)();

      if (v42) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v42)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v24 = v42;
    _CFObject.hash(into:)();

    if (v47) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    id v26 = v48;
    if (v48) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v47) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v25 = v47;
  _CFObject.hash(into:)();

  id v26 = v48;
  if (v48)
  {
LABEL_27:
    int v27 = v8;
    id v28 = v26;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v29 = v28;
    int v8 = v27;
    id v13 = v41;
    uint64_t v16 = v44;
    uint64_t v17 = v43;
    uint64_t v14 = v42;
    id v15 = v47;
    id v30 = v29;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v30 = 0;
LABEL_33:

  if (v17)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v17);
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v45) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v49, v16);
  swift_bridgeObjectRelease();
  if (v45)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
LABEL_40:
  if (v46 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46 & 1);
  }
  if (v39 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39 & 1);
  }
  if (v40 == 2)
  {
    Swift::UInt8 v35 = 0;
  }
  else
  {
    Swift::UInt8 v35 = v40 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v35);
  if (v8 == 2)
  {
    Swift::UInt8 v36 = 0;
  }
  else
  {
    Swift::UInt8 v36 = v8 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalePreferences()
{
  int v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v5 = *((void *)v0 + 5);
  uint64_t v4 = *((void *)v0 + 6);
  uint64_t v6 = *((void *)v0 + 7);
  int v42 = (void *)*((void *)v0 + 8);
  uint64_t v43 = (void *)*((void *)v0 + 9);
  uint64_t v48 = (void *)*((void *)v0 + 11);
  uint64_t v49 = (void *)*((void *)v0 + 12);
  uint64_t v7 = *((void *)v0 + 14);
  uint64_t v44 = (void *)*((void *)v0 + 10);
  uint64_t v45 = *((void *)v0 + 13);
  uint64_t v46 = *((void *)v0 + 16);
  int v47 = v0[136];
  int v41 = v0[137];
  int v8 = v0[138];
  int v9 = v0[139];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt8 v10 = 0;
  }
  else
  {
    Swift::UInt8 v10 = v1 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v11 = *(void *)(v2 + 16);
    Hasher._combine(_:)(v11);
    if (v11)
    {
      int v40 = v8;
      swift_bridgeObjectRetain();
      uint64_t v12 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v12 += 16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      int v8 = v40;
    }
    if (v3) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  Hasher._combine(_:)(0);
LABEL_13:
  uint64_t v13 = v7;
  uint64_t v14 = v42;
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  id v15 = v43;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v16 = v44;
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v17 = v48;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v18 = v43;
    id v19 = v44;
    id v20 = v48;
    id v21 = v49;
    id v22 = v42;
    _CFObject.hash(into:)();
    if (v43) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v33 = v49;
    id v34 = v43;
    id v35 = v44;
    id v36 = v48;
    if (v43)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v23 = v43;
      _CFObject.hash(into:)();

      if (v44) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v44)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v24 = v44;
    _CFObject.hash(into:)();

    if (v48) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    id v26 = v49;
    if (v49) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v48) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v25 = v48;
  _CFObject.hash(into:)();

  id v26 = v49;
  if (v49)
  {
LABEL_27:
    uint64_t v27 = v13;
    int v28 = v8;
    int v29 = v9;
    id v30 = v26;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v31 = v30;
    int v9 = v29;
    int v8 = v28;
    uint64_t v13 = v27;
    uint64_t v14 = v42;
    id v15 = v43;
    uint64_t v16 = v44;
    uint64_t v17 = v48;
    id v32 = v31;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v32 = 0;
LABEL_33:

  if (v45)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v45);
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v46) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  if (!v13) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v50, v13);
  swift_bridgeObjectRelease();
  if (v46)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
LABEL_40:
  if (v47 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47 & 1);
  }
  if (v41 == 2)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2)
    {
LABEL_45:
      Swift::UInt8 v37 = v8 & 1;
      Hasher._combine(_:)(1u);
      goto LABEL_48;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41 & 1);
    if (v8 != 2) {
      goto LABEL_45;
    }
  }
  Swift::UInt8 v37 = 0;
LABEL_48:
  Hasher._combine(_:)(v37);
  if (v9 == 2)
  {
    Swift::UInt8 v38 = 0;
  }
  else
  {
    Swift::UInt8 v38 = v9 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  return Hasher._finalize()();
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  Swift::UInt v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

{
  return specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  Swift::UInt v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FFFF;
}

{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  Swift::UInt8 v38 = a1;
  int v39 = a2;
  swift_bridgeObjectRetain();
  double result = String.init<A>(_:)();
  unint64_t v6 = result;
  uint64_t v7 = v5;
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v6 = static String._copying(_:)();
    uint64_t v12 = v11;
    double result = swift_bridgeObjectRelease();
    uint64_t v7 = v12;
    if ((v12 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v6 & 0x1000000000000000) != 0)
    {
      uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      unint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v10 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v9, a3);
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  uint64_t v13 = HIBYTE(v7) & 0xF;
  Swift::UInt8 v38 = v6;
  int v39 = v7 & 0xFFFFFFFFFFFFFFLL;
  if (v6 == 43)
  {
    if (v13)
    {
      id v23 = v13 - 1;
      if (v23)
      {
        id v15 = 0;
        id v24 = a3 + 48;
        id v25 = a3 + 55;
        id v26 = a3 + 87;
        if (a3 > 10)
        {
          id v24 = 58;
        }
        else
        {
          id v26 = 97;
          id v25 = 65;
        }
        uint64_t v27 = (unsigned __int8 *)&v38 + 1;
        do
        {
          int v28 = *v27;
          if (v28 < 0x30 || v28 >= v24)
          {
            if (v28 < 0x41 || v28 >= v25)
            {
              unint64_t v10 = 0;
              if (v28 < 0x61 || v28 >= v26) {
                goto LABEL_66;
              }
              int v29 = -87;
            }
            else
            {
              int v29 = -55;
            }
          }
          else
          {
            int v29 = -48;
          }
          id v30 = v15 * a3;
          if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63) {
            goto LABEL_65;
          }
          id v15 = v30 + (v28 + v29);
          if (__OFADD__(v30, (v28 + v29))) {
            goto LABEL_65;
          }
          ++v27;
          --v23;
        }
        while (v23);
LABEL_64:
        unint64_t v10 = (unsigned __int8 *)v15;
        goto LABEL_66;
      }
LABEL_65:
      unint64_t v10 = 0;
LABEL_66:
      swift_bridgeObjectRelease();
      return (uint64_t)v10;
    }
  }
  else
  {
    if (v6 != 45)
    {
      if (v13)
      {
        id v15 = 0;
        id v31 = a3 + 48;
        id v32 = a3 + 55;
        id v33 = a3 + 87;
        if (a3 > 10)
        {
          id v31 = 58;
        }
        else
        {
          id v33 = 97;
          id v32 = 65;
        }
        id v34 = &v38;
        while (1)
        {
          id v35 = *(unsigned __int8 *)v34;
          if (v35 < 0x30 || v35 >= v31)
          {
            if (v35 < 0x41 || v35 >= v32)
            {
              unint64_t v10 = 0;
              if (v35 < 0x61 || v35 >= v33) {
                goto LABEL_66;
              }
              id v36 = -87;
            }
            else
            {
              id v36 = -55;
            }
          }
          else
          {
            id v36 = -48;
          }
          Swift::UInt8 v37 = v15 * a3;
          if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63) {
            goto LABEL_65;
          }
          id v15 = v37 + (v35 + v36);
          if (__OFADD__(v37, (v35 + v36))) {
            goto LABEL_65;
          }
          id v34 = (uint64_t *)((char *)v34 + 1);
          if (!--v13) {
            goto LABEL_64;
          }
        }
      }
      goto LABEL_65;
    }
    if (v13)
    {
      uint64_t v14 = v13 - 1;
      if (v14)
      {
        id v15 = 0;
        uint64_t v16 = a3 + 48;
        uint64_t v17 = a3 + 55;
        id v18 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v16 = 58;
        }
        else
        {
          id v18 = 97;
          uint64_t v17 = 65;
        }
        id v19 = (unsigned __int8 *)&v38 + 1;
        while (1)
        {
          id v20 = *v19;
          if (v20 < 0x30 || v20 >= v16)
          {
            if (v20 < 0x41 || v20 >= v17)
            {
              unint64_t v10 = 0;
              if (v20 < 0x61 || v20 >= v18) {
                goto LABEL_66;
              }
              id v21 = -87;
            }
            else
            {
              id v21 = -55;
            }
          }
          else
          {
            id v21 = -48;
          }
          id v22 = v15 * a3;
          if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63) {
            goto LABEL_65;
          }
          id v15 = v22 - (v20 + v21);
          if (__OFSUB__(v22, (v20 + v21))) {
            goto LABEL_65;
          }
          ++v19;
          if (!--v14) {
            goto LABEL_64;
          }
        }
      }
      goto LABEL_65;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v9 = &v15;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v9 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  id v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t specialized static LocalePreferences.ICUSymbolsAndStrings.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a1)
  {
    if (!v5) {
      return 0;
    }
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v5;
    id v7 = v4;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  unint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  if (v9)
  {
    if (!v10) {
      return 0;
    }
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v11 = v10;
    id v12 = v9;
    char v13 = static _CFObject.== infix(_:_:)();

    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
  unsigned __int8 v14 = *(void **)(a1 + 16);
  BOOL v15 = *(void **)(a2 + 16);
  if (v14)
  {
    if (!v15) {
      return 0;
    }
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v16 = v15;
    id v17 = v14;
    char v18 = static _CFObject.== infix(_:_:)();

    if ((v18 & 1) == 0) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  unsigned __int8 v19 = *(void **)(a1 + 24);
  id v20 = *(void **)(a2 + 24);
  if (v19)
  {
    if (!v20) {
      return 0;
    }
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v21 = v20;
    id v22 = v19;
    char v23 = static _CFObject.== infix(_:_:)();

    if ((v23 & 1) == 0) {
      return 0;
    }
  }
  else if (v20)
  {
    return 0;
  }
  unsigned __int8 v24 = *(void **)(a1 + 32);
  unsigned __int8 v25 = *(void **)(a2 + 32);
  if (v24)
  {
    if (v25)
    {
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v26 = v25;
      id v27 = v24;
      char v28 = static _CFObject.== infix(_:_:)();

      if (v28) {
        return 1;
      }
    }
  }
  else if (!v25)
  {
    return 1;
  }
  return 0;
}

uint64_t specialized static LocalePreferences.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = (void *)*((void *)a1 + 1);
  uint64_t v200 = *((void *)a1 + 2);
  uint64_t v217 = *((void *)a1 + 3);
  uint64_t v197 = *((void *)a1 + 4);
  uint64_t v209 = *((void *)a1 + 5);
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v195 = *((void *)a1 + 6);
  double v192 = (void *)*((void *)a1 + 8);
  id v6 = (void *)*((void *)a1 + 10);
  double v190 = (void *)*((void *)a1 + 9);
  id v7 = (void *)*((void *)a1 + 11);
  char v8 = (void *)*((void *)a1 + 12);
  uint64_t v10 = *((void *)a1 + 13);
  uint64_t v9 = *((void *)a1 + 14);
  uint64_t v11 = *((void *)a1 + 15);
  uint64_t v12 = *((void *)a1 + 16);
  int v13 = a1[136];
  int v14 = a1[137];
  int v15 = a1[138];
  int v16 = a1[139];
  int v17 = *a2;
  char v18 = (void *)*((void *)a2 + 1);
  uint64_t v198 = *((void *)a2 + 2);
  uint64_t v213 = *((void *)a2 + 3);
  uint64_t v196 = *((void *)a2 + 4);
  uint64_t v206 = *((void *)a2 + 5);
  uint64_t v193 = *((void *)a2 + 7);
  uint64_t v194 = *((void *)a2 + 6);
  char v191 = (void *)*((void *)a2 + 8);
  unsigned __int8 v19 = (void *)*((void *)a2 + 10);
  char v189 = (void *)*((void *)a2 + 9);
  id v21 = (void *)*((void *)a2 + 11);
  id v20 = (void *)*((void *)a2 + 12);
  uint64_t v23 = *((void *)a2 + 13);
  uint64_t v22 = *((void *)a2 + 14);
  uint64_t v25 = *((void *)a2 + 15);
  uint64_t v24 = *((void *)a2 + 16);
  int v26 = a2[136];
  int v27 = a2[137];
  int v28 = a2[138];
  int v29 = a2[139];
  if (v3 == 2)
  {
    if (v17 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v17 == 2 || ((((v3 & 1) == 0) ^ v17) & 1) == 0) {
      return result;
    }
  }
  if (v4)
  {
    if (!v18) {
      return 0;
    }
    uint64_t v175 = *((void *)a2 + 15);
    double v182 = v8;
    int v127 = v15;
    int v31 = a2[139];
    char v139 = (void *)*((void *)a2 + 12);
    uint64_t v145 = *((void *)a2 + 13);
    int v32 = a2[138];
    int v33 = v13;
    char v129 = (void *)*((void *)a2 + 11);
    double v132 = (void *)*((void *)a2 + 10);
    int v34 = a2[137];
    uint64_t v151 = *((void *)a2 + 14);
    uint64_t v157 = v9;
    uint64_t v163 = v10;
    unsigned __int8 v169 = v6;
    int v35 = v16;
    uint64_t v133 = *((void *)a2 + 16);
    int v36 = a2[136];
    uint64_t v37 = v11;
    Swift::UInt8 v38 = v7;
    uint64_t v39 = v12;
    char v40 = specialized static Array<A>.== infix(_:_:)(v4, v18);
    uint64_t v12 = v39;
    id v7 = v38;
    uint64_t v11 = v37;
    unsigned __int8 v19 = v132;
    uint64_t v24 = v133;
    int v26 = v36;
    int v16 = v35;
    uint64_t v10 = v163;
    id v6 = v169;
    uint64_t v22 = v151;
    uint64_t v9 = v157;
    int v27 = v34;
    id v21 = v129;
    int v13 = v33;
    uint64_t v25 = v175;
    char v8 = v182;
    int v28 = v32;
    id v20 = v139;
    uint64_t v23 = v145;
    int v29 = v31;
    int v15 = v127;
    if ((v40 & 1) == 0) {
      return 0;
    }
  }
  else if (v18)
  {
    return 0;
  }
  if (!v217)
  {
    if (v213) {
      return 0;
    }
LABEL_18:
    if (v209)
    {
      if (!v206) {
        return 0;
      }
      if (v197 != v196 || v209 != v206)
      {
        uint64_t v135 = v24;
        uint64_t v202 = v11;
        uint64_t v123 = v12;
        v219 = v7;
        int v50 = v29;
        uint64_t v177 = v25;
        double v184 = v8;
        int v51 = v28;
        double v141 = v20;
        uint64_t v147 = v23;
        int v52 = v13;
        int v53 = v27;
        uint64_t v153 = v22;
        uint64_t v159 = v9;
        uint64_t v165 = v10;
        unsigned __int8 v171 = v6;
        int v54 = v16;
        uint64_t v55 = v21;
        int v56 = v26;
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v12 = v123;
        uint64_t v11 = v202;
        uint64_t v24 = v135;
        int v26 = v56;
        id v21 = v55;
        int v16 = v54;
        uint64_t v10 = v165;
        id v6 = v171;
        uint64_t v22 = v153;
        uint64_t v9 = v159;
        int v27 = v53;
        int v13 = v52;
        id v20 = v141;
        uint64_t v23 = v147;
        int v28 = v51;
        uint64_t v25 = v177;
        char v8 = v184;
        int v29 = v50;
        id v7 = v219;
        char v58 = v57;
        uint64_t result = 0;
        if ((v58 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v206)
    {
      return 0;
    }
    if (v195)
    {
      if (!v194) {
        return 0;
      }
      int v207 = v29;
      int v210 = v28;
      uint64_t v178 = v25;
      v142 = v20;
      uint64_t v148 = v23;
      int v59 = v13;
      int v214 = v27;
      uint64_t v154 = v22;
      uint64_t v160 = v9;
      uint64_t v166 = v10;
      double v172 = v6;
      int v60 = v16;
      double v130 = v21;
      int v61 = v26;
      char v185 = v8;
      uint64_t v62 = v24;
      uint64_t v63 = v11;
      double v64 = v19;
      uint64_t v65 = v12;
      char v66 = specialized static Dictionary<>.== infix(_:_:)(v195, v194);
      uint64_t v12 = v65;
      unsigned __int8 v19 = v64;
      uint64_t v11 = v63;
      uint64_t v24 = v62;
      uint64_t v25 = v178;
      char v8 = v185;
      int v26 = v61;
      id v21 = v130;
      int v16 = v60;
      uint64_t v10 = v166;
      id v6 = v172;
      uint64_t v22 = v154;
      uint64_t v9 = v160;
      int v27 = v214;
      int v13 = v59;
      id v20 = v142;
      uint64_t v23 = v148;
      int v28 = v210;
      int v29 = v207;
      if ((v66 & 1) == 0) {
        return 0;
      }
    }
    else if (v194)
    {
      return 0;
    }
    if (v5)
    {
      if (!v193) {
        return 0;
      }
      v220 = v7;
      int v67 = v29;
      int v211 = v28;
      uint64_t v179 = v25;
      v143 = v20;
      uint64_t v149 = v23;
      int v68 = v13;
      int v215 = v27;
      uint64_t v155 = v22;
      uint64_t v161 = v9;
      uint64_t v167 = v10;
      char v173 = v6;
      int v69 = v16;
      char v131 = v21;
      int v70 = v26;
      double v186 = v8;
      uint64_t v71 = v24;
      uint64_t v72 = v11;
      int v73 = v19;
      uint64_t v74 = v12;
      char v75 = specialized static Dictionary<>.== infix(_:_:)(v5, v193);
      uint64_t v12 = v74;
      unsigned __int8 v19 = v73;
      uint64_t v11 = v72;
      uint64_t v24 = v71;
      uint64_t v25 = v179;
      char v8 = v186;
      int v26 = v70;
      id v21 = v131;
      int v16 = v69;
      uint64_t v10 = v167;
      id v6 = v173;
      uint64_t v22 = v155;
      uint64_t v9 = v161;
      int v27 = v215;
      int v13 = v68;
      id v20 = v143;
      uint64_t v23 = v149;
      int v28 = v211;
      int v29 = v67;
      id v7 = v220;
      if ((v75 & 1) == 0) {
        return 0;
      }
    }
    else if (v193)
    {
      return 0;
    }
    if (v192)
    {
      if (!v191) {
        return 0;
      }
      uint64_t v168 = v10;
      double v174 = v6;
      uint64_t v156 = v22;
      uint64_t v162 = v9;
      int v216 = v27;
      int v199 = v13;
      int v212 = v28;
      int v208 = v29;
      int v221 = v16;
      int v119 = v26;
      uint64_t v136 = v24;
      uint64_t v203 = v11;
      uint64_t v180 = v25;
      uint64_t v124 = v12;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      int v128 = v14;
      id v76 = v191;
      int v77 = v20;
      int v78 = v15;
      id v79 = v192;
      char v80 = static _CFObject.== infix(_:_:)();

      int v15 = v78;
      id v20 = v77;

      uint64_t v12 = v124;
      uint64_t v25 = v180;
      uint64_t v11 = v203;
      uint64_t v24 = v136;
      int v26 = v119;
      int v14 = v128;
      int v16 = v221;
      if ((v80 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v168 = v10;
      double v174 = v6;
      uint64_t v156 = v22;
      uint64_t v162 = v9;
      int v216 = v27;
      int v199 = v13;
      int v212 = v28;
      int v208 = v29;
      if (v191) {
        return 0;
      }
    }
    if (v190)
    {
      if (!v189) {
        return 0;
      }
      uint64_t v150 = v23;
      uint64_t v181 = v25;
      char v187 = v8;
      int v222 = v16;
      int v120 = v26;
      uint64_t v137 = v24;
      uint64_t v204 = v11;
      uint64_t v125 = v12;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      int v81 = v21;
      int v82 = v14;
      id v83 = v189;
      double v84 = v20;
      int v85 = v15;
      id v86 = v190;
      char v87 = static _CFObject.== infix(_:_:)();

      int v15 = v85;
      id v20 = v84;

      uint64_t v12 = v125;
      uint64_t v11 = v204;
      uint64_t v24 = v137;
      int v26 = v120;
      int v14 = v82;
      id v21 = v81;
      int v16 = v222;
      char v8 = v187;
      if ((v87 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v150 = v23;
      uint64_t v181 = v25;
      if (v189) {
        return 0;
      }
    }
    int v121 = v26;
    uint64_t v138 = v24;
    double v144 = v20;
    uint64_t v126 = v12;
    double v188 = v8;
    if (v174)
    {
      uint64_t v205 = v11;
      if (!v19) {
        return 0;
      }
      int v88 = v14;
      int v89 = v15;
      int v90 = v16;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v91 = v19;
      id v92 = v174;
      char v93 = static _CFObject.== infix(_:_:)();

      int v16 = v90;
      int v15 = v89;
      int v14 = v88;
      uint64_t v11 = v205;
      if ((v93 & 1) == 0) {
        return 0;
      }
    }
    else if (v19)
    {
      return 0;
    }
    if (v7)
    {
      if (!v21) {
        return 0;
      }
      uint64_t v94 = v11;
      int v95 = v14;
      int v96 = v15;
      int v97 = v16;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v98 = v21;
      id v99 = v7;
      char v100 = static _CFObject.== infix(_:_:)();

      if ((v100 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v94 = v11;
      int v95 = v14;
      int v96 = v15;
      int v97 = v16;
      if (v21) {
        return 0;
      }
    }
    if (v188)
    {
      if (!v144) {
        return 0;
      }
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v101 = v144;
      id v102 = v188;
      char v103 = static _CFObject.== infix(_:_:)();

      if ((v103 & 1) == 0) {
        return 0;
      }
    }
    else if (v144)
    {
      return 0;
    }
    if (v168)
    {
      if (!v150) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v104 = swift_bridgeObjectRetain();
      char v105 = specialized static Dictionary<>.== infix(_:_:)(v104, v150);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v105 & 1) == 0) {
        return 0;
      }
    }
    else if (v150)
    {
      return 0;
    }
    if (v162)
    {
      if (!v156) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v106 = swift_bridgeObjectRetain();
      char v107 = specialized static Dictionary<>.== infix(_:_:)(v106, v156);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v107 & 1) == 0) {
        return 0;
      }
    }
    else if (v156)
    {
      return 0;
    }
    if (v126)
    {
      if (v138)
      {
        BOOL v108 = v94 == v181;
        int v109 = v208;
        int v110 = v212;
        int v111 = v199;
        int v112 = v216;
        int v113 = v121;
        if (!v108 || v126 != v138)
        {
          char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
          int v113 = v121;
          char v115 = v114;
          uint64_t result = 0;
          if ((v115 & 1) == 0) {
            return result;
          }
        }
LABEL_78:
        if (v111 == 2)
        {
          int v116 = v95;
          if (v113 != 2) {
            return 0;
          }
        }
        else
        {
          uint64_t result = 0;
          if (v113 == 2) {
            return result;
          }
          int v116 = v95;
          if ((v113 ^ v111)) {
            return result;
          }
        }
        if (v116 == 2)
        {
          int v117 = v96;
          if (v112 != 2) {
            return 0;
          }
        }
        else
        {
          uint64_t result = 0;
          if (v112 == 2) {
            return result;
          }
          int v117 = v96;
          if ((v112 ^ v95)) {
            return result;
          }
        }
        if (v117 == 2)
        {
          int v118 = v97;
          if (v110 != 2) {
            return 0;
          }
        }
        else
        {
          uint64_t result = 0;
          if (v110 == 2) {
            return result;
          }
          int v118 = v97;
          if (((((v96 & 1) == 0) ^ v110) & 1) == 0) {
            return result;
          }
        }
        if (v118 == 2)
        {
          if (v109 != 2) {
            return 0;
          }
        }
        else if (v109 == 2 || ((((v97 & 1) == 0) ^ v109) & 1) == 0)
        {
          return 0;
        }
        return 1;
      }
    }
    else
    {
      int v109 = v208;
      int v110 = v212;
      int v111 = v199;
      int v112 = v216;
      int v113 = v121;
      if (!v138) {
        goto LABEL_78;
      }
    }
    return 0;
  }
  if (!v213) {
    return 0;
  }
  if (v200 == v198 && v217 == v213) {
    goto LABEL_18;
  }
  uint64_t v134 = v24;
  uint64_t v201 = v11;
  uint64_t v122 = v12;
  v218 = v7;
  int v41 = v29;
  uint64_t v176 = v25;
  double v183 = v8;
  int v42 = v28;
  char v140 = v20;
  uint64_t v146 = v23;
  int v43 = v13;
  int v44 = v27;
  uint64_t v152 = v22;
  uint64_t v158 = v9;
  uint64_t v164 = v10;
  double v170 = v6;
  int v45 = v16;
  uint64_t v46 = v21;
  int v47 = v26;
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v12 = v122;
  uint64_t v11 = v201;
  uint64_t v24 = v134;
  int v26 = v47;
  id v21 = v46;
  int v16 = v45;
  uint64_t v10 = v164;
  id v6 = v170;
  uint64_t v22 = v152;
  uint64_t v9 = v158;
  int v27 = v44;
  int v13 = v43;
  id v20 = v140;
  uint64_t v23 = v146;
  int v28 = v42;
  uint64_t v25 = v176;
  char v8 = v183;
  int v29 = v41;
  id v7 = v218;
  char v49 = v48;
  uint64_t result = 0;
  if (v49) {
    goto LABEL_18;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit;
  if (!lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit;
  if (!lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences and conformance LocalePreferences()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences;
  if (!lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences);
  }
  return result;
}

uint64_t destroy for LocalePreferences(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocalePreferences(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  id v6 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  char v8 = *(void **)(a2 + 72);
  id v7 = *(void **)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v7;
  uint64_t v10 = *(void **)(a2 + 88);
  uint64_t v9 = *(void **)(a2 + 96);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v9;
  uint64_t v18 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v18;
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v11;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = v6;
  id v13 = v8;
  id v14 = v7;
  id v15 = v10;
  id v16 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocalePreferences(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 64);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  id v6 = v5;

  id v7 = *(void **)(a1 + 72);
  char v8 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v8;
  id v9 = v8;

  uint64_t v10 = *(void **)(a1 + 80);
  uint64_t v11 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v11;
  id v12 = v11;

  id v13 = *(void **)(a1 + 88);
  id v14 = *(void **)(a2 + 88);
  *(void *)(a1 + 88) = v14;
  id v15 = v14;

  id v16 = *(void **)(a1 + 96);
  int v17 = *(void **)(a2 + 96);
  *(void *)(a1 + 96) = v17;
  id v18 = v17;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(unsigned char *)(a1 + 138) = *(unsigned char *)(a2 + 138);
  *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
  return a1;
}

__n128 __swift_memcpy140_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for LocalePreferences(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  long long v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  long long v7 = *(void **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalePreferences(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 140)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalePreferences(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 136) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 140) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 140) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.MeasurementUnit()
{
  return &type metadata for LocalePreferences.MeasurementUnit;
}

unsigned char *storeEnumTagSinglePayload for LocalePreferences.MeasurementUnit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CDF068);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.TemperatureUnit()
{
  return &type metadata for LocalePreferences.TemperatureUnit;
}

void destroy for LocalePreferences.ICUSymbolsAndStrings(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for LocalePreferences.ICUSymbolsAndStrings(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned int v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  long long v7 = *(void **)(a2 + 32);
  a1[4] = v7;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  id v12 = v7;
  return a1;
}

uint64_t assignWithCopy for LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  long long v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  id v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  id v13 = *(void **)(a1 + 24);
  id v14 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v14;
  id v15 = v14;

  id v16 = *(void **)(a1 + 32);
  int v17 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v17;
  id v18 = v17;

  return a1;
}

uint64_t assignWithTake for LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for LocalePreferences.ICUSymbolsAndStrings(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalePreferences.ICUSymbolsAndStrings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.ICUSymbolsAndStrings()
{
  return &type metadata for LocalePreferences.ICUSymbolsAndStrings;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings;
  if (!lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings);
  }
  return result;
}

uint64_t UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  return UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *DynamicType;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned __int8 v111;
  char v112;

  int v97 = a8;
  id v98 = a6;
  int v95 = a5;
  int v90 = a2;
  id v99 = a7;
  char v100 = a1;
  id v10 = a7 & 0xFFFFFFFFFFFFFFFELL;
  char v103 = (uint64_t *)(8 * a4);
  if (a4 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (a4)
    {
      id v13 = v10;
      id v14 = (uint64_t *)((char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      id v15 = a4;
      do
      {
        v13 += 8;
        *v14++ = swift_getMetatypeMetadata();
        --v15;
      }
      while (v15);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  int v89 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  id v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v93 = v19;
  if (a4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v16);
    if (a4)
    {
      uint64_t v22 = v10;
      uint64_t v23 = (uint64_t *)((char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v24 = a4;
      do
      {
        v22 += 8;
        *v23++ = type metadata accessor for PredicateExpressions.Variable();
        --v24;
      }
      while (v24);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  id v92 = &v86;
  int v88 = TupleTypeMetadata;
  MEMORY[0x1F4188790](TupleTypeMetadata);
  int v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  id v91 = &v86;
  id v102 = v27;
  uint64_t v94 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  int v29 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v31 = *(void *)a3;
  char v30 = *(void *)(a3 + 8);
  int v32 = *(unsigned char *)(a3 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  id v101 = v29;
  int v33 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  int v97 = &v86;
  MEMORY[0x1F4188790](v33);
  int v36 = (uint64_t **)((char *)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a4)
  {
    uint64_t v37 = 0;
    Swift::UInt8 v38 = (int *)(v88 + 32);
    uint64_t v39 = v90;
    do
    {
      if (a4 == 1) {
        char v40 = 0;
      }
      else {
        char v40 = *v38;
      }
      *(void *)&v26[v40] = **(void **)(v39 + 8 * v37);
      v36[v37++] = (uint64_t *)&v26[v40];
      v38 += 4;
    }
    while (a4 != v37);
    int v109 = v31;
    int v110 = v30;
    int v111 = v32;
    MEMORY[0x1F4188790](v34);
    int v42 = (char *)&v86 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    int v43 = 0;
    int v45 = (int *)(v44 + 32);
    do
    {
      if (a4 == 1) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = *v45;
      }
      int v47 = &v18[v46];
      *(void *)int v47 = *(void *)(v10 + 8 * v43);
      *(void *)&v42[8 * v43++] = v47;
      v45 += 4;
    }
    while (a4 != v43);
  }
  else
  {
    int v109 = v31;
    int v110 = v30;
    int v42 = &v112;
    int v111 = v32;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v42, a4, v99);
  char v48 = v98;
  char v107 = v98;
  char v49 = __swift_allocate_boxed_opaque_existential_1(&v104);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v49, v100, v48);
  __swift_project_boxed_opaque_existential_1(&v104, v107);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
  int v51 = v109;
  int v52 = v110;
  uint64_t v104 = v109;
  char v105 = v110;
  LODWORD(v95) = v111;
  uint64_t v106 = v111;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v53 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  char v103 = &v86;
  if (!v54)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v67 = _typeName(_:qualified:)();
    int v69 = v68;
    uint64_t v104 = 47;
    char v105 = 0xE100000000000000;
    BOOL v108 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v70._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    uint64_t v71 = v104;
    uint64_t v72 = v105;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)int v73 = v67;
    *(void *)(v73 + 8) = v69;
    *(void *)(v73 + 16) = v71;
    *(void *)(v73 + 24) = v72;
    *(unsigned char *)(v73 + 32) = 0;
    swift_willThrow();
    goto LABEL_30;
  }
  int v96 = v52;
  if (v55)
  {
    id v86 = (uint64_t)v53;
    int v89 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v88 = MEMORY[0x1E4FBC860];
    char v66 = v87;
  }
  else
  {
    int v56 = (uint64_t)v53;
    char v57 = v54;
    char v58 = Type.genericArguments2.getter();
    int v60 = v59;
    uint64_t v62 = v61;
    swift_bridgeObjectRetain();
    LOBYTE(v85) = 0;
    uint64_t v63 = v58;
    double v64 = v87;
    uint64_t v65 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v63, v60, v62, v51, v96, v95, MEMORY[0x1E4FBC860], v56, v57);
    char v66 = v64;
    if (v64)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_31:
      uint64_t v74 = v94;
      char v75 = v101;
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v75, v102);
    }
    int v88 = v65;
    id v86 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v89 = v57;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v108) = 0;
  id v76 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  int v90 = v51;
  if (a4)
  {
    int v77 = a4;
    while (1)
    {
      BOOL v108 = **v36;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v104, v107);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      id v76 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v66) {
        break;
      }
      ++v36;
      v10 += 8;
      if (!--v77) {
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
    goto LABEL_31;
  }
LABEL_38:
  MEMORY[0x1F4188790](v76);
  int v78 = v98;
  *(&v86 - 10) = a4;
  *(&v86 - 9) = v78;
  *(&v86 - 8) = v99;
  *(&v86 - 7) = v79;
  char v75 = v101;
  *(&v86 - 6) = v80;
  *(&v86 - 5) = (uint64_t)v75;
  int v81 = v89;
  *(&v86 - 4) = v86;
  *(&v86 - 3) = v81;
  double v84 = v88;
  int v85 = v100;
  specialized _withPredicateArchivingState<A>(_:_:)(v90, v96, v95, v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
  if (v66)
  {
    uint64_t v74 = v94;
    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v75, v102);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v75, v102);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpression<A, each B>(input:output:predicateConfiguration:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, char *a10)
{
  uint64_t v102 = a5;
  char v103 = a10;
  unint64_t v17 = a8 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v94 = a9;
  *(void *)&long long v110 = a9;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v101 = a8;
  int v96 = a2;
  char v105 = a7;
  uint64_t v106 = v11;
  uint64_t v104 = v10;
  if (a6 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1F4188790](ExtendedExistentialTypeMetadata);
    unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      unint64_t v22 = v17;
      uint64_t v23 = (uint64_t *)((char *)&v86 - v21);
      uint64_t v24 = a6;
      do
      {
        v22 += 8;
        *v23++ = type metadata accessor for PredicateExpressions.Variable();
        --v24;
      }
      while (v24);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v107 = &v86;
  uint64_t v91 = a1;
  uint64_t v90 = TupleTypeMetadata;
  uint64_t v93 = v26;
  id v92 = (long long *)((char *)&v86 - v27);
  int v97 = (uint64_t *)v17;
  if (a6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](v26);
    unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      unint64_t v31 = v17;
      int v32 = (uint64_t *)((char *)&v86 - v30);
      uint64_t v33 = a6;
      do
      {
        v31 += 8;
        *v32++ = swift_getMetatypeMetadata();
        --v33;
      }
      while (v33);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v95 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  int v35 = (char *)&v86 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v98 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  Swift::UInt8 v38 = (char *)&v86 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  int v41 = (char *)&v86 - v40;
  uint64_t v99 = *(void *)v102;
  *(void *)&long long v100 = *(void *)(v102 + 8);
  LODWORD(v102) = *(unsigned __int8 *)(v102 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  int v42 = v106;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  if (v42) {
    return result;
  }
  char v44 = v102;
  int v88 = v38;
  uint64_t v89 = 0;
  char v103 = v41;
  uint64_t v104 = &v86;
  char v105 = &v86;
  uint64_t v106 = &v86;
  MEMORY[0x1F4188790](result);
  unint64_t v45 = (8 * a6 + 15) & 0xFFFFFFFFFFFFFFF0;
  char v87 = (char *)&v86 - v45;
  if (a6)
  {
    memcpy((char *)&v86 - v45, v96, 8 * a6);
    uint64_t v113 = v99;
    uint64_t v114 = v100;
    char v115 = v44;
    MEMORY[0x1F4188790](v99);
    uint64_t v46 = (char *)&v86 - v45;
    uint64_t v47 = 0;
    char v48 = (int *)(v95 + 32);
    char v49 = v97;
    do
    {
      if (a6 == 1) {
        int v50 = 0;
      }
      else {
        int v50 = *v48;
      }
      int v51 = &v35[v50];
      *(void *)int v51 = v49[v47];
      *(void *)&v46[8 * v47++] = v51;
      v48 += 4;
    }
    while (a6 != v47);
  }
  else
  {
    uint64_t v113 = v99;
    uint64_t v114 = v100;
    uint64_t v46 = &v116;
    char v115 = v44;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v46, a6, v101);
  LOBYTE(v108[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v52 = v36;
  int v53 = v103;
  uint64_t v54 = v89;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v54)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = v98;
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v53, v52);
  }
  int v97 = &v86;
  int v96 = &v86;
  long long v56 = v110;
  *(void *)&long long v100 = v111;
  uint64_t v57 = v114;
  char v58 = v115;
  uint64_t v59 = *(void *)(v114 + 16);
  uint64_t v102 = v113;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v99 = v57;
  if (!v59) {
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v56, *((uint64_t *)&v56 + 1));
  if ((v61 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    *(void *)&long long v110 = 47;
    *((void *)&v110 + 1) = 0xE100000000000000;
    v108[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v66._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    long long v67 = v110;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v68 = v56;
    *(_OWORD *)(v68 + 16) = v67;
    char v69 = 1;
    goto LABEL_29;
  }
  uint64_t v62 = *(void *)(v57 + 56) + 16 * v60;
  uint64_t v95 = *(void *)v62;
  char v63 = *(unsigned char *)(v62 + 8);
  swift_bridgeObjectRelease();
  if (v63)
  {
    uint64_t v64 = v102;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v65 = swift_bridgeObjectRetain();
    uint64_t v74 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v65, v64, v57, v58, MEMORY[0x1E4FBC860], v56, *((uint64_t *)&v56 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = PartialType.create2(with:)();
    if (v75)
    {
      uint64_t v76 = v75;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v70 = v76;
      goto LABEL_33;
    }
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v68 = v95;
    *(void *)(v68 + 8) = v74;
    *(void *)(v68 + 16) = 0;
    *(void *)(v68 + 24) = 0;
    char v69 = 2;
LABEL_29:
    *(unsigned char *)(v68 + 32) = v69;
    swift_willThrow();
    uint64_t v55 = v98;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v53, v52);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v70 = v95;
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v108[0] = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v112 = v94;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v110) = 2;
    uint64_t v55 = v98;
    int v73 = v88;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v88, v53, v52);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v73, v52);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v53, v52);
  }
  long long v100 = v110;
  uint64_t v71 = v111;
  LOBYTE(v108[0]) = 0;
  uint64_t v72 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v108[0] = v102;
  v108[1] = v99;
  char v109 = v58;
  MEMORY[0x1F4188790](v72);
  uint64_t v77 = v101;
  *(&v86 - 8) = a6;
  *(&v86 - 7) = v77;
  *(&v86 - 6) = v94;
  *(&v86 - 5) = (uint64_t)&v110;
  *((_OWORD *)&v86 - 2) = v100;
  *(&v86 - 2) = v71;
  *(&v86 - 1) = (uint64_t)v53;
  int v78 = v92;
  uint64_t v79 = v93;
  _withPredicateArchivingState<A>(_:_:)(v108, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v78, v91);
  char v80 = (void **)v87;
  if (a6)
  {
    int v81 = (char *)v78 + *(int *)(v79 + 48);
    int v82 = (int *)(v90 + 32);
    uint64_t v83 = a6;
    do
    {
      if (a6 == 1) {
        int v84 = 0;
      }
      else {
        int v84 = *v82;
      }
      int v85 = *v80++;
      void *v85 = *(void *)&v81[v84];
      v82 += 4;
      --v83;
    }
    while (v83);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v110);
  return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v53, v52);
}

uint64_t KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *DynamicType;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned __int8 v111;
  char v112;

  uint64_t v98 = a7;
  int v96 = a5;
  uint64_t v90 = a3;
  uint64_t v95 = a2;
  uint64_t v99 = a8;
  long long v100 = a1;
  id v10 = a8 & 0xFFFFFFFFFFFFFFFELL;
  char v103 = (uint64_t *)(8 * a6);
  if (a6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (a6)
    {
      id v13 = v10;
      id v14 = (uint64_t *)((char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      id v15 = a6;
      do
      {
        v13 += 8;
        *v14++ = swift_getMetatypeMetadata();
        --v15;
      }
      while (v15);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v89 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  id v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = v19;
  if (a6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v16);
    if (a6)
    {
      unint64_t v22 = v10;
      uint64_t v23 = (uint64_t *)((char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v24 = a6;
      do
      {
        v22 += 8;
        *v23++ = type metadata accessor for PredicateExpressions.Variable();
        --v24;
      }
      while (v24);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  id v92 = &v86;
  int v88 = TupleTypeMetadata;
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v91 = &v86;
  uint64_t v102 = v27;
  uint64_t v94 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v31 = *(void *)a4;
  unint64_t v30 = *(void *)(a4 + 8);
  int v32 = *(unsigned char *)(a4 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v101 = v29;
  uint64_t v33 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  int v97 = &v86;
  MEMORY[0x1F4188790](v33);
  uint64_t v36 = (uint64_t **)((char *)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a6)
  {
    uint64_t v37 = 0;
    Swift::UInt8 v38 = (int *)(v88 + 32);
    uint64_t v39 = v90;
    do
    {
      if (a6 == 1) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = *v38;
      }
      *(void *)&v26[v40] = **(void **)(v39 + 8 * v37);
      v36[v37++] = (uint64_t *)&v26[v40];
      v38 += 4;
    }
    while (a6 != v37);
    char v109 = v31;
    long long v110 = v30;
    uint64_t v111 = v32;
    MEMORY[0x1F4188790](v34);
    int v42 = (char *)&v86 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    int v43 = 0;
    unint64_t v45 = (int *)(v44 + 32);
    do
    {
      if (a6 == 1) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = *v45;
      }
      uint64_t v47 = &v18[v46];
      *(void *)uint64_t v47 = *(void *)(v10 + 8 * v43);
      *(void *)&v42[8 * v43++] = v47;
      v45 += 4;
    }
    while (a6 != v43);
  }
  else
  {
    char v109 = v31;
    long long v110 = v30;
    int v42 = &v112;
    uint64_t v111 = v32;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v42, a6, v99);
  char v48 = v98;
  char v107 = v98;
  char v49 = __swift_allocate_boxed_opaque_existential_1(&v104);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v49, v100, v48);
  __swift_project_boxed_opaque_existential_1(&v104, v107);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
  int v51 = v109;
  uint64_t v52 = v110;
  uint64_t v104 = v109;
  char v105 = v110;
  LODWORD(v95) = v111;
  uint64_t v106 = v111;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v53 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  char v103 = &v86;
  if (!v54)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v67 = _typeName(_:qualified:)();
    char v69 = v68;
    uint64_t v104 = 47;
    char v105 = 0xE100000000000000;
    BOOL v108 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v70._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    uint64_t v71 = v104;
    uint64_t v72 = v105;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)int v73 = v67;
    *(void *)(v73 + 8) = v69;
    *(void *)(v73 + 16) = v71;
    *(void *)(v73 + 24) = v72;
    *(unsigned char *)(v73 + 32) = 0;
    swift_willThrow();
    goto LABEL_30;
  }
  int v96 = v52;
  if (v55)
  {
    uint64_t v86 = (uint64_t)v53;
    uint64_t v89 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v88 = MEMORY[0x1E4FBC860];
    Swift::String v66 = v87;
  }
  else
  {
    long long v56 = (uint64_t)v53;
    uint64_t v57 = v54;
    char v58 = Type.genericArguments2.getter();
    unint64_t v60 = v59;
    uint64_t v62 = v61;
    swift_bridgeObjectRetain();
    LOBYTE(v85) = 0;
    char v63 = v58;
    uint64_t v64 = v87;
    uint64_t v65 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v63, v60, v62, v51, v96, v95, MEMORY[0x1E4FBC860], v56, v57);
    Swift::String v66 = v64;
    if (v64)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_31:
      uint64_t v74 = v94;
      uint64_t v75 = v101;
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v75, v102);
    }
    int v88 = v65;
    uint64_t v86 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v89 = v57;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v108) = 0;
  uint64_t v76 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v90 = v51;
  if (a6)
  {
    uint64_t v77 = a6;
    while (1)
    {
      BOOL v108 = **v36;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v104, v107);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      uint64_t v76 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v66) {
        break;
      }
      ++v36;
      v10 += 8;
      if (!--v77) {
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
    goto LABEL_31;
  }
LABEL_38:
  MEMORY[0x1F4188790](v76);
  int v78 = v98;
  *(&v86 - 10) = a6;
  *(&v86 - 9) = v78;
  *(&v86 - 8) = v99;
  *(&v86 - 7) = v79;
  uint64_t v75 = v101;
  *(&v86 - 6) = v80;
  *(&v86 - 5) = (uint64_t)v75;
  int v81 = v89;
  *(&v86 - 4) = v86;
  *(&v86 - 3) = v81;
  int v84 = v88;
  int v85 = v100;
  specialized _withPredicateArchivingState<A>(_:_:)(v90, v96, v95, v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
  if (v66)
  {
    uint64_t v74 = v94;
    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v75, v102);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v75, v102);
}

uint64_t KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)(char *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v8;
  unint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, double);
  char *v47;
  char *v48;
  uint64_t (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  int *v56;
  void *v57;
  uint64_t v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *DynamicType;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t);
  uint64_t v109;
  char *v110;
  void v111[2];
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  char v144;

  uint64_t v135 = a7;
  uint64_t v123 = a8;
  id v11 = a8 & 0xFFFFFFFFFFFFFFFELL;
  int v120 = a5;
  int v119 = a2;
  double v132 = a4;
  uint64_t v133 = a1;
  if (a6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    id v13 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    id v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      id v16 = v11;
      unint64_t v17 = (void *)((char *)v111 - v15);
      id v18 = a6;
      do
      {
        v16 += 8;
        *v17++ = swift_getMetatypeMetadata();
        --v18;
      }
      while (v18);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    id v13 = MetatypeMetadata;
  }
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v20 = (char *)v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  MEMORY[0x1F4188790](v124);
  double v130 = v111;
  char v131 = v8;
  char v129 = v23;
  char v115 = v24;
  uint64_t v134 = (char *)v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = v11;
  uint64_t v113 = v20;
  uint64_t v112 = v13;
  if (a6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v21);
    uint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      int v28 = v11;
      uint64_t v29 = (void *)((char *)v111 - v27);
      unint64_t v30 = a6;
      do
      {
        v28 += 8;
        *v29++ = type metadata accessor for PredicateExpressions.Variable();
        --v30;
      }
      while (v30);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  char v116 = TupleTypeMetadata;
  int v128 = v111;
  MEMORY[0x1F4188790](TupleTypeMetadata - 8);
  int v32 = (char *)v111 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v127 = v111;
  MEMORY[0x1F4188790](v33);
  int v35 = (char *)v111 - v34;
  uint64_t v36 = v135;
  uint64_t v37 = type metadata accessor for Optional();
  uint64_t v126 = v111;
  Swift::UInt8 v38 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v40 = (char *)v111 - v39;
  uint64_t v125 = v111;
  int v41 = *(void *)(v36 - 8);
  int v43 = MEMORY[0x1F4188790](v42);
  unint64_t v45 = (char *)v111 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v117 = *(void *)v132;
  int v118 = *(void *)(v132 + 8);
  LODWORD(v132) = *(unsigned __int8 *)(v132 + 16);
  uint64_t v46 = *(void (**)(char *, char *, double))(v38 + 16);
  uint64_t v47 = v133;
  uint64_t v133 = v48;
  v46(v40, v47, v43);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, v36) == 1) {
    return (*(uint64_t (**)(char *, char *))(v38 + 8))(v40, v133);
  }
  uint64_t v114 = v41;
  int v50 = *(uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v133 = v45;
  int v51 = v50(v45, v40, v36);
  v111[1] = v111;
  MEMORY[0x1F4188790](v51);
  uint64_t v52 = (8 * a6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v111[0] = v52;
  int v53 = (char *)v111 - v52;
  uint64_t v54 = v122;
  uint64_t v55 = v116;
  if (a6)
  {
    long long v56 = (int *)(v116 + 32);
    uint64_t v57 = (void *)((char *)v111 - v52);
    char v58 = a6;
    do
    {
      if (a6 == 1) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = *v56;
      }
      unint64_t v60 = *a3++;
      *(void *)&v35[v59] = *v60;
      *v57++ = &v35[v59];
      v56 += 4;
      --v58;
    }
    while (v58);
  }
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  char v61 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  MEMORY[0x1F4188790](v61);
  uint64_t v62 = (uint64_t **)((char *)v111 - v111[0]);
  if (a6)
  {
    char v63 = 0;
    uint64_t v64 = (int *)(v55 + 32);
    uint64_t v65 = v118;
    Swift::String v66 = v117;
    long long v67 = v132;
    do
    {
      if (a6 == 1) {
        uint64_t v68 = 0;
      }
      else {
        uint64_t v68 = *v64;
      }
      *(void *)&v32[v68] = **(void **)&v53[8 * v63];
      v62[v63++] = (uint64_t *)&v32[v68];
      v64 += 4;
    }
    while (a6 != v63);
    int v121 = v111;
    double v141 = v66;
    v142 = v65;
    v143 = v67;
    MEMORY[0x1F4188790](v66);
    uint64_t v70 = (char *)v111 - ((8 * a6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v71 = 0;
    uint64_t v72 = (int *)(v112 + 32);
    int v73 = v131;
    uint64_t v74 = v114;
    do
    {
      if (a6 == 1) {
        uint64_t v75 = 0;
      }
      else {
        uint64_t v75 = *v72;
      }
      uint64_t v76 = (void *)(v69 + v75);
      char *v76 = *(void *)(v54 + 8 * v71);
      *(void *)&v70[8 * v71++] = v76;
      v72 += 4;
    }
    while (a6 != v71);
  }
  else
  {
    int v121 = v111;
    double v141 = v117;
    v142 = v118;
    uint64_t v70 = &v144;
    v143 = v132;
    int v73 = v131;
    uint64_t v74 = v114;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v70, a6, v123);
  uint64_t v77 = v135;
  char v139 = v135;
  int v78 = __swift_allocate_boxed_opaque_existential_1(&v136);
  (*(void (**)(uint64_t *, char *, uint64_t))(v74 + 16))(v78, v133, v77);
  __swift_project_boxed_opaque_existential_1(&v136, v139);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v136);
  int v81 = v141;
  char v80 = v142;
  uint64_t v136 = v141;
  uint64_t v137 = v142;
  LODWORD(v120) = v143;
  uint64_t v138 = v143;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v82 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v83)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v93 = _typeName(_:qualified:)();
    uint64_t v95 = v94;
    uint64_t v136 = 47;
    uint64_t v137 = 0xE100000000000000;
    char v140 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v96._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v96);
    swift_bridgeObjectRelease();
    int v97 = v136;
    uint64_t v98 = v137;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v99 = v93;
    *(void *)(v99 + 8) = v95;
    *(void *)(v99 + 16) = v97;
    *(void *)(v99 + 24) = v98;
    id v92 = v134;
    *(unsigned char *)(v99 + 32) = 0;
    swift_willThrow();
    goto LABEL_38;
  }
  double v132 = v80;
  int v119 = (uint64_t)v82;
  if (v84)
  {
    int v117 = v83;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v116 = MEMORY[0x1E4FBC860];
  }
  else
  {
    int v85 = v83;
    uint64_t v86 = Type.genericArguments2.getter();
    int v88 = v87;
    uint64_t v90 = v89;
    swift_bridgeObjectRetain();
    LOBYTE(v110) = 0;
    uint64_t v91 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v86, v88, v90, v81, v132, v120, MEMORY[0x1E4FBC860], v119, v85);
    if (v73)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      id v92 = v134;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_39:
      long long v100 = v115;
LABEL_48:
      (*(void (**)(char *, uint64_t))(v100 + 8))(v92, v124);
      return (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v133, v77);
    }
    char v116 = v91;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v117 = v85;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v140) = 0;
  uint64_t v101 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  int v118 = v81;
  if (a6)
  {
    uint64_t v102 = a6;
    while (1)
    {
      char v140 = **v62;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v136, v139);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      uint64_t v101 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v73) {
        break;
      }
      ++v62;
      v54 += 8;
      if (!--v102) {
        goto LABEL_46;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v136);
    id v92 = v134;
    uint64_t v77 = v135;
    goto LABEL_39;
  }
LABEL_46:
  MEMORY[0x1F4188790](v101);
  uint64_t v77 = v135;
  v111[-10] = a6;
  v111[-9] = v77;
  v111[-8] = v123;
  v111[-7] = v103;
  v111[-6] = v104;
  char v105 = v133;
  uint64_t v106 = v119;
  v111[-5] = v134;
  v111[-4] = v106;
  char v107 = v116;
  v111[-3] = v117;
  char v109 = v107;
  long long v110 = v105;
  specialized _withPredicateArchivingState<A>(_:_:)(v118, v132, v120, v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v136);
  if (v73)
  {
    long long v100 = v115;
    id v92 = v134;
    goto LABEL_48;
  }
  (*(void (**)(char *, uint64_t))(v115 + 8))(v134, v124);
  return (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v105, v77);
}

uint64_t static PredicateExpression.outputType.getter()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t KeyedDecodingContainer.decodePredicateExpression<A>(forKey:input:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v76 = a4;
  uint64_t v66 = a3;
  uint64_t v84 = a2;
  uint64_t v78 = a1;
  if (a7 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    id v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (unint64_t i = 0; i < a7; ++i)
      *(void *)&v14[8 * i] = swift_getMetatypeMetadata();
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v79 = &v58;
  MEMORY[0x1F4188790](MetatypeMetadata);
  char v69 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = a8;
  uint64_t v73 = v16;
  if (a7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v16);
    uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (unint64_t j = 0; j < a7; ++j)
      *(void *)&v20[8 * j] = type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v72 = TupleTypeMetadata;
  uint64_t v62 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v75 = &v58;
  MEMORY[0x1F4188790](TupleTypeMetadata);
  long long v67 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = &v58;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v58 - v24;
  uint64_t v71 = &v58;
  MEMORY[0x1F4188790](v26);
  int v28 = (char *)&v58 - v27;
  uint64_t v29 = *(void *)(a6 - 8);
  uint64_t v70 = &v58;
  MEMORY[0x1F4188790](v30);
  int v32 = (char *)&v58 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v61 = *(void *)(v63 - 8);
  uint64_t v65 = &v58;
  double v33 = MEMORY[0x1F4188790](v63);
  int v35 = (char *)&v58 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *a5;
  uint64_t v58 = a5[1];
  char v36 = *((unsigned char *)a5 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))(v32, v64, a6, v33);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v37 = v68;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v37) {
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v32, a6);
  }
  uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v32, a6);
  unint64_t v60 = &v58;
  MEMORY[0x1F4188790](v38);
  int v41 = (char *)&v58 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = 0;
  uint64_t v43 = v72;
  while (v42 != a7)
  {
    if (a7 == 1) {
      int v44 = 0;
    }
    else {
      int v44 = *(_DWORD *)(v43 + 24 + 16 * v42 + 8);
    }
    *(void *)&v41[8 * v42++] = &v25[v44];
  }
  MEMORY[0x1F4188790](v39);
  char v48 = (char *)&v58 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  for (uint64_t k = 0; k != a7; ++k)
  {
    if (a7 == 1) {
      int v50 = 0;
    }
    else {
      int v50 = *(_DWORD *)(v46 + 24 + 16 * k + 8);
    }
    int v51 = &v69[v50];
    *(void *)int v51 = **(void **)(v76 + 8 * k);
    *(void *)&v48[8 * k] = v51;
  }
  v80[0] = v59;
  v80[1] = v58;
  char v81 = v36 & 1;
  KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)((uint64_t)v82, v45, (uint64_t)v48, MEMORY[0x1E4FBB390], (uint64_t)v80, a7, v77, MEMORY[0x1E4FBB390]);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v82, (uint64_t)v83);
  uint64_t v52 = v62;
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v28, v25, v43);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v83, v78);
  int v53 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  uint64_t v54 = v67;
  v53(v67, v28, v43);
  for (uint64_t m = 0; m != a7; ++m)
  {
    if (a7 == 1) {
      int v56 = 0;
    }
    else {
      int v56 = *(_DWORD *)(v43 + 24 + 16 * m + 8);
    }
    **(void **)(v84 + 8 * m) = *(void *)&v54[v56];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v35, v63);
}

uint64_t KeyedDecodingContainer.decodePredicateExpressionIfPresent<A>(forKey:input:predicateConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v61 = a1;
  uint64_t v62 = a4;
  uint64_t v60 = a7;
  uint64_t v59 = a6;
  unint64_t v12 = a6 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v13 = 8 * a5;
  if (a5 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v15 = MetatypeMetadata;
  }
  else
  {
    uint64_t v57 = v7;
    *(void *)&long long v58 = v54;
    MEMORY[0x1F4188790](a1);
    uint64_t v16 = v13;
    uint64_t v17 = (void *)((char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (a5)
    {
      unint64_t v18 = v12;
      uint64_t v19 = v17;
      unint64_t v20 = a5;
      do
      {
        v18 += 8;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }
      while (v20);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v15 = MetatypeMetadata;
    uint64_t v8 = v57;
    uint64_t v13 = v16;
  }
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v22 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v58 = *a3;
  int v23 = *((unsigned __int8 *)a3 + 16);
  uint64_t v24 = KeyedDecodingContainer.contains(_:)();
  if (v24)
  {
    int v66 = v23;
    MEMORY[0x1F4188790](v24);
    uint64_t v25 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v56 = v26;
    if (a5)
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      uint64_t v55 = v13;
      if (a5 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable();
        uint64_t TupleTypeMetadata = swift_checkMetadataState();
      }
      else
      {
        uint64_t v57 = v8;
        v54[1] = v54;
        v54[2] = v27;
        MEMORY[0x1F4188790](v27);
        uint64_t v39 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v40 = 0;
        do
          *(void *)&v39[8 * v40++] = type metadata accessor for PredicateExpressions.Variable();
        while (a5 != v40);
        uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
        uint64_t v8 = v57;
      }
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v42 = 0;
      uint64_t v43 = v60 + *(int *)(TupleTypeMetadata2 + 48);
      int v44 = (int *)(TupleTypeMetadata + 32);
      uint64_t v13 = v55;
      do
      {
        if (a5 == 1) {
          int v45 = 0;
        }
        else {
          int v45 = *v44;
        }
        *(void *)&v25[8 * v42++] = v43 + v45;
        v44 += 4;
      }
      while (a5 != v42);
      *(double *)&long long v38 = MEMORY[0x1F4188790](TupleTypeMetadata2);
      int v35 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v46 = 0;
      uint64_t v47 = (int *)(v15 + 32);
      do
      {
        if (a5 == 1) {
          int v48 = 0;
        }
        else {
          int v48 = *v47;
        }
        char v49 = &v22[v48];
        *(void *)char v49 = **(void **)(a2 + 8 * v46);
        *(void *)&v35[8 * v46++] = v49;
        v47 += 4;
      }
      while (a5 != v46);
      uint64_t v36 = v60;
    }
    else
    {
      int v35 = &v65;
      uint64_t v36 = v60;
      uint64_t v37 = v59;
      long long v38 = v58;
    }
    long long v63 = v38;
    char v64 = v66;
    uint64_t result = KeyedDecodingContainer.decodePredicateExpression<A>(forKey:input:predicateConfiguration:)(v36, (uint64_t)v25, v61, (uint64_t)v35, (uint64_t *)&v63, v62, a5, v37);
    if (!v8)
    {
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a5 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable();
        swift_checkMetadataState();
      }
      else
      {
        MEMORY[0x1F4188790](v50);
        if (a5)
        {
          int v51 = (void *)((char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
          unint64_t v52 = a5;
          do
          {
            v12 += 8;
            *v51++ = type metadata accessor for PredicateExpressions.Variable();
            --v52;
          }
          while (v52);
        }
        swift_getTupleTypeMetadata();
      }
      uint64_t v53 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v36, 0, 1, v53);
    }
  }
  else
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
    if (a5 == 1)
    {
      type metadata accessor for PredicateExpressions.Variable();
      swift_checkMetadataState();
      uint64_t v30 = v60;
    }
    else
    {
      MEMORY[0x1F4188790](v29);
      uint64_t v30 = v60;
      if (a5)
      {
        uint64_t v31 = (void *)((char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
        unint64_t v32 = a5;
        do
        {
          v12 += 8;
          *v31++ = type metadata accessor for PredicateExpressions.Variable();
          --v32;
        }
        while (v32);
      }
      swift_getTupleTypeMetadata();
    }
    uint64_t v33 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v30, 1, 1, v33);
  }
  return result;
}

uint64_t UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)(char *a1, void **a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, double);
  char *v47;
  char *v48;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int *v55;
  void *v56;
  uint64_t v57;
  int v58;
  void *v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  void *v76;
  uint64_t *v77;
  uint64_t *DynamicType;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  Swift::String v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t);
  uint64_t v115;
  char *v116;
  void v117[2];
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  char v150;

  uint64_t v126 = a7;
  id v11 = a7 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v138 = a8;
  uint64_t v136 = a5;
  char v139 = a3;
  char v140 = a1;
  if (a4 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v13 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      uint64_t v16 = v11;
      uint64_t v17 = (void *)((char *)v117 - v15);
      unint64_t v18 = a4;
      do
      {
        v16 += 8;
        *v17++ = swift_getMetatypeMetadata();
        --v18;
      }
      while (v18);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v13 = MetatypeMetadata;
  }
  MEMORY[0x1F4188790](MetatypeMetadata);
  unint64_t v20 = (char *)v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  MEMORY[0x1F4188790](v127);
  double v141 = a6;
  uint64_t v134 = v23;
  uint64_t v135 = v117;
  int v121 = v24;
  char v129 = (char *)v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = v11;
  int v119 = v20;
  int v118 = v13;
  if (a4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v21);
    uint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      int v28 = v11;
      uint64_t v29 = (void *)((char *)v117 - v27);
      uint64_t v30 = a4;
      do
      {
        v28 += 8;
        *v29++ = type metadata accessor for PredicateExpressions.Variable();
        --v30;
      }
      while (v30);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v122 = TupleTypeMetadata;
  uint64_t v133 = v117;
  MEMORY[0x1F4188790](TupleTypeMetadata - 8);
  unint64_t v32 = (char *)v117 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v132 = v117;
  MEMORY[0x1F4188790](v33);
  int v35 = (char *)v117 - v34;
  uint64_t v36 = v141;
  uint64_t v37 = type metadata accessor for Optional();
  char v131 = v117;
  long long v38 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v40 = (char *)v117 - v39;
  double v130 = v117;
  int v41 = *(void *)(v36 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v42);
  int v45 = (char *)v117 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = *v139;
  uint64_t v124 = v139[1];
  LODWORD(v139) = *((unsigned __int8 *)v139 + 16);
  uint64_t v46 = *(void (**)(char *, char *, double))(v38 + 16);
  uint64_t v47 = v140;
  char v140 = v48;
  v46(v40, v47, v43);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, v36) == 1)
  {
    (*(void (**)(char *, char *))(v38 + 8))(v40, v140);
    return dispatch thunk of UnkeyedEncodingContainer.encodeNil()();
  }
  int v120 = v41;
  uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v45, v40, v36);
  v117[1] = v117;
  MEMORY[0x1F4188790](v50);
  int v51 = (8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v117[0] = v51;
  unint64_t v52 = (char *)v117 - v51;
  uint64_t v53 = v129;
  char v140 = v45;
  uint64_t v54 = v122;
  if (a4)
  {
    uint64_t v55 = (int *)(v122 + 32);
    uint64_t v56 = (void *)((char *)v117 - v51);
    uint64_t v57 = a4;
    do
    {
      if (a4 == 1) {
        long long v58 = 0;
      }
      else {
        long long v58 = *v55;
      }
      uint64_t v59 = *a2++;
      *(void *)&v35[v58] = *v59;
      *v56++ = &v35[v58];
      v55 += 4;
      --v57;
    }
    while (v57);
  }
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v60 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1F4188790](v60);
  uint64_t v61 = (uint64_t **)((char *)v117 - v117[0]);
  if (a4)
  {
    uint64_t v62 = 0;
    long long v63 = (int *)(v54 + 32);
    char v64 = v124;
    char v65 = v123;
    int v66 = v139;
    do
    {
      if (a4 == 1) {
        long long v67 = 0;
      }
      else {
        long long v67 = *v63;
      }
      *(void *)&v32[v67] = **(void **)&v52[8 * v62];
      v61[v62++] = (uint64_t *)&v32[v67];
      v63 += 4;
    }
    while (a4 != v62);
    uint64_t v147 = v65;
    uint64_t v148 = v64;
    uint64_t v149 = v66;
    MEMORY[0x1F4188790](v65);
    char v69 = (char *)v117 - ((8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v70 = 0;
    uint64_t v71 = (int *)(v118 + 32);
    uint64_t v72 = v141;
    uint64_t v73 = v120;
    uint64_t v74 = v125;
    do
    {
      if (a4 == 1) {
        uint64_t v75 = 0;
      }
      else {
        uint64_t v75 = *v71;
      }
      uint64_t v76 = (void *)(v68 + v75);
      char *v76 = *(void *)(v74 + 8 * v70);
      *(void *)&v69[8 * v70++] = v76;
      v71 += 4;
    }
    while (a4 != v70);
  }
  else
  {
    uint64_t v147 = v123;
    uint64_t v148 = v124;
    char v69 = &v150;
    uint64_t v149 = v139;
    uint64_t v72 = v141;
    uint64_t v73 = v120;
    uint64_t v74 = v125;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v69, a4, v126);
  uint64_t v145 = v72;
  uint64_t v77 = __swift_allocate_boxed_opaque_existential_1(&v142);
  (*(void (**)(uint64_t *, char *, uint64_t))(v73 + 16))(v77, v140, v72);
  __swift_project_boxed_opaque_existential_1(&v142, v145);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
  uint64_t v79 = v147;
  char v80 = v148;
  v142 = v147;
  v143 = v148;
  LODWORD(v137) = v149;
  double v144 = v149;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v81 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  uint64_t v138 = v83;
  char v139 = v117;
  if (!v83)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v95 = _typeName(_:qualified:)();
    int v96 = v53;
    uint64_t v98 = v97;
    v142 = 47;
    v143 = 0xE100000000000000;
    uint64_t v146 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v99._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v99);
    swift_bridgeObjectRelease();
    long long v100 = v142;
    uint64_t v101 = v143;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v102 = v95;
    *(void *)(v102 + 8) = v98;
    uint64_t v94 = v96;
    *(void *)(v102 + 16) = v100;
    *(void *)(v102 + 24) = v101;
    *(unsigned char *)(v102 + 32) = 0;
    swift_willThrow();
    goto LABEL_38;
  }
  uint64_t v136 = (uint64_t)v81;
  if (v82)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v105 = MEMORY[0x1E4FBC860];
    uint64_t v93 = v128;
  }
  else
  {
    uint64_t v84 = Type.genericArguments2.getter();
    uint64_t v86 = v85;
    int v88 = v87;
    uint64_t v89 = v138;
    swift_bridgeObjectRetain();
    LOBYTE(v116) = 0;
    uint64_t v90 = v84;
    uint64_t v91 = v128;
    id v92 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v90, v86, v88, v79, v80, v137, MEMORY[0x1E4FBC860], v136, v89);
    uint64_t v93 = v91;
    if (v91)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v94 = v129;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v103 = v141;
      uint64_t v104 = v121;
LABEL_47:
      (*(void (**)(char *, uint64_t))(v104 + 8))(v94, v127);
      return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v140, v103);
    }
    char v105 = v92;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  LOBYTE(v146) = 0;
  uint64_t v106 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v124 = v79;
  uint64_t v123 = v80;
  int v128 = v105;
  if (a4)
  {
    char v107 = a4;
    while (1)
    {
      uint64_t v146 = **v61;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v142, v145);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      uint64_t v106 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v93) {
        break;
      }
      ++v61;
      v74 += 8;
      if (!--v107) {
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
    char v103 = v141;
    uint64_t v104 = v121;
    uint64_t v94 = v129;
    goto LABEL_47;
  }
LABEL_45:
  MEMORY[0x1F4188790](v106);
  BOOL v108 = v140;
  char v103 = v141;
  v117[-10] = a4;
  v117[-9] = v103;
  v117[-8] = v126;
  v117[-7] = v109;
  v117[-6] = v110;
  uint64_t v111 = v129;
  uint64_t v112 = v136;
  v117[-5] = v129;
  v117[-4] = v112;
  uint64_t v113 = v128;
  v117[-3] = v138;
  char v115 = v113;
  char v116 = v108;
  specialized _withPredicateArchivingState<A>(_:_:)(v124, v123, v137, v114);
  if (v93)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
    uint64_t v104 = v121;
    uint64_t v94 = v111;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v111, v127);
  return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v108, v103);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpressionIfPresent<A>(input:predicateConfiguration:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = a6;
  uint64_t v67 = a7;
  uint64_t v68 = a4;
  uint64_t v62 = a1;
  uint64_t v64 = a5;
  unint64_t v12 = a5 & 0xFFFFFFFFFFFFFFFELL;
  if (a3 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v14 = MetatypeMetadata;
  }
  else
  {
    uint64_t v65 = a6;
    uint64_t v66 = v7;
    MEMORY[0x1F4188790](a1);
    unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a3)
    {
      unint64_t v17 = v12;
      unint64_t v18 = (void *)((char *)v59 - v16);
      unint64_t v19 = a3;
      do
      {
        v17 += 8;
        *v18++ = swift_getMetatypeMetadata();
        --v19;
      }
      while (v19);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v14 = MetatypeMetadata;
    uint64_t v9 = v65;
    uint64_t v7 = v66;
  }
  unint64_t v20 = v59;
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v22 = (char *)v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v63 = *a2;
  int v23 = *((unsigned __int8 *)a2 + 16);
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v8)
  {
    int v72 = v23;
    if (result)
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a3 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable();
        swift_checkMetadataState();
        uint64_t v26 = v67;
      }
      else
      {
        MEMORY[0x1F4188790](v25);
        unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
        if (a3)
        {
          uint64_t v34 = (void *)((char *)v59 - v33);
          unint64_t v35 = a3;
          do
          {
            v12 += 8;
            *v34++ = type metadata accessor for PredicateExpressions.Variable();
            --v35;
          }
          while (v35);
        }
        swift_getTupleTypeMetadata();
        uint64_t v26 = v67;
      }
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v26, 1, 1, TupleTypeMetadata2);
    }
    else
    {
      uint64_t v65 = v9;
      uint64_t v66 = v7;
      MEMORY[0x1F4188790](result);
      uint64_t v61 = v27;
      int v28 = (char *)v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v29 = v67;
      if (a3)
      {
        uint64_t v60 = v59;
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
        v59[2] = v30;
        if (a3 == 1)
        {
          type metadata accessor for PredicateExpressions.Variable();
          uint64_t TupleTypeMetadata = swift_checkMetadataState();
        }
        else
        {
          v59[0] = v59;
          v59[1] = v59;
          MEMORY[0x1F4188790](v30);
          uint64_t v42 = (char *)v59 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v43 = 0;
          do
            *(void *)&v42[8 * v43++] = type metadata accessor for PredicateExpressions.Variable();
          while (a3 != v43);
          uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
          uint64_t v29 = v67;
        }
        uint64_t v44 = swift_getTupleTypeMetadata2();
        uint64_t v45 = 0;
        uint64_t v46 = v29 + *(int *)(v44 + 48);
        uint64_t v47 = (int *)(TupleTypeMetadata + 32);
        unint64_t v20 = v60;
        do
        {
          if (a3 == 1) {
            int v48 = 0;
          }
          else {
            int v48 = *v47;
          }
          *(void *)&v28[8 * v45++] = v46 + v48;
          v47 += 4;
        }
        while (a3 != v45);
        *(double *)&long long v39 = MEMORY[0x1F4188790](v44);
        uint64_t v37 = (char *)v59 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v51 = 0;
        unint64_t v52 = (int *)(v14 + 32);
        do
        {
          if (a3 == 1) {
            int v53 = 0;
          }
          else {
            int v53 = *v52;
          }
          uint64_t v54 = &v22[v53];
          *(void *)uint64_t v54 = **(void **)(v49 + 8 * v51);
          *(void *)&v37[8 * v51++] = v54;
          v52 += 4;
        }
        while (a3 != v51);
      }
      else
      {
        uint64_t v37 = &v71;
        uint64_t v38 = v64;
        long long v39 = v63;
      }
      long long v69 = v39;
      char v70 = v72;
      UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)(v29, (uint64_t)v28, (uint64_t)v37, (uint64_t *)&v69, a3, v68, v38, v65);
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a3 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable();
        swift_checkMetadataState();
      }
      else
      {
        uint64_t v60 = v20;
        MEMORY[0x1F4188790](v40);
        if (a3)
        {
          uint64_t v56 = (void *)((char *)v59 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
          unint64_t v57 = a3;
          do
          {
            v12 += 8;
            *v56++ = type metadata accessor for PredicateExpressions.Variable();
            --v57;
          }
          while (v57);
        }
        swift_getTupleTypeMetadata();
        uint64_t v29 = v67;
      }
      uint64_t v58 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v29, 0, 1, v58);
    }
  }
  return result;
}

uint64_t KeyedDecodingContainer.decodePredicateExpression<A, each B>(forKey:input:output:predicateConfiguration:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v101 = a6;
  uint64_t v93 = a10;
  *(void *)&long long v108 = a10;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v99 = a9;
  uint64_t v95 = a2;
  char v103 = a7;
  uint64_t v104 = v10;
  uint64_t v102 = a3;
  if (a8 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1F4188790](ExtendedExistentialTypeMetadata);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a8)
    {
      unint64_t v20 = a9 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v21 = (uint64_t *)((char *)&v84 - v19);
      uint64_t v22 = a8;
      do
      {
        v20 += 8;
        *v21++ = type metadata accessor for PredicateExpressions.Variable();
        --v22;
      }
      while (v22);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v105 = &v84;
  uint64_t v90 = a1;
  uint64_t v89 = TupleTypeMetadata;
  uint64_t v92 = v24;
  uint64_t v91 = (long long *)((char *)&v84 - v25);
  int v96 = (uint64_t *)(a9 & 0xFFFFFFFFFFFFFFFELL);
  if (a8 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](v24);
    unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a8)
    {
      unint64_t v29 = a9 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v30 = (uint64_t *)((char *)&v84 - v28);
      uint64_t v31 = a8;
      do
      {
        v29 += 8;
        *v30++ = swift_getMetatypeMetadata();
        --v31;
      }
      while (v31);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v94 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  unint64_t v33 = (char *)&v84 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v97 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (char *)&v84 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  long long v39 = (char *)&v84 - v38;
  uint64_t v98 = *(void *)v101;
  *(void *)&long long v100 = *(void *)(v101 + 8);
  LODWORD(v101) = *(unsigned __int8 *)(v101 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v40 = v104;
  uint64_t result = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v40) {
    return result;
  }
  char v42 = v101;
  uint64_t v86 = v36;
  uint64_t v87 = 0;
  int v88 = v39;
  uint64_t v102 = &v84;
  char v103 = &v84;
  uint64_t v104 = &v84;
  MEMORY[0x1F4188790](result);
  unint64_t v43 = (8 * a8 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v85 = (char *)&v84 - v43;
  if (a8)
  {
    memcpy((char *)&v84 - v43, v95, 8 * a8);
    uint64_t v111 = v98;
    uint64_t v112 = v100;
    char v113 = v42;
    MEMORY[0x1F4188790](v98);
    uint64_t v44 = (char *)&v84 - v43;
    uint64_t v45 = 0;
    uint64_t v46 = (int *)(v94 + 32);
    uint64_t v47 = v96;
    do
    {
      if (a8 == 1) {
        int v48 = 0;
      }
      else {
        int v48 = *v46;
      }
      uint64_t v49 = &v33[v48];
      *(void *)uint64_t v49 = v47[v45];
      *(void *)&v44[8 * v45++] = v49;
      v46 += 4;
    }
    while (a8 != v45);
  }
  else
  {
    uint64_t v111 = v98;
    uint64_t v112 = v100;
    uint64_t v44 = &v114;
    char v113 = v42;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v44, a8, v99);
  LOBYTE(v106[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v50 = v34;
  uint64_t v51 = v88;
  uint64_t v52 = v87;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v52)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = v97;
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v51, v50);
  }
  int v96 = &v84;
  uint64_t v95 = &v84;
  long long v54 = v108;
  *(void *)&long long v100 = v109;
  uint64_t v55 = v112;
  char v56 = v113;
  uint64_t v57 = *(void *)(v112 + 16);
  uint64_t v101 = v111;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v98 = v55;
  if (!v57) {
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v54, *((uint64_t *)&v54 + 1));
  if ((v59 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    *(void *)&long long v108 = 47;
    *((void *)&v108 + 1) = 0xE100000000000000;
    v106[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v64._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    long long v65 = v108;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v66 = v54;
    *(_OWORD *)(v66 + 16) = v65;
    char v67 = 1;
    goto LABEL_29;
  }
  uint64_t v60 = *(void *)(v55 + 56) + 16 * v58;
  uint64_t v94 = *(void *)v60;
  char v61 = *(unsigned char *)(v60 + 8);
  swift_bridgeObjectRelease();
  if (v61)
  {
    uint64_t v62 = v101;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v63 = swift_bridgeObjectRetain();
    uint64_t v72 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v63, v62, v55, v56, MEMORY[0x1E4FBC860], v54, *((uint64_t *)&v54 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v73 = PartialType.create2(with:)();
    if (v73)
    {
      uint64_t v74 = v73;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = v74;
      goto LABEL_33;
    }
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v66 = v94;
    *(void *)(v66 + 8) = v72;
    *(void *)(v66 + 16) = 0;
    *(void *)(v66 + 24) = 0;
    char v67 = 2;
LABEL_29:
    *(unsigned char *)(v66 + 32) = v67;
    swift_willThrow();
    uint64_t v53 = v97;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v51, v50);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = v94;
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v106[0] = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v110 = v93;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v108) = 2;
    uint64_t v53 = v97;
    char v71 = v86;
    (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v86, v51, v50);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v50);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v51, v50);
  }
  long long v100 = v108;
  uint64_t v69 = v109;
  LOBYTE(v106[0]) = 0;
  uint64_t v70 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v106[0] = v101;
  v106[1] = v98;
  char v107 = v56;
  MEMORY[0x1F4188790](v70);
  uint64_t v75 = v99;
  *(&v84 - 8) = a8;
  *(&v84 - 7) = v75;
  *(&v84 - 6) = v93;
  *(&v84 - 5) = (uint64_t)&v108;
  *((_OWORD *)&v84 - 2) = v100;
  *(&v84 - 2) = v69;
  *(&v84 - 1) = (uint64_t)v51;
  uint64_t v76 = v91;
  uint64_t v77 = v92;
  _withPredicateArchivingState<A>(_:_:)(v106, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v76, v90);
  uint64_t v78 = (void **)v85;
  if (a8)
  {
    uint64_t v79 = (char *)v76 + *(int *)(v77 + 48);
    char v80 = (int *)(v89 + 32);
    uint64_t v81 = a8;
    do
    {
      if (a8 == 1) {
        int v82 = 0;
      }
      else {
        int v82 = *v80;
      }
      uint64_t v83 = *v78++;
      *uint64_t v83 = *(void *)&v79[v82];
      v80 += 4;
      --v81;
    }
    while (v81);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v108);
  return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v51, v50);
}

uint64_t KeyedDecodingContainer.decodePredicateExpressionIfPresent<A, each B>(forKey:input:output:predicateConfiguration:)@<X0>(void *a1@<X0>, uint64_t a2@<X3>, char *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v104 = a1;
  char v105 = a3;
  uint64_t v97 = a7;
  uint64_t v89 = a6;
  *(void *)&long long v109 = a6;
  unint64_t v10 = a5 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v92 = a5;
  if (a4 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1F4188790](ExtendedExistentialTypeMetadata);
    unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      unint64_t v15 = v10;
      unint64_t v16 = (void *)((char *)v86 - v14);
      uint64_t v17 = a4;
      do
      {
        v15 += 8;
        *v16++ = type metadata accessor for PredicateExpressions.Variable();
        --v17;
      }
      while (v17);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v94 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v95 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v87 = (long long *)((char *)v86 - v18);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v90 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  int v88 = (char *)v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = v86;
  MEMORY[0x1F4188790](v20);
  int v96 = (char *)v86 - v22;
  uint64_t v102 = v86;
  if (a4 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v24 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](v21);
    unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      unint64_t v27 = v10;
      unint64_t v28 = (void *)((char *)v86 - v26);
      uint64_t v29 = a4;
      do
      {
        v27 += 8;
        *v28++ = swift_getMetatypeMetadata();
        --v29;
      }
      while (v29);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v24 = MetatypeMetadata;
  }
  long long v100 = v86;
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v31 = (char *)v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = v86;
  uint64_t v32 = *(void *)a2;
  *(void *)&long long v91 = *(void *)(a2 + 8);
  int v33 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v34 = KeyedDecodingContainer.contains(_:)();
  if ((v34 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v97, 1, 1, TupleTypeMetadata2);
  }
  int v116 = v33;
  v86[0] = v86;
  uint64_t v35 = 8 * a4;
  MEMORY[0x1F4188790](v34);
  if (a4)
  {
    uint64_t v36 = v97 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v37 = (int *)(v94 + 32);
    uint64_t v38 = (void *)((char *)v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v39 = a4;
    do
    {
      if (a4 == 1) {
        int v40 = 0;
      }
      else {
        int v40 = *v37;
      }
      *v38++ = v36 + v40;
      v37 += 4;
      --v39;
    }
    while (v39);
  }
  v86[1] = v86;
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v42 = v103;
  uint64_t result = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v42) {
    return result;
  }
  uint64_t v103 = 0;
  uint64_t v106 = v86;
  MEMORY[0x1F4188790](result);
  unint64_t v43 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  char v105 = (char *)v86 - v43;
  if (a4)
  {
    memcpy((char *)v86 - v43, (char *)v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * a4);
    uint64_t v112 = v32;
    uint64_t v113 = v91;
    unsigned __int8 v114 = v116;
    MEMORY[0x1F4188790](v32);
    uint64_t v44 = (char *)v86 - v43;
    uint64_t v45 = 0;
    uint64_t v46 = (int *)(v24 + 32);
    uint64_t v47 = v93;
    uint64_t v48 = v92;
    do
    {
      if (a4 == 1) {
        int v49 = 0;
      }
      else {
        int v49 = *v46;
      }
      uint64_t v50 = &v31[v49];
      *(void *)uint64_t v50 = *(void *)(v10 + 8 * v45);
      *(void *)&v44[8 * v45++] = v50;
      v46 += 4;
    }
    while (a4 != v45);
  }
  else
  {
    uint64_t v112 = v32;
    uint64_t v113 = v91;
    uint64_t v44 = &v115;
    unsigned __int8 v114 = v116;
    uint64_t v47 = v93;
    uint64_t v48 = v92;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v44, a4, v48);
  LOBYTE(v107[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v51 = v96;
  uint64_t v52 = v103;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v52)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = v90;
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v51, v47);
  }
  long long v54 = v109;
  uint64_t v55 = v113;
  LODWORD(v103) = v114;
  uint64_t v56 = *(void *)(v113 + 16);
  uint64_t v57 = v112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v104 = v86;
  if (!v56) {
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v54, *((uint64_t *)&v54 + 1));
  if ((v59 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_36:
    *(void *)&long long v109 = 47;
    *((void *)&v109 + 1) = 0xE100000000000000;
    v107[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v64._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    long long v65 = v109;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v66 = v54;
    *(_OWORD *)(v66 + 16) = v65;
    *(unsigned char *)(v66 + 32) = 1;
    swift_willThrow();
    goto LABEL_37;
  }
  uint64_t v60 = *(void *)(v55 + 56) + 16 * v58;
  *(void *)&long long v91 = *(void *)v60;
  char v61 = *(unsigned char *)(v60 + 8);
  swift_bridgeObjectRelease();
  if (v61)
  {
    uint64_t v62 = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v63 = swift_bridgeObjectRetain();
    uint64_t v74 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v63, v57, v55, v103, MEMORY[0x1E4FBC860], v54, *((uint64_t *)&v54 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = v91;
    uint64_t v76 = PartialType.create2(with:)();
    if (v76)
    {
      uint64_t v68 = v76;
      swift_bridgeObjectRelease();
      uint64_t v67 = v55;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v79 = v75;
    *(void *)(v79 + 8) = v74;
    *(void *)(v79 + 16) = 0;
    *(void *)(v79 + 24) = 0;
    *(unsigned char *)(v79 + 32) = 2;
    swift_willThrow();
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v47 = v93;
    uint64_t v53 = v90;
    uint64_t v51 = v96;
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v51, v47);
  }
  swift_bridgeObjectRelease();
  uint64_t v67 = v55;
  swift_bridgeObjectRelease();
  uint64_t v62 = v57;
  uint64_t v68 = v91;
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v107[0] = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v111 = v89;
  swift_getExtendedExistentialTypeMetadata();
  int v69 = swift_dynamicCast();
  uint64_t v51 = v96;
  if (!v69)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v109) = 2;
    uint64_t v53 = v90;
    uint64_t v73 = v88;
    uint64_t v47 = v93;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v88, v51, v93);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v73, v47);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v51, v47);
  }
  long long v91 = v109;
  uint64_t v70 = v110;
  LOBYTE(v107[0]) = 0;
  uint64_t v71 = v93;
  uint64_t v72 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v107[0] = v62;
  v107[1] = v67;
  char v108 = v103;
  MEMORY[0x1F4188790](v72);
  uint64_t v77 = v92;
  v86[-8] = a4;
  v86[-7] = v77;
  v86[-6] = v89;
  v86[-5] = &v109;
  *(_OWORD *)&v86[-4] = v91;
  v86[-2] = v70;
  v86[-1] = v51;
  uint64_t v78 = v87;
  _withPredicateArchivingState<A>(_:_:)(v107, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  uint64_t v103 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v78, v97);
  char v80 = (void **)v105;
  if (a4)
  {
    uint64_t v81 = (char *)v78 + *(int *)(TupleTypeMetadata2 + 48);
    int v82 = (int *)(v94 + 32);
    uint64_t v83 = a4;
    do
    {
      if (a4 == 1) {
        int v84 = 0;
      }
      else {
        int v84 = *v82;
      }
      int v85 = *v80++;
      void *v85 = *(void *)&v81[v84];
      v82 += 4;
      --v83;
    }
    while (v83);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v109);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v51, v71);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v95 + 56))(v97, 0, 1, TupleTypeMetadata2);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpressionIfPresent<A, each B>(input:output:predicateConfiguration:)@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X7>, uint64_t a7@<X8>)
{
  char v115 = a1;
  uint64_t v120 = a3;
  uint64_t v111 = a7;
  uint64_t v103 = a5;
  *(void *)&long long v125 = a5;
  unint64_t v11 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v113 = (uint64_t *)(8 * a2);
  uint64_t v105 = a4;
  *(void *)&long long v119 = v11;
  int v121 = v7;
  uint64_t v122 = a6;
  if (a2 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1F4188790](ExtendedExistentialTypeMetadata);
    if (a2)
    {
      uint64_t v15 = v119;
      unint64_t v16 = (uint64_t *)((char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v17 = a2;
      do
      {
        v15 += 8;
        *v16++ = type metadata accessor for PredicateExpressions.Variable();
        --v17;
      }
      while (v17);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v107 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v109 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v101 = (long long *)((char *)&v97 - v18);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v104 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v102 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v110 = (char *)&v97 - v22;
  uint64_t v117 = v23;
  int v118 = &v97;
  unsigned __int8 v114 = &v97;
  uint64_t v108 = a2;
  if (a2 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](v21);
    if (a2)
    {
      uint64_t v26 = v119;
      unint64_t v27 = (uint64_t *)((char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v28 = a2;
      do
      {
        v26 += 8;
        *v27++ = swift_getMetatypeMetadata();
        --v28;
      }
      while (v28);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x1F4188790](v120);
  uint64_t v30 = (char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v116;
  uint64_t v33 = *v115;
  uint64_t v32 = (uint64_t *)v115[1];
  unsigned __int8 v34 = *((unsigned char *)v115 + 16);
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (v31) {
    return result;
  }
  uint64_t v99 = v33;
  long long v100 = v32;
  char v115 = &v97;
  int v116 = &v97;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56))(v111, 1, 1, TupleTypeMetadata2);
  }
  MEMORY[0x1F4188790](result);
  uint64_t v37 = (char *)&v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v38 = v34;
  uint64_t v39 = v108;
  if (v108)
  {
    uint64_t v40 = v111 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v41 = (int *)(v107 + 32);
    uint64_t v42 = (uint64_t *)((char *)&v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v43 = v108;
    do
    {
      if (v39 == 1) {
        int v44 = 0;
      }
      else {
        int v44 = *v41;
      }
      *v42++ = v40 + v44;
      v41 += 4;
      --v43;
    }
    while (v43);
  }
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v45 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v122 = &v97;
  MEMORY[0x1F4188790](v45);
  unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v121 = (char *)&v97 - v47;
  if (v39)
  {
    memcpy((char *)&v97 - v47, v37, v46);
    uint64_t v128 = v99;
    char v129 = v100;
    unsigned __int8 v130 = v38;
    MEMORY[0x1F4188790](v99);
    int v49 = (char *)&v97 - v47;
    uint64_t v50 = 0;
    uint64_t v51 = (int *)(MetatypeMetadata + 32);
    uint64_t v52 = v105;
    uint64_t v53 = v119;
    do
    {
      if (v39 == 1) {
        int v54 = 0;
      }
      else {
        int v54 = *v51;
      }
      uint64_t v55 = &v30[v54];
      *(void *)uint64_t v55 = *(void *)(v53 + 8 * v50);
      *(void *)&v49[8 * v50++] = v55;
      v51 += 4;
    }
    while (v39 != v50);
    uint64_t v56 = v48;
  }
  else
  {
    uint64_t v56 = &v97;
    uint64_t v128 = v99;
    char v129 = v100;
    int v49 = &v131;
    unsigned __int8 v130 = v38;
    uint64_t v52 = v105;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v49, v39, v52);
  LOBYTE(v123[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v113 = &v97;
  uint64_t v58 = *((void *)&v125 + 1);
  uint64_t v57 = v125;
  *(void *)&long long v119 = v126;
  uint64_t v60 = v128;
  uint64_t v59 = (uint64_t)v129;
  int v61 = v130;
  uint64_t v62 = v129[2];
  swift_bridgeObjectRetain();
  uint64_t v120 = v59;
  swift_bridgeObjectRetain();
  long long v100 = v56;
  if (!v62) {
    goto LABEL_35;
  }
  uint64_t v99 = v60;
  uint64_t v63 = 0;
  swift_bridgeObjectRetain();
  uint64_t v98 = v57;
  uint64_t v64 = v57;
  uint64_t v65 = v120;
  unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v58);
  if ((v67 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v57 = v98;
LABEL_35:
    *(void *)&long long v125 = 47;
    *((void *)&v125 + 1) = 0xE100000000000000;
    v123[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v73._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    long long v74 = v125;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v75 = v57;
    *(void *)(v75 + 8) = v58;
    *(_OWORD *)(v75 + 16) = v74;
    *(unsigned char *)(v75 + 32) = 1;
    swift_willThrow();
    goto LABEL_36;
  }
  int v132 = v61;
  uint64_t v68 = *(void *)(v65 + 56) + 16 * v66;
  uint64_t v69 = *(void *)v68;
  char v70 = *(unsigned char *)(v68 + 8);
  swift_bridgeObjectRelease();
  if (v70)
  {
    uint64_t v97 = v69;
    uint64_t v71 = v99;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v84 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v72, v71, v65, v132, MEMORY[0x1E4FBC860], v98, v58);
    uint64_t v98 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v85 = v97;
    uint64_t v86 = PartialType.create2(with:)();
    if (v86)
    {
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v69 = v87;
      uint64_t v63 = v98;
      goto LABEL_40;
    }
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v90 = v85;
    *(void *)(v90 + 8) = v84;
    *(void *)(v90 + 16) = 0;
    *(void *)(v90 + 24) = 0;
    *(unsigned char *)(v90 + 32) = 2;
    swift_willThrow();
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v76 = v106;
    uint64_t v77 = v104;
    uint64_t v78 = v110;
    return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v78, v76);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_40:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v123[0] = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v79 = v103;
  uint64_t v127 = v103;
  swift_getExtendedExistentialTypeMetadata();
  int v80 = swift_dynamicCast();
  uint64_t v76 = v106;
  if (!v80)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v125) = 2;
    uint64_t v77 = v104;
    uint64_t v83 = v102;
    uint64_t v78 = v110;
    (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v102, v110, v76);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v83, v76);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v78, v76);
  }
  long long v119 = v125;
  uint64_t v81 = v126;
  LOBYTE(v123[0]) = 0;
  uint64_t v78 = v110;
  uint64_t v82 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v63)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = v104;
    return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v78, v76);
  }
  v123[0] = v99;
  v123[1] = v65;
  char v124 = v132;
  MEMORY[0x1F4188790](v82);
  uint64_t v88 = v105;
  *(&v97 - 8) = v39;
  *(&v97 - 7) = v88;
  *(&v97 - 6) = v79;
  *(&v97 - 5) = (uint64_t)&v125;
  *((_OWORD *)&v97 - 2) = v119;
  *(&v97 - 2) = v81;
  *(&v97 - 1) = (uint64_t)v78;
  uint64_t v89 = v101;
  _withPredicateArchivingState<A>(_:_:)(v123, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v89, v111);
  long long v91 = (void **)v121;
  if (v39)
  {
    uint64_t v92 = (char *)v89 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v93 = (int *)(v107 + 32);
    uint64_t v94 = v39;
    do
    {
      if (v39 == 1) {
        int v95 = 0;
      }
      else {
        int v95 = *v93;
      }
      int v96 = *v91++;
      *int v96 = *(void *)&v92[v95];
      v93 += 4;
      --v94;
    }
    while (v94);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v125);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v78, v76);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v109 + 56))(v111, 0, 1, TupleTypeMetadata2);
}

uint64_t protocol witness for AttributedStringProtocol.runs.getter in conformance AttributedString@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(*(void *)v1 + 16);
  long long v5 = *(_OWORD *)(*(void *)v1 + 48);
  v11[1] = *(_OWORD *)(*(void *)v1 + 32);
  v11[2] = v5;
  v11[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v11);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v11);
  long long v6 = v3[1];
  long long v7 = v3[3];
  v10[1] = v3[2];
  v10[2] = v7;
  v10[0] = v6;
  long long v8 = v3[1];
  v12[1] = v3[2];
  v12[2] = v7;
  v12[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v12, (uint64_t)v13);
  outlined retain of Locale((uint64_t)v13);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v10);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0) {
    return AttributedString.Runs.init(_:in:)((uint64_t)v3, a1);
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.subscript.getter@<X0>(void *a1@<X8>)
{
  uint64_t v40 = *v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v3 = *(void *)(v40 + 64);
  uint64_t v39 = *(void *)(v40 + 72);
  uint64_t v4 = *(void *)(v40 + 80);
  uint64_t v41 = *(void *)(v40 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (result < 0) {
    goto LABEL_63;
  }
  uint64_t v6 = result;
  if (v5 < result) {
    goto LABEL_63;
  }
  if (!v3 || (result < v4 ? (BOOL v7 = *(unsigned __int16 *)(v3 + 16) == 0) : (BOOL v7 = 1), v7))
  {
    unint64_t v8 = swift_unknownObjectRetain();
    unint64_t v9 = specialized Rope._endPath.getter(v8);
    swift_unknownObjectRelease();
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (!v3) {
      goto LABEL_52;
    }
    goto LABEL_15;
  }
  uint64_t v25 = *(unsigned __int8 *)(v3 + 18);
  if (*(unsigned char *)(v3 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v12 = v6;
    uint64_t v11 = v3;
    while (1)
    {
      uint64_t v27 = *(unsigned __int16 *)(v11 + 16);
      if (!*(_WORD *)(v11 + 16)) {
        goto LABEL_21;
      }
      uint64_t v28 = *(void *)(v11 + 40);
      BOOL v29 = __OFSUB__(v12, v28);
      uint64_t v30 = v12 - v28;
      if (v29) {
        goto LABEL_59;
      }
      if (__OFADD__(v30, 1)) {
        goto LABEL_60;
      }
      if (v30 + 1 < 1)
      {
        uint64_t v27 = 0;
        goto LABEL_22;
      }
      if (v27 == 1) {
        break;
      }
      uint64_t v31 = (uint64_t *)(v11 + 64);
      uint64_t v32 = 1;
      while (1)
      {
        uint64_t v33 = *v31;
        v31 += 3;
        uint64_t v12 = v30 - v33;
        if (__OFSUB__(v30, v33))
        {
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        if (__OFADD__(v12, 1)) {
          goto LABEL_57;
        }
        if (v12 + 1 < 1) {
          break;
        }
        ++v32;
        uint64_t v30 = v12;
        if (v27 == v32) {
          goto LABEL_21;
        }
      }
      uint64_t v27 = v32;
      uint64_t v12 = v30;
LABEL_22:
      char v26 = (4 * *(unsigned char *)(v11 + 18) + 8) & 0x3C;
      uint64_t v25 = ((-15 << v26) - 1) & v25 | (v27 << v26);
      uint64_t v11 = *(void *)(v11 + 24 + 24 * v27);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      if (!*(unsigned char *)(v11 + 18))
      {
        unint64_t v9 = v25 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_38;
      }
    }
    uint64_t v12 = v30;
LABEL_21:
    if (!v12) {
      goto LABEL_22;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v9 = 0;
  uint64_t v12 = v6;
  uint64_t v11 = v3;
LABEL_38:
  uint64_t v34 = *(unsigned __int16 *)(v11 + 16);
  if (!*(_WORD *)(v11 + 16)) {
    goto LABEL_50;
  }
  uint64_t v35 = *(void *)(v11 + 24);
  BOOL v29 = __OFSUB__(v12, v35);
  uint64_t v14 = v12 - v35;
  if (v29) {
    goto LABEL_67;
  }
  if (!__OFADD__(v14, 1))
  {
    if (v14 + 1 < 1)
    {
      uint64_t v34 = 0;
      goto LABEL_51;
    }
    if (v34 == 1)
    {
      uint64_t v12 = v14;
LABEL_50:
      if (!v12)
      {
        while (1)
        {
LABEL_51:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v9 |= v34 << 8;
          if (v3)
          {
LABEL_15:
            swift_unknownObjectRetain();
            uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v41, v9, v11, v3, v39);
            swift_unknownObjectRelease_n();
            uint64_t v14 = v6 - v12;
            if (!__OFSUB__(v6, v12)) {
              goto LABEL_16;
            }
          }
          else
          {
LABEL_52:
            uint64_t v13 = 0;
            uint64_t v14 = v6 - v12;
            if (!__OFSUB__(v6, v12))
            {
LABEL_16:
              v43[0] = v41;
              v43[1] = v9;
              v43[2] = v11;
              v43[3] = v13;
              v43[4] = v14;
              long long v15 = *(_OWORD *)(v40 + 16);
              long long v16 = *(_OWORD *)(v40 + 48);
              v44[1] = *(_OWORD *)(v40 + 32);
              v44[2] = v16;
              v44[0] = v15;
              long long v17 = *(_OWORD *)(v40 + 16);
              v45[1] = *(_OWORD *)(v40 + 32);
              v45[2] = v16;
              v45[0] = v17;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v45, (uint64_t)v46);
              outlined retain of Locale((uint64_t)v46);
              BigString.utf8.getter();
              uint64_t result = outlined release of Locale((uint64_t)v44);
              if (!__OFSUB__(0, v12))
              {
                uint64_t v18 = BigString.UTF8View.index(_:offsetBy:)();
                uint64_t v20 = v19;
                uint64_t v22 = v21;
                uint64_t v24 = v23;
                outlined release of Locale((uint64_t)v42);
                return AttributedString.Runs.subscript.getter((uint64_t)v43, v18, v20, v22, v24, a1);
              }
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
          }
          __break(1u);
LABEL_55:
          uint64_t v34 = v10;
          uint64_t v12 = v14;
        }
      }
      goto LABEL_68;
    }
    uint64_t v36 = (uint64_t *)(v11 + 48);
    uint64_t v10 = 1;
    while (1)
    {
      uint64_t v37 = *v36;
      v36 += 3;
      uint64_t v12 = v14 - v37;
      if (__OFSUB__(v14, v37)) {
        goto LABEL_65;
      }
      if (__OFADD__(v12, 1)) {
        break;
      }
      if (v12 + 1 < 1) {
        goto LABEL_55;
      }
      ++v10;
      uint64_t v14 = v12;
      if (v34 == v10) {
        goto LABEL_50;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v85 = *v4;
  uint64_t v9 = v4[20];
  uint64_t v11 = v4[21];
  uint64_t v10 = v4[22];
  uint64_t v12 = v4[23];
  uint64_t v13 = v4[24];
  uint64_t v82 = v4[18];
  uint64_t v83 = v4[17];
  uint64_t v14 = v4[19];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0) {
    goto LABEL_64;
  }
  uint64_t v79 = v12;
  uint64_t v80 = v11;
  uint64_t v78 = v13;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (!*(void *)(a2 + 16))
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v16 = v7;
  uint64_t v74 = v14;
  uint64_t v75 = v9;
  uint64_t v18 = *(void *)(v85 + 64);
  uint64_t v17 = *(void *)(v85 + 72);
  uint64_t v19 = *(void *)(v85 + 80);
  uint64_t v84 = *(void *)(v85 + 88);
  swift_unknownObjectRetain();
  uint64_t v87 = v5;
  uint64_t v88 = v6;
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v20 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (v18) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v20 < 0 || v21 < v20) {
    goto LABEL_68;
  }
  uint64_t v72 = v17;
  uint64_t v73 = v16;
  if (!v18 || (*(_WORD *)(v18 + 16) ? (BOOL v22 = v20 < v19) : (BOOL v22 = 0), !v22))
  {
    uint64_t v23 = v10;
    unint64_t v24 = swift_unknownObjectRetain();
    uint64_t v25 = v84;
    unint64_t v26 = specialized Rope._endPath.getter(v24);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    if (!v18)
    {
      uint64_t v29 = 0;
LABEL_52:
      if (!__OFSUB__(v20, v28))
      {
        long long v46 = *(_OWORD *)(v81 + 88);
        long long v94 = *(_OWORD *)(v81 + 72);
        long long v95 = v46;
        long long v47 = *(_OWORD *)(v81 + 120);
        long long v96 = *(_OWORD *)(v81 + 104);
        long long v97 = v47;
        long long v48 = *(_OWORD *)(v81 + 24);
        long long v90 = *(_OWORD *)(v81 + 8);
        long long v91 = v48;
        long long v49 = *(_OWORD *)(v81 + 56);
        long long v92 = *(_OWORD *)(v81 + 40);
        v110[0] = v25;
        v110[1] = v26;
        v110[2] = v27;
        v110[3] = v29;
        v110[4] = v20 - v28;
        uint64_t v89 = v85;
        long long v93 = v49;
        uint64_t v98 = v83;
        uint64_t v99 = v82;
        uint64_t v100 = v14;
        uint64_t v101 = v75;
        uint64_t v102 = v80;
        uint64_t v103 = v23;
        uint64_t v104 = v79;
        uint64_t v105 = v78;
        AttributedString.Runs._firstOfMatchingRuns(with:comparing:)(v110, a2, v106);
        long long v50 = *(_OWORD *)(v85 + 16);
        long long v51 = *(_OWORD *)(v85 + 48);
        v109[1] = *(_OWORD *)(v85 + 32);
        v109[2] = v51;
        v109[0] = v50;
        long long v52 = *(_OWORD *)(v85 + 16);
        v111[1] = *(_OWORD *)(v85 + 32);
        v111[2] = v51;
        v111[0] = v52;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v111, (uint64_t)v112);
        outlined retain of Locale((uint64_t)v112);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v109);
        uint64_t v53 = v106[4];
        uint64_t result = BigString.Index.utf8Offset.getter();
        if (!__OFSUB__(v53, result))
        {
          int v54 = (long long *)(v85 + 16);
          uint64_t v55 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v57 = v56;
          uint64_t v59 = v58;
          uint64_t v61 = v60;
          outlined release of Locale((uint64_t)v107);
          if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
          {
            uint64_t v55 = v83;
            uint64_t v57 = v82;
            uint64_t v59 = v74;
            uint64_t v61 = v75;
          }
          long long v62 = *v54;
          long long v63 = *(_OWORD *)(v85 + 48);
          v108[1] = *(_OWORD *)(v85 + 32);
          uint64_t v108[2] = v63;
          v108[0] = v62;
          long long v64 = *v54;
          v113[1] = *(_OWORD *)(v85 + 32);
          v113[2] = v63;
          v113[0] = v64;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v113, (uint64_t)v114);
          outlined retain of Locale((uint64_t)v114);
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            uint64_t v89 = v55;
            *(void *)&long long v90 = v57;
            *((void *)&v90 + 1) = v59;
            *(void *)&long long v91 = v61;
            *((void *)&v91 + 1) = v87;
            *(void *)&long long v92 = v88;
            *((void *)&v92 + 1) = v8;
            *(void *)&long long v93 = v73;
            uint64_t v65 = BigString._lastConstraintBreak(in:with:)(&v89, a3);
            uint64_t v67 = v66;
            uint64_t v69 = v68;
            uint64_t v71 = v70;
            uint64_t result = outlined release of Locale((uint64_t)v108);
            *a4 = v65;
            a4[1] = v67;
            a4[2] = v69;
            a4[3] = v71;
            return result;
          }
          goto LABEL_71;
        }
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
LABEL_16:
    swift_unknownObjectRetain();
    uint64_t v29 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v25, v26, v27, v18, v72);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_52;
  }
  uint64_t v23 = v10;
  uint64_t v30 = *(unsigned __int8 *)(v18 + 18);
  if (*(unsigned char *)(v18 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v28 = v20;
    uint64_t v27 = v18;
    while (1)
    {
      uint64_t v32 = *(unsigned __int16 *)(v27 + 16);
      if (*(_WORD *)(v27 + 16))
      {
        uint64_t v33 = *(void *)(v27 + 40);
        BOOL v34 = __OFSUB__(v28, v33);
        uint64_t v35 = v28 - v33;
        if (v34) {
          goto LABEL_62;
        }
        if (__OFADD__(v35, 1)) {
          goto LABEL_63;
        }
        if (v35 + 1 < 1)
        {
          uint64_t v32 = 0;
          goto LABEL_21;
        }
        if (v32 != 1)
        {
          uint64_t v36 = (uint64_t *)(v27 + 64);
          uint64_t v37 = 1;
          while (1)
          {
            uint64_t v38 = *v36;
            v36 += 3;
            uint64_t v28 = v35 - v38;
            if (__OFSUB__(v35, v38)) {
              break;
            }
            if (__OFADD__(v28, 1)) {
              goto LABEL_60;
            }
            if (v28 + 1 < 1)
            {
              uint64_t v32 = v37;
              uint64_t v28 = v35;
              goto LABEL_21;
            }
            ++v37;
            uint64_t v35 = v28;
            if (v32 == v37) {
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v28 = v35;
      }
LABEL_20:
      if (v28) {
        goto LABEL_61;
      }
LABEL_21:
      char v31 = (4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C;
      uint64_t v30 = ((-15 << v31) - 1) & v30 | (v32 << v31);
      uint64_t v27 = *(void *)(v27 + 24 + 24 * v32);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      if (!*(unsigned char *)(v27 + 18))
      {
        unint64_t v39 = v30 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_37;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v39 = 0;
  uint64_t v28 = v20;
  uint64_t v27 = v18;
LABEL_37:
  uint64_t v40 = *(unsigned __int16 *)(v27 + 16);
  uint64_t v25 = v84;
  if (*(_WORD *)(v27 + 16))
  {
    uint64_t v41 = *(void *)(v27 + 24);
    BOOL v34 = __OFSUB__(v28, v41);
    uint64_t v42 = v28 - v41;
    if (v34)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    if (__OFADD__(v42, 1))
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v42 + 1 < 1)
    {
      uint64_t v40 = 0;
LABEL_50:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v26 = v39 | (v40 << 8);
      goto LABEL_16;
    }
    if (v40 != 1)
    {
      uint64_t v43 = (uint64_t *)(v27 + 48);
      uint64_t v44 = 1;
      while (1)
      {
        uint64_t v45 = *v43;
        v43 += 3;
        uint64_t v28 = v42 - v45;
        if (__OFSUB__(v42, v45)) {
          goto LABEL_72;
        }
        if (__OFADD__(v28, 1)) {
          goto LABEL_73;
        }
        if (v28 + 1 < 1)
        {
          uint64_t v40 = v44;
          uint64_t v28 = v42;
          goto LABEL_50;
        }
        ++v44;
        uint64_t v42 = v28;
        if (v40 == v44) {
          goto LABEL_49;
        }
      }
    }
    uint64_t v28 = v42;
  }
LABEL_49:
  if (!v28) {
    goto LABEL_50;
  }
LABEL_76:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = *v4;
  uint64_t v11 = v4[17];
  uint64_t v12 = v4[18];
  uint64_t v13 = v4[19];
  uint64_t v14 = v4[20];
  uint64_t v15 = v4[21];
  uint64_t v17 = v5[22];
  uint64_t v16 = v5[23];
  uint64_t v18 = v5[24];
  uint64_t v89 = v12;
  uint64_t v90 = v11;
  uint64_t v87 = v14;
  uint64_t v88 = v13;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_68;
  }
  uint64_t v99 = v16;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (!*(void *)(a2 + 16))
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v91 = v18;
  uint64_t v97 = v17;
  uint64_t v98 = v15;
  uint64_t v20 = *(void *)(v10 + 64);
  uint64_t v86 = *(void *)(v10 + 72);
  uint64_t v22 = *(void *)(v10 + 80);
  uint64_t v21 = *(void *)(v10 + 88);
  swift_unknownObjectRetain();
  uint64_t v23 = v7;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v20) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = 0;
  }
  if (result < 0) {
    goto LABEL_71;
  }
  uint64_t v25 = result;
  if (v24 < result) {
    goto LABEL_71;
  }
  uint64_t v92 = v23;
  uint64_t v93 = v21;
  uint64_t v95 = v8;
  uint64_t v96 = v6;
  uint64_t v94 = v9;
  uint64_t v85 = result;
  if (!v20 || result >= v22 || !*(_WORD *)(v20 + 16))
  {
    unint64_t v38 = swift_unknownObjectRetain();
    uint64_t v39 = v86;
    uint64_t v40 = specialized Rope._endPath.getter(v38);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v30 = 0;
    uint64_t v27 = 0;
    uint64_t v41 = v91;
    if (!v20)
    {
      uint64_t v42 = 0;
LABEL_49:
      if (!__OFSUB__(v85, v27))
      {
        v128[0] = v93;
        v128[1] = v40;
        v128[2] = v30;
        v128[3] = v42;
        double v128[4] = v85 - v27;
        long long v49 = *(_OWORD *)(v10 + 16);
        long long v50 = *(_OWORD *)(v10 + 48);
        v129[1] = *(_OWORD *)(v10 + 32);
        v129[2] = v50;
        v129[0] = v49;
        long long v51 = *(_OWORD *)(v10 + 16);
        v131[1] = *(_OWORD *)(v10 + 32);
        v131[2] = v50;
        v131[0] = v51;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v131, (uint64_t)v132);
        outlined retain of Locale((uint64_t)v132);
        BigString.utf8.getter();
        uint64_t result = outlined release of Locale((uint64_t)v129);
        if (!__OFSUB__(0, v27))
        {
          BigString.UTF8View.index(_:offsetBy:)();
          outlined release of Locale((uint64_t)v118);
          long long v52 = *(_OWORD *)(v5 + 11);
          long long v106 = *(_OWORD *)(v5 + 9);
          long long v107 = v52;
          long long v53 = *(_OWORD *)(v5 + 15);
          long long v108 = *(_OWORD *)(v5 + 13);
          long long v109 = v53;
          long long v54 = *(_OWORD *)(v5 + 3);
          long long v102 = *(_OWORD *)(v5 + 1);
          long long v103 = v54;
          long long v55 = *(_OWORD *)(v5 + 7);
          long long v104 = *(_OWORD *)(v5 + 5);
          uint64_t v101 = v10;
          long long v105 = v55;
          uint64_t v110 = v90;
          uint64_t v111 = v89;
          uint64_t v112 = v88;
          uint64_t v113 = v87;
          uint64_t v114 = v98;
          uint64_t v115 = v97;
          uint64_t v116 = v99;
          uint64_t v117 = v41;
          uint64_t result = (uint64_t)AttributedString.Runs._lastOfMatchingRuns(with:comparing:)(v128, a2, &v119);
          uint64_t v56 = *(void *)(v10 + 64);
          uint64_t v57 = *(void *)(v10 + 88);
          long long v123 = v119;
          uint64_t v124 = v120;
          if ((void)v119 == v57)
          {
            outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v124, (uint64_t)v125);
            outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v125, (uint64_t)&v130);
            if (v130)
            {
              unint64_t v58 = *(void *)(v130
                              + 24 * ((*((void *)&v123 + 1) >> ((4 * *(unsigned char *)(v130 + 18) + 8) & 0x3C)) & 0xFLL)
                              + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              unint64_t v59 = *((void *)&v123 + 1);
              swift_unknownObjectRetain();
              unint64_t v58 = specialized Rope._Node.subscript.getter(v59, v56);
              swift_unknownObjectRelease();
            }
            uint64_t v60 = v121;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (!__OFADD__(v60, v58))
            {
              uint64_t v61 = (long long *)(v10 + 16);
              long long v62 = *(_OWORD *)(v10 + 16);
              long long v63 = *(_OWORD *)(v10 + 48);
              v127[1] = *(_OWORD *)(v10 + 32);
              v127[2] = v63;
              v127[0] = v62;
              long long v64 = *(_OWORD *)(v10 + 16);
              v133[1] = *(_OWORD *)(v10 + 32);
              v133[2] = v63;
              v133[0] = v64;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v133, (uint64_t)v134);
              outlined retain of Locale((uint64_t)v134);
              BigString.utf8.getter();
              outlined release of Locale((uint64_t)v127);
              uint64_t result = BigString.Index.utf8Offset.getter();
              if (!__OFSUB__(v60 + v58, result))
              {
                uint64_t v65 = BigString.UTF8View.index(_:offsetBy:)();
                uint64_t v67 = v66;
                uint64_t v69 = v68;
                uint64_t v71 = v70;
                outlined release of Locale((uint64_t)v122);
                if (static BigString.Index.< infix(_:_:)())
                {
                  uint64_t v65 = v98;
                  uint64_t v67 = v97;
                  uint64_t v69 = v99;
                  uint64_t v72 = v41;
                }
                else
                {
                  uint64_t v72 = v71;
                }
                long long v73 = *v61;
                long long v74 = *(_OWORD *)(v10 + 48);
                v126[1] = *(_OWORD *)(v10 + 32);
                v126[2] = v74;
                v126[0] = v73;
                long long v75 = *v61;
                v135[1] = *(_OWORD *)(v10 + 32);
                v135[2] = v74;
                v135[0] = v75;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v135, (uint64_t)v136);
                outlined retain of Locale((uint64_t)v136);
                uint64_t result = static BigString.Index.< infix(_:_:)();
                if ((result & 1) == 0)
                {
                  uint64_t v101 = v92;
                  *(void *)&long long v102 = v96;
                  *((void *)&v102 + 1) = v95;
                  *(void *)&long long v103 = v94;
                  *((void *)&v103 + 1) = v65;
                  *(void *)&long long v104 = v67;
                  *((void *)&v104 + 1) = v69;
                  *(void *)&long long v105 = v72;
                  uint64_t v76 = BigString._firstConstraintBreak(in:with:)(&v101, a3);
                  uint64_t v78 = v77;
                  uint64_t v80 = v79;
                  uint64_t v82 = v81;
                  uint64_t result = outlined release of Locale((uint64_t)v126);
                  *a4 = v76;
                  a4[1] = v78;
                  a4[2] = v80;
                  a4[3] = v82;
                  return result;
                }
                goto LABEL_77;
              }
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v42 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v93, v40, v30, v20, v39);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  uint64_t v26 = *(unsigned __int8 *)(v20 + 18);
  if (*(unsigned char *)(v20 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v27 = v25;
    uint64_t v28 = v20;
    while (1)
    {
      uint64_t v31 = *(unsigned __int16 *)(v28 + 16);
      if (*(_WORD *)(v28 + 16))
      {
        uint64_t v32 = *(void *)(v28 + 40);
        BOOL v33 = __OFSUB__(v27, v32);
        uint64_t v34 = v27 - v32;
        if (v33) {
          goto LABEL_66;
        }
        if (__OFADD__(v34, 1)) {
          goto LABEL_67;
        }
        if (v34 + 1 < 1)
        {
          uint64_t v31 = 0;
          goto LABEL_16;
        }
        if (v31 != 1)
        {
          uint64_t v35 = (uint64_t *)(v28 + 64);
          uint64_t v36 = 1;
          while (1)
          {
            uint64_t v37 = *v35;
            v35 += 3;
            uint64_t v27 = v34 - v37;
            if (__OFSUB__(v34, v37)) {
              break;
            }
            if (__OFADD__(v27, 1)) {
              goto LABEL_64;
            }
            if (v27 + 1 < 1)
            {
              uint64_t v31 = v36;
              uint64_t v27 = v34;
              goto LABEL_16;
            }
            ++v36;
            uint64_t v34 = v27;
            if (v31 == v36) {
              goto LABEL_15;
            }
          }
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        uint64_t v27 = v34;
      }
LABEL_15:
      if (v27) {
        goto LABEL_65;
      }
LABEL_16:
      char v29 = (4 * *(unsigned char *)(v28 + 18) + 8) & 0x3C;
      uint64_t v26 = ((-15 << v29) - 1) & v26 | (v31 << v29);
      uint64_t v30 = *(void *)(v28 + 24 + 24 * v31);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v28 = v30;
      if (!*(unsigned char *)(v30 + 18)) {
        goto LABEL_33;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v27 = v25;
  uint64_t v30 = v20;
LABEL_33:
  uint64_t v43 = *(unsigned __int16 *)(v30 + 16);
  if (*(_WORD *)(v30 + 16))
  {
    uint64_t v44 = *(void *)(v30 + 24);
    BOOL v33 = __OFSUB__(v27, v44);
    uint64_t v45 = v27 - v44;
    uint64_t v41 = v91;
    if (v33)
    {
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    if (__OFADD__(v45, 1))
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if (v45 + 1 < 1)
    {
      uint64_t v43 = 0;
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v40 = v26 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
      uint64_t v39 = v86;
      goto LABEL_31;
    }
    if (v43 != 1)
    {
      long long v46 = (uint64_t *)(v30 + 48);
      uint64_t v47 = 1;
      while (1)
      {
        uint64_t v48 = *v46;
        v46 += 3;
        uint64_t v27 = v45 - v48;
        if (__OFSUB__(v45, v48)) {
          goto LABEL_78;
        }
        if (__OFADD__(v27, 1)) {
          goto LABEL_79;
        }
        if (v27 + 1 < 1)
        {
          uint64_t v43 = v47;
          uint64_t v27 = v45;
          goto LABEL_47;
        }
        ++v47;
        uint64_t v45 = v27;
        if (v43 == v47) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v27 = v45;
  }
  else
  {
    uint64_t v41 = v91;
  }
LABEL_46:
  if (!v27) {
    goto LABEL_47;
  }
LABEL_82:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v207 = a4;
  uint64_t v202 = a3;
  char v191 = a1;
  double v192 = a5;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v204 = (void *)*v5;
  uint64_t v10 = v5[1];
  uint64_t v210 = v5[9];
  uint64_t v11 = v5[18];
  uint64_t v12 = v5[19];
  uint64_t v13 = v5[20];
  uint64_t v187 = v5[17];
  uint64_t v188 = v10;
  uint64_t v185 = v12;
  uint64_t v186 = v11;
  uint64_t v184 = v13;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_180;
  }
  uint64_t v206 = v9;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_181:
    __break(1u);
    goto LABEL_182;
  }
  if (!*(void *)(v202 + 16))
  {
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
    goto LABEL_184;
  }
  uint64_t v15 = v6;
  uint64_t v16 = v8;
  uint64_t v199 = *(void *)(v202 + 16);
  uint64_t v17 = v204;
  uint64_t v18 = v204[8];
  uint64_t v19 = v204[9];
  uint64_t v20 = v204[10];
  uint64_t v21 = v204[11];
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v18) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = 0;
  }
  if (result < 0) {
    goto LABEL_183;
  }
  uint64_t v23 = result;
  if (v22 < result) {
    goto LABEL_183;
  }
  uint64_t v203 = v21;
  uint64_t v196 = v16;
  uint64_t v197 = v15;
  uint64_t v201 = v7;
  uint64_t v209 = (uint64_t *)v19;
  if (!v18 || result >= v20 || !*(_WORD *)(v18 + 16))
  {
    unint64_t v36 = swift_unknownObjectRetain();
    unint64_t v205 = specialized Rope._endPath.getter(v36);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v37 = 0;
    uint64_t v25 = 0;
    if (!v18)
    {
LABEL_48:
      uint64_t v200 = 0;
LABEL_49:
      uint64_t v198 = v23 - v25;
      if (__OFSUB__(v23, v25))
      {
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }
      long long v44 = *((_OWORD *)v17 + 1);
      long long v45 = *((_OWORD *)v17 + 2);
      long long v251 = *((_OWORD *)v17 + 3);
      v250[1] = v45;
      v250[0] = v44;
      long long v46 = *((_OWORD *)v17 + 1);
      long long v47 = *((_OWORD *)v17 + 2);
      v252[2] = v251;
      v252[1] = v47;
      v252[0] = v46;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v252, (uint64_t)v253);
      outlined retain of Locale((uint64_t)v253);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v250);
      if (__OFSUB__(0, v25)) {
        goto LABEL_185;
      }
      uint64_t v48 = v206;
      uint64_t v49 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      uint64_t v183 = v54;
      uint64_t result = outlined release of Locale((uint64_t)&v233);
      uint64_t v55 = v200;
      if (v200 == v210)
      {
        uint64_t v56 = v191;
        uint64_t v57 = v192;
        uint64_t v24 = v201;
        uint64_t v23 = v196;
        uint64_t v58 = v197;
LABEL_169:
        *uint64_t v56 = v24;
        v56[1] = v58;
        v56[2] = v48;
        void v56[3] = v23;
        unint64_t v173 = v205;
        *uint64_t v57 = v21;
        v57[1] = v173;
        v57[2] = v37;
        v57[3] = v55;
        v57[4] = v198;
        return result;
      }
      if (v21 != v17[11])
      {
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      if (v37)
      {
        unint64_t v59 = v37 + 24 * ((v205 >> ((4 * *(unsigned char *)(v37 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v60 = *(void *)(v59 + 40);
        uint64_t v195 = *(void *)(v59 + 32);
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v61 = v17[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v205, v61);
        uint64_t v195 = v62;
        uint64_t v60 = v63;
        uint64_t result = swift_unknownObjectRelease();
      }
      uint64_t v180 = v37;
      if (v188 < v200)
      {
        v174[0] = v60;
        v174[1] = v53;
        v174[2] = v51;
        v174[3] = v49;
        int v208 = (long long *)&v240;
        uint64_t v209 = &v221;
        uint64_t v176 = (uint64_t *)(v202 + 40);
        uint64_t v181 = v198;
        uint64_t v182 = v200;
        unint64_t v64 = v205;
        uint64_t v65 = v37;
LABEL_59:
        uint64_t v66 = v17[8];
        uint64_t v67 = v17[11];
        uint64_t v217 = v21;
        uint64_t v218 = v64;
        uint64_t v219 = v65;
        if (v21 != v67) {
          goto LABEL_191;
        }
        if (v66)
        {
          unint64_t v68 = *(unsigned __int8 *)(v66 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v64 <= v68) {
            goto LABEL_192;
          }
        }
        else if (!v64)
        {
LABEL_192:
          __break(1u);
          goto LABEL_193;
        }
        if (v65)
        {
          char v69 = (4 * *(unsigned char *)(v65 + 18) + 8) & 0x3C;
          if (((v64 >> v69) & 0xF) != 0)
          {
            unint64_t v70 = ((((v64 >> v69) & 0xF) - 1) << v69) | ((-15 << v69) - 1) & v64;
            uint64_t v218 = v70;
LABEL_71:
            char v75 = (4 * *(unsigned char *)(v65 + 18) + 8) & 0x3C;
            unint64_t v179 = v70;
            uint64_t v177 = v65;
            unint64_t v76 = *(void *)(v65 + 24 * ((v70 >> v75) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v77 = 0;
LABEL_75:
            uint64_t v78 = v204;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (__OFSUB__(v181, v76))
            {
LABEL_194:
              __break(1u);
              goto LABEL_195;
            }
            if (v21 != v78[11])
            {
LABEL_195:
              __break(1u);
              goto LABEL_196;
            }
            uint64_t v175 = v181 - v76;
            if (v77)
            {
              uint64_t v79 = v78[8];
              swift_unknownObjectRetain();
              specialized Rope._Node.subscript.getter(v179, v79);
              uint64_t v178 = v80;
              uint64_t v82 = v81;
              swift_unknownObjectRelease();
            }
            else
            {
              unint64_t v83 = v177 + 24 * ((v179 >> ((4 * *(unsigned char *)(v177 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v82 = *(void *)(v83 + 32);
              uint64_t v84 = *(void *)(v83 + 40);
              swift_bridgeObjectRetain();
              uint64_t v178 = v84;
              swift_bridgeObjectRetain();
            }
            uint64_t v85 = v199;
            uint64_t v86 = v195;
            --v182;
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v87 = 0;
            uint64_t v88 = v176;
            uint64_t v210 = v82;
            while (1)
            {
              uint64_t v90 = v87 + 1;
              if (__OFADD__(v87, 1)) {
                goto LABEL_175;
              }
              uint64_t v92 = *(v88 - 1);
              uint64_t v91 = *v88;
              if (*(void *)(v86 + 16))
              {
                swift_bridgeObjectRetain_n();
                unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v91);
                if (v94)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v86 + 56) + 72 * v93, (uint64_t)&v228);
                }
                else
                {
                  uint64_t v232 = 0;
                  long long v230 = 0u;
                  long long v231 = 0u;
                  long long v228 = 0u;
                  long long v229 = 0u;
                }
                swift_bridgeObjectRelease();
                uint64_t v82 = v210;
                if (!*(void *)(v210 + 16))
                {
LABEL_90:
                  uint64_t v227 = 0;
                  long long v225 = 0u;
                  long long v226 = 0u;
                  long long v223 = 0u;
                  long long v224 = 0u;
                  goto LABEL_97;
                }
              }
              else
              {
                uint64_t v232 = 0;
                long long v230 = 0u;
                long long v231 = 0u;
                long long v228 = 0u;
                long long v229 = 0u;
                swift_bridgeObjectRetain();
                if (!*(void *)(v82 + 16)) {
                  goto LABEL_90;
                }
              }
              swift_bridgeObjectRetain();
              unint64_t v95 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v91);
              if (v96)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v82 + 56) + 72 * v95, (uint64_t)&v223);
              }
              else
              {
                uint64_t v227 = 0;
                long long v225 = 0u;
                long long v226 = 0u;
                long long v223 = 0u;
                long long v224 = 0u;
              }
              swift_bridgeObjectRelease();
LABEL_97:
              swift_bridgeObjectRelease();
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v228, (uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v223, (uint64_t)v209, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v220)
              {
                if (v222) {
                  goto LABEL_114;
                }
                outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t result = outlined destroy of Any?((uint64_t)&v228, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                goto LABEL_84;
              }
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v217, (uint64_t)v216, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v222)
              {
                outlined destroy of AttributedString._AttributeValue((uint64_t)v216);
LABEL_114:
                outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v228, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_115:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v17 = v204;
                uint64_t v110 = v181;
                goto LABEL_116;
              }
              long long v97 = *((_OWORD *)v209 + 3);
              long long v213 = *((_OWORD *)v209 + 2);
              long long v214 = v97;
              uint64_t v215 = v209[8];
              long long v98 = *((_OWORD *)v209 + 1);
              long long v211 = *(_OWORD *)v209;
              long long v212 = v98;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v216, (uint64_t)v254);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v211, (uint64_t)v248);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v254, (uint64_t)&v238, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v248, (uint64_t)v208, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              if (v239)
              {
                if (!v241)
                {
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v238);
LABEL_82:
                  char v89 = 0;
                  goto LABEL_83;
                }
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v238, (uint64_t)&v245);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v208, (uint64_t)v243);
                uint64_t v99 = *((void *)&v246 + 1);
                uint64_t v190 = v247;
                char v189 = __swift_project_boxed_opaque_existential_1(&v245, *((uint64_t *)&v246 + 1));
                uint64_t v194 = v174;
                uint64_t v100 = *(void *)(v99 - 8);
                MEMORY[0x1F4188790](v189);
                long long v102 = (char *)v174 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v243, (uint64_t)v242);
                uint64_t v103 = type metadata accessor for Optional();
                uint64_t v193 = v174;
                uint64_t v104 = *(void *)(v103 - 8);
                MEMORY[0x1F4188790](v103);
                long long v106 = (char *)v174 - v105;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                int v107 = swift_dynamicCast();
                long long v108 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56);
                if (v107)
                {
                  v108(v106, 0, 1, v99);
                  (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v102, v106, v99);
                  char v89 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v99);
                }
                else
                {
                  v108(v106, 1, 1, v99);
                  (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v103);
                  char v89 = 0;
                }
                uint64_t v85 = v199;
                uint64_t v86 = v195;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v243);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v245);
                uint64_t v21 = v203;
              }
              else
              {
                if (v241)
                {
                  outlined destroy of Any?((uint64_t)v208, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  goto LABEL_82;
                }
                char v89 = 1;
              }
LABEL_83:
              outlined destroy of Any?((uint64_t)v248, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?((uint64_t)v254, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v211);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v216);
              outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v228, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if ((v89 & 1) == 0) {
                goto LABEL_115;
              }
LABEL_84:
              v88 += 2;
              ++v87;
              uint64_t v82 = v210;
              if (v90 == v85)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v109 = v175;
                uint64_t v181 = v175;
                uint64_t v17 = v204;
                unint64_t v64 = v179;
                uint64_t v65 = v177;
                if (v188 < v182) {
                  goto LABEL_59;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v110 = v109;
                goto LABEL_116;
              }
            }
          }
        }
        int v71 = *(unsigned __int8 *)(v66 + 18);
        char v72 = (4 * v71 + 8) & 0x3C;
        uint64_t v73 = (v64 >> v72) & 0xF;
        *(void *)&long long v238 = v73;
        if (v71)
        {
          swift_unknownObjectRetain();
          char v74 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v66 + 16, v66 + 24, (uint64_t *)&v238, (uint64_t)&v217, v71);
          uint64_t result = swift_unknownObjectRelease();
          if (v74)
          {
            uint64_t v21 = v203;
            if (v217 != v203)
            {
LABEL_193:
              __break(1u);
              goto LABEL_194;
            }
            unint64_t v70 = v218;
            uint64_t v65 = v219;
            if (v219) {
              goto LABEL_71;
            }
            goto LABEL_74;
          }
        }
        else if (v73)
        {
          unint64_t v70 = ((v73 - 1) << v72) | ((-15 << v72) - 1) & v64;
          uint64_t v218 = v70;
          uint64_t v219 = v66;
          uint64_t v65 = v66;
          if (v66) {
            goto LABEL_71;
          }
LABEL_74:
          swift_unknownObjectRetain();
          unint64_t v179 = v70;
          unint64_t v76 = specialized Rope._Node.subscript.getter(v70, v66);
          swift_unknownObjectRelease();
          uint64_t v177 = 0;
          char v77 = 1;
          goto LABEL_75;
        }
LABEL_196:
        __break(1u);
        goto LABEL_197;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v110 = v198;
LABEL_116:
      uint64_t v111 = (long long *)(v17 + 2);
      long long v112 = *((_OWORD *)v17 + 1);
      long long v113 = *((_OWORD *)v17 + 2);
      long long v249 = *((_OWORD *)v17 + 3);
      v248[1] = v113;
      v248[0] = v112;
      long long v114 = *((_OWORD *)v17 + 1);
      v254[1] = *((_OWORD *)v17 + 2);
      v254[2] = v249;
      v254[0] = v114;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v254, (uint64_t)v255);
      outlined retain of Locale((uint64_t)v255);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v248);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v110, result)) {
        goto LABEL_189;
      }
      uint64_t v115 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v117 = v116;
      uint64_t v119 = v118;
      uint64_t v21 = v120;
      outlined release of Locale((uint64_t)&v234);
      uint64_t v121 = v186;
      uint64_t v122 = v187;
      uint64_t v123 = v184;
      uint64_t v124 = v185;
      char v125 = static BigString.Index.< infix(_:_:)();
      if (v125) {
        uint64_t v126 = v115;
      }
      else {
        uint64_t v126 = v122;
      }
      if (v125) {
        uint64_t v121 = v117;
      }
      else {
        uint64_t v119 = v124;
      }
      uint64_t v24 = v126;
      if ((v125 & 1) == 0) {
        uint64_t v21 = v123;
      }
      long long v127 = v111[1];
      long long v245 = *v111;
      long long v246 = v127;
      long long v247 = v111[2];
      BigString.unicodeScalars.getter();
      uint64_t v128 = BigString.UnicodeScalarView.index(after:)();
      uint64_t v130 = v129;
      uint64_t v132 = v131;
      uint64_t v134 = v133;
      outlined release of Locale((uint64_t)&v235);
      long long v135 = *v111;
      long long v136 = v111[1];
      long long v244 = v111[2];
      v243[1] = v136;
      v243[0] = v135;
      long long v137 = *v111;
      long long v212 = v111[1];
      long long v213 = v244;
      long long v211 = v137;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v211, (uint64_t)v256);
      outlined retain of Locale((uint64_t)v256);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_190;
      }
      *(void *)&long long v228 = v24;
      *((void *)&v228 + 1) = v121;
      *(void *)&long long v229 = v119;
      *((void *)&v229 + 1) = v21;
      *(void *)&long long v230 = v128;
      *((void *)&v230 + 1) = v130;
      *(void *)&long long v231 = v132;
      *((void *)&v231 + 1) = v134;
      uint64_t v138 = *(void *)(v207 + 16);
      if (!v138)
      {
        uint64_t v210 = v121;
        uint64_t v37 = v180;
        uint64_t v57 = v192;
LABEL_167:
        uint64_t result = outlined release of Locale((uint64_t)v243);
        uint64_t v58 = v210;
        uint64_t v48 = v119;
        uint64_t v23 = v21;
LABEL_168:
        uint64_t v56 = v191;
        uint64_t v21 = v203;
        uint64_t v55 = v200;
        goto LABEL_169;
      }
      uint64_t v206 = v130;
      int v208 = v134;
      uint64_t v209 = (uint64_t *)v132;
      char v139 = static BigString.Index.== infix(_:_:)();
      uint64_t v37 = v180;
      uint64_t v57 = v192;
      if (v139)
      {
        uint64_t v210 = v121;
        goto LABEL_167;
      }
      uint64_t v204 = (void *)v128;
      swift_bridgeObjectRetain();
      uint64_t v140 = 40;
      uint64_t v141 = v138;
      while (*(void *)(v207 + v140))
      {
        swift_bridgeObjectRelease();
        v140 += 16;
        if (!--v141)
        {
          uint64_t v142 = v207;
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v143 = v142;
          double v144 = v204;
          uint64_t v145 = v206;
          uint64_t v147 = v208;
          uint64_t v146 = (uint64_t)v209;
          goto LABEL_140;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.startIndex.getter();
      double v144 = v204;
      uint64_t v148 = v206;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result)
      {
        uint64_t v210 = v121;
        uint64_t v202 = v24;
        BigString.utf8.getter();
        uint64_t v199 = BigString.UTF8View.index(before:)();
        uint64_t v196 = v149;
        uint64_t v197 = v150;
        uint64_t v201 = v151;
        outlined release of Locale((uint64_t)&v236);
        BigString.utf8.getter();
        BigString.UTF8View.subscript.getter();
        uint64_t v152 = v196;
        outlined release of Locale((uint64_t)&v237);
        uint64_t v153 = v199;
        uint64_t v154 = v197;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_200;
        }
        *(void *)&long long v223 = v153;
        *((void *)&v223 + 1) = v152;
        *(void *)&long long v224 = v154;
        *((void *)&v224 + 1) = v201;
        *(void *)&long long v225 = v144;
        *((void *)&v225 + 1) = v148;
        *(void *)&long long v226 = v209;
        *((void *)&v226 + 1) = v208;
        specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)&v223, &v217);
        uint64_t result = outlined release of Locale((uint64_t)&v238);
        uint64_t v148 = v220;
        uint64_t v57 = v192;
        uint64_t v143 = v207;
        uint64_t v147 = v208;
        uint64_t v24 = v202;
        uint64_t v146 = (uint64_t)v209;
        uint64_t v121 = v210;
        uint64_t v145 = v206;
        if (v220 == 2) {
          goto LABEL_140;
        }
        uint64_t v24 = v217;
        uint64_t v121 = v218;
        uint64_t v119 = v219;
        uint64_t v155 = v208;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        uint64_t v145 = v206;
        uint64_t v143 = v207;
        uint64_t v147 = v155;
        uint64_t v146 = (uint64_t)v209;
        uint64_t v21 = v148;
        if ((result & 1) == 0) {
          goto LABEL_140;
        }
        __break(1u);
      }
      uint64_t v143 = v207;
      uint64_t v147 = v208;
      uint64_t v146 = (uint64_t)v209;
      uint64_t v145 = v148;
LABEL_140:
      uint64_t v156 = 0;
      v216[0] = v24;
      v216[1] = v121;
      v216[2] = v119;
      v216[3] = v21;
      v216[4] = v144;
      v216[5] = v145;
      uint64_t v157 = 40;
      v216[6] = v146;
      v216[7] = v147;
      uint64_t v210 = v121;
      while (1)
      {
        uint64_t v158 = v156 + 1;
        if (__OFADD__(v156, 1)) {
          break;
        }
        if (*(void *)(v143 + v157))
        {
          uint64_t v202 = v24;
          uint64_t v159 = v143;
          swift_bridgeObjectRetain();
          uint64_t v160 = (unint64_t *)(v159 + 40);
          uint64_t v161 = (char *)MEMORY[0x1E4FBC860];
          do
          {
            unint64_t v162 = *v160;
            if (*v160)
            {
              uint64_t v163 = v37;
              uint64_t v164 = *(v160 - 1);
              if ((v162 & 0x2000000000000000) != 0) {
                uint64_t v165 = HIBYTE(v162) & 0xF;
              }
              else {
                uint64_t v165 = v164 & 0xFFFFFFFFFFFFLL;
              }
              if (v165)
              {
                if ((v162 & 0x1000000000000000) != 0)
                {
                  int v166 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                }
                else
                {
                  if ((v162 & 0x2000000000000000) != 0)
                  {
                    uint64_t v217 = *(v160 - 1);
                    uint64_t v218 = v162 & 0xFFFFFFFFFFFFFFLL;
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    if ((v164 & 0x1000000000000000) == 0) {
                      _StringObject.sharedUTF8.getter();
                    }
                    swift_bridgeObjectRetain();
                  }
                  int v166 = _decodeScalar(_:startingAt:)();
                  swift_bridgeObjectRelease();
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v161 + 2) + 1, 1, v161);
                }
                unint64_t v168 = *((void *)v161 + 2);
                unint64_t v167 = *((void *)v161 + 3);
                if (v168 >= v167 >> 1) {
                  uint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v167 > 1), v168 + 1, 1, v161);
                }
                *((void *)v161 + 2) = v168 + 1;
                *(_DWORD *)&v161[4 * v168 + 32] = v166;
              }
              uint64_t v37 = v163;
            }
            v160 += 2;
            --v138;
          }
          while (v138);
          swift_bridgeObjectRelease();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)v242);
          uint64_t v169 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v161);
          uint64_t v58 = v170;
          uint64_t v48 = v171;
          uint64_t v23 = v172;
          swift_bridgeObjectRelease();
          outlined release of Locale((uint64_t)&v217);
          uint64_t v57 = v192;
          uint64_t v24 = v202;
          if (v23 == 2) {
            goto LABEL_167;
          }
          uint64_t v24 = v169;
          uint64_t v18 = static BigString.Index.< infix(_:_:)();
          uint64_t result = outlined release of Locale((uint64_t)v243);
          if ((v18 & 1) == 0) {
            goto LABEL_168;
          }
          __break(1u);
          goto LABEL_172;
        }
        v157 += 16;
        ++v156;
        if (v158 == v138) {
          goto LABEL_167;
        }
      }
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
      goto LABEL_181;
    }
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v21, v205, v37, v18, (uint64_t)v209);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  uint64_t v24 = *(unsigned __int8 *)(v18 + 18);
  if (*(unsigned char *)(v18 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v25 = v23;
    uint64_t v26 = v18;
    while (1)
    {
      uint64_t v29 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16)) {
        break;
      }
      uint64_t v30 = *(void *)(v26 + 40);
      BOOL v31 = __OFSUB__(v25, v30);
      uint64_t v32 = v25 - v30;
      if (v31) {
        goto LABEL_177;
      }
      if (__OFADD__(v32, 1)) {
        goto LABEL_178;
      }
      if (v32 + 1 < 1)
      {
        uint64_t v29 = 0;
        goto LABEL_16;
      }
      if (v29 == 1)
      {
        uint64_t v25 = v32;
        break;
      }
      BOOL v33 = (uint64_t *)(v26 + 64);
      uint64_t v34 = 1;
      while (1)
      {
        uint64_t v35 = *v33;
        v33 += 3;
        uint64_t v25 = v32 - v35;
        if (__OFSUB__(v32, v35))
        {
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
          goto LABEL_176;
        }
        if (__OFADD__(v25, 1)) {
          goto LABEL_174;
        }
        if (v25 + 1 < 1) {
          break;
        }
        ++v34;
        uint64_t v32 = v25;
        if (v29 == v34) {
          goto LABEL_15;
        }
      }
      uint64_t v29 = v34;
      uint64_t v25 = v32;
LABEL_16:
      char v27 = (4 * *(unsigned char *)(v26 + 18) + 8) & 0x3C;
      uint64_t v24 = ((-15 << v27) - 1) & v24 | (v29 << v27);
      uint64_t v28 = *(void *)(v26 + 24 + 24 * v29);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v26 = v28;
      if (!*(unsigned char *)(v28 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_15:
    if (!v25) {
      goto LABEL_16;
    }
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v25 = v23;
  uint64_t v28 = v18;
LABEL_33:
  uint64_t v38 = *(unsigned __int16 *)(v28 + 16);
  uint64_t v37 = v28;
  if (!*(_WORD *)(v28 + 16))
  {
    uint64_t v21 = v203;
    goto LABEL_46;
  }
  uint64_t v39 = *(void *)(v28 + 24);
  BOOL v31 = __OFSUB__(v25, v39);
  uint64_t v40 = v25 - v39;
  uint64_t v21 = v203;
  if (!v31)
  {
    if (__OFADD__(v40, 1)) {
      goto LABEL_199;
    }
    if (v40 + 1 < 1)
    {
      uint64_t v38 = 0;
      goto LABEL_47;
    }
    if (v38 != 1)
    {
      uint64_t v41 = (uint64_t *)(v28 + 48);
      uint64_t v42 = 1;
      while (1)
      {
        uint64_t v43 = *v41;
        v41 += 3;
        uint64_t v25 = v40 - v43;
        if (__OFSUB__(v40, v43)) {
          goto LABEL_186;
        }
        if (__OFADD__(v25, 1)) {
          goto LABEL_187;
        }
        if (v25 + 1 < 1) {
          break;
        }
        ++v42;
        uint64_t v40 = v25;
        if (v38 == v42) {
          goto LABEL_46;
        }
      }
LABEL_172:
      uint64_t v38 = v42;
      uint64_t v25 = v40;
      goto LABEL_47;
    }
    uint64_t v25 = v40;
LABEL_46:
    if (v25)
    {
LABEL_197:
      __break(1u);
      goto LABEL_198;
    }
LABEL_47:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v205 = v24 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
    uint64_t v17 = v204;
    if (!v18) {
      goto LABEL_48;
    }
    goto LABEL_31;
  }
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v190 = 0;
  unint64_t v191 = 0xE000000000000000;
  uint64_t v2 = swift_retain();
  AttributedString.Runs.init(_:in:)(v2, &v224);
  uint64_t v3 = v225;
  uint64_t v4 = v224;
  long long v141 = v233;
  uint64_t v5 = v233;
  if (v225 == (void *)v233)
  {
    uint64_t v6 = 0;
    goto LABEL_148;
  }
  uint64_t v7 = v226;
  uint64_t v8 = v227;
  uint64_t v9 = v228;
  uint64_t v10 = v229;
  uint64_t v139 = v231;
  uint64_t v140 = v230;
  long long v133 = v235;
  long long v134 = v234;
  long long v132 = v236;
  uint64_t v11 = v232;
  uint64_t v149 = v238;
  uint64_t v150 = v237;
  uint64_t v147 = v240;
  uint64_t v148 = v239;
  uint64_t v145 = v242;
  uint64_t v146 = v241;
  uint64_t v130 = (long long *)(v1 + 16);
  uint64_t v143 = v244;
  uint64_t v144 = v243;
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v224);
  uint64_t v142 = (long long *)(v4 + 16);
  long long v137 = v8;
  uint64_t v138 = v7;
  uint64_t v152 = v8;
  uint64_t v135 = v10;
  uint64_t v136 = v9;
  uint64_t v153 = v9;
  uint64_t v14 = v139;
  uint64_t v13 = v140;
  uint64_t v131 = v11;
  uint64_t v156 = (void *)v4;
  uint64_t v157 = v11;
  uint64_t v15 = (uint64_t)v3;
  uint64_t v128 = v5;
  uint64_t v129 = v3;
  while (2)
  {
    if (v15 >= v5) {
      goto LABEL_153;
    }
    v174._uint64_t countAndFlagsBits = v4;
    v174._unint64_t object = v3;
    *(void *)&long long v175 = v138;
    *((void *)&v175 + 1) = v137;
    *(void *)&long long v176 = v136;
    *((void *)&v176 + 1) = v135;
    *(void *)&long long v177 = v140;
    *((void *)&v177 + 1) = v139;
    *(_OWORD *)&v178[8] = v141;
    long long v179 = v134;
    long long v180 = v133;
    long long v181 = v132;
    *(void *)uint64_t v178 = v131;
    uint64_t v182 = v150;
    uint64_t v183 = v149;
    uint64_t v184 = v148;
    uint64_t v185 = v147;
    uint64_t v186 = v146;
    uint64_t v187 = v145;
    uint64_t v188 = v144;
    uint64_t v189 = v143;
    v173[0] = v15;
    v173[1] = v7;
    uint64_t v161 = v7;
    v173[2] = (uint64_t)v152;
    v173[3] = v153;
    v173[4] = v10;
    v173[5] = v13;
    v173[6] = v14;
    v173[7] = v157;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v173, &v165._countAndFlagsBits);
    if (v165._countAndFlagsBits != *(void *)(v4 + 88))
    {
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    uint64_t v163 = v15;
    unint64_t object = (unint64_t)v165._object;
    uint64_t v18 = *((void *)&v167 + 1);
    long long v20 = v168;
    uint64_t v19 = v169;
    if ((void)v166)
    {
      uint64_t v21 = v166 + 24 * (((unint64_t)v165._object >> ((4 * *(unsigned char *)(v166 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v22 = *(void *)(v21 + 32);
      unint64_t v154 = *(void *)(v21 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v23 = v169;
      uint64_t v24 = *(void *)(v4 + 64);
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v154 = specialized Rope._Node.subscript.getter(object, v24);
      uint64_t v22 = v25;
      uint64_t v19 = v23;
      swift_unknownObjectRelease();
    }
    uint64_t v26 = v149;
    char v27 = static BigString.Index.< infix(_:_:)();
    uint64_t v28 = v19;
    if (v27) {
      uint64_t v29 = v18;
    }
    else {
      uint64_t v29 = v150;
    }
    if (v27)
    {
      uint64_t v30 = *((void *)&v20 + 1);
      uint64_t v26 = v20;
    }
    else
    {
      uint64_t v30 = v148;
    }
    if (v27) {
      uint64_t v31 = v28;
    }
    else {
      uint64_t v31 = v147;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    int64_t v32 = result + v154;
    if (__OFADD__(result, v154)) {
      goto LABEL_155;
    }
    uint64_t v33 = BigString.Index.utf8Offset.getter();
    if (v33 < v32) {
      int64_t v32 = v33;
    }
    long long v34 = *v142;
    long long v35 = v142[1];
    long long v215 = v142[2];
    v214[1] = v35;
    v214[0] = v34;
    long long v36 = *v142;
    long long v37 = v142[1];
    v216[2] = v215;
    v216[1] = v37;
    v216[0] = v36;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v216, (uint64_t)v217);
    outlined retain of Locale((uint64_t)v217);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v214);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v32, result)) {
      goto LABEL_156;
    }
    uint64_t v38 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    outlined release of Locale((uint64_t)v192);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    uint64_t v197 = v29;
    uint64_t v198 = v26;
    uint64_t v199 = v30;
    uint64_t v200 = v31;
    uint64_t v201 = v38;
    uint64_t v202 = v40;
    uint64_t v203 = v42;
    uint64_t v204 = v44;
    unint64_t v46 = v156[8];
    uint64_t v45 = v156[9];
    uint64_t v155 = v156[10];
    uint64_t v47 = v153;
    uint64_t v48 = v161;
    uint64_t v151 = v156[11];
    if (v153 == 1 || v161 != v156[11])
    {
      if (v46) {
        uint64_t v53 = v156[9];
      }
      else {
        uint64_t v53 = 0;
      }
      uint64_t v49 = v163;
      if (v163 < 0 || v53 < v163)
      {
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
        goto LABEL_171;
      }
      if (v46 && v163 < v45 && *(_WORD *)(v46 + 16))
      {
        uint64_t v54 = v156[9];
        uint64_t v55 = *(unsigned __int8 *)(v46 + 18);
        if (*(unsigned char *)(v46 + 18))
        {
          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          uint64_t v56 = v163;
          unint64_t v57 = v46;
          while (1)
          {
            unint64_t v60 = *(unsigned __int16 *)(v57 + 16);
            if (*(_WORD *)(v57 + 16))
            {
              uint64_t v61 = *(void *)(v57 + 32);
              BOOL v62 = __OFSUB__(v56, v61);
              uint64_t v63 = v56 - v61;
              if (v62) {
                goto LABEL_151;
              }
              if (__OFADD__(v63, 1)) {
                goto LABEL_152;
              }
              if (v63 + 1 <= 0)
              {
                unint64_t v60 = 0;
                goto LABEL_41;
              }
              if (v60 != 1)
              {
                uint64_t v64 = *(void *)(v57 + 56);
                uint64_t v56 = v63 - v64;
                if (__OFSUB__(v63, v64)) {
                  goto LABEL_165;
                }
                if (__OFADD__(v56, 1)) {
                  goto LABEL_166;
                }
                if (v56 + 1 < 1)
                {
                  unint64_t v60 = 1;
                  uint64_t v56 = v63;
                  goto LABEL_41;
                }
                if (v60 == 2) {
                  goto LABEL_40;
                }
                uint64_t v65 = *(void *)(v57 + 80);
                BOOL v62 = __OFSUB__(v56, v65);
                uint64_t v63 = v56 - v65;
                if (v62) {
                  goto LABEL_169;
                }
                if (__OFADD__(v63, 1)) {
                  goto LABEL_170;
                }
                if (v63 + 1 < 1)
                {
                  unint64_t v60 = 2;
                  goto LABEL_41;
                }
                if (v60 != 3)
                {
                  uint64_t v66 = 3;
                  if (v60 > 3) {
                    uint64_t v66 = *(unsigned __int16 *)(v57 + 16);
                  }
                  uint64_t v67 = (void *)(v57 + 104);
                  uint64_t v68 = 3;
                  while (1)
                  {
                    if (v66 == v68) {
                      goto LABEL_161;
                    }
                    uint64_t v56 = v63 - *v67;
                    if (__OFSUB__(v63, *v67)) {
                      goto LABEL_162;
                    }
                    if (__OFADD__(v56, 1)) {
                      goto LABEL_163;
                    }
                    if (v56 + 1 < 1) {
                      break;
                    }
                    ++v68;
                    v67 += 3;
                    uint64_t v63 = v56;
                    if (v60 == v68) {
                      goto LABEL_40;
                    }
                  }
                  unint64_t v60 = v68;
                  uint64_t v56 = v63;
                  goto LABEL_41;
                }
              }
              uint64_t v56 = v63;
            }
LABEL_40:
            if (v56)
            {
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
              goto LABEL_154;
            }
LABEL_41:
            char v58 = (4 * *(unsigned char *)(v57 + 18) + 8) & 0x3C;
            uint64_t v55 = ((-15 << v58) - 1) & v55 | (v60 << v58);
            unint64_t v59 = *(void *)(v57 + 24 + 24 * v60);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v57 = v59;
            if (!*(unsigned char *)(v59 + 18)) {
              goto LABEL_74;
            }
          }
        }
        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain();
        uint64_t v56 = v163;
        unint64_t v59 = v46;
LABEL_74:
        uint64_t v69 = v59;
        unint64_t v70 = *(unsigned __int16 *)(v59 + 16);
        if (*(_WORD *)(v59 + 16))
        {
          unint64_t v71 = v56 - 1;
          if (__OFSUB__(v56, 1))
          {
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
            goto LABEL_177;
          }
          if (__OFADD__(v71, 1)) {
            goto LABEL_173;
          }
          uint64_t v45 = v54;
          if (v56 <= 0)
          {
            unint64_t v70 = 0;
          }
          else
          {
            if (v70 == 1) {
              goto LABEL_100;
            }
            BOOL v62 = __OFSUB__(v71, 1);
            unint64_t v71 = v56 - 2;
            if (v62) {
              goto LABEL_176;
            }
            if (__OFADD__(v71, 1))
            {
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
              goto LABEL_179;
            }
            if (v56 - 1 < 1)
            {
              unint64_t v70 = 1;
            }
            else
            {
              if (v70 == 2) {
                goto LABEL_100;
              }
              BOOL v62 = __OFSUB__(v71, 1);
              unint64_t v71 = v56 - 3;
              if (v62) {
                goto LABEL_178;
              }
              if (__OFADD__(v71, 1))
              {
LABEL_179:
                __break(1u);
                return result;
              }
              if (v56 - 2 < 1)
              {
                unint64_t v70 = 2;
              }
              else
              {
                if (v70 == 3) {
                  goto LABEL_100;
                }
                uint64_t v72 = 0;
                uint64_t v73 = 3;
                if (v70 > 3) {
                  uint64_t v73 = v70;
                }
                unint64_t v74 = v73 - 3;
                if (v71 >= v70 - 4) {
                  unint64_t v75 = v70 - 4;
                }
                else {
                  unint64_t v75 = v56 - 3;
                }
                if (v75 >= v56 + 0x7FFFFFFFFFFFFFFDLL) {
                  unint64_t v75 = v56 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (1)
                {
                  if (v74 <= v75) {
                    goto LABEL_174;
                  }
                  if (v56 + 0x7FFFFFFFFFFFFFFDLL == v72) {
                    goto LABEL_175;
                  }
                  if (v71 == v72) {
                    break;
                  }
                  if (v70 - 3 == ++v72)
                  {
                    v71 -= v72;
                    goto LABEL_100;
                  }
                }
                unint64_t v70 = v56;
              }
            }
          }
        }
        else
        {
          unint64_t v71 = v56;
          uint64_t v45 = v54;
LABEL_100:
          if (v71)
          {
LABEL_171:
            __break(1u);
            goto LABEL_172;
          }
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v50 = v55 & 0xFFFFFFFFFFFFF0FFLL | (v70 << 8);
        uint64_t v47 = v69;
        uint64_t v49 = v163;
        uint64_t v48 = v151;
      }
      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v48 = v151;
        unint64_t v50 = specialized Rope._endPath.getter(v46);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v47 = 0;
        if (!v46)
        {
          uint64_t v51 = v45;
          uint64_t v52 = 0;
          goto LABEL_108;
        }
      }
      swift_unknownObjectRetain();
      uint64_t v51 = v45;
      uint64_t v52 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v48, v50, v47, v46, v45, v155);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_108;
    }
    uint64_t v49 = v163;
    if (v157 == 2)
    {
      if (v46)
      {
        swift_retain();
        swift_unknownObjectRetain();
        unint64_t v50 = (unint64_t)v152;
        uint64_t v51 = v45;
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v161, (unint64_t)v152, v153, v46, v45, v155);
        uint64_t v52 = result;
        goto LABEL_108;
      }
      uint64_t v51 = v156[9];
      uint64_t result = swift_retain();
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v51 = v156[9];
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v52 = result;
    }
    unint64_t v50 = (unint64_t)v152;
LABEL_108:
    v174._uint64_t countAndFlagsBits = v48;
    v174._unint64_t object = (void *)v50;
    *(void *)&long long v175 = v47;
    BOOL v62 = __OFADD__(v49, 1);
    uint64_t v76 = v49 + 1;
    if (v62)
    {
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
    if (v48 != v151)
    {
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }
    uint64_t v164 = v76;
    if (v47)
    {
      unint64_t v77 = *(void *)(v47 + 24 * ((v50 >> ((4 * *(unsigned char *)(v47 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v77 = specialized Rope._Node.subscript.getter(v50, v46);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v62 = __OFADD__(v52, v77);
    unint64_t v78 = v52 + v77;
    if (v62)
    {
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
      goto LABEL_167;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v174, v46, v51, v155, v151);
    swift_unknownObjectRelease_n();
    uint64_t countAndFlagsBits = v174._countAndFlagsBits;
    uint64_t v152 = v174._object;
    uint64_t v153 = v175;
    if (v157 != 2)
    {
      long long v95 = *v142;
      long long v96 = v142[1];
      long long v209 = v142[2];
      v208[1] = v96;
      v208[0] = v95;
      long long v97 = *v142;
      long long v98 = v142[1];
      v222[2] = v209;
      v222[1] = v98;
      v222[0] = v97;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v222, (uint64_t)v223);
      outlined retain of Locale((uint64_t)v223);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v208);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (!__OFSUB__(v78, result))
      {
        uint64_t v87 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v89 = v99;
        uint64_t v91 = v100;
        uint64_t v93 = v101;
        char v94 = &v193;
        goto LABEL_118;
      }
      goto LABEL_168;
    }
    long long v79 = *v142;
    long long v80 = v142[1];
    long long v213 = v142[2];
    v212[1] = v80;
    v212[0] = v79;
    long long v81 = *v142;
    long long v82 = v142[1];
    v218[2] = v213;
    v218[1] = v82;
    v218[0] = v81;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v218, (uint64_t)v219);
    outlined retain of Locale((uint64_t)v219);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v212);
    long long v83 = *v142;
    long long v84 = v142[1];
    long long v211 = v142[2];
    v210[1] = v84;
    v210[0] = v83;
    long long v85 = *v142;
    long long v86 = v142[1];
    v220[2] = v211;
    v220[1] = v86;
    v220[0] = v85;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v220, (uint64_t)v221);
    outlined retain of Locale((uint64_t)v221);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v210);
    uint64_t v87 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v89 = v88;
    uint64_t v91 = v90;
    uint64_t v93 = v92;
    char v94 = &v194;
LABEL_118:
    outlined release of Locale((uint64_t)v94);
    swift_release();
    uint64_t v157 = v93;
    uint64_t v158 = v91;
    uint64_t v159 = v89;
    uint64_t v160 = v87;
    long long v102 = v130[1];
    long long v205 = *v130;
    long long v206 = v102;
    long long v207 = v130[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v195);
    uint64_t v103 = MEMORY[0x185302030](v196);
    uint64_t v105 = v104;
    uint64_t v106 = v190 & 0xFFFFFFFFFFFFLL;
    if ((v191 & 0x2000000000000000) != 0) {
      uint64_t v106 = HIBYTE(v191) & 0xF;
    }
    if (v106)
    {
      v107._uint64_t countAndFlagsBits = 10;
      v107._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v107);
    }
    v172._uint64_t countAndFlagsBits = v103;
    v172._unint64_t object = v105;
    v108._uint64_t countAndFlagsBits = 32;
    v108._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v108);
    v171._uint64_t countAndFlagsBits = 0;
    v171._unint64_t object = (void *)0xE000000000000000;
    uint64_t v109 = v22 + 64;
    uint64_t v110 = 1 << *(unsigned char *)(v22 + 32);
    if (v110 < 64) {
      uint64_t v111 = ~(-1 << v110);
    }
    else {
      uint64_t v111 = -1;
    }
    unint64_t v112 = v111 & *(void *)(v22 + 64);
    int64_t v113 = (unint64_t)(v110 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v114 = 0;
    while (1)
    {
      if (v112)
      {
        unint64_t v115 = __clz(__rbit64(v112));
        v112 &= v112 - 1;
        unint64_t v116 = v115 | (v114 << 6);
        goto LABEL_127;
      }
      int64_t v125 = v114 + 1;
      if (__OFADD__(v114, 1))
      {
        __break(1u);
        goto LABEL_150;
      }
      if (v125 >= v113) {
        break;
      }
      unint64_t v126 = *(void *)(v109 + 8 * v125);
      ++v114;
      if (!v126)
      {
        int64_t v114 = v125 + 1;
        if (v125 + 1 >= v113) {
          break;
        }
        unint64_t v126 = *(void *)(v109 + 8 * v114);
        if (!v126)
        {
          int64_t v114 = v125 + 2;
          if (v125 + 2 >= v113) {
            break;
          }
          unint64_t v126 = *(void *)(v109 + 8 * v114);
          if (!v126)
          {
            int64_t v114 = v125 + 3;
            if (v125 + 3 >= v113) {
              break;
            }
            unint64_t v126 = *(void *)(v109 + 8 * v114);
            if (!v126)
            {
              int64_t v114 = v125 + 4;
              if (v125 + 4 >= v113) {
                break;
              }
              unint64_t v126 = *(void *)(v109 + 8 * v114);
              if (!v126)
              {
                int64_t v127 = v125 + 5;
                if (v127 >= v113) {
                  break;
                }
                unint64_t v126 = *(void *)(v109 + 8 * v127);
                if (!v126)
                {
                  while (1)
                  {
                    int64_t v114 = v127 + 1;
                    if (__OFADD__(v127, 1)) {
                      goto LABEL_164;
                    }
                    if (v114 >= v113) {
                      goto LABEL_4;
                    }
                    unint64_t v126 = *(void *)(v109 + 8 * v114);
                    ++v127;
                    if (v126) {
                      goto LABEL_146;
                    }
                  }
                }
                int64_t v114 = v127;
              }
            }
          }
        }
      }
LABEL_146:
      unint64_t v112 = (v126 - 1) & v126;
      unint64_t v116 = __clz(__rbit64(v126)) + (v114 << 6);
LABEL_127:
      uint64_t v117 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v116);
      uint64_t v119 = *v117;
      uint64_t v118 = (void *)v117[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v22 + 56) + 72 * v116, (uint64_t)&v175);
      v174._uint64_t countAndFlagsBits = v119;
      v174._unint64_t object = v118;
      long long v167 = v176;
      long long v168 = v177;
      long long v169 = *(_OWORD *)v178;
      uint64_t v170 = *(void *)&v178[16];
      Swift::String v165 = v174;
      long long v166 = v175;
      Swift::String v120 = v174;
      swift_bridgeObjectRetain();
      String.append(_:)(v120);
      v121._uint64_t countAndFlagsBits = 2112800;
      v121._unint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v121);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v166, (uint64_t)v173);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v122._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v122);
      swift_bridgeObjectRelease();
      v123._uint64_t countAndFlagsBits = 10;
      v123._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v123);
      v124._uint64_t countAndFlagsBits = 9;
      v124._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?((uint64_t)&v165, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_4:
    swift_release();
    v174._uint64_t countAndFlagsBits = 2683;
    v174._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v171);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 125;
    v16._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    String.append(_:)(v174);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v172);
    uint64_t v4 = (uint64_t)v156;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = v128;
    uint64_t v3 = v129;
    uint64_t v7 = countAndFlagsBits;
    uint64_t v15 = v164;
    uint64_t v13 = v159;
    uint64_t v10 = v160;
    uint64_t v14 = v158;
    if (v164 != v128) {
      continue;
    }
    break;
  }
  outlined release of AttributedString.Runs((uint64_t)&v224);
  uint64_t v6 = v190;
LABEL_148:
  swift_release();
  return v6;
}

BOOL static AttributedString.Runs.Index.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL static AttributedString.Runs.Index.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t AttributedString.Runs.Index.distance(to:)(void *a1)
{
  BOOL v2 = __OFSUB__(*a1, *v1);
  uint64_t result = *a1 - *v1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.Runs.Index.advanced(by:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, result))
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2 + result;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
    a2[7] = 2;
  }
  return result;
}

void *protocol witness for Strideable.distance(to:) in conformance AttributedString.Runs.Index@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, *v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - *v2;
  }
  return result;
}

void *protocol witness for Strideable.advanced(by:) in conformance AttributedString.Runs.Index@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, *result))
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2 + *result;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
    a2[7] = 2;
  }
  return result;
}

void *protocol witness for static Strideable._step(after:from:by:) in conformance AttributedString.Runs.Index(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *uint64_t result = *a4 + *a6;
    result[1] = 0;
    result[2] = 0;
    result[3] = 1;
    result[4] = 0;
    result[5] = 0;
    result[6] = 0;
    result[7] = 2;
    return 0;
  }
  return result;
}

uint64_t *AttributedString.Runs._resolveRun(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result;
  if (*result >= v2[1] && v2[9] >= v4)
  {
    uint64_t v5 = result[3];
    uint64_t v6 = (void *)*v2;
    if (v5 == 1)
    {
      uint64_t v7 = v6[11];
    }
    else
    {
      uint64_t v8 = result[1];
      uint64_t v7 = v6[11];
      if (v8 == v7)
      {
        unint64_t v9 = result[2];
        if (result[7] != 2)
        {
          uint64_t result = (uint64_t *)BigString.Index.utf8Offset.getter();
          uint64_t v13 = (uint64_t)result;
          goto LABEL_11;
        }
        uint64_t v10 = v6[8];
        if (!v10)
        {
          uint64_t v13 = 0;
          goto LABEL_11;
        }
        uint64_t v12 = v6[9];
        uint64_t v11 = v6[10];
        swift_unknownObjectRetain();
        uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v9, v5, v10, v12, v11);
LABEL_10:
        uint64_t result = (uint64_t *)swift_unknownObjectRelease();
LABEL_11:
        *a2 = v8;
        a2[1] = v9;
        a2[2] = v5;
        a2[3] = v4;
        a2[4] = v13;
        return result;
      }
    }
    uint64_t v14 = v6[8];
    uint64_t v15 = v6[9];
    uint64_t v16 = v6[10];
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atRunOffset:)(v4, v14, v15, v16, v7, v17);
    uint64_t v8 = v17[0];
    unint64_t v9 = v17[1];
    uint64_t v5 = v17[2];
    uint64_t v4 = v17[3];
    uint64_t v13 = v17[4];
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

__n128 AttributedString.Runs.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 AttributedString.Runs.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 104);
  long long v4 = *(_OWORD *)(v1 + 120);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t AttributedString.Runs.index(after:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 72);
  if (*(void *)result < v5 || v4 >= v6)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(result + 48);
  uint64_t v10 = *(void *)(result + 56);
  uint64_t v11 = *(_OWORD **)v2;
  uint64_t v12 = *(void *)(v2 + 128);
  uint64_t v13 = *(void *)(v2 + 64);
  uint64_t v14 = *(void *)(result + 24);
  uint64_t v15 = *(void *)(result + 32);
  uint64_t v16 = *(void *)(*(void *)v2 + 64);
  uint64_t v47 = *(void *)(*(void *)v2 + 72);
  uint64_t v17 = *(void *)(*(void *)v2 + 80);
  uint64_t v18 = *(void *)(*(void *)v2 + 88);
  *(void *)&long long v53 = *(void *)v2;
  *((void *)&v53 + 1) = v5;
  long long v19 = *(_OWORD *)(v2 + 32);
  long long v54 = *(_OWORD *)(v2 + 16);
  long long v55 = v19;
  long long v56 = *(_OWORD *)(v2 + 48);
  uint64_t v57 = v13;
  uint64_t v58 = v6;
  long long v20 = *(_OWORD *)(v2 + 96);
  long long v59 = *(_OWORD *)(v2 + 80);
  long long v60 = v20;
  long long v61 = *(_OWORD *)(v2 + 112);
  uint64_t v62 = v12;
  long long v21 = *(_OWORD *)(v2 + 136);
  long long v22 = *(_OWORD *)(v2 + 152);
  long long v23 = *(_OWORD *)(v2 + 168);
  long long v66 = *(_OWORD *)(v2 + 184);
  long long v65 = v23;
  long long v64 = v22;
  long long v63 = v21;
  *(void *)uint64_t v49 = v4;
  *(_OWORD *)&v49[8] = *(_OWORD *)(result + 8);
  *(void *)&v49[24] = v14;
  *(void *)&long long v50 = v15;
  *((void *)&v50 + 1) = v9;
  uint64_t v51 = v8;
  uint64_t v52 = v10;
  swift_unknownObjectRetain();
  __n128 result = (uint64_t)AttributedString.Runs._resolveRun(_:)((uint64_t *)v49, (uint64_t *)&v67);
  long long v72 = v67;
  uint64_t v73 = v68;
  uint64_t v24 = v70;
  long long v53 = v67;
  *(void *)&long long v54 = v68;
  if (__OFADD__(v69, 1)) {
    goto LABEL_17;
  }
  if ((void)v72 != v18)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v46 = v69 + 1;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v73, (uint64_t)v74);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v74, (uint64_t)&v77);
  if (v77)
  {
    unint64_t v25 = *(void *)(v77 + 24 * ((*((void *)&v72 + 1) >> ((4 * *(unsigned char *)(v77 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v26 = *((void *)&v72 + 1);
    swift_unknownObjectRetain();
    unint64_t v25 = specialized Rope._Node.subscript.getter(v26, v16);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  __n128 result = swift_bridgeObjectRelease();
  if (__OFADD__(v24, v25)) {
    goto LABEL_19;
  }
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v53, v16, v47, v17, v18);
  swift_unknownObjectRelease_n();
  long long v27 = v53;
  uint64_t v28 = v11 + 1;
  uint64_t v48 = v54;
  if (v10 == 2)
  {
    long long v29 = *v28;
    long long v30 = v11[3];
    v76[1] = v11[2];
    v76[2] = v30;
    v76[0] = v29;
    long long v31 = *v28;
    *(_OWORD *)&v49[16] = v11[2];
    long long v50 = v30;
    *(_OWORD *)uint64_t v49 = v31;
    outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v49, (uint64_t)v78);
    outlined retain of Locale((uint64_t)v78);
    int64_t v32 = &v71;
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v76);
    long long v33 = *v28;
    long long v34 = v11[3];
    v75[1] = v11[2];
    v75[2] = v34;
    v75[0] = v33;
    long long v35 = *v28;
    long long v54 = v11[2];
    long long v55 = v34;
    long long v53 = v35;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v53, (uint64_t)v79);
    outlined retain of Locale((uint64_t)v79);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v75);
LABEL_16:
    uint64_t v39 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    __n128 result = outlined release of Locale((uint64_t)v32);
    *(void *)a2 = v46;
    *(_OWORD *)(a2 + 8) = v27;
    *(void *)(a2 + 24) = v48;
    *(void *)(a2 + 32) = v39;
    *(void *)(a2 + 40) = v41;
    *(void *)(a2 + 48) = v43;
    *(void *)(a2 + 56) = v45;
    return result;
  }
  long long v36 = *v28;
  long long v37 = v11[3];
  *(_OWORD *)&v49[16] = v11[2];
  long long v50 = v37;
  *(_OWORD *)uint64_t v49 = v36;
  long long v38 = *v28;
  long long v54 = v11[2];
  long long v55 = v37;
  long long v53 = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v53, (uint64_t)v75);
  outlined retain of Locale((uint64_t)v75);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v49);
  __n128 result = BigString.Index.utf8Offset.getter();
  if (!__OFSUB__(v24 + v25, result))
  {
    int64_t v32 = (char *)v76;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs.index(before:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  if (v2[1] >= *result) {
    goto LABEL_94;
  }
  if (v2[9] < v3)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  uint64_t v4 = result[3];
  uint64_t v5 = result[7];
  uint64_t v6 = (void *)*v2;
  uint64_t v7 = *(void *)(*v2 + 64);
  uint64_t v8 = v6[9];
  uint64_t v9 = v6[11];
  uint64_t v71 = v6[10];
  if (v4 != 1)
  {
    uint64_t v10 = result[1];
    if (v10 == v9)
    {
      uint64_t v11 = v6[9];
      unint64_t v12 = result[2];
      if (v5 == 2)
      {
        if (v7)
        {
          swift_unknownObjectRetain_n();
          uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v12, v4, v7, v11, v71);
          __n128 result = (uint64_t *)swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v13 = 0;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        __n128 result = (uint64_t *)BigString.Index.utf8Offset.getter();
        uint64_t v13 = (uint64_t)result;
      }
LABEL_67:
      *(void *)&long long v80 = v10;
      *((void *)&v80 + 1) = v12;
      *(void *)&long long v81 = v4;
      BOOL v23 = __OFSUB__(v3, 1);
      uint64_t v38 = v3 - 1;
      if (!v23)
      {
        if (v10 == v9)
        {
          if (v7)
          {
            unint64_t v39 = *(unsigned __int8 *)(v7 + 18);
            swift_unknownObjectRetain();
            if (v39 < v12)
            {
LABEL_71:
              uint64_t v69 = v38;
              if (v4)
              {
                char v40 = (4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C;
                if (((v12 >> v40) & 0xF) != 0)
                {
                  uint64_t v11 = (uint64_t)v6;
                  uint64_t v41 = v5;
                  unint64_t v39 = ((((v12 >> v40) & 0xF) - 1) << v40) | ((-15 << v40) - 1) & v12;
LABEL_78:
                  unint64_t v68 = v39;
                  unint64_t v43 = *(void *)(v4 + 24 * ((v39 >> ((4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_unknownObjectRelease();
                  goto LABEL_82;
                }
              }
              swift_unknownObjectRetain();
              char v42 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v80, v7);
              __n128 result = (uint64_t *)swift_unknownObjectRelease();
              if ((v42 & 1) == 0)
              {
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
                goto LABEL_104;
              }
              if ((void)v80 == v9)
              {
                uint64_t v11 = (uint64_t)v6;
                unint64_t v39 = *((void *)&v80 + 1);
                uint64_t v4 = v81;
                if ((void)v81)
                {
                  uint64_t v41 = v5;
                  goto LABEL_78;
                }
LABEL_81:
                uint64_t v41 = v5;
                swift_unknownObjectRetain();
                unint64_t v68 = v39;
                unint64_t v43 = specialized Rope._Node.subscript.getter(v39, v7);
                swift_unknownObjectRelease_n();
LABEL_82:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                __n128 result = (uint64_t *)swift_bridgeObjectRelease();
                BOOL v23 = __OFSUB__(v13, v43);
                unint64_t v44 = v13 - v43;
                if (!v23)
                {
                  uint64_t v45 = (long long *)(v11 + 16);
                  if (v41 == 2)
                  {
                    uint64_t v46 = v9;
                    long long v47 = *v45;
                    long long v48 = *(_OWORD *)(v11 + 48);
                    v74[1] = *(_OWORD *)(v11 + 32);
                    v74[2] = v48;
                    v74[0] = v47;
                    long long v49 = *v45;
                    long long v76 = *(_OWORD *)(v11 + 32);
                    long long v77 = v48;
                    long long v75 = v49;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v75, (uint64_t)v78);
                    outlined retain of Locale((uint64_t)v78);
                    long long v50 = &v72;
                    BigString.utf8.getter();
                    outlined release of Locale((uint64_t)v74);
                    long long v51 = *v45;
                    long long v52 = *(_OWORD *)(v11 + 48);
                    v73[1] = *(_OWORD *)(v11 + 32);
                    v73[2] = v52;
                    v73[0] = v51;
                    long long v53 = *v45;
                    long long v81 = *(_OWORD *)(v11 + 32);
                    long long v82 = v52;
                    long long v80 = v53;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v80, (uint64_t)v79);
                    outlined retain of Locale((uint64_t)v79);
                    BigString.startIndex.getter();
                    outlined release of Locale((uint64_t)v73);
                    uint64_t v54 = BigString.UTF8View.index(_:offsetBy:)();
                    uint64_t v56 = v55;
                    uint64_t v58 = v57;
                    uint64_t v60 = v59;
                    long long v61 = a2;
LABEL_87:
                    __n128 result = (uint64_t *)outlined release of Locale((uint64_t)v50);
                    uint64_t *v61 = v69;
                    v61[1] = v46;
                    v61[2] = v68;
                    v61[3] = v4;
                    v61[4] = v54;
                    v61[5] = v56;
                    v61[6] = v58;
                    v61[7] = v60;
                    return result;
                  }
                  long long v62 = *v45;
                  long long v63 = *(_OWORD *)(v11 + 48);
                  long long v76 = *(_OWORD *)(v11 + 32);
                  long long v77 = v63;
                  long long v75 = v62;
                  long long v64 = *v45;
                  long long v81 = *(_OWORD *)(v11 + 32);
                  long long v82 = v63;
                  long long v80 = v64;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v80, (uint64_t)v73);
                  outlined retain of Locale((uint64_t)v73);
                  BigString.utf8.getter();
                  outlined release of Locale((uint64_t)&v75);
                  __n128 result = (uint64_t *)BigString.Index.utf8Offset.getter();
                  long long v61 = a2;
                  if (!__OFSUB__(v44, result))
                  {
                    uint64_t v46 = v9;
                    long long v50 = (char *)v74;
                    uint64_t v54 = BigString.UTF8View.index(_:offsetBy:)();
                    uint64_t v56 = v65;
                    uint64_t v58 = v66;
                    uint64_t v60 = v67;
                    goto LABEL_87;
                  }
                  goto LABEL_102;
                }
                goto LABEL_99;
              }
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }
          }
          else
          {
            unint64_t v39 = 0;
            if (v12) {
              goto LABEL_71;
            }
          }
          __break(1u);
          goto LABEL_81;
        }
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  if (v7) {
    uint64_t v14 = v6[9];
  }
  else {
    uint64_t v14 = 0;
  }
  if (v3 < 0 || v14 < v3) {
    goto LABEL_101;
  }
  if (!v7 || (v3 < v8 ? (BOOL v15 = *(unsigned __int16 *)(v7 + 16) == 0) : (BOOL v15 = 1), v15))
  {
    unint64_t v16 = swift_unknownObjectRetain_n();
    uint64_t v11 = v8;
    unint64_t v12 = specialized Rope._endPath.getter(v16);
    __n128 result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v4 = 0;
    if (!v7)
    {
      uint64_t v13 = 0;
      goto LABEL_66;
    }
LABEL_20:
    swift_unknownObjectRetain();
    uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v4, v7, v11, v71);
    __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_66:
    uint64_t v10 = v9;
    goto LABEL_67;
  }
  uint64_t v11 = v6[9];
  uint64_t v69 = v6[11];
  uint64_t v17 = *(unsigned __int8 *)(v7 + 18);
  if (*(unsigned char *)(v7 + 18))
  {
    __n128 result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v18 = v3;
    uint64_t v19 = v7;
    while (1)
    {
      uint64_t v21 = *(unsigned __int16 *)(v19 + 16);
      if (*(_WORD *)(v19 + 16))
      {
        uint64_t v22 = *(void *)(v19 + 32);
        BOOL v23 = __OFSUB__(v18, v22);
        uint64_t v24 = v18 - v22;
        if (v23) {
          goto LABEL_92;
        }
        if (__OFADD__(v24, 1)) {
          goto LABEL_93;
        }
        if (v24 + 1 < 1)
        {
          uint64_t v21 = 0;
          goto LABEL_26;
        }
        if (v21 != 1)
        {
          unint64_t v25 = (uint64_t *)(v19 + 56);
          uint64_t v26 = 1;
          while (1)
          {
            uint64_t v27 = *v25;
            v25 += 3;
            uint64_t v18 = v24 - v27;
            if (__OFSUB__(v24, v27)) {
              break;
            }
            if (__OFADD__(v18, 1)) {
              goto LABEL_90;
            }
            if (v18 + 1 < 1)
            {
              uint64_t v21 = v26;
              uint64_t v18 = v24;
              goto LABEL_26;
            }
            ++v26;
            uint64_t v24 = v18;
            if (v21 == v26) {
              goto LABEL_25;
            }
          }
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
        uint64_t v18 = v24;
      }
LABEL_25:
      if (v18) {
        goto LABEL_91;
      }
LABEL_26:
      char v20 = (4 * *(unsigned char *)(v19 + 18) + 8) & 0x3C;
      uint64_t v17 = ((-15 << v20) - 1) & v17 | (v21 << v20);
      uint64_t v4 = *(void *)(v19 + 24 + 24 * v21);
      swift_unknownObjectRetain();
      __n128 result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v19 = v4;
      if (!*(unsigned char *)(v4 + 18)) {
        goto LABEL_42;
      }
    }
  }
  __n128 result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v18 = v3;
  uint64_t v4 = v7;
LABEL_42:
  uint64_t v28 = *(unsigned __int16 *)(v4 + 16);
  if (*(_WORD *)(v4 + 16))
  {
    unint64_t v29 = v18 - 1;
    if (__OFSUB__(v18, 1))
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    if (__OFADD__(v29, 1))
    {
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    if (v18 < 1)
    {
      uint64_t v28 = 0;
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v12 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v28 << 8);
      goto LABEL_20;
    }
    if (v28 != 1)
    {
      unint64_t v30 = v28 - 2;
      if (v29 < v28 - 2) {
        unint64_t v30 = v18 - 1;
      }
      if (v30 >= v18 + 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v30 = v18 + 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v31 = v30 + 1;
      if (v31 >= 5)
      {
        uint64_t v33 = v31 & 3;
        if ((v31 & 3) == 0) {
          uint64_t v33 = 4;
        }
        unint64_t v34 = v31 - v33;
        uint64_t v32 = v34 + 1;
        int64x2_t v35 = 0uLL;
        int64x2_t v36 = (int64x2_t)(unint64_t)(v18 - 1);
        v37.i64[0] = -1;
        v37.i64[1] = -1;
        do
        {
          int64x2_t v36 = vaddq_s64(v36, v37);
          int64x2_t v35 = vaddq_s64(v35, v37);
          v34 -= 4;
        }
        while (v34);
        unint64_t v29 = vaddvq_s64(vaddq_s64(vzip2q_s64(v36, v35), vzip1q_s64(v36, v35)));
      }
      else
      {
        uint64_t v32 = 1;
      }
      while (v18 + 0x8000000000000000 != v32)
      {
        if (v18 == v32)
        {
          uint64_t v28 = v18;
          goto LABEL_64;
        }
        ++v32;
        --v29;
        if (v28 == v32) {
          goto LABEL_63;
        }
      }
      goto LABEL_103;
    }
  }
  else
  {
    unint64_t v29 = v18;
  }
LABEL_63:
  if (!v29) {
    goto LABEL_64;
  }
LABEL_106:
  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs._index(_:offsetBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *result;
  if (*result < v3[1] || v3[9] < v4)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v6 = result[3];
  uint64_t v69 = result[7];
  uint64_t v7 = (_OWORD *)*v3;
  uint64_t v8 = *(void *)(*v3 + 64);
  uint64_t v9 = *(void *)(*v3 + 72);
  uint64_t v10 = *(void *)(*v3 + 80);
  uint64_t v11 = *(void *)(*v3 + 88);
  uint64_t v66 = v11;
  uint64_t v67 = *result;
  if (v6 != 1)
  {
    uint64_t v12 = result[1];
    if (v12 == v11)
    {
      unint64_t v13 = result[2];
      uint64_t v14 = a2;
      if (v69 == 2)
      {
        if (v8)
        {
          swift_unknownObjectRetain();
          uint64_t v63 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v13, v6, v8, v9, v10);
        }
        else
        {
          uint64_t v63 = 0;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t v63 = BigString.Index.utf8Offset.getter();
      }
      uint64_t v18 = v66;
LABEL_68:
      *(void *)&long long v78 = v12;
      *((void *)&v78 + 1) = v13;
      *(void *)&long long v79 = v6;
      *(void *)&long long v73 = v14;
      swift_unknownObjectRetain();
      specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v78, (uint64_t *)&v73, 0, v8, v9, v10, v18);
      swift_unknownObjectRelease();
      long long v40 = v78;
      unint64_t v41 = v13;
      uint64_t v42 = v79;
      swift_unknownObjectRetain();
      uint64_t v62 = v42;
      uint64_t v43 = specialized Rope.distance<A>(from:to:in:)(v12, v41, v6, v40, *((unint64_t *)&v40 + 1), v42, v8, v9, v10, v18);
      __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
      if (!__OFADD__(v67, a2))
      {
        if (!__OFADD__(v63, v43))
        {
          unint64_t v44 = v7 + 1;
          if (v69 == 2)
          {
            long long v45 = *v44;
            long long v46 = v7[3];
            v72[1] = v7[2];
            v72[2] = v46;
            v72[0] = v45;
            long long v47 = *v44;
            long long v74 = v7[2];
            long long v75 = v46;
            long long v73 = v47;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v73, (uint64_t)v76);
            outlined retain of Locale((uint64_t)v76);
            long long v48 = &v70;
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)v72);
            long long v49 = *v44;
            long long v50 = v7[3];
            v71[1] = v7[2];
            v71[2] = v50;
            v71[0] = v49;
            long long v51 = *v44;
            long long v79 = v7[2];
            long long v80 = v50;
            long long v78 = v51;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v78, (uint64_t)v77);
            outlined retain of Locale((uint64_t)v77);
            BigString.startIndex.getter();
            outlined release of Locale((uint64_t)v71);
LABEL_74:
            uint64_t v55 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v57 = v56;
            uint64_t v59 = v58;
            uint64_t v61 = v60;
            __n128 result = (uint64_t *)outlined release of Locale((uint64_t)v48);
            *(void *)a3 = v67 + a2;
            *(_OWORD *)(a3 + 8) = v40;
            *(void *)(a3 + 24) = v62;
            *(void *)(a3 + 32) = v55;
            *(void *)(a3 + 40) = v57;
            *(void *)(a3 + 48) = v59;
            *(void *)(a3 + 56) = v61;
            return result;
          }
          long long v52 = *v44;
          long long v53 = v7[3];
          long long v74 = v7[2];
          long long v75 = v53;
          long long v73 = v52;
          long long v54 = *v44;
          long long v79 = v7[2];
          long long v80 = v53;
          long long v78 = v54;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v78, (uint64_t)v71);
          outlined retain of Locale((uint64_t)v71);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)&v73);
          __n128 result = (uint64_t *)BigString.Index.utf8Offset.getter();
          if (!__OFSUB__(v63 + v43, result))
          {
            long long v48 = (char *)v72;
            goto LABEL_74;
          }
LABEL_85:
          __break(1u);
          goto LABEL_86;
        }
        goto LABEL_83;
      }
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
  }
  if (v8) {
    uint64_t v15 = v9;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v4 < 0 || v15 < v4) {
    goto LABEL_84;
  }
  if (!v8 || (v4 < v9 ? (BOOL v16 = *(unsigned __int16 *)(v8 + 16) == 0) : (BOOL v16 = 1), v16))
  {
    unint64_t v17 = swift_unknownObjectRetain_n();
    unint64_t v13 = specialized Rope._endPath.getter(v17);
    swift_unknownObjectRelease();
    uint64_t v6 = 0;
    uint64_t v14 = a2;
    if (!v8)
    {
      uint64_t v63 = 0;
      uint64_t v18 = v66;
      goto LABEL_67;
    }
LABEL_20:
    swift_unknownObjectRetain();
    uint64_t v18 = v66;
    uint64_t v63 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v66, v13, v6, v8, v9, v10);
    swift_unknownObjectRelease_n();
LABEL_67:
    uint64_t v12 = v18;
    goto LABEL_68;
  }
  uint64_t v64 = v9;
  uint64_t v19 = *(unsigned __int8 *)(v8 + 18);
  if (!*(unsigned char *)(v8 + 18))
  {
    __n128 result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v29 = 0;
    uint64_t v20 = v4;
    uint64_t v6 = v8;
    uint64_t v30 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16)) {
      goto LABEL_43;
    }
LABEL_54:
    unint64_t v31 = v20;
    goto LABEL_64;
  }
  __n128 result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v20 = v4;
  uint64_t v6 = v8;
  do
  {
    uint64_t v22 = *(unsigned __int16 *)(v6 + 16);
    if (*(_WORD *)(v6 + 16))
    {
      uint64_t v23 = *(void *)(v6 + 32);
      BOOL v24 = __OFSUB__(v20, v23);
      uint64_t v25 = v20 - v23;
      if (v24) {
        goto LABEL_79;
      }
      if (__OFADD__(v25, 1)) {
        goto LABEL_80;
      }
      if (v25 + 1 < 1)
      {
        uint64_t v22 = 0;
        goto LABEL_26;
      }
      if (v22 != 1)
      {
        uint64_t v26 = (uint64_t *)(v6 + 56);
        uint64_t v27 = 1;
        while (1)
        {
          uint64_t v28 = *v26;
          v26 += 3;
          uint64_t v20 = v25 - v28;
          if (__OFSUB__(v25, v28)) {
            break;
          }
          if (__OFADD__(v20, 1)) {
            goto LABEL_77;
          }
          if (v20 + 1 < 1)
          {
            uint64_t v22 = v27;
            uint64_t v20 = v25;
            goto LABEL_26;
          }
          ++v27;
          uint64_t v25 = v20;
          if (v22 == v27) {
            goto LABEL_25;
          }
        }
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      uint64_t v20 = v25;
    }
LABEL_25:
    if (v20) {
      goto LABEL_78;
    }
LABEL_26:
    char v21 = (4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C;
    uint64_t v19 = ((-15 << v21) - 1) & v19 | (v22 << v21);
    uint64_t v6 = *(void *)(v6 + 24 + 24 * v22);
    swift_unknownObjectRetain();
    __n128 result = (uint64_t *)swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v6 + 18));
  unint64_t v29 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v30 = *(unsigned __int16 *)(v6 + 16);
  if (!*(_WORD *)(v6 + 16)) {
    goto LABEL_54;
  }
LABEL_43:
  unint64_t v31 = v20 - 1;
  if (__OFSUB__(v20, 1)) {
    goto LABEL_87;
  }
  if (__OFADD__(v31, 1)) {
    goto LABEL_89;
  }
  if (v20 < 1)
  {
    uint64_t v30 = 0;
LABEL_65:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v13 = v29 | (v30 << 8);
    uint64_t v9 = v64;
    uint64_t v14 = a2;
    goto LABEL_20;
  }
  if (v30 == 1)
  {
LABEL_64:
    if (v31) {
      goto LABEL_88;
    }
    goto LABEL_65;
  }
  unint64_t v32 = v30 - 2;
  if (v31 < v30 - 2) {
    unint64_t v32 = v20 - 1;
  }
  if (v32 >= v20 + 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v32 = v20 + 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v33 = v32 + 1;
  if (v33 >= 5)
  {
    uint64_t v35 = v33 & 3;
    if ((v33 & 3) == 0) {
      uint64_t v35 = 4;
    }
    unint64_t v36 = v33 - v35;
    uint64_t v34 = v36 + 1;
    int64x2_t v37 = 0uLL;
    v38.i64[0] = 0;
    v38.i64[1] = v20 - 1;
    v39.i64[0] = -1;
    v39.i64[1] = -1;
    do
    {
      int64x2_t v38 = vaddq_s64(v38, v39);
      int64x2_t v37 = vaddq_s64(v37, v39);
      v36 -= 4;
    }
    while (v36);
    unint64_t v31 = vaddvq_s64(vaddq_s64(vzip1q_s64(v38, v37), vzip2q_s64(v38, v37)));
  }
  else
  {
    uint64_t v34 = 1;
  }
  while (v20 + 0x8000000000000000 != v34)
  {
    if (v20 == v34)
    {
      uint64_t v30 = v20;
      goto LABEL_65;
    }
    ++v34;
    --v31;
    if (v30 == v34) {
      goto LABEL_64;
    }
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs.index(_:offsetBy:limitedBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, void *a4@<X2>)
{
  uint64_t v4 = *a4 - *result;
  if (__OFSUB__(*a4, *result))
  {
    __break(1u);
  }
  else
  {
    if (a2 < 1)
    {
      if (v4 <= 0 && v4 > a2) {
        goto LABEL_5;
      }
    }
    else if ((v4 & 0x8000000000000000) == 0 && v4 < (unint64_t)a2)
    {
LABEL_5:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 2;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      return result;
    }
    return AttributedString.Runs._index(_:offsetBy:)(result, a2, a3);
  }
  return result;
}

uint64_t AttributedString.Runs.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v8 = (_OWORD *)*v6;
  uint64_t v9 = v6[18];
  uint64_t v43 = v6[17];
  uint64_t v10 = v6[19];
  uint64_t v11 = v6[20];
  uint64_t v12 = *(void *)(*v6 + 64);
  uint64_t v13 = *(void *)(*v6 + 88);
  long long v45 = *(_OWORD *)result;
  uint64_t v46 = *(void *)(result + 16);
  if ((void)v45 != v13)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v39 = v11;
  uint64_t v41 = v10;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v46, (uint64_t)v47);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v47, (uint64_t)&v49);
  if (v49)
  {
    unint64_t v17 = (void *)(v49 + 24 * ((*((void *)&v45 + 1) >> ((4 * *(unsigned char *)(v49 + 18) + 8) & 0x3C)) & 0xFLL));
    unint64_t v40 = v17[3];
    uint64_t v18 = v17[5];
    uint64_t v38 = v17[4];
    swift_bridgeObjectRetain();
    uint64_t v37 = v18;
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v40 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v45 + 1), v12);
    uint64_t v37 = v20;
    uint64_t v38 = v19;
    swift_unknownObjectRelease();
  }
  uint64_t v21 = v43;
  uint64_t v22 = v41;
  uint64_t v23 = v39;
  if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t v21 = a2;
    uint64_t v9 = a3;
    uint64_t v22 = a4;
    uint64_t v23 = a5;
  }
  __n128 result = BigString.Index.utf8Offset.getter();
  uint64_t v24 = result + v40;
  if (__OFADD__(result, v40)) {
    goto LABEL_15;
  }
  uint64_t v25 = BigString.Index.utf8Offset.getter();
  if (v25 >= v24) {
    uint64_t v26 = v24;
  }
  else {
    uint64_t v26 = v25;
  }
  long long v27 = v8[1];
  long long v28 = v8[3];
  v48[1] = v8[2];
  v48[2] = v28;
  v48[0] = v27;
  long long v29 = v8[1];
  v50[1] = v8[2];
  v50[2] = v28;
  v50[0] = v29;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v50, (uint64_t)v51);
  outlined retain of Locale((uint64_t)v51);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v48);
  __n128 result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v26, result)) {
    goto LABEL_16;
  }
  uint64_t v30 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined release of Locale((uint64_t)v44);
  __n128 result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a6 = v38;
    a6[1] = v37;
    a6[2] = v21;
    a6[3] = v9;
    a6[4] = v22;
    a6[5] = v23;
    a6[6] = v30;
    a6[7] = v32;
    a6[8] = v34;
    a6[9] = v36;
    a6[10] = v8;
    return swift_retain();
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs(uint64_t *result)
{
  uint64_t v2 = *result;
  if (v1[1] >= *result) {
    goto LABEL_95;
  }
  if (v1[9] < v2)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  uint64_t v3 = result;
  uint64_t v4 = (void *)*v1;
  uint64_t v5 = result[3];
  uint64_t v6 = result[7];
  uint64_t v7 = *(void *)(*v1 + 64);
  uint64_t v8 = v4[9];
  unint64_t v9 = v4[11];
  uint64_t v71 = v4[10];
  unint64_t v72 = v9;
  if (v5 != 1)
  {
    uint64_t v10 = result[1];
    if (v10 == v9)
    {
      unint64_t v11 = result[2];
      if (v6 != 2)
      {
        unint64_t v19 = v4[11];
        swift_unknownObjectRetain();
        __n128 result = (uint64_t *)BigString.Index.utf8Offset.getter();
        unint64_t v9 = v19;
        uint64_t v13 = (uint64_t)result;
        goto LABEL_68;
      }
      if (!v7)
      {
        uint64_t v13 = 0;
        goto LABEL_68;
      }
      uint64_t v68 = 2;
      unint64_t v12 = v4[11];
      swift_unknownObjectRetain_n();
      uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v11, v5, v7, v8, v71);
      __n128 result = (uint64_t *)swift_unknownObjectRelease();
      unint64_t v9 = v12;
LABEL_67:
      uint64_t v6 = v68;
LABEL_68:
      *(void *)&long long v81 = v10;
      *((void *)&v81 + 1) = v11;
      *(void *)&long long v82 = v5;
      BOOL v26 = __OFSUB__(v2, 1);
      uint64_t v41 = v2 - 1;
      if (!v26)
      {
        if (v10 == v9)
        {
          if (v7)
          {
            unint64_t v42 = *(unsigned __int8 *)(v7 + 18);
            swift_unknownObjectRetain();
            if (v42 < v11)
            {
LABEL_72:
              uint64_t v70 = v41;
              if (v5)
              {
                char v43 = (4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C;
                if (((v11 >> v43) & 0xF) != 0)
                {
                  uint64_t v8 = (uint64_t)v4;
                  uint64_t v44 = v6;
                  unint64_t v9 = ((((v11 >> v43) & 0xF) - 1) << v43) | ((-15 << v43) - 1) & v11;
LABEL_79:
                  unint64_t v69 = v9;
                  unint64_t v46 = *(void *)(v5 + 24 * ((v9 >> ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_unknownObjectRelease();
                  goto LABEL_83;
                }
              }
              swift_unknownObjectRetain();
              char v45 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v81, v7);
              __n128 result = (uint64_t *)swift_unknownObjectRelease();
              if ((v45 & 1) == 0)
              {
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
LABEL_104:
                __break(1u);
                goto LABEL_105;
              }
              if ((void)v81 == v72)
              {
                uint64_t v8 = (uint64_t)v4;
                unint64_t v9 = *((void *)&v81 + 1);
                uint64_t v5 = v82;
                if ((void)v82)
                {
                  uint64_t v44 = v6;
                  goto LABEL_79;
                }
LABEL_82:
                uint64_t v44 = v6;
                unint64_t v47 = v9;
                swift_unknownObjectRetain();
                unint64_t v69 = v47;
                unint64_t v46 = specialized Rope._Node.subscript.getter(v47, v7);
                swift_unknownObjectRelease_n();
                uint64_t v5 = 0;
LABEL_83:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                __n128 result = (uint64_t *)swift_bridgeObjectRelease();
                BOOL v26 = __OFSUB__(v13, v46);
                unint64_t v48 = v13 - v46;
                if (!v26)
                {
                  uint64_t v49 = (long long *)(v8 + 16);
                  if (v44 == 2)
                  {
                    unint64_t v50 = v72;
                    long long v51 = *v49;
                    long long v52 = *(_OWORD *)(v8 + 48);
                    v75[1] = *(_OWORD *)(v8 + 32);
                    v75[2] = v52;
                    v75[0] = v51;
                    long long v53 = *v49;
                    long long v77 = *(_OWORD *)(v8 + 32);
                    long long v78 = v52;
                    long long v76 = v53;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)v79);
                    outlined retain of Locale((uint64_t)v79);
                    long long v54 = &v73;
                    BigString.utf8.getter();
                    outlined release of Locale((uint64_t)v75);
                    long long v55 = *v49;
                    long long v56 = *(_OWORD *)(v8 + 48);
                    v74[1] = *(_OWORD *)(v8 + 32);
                    v74[2] = v56;
                    v74[0] = v55;
                    long long v57 = *v49;
                    long long v82 = *(_OWORD *)(v8 + 32);
                    long long v83 = v56;
                    long long v81 = v57;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v81, (uint64_t)v80);
                    outlined retain of Locale((uint64_t)v80);
                    BigString.startIndex.getter();
                    outlined release of Locale((uint64_t)v74);
LABEL_88:
                    uint64_t v61 = BigString.UTF8View.index(_:offsetBy:)();
                    uint64_t v63 = v62;
                    uint64_t v65 = v64;
                    uint64_t v67 = v66;
                    __n128 result = (uint64_t *)outlined release of Locale((uint64_t)v54);
                    *uint64_t v3 = v70;
                    v3[1] = v50;
                    v3[2] = v69;
                    v3[3] = v5;
                    v3[4] = v61;
                    v3[5] = v63;
                    v3[6] = v65;
                    v3[7] = v67;
                    return result;
                  }
                  long long v58 = *v49;
                  long long v59 = *(_OWORD *)(v8 + 48);
                  long long v77 = *(_OWORD *)(v8 + 32);
                  long long v78 = v59;
                  long long v76 = v58;
                  long long v60 = *v49;
                  long long v82 = *(_OWORD *)(v8 + 32);
                  long long v83 = v59;
                  long long v81 = v60;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v81, (uint64_t)v74);
                  outlined retain of Locale((uint64_t)v74);
                  BigString.utf8.getter();
                  outlined release of Locale((uint64_t)&v76);
                  __n128 result = (uint64_t *)BigString.Index.utf8Offset.getter();
                  if (!__OFSUB__(v48, result))
                  {
                    unint64_t v50 = v72;
                    long long v54 = (char *)v75;
                    goto LABEL_88;
                  }
                  goto LABEL_103;
                }
                goto LABEL_100;
              }
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
              goto LABEL_101;
            }
          }
          else if (v11)
          {
            goto LABEL_72;
          }
          __break(1u);
          goto LABEL_82;
        }
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
  }
  if (v7) {
    uint64_t v14 = v4[9];
  }
  else {
    uint64_t v14 = 0;
  }
  if (v2 < 0 || v14 < v2) {
    goto LABEL_102;
  }
  uint64_t v68 = result[7];
  if (!v7 || (v2 < v8 ? (BOOL v15 = *(unsigned __int16 *)(v7 + 16) == 0) : (BOOL v15 = 1), v15))
  {
    uint64_t v16 = v4[11];
    unint64_t v17 = swift_unknownObjectRetain_n();
    uint64_t v18 = v16;
    unint64_t v11 = specialized Rope._endPath.getter(v17);
    __n128 result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v5 = 0;
    if (!v7)
    {
      uint64_t v13 = 0;
      goto LABEL_66;
    }
LABEL_20:
    swift_unknownObjectRetain();
    uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v18, v11, v5, v7, v8, v71);
    __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_66:
    unint64_t v9 = v18;
    uint64_t v10 = v18;
    goto LABEL_67;
  }
  uint64_t v70 = v4[9];
  uint64_t v20 = *(unsigned __int8 *)(v7 + 18);
  if (*(unsigned char *)(v7 + 18))
  {
    __n128 result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v21 = v2;
    uint64_t v22 = v7;
    while (1)
    {
      uint64_t v24 = *(unsigned __int16 *)(v22 + 16);
      if (*(_WORD *)(v22 + 16))
      {
        uint64_t v25 = *(void *)(v22 + 32);
        BOOL v26 = __OFSUB__(v21, v25);
        uint64_t v27 = v21 - v25;
        if (v26) {
          goto LABEL_93;
        }
        if (__OFADD__(v27, 1)) {
          goto LABEL_94;
        }
        if (v27 + 1 <= 0)
        {
          uint64_t v24 = 0;
          goto LABEL_26;
        }
        if (v24 != 1)
        {
          long long v28 = (uint64_t *)(v22 + 56);
          uint64_t v29 = 1;
          while (1)
          {
            uint64_t v30 = *v28;
            v28 += 3;
            uint64_t v21 = v27 - v30;
            if (__OFSUB__(v27, v30)) {
              break;
            }
            if (__OFADD__(v21, 1)) {
              goto LABEL_91;
            }
            if (v21 + 1 < 1)
            {
              uint64_t v24 = v29;
              uint64_t v21 = v27;
              goto LABEL_26;
            }
            ++v29;
            uint64_t v27 = v21;
            if (v24 == v29) {
              goto LABEL_25;
            }
          }
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
        uint64_t v21 = v27;
      }
LABEL_25:
      if (v21) {
        goto LABEL_92;
      }
LABEL_26:
      char v23 = (4 * *(unsigned char *)(v22 + 18) + 8) & 0x3C;
      uint64_t v20 = ((-15 << v23) - 1) & v20 | (v24 << v23);
      uint64_t v5 = *(void *)(v22 + 24 + 24 * v24);
      swift_unknownObjectRetain();
      __n128 result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v22 = v5;
      if (!*(unsigned char *)(v5 + 18)) {
        goto LABEL_42;
      }
    }
  }
  __n128 result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v21 = v2;
  uint64_t v5 = v7;
LABEL_42:
  uint64_t v31 = *(unsigned __int16 *)(v5 + 16);
  if (*(_WORD *)(v5 + 16))
  {
    unint64_t v32 = v21 - 1;
    if (__OFSUB__(v21, 1))
    {
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    uint64_t v18 = v72;
    if (__OFADD__(v32, 1))
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (v21 <= 0)
    {
      uint64_t v31 = 0;
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v11 = v20 & 0xFFFFFFFFFFFFF0FFLL | (v31 << 8);
      goto LABEL_20;
    }
    if (v31 != 1)
    {
      unint64_t v33 = v31 - 2;
      if (v32 < v31 - 2) {
        unint64_t v33 = v21 - 1;
      }
      if (v33 >= v21 + 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v33 = v21 + 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v34 = v33 + 1;
      if (v34 >= 5)
      {
        uint64_t v36 = v34 & 3;
        if ((v34 & 3) == 0) {
          uint64_t v36 = 4;
        }
        unint64_t v37 = v34 - v36;
        uint64_t v35 = v37 + 1;
        int64x2_t v38 = 0uLL;
        v39.i64[0] = 0;
        v39.i64[1] = v21 - 1;
        v40.i64[0] = -1;
        v40.i64[1] = -1;
        do
        {
          int64x2_t v39 = vaddq_s64(v39, v40);
          int64x2_t v38 = vaddq_s64(v38, v40);
          v37 -= 4;
        }
        while (v37);
        unint64_t v32 = vaddvq_s64(vaddq_s64(vzip1q_s64(v39, v38), vzip2q_s64(v39, v38)));
      }
      else
      {
        uint64_t v35 = 1;
      }
      while (v21 + 0x8000000000000000 != v35)
      {
        if (v21 == v35)
        {
          uint64_t v31 = v21;
          goto LABEL_64;
        }
        ++v35;
        --v32;
        if (v31 == v35) {
          goto LABEL_63;
        }
      }
      goto LABEL_104;
    }
  }
  else
  {
    unint64_t v32 = v21;
    uint64_t v18 = v72;
  }
LABEL_63:
  if (!v32) {
    goto LABEL_64;
  }
LABEL_107:
  __break(1u);
  return result;
}

long long *protocol witness for Collection.subscript.getter in conformance AttributedString.Runs@<X0>(long long *result@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *result;
  long long v4 = result[1];
  long long v5 = result[2];
  long long v6 = result[3];
  long long v7 = result[4];
  long long v8 = result[5];
  long long v9 = result[6];
  long long v10 = result[7];
  long long v11 = *(_OWORD *)(v2 + 176);
  long long v30 = *(_OWORD *)(v2 + 160);
  long long v31 = v11;
  uint64_t v32 = *(void *)(v2 + 192);
  long long v12 = *(_OWORD *)(v2 + 112);
  long long v26 = *(_OWORD *)(v2 + 96);
  long long v27 = v12;
  long long v13 = *(_OWORD *)(v2 + 144);
  long long v28 = *(_OWORD *)(v2 + 128);
  long long v29 = v13;
  long long v14 = *(_OWORD *)(v2 + 48);
  void v23[2] = *(_OWORD *)(v2 + 32);
  v23[3] = v14;
  long long v15 = *(_OWORD *)(v2 + 80);
  long long v24 = *(_OWORD *)(v2 + 64);
  long long v25 = v15;
  long long v16 = *(_OWORD *)(v2 + 16);
  v23[0] = *(_OWORD *)v2;
  v23[1] = v16;
  if (*((uint64_t *)&v24 + 1) < *((uint64_t *)&v23[0] + 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((uint64_t)v3 < *((uint64_t *)&v23[0] + 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*((uint64_t *)&v24 + 1) >= (uint64_t)v7)
  {
    long long v17 = *(_OWORD *)(v2 + 176);
    *(_OWORD *)(a2 + 288) = *(_OWORD *)(v2 + 160);
    *(_OWORD *)(a2 + 304) = v17;
    *(void *)(a2 + 320) = *(void *)(v2 + 192);
    long long v18 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(a2 + 240) = v18;
    long long v19 = *(_OWORD *)(v2 + 144);
    *(_OWORD *)(a2 + 256) = *(_OWORD *)(v2 + 128);
    *(_OWORD *)(a2 + 272) = v19;
    long long v20 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(a2 + 176) = v20;
    long long v21 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 208) = v21;
    long long v22 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 144) = v22;
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)(a2 + 48) = v6;
    *(_OWORD *)(a2 + 64) = v7;
    *(_OWORD *)(a2 + 80) = v8;
    *(_OWORD *)(a2 + 96) = v9;
    *(_OWORD *)(a2 + 112) = v10;
    return (long long *)outlined retain of AttributedString.Runs((uint64_t)v23);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.Runs@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 144);
  long long v3 = *(_OWORD *)(v1 + 176);
  long long v24 = *(_OWORD *)(v1 + 160);
  long long v25 = v3;
  long long v4 = *(_OWORD *)(v1 + 80);
  long long v5 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)&v22[96] = *(_OWORD *)(v1 + 96);
  long long v6 = *(_OWORD *)&v22[96];
  *(_OWORD *)&v22[112] = v5;
  long long v7 = *(_OWORD *)(v1 + 112);
  long long v8 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v22[128] = *(_OWORD *)(v1 + 128);
  long long v9 = *(_OWORD *)&v22[128];
  long long v23 = v8;
  long long v10 = *(_OWORD *)(v1 + 16);
  long long v11 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)&v22[32] = *(_OWORD *)(v1 + 32);
  long long v12 = *(_OWORD *)&v22[32];
  *(_OWORD *)&v22[48] = v11;
  long long v13 = *(_OWORD *)(v1 + 48);
  long long v14 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)&v22[64] = *(_OWORD *)(v1 + 64);
  long long v15 = *(_OWORD *)&v22[64];
  *(_OWORD *)&v22[80] = v14;
  long long v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v22 = *(_OWORD *)v1;
  long long v17 = *(_OWORD *)v22;
  *(_OWORD *)&v22[16] = v16;
  long long v18 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v4;
  uint64_t v26 = *(void *)(v1 + 192);
  *(void *)(a1 + 192) = *(void *)(v1 + 192);
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v22[8];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v22[24];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v22[40];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)&v22[56];
  long long v19 = *(_OWORD *)&v22[88];
  *(_OWORD *)(a1 + 264) = *(_OWORD *)&v22[72];
  *(_OWORD *)(a1 + 280) = v19;
  long long v20 = *(_OWORD *)&v22[120];
  *(_OWORD *)(a1 + 296) = *(_OWORD *)&v22[104];
  *(_OWORD *)(a1 + 312) = v20;
  return outlined retain of AttributedString.Runs((uint64_t)v22);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString.Runs()
{
  return *(void *)(v0 + 8) == *(void *)(v0 + 72);
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString.Runs@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 3;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.Runs(void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.Runs(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[8];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.Runs(void *result, void *a2)
{
  if (*result < *a2 || a2[8] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[8] < result[8]) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.Runs()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs()
{
  long long v1 = *(_OWORD *)(v0 + 176);
  v9[10] = *(_OWORD *)(v0 + 160);
  v9[11] = v1;
  uint64_t v10 = *(void *)(v0 + 192);
  long long v2 = *(_OWORD *)(v0 + 112);
  v9[6] = *(_OWORD *)(v0 + 96);
  v9[7] = v2;
  long long v3 = *(_OWORD *)(v0 + 144);
  v9[8] = *(_OWORD *)(v0 + 128);
  v9[9] = v3;
  long long v4 = *(_OWORD *)(v0 + 48);
  v9[2] = *(_OWORD *)(v0 + 32);
  v9[3] = v4;
  long long v5 = *(_OWORD *)(v0 + 80);
  v9[4] = *(_OWORD *)(v0 + 64);
  v9[5] = v5;
  long long v6 = *(_OWORD *)(v0 + 16);
  v9[0] = *(_OWORD *)v0;
  v9[1] = v6;
  uint64_t v7 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v9);
  outlined release of AttributedString.Runs((uint64_t)v9);
  return v7;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.Runs(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

void *AttributedString.Runs._firstOfMatchingRuns(with:comparing:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)(a2 + 16)) {
    goto LABEL_40;
  }
  long long v5 = result;
  uint64_t v6 = *v3;
  uint64_t v35 = *(void *)(*v3 + 88);
  if (*result == v35)
  {
    uint64_t v33 = v3[1];
    unint64_t v7 = result[1];
    uint64_t v8 = result[2];
    if (v8)
    {
      uint64_t v32 = *(void *)(v8 + 24 * ((v7 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 32);
      swift_bridgeObjectRetain();
      uint64_t result = (void *)swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v9 = *(void *)(v6 + 64);
      swift_unknownObjectRetain();
      uint64_t v8 = 0;
      specialized Rope._Node.subscript.getter(v7, v9);
      uint64_t v32 = v10;
      uint64_t result = (void *)swift_unknownObjectRelease();
    }
    uint64_t v11 = v5[3];
    uint64_t v34 = v5[4];
    if (v33 < v11)
    {
      long long v29 = a3;
      while (1)
      {
        uint64_t v12 = *(void *)(v6 + 64);
        uint64_t v13 = *(void *)(v6 + 88);
        uint64_t v37 = v35;
        unint64_t v38 = v7;
        uint64_t v39 = v8;
        if (v35 != v13)
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v12)
        {
          unint64_t v14 = *(unsigned __int8 *)(v12 + 18);
          uint64_t result = (void *)swift_unknownObjectRetain_n();
          if (v7 <= v14) {
            goto LABEL_35;
          }
        }
        else if (!v7)
        {
          goto LABEL_35;
        }
        uint64_t v30 = v8;
        if (v8)
        {
          char v15 = (4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C;
          if (((v7 >> v15) & 0xF) != 0) {
            break;
          }
        }
        int v18 = *(unsigned __int8 *)(v12 + 18);
        char v19 = (4 * v18 + 8) & 0x3C;
        uint64_t v20 = (v7 >> v19) & 0xF;
        uint64_t v36 = v20;
        if (v18)
        {
          swift_unknownObjectRetain();
          char v21 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v12 + 16, v12 + 24, &v36, (uint64_t)&v37, v18);
          uint64_t result = (void *)swift_unknownObjectRelease();
          if ((v21 & 1) == 0) {
            goto LABEL_39;
          }
          if (v37 != v35) {
            goto LABEL_36;
          }
          unint64_t v16 = v38;
          uint64_t v17 = v39;
          if (v39) {
            goto LABEL_20;
          }
        }
        else
        {
          if (!v20) {
            goto LABEL_39;
          }
          unint64_t v16 = ((v20 - 1) << v19) | ((-15 << v19) - 1) & v7;
          unint64_t v38 = v16;
          uint64_t v17 = v12;
          if (v12) {
            goto LABEL_20;
          }
        }
        swift_unknownObjectRetain();
        unint64_t v22 = specialized Rope._Node.subscript.getter(v16, v12);
        swift_unknownObjectRelease_n();
        char v23 = 1;
LABEL_24:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v24 = v34 - v22;
        if (__OFSUB__(v34, v22)) {
          goto LABEL_37;
        }
        if (v35 != *(void *)(v6 + 88)) {
          goto LABEL_38;
        }
        if (v23)
        {
          uint64_t v25 = *(void *)(v6 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v16, v25);
          uint64_t v27 = v26;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v27 = *(void *)(v17 + 24 * ((v16 >> ((4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C)) & 0xF) + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        char v28 = specialized AttributedString._AttributeStorage.isEqual(to:comparing:)(v27, a2, v32);
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          a3 = v29;
          uint64_t v8 = v30;
          goto LABEL_33;
        }
        --v11;
        v34 -= v22;
        unint64_t v7 = v16;
        uint64_t v8 = v17;
        if (v33 >= v11)
        {
          uint64_t v34 = v24;
          uint64_t v11 = v33;
          unint64_t v7 = v16;
          uint64_t v8 = v17;
          a3 = v29;
          goto LABEL_33;
        }
      }
      unint64_t v16 = ((((v7 >> v15) & 0xF) - 1) << v15) | ((-15 << v15) - 1) & v7;
      unint64_t v38 = v16;
      uint64_t v17 = v8;
LABEL_20:
      unint64_t v22 = *(void *)(v17 + 24 * ((v16 >> ((4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      char v23 = 0;
      goto LABEL_24;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *a3 = v35;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v11;
    a3[4] = v34;
  }
  else
  {
LABEL_41:
    __break(1u);
  }
  return result;
}

uint64_t *AttributedString.Runs._lastOfMatchingRuns(with:comparing:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result[3];
  uint64_t v5 = v3[9];
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v80 = v5;
  if (v6) {
    BOOL v7 = v4 < v5;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_78;
  }
  uint64_t v88 = v6;
  uint64_t v8 = *result;
  unint64_t v9 = result[1];
  uint64_t v10 = (uint64_t *)result[2];
  uint64_t v11 = result[4];
  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 64);
  uint64_t v84 = v12;
  uint64_t v14 = *(void *)(v12 + 88);
  long long v125 = *(_OWORD *)result;
  uint64_t v126 = result[2];
  if ((void)v125 != v14)
  {
LABEL_79:
    __break(1u);
    return result;
  }
  uint64_t v83 = v8;
  unint64_t v69 = a3;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v126, (uint64_t)v127);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v127, (uint64_t)v128);
  if (v128[0])
  {
    uint64_t v16 = v128[0] + 24 * ((*((void *)&v125 + 1) >> ((4 * *(unsigned char *)(v128[0] + 18) + 8) & 0x3C)) & 0xFLL);
    uint64_t v17 = *(void *)(v16 + 40);
    uint64_t v89 = *(void *)(v16 + 32);
    swift_bridgeObjectRetain();
    uint64_t v68 = v17;
    uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(*((unint64_t *)&v125 + 1), v13);
    uint64_t v89 = v18;
    uint64_t v68 = v19;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
  }
  uint64_t v20 = v83;
  char v21 = *(uint64_t **)(v84 + 64);
  uint64_t v85 = v4 + 1;
  uint64_t v22 = *(void *)(v84 + 88);
  uint64_t v92 = (long long *)&v102;
  uint64_t v93 = &v113;
  uint64_t v23 = v22;
  uint64_t v78 = a2;
  long long v79 = (uint64_t *)(a2 + 40);
  uint64_t v109 = v83;
  unint64_t v110 = v9;
  uint64_t v111 = v10;
LABEL_11:
  if (v20 != v23)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v82 = v23;
  if (v10)
  {
    unint64_t v24 = v10[3 * ((v9 >> ((4 * *((unsigned char *)v10 + 18) + 8) & 0x3C)) & 0xF) + 3];
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v24 = specialized Rope._Node.subscript.getter(v9, (uint64_t)v21);
  }
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  if (__OFADD__(v11, v24)) {
    goto LABEL_75;
  }
  uint64_t v73 = v11 + v24;
  if (!v21) {
    goto LABEL_76;
  }
  unint64_t v25 = ((-15 << ((4 * *((unsigned char *)v21 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v21 + 18) | ((unint64_t)*((unsigned __int16 *)v21 + 8) << ((4 * *((unsigned char *)v21 + 18) + 8) & 0x3C));
  uint64_t result = (uint64_t *)swift_unknownObjectRetain();
  if (v9 >= v25) {
    goto LABEL_76;
  }
  if (v10)
  {
    char v26 = (4 * *((unsigned char *)v10 + 18) + 8) & 0x3C;
    unint64_t v27 = ((v9 >> v26) & 0xF) + 1;
    if (v27 < *((unsigned __int16 *)v10 + 8))
    {
      unint64_t v28 = (v27 << v26) | ((-15 << v26) - 1) & v9;
      uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_26:
      char v21 = v111;
      goto LABEL_30;
    }
  }
  int v29 = *((unsigned __int8 *)v21 + 18);
  char v30 = (4 * v29 + 8) & 0x3C;
  uint64_t v31 = (v9 >> v30) & 0xF;
  *(void *)&long long v100 = v31;
  if (v29)
  {
    swift_unknownObjectRetain();
    char v32 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v21 + 3), (uint64_t *)&v100, (uint64_t)&v109, (uint64_t)v21, v29);
    swift_unknownObjectRelease();
    if (v32)
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
      unint64_t v28 = v110;
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v33 = v31 + 1;
    if (v31 + 1 < (unint64_t)*((unsigned __int16 *)v21 + 8))
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
      unint64_t v28 = (v33 << v30) | ((-15 << v30) - 1) & v9;
      goto LABEL_30;
    }
  }
  int v34 = *((unsigned __int8 *)v21 + 18);
  uint64_t v35 = *((unsigned __int16 *)v21 + 8);
  uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
  unint64_t v28 = ((-15 << ((4 * v34 + 8) & 0x3C)) - 1) & v34 | (unint64_t)(v35 << ((4 * v34 + 8) & 0x3C));
  char v21 = 0;
  uint64_t v109 = v82;
LABEL_30:
  if (v85 != v80)
  {
    if (v109 != *(void *)(v84 + 88))
    {
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    uint64_t v83 = v109;
    uint64_t v76 = v11;
    uint64_t v77 = v4;
    unint64_t v74 = v9;
    long long v75 = v10;
    uint64_t v71 = v21;
    unint64_t v72 = v28;
    if (v21)
    {
      uint64_t v36 = &v21[3 * ((v28 >> ((4 * *((unsigned char *)v21 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v37 = v36[4];
      uint64_t v38 = v36[5];
      swift_bridgeObjectRetain();
      uint64_t v81 = v38;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v39 = *(void *)(v84 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v28, v39);
      uint64_t v81 = v40;
      uint64_t v37 = v41;
      swift_unknownObjectRelease();
    }
    uint64_t v70 = v85;
    uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
    uint64_t v42 = 0;
    char v43 = v79;
    uint64_t v44 = v88;
    uint64_t v45 = v89;
    uint64_t v94 = v37;
    while (1)
    {
      uint64_t v47 = v42 + 1;
      if (__OFADD__(v42, 1))
      {
        __break(1u);
        goto LABEL_74;
      }
      uint64_t v49 = *(v43 - 1);
      uint64_t v48 = *v43;
      if (*(void *)(v45 + 16))
      {
        swift_bridgeObjectRetain_n();
        unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
        if (v51)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v45 + 56) + 72 * v50, (uint64_t)&v120);
        }
        else
        {
          uint64_t v124 = 0;
          long long v122 = 0u;
          long long v123 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
        }
        swift_bridgeObjectRelease();
        uint64_t v37 = v94;
        if (!*(void *)(v94 + 16))
        {
LABEL_45:
          uint64_t v119 = 0;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v124 = 0;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v37 + 16)) {
          goto LABEL_45;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
      if (v53)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v37 + 56) + 72 * v52, (uint64_t)&v115);
      }
      else
      {
        uint64_t v119 = 0;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v115 = 0u;
        long long v116 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_52:
      char v21 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      swift_bridgeObjectRelease();
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v120, (uint64_t)&v109, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v115, (uint64_t)v93, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v112)
      {
        if (v114) {
          goto LABEL_69;
        }
        outlined destroy of Any?((uint64_t)&v109, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v115, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = (uint64_t *)outlined destroy of Any?((uint64_t)&v120, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_39;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v109, (uint64_t)v108, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v114) {
        goto LABEL_68;
      }
      long long v54 = *((_OWORD *)v93 + 3);
      uint64_t v106[2] = *((_OWORD *)v93 + 2);
      v106[3] = v54;
      uint64_t v107 = v93[8];
      long long v55 = *((_OWORD *)v93 + 1);
      v106[0] = *(_OWORD *)v93;
      v106[1] = v55;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v108, (uint64_t)v105);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v106, (uint64_t)v104);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v105, (uint64_t)&v100, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v104, (uint64_t)v92, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v101)
      {
        if (!v103)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
LABEL_37:
          char v46 = 0;
          goto LABEL_38;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)v97);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v92, (uint64_t)v96);
        uint64_t v56 = v98;
        uint64_t v87 = v99;
        long long v86 = __swift_project_boxed_opaque_existential_1(v97, v98);
        uint64_t v91 = &v68;
        uint64_t v57 = *(void *)(v56 - 8);
        MEMORY[0x1F4188790](v86);
        long long v59 = (char *)&v68 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v96, (uint64_t)&v95);
        uint64_t v60 = type metadata accessor for Optional();
        uint64_t v90 = &v68;
        uint64_t v61 = *(void *)(v60 - 8);
        MEMORY[0x1F4188790](v60);
        uint64_t v63 = (char *)&v68 - v62;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        int v64 = swift_dynamicCast();
        uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
        if (v64)
        {
          v65(v63, 0, 1, v56);
          (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v59, v63, v56);
          char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
        }
        else
        {
          v65(v63, 1, 1, v56);
          (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v60);
          char v46 = 0;
        }
        uint64_t v44 = v88;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
        uint64_t v45 = v89;
      }
      else
      {
        if (v103)
        {
          outlined destroy of Any?((uint64_t)v92, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_37;
        }
        char v46 = 1;
      }
LABEL_38:
      outlined destroy of Any?((uint64_t)v104, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v105, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v106);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v108);
      outlined destroy of Any?((uint64_t)&v109, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v115, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = (uint64_t *)outlined destroy of Any?((uint64_t)&v120, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v46 & 1) == 0) {
        goto LABEL_70;
      }
LABEL_39:
      v43 += 2;
      ++v42;
      uint64_t v37 = v94;
      if (v47 == v44)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
        uint64_t v20 = v83;
        char v21 = *(uint64_t **)(v84 + 64);
        uint64_t v23 = *(void *)(v84 + 88);
        unint64_t v9 = v72;
        uint64_t v11 = v73;
        uint64_t v4 = v70;
        uint64_t v109 = v83;
        unint64_t v110 = v72;
        uint64_t v10 = v71;
        uint64_t v111 = v71;
        if (!__OFADD__(v85++, 1)) {
          goto LABEL_11;
        }
        __break(1u);
LABEL_68:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v108);
LABEL_69:
        outlined destroy of Any?((uint64_t)&v109, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v115, v21);
        outlined destroy of Any?((uint64_t)&v120, v21);
LABEL_70:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
        uint64_t v11 = v76;
        uint64_t v4 = v77;
        unint64_t v9 = v74;
        uint64_t v10 = v75;
        goto LABEL_71;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
LABEL_71:
  uint64_t v67 = v69;
  *unint64_t v69 = v82;
  v67[1] = v9;
  v67[2] = v10;
  v67[3] = v4;
  v67[4] = v11;
  return result;
}

uint64_t BigString._firstConstraintBreak(in:with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v8 = a1[1];
    uint64_t v36 = a1[2];
    uint64_t v37 = *a1;
    uint64_t v35 = a1[3];
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v31 = v8;
      uint64_t v33 = v2;
      swift_bridgeObjectRetain();
      uint64_t v9 = 40;
      uint64_t v10 = v6;
      uint64_t v32 = v3;
      do
      {
        if (!*(void *)(a2 + v9))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v38);
          uint64_t v13 = v36;
          uint64_t v12 = v37;
          uint64_t v14 = v31;
          uint64_t v15 = v35;
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if (result)
          {
LABEL_40:
            __break(1u);
          }
          else
          {
            v51[0] = v37;
            v51[1] = v31;
            v51[2] = v36;
            v51[3] = v35;
            v51[4] = v37;
            v51[5] = v31;
            v51[6] = v36;
            v51[7] = v35;
            specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v51, v41);
            uint64_t result = outlined release of Locale((uint64_t)v39);
            uint64_t v16 = v42;
            uint64_t v2 = v33;
            if (v42 == 2) {
              goto LABEL_10;
            }
            uint64_t v2 = v41[4];
            uint64_t v4 = v41[6];
            uint64_t v32 = v41[5];
            uint64_t result = static BigString.Index.< infix(_:_:)();
            uint64_t v5 = v16;
            if ((result & 1) == 0) {
              goto LABEL_10;
            }
          }
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        swift_bridgeObjectRelease();
        v9 += 16;
        --v10;
      }
      while (v10);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v2 = v33;
      uint64_t v13 = v36;
      uint64_t v12 = v37;
      uint64_t v14 = v31;
      uint64_t v15 = v35;
LABEL_10:
      uint64_t v17 = 0;
      uint64_t v43 = v12;
      uint64_t v44 = v14;
      uint64_t v45 = v13;
      uint64_t v46 = v15;
      uint64_t v47 = v2;
      uint64_t v48 = v32;
      uint64_t v18 = 40;
      uint64_t v49 = v4;
      uint64_t v50 = v5;
      while (1)
      {
        uint64_t v19 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
          goto LABEL_40;
        }
        if (*(void *)(a2 + v18)) {
          break;
        }
        v18 += 16;
        ++v17;
        if (v19 == v6) {
          return v2;
        }
      }
      uint64_t v34 = v2;
      swift_bridgeObjectRetain();
      uint64_t v20 = (unint64_t *)(a2 + 40);
      char v21 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v22 = *v20;
        if (*v20)
        {
          uint64_t v23 = *(v20 - 1);
          if ((v22 & 0x2000000000000000) != 0 ? HIBYTE(v22) & 0xF : v23 & 0xFFFFFFFFFFFFLL)
          {
            if ((v22 & 0x1000000000000000) != 0)
            {
              int v25 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v22 & 0x2000000000000000) != 0)
              {
                v41[0] = *(v20 - 1);
                v41[1] = v22 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v23 & 0x1000000000000000) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }
              int v25 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v21 + 2) + 1, 1, v21);
            }
            unint64_t v27 = *((void *)v21 + 2);
            unint64_t v26 = *((void *)v21 + 3);
            if (v27 >= v26 >> 1) {
              char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v21);
            }
            *((void *)v21 + 2) = v27 + 1;
            *(_DWORD *)&v21[4 * v27 + 32] = v25;
          }
        }
        v20 += 2;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v40);
      uint64_t v28 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v21);
      uint64_t v30 = v29;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)v41);
      uint64_t v2 = v34;
      if (v30 != 2)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_42;
        }
        return v28;
      }
    }
  }
  return v2;
}

uint64_t BigString._lastConstraintBreak(in:with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v8 = a1[4];
    uint64_t v44 = a1[6];
    uint64_t v45 = a1[5];
    uint64_t v43 = a1[7];
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v40 = v8;
      uint64_t v41 = v2;
      swift_bridgeObjectRetain();
      uint64_t v9 = 40;
      uint64_t v10 = v6;
      uint64_t v39 = v4;
      while (*(void *)(a2 + v9))
      {
        swift_bridgeObjectRelease();
        v9 += 16;
        if (!--v10)
        {
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v12 = v40;
          uint64_t v2 = v41;
          uint64_t v14 = v44;
          uint64_t v13 = v45;
          uint64_t v15 = v43;
          goto LABEL_13;
        }
      }
      uint64_t v38 = v3;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.startIndex.getter();
      uint64_t v12 = v40;
      uint64_t v3 = v44;
      uint64_t v13 = v45;
      uint64_t v15 = v43;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result)
      {
        BigString.utf8.getter();
        uint64_t v34 = BigString.UTF8View.index(before:)();
        uint64_t v35 = v16;
        uint64_t v36 = v18;
        uint64_t v37 = v17;
        outlined release of Locale((uint64_t)v46);
        BigString.utf8.getter();
        BigString.UTF8View.subscript.getter();
        outlined release of Locale((uint64_t)v47);
        uint64_t result = static BigString.Index.< infix(_:_:)();
        uint64_t v2 = v41;
        if (result)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        uint64_t v14 = v44;
        v62[0] = v34;
        v62[1] = v37;
        v62[2] = v36;
        v62[3] = v35;
        v62[4] = v40;
        v62[5] = v45;
        v62[6] = v44;
        v62[7] = v43;
        specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)v62, &v50);
        uint64_t result = outlined release of Locale((uint64_t)v48);
        uint64_t v19 = v53;
        uint64_t v3 = v38;
        if (v53 == 2) {
          goto LABEL_13;
        }
        uint64_t v2 = v50;
        uint64_t v3 = v51;
        uint64_t v39 = v52;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        uint64_t v5 = v19;
        if ((result & 1) == 0) {
          goto LABEL_13;
        }
        __break(1u);
      }
      uint64_t v2 = v41;
      uint64_t v14 = v3;
      uint64_t v3 = v38;
LABEL_13:
      uint64_t v20 = 0;
      uint64_t v54 = v2;
      uint64_t v55 = v3;
      uint64_t v56 = v39;
      uint64_t v57 = v5;
      uint64_t v58 = v12;
      uint64_t v59 = v13;
      uint64_t v21 = 40;
      uint64_t v60 = v14;
      uint64_t v61 = v15;
      while (1)
      {
        uint64_t v22 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        if (*(void *)(a2 + v21)) {
          break;
        }
        v21 += 16;
        ++v20;
        if (v22 == v6) {
          return v2;
        }
      }
      uint64_t v42 = v2;
      swift_bridgeObjectRetain();
      uint64_t v23 = (unint64_t *)(a2 + 40);
      unint64_t v24 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v25 = *v23;
        if (*v23)
        {
          uint64_t v26 = *(v23 - 1);
          if ((v25 & 0x2000000000000000) != 0 ? HIBYTE(v25) & 0xF : v26 & 0xFFFFFFFFFFFFLL)
          {
            if ((v25 & 0x1000000000000000) != 0)
            {
              int v28 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v25 & 0x2000000000000000) != 0)
              {
                uint64_t v50 = *(v23 - 1);
                uint64_t v51 = v25 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v26 & 0x1000000000000000) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }
              int v28 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
            }
            unint64_t v30 = *((void *)v24 + 2);
            unint64_t v29 = *((void *)v24 + 3);
            if (v30 >= v29 >> 1) {
              unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v24);
            }
            *((void *)v24 + 2) = v30 + 1;
            *(_DWORD *)&v24[4 * v30 + 32] = v28;
          }
        }
        v23 += 2;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v49);
      uint64_t v31 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v24);
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v50);
      uint64_t v2 = v42;
      if (v33 != 2)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_44;
        }
        return v31;
      }
    }
  }
  return v2;
}

uint64_t BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(uint64_t a1)
{
  BigSubstring.UnicodeScalarView.startIndex.getter();
  BigSubstring.UnicodeScalarView.endIndex.getter();
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = BigSubstring.UnicodeScalarView.subscript.getter();
  char v3 = specialized Sequence<>.contains(_:)(v2, a1);
  uint64_t v4 = BigSubstring.UnicodeScalarView.index(after:)();
  if (v3) {
    return v4;
  }
  BigSubstring.UnicodeScalarView.endIndex.getter();
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t result = BigSubstring.UnicodeScalarView.subscript.getter();
    if (v6)
    {
      if (*(_DWORD *)(a1 + 32) == result) {
        return v4;
      }
      if (v6 != 1)
      {
        if (*(_DWORD *)(a1 + 36) == result) {
          return v4;
        }
        if (v6 != 2) {
          break;
        }
      }
    }
LABEL_6:
    uint64_t v4 = BigSubstring.UnicodeScalarView.index(after:)();
    BigSubstring.UnicodeScalarView.endIndex.getter();
    char v7 = static BigString.Index.< infix(_:_:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  uint64_t v8 = 10;
  while (1)
  {
    uint64_t v9 = v8 - 7;
    if (__OFADD__(v8 - 8, 1)) {
      break;
    }
    if (*(_DWORD *)(a1 + 4 * v8) == result) {
      return v4;
    }
    ++v8;
    if (v9 == v6) {
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)(uint64_t a1)
{
  outlined retain of Locale(v1);
  BigSubstring.UnicodeScalarView.startIndex.getter();
  BigSubstring.UnicodeScalarView.endIndex.getter();
  char v3 = static BigString.Index.== infix(_:_:)();
  outlined release of Locale(v1);
  if (v3) {
    return 0;
  }
  BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v4 = BigSubstring.UnicodeScalarView.index(before:)();
  uint64_t v5 = BigSubstring.UnicodeScalarView.subscript.getter();
  uint64_t v12 = a1;
  if (specialized Sequence<>.contains(_:)(v5, a1)) {
    return v4;
  }
  BigSubstring.UnicodeScalarView.startIndex.getter();
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v9 = BigSubstring.UnicodeScalarView.index(before:)();
    uint64_t result = BigSubstring.UnicodeScalarView.subscript.getter();
    if (v7)
    {
      if (*(_DWORD *)(v12 + 32) == result) {
        return v4;
      }
      if (v7 != 1)
      {
        if (*(_DWORD *)(v12 + 36) == result) {
          return v4;
        }
        if (v7 != 2) {
          break;
        }
      }
    }
LABEL_6:
    BigSubstring.UnicodeScalarView.startIndex.getter();
    char v8 = static BigString.Index.< infix(_:_:)();
    uint64_t result = 0;
    uint64_t v4 = v9;
    if ((v8 & 1) == 0) {
      return result;
    }
  }
  uint64_t v10 = 10;
  while (1)
  {
    uint64_t v11 = v10 - 7;
    if (__OFADD__(v10 - 8, 1)) {
      break;
    }
    if (*(_DWORD *)(v12 + 4 * v10) == result) {
      return v4;
    }
    ++v10;
    if (v11 == v7) {
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static AttributedString.Runs.== infix(_:_:)(long long *a1, uint64_t a2)
{
  long long v2 = a1[11];
  long long v39 = a1[10];
  long long v40 = v2;
  uint64_t v41 = *((void *)a1 + 24);
  long long v3 = a1[7];
  long long v35 = a1[6];
  long long v36 = v3;
  long long v4 = a1[9];
  long long v37 = a1[8];
  long long v38 = v4;
  long long v5 = a1[3];
  long long v31 = a1[2];
  long long v32 = v5;
  long long v6 = a1[5];
  long long v33 = a1[4];
  long long v34 = v6;
  long long v7 = a1[1];
  long long v29 = *a1;
  long long v30 = v7;
  long long v8 = *(_OWORD *)(a2 + 176);
  long long v26 = *(_OWORD *)(a2 + 160);
  long long v27 = v8;
  uint64_t v28 = *(void *)(a2 + 192);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v22 = *(_OWORD *)(a2 + 96);
  long long v23 = v9;
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v24 = *(_OWORD *)(a2 + 128);
  long long v25 = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  v19[2] = *(_OWORD *)(a2 + 32);
  v19[3] = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  long long v20 = *(_OWORD *)(a2 + 64);
  long long v21 = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v13;
  uint64_t v14 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v16 = result - v14;
  if (__OFSUB__(result, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v17 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(result, v17))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v16 != result - v17) {
    goto LABEL_8;
  }
  if (__OFSUB__(*((void *)&v33 + 1), *((void *)&v29 + 1))) {
    goto LABEL_12;
  }
  if (!__OFSUB__(*((void *)&v20 + 1), *((void *)&v19[0] + 1)))
  {
    if (*((void *)&v33 + 1) - *((void *)&v29 + 1) == *((void *)&v20 + 1) - *((void *)&v19[0] + 1))
    {
      char v18 = specialized Sequence<>.elementsEqual<A>(_:)((uint64_t)v19);
      return v18 & 1;
    }
LABEL_8:
    char v18 = 0;
    return v18 & 1;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index);
  }
  return result;
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in AttributedString.Runs.Index()
{
  return MEMORY[0x1E4FBB5A0];
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.Runs> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs>);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.Runs> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString.Runs> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>);
}

uint64_t assignWithCopy for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](NSNotificationCenter.Notifications.Iterator.next(), 0, 0);
}

uint64_t NSNotificationCenter.Notifications.Iterator.next()()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *uint64_t v1 = v0;
  v1[1] = NSNotificationCenter.Notifications.Iterator.next();
  uint64_t v2 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188148](v2, &async function pointer to partial apply for closure #1 in NSNotificationCenter.Notifications.Iterator.next());
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](NSNotificationCenter.Notifications.Iterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NSNotificationCenter.Notifications.next()(uint64_t a1)
{
  *(void *)(v2 + 280) = a1;
  *(void *)(v2 + 288) = v1;
  return MEMORY[0x1F4188298](NSNotificationCenter.Notifications.next(), 0, 0);
}

uint64_t NSNotificationCenter.Notifications.deinit()
{
  NSNotificationCenter.Notifications.teardown()();

  swift_release();
  return v0;
}

Swift::Void __swiftcall NSNotificationCenter.Notifications.teardown()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v3 = (uint64_t)&v2[4];
  uint64_t v4 = v2 + 16;
  os_unfair_lock_lock(v2 + 16);
  closure #1 in NSNotificationCenter.Notifications.teardown()(v3, (uint64_t)&v12);
  os_unfair_lock_unlock(v4);
  outlined init with take of LocalePreferences?((uint64_t)&v12, (uint64_t)v20, &demangling cache variable for type metadata for Sendable?);
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = v16;
  uint64_t v19 = v17;
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v20, (uint64_t)&v10, &demangling cache variable for type metadata for Sendable?);
  if (v11)
  {
    outlined init with take of Any(&v10, &v12);
    BOOL v5 = *(void **)(v1 + 16);
    __swift_project_boxed_opaque_existential_1(&v12, v13);
    objc_msgSend(v5, sel_removeObserver_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for Sendable?);
  }
  uint64_t v6 = *(void *)&v18[0];
  uint64_t v7 = *(void *)(*(void *)&v18[0] + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8++ + 32);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v18 + 8, (uint64_t)&v12, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      outlined init with take of LocalePreferences?((uint64_t)&v12, *(void *)(*(void *)(v9 + 64) + 40), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      swift_continuation_resume();
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  outlined destroy of NSNotificationCenter.Notifications.Resumption((uint64_t)v18);
  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Sendable?);
}

uint64_t NSNotificationCenter.Notifications.__deallocating_deinit()
{
  NSNotificationCenter.Notifications.teardown()();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in NSNotificationCenter.Notifications.teardown()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of LocalePreferences?(a1 + 8, (uint64_t)v8, &demangling cache variable for type metadata for Sendable?);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v8, a2, &demangling cache variable for type metadata for Sendable?);
  uint64_t v4 = *(void *)(a1 + 40);
  memset(&v7[8], 0, 48);
  *(void *)uint64_t v7 = v4;
  swift_bridgeObjectRetain();
  outlined destroy of Any?((uint64_t)&v7[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  memset(&v7[8], 0, 48);
  long long v5 = *(_OWORD *)&v7[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v7[32];
  *(void *)(a2 + 80) = *(void *)&v7[48];
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = MEMORY[0x1E4FBC860];
  return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Sendable?);
}

uint64_t method lookup function for NSNotificationCenter.Notifications(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NSNotificationCenter.Notifications);
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSNotificationCenter.Notifications.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_181CEE5D4()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t initializeWithCopy for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = (_OWORD *)(a1 + 8);
  long long v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 40);
    id v8 = v6;
    if (v7)
    {
      *(void *)(a1 + 40) = v7;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16, v7);
    }
    else
    {
      long long v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v10;
    }
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = v5[1];
    *long long v4 = *v5;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 40) = v5[2];
  }
  return a1;
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = (_OWORD *)(a1 + 8);
  long long v5 = *(void **)(a1 + 8);
  uint64_t v7 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  if (v5)
  {
    if (v6)
    {
      *(void *)(a1 + 8) = v6;
      id v8 = v6;

      uint64_t v9 = *(void *)(a2 + 40);
      if (*(void *)(a1 + 40))
      {
        if (v9)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_15:
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        __swift_destroy_boxed_opaque_existential_1(a1 + 16);
      }
      else if (v9)
      {
        *(void *)(a1 + 40) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 16, a2 + 16);
        goto LABEL_15;
      }
      long long v16 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v16;
      goto LABEL_15;
    }
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(a1 + 8);
    long long v13 = *(_OWORD *)(a2 + 24);
    long long v12 = *(_OWORD *)(a2 + 40);
    *long long v4 = *v7;
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 40) = v12;
  }
  else if (v6)
  {
    *(void *)(a1 + 8) = v6;
    uint64_t v10 = *(void *)(a2 + 40);
    id v11 = v6;
    if (v10)
    {
      *(void *)(a1 + 40) = v10;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8))(a1 + 16, a2 + 16, v10);
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v17;
    }
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *v7;
    long long v15 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v15;
    *long long v4 = v14;
  }
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4) {
    goto LABEL_7;
  }
  if (!v5)
  {
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(a1 + 8);
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  *(void *)(a1 + 8) = v5;

  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSNotificationCenter.Notifications.Resumption(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSNotificationCenter.Notifications.Resumption(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.Resumption()
{
  return &type metadata for NSNotificationCenter.Notifications.Resumption;
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v7)
    {
      *(void *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

double parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = qword_1821A1958[*a1];
  if (*(void *)(a2 + 16)
    && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(qword_1821A1958[*a1]), (v10 & 1) != 0))
  {
    id v11 = (void *)(*(void *)(a2 + 56) + 16 * v8);
    uint64_t v12 = v11[1];
    *a4 = *v11;
    a4[1] = v12;
    swift_bridgeObjectRetain();
  }
  else if ((v6 & a3) != 0)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a4 = xmmword_182106C90;
  }
  return result;
}

unint64_t parseStrategyForPort #1 () in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)@<X0>(unint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 16))
  {
    unint64_t v5 = result;
    double result = specialized __RawDictionaryStorage.find<A>(_:)(16);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v5 + 56) + 16 * result);
      uint64_t v8 = *v7;
      unint64_t v9 = v7[1];
      uint64_t v10 = HIBYTE(v9) & 0xF;
      uint64_t v11 = *v7 & 0xFFFFFFFFFFFFLL;
      if ((v9 & 0x2000000000000000) != 0 ? HIBYTE(v9) & 0xF : *v7 & 0xFFFFFFFFFFFFLL)
      {
        if ((v9 & 0x1000000000000000) == 0)
        {
          if ((v9 & 0x2000000000000000) == 0)
          {
            if ((v8 & 0x1000000000000000) != 0) {
              long long v13 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else {
              long long v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            }
            double result = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v13, v11, 10);
            uint64_t v14 = result;
            char v16 = v15 & 1;
            goto LABEL_34;
          }
          v31[0] = *v7;
          v31[1] = v9 & 0xFFFFFFFFFFFFFFLL;
          if (v8 == 43)
          {
            if (!v10) {
              goto LABEL_63;
            }
            if (v10 == 1) {
              goto LABEL_61;
            }
            if ((BYTE1(v8) - 48) >= 0xAu) {
              goto LABEL_33;
            }
            uint64_t v14 = (BYTE1(v8) - 48);
            if (v10 != 2)
            {
              if ((BYTE2(v8) - 48) > 9u) {
                goto LABEL_33;
              }
              uint64_t v14 = 10 * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
              uint64_t v17 = v10 - 3;
              if (v10 != 3)
              {
                char v18 = (unsigned __int8 *)v31 + 3;
                do
                {
                  unsigned int v19 = *v18 - 48;
                  if (v19 > 9) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = 10 * v14;
                  if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63) {
                    goto LABEL_33;
                  }
                  uint64_t v14 = v20 + v19;
                  if (__OFADD__(v20, v19)) {
                    goto LABEL_33;
                  }
                  ++v18;
                }
                while (--v17);
              }
            }
          }
          else
          {
            if (v8 == 45)
            {
              if (v10)
              {
                if (v10 != 1)
                {
                  if ((BYTE1(v8) - 48) < 0xAu)
                  {
                    if (v10 == 2)
                    {
                      uint64_t v14 = -(uint64_t)(BYTE1(v8) - 48);
                      char v32 = 0;
                      goto LABEL_35;
                    }
                    if ((BYTE2(v8) - 48) <= 9u)
                    {
                      uint64_t v14 = -10 * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
                      uint64_t v25 = v10 - 3;
                      if (v10 == 3) {
                        goto LABEL_48;
                      }
                      long long v26 = (unsigned __int8 *)v31 + 3;
                      while (1)
                      {
                        unsigned int v27 = *v26 - 48;
                        if (v27 > 9) {
                          break;
                        }
                        uint64_t v28 = 10 * v14;
                        if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63) {
                          break;
                        }
                        uint64_t v14 = v28 - v27;
                        if (__OFSUB__(v28, v27)) {
                          break;
                        }
                        ++v26;
                        if (!--v25) {
                          goto LABEL_48;
                        }
                      }
                    }
                  }
LABEL_33:
                  uint64_t v14 = 0;
                  char v16 = 1;
LABEL_34:
                  char v32 = v16;
                  goto LABEL_35;
                }
LABEL_61:
                char v32 = 1;
                uint64_t v14 = 0;
LABEL_35:
                if ((v32 & 1) == 0)
                {
LABEL_36:
                  *(void *)a3 = v14;
                  *(unsigned char *)(a3 + 8) = 0;
                  return result;
                }
                goto LABEL_56;
              }
              __break(1u);
LABEL_63:
              __break(1u);
              return result;
            }
            if (!v10) {
              goto LABEL_61;
            }
            if ((v8 - 48) >= 0xAu) {
              goto LABEL_33;
            }
            uint64_t v14 = (v8 - 48);
            if (v10 != 1)
            {
              if ((BYTE1(v8) - 48) > 9u) {
                goto LABEL_33;
              }
              uint64_t v14 = 10 * (v8 - 48) + (BYTE1(v8) - 48);
              uint64_t v21 = v10 - 2;
              if (v10 != 2)
              {
                long long v22 = (unsigned __int8 *)v31 + 2;
                do
                {
                  unsigned int v23 = *v22 - 48;
                  if (v23 > 9) {
                    goto LABEL_33;
                  }
                  uint64_t v24 = 10 * v14;
                  if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63) {
                    goto LABEL_33;
                  }
                  uint64_t v14 = v24 + v23;
                  if (__OFADD__(v24, v23)) {
                    goto LABEL_33;
                  }
                  ++v22;
                }
                while (--v21);
              }
            }
          }
LABEL_48:
          char v32 = 0;
          goto LABEL_35;
        }
        swift_bridgeObjectRetain();
        uint64_t v14 = specialized _parseInteger<A, B>(ascii:radix:)(v8, v9, 10);
        char v30 = v29;
        double result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0) {
          goto LABEL_36;
        }
      }
    }
  }
LABEL_56:
  *(void *)a3 = (a2 & 0x10) == 0;
  *(unsigned char *)(a3 + 8) = 1;
  return result;
}

id _NSSwiftURLComponents.init(string:)(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = v2;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(a1, a2, 1, (uint64_t)v24);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v27, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v25, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v25) == 1)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for _NSSwiftURLComponents();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    long long v20 = v25[6];
    long long v21 = v25[7];
    v22[0] = v26[0];
    *(_OWORD *)((char *)v22 + 10) = *(_OWORD *)((char *)v26 + 10);
    long long v16 = v25[2];
    long long v17 = v25[3];
    long long v18 = v25[4];
    long long v19 = v25[5];
    long long v14 = v25[0];
    long long v15 = v25[1];
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
    uint64_t v7 = swift_allocObject();
    *(_DWORD *)(v7 + 172) = 0;
    long long v8 = v21;
    *(_OWORD *)(v7 + 112) = v20;
    *(_OWORD *)(v7 + 128) = v8;
    *(_OWORD *)(v7 + 144) = v22[0];
    *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
    long long v9 = v17;
    *(_OWORD *)(v7 + 48) = v16;
    *(_OWORD *)(v7 + 64) = v9;
    long long v10 = v19;
    *(_OWORD *)(v7 + 80) = v18;
    *(_OWORD *)(v7 + 96) = v10;
    long long v11 = v15;
    *(_OWORD *)(v7 + 16) = v14;
    *(_OWORD *)(v7 + 32) = v11;
    *(void *)&v5[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
    outlined init with take of LocalePreferences?((uint64_t)v27, (uint64_t)v23, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v23);

    v13.receiver = v5;
    v13.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
    id v6 = objc_msgSendSuper2(&v13, sel_init);
    outlined release of URLComponents?(v24);
  }
  return v6;
}

uint64_t _NSSwiftURLComponents.init(url:resolvingAgainstBaseURL:)(uint64_t a1, char a2)
{
  long long v3 = v2;
  unint64_t v5 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (a2)
  {
    *(void *)&long long v34 = *(void *)a1;
    *((void *)&v34 + 1) = v4;
    *(void *)&long long v35 = v6;
    uint64_t v7 = v2;
    uint64_t v8 = URL.absoluteString.getter();
    unint64_t v10 = v9;

LABEL_7:
    swift_release();
    goto LABEL_8;
  }
  long long v11 = v2;
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v13 = objc_msgSend(v5, sel_relativeString);
    uint64_t v8 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v10 = v14;

    goto LABEL_7;
  }
  if (!v4)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(v4 + 16);
  unint64_t v10 = *(void *)(v4 + 24);
  swift_bridgeObjectRetain();
  swift_release();

LABEL_8:
  swift_release();
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v8, v10, 1, (uint64_t)v33);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v32, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)&v34, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v34) == 1)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for _NSSwiftURLComponents();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    long long v28 = v40;
    long long v29 = v41;
    v30[0] = v42[0];
    *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)((char *)v42 + 10);
    long long v24 = v36;
    long long v25 = v37;
    long long v26 = v38;
    long long v27 = v39;
    long long v22 = v34;
    long long v23 = v35;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 172) = 0;
    long long v17 = v29;
    *(_OWORD *)(v16 + 112) = v28;
    *(_OWORD *)(v16 + 128) = v17;
    *(_OWORD *)(v16 + 144) = v30[0];
    *(_OWORD *)(v16 + 154) = *(_OWORD *)((char *)v30 + 10);
    long long v18 = v25;
    *(_OWORD *)(v16 + 48) = v24;
    *(_OWORD *)(v16 + 64) = v18;
    long long v19 = v27;
    *(_OWORD *)(v16 + 80) = v26;
    *(_OWORD *)(v16 + 96) = v19;
    long long v20 = v23;
    *(_OWORD *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 32) = v20;
    *(void *)&v3[OBJC_IVAR____NSSwiftURLComponents_lock] = v16;
    outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v31, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v31);

    v21.receiver = v3;
    v21.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
    id v15 = objc_msgSendSuper2(&v21, sel_init);
    outlined release of URLComponents?(v33);
  }
  return (uint64_t)v15;
}

void _NSSwiftURLComponents.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)&v52 + 1))
  {
    type metadata accessor for _NSSwiftURLComponents();
    if (swift_dynamicCast())
    {
      long long v3 = (char *)v42;
      uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
      unint64_t v5 = v4 + 4;
      uint64_t v6 = v4 + 43;
      os_unfair_lock_lock(v4 + 43);
      closure #1 in _NSSwiftURLComponents.components.getter(v5, &v51);
      os_unfair_lock_unlock(v6);
      long long v48 = v57;
      long long v49 = v58;
      v50[0] = v59[0];
      *(_OWORD *)((char *)v50 + 10) = *(_OWORD *)((char *)v59 + 10);
      long long v44 = v53;
      long long v45 = v54;
      long long v46 = v55;
      long long v47 = v56;
      long long v42 = v51;
      long long v43 = v52;
      v40[6] = v57;
      v40[7] = v58;
      v41[0] = v59[0];
      *(_OWORD *)((char *)v41 + 10) = *(_OWORD *)((char *)v59 + 10);
      v40[2] = v53;
      v40[3] = v54;
      v40[4] = v55;
      v40[5] = v56;
      v40[0] = v51;
      v40[1] = v52;
      uint64_t v7 = *(os_unfair_lock_s **)&v3[OBJC_IVAR____NSSwiftURLComponents_lock];
      uint64_t v8 = v7 + 4;
      unint64_t v9 = v7 + 43;
      os_unfair_lock_lock(v7 + 43);
      closure #1 in _NSSwiftURLComponents.components.getter(v8, &v37);
      os_unfair_lock_unlock(v9);
      long long v33 = v39[0];
      long long v34 = v39[1];
      v35[0] = v39[2];
      *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)&v39[2] + 10);
      long long v29 = *(_OWORD *)&v38[16];
      long long v30 = *(_OWORD *)&v38[32];
      long long v31 = *(_OWORD *)&v38[48];
      long long v32 = *(_OWORD *)&v38[64];
      long long v27 = v37;
      long long v28 = *(_OWORD *)v38;
      long long v24 = v39[0];
      long long v25 = v39[1];
      v26[0] = v39[2];
      *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)&v39[2] + 10);
      long long v20 = *(_OWORD *)&v38[16];
      long long v21 = *(_OWORD *)&v38[32];
      long long v22 = *(_OWORD *)&v38[48];
      long long v23 = *(_OWORD *)&v38[64];
      long long v18 = v37;
      long long v19 = *(_OWORD *)v38;
      specialized static URLComponents.== infix(_:_:)(v40, &v18);

      outlined release of URLComponents((uint64_t)&v27);
      outlined release of URLComponents((uint64_t)&v42);
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v51);
  }
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)&v52 + 1))
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSURLComponents);
    if (swift_dynamicCast())
    {
      unint64_t v10 = (void *)v42;
      long long v11 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
      uint64_t v12 = v11 + 4;
      id v13 = v11 + 43;
      os_unfair_lock_lock(v11 + 43);
      closure #1 in _NSSwiftURLComponents.components.getter(v12, &v51);
      os_unfair_lock_unlock(v13);
      long long v33 = v57;
      long long v34 = v58;
      v35[0] = v59[0];
      *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v59 + 10);
      long long v29 = v53;
      long long v30 = v54;
      long long v31 = v55;
      long long v32 = v56;
      long long v27 = v51;
      long long v28 = v52;
      long long v24 = v57;
      long long v25 = v58;
      v26[0] = v59[0];
      *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v59 + 10);
      long long v20 = v53;
      long long v21 = v54;
      long long v22 = v55;
      long long v23 = v56;
      long long v18 = v51;
      long long v19 = v52;
      char v36 = 1;
      long long v37 = 0uLL;
      v38[0] = 0;
      memset(&v38[8], 0, 72);
      LOBYTE(v39[0]) = 1;
      memset((char *)v39 + 8, 0, 50);
      destructiveProjectEnumData for PredicateCodableError(&v37, v14);
      outlined init with take of LocalePreferences?((uint64_t)&v37, (uint64_t)v16, &demangling cache variable for type metadata for URLComponents?);
      id v15 = v10;
      static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)((unint64_t)v15, (uint64_t)v16);
      outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v40, &demangling cache variable for type metadata for URLComponents?);
      outlined init with take of LocalePreferences?((uint64_t)v40, (uint64_t)&v42, &demangling cache variable for type metadata for URLComponents?);
      if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v42) == 1)
      {
        __break(1u);
        os_unfair_lock_unlock(v15);
        __break(1u);
      }
      else
      {

        v16[6] = v48;
        v16[7] = v49;
        v17[0] = v50[0];
        *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)v50 + 10);
        v16[2] = v44;
        v16[3] = v45;
        v16[4] = v46;
        v16[5] = v47;
        v16[0] = v42;
        v16[1] = v43;
        specialized static URLComponents.== infix(_:_:)(&v18, v16);

        outlined release of URLComponents?((uint64_t *)v40);
        outlined release of URLComponents((uint64_t)&v27);
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v51);
  }
}

id _NSSwiftURLComponents.copy(with:)@<X0>(void *a1@<X8>)
{
  long long v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
  uint64_t v4 = v3 + 4;
  unint64_t v5 = v3 + 43;
  os_unfair_lock_lock(v3 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v4, v16);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 172) = 0;
  long long v9 = v16[7];
  long long v10 = v17[0];
  *(_OWORD *)(v8 + 112) = v16[6];
  *(_OWORD *)(v8 + 128) = v9;
  *(_OWORD *)(v8 + 144) = v10;
  *(_OWORD *)(v8 + 154) = *(_OWORD *)((char *)v17 + 10);
  long long v11 = v16[3];
  *(_OWORD *)(v8 + 48) = v16[2];
  *(_OWORD *)(v8 + 64) = v11;
  long long v12 = v16[5];
  *(_OWORD *)(v8 + 80) = v16[4];
  *(_OWORD *)(v8 + 96) = v12;
  long long v13 = v16[1];
  *(_OWORD *)(v8 + 16) = v16[0];
  *(_OWORD *)(v8 + 32) = v13;
  *(void *)&v7[OBJC_IVAR____NSSwiftURLComponents_lock] = v8;
  v15.receiver = v7;
  v15.super_class = v6;
  id result = objc_msgSendSuper2(&v15, sel_init);
  a1[3] = v6;
  *a1 = result;
  return result;
}

void _NSSwiftURLComponents.url(relativeTo:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v7 = *(os_unfair_lock_s **)&v2[OBJC_IVAR____NSSwiftURLComponents_lock];
    uint64_t v8 = v7 + 4;
    long long v9 = v7 + 43;
    os_unfair_lock_lock(v7 + 43);
    closure #1 in _NSSwiftURLComponents.components.getter(v8, v29);
    os_unfair_lock_unlock(v9);
    v27[6] = v34;
    v27[7] = v35;
    v28[0] = v36[0];
    *(_OWORD *)((char *)v28 + 10) = *(_OWORD *)((char *)v36 + 10);
    v27[2] = v30;
    v27[3] = v31;
    v27[4] = v32;
    v27[5] = v33;
    v27[0] = v29[0];
    v27[1] = v29[1];
    long long v23 = v33;
    long long v24 = v34;
    long long v25 = v35;
    v26[0] = v36[0];
    *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v36 + 10);
    long long v20 = v30;
    long long v21 = v31;
    long long v22 = v32;
    long long v18 = v29[0];
    long long v19 = v29[1];
    v17[0] = v4;
    v17[1] = v5;
    _OWORD v17[2] = v6;
    URLComponents.url(relativeTo:)((uint64_t)v17, (uint64_t *)a2);
    outlined release of URLComponents((uint64_t)v27);
  }
  else
  {
    long long v10 = (__CFString *)objc_msgSend(v2, sel_string);
    if (v10)
    {
      long long v11 = v10;
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (v4) {
        CFURLRef v13 = v4;
      }
      else {
        CFURLRef v13 = 0;
      }
      CFURLRef v14 = CFURLCreateWithString(v12, v11, v13);

      if (v14)
      {
        URL.init(reference:)(v14, v29);

        uint64_t v15 = *(void *)&v29[0];
        long long v16 = *(_OWORD *)((char *)v29 + 8);
      }
      else
      {
        uint64_t v15 = 0;
        long long v16 = 0uLL;
      }
      *(void *)a2 = v15;
      *(_OWORD *)(a2 + 8) = v16;
    }
    else
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
  }
}

uint64_t closure #1 in _NSSwiftURLComponents.password.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 11) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    long long v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    CFAllocatorRef v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      CFURLRef v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 2u, 0);
    }
    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 2);
    }
    uint64_t v9 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1F4188790](v9);
    void v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    long long v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a2, a3);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v21;
  return result;
}

id _NSSwiftURLComponents._port.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  uint64_t v2 = v1 + 4;
  long long v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, &v26);
  os_unfair_lock_unlock(v3);
  long long v23 = v32;
  long long v24 = v33;
  v25[0] = v34[0];
  *(_OWORD *)((char *)v25 + 10) = *(_OWORD *)((char *)v34 + 10);
  long long v19 = v28;
  long long v20 = v29;
  long long v21 = v30;
  long long v22 = v31;
  long long v17 = v26;
  long long v18 = v27;
  long long v14 = v32;
  long long v15 = v33;
  *(_OWORD *)char v16 = v34[0];
  *(_OWORD *)&v16[10] = *(_OWORD *)((char *)v34 + 10);
  long long v10 = v28;
  long long v11 = v29;
  long long v12 = v30;
  long long v13 = v31;
  long long v8 = v26;
  long long v9 = v27;
  uint64_t v4 = URLComponents.port.getter();
  LOBYTE(v2) = v5;
  outlined release of URLComponents((uint64_t)&v17);
  if (v2) {
    return 0;
  }
  id v6 = objc_allocWithZone((Class)NSNumber);
  return objc_msgSend(v6, sel_initWithInteger_, v4, v8, v9, v10, v11, v12, v13, v14, v15, *(void *)v16, *(void *)&v16[8], *(void *)&v16[16], *(void *)&v16[24], v17, v18, v19, v20,
           v21,
           v22,
           v23,
           v24,
           v25[0],
           *(void *)&v25[1],
           *((void *)&v25[1] + 1));
}

uint64_t closure #1 in _NSSwiftURLComponents._setPort(_:)(uint64_t a1, id a2)
{
  if (a2)
  {
    uint64_t result = (uint64_t)objc_msgSend(a2, sel_integerValue);
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 13) = 0;
    if (result < 0)
    {
      lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
      swift_allocError();
      *char v5 = 4;
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 13) = 0;
  }
  *(void *)(a1 + 88) = result;
  *(unsigned char *)(a1 + 96) = a2 == 0;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.query.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 15) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 120) = a2;
    *(void *)(a1 + 128) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    long long v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      long long v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 0x40u, 0);
    }
    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 64);
    }
    uint64_t v9 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      id v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      id v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      id v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1F4188790](v9);
    _OWORD v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    long long v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a2, a3);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v21;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 40) = a2;
    *(void *)(a1 + 48) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      long long v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 2u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      id v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      id v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      id v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *char v16 = 1;
  return swift_willThrow();
}

uint64_t _NSSwiftURLComponents._percentEncodedPassword.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  uint64_t v2 = v1 + 4;
  long long v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, v14);
  os_unfair_lock_unlock(v3);
  long long v11 = v17;
  long long v12 = v18;
  v13[0] = v19[0];
  *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v19 + 10);
  _OWORD v7[2] = v14[2];
  long long v8 = v14[3];
  long long v9 = v15;
  long long v10 = v16;
  v7[0] = v14[0];
  v7[1] = v14[1];
  if ((void)v15)
  {
    uint64_t v4 = *((void *)&v8 + 1);
  }
  else if ((BYTE11(v7[0]) & 1) != 0 && *(void *)&v7[0] && (*(unsigned char *)(*(void *)&v7[0] + 96) & 1) == 0)
  {
    uint64_t v6 = String.subscript.getter();
    uint64_t v4 = MEMORY[0x185301F50](v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)v7);
  return v4;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 11) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    long long v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      long long v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 2u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *long long v16 = 2;
  return swift_willThrow();
}

id @objc _NSSwiftURLComponents.user.getter(char *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))
{
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____NSSwiftURLComponents_lock];
  char v5 = (_OWORD *)(v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + 172);
  uint64_t v7 = a1;
  os_unfair_lock_lock(v6);
  closure #1 in _NSSwiftURLComponents.components.getter(v5, &v22);
  os_unfair_lock_unlock(v6);
  v20[6] = v28;
  v20[7] = v29;
  v21[0] = v30[0];
  *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)((char *)v30 + 10);
  v30[8] = v28;
  v30[9] = v29;
  v31[0] = v30[0];
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)((char *)v30 + 10);
  v30[4] = v24;
  v30[5] = v25;
  v30[6] = v26;
  v30[7] = v27;
  _OWORD v30[2] = v22;
  v30[3] = v23;
  a3(v8, v9, v10, v11, v12, v13, v14, v15, v22, *((void *)&v22 + 1), v23, *((void *)&v23 + 1), v24, *((void *)&v24 + 1), v25, *((void *)&v25 + 1), v26, *((void *)&v26 + 1), v27,
    *((void *)&v27 + 1));
  uint64_t v17 = v16;
  outlined release of URLComponents((uint64_t)v20);

  if (v17)
  {
    uint64_t v18 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

uint64_t closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 152) = 0;
  if (!a3)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = a2;
    *(void *)(a1 + 80) = 0;
    return result;
  }
  unint64_t v6 = specialized Collection.first.getter(a2, a3);
  if ((v6 & 0x1FF) != 0x5B) {
    goto LABEL_23;
  }
  if ((a3 & 0x1000000000000000) == 0)
  {
    uint64_t v7 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7)
    {
      __break(1u);
      goto LABEL_35;
    }
    unint64_t v6 = (v7 << 16) - 65532;
    LOBYTE(v8) = 1;
LABEL_8:
    if ((v6 & 0xC) != 4 << v8)
    {
LABEL_9:
      unint64_t v9 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000) == 0) {
        unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v10 = v6 >> 16;
      if (v6 >> 16 >= v9)
      {
        __break(1u);
        goto LABEL_37;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        char v12 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((a3 & 0x2000000000000000) != 0)
      {
        unint64_t v28 = a2;
        uint64_t v29 = a3 & 0xFFFFFFFFFFFFFFLL;
        char v12 = *((unsigned char *)&v28 + v10);
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0) {
          uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t v11 = _StringObject.sharedUTF8.getter();
        }
        char v12 = *(unsigned char *)(v11 + v10);
      }
      if (v12 == 93)
      {
        swift_bridgeObjectRetain();
        char v14 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a2, a3);
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
        {
LABEL_22:
          lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
          swift_allocError();
          *uint64_t v15 = 3;
          return swift_willThrow();
        }
        goto LABEL_29;
      }
LABEL_23:
      if ((a3 & 0x1000000000000000) != 0)
      {
        unint64_t v28 = a2;
        uint64_t v29 = a3;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain_n();
        StringProtocol._ephemeralString.getter();
        unint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          unint64_t v28 = a2;
          uint64_t v29 = a3;
          StringProtocol._ephemeralString.getter();
          long long v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 4u, 1);
        }
        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 4u, 1);
        }
        char v26 = v25;
        swift_bridgeObjectRelease_n();
        if ((v26 & 1) == 0) {
          goto LABEL_22;
        }
LABEL_29:
        swift_bridgeObjectRetain();
        uint64_t v18 = swift_bridgeObjectRelease();
        *(void *)(a1 + 72) = a2;
        *(void *)(a1 + 80) = a3;
        LOBYTE(v28) = 37;
        MEMORY[0x1F4188790](v18);
        v27[2] = &v28;
        swift_bridgeObjectRetain();
        char v19 = specialized Sequence.contains(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v27, a2, a3);
        uint64_t result = swift_bridgeObjectRelease();
        *(unsigned char *)(a1 + 152) = v19 & 1;
        return result;
      }
      if ((a3 & 0x2000000000000000) != 0)
      {
        uint64_t v17 = HIBYTE(a3) & 0xF;
        unint64_t v28 = a2;
        uint64_t v29 = a3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v16 = (char *)&v28;
        goto LABEL_28;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v16 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
        goto LABEL_28;
      }
LABEL_37:
      uint64_t v16 = (char *)_StringObject.sharedUTF8.getter();
LABEL_28:
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v16, v17, 4u, 1)) {
        goto LABEL_22;
      }
      goto LABEL_29;
    }
LABEL_35:
    unint64_t v6 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a2, a3);
    goto LABEL_9;
  }
  uint64_t result = String.UTF8View._foreignCount()();
  if (!__OFSUB__(result, 1))
  {
    uint64_t v8 = (a2 >> 59) & 1;
    unint64_t v6 = MEMORY[0x185302230](15, result - 1, a2, a3);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents._percentEncodedPath.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  uint64_t v2 = v1 + 4;
  long long v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, v11);
  os_unfair_lock_unlock(v3);
  long long v8 = v11[6];
  long long v9 = v12;
  v10[0] = v13[0];
  *(_OWORD *)((char *)v10 + 10) = *(_OWORD *)((char *)v13 + 10);
  _OWORD v7[2] = v11[2];
  _OWORD v7[3] = v11[3];
  v7[4] = v11[4];
  v7[5] = v11[5];
  v7[0] = v11[0];
  v7[1] = v11[1];
  if ((void)v12)
  {
    uint64_t v4 = *((void *)&v8 + 1);
  }
  else if ((BYTE14(v7[0]) & 1) != 0 && *(void *)&v7[0])
  {
    if (*(unsigned char *)(*(void *)&v7[0] + 168)) {
      uint64_t v5 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v5 = String.subscript.getter();
    }
    uint64_t v4 = MEMORY[0x185301F50](v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)v7);
  return v4;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  if (a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = 0xE000000000000000;
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  if ((v5 & 0x1000000000000000) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    unint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents, v4, v5);
    id v12 = v10;
    if (v11)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length, v4, v5);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 0x10u, 1);
    }
    else
    {
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v5, 0x10u, 1);
    }
    char v16 = v15;
    swift_bridgeObjectRelease_n();
    if (v16) {
      goto LABEL_13;
    }
  }
  else
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(v5) & 0xF;
      v18[0] = v4;
      v18[1] = v5 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)v18;
    }
    else if ((v4 & 0x1000000000000000) != 0)
    {
      unint64_t v6 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x10u, 1);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_13:
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = v4;
      *(void *)(a1 + 112) = v5;
      return result;
    }
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *uint64_t v17 = 5;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t _NSSwiftURLComponents._percentEncodedQuery.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  uint64_t v2 = v1 + 4;
  long long v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, v10);
  os_unfair_lock_unlock(v3);
  _OWORD v7[6] = v10[6];
  long long v8 = v10[7];
  v9[0] = v11[0];
  *(_OWORD *)((char *)v9 + 10) = *(_OWORD *)((char *)v11 + 10);
  _OWORD v7[2] = v10[2];
  _OWORD v7[3] = v10[3];
  v7[4] = v10[4];
  v7[5] = v10[5];
  v7[0] = v10[0];
  v7[1] = v10[1];
  if (*(void *)&v11[0])
  {
    uint64_t v4 = *((void *)&v8 + 1);
  }
  else if ((HIBYTE(v7[0]) & 1) != 0 && *(void *)&v7[0] && (*(unsigned char *)(*(void *)&v7[0] + 192) & 1) == 0)
  {
    uint64_t v6 = String.subscript.getter();
    uint64_t v4 = MEMORY[0x185301F50](v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)v7);
  return v4;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 15) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 120) = a2;
    *(void *)(a1 + 128) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    long long v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      id v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 0x40u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *char v16 = 6;
  return swift_willThrow();
}

uint64_t _NSSwiftURLComponents._percentEncodedFragment.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  uint64_t v2 = v1 + 4;
  long long v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, v16);
  os_unfair_lock_unlock(v3);
  long long v13 = v16[6];
  long long v14 = v16[7];
  *(_OWORD *)char v15 = v17[0];
  *(_OWORD *)&v15[10] = *(_OWORD *)((char *)v17 + 10);
  long long v9 = v16[2];
  long long v10 = v16[3];
  long long v11 = v16[4];
  long long v12 = v16[5];
  long long v7 = v16[0];
  long long v8 = v16[1];
  if ((unint64_t)(*(_OWORD *)((char *)v17 + 10) >> 48))
  {
    uint64_t v4 = *(void *)&v15[8];
  }
  else if ((v8 & 1) != 0 && (void)v7 && (*(unsigned char *)(v7 + 216) & 1) == 0)
  {
    uint64_t v6 = String.subscript.getter();
    uint64_t v4 = MEMORY[0x185301F50](v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v7);
  return v4;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 136) = a2;
    *(void *)(a1 + 144) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    long long v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      long long v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 0x40u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *char v16 = 8;
  return swift_willThrow();
}

void _NSSwiftURLComponents.rangeOfScheme.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  long long v3 = v2 + 4;
  uint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  _OWORD v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  _OWORD v25[2] = v17;
  void v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      unint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 40);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 48);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    unint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v5 = *(os_unfair_lock_s **)(v9 + 40);
    char v6 = *(unsigned char *)(v9 + 48);
    swift_release();
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    id v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

void _NSSwiftURLComponents.rangeOfUser.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  long long v3 = v2 + 4;
  uint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  _OWORD v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  _OWORD v25[2] = v17;
  void v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      unint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 64);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 72);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    unint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v5 = *(os_unfair_lock_s **)(v9 + 64);
    char v6 = *(unsigned char *)(v9 + 72);
    swift_release();
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    id v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

void _NSSwiftURLComponents.rangeOfPassword.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  long long v3 = v2 + 4;
  uint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  _OWORD v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  _OWORD v25[2] = v17;
  void v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      unint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 88);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 96);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    unint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v5 = *(os_unfair_lock_s **)(v9 + 88);
    char v6 = *(unsigned char *)(v9 + 96);
    swift_release();
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    id v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

void _NSSwiftURLComponents.rangeOfHost.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  long long v3 = v2 + 4;
  uint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  _OWORD v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  _OWORD v25[2] = v17;
  void v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      unint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 112);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 120);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    unint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v5 = *(os_unfair_lock_s **)(v9 + 112);
    char v6 = *(unsigned char *)(v9 + 120);
    swift_release();
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    id v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

void _NSSwiftURLComponents.rangeOfPort.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  long long v3 = v2 + 4;
  uint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  _OWORD v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  _OWORD v25[2] = v17;
  void v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      unint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 136);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 144);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    unint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v5 = *(os_unfair_lock_s **)(v9 + 136);
    char v6 = *(unsigned char *)(v9 + 144);
    swift_release();
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    id v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

void _NSSwiftURLComponents.rangeOfFragment.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  long long v3 = v2 + 4;
  uint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  _OWORD v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  _OWORD v25[2] = v17;
  void v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      unint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 208);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 216);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    unint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v5 = *(os_unfair_lock_s **)(v9 + 208);
    char v6 = *(unsigned char *)(v9 + 216);
    swift_release();
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    id v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

id _NSSwiftURLComponents.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _NSSwiftURLQueryItem.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v29)
  {
    outlined destroy of Any?((uint64_t)v28);
LABEL_16:
    outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v29)
    {
      type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLQueryItem);
      if (swift_dynamicCast())
      {
        id v13 = *(id *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
        uint64_t v14 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
        id v16 = *(id *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
        uint64_t v15 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
        id v17 = objc_msgSend(v27, sel_name);
        id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v20 = v19;

        id v21 = objc_msgSend(v27, sel_value);
        if (v21)
        {
          long long v22 = v21;
          id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v25 = v24;

          if (v13 != v18)
          {
LABEL_27:
            char v11 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
LABEL_35:
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              return v11 & 1;
            }
LABEL_28:
            char v11 = (v15 | v25) == 0;
            if (v15 && v25)
            {
              if (v16 == v23 && v15 == v25) {
                char v11 = 1;
              }
              else {
                char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              }
            }
            goto LABEL_35;
          }
        }
        else
        {
          id v23 = 0;
          uint64_t v25 = 0;
          if (v13 != v18) {
            goto LABEL_27;
          }
        }
        if (v14 == v20) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v28);
    }
LABEL_23:
    char v11 = 0;
    return v11 & 1;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v3 = v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v9 = *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16];
  uint64_t v8 = *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24];
  BOOL v10 = v4 == *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem]
     && v5 == *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8];
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_22;
  }
  char v11 = v8 == 0;
  if (!v6)
  {

    return v11 & 1;
  }
  if (!v8)
  {
LABEL_22:

    goto LABEL_23;
  }
  if (v7 == v9 && v6 == v8)
  {

    char v11 = 1;
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v11 & 1;
}

uint64_t @objc _NSSwiftURLComponents.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

void _NSSwiftURLQueryItem.copy(with:)(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
  uint64_t v9 = (char *)objc_allocWithZone(ObjectType);
  BOOL v10 = &v9[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(void *)BOOL v10 = v6;
  *((void *)v10 + 1) = v5;
  *((void *)v10 + 2) = v8;
  *((void *)v10 + 3) = v7;
  uint64_t v11 = String._bridgeToObjectiveCImpl()();
  if (v7) {
    uint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v12 = 0;
  }
  v14.receiver = v9;
  v14.super_class = ObjectType;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = objc_msgSendSuper2(&v14, sel_initWithName_value_, v11, v12);
  swift_unknownObjectRelease();

  a1[3] = ObjectType;
  *a1 = v13;
}

uint64_t @objc _NSSwiftURLComponents.copy(with:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr))
{
  id v5 = a1;
  a4(v8);

  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

Swift::Int _NSSwiftURLQueryItem.hash.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t _NSSwiftURLQueryItem.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = v1;
  if (objc_msgSend(a1, sel_allowsKeyedCoding))
  {
    id v5 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x656D616E2E534ELL, 0xE700000000000000);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v9 = v8;

      BOOL v10 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x65756C61762E534ELL, 0xE800000000000000);
      if (v10)
      {
        uint64_t v11 = v10;
        id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v14 = v13;
      }
      else
      {
        id v12 = 0;
        uint64_t v14 = 0;
      }
      id v52 = objc_msgSend(a1, sel_error);
      if (!v52)
      {
        long long v54 = &v4[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
        *(void *)long long v54 = v7;
        *((void *)v54 + 1) = v9;
        *((void *)v54 + 2) = v12;
        *((void *)v54 + 3) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();

        uint64_t v55 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v14)
        {
          long long v56 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v56 = 0;
        }
        v59.receiver = v4;
        v59.super_class = ObjectType;
        id v58 = objc_msgSendSuper2(&v59, sel_initWithName_value_, v55, v56);
        swift_unknownObjectRelease();

        return (unint64_t)v58;
      }
      long long v53 = v52;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_23:
      swift_deallocPartialClassInstance();
      return 0;
    }
    goto LABEL_11;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = 0xD000000000000026;
  *(void *)(inited + 56) = 0x80000001823ACDA0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  id v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v60, &demangling cache variable for type metadata for (String, Any));
  uint64_t v18 = v60;
  uint64_t v19 = v61;
  swift_retain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
  if (v21)
  {
    __break(1u);
    goto LABEL_28;
  }
  v17[(result >> 6) + 8] |= 1 << result;
  long long v22 = (uint64_t *)(v17[6] + 16 * result);
  uint64_t *v22 = v18;
  v22[1] = v19;
  unint64_t result = (unint64_t)outlined init with take of Any(v62, (_OWORD *)(v17[7] + 32 * result));
  uint64_t v23 = v17[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  _OWORD v17[2] = v25;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v26 = objc_allocWithZone((Class)NSError);
  uint64_t v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v29 = objc_msgSend(v28, sel_domain);
  id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v32 == v33) {
    goto LABEL_15;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v34)
  {
LABEL_22:
    objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
    swift_unknownObjectRelease();

    goto LABEL_23;
  }
  __break(1u);
LABEL_11:

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_1821037E0;
  *(void *)(v35 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v35 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v35 + 40) = v36;
  *(void *)(v35 + 48) = 0xD00000000000001DLL;
  *(void *)(v35 + 56) = 0x80000001823ACDD0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  long long v37 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(v35 + 32, (uint64_t)&v60, &demangling cache variable for type metadata for (String, Any));
  uint64_t v38 = v60;
  uint64_t v39 = v61;
  swift_retain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
  if (v40)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v37[(result >> 6) + 8] |= 1 << result;
  long long v41 = (uint64_t *)(v37[6] + 16 * result);
  uint64_t *v41 = v38;
  v41[1] = v39;
  unint64_t result = (unint64_t)outlined init with take of Any(v62, (_OWORD *)(v37[7] + 32 * result));
  uint64_t v42 = v37[2];
  BOOL v24 = __OFADD__(v42, 1);
  uint64_t v43 = v42 + 1;
  if (v24)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v37[2] = v43;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v44 = objc_allocWithZone((Class)NSError);
  uint64_t v45 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v46 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v47 = objc_msgSend(v46, sel_domain);
  id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  uint64_t v50 = v49;

  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v50 == v51)
  {
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)(uint64_t a1)
{
  return partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)(a1, (uint64_t (*)(void, void))URLComponents._URLComponents.setPercentEncodedHost(_:));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.query.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.query.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPort(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPort(_:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.password.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.password.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t specialized static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  LOBYTE(v75[0]) = 0;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)v75, a4, a3, &v76);
  uint64_t v33 = *((void *)&v76 + 1);
  uint64_t v34 = v76;
  LOBYTE(v64) = 1;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v64, a4, a3, v75);
  uint64_t v31 = v75[1];
  uint64_t v32 = v75[0];
  LOBYTE(v55) = 2;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v55, a4, a3, &v64);
  uint64_t v29 = *((void *)&v64 + 1);
  uint64_t v30 = v64;
  LOBYTE(v46) = 3;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v46, a4, a3, &v55);
  uint64_t v27 = *((void *)&v55 + 1);
  uint64_t v28 = v55;
  parseStrategyForPort #1 () in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)(a4, a3, (uint64_t)&v73);
  uint64_t v9 = v73;
  char v10 = v74;
  LOBYTE(v36) = 5;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v36, a4, a3, &v46);
  long long v11 = v46;
  LOBYTE(v85) = 6;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v85, a4, a3, &v36);
  long long v12 = v36;
  LOBYTE(v85) = 7;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v85, a4, a3, &v45);
  *(void *)&long long v85 = v34;
  *((void *)&v85 + 1) = v33;
  *(void *)&long long v86 = v32;
  *((void *)&v86 + 1) = v31;
  *(void *)&long long v87 = v30;
  *((void *)&v87 + 1) = v29;
  *(void *)&long long v88 = v28;
  *((void *)&v88 + 1) = v27;
  *(void *)&long long v89 = v9;
  BYTE8(v89) = v10;
  long long v90 = v11;
  long long v91 = v12;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v13 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  long long v92 = v45;
  if (v13)
  {
    do
    {
      String.subscript.getter();
      char v14 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
    }
    while ((v14 & 1) == 0 && 4 * v13 != (unint64_t)String.index(after:)() >> 14);
  }
  *(void *)&long long v76 = String.subscript.getter();
  *((void *)&v76 + 1) = v15;
  *(void *)&long long v77 = v16;
  *((void *)&v77 + 1) = v17;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v18 = String.init<A>(_:)();
  unint64_t v20 = v19;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v18, v20, 1, (uint64_t)v75);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)&v76, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v76) == 1)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    outlined release of URL.ParseStrategy((uint64_t *)&v85);
    *a5 = 0;
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long long v61 = v82;
  long long v62 = v83;
  v63[0] = v84[0];
  *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v84 + 10);
  long long v57 = v78;
  long long v58 = v79;
  long long v59 = v80;
  long long v60 = v81;
  long long v55 = v76;
  long long v56 = v77;
  swift_bridgeObjectRelease();
  long long v52 = v61;
  long long v53 = v62;
  v54[0] = v63[0];
  *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)((char *)v63 + 10);
  long long v48 = v57;
  long long v49 = v58;
  long long v50 = v59;
  long long v51 = v60;
  long long v46 = v55;
  long long v47 = v56;
  long long v70 = v61;
  long long v71 = v62;
  v72[0] = v63[0];
  *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)((char *)v63 + 10);
  long long v66 = v57;
  long long v67 = v58;
  long long v68 = v59;
  long long v69 = v60;
  long long v64 = v55;
  long long v65 = v56;
  long long v40 = v89;
  long long v41 = v90;
  long long v42 = v91;
  long long v43 = v92;
  long long v36 = v85;
  long long v37 = v86;
  long long v38 = v87;
  long long v39 = v88;
  if ((URL.ParseStrategy.validate(_:)(&v46) & 1) == 0)
  {
LABEL_15:
    outlined release of URLComponents?(v75);
    goto LABEL_16;
  }
  long long v50 = v89;
  long long v51 = v90;
  long long v52 = v91;
  long long v53 = v92;
  long long v46 = v85;
  long long v47 = v86;
  long long v48 = v87;
  long long v49 = v88;
  URL.ParseStrategy.fillDefaultValues(for:)(&v64);
  long long v52 = v70;
  long long v53 = v71;
  v54[0] = v72[0];
  *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)((char *)v72 + 10);
  long long v48 = v66;
  long long v49 = v67;
  long long v50 = v68;
  long long v51 = v69;
  long long v46 = v64;
  long long v47 = v65;
  long long v42 = v70;
  long long v43 = v71;
  v44[0] = v72[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v72 + 10);
  long long v38 = v66;
  long long v39 = v67;
  long long v40 = v68;
  long long v41 = v69;
  long long v36 = v64;
  long long v37 = v65;
  URLComponents.url.getter((uint64_t *)&v45);
  outlined release of URLComponents((uint64_t)&v46);
  outlined release of URL.ParseStrategy((uint64_t *)&v85);
  char v21 = (void *)v45;
  if ((void)v45) {
    id v22 = (id)v45;
  }
  *a5 = v21;
  *(void *)&long long v36 = a1;
  *((void *)&v36 + 1) = a2;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v23 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v25 = v24;
  outlined consume of URL?(v21);
  if (__OFSUB__(v25, v23))
  {
    __break(1u);
    goto LABEL_15;
  }
  return v23;
}

uint64_t *outlined release of URL.ParseStrategy(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[10];
  unint64_t v9 = a1[11];
  uint64_t v10 = a1[12];
  uint64_t v14 = a1[14];
  unint64_t v12 = a1[13];
  unint64_t v13 = a1[15];
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(*a1, a1[1]);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v12);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14, v13);
  return a1;
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - v7;
  dispatch thunk of static FloatingPoint.infinity.getter();
  dispatch thunk of static SignedNumeric.- prefix(_:)();
  unint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, AssociatedTypeWitness);
  char v10 = dispatch thunk of static Comparable.> infix(_:_:)();
  v9(v8, AssociatedTypeWitness);
  if (v10)
  {
    dispatch thunk of FloatingPoint.nextDown.getter();
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v11, 1, AssociatedTypeWitness);
}

uint64_t DiscreteFormatStyle<>.input(after:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v5 = (char *)&v9 - v4;
  dispatch thunk of static FloatingPoint.infinity.getter();
  char v6 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if (v6)
  {
    dispatch thunk of FloatingPoint.nextUp.getter();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v7, 1, AssociatedTypeWitness);
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return DiscreteFormatStyle<>.input(before:)(a1, a2, MEMORY[0x1E4FBBC90], MEMORY[0x1E4FBAFC0], MEMORY[0x1E4FBBCD8], a3);
}

uint64_t DiscreteFormatStyle<>.input(after:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return DiscreteFormatStyle<>.input(before:)(a1, a2, MEMORY[0x1E4FBBC88], MEMORY[0x1E4FBAFC8], MEMORY[0x1E4FBBCD0], a3);
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, void (*a3)(double)@<X4>, uint64_t (*a4)(void (*)(double), char *, uint64_t, uint64_t)@<X5>, void (*a5)(void (*)(double), char *, uint64_t, void)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a6;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v22 = *(void *)(v7 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v21 - v12;
  v24(v11);
  uint64_t v14 = *(void *)(*(void *)(v7 + 32) + 8);
  uint64_t v24 = a1;
  char v15 = v25(a1, v13, v9, v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v13, v9);
  if (v15)
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v17 = v26;
    v23(v24, v13, v9, *(void *)(v22 + 8));
    v16(v13, v9);
    uint64_t v18 = 0;
    uint64_t v19 = v17;
  }
  else
  {
    uint64_t v18 = 1;
    uint64_t v19 = v26;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v19, v18, 1, v9);
}

double *DiscreteFormatStyle<>.input(before:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2 = *result;
  double v3 = 0.0;
  if (*result > -6.31140768e10)
  {
    double v4 = 0.0 - v2;
    if (0.0 - v2 < INFINITY) {
      *(void *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
    }
    double v3 = -v4;
  }
  *(double *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v2 <= -6.31140768e10;
  return result;
}

double Date.nextDown.getter@<D0>(double *a1@<X8>)
{
  double v2 = 0.0 - *v1;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  double result = -v2;
  *a1 = result;
  return result;
}

double *DiscreteFormatStyle<>.input(after:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2 = *result;
  double v3 = 0.0;
  if (*result < 6.3113904e10)
  {
    double v3 = v2 + 0.0;
    if (v2 + 0.0 < INFINITY) {
      *(void *)&v3 += (*(uint64_t *)&v3 >> 63) | 1;
    }
  }
  *(double *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v2 >= 6.3113904e10;
  return result;
}

void Date.nextUp.getter(double *a1@<X8>)
{
  double v2 = *v1 + 0.0;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  *a1 = v2;
}

uint64_t DiscreteFormatStyle<>.input(before:)(uint64_t a1, uint64_t a2)
{
  char v4 = static Duration.< infix(_:_:)();
  uint64_t result = 0;
  if (v4)
  {
    uint64_t v6 = Duration.init(secondsComponent:attosecondsComponent:)();
    return MEMORY[0x185304360](a1, a2, v6, v7);
  }
  return result;
}

uint64_t Duration.nextDown.getter(uint64_t a1, uint64_t a2)
{
  return Duration.nextDown.getter(a1, a2, MEMORY[0x1E4FBC6F8]);
}

uint64_t DiscreteFormatStyle<>.input(after:)(uint64_t a1, uint64_t a2)
{
  if ((static Duration.< infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = Duration.init(secondsComponent:attosecondsComponent:)();
  return MEMORY[0x185304350](a1, a2, v4, v5);
}

uint64_t Duration.nextUp.getter(uint64_t a1, uint64_t a2)
{
  return Duration.nextDown.getter(a1, a2, MEMORY[0x1E4FBC6F0]);
}

uint64_t Duration.nextDown.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = Duration.init(secondsComponent:attosecondsComponent:)();

  return a3(a1, a2, v6, v5);
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = static Duration.< infix(_:_:)();
  uint64_t result = 0;
  uint64_t v7 = 0;
  if (v5)
  {
    uint64_t v8 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t result = MEMORY[0x185304360](v3, v4, v8, v9);
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = (v5 & 1) == 0;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = static Duration.< infix(_:_:)();
  if (v5)
  {
    uint64_t v6 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t result = MEMORY[0x185304350](v3, v4, v6, v7);
  }
  else
  {
    uint64_t result = 0;
    uint64_t v9 = 0;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = (v5 & 1) == 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter@<X0>(void *a1@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter(a1);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char *v6;

  double v2 = (char *)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
              + 48);
  *a1 = 0;
  uint64_t v3 = *MEMORY[0x1E4FBBE98];
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v2, v3, v4);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  uint64_t v6 = (char *)a1 + *(int *)(result + 20);
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  return result;
}

__n128 Duration.TimeFormatStyle.init(pattern:locale:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(unsigned char *)(a3 + *(int *)(v6 + 20)) = 0;
  outlined init with take of Duration.TimeFormatStyle.Pattern(a1, a3, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  __n128 result = *a2;
  *(__n128 *)(a3 + *(int *)(v6 + 24)) = *a2;
  return result;
}

uint64_t Duration.TimeFormatStyle.format(_:)(uint64_t a1, unint64_t a2)
{
  Duration.TimeFormatStyle.Attributed.format(_:)(a1, a2, (uint64_t *)&v55);
  double v2 = v55;
  long long v3 = v55[1];
  long long v4 = v55[3];
  v89[1] = v55[2];
  v89[2] = v4;
  v89[0] = v3;
  swift_retain();
  outlined retain of Locale((uint64_t)v89);
  uint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v89);
  long long v12 = v2[1];
  long long v13 = v2[3];
  v88[1] = v2[2];
  v88[2] = v13;
  v88[0] = v12;
  long long v14 = v2[1];
  v90[1] = v2[2];
  v90[2] = v13;
  v90[0] = v14;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v90, (uint64_t)v91);
  outlined retain of Locale((uint64_t)v91);
  uint64_t v15 = BigString.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v88);
  swift_release();
  uint64_t v79 = v5;
  uint64_t v80 = v7;
  uint64_t v81 = v9;
  uint64_t v82 = v11;
  uint64_t v83 = v15;
  uint64_t v84 = v17;
  uint64_t v85 = v19;
  uint64_t v86 = v21;
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v23 = v2[2];
    v87[0] = v2[1];
    v87[1] = v23;
    v87[2] = v2[3];
    swift_retain_n();
    outlined retain of Locale((uint64_t)v87);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v87);
    uint64_t v24 = BigSubstring.startIndex.getter();
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v31 = BigSubstring.endIndex.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    outlined release of Locale((uint64_t)v56);
    swift_release_n();
    uint64_t v70 = v24;
    uint64_t v71 = v26;
    uint64_t v72 = v28;
    uint64_t v73 = v30;
    uint64_t v74 = v31;
    uint64_t v75 = v33;
    uint64_t v76 = v35;
    uint64_t v77 = v37;
    v94[0] = v24;
    v94[1] = v26;
    v94[2] = v28;
    v94[3] = v30;
    v94[4] = v31;
    v94[5] = v33;
    v94[6] = v35;
    v94[7] = v37;
    v94[8] = v2;
    v94[9] = v24;
    v94[10] = v26;
    v94[11] = v28;
    v94[12] = v30;
    v94[13] = v31;
    v94[14] = v33;
    v94[15] = v35;
    v94[16] = v37;
    v94[17] = 0;
    long long v38 = v2[1];
    long long v39 = v2[3];
    v78[1] = v2[2];
    v78[2] = v39;
    v78[0] = v38;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v94);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v94);
    swift_retain();
    outlined retain of Locale((uint64_t)v78);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v78);
    uint64_t v40 = BigSubstring.startIndex.getter();
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v47 = BigSubstring.endIndex.getter();
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    outlined release of Locale((uint64_t)v57);
    swift_release_n();
    uint64_t v62 = v40;
    uint64_t v63 = v42;
    uint64_t v64 = v44;
    uint64_t v65 = v46;
    uint64_t v66 = v47;
    uint64_t v67 = v49;
    uint64_t v68 = v51;
    uint64_t v69 = v53;
    long long v54 = v2[2];
    long long v59 = v2[1];
    long long v60 = v54;
    long long v61 = v2[3];
    v92[1] = v54;
    v92[2] = v61;
    v92[0] = v59;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v92, (uint64_t)v93);
    outlined retain of Locale((uint64_t)v93);
    BigSubstring.init(_unchecked:in:)();
    swift_release_n();
    return MEMORY[0x185302040](v58);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.hash(into:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  long long v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (Swift::UInt *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v0, (uint64_t)v7, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v9 = *v7;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)v7 + *(int *)(v10 + 48), v1);
      Swift::UInt v11 = 1;
    }
    else
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)v7 + *(int *)(v12 + 48), v1);
      Swift::UInt v11 = 2;
    }
    Hasher._combine(_:)(v11);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v2 + 32))(v4, v7, v1);
    Swift::UInt v9 = 0;
  }
  Hasher._combine(_:)(v9);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys>);
  uint64_t v52 = *(void *)(v2 - 8);
  uint64_t v53 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v51 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys>);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v48 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys>);
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v59 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v47 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v46 = (char *)&v43 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v43 - v13;
  uint64_t v15 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.CodingKeys>);
  uint64_t v58 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  long long v54 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v60, (uint64_t)v17, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v30 = v59;
    uint64_t v31 = v57;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v14, v17, v57);
    char v61 = 0;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
    uint64_t v26 = v56;
    uint64_t v27 = v54;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    uint64_t v32 = v45;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v32);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v27, v26);
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
    uint64_t v22 = v59;
    long long v23 = v46;
    uint64_t v24 = v57;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v46, &v17[*(int *)(v21 + 48)], v57);
    char v64 = 1;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
    uint64_t v25 = v48;
    uint64_t v26 = v56;
    uint64_t v27 = v54;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v63 = 0;
    uint64_t v28 = v50;
    uint64_t v29 = v55;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v29)
    {
      char v62 = 1;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v28);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v27, v26);
  }
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
  uint64_t v35 = v59;
  uint64_t v36 = v47;
  uint64_t v37 = v57;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v47, &v17[*(int *)(v34 + 48)], v57);
  char v67 = 2;
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
  long long v38 = v51;
  uint64_t v39 = v56;
  uint64_t v40 = v54;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v66 = 0;
  uint64_t v41 = v53;
  uint64_t v42 = v55;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v42)
  {
    char v65 = 1;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  (*(void (**)(char *, uint64_t))(v52 + 8))(v38, v41);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v40, v39);
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys>);
  uint64_t v56 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v57 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys>);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v60 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys>);
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v59 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.CodingKeys>);
  uint64_t v58 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)((char *)&v46 - v14);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v46 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v22 = a1[3];
  char v62 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  long long v23 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23) {
    goto LABEL_7;
  }
  char v63 = v18;
  uint64_t v47 = v12;
  uint64_t v48 = v15;
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  uint64_t v49 = v21;
  uint64_t v26 = v61;
  uint64_t v27 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v27 + 16) != 1)
  {
    uint64_t v30 = v26;
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t *v33 = v10;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x1E4FBBA70], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v9, v30);
LABEL_7:
    uint64_t v40 = (uint64_t)v62;
    return __swift_destroy_boxed_opaque_existential_1(v40);
  }
  if (*(unsigned char *)(v27 + 32))
  {
    if (*(unsigned char *)(v27 + 32) == 1)
    {
      char v67 = 1;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v26;
      char v66 = 0;
      uint64_t v29 = v55;
      uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      uint64_t *v48 = v39;
      type metadata accessor for FloatingPointRoundingRule();
      char v65 = 1;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v25, v29);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v9, v28);
      uint64_t v40 = (uint64_t)v62;
      uint64_t v41 = (uint64_t)v48;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      char v70 = 2;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
      uint64_t v35 = v57;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v69 = 0;
      uint64_t v37 = v53;
      long long v38 = v35;
      uint64_t v42 = KeyedDecodingContainer.decode(_:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      uint64_t v43 = v47;
      *uint64_t v47 = v42;
      type metadata accessor for FloatingPointRoundingRule();
      char v68 = 1;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v44 = v58;
      uint64_t v41 = (uint64_t)v43;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v61);
      swift_storeEnumTagMultiPayload();
      uint64_t v40 = (uint64_t)v62;
    }
  }
  else
  {
    char v64 = 0;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    uint64_t v41 = (uint64_t)v63;
    uint64_t v36 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v24, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v9, v26);
    uint64_t v40 = (uint64_t)v62;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v45 = (uint64_t)v49;
  outlined init with take of Duration.TimeFormatStyle.Pattern(v41, (uint64_t)v49, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  outlined init with take of Duration.TimeFormatStyle.Pattern(v45, v50, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  return __swift_destroy_boxed_opaque_existential_1(v40);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x65536574756E696DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x756E694D72756F68;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Pattern.Fields.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return 0x636553646E756F72;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x636553646E756F72 && a2 == 0xEC00000073646E6FLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  if (*v0) {
    return 0xD000000000000016;
  }
  else {
    return 0xD000000000000017;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Pattern.Fields()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Pattern.Fields@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Pattern.Fields.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Pattern.Fields(void *a1)
{
  return Duration.TimeFormatStyle.Pattern.Fields.encode(to:)(a1);
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinute.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FBBE98];
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(a1, v2, v3);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  uint64_t v5 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a3, a2, v6);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  uint64_t v8 = a3 + *(int *)(result + 20);
  *(void *)uint64_t v8 = a1;
  *(unsigned char *)(v8 + 8) = 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)(a1, a2, a3, a4);
}

{
  char *v8;
  uint64_t v9;
  uint64_t result;
  char *v11;

  uint64_t v8 = (char *)a4
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
              + 48);
  *a4 = a2;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a3, v9);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  uint64_t v11 = (char *)a4 + *(int *)(result + 20);
  *(void *)uint64_t v11 = a1;
  v11[8] = 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond.getter@<X0>(void *a1@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter(a1);
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond(padMinuteToLength:fractionalSecondsLength:roundFractionalSeconds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)(a1, a2, a3, a4);
}

void Duration.TimeFormatStyle.Pattern.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (Swift::UInt *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1;
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
}

uint64_t static Duration.TimeFormatStyle.Pattern.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(unsigned char *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  char v8 = *(unsigned char *)(a2 + v4 + 8);
  if (v6)
  {
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*v5 != *v7) {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000016;
  }
  else {
    return 0x73646C656966;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Pattern.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.TimeFormatStyle.Pattern.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Duration.TimeFormatStyle.Pattern.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v6);
  char v8 = (Swift::UInt *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1;
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.Pattern.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v20 = (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.CodingKeys>);
  uint64_t v19 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1F4188790](v8 - 8);
  Swift::UInt v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v12 = &v10[*(int *)(v11 + 28)];
  *(void *)Swift::UInt v12 = 0;
  v12[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = v19;
  char v23 = 0;
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of Duration.TimeFormatStyle.Pattern(v20, (uint64_t)v10, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  char v22 = 1;
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v16 = v15;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v21);
  *(void *)Swift::UInt v12 = v14;
  v12[8] = v16 & 1;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v10, v18, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v10, type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (Swift::UInt *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v4, (uint64_t)v11, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v13 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v14 + 48), v5);
      Swift::UInt v15 = 1;
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v16 + 48), v5);
      Swift::UInt v15 = 2;
    }
    Hasher._combine(_:)(v15);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    Swift::UInt v13 = 0;
  }
  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v4 + *(int *)(a2 + 20);
  if (*(unsigned char *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (Swift::UInt *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v4, (uint64_t)v11, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v13 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v14 + 48), v5);
      Swift::UInt v15 = 1;
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v16 + 48), v5);
      Swift::UInt v15 = 2;
    }
    Hasher._combine(_:)(v15);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    Swift::UInt v13 = 0;
  }
  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v4 + *(int *)(a2 + 20);
  if (*(unsigned char *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Pattern@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Pattern.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Pattern(void *a1)
{
  return Duration.TimeFormatStyle.Pattern.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2))
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)(a1 + v6);
    char v8 = *(unsigned char *)(a1 + v6 + 8);
    uint64_t v9 = (void *)(a2 + v6);
    int v10 = *(unsigned __int8 *)(a2 + v6 + 8);
    if (v8)
    {
      if (v10) {
        return 1;
      }
    }
    else
    {
      if (*v7 != *v9) {
        LOBYTE(v10) = 1;
      }
      if ((v10 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t Duration.TimeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24));

  return swift_unknownObjectRetain();
}

__n128 key path setter for Duration.TimeFormatStyle.locale : Duration.TimeFormatStyle(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  __n128 v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v6;
  *(__n128 *)(a2 + v4) = v6;
  return result;
}

__n128 Duration.TimeFormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + v3) = *a1;
  return result;
}

uint64_t (*Duration.TimeFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + v3);
  swift_unknownObjectRetain();
  return Duration.TimeFormatStyle.locale.modify;
}

uint64_t Duration.TimeFormatStyle.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t Duration.TimeFormatStyle.pattern.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, a1, type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

uint64_t key path setter for Duration.TimeFormatStyle.pattern : Duration.TimeFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1F4188790](v4 - 8);
  __n128 v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(a1, (uint64_t)v6, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  return outlined assign with take of Duration.TimeFormatStyle.Pattern((uint64_t)v6, a2);
}

uint64_t Duration.TimeFormatStyle.pattern.setter(uint64_t a1)
{
  return outlined assign with take of Duration.TimeFormatStyle.Pattern(a1, v1);
}

void (*Duration.TimeFormatStyle.pattern.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) - 8) + 64);
  a1[1] = (uint64_t)malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = (uint64_t)v4;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)v4, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  return Duration.TimeFormatStyle.pattern.modify;
}

void Duration.TimeFormatStyle.pattern.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)a1[1];
  size_t v3 = (void *)a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(a1[2], (uint64_t)v2, type metadata accessor for Duration.TimeFormatStyle.Pattern);
    outlined assign with take of Duration.TimeFormatStyle.Pattern((uint64_t)v2, v4);
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v3, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  }
  else
  {
    outlined assign with take of Duration.TimeFormatStyle.Pattern(a1[2], v4);
  }
  free(v3);

  free(v2);
}

uint64_t Duration.TimeFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, a1, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t Duration.TimeFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v3;
  unint64_t v181 = a2;
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v183 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  long long v177 = (char *)&v170 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v182 = (char *)&v170 - v11;
  uint64_t v12 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (uint64_t *)((char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v170 - v19;
  uint64_t v21 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1F4188790](v21 - 8);
  char v23 = (char *)&v170 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v170 - v25;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v5, (uint64_t)&v170 - v25, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v26, (uint64_t)v20, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v28 = &v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                        + 48)];
      int v192 = 1;
      uint64_t v29 = 0x3A276D6D273A2768;
      unint64_t v30 = 0xEB00000000737327;
    }
    else
    {
      uint64_t v28 = &v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                        + 48)];
      int v192 = 2;
      uint64_t v29 = 0x7373273A276DLL;
      unint64_t v30 = 0xE600000000000000;
    }
    uint64_t v190 = v29;
    unint64_t v191 = v30;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v183 + 8);
  }
  else
  {
    int v192 = 0;
    uint64_t v190 = 0x6D6D273A2768;
    unint64_t v191 = 0xE600000000000000;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v183 + 8);
    uint64_t v28 = v20;
  }
  long long v180 = v31;
  v31(v28, v8);
  v193._uint64_t countAndFlagsBits = 0;
  v193._unint64_t object = 0;
  uint64_t v32 = outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v5, (uint64_t)v14, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  MEMORY[0x1F4188790](v32);
  closure #1 in Duration.TimeFormatStyle.Attributed.format(_:)((uint64_t)(&v170 - 32), 128, (uint64_t)v14, (uint64_t)&v192, 128, &v193, &v190);
  outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v14, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v5, (uint64_t)v23, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v23, (uint64_t)v17, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int v33 = swift_getEnumCaseMultiPayload();
  uint64_t v178 = a3;
  if (v33)
  {
    uint64_t v34 = a1;
    unint64_t v35 = v181;
    if (v33 == 1) {
      uint64_t v36 = &outlined read-only object #1 of Duration.TimeFormatStyle.Attributed.format(_:);
    }
    else {
      uint64_t v36 = &outlined read-only object #2 of Duration.TimeFormatStyle.Attributed.format(_:);
    }
    uint64_t v37 = *v17;
    uint64_t v17 = (uint64_t *)((char *)v17
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                             + 48));
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v36 = &outlined read-only object #0 of Duration.TimeFormatStyle.Attributed.format(_:);
    uint64_t v34 = a1;
    unint64_t v35 = v181;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(v183 + 32))(v182, v17, v8);
  unint64_t v38 = v36[2];
  unint64_t v184 = v38;
  uint64_t v179 = v5;
  if (v38)
  {
    unint64_t v39 = *((char *)v36 + v38 + 31);
    if (v39 <= 4)
    {
      static Duration.interval(fractionalSecondsLength:)(v37);
      unint64_t v185 = qword_1821A2580[v39];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v42 = static Duration.* infix<A>(_:_:)();
    }
    else
    {
      if ((v39 - 5) >= 3u)
      {
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        uint64_t v164 = (void *)swift_allocError();
        swift_willThrow();
        id v187 = v164;
        swift_bridgeObjectRetain_n();
        id v165 = v164;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_145;
        }
        unint64_t v185 = 0;
        unint64_t v186 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        v166._unint64_t object = (void *)0x80000001823A92C0;
        v166._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v166);
        _print_unlocked<A, B>(_:_:)();
        v167._uint64_t countAndFlagsBits = 39;
        v167._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v167);
        int v169 = 0;
        uint64_t v168 = 783;
LABEL_143:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_144:
        swift_bridgeObjectRetain_n();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_145:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        swift_unexpectedError();
        __break(1u);
        swift_willThrow();
        __break(1u);
        JUMPOUT(0x181CF96E4);
      }
      uint64_t v40 = 3 * (v39 - 5) + 3;
      uint64_t v41 = v40 ^ 0x7FFFFFFFFFFFFFFFLL;
      if ((v40 ^ 0x7FFFFFFFFFFFFFFFLL) >= v37) {
        uint64_t v41 = v37;
      }
      if (__OFADD__(v40, v41)) {
        goto LABEL_129;
      }
      uint64_t v42 = static Duration.interval(fractionalSecondsLength:)(v40 + v41);
    }
    uint64_t v46 = v42;
    uint64_t v47 = v43;
    static Duration.zero.getter();
    if (static Duration.== infix(_:_:)())
    {
LABEL_69:
      uint64_t v45 = (void *)Duration.factor(intoUnits:)((uint64_t)v36);
      unint64_t v44 = v45[2];
      uint64_t v129 = Duration.components.getter();
      Duration.components.getter();
      uint64_t v131 = v130;
      long double v132 = 3.0;
      double v4 = 604800.0;
      switch((int)v39)
      {
        case 0:
          goto LABEL_77;
        case 1:
          double v4 = 86400.0;
          goto LABEL_77;
        case 2:
          double v4 = 3600.0;
          goto LABEL_77;
        case 3:
          double v4 = 60.0;
          goto LABEL_77;
        case 4:
          double v4 = 1.0;
          goto LABEL_77;
        case 5:
          goto LABEL_76;
        case 6:
          long double v132 = 6.0;
          goto LABEL_76;
        case 7:
          long double v132 = 9.0;
LABEL_76:
          double v4 = pow(0.1, v132);
LABEL_77:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_126;
          }
          if (v44) {
            goto LABEL_79;
          }
          goto LABEL_127;
        default:
          goto LABEL_140;
      }
    }
    static Duration.zero.getter();
    char v48 = static Duration.< infix(_:_:)();
    unint64_t v173 = v39;
    if (v48)
    {
      uint64_t v49 = static Duration.zero.getter();
      uint64_t v46 = MEMORY[0x185304360](v49);
      uint64_t v47 = v50;
    }
    static Duration.zero.getter();
    uint64_t v51 = v34;
    unint64_t v52 = v35;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v53 = static Duration.zero.getter();
      uint64_t v51 = MEMORY[0x185304360](v53);
      unint64_t v52 = v54;
    }
    uint64_t v175 = v8;
    uint64_t v55 = Duration.components.getter();
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v56 = static Duration.zero.getter();
      MEMORY[0x185304360](v56);
    }
    uint64_t v174 = v46;
    uint64_t v57 = Duration.components.getter();
    unint64_t v59 = v58;
    if (v57)
    {
      if (!v58)
      {
        uint64_t v66 = v57;
        if (v55 == 0x8000000000000000 && v57 == -1) {
          goto LABEL_137;
        }
        uint64_t v67 = v55 / v57;
        uint64_t v176 = Duration.init(secondsComponent:attosecondsComponent:)();
        uint64_t v8 = v175;
        unint64_t v69 = v181;
        if ((unsigned __int128)(v66 * (__int128)v67) >> 64 != (v66 * v67) >> 63) {
          goto LABEL_130;
        }
        unint64_t v61 = v68;
        uint64_t v70 = Duration.init(secondsComponent:attosecondsComponent:)();
        uint64_t v72 = v71;
        goto LABEL_46;
      }
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v176 = static Duration.zero.getter();
        unint64_t v61 = v60;
        uint64_t v62 = static Duration.zero.getter();
      }
      else
      {
        static Duration./ infix(_:_:)();
        if ((~*(void *)&v73 & 0x7FF0000000000000) == 0) {
          goto LABEL_131;
        }
        if (v73 <= -1.0) {
          goto LABEL_132;
        }
        if (v73 >= 1.84467441e19) {
          goto LABEL_133;
        }
        unint64_t v74 = (unint64_t)v73;
        unint64_t v185 = (unint64_t)v73;
        lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        uint64_t v75 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x185304360](v51, v52, v75, v76);
        static Duration./ infix(_:_:)();
        if ((~*(void *)&v77 & 0x7FF0000000000000) == 0) {
          goto LABEL_134;
        }
        if (v77 <= -9.22337204e18) {
          goto LABEL_135;
        }
        if (v77 >= 9.22337204e18) {
          goto LABEL_136;
        }
        uint64_t v78 = (uint64_t)v77;
        uint64_t v172 = (uint64_t)v77;
        Duration.init(secondsComponent:attosecondsComponent:)();
        unint64_t v185 = v74;
        uint64_t v79 = static Duration.* infix<A>(_:_:)();
        unint64_t v171 = v74;
        uint64_t v80 = v79;
        uint64_t v176 = v81;
        Duration.init(secondsComponent:attosecondsComponent:)();
        unint64_t v185 = v78;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v82 = static Duration.* infix<A>(_:_:)();
        uint64_t v176 = MEMORY[0x185304350](v80, v176, v82, v83);
        unint64_t v85 = v84;
        unint64_t v185 = v171;
        uint64_t v86 = static Duration.* infix<A>(_:_:)();
        uint64_t v88 = v87;
        unint64_t v185 = v172;
        uint64_t v89 = static Duration.* infix<A>(_:_:)();
        uint64_t v90 = v86;
        unint64_t v61 = v85;
        uint64_t v62 = MEMORY[0x185304350](v90, v88, v89, v91);
      }
    }
    else
    {
      unint64_t v185 = v58;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v64 = static Duration./ infix<A>(_:_:)();
      unint64_t v61 = v65;
      unint64_t v185 = v59;
      uint64_t v176 = v64;
      uint64_t v62 = static Duration.* infix<A>(_:_:)();
    }
    uint64_t v70 = v62;
    uint64_t v72 = v63;
    uint64_t v8 = v175;
    unint64_t v69 = v181;
LABEL_46:
    static Duration.zero.getter();
    int v92 = static Duration.< infix(_:_:)() & 1;
    static Duration.zero.getter();
    if (v92 == (static Duration.< infix(_:_:)() & 1))
    {
      unint64_t v181 = v61;
    }
    else
    {
      uint64_t v93 = static Duration.zero.getter();
      uint64_t v70 = MEMORY[0x185304360](v93);
      uint64_t v72 = v94;
      uint64_t v95 = static Duration.zero.getter();
      uint64_t v176 = MEMORY[0x185304360](v95);
      unint64_t v181 = v96;
    }
    static Duration.zero.getter();
    uint64_t v97 = v70;
    uint64_t v98 = v72;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v99 = static Duration.zero.getter();
      uint64_t v97 = MEMORY[0x185304360](v99);
      uint64_t v98 = v100;
    }
    static Duration.zero.getter();
    char v101 = static Duration.< infix(_:_:)();
    uint64_t v102 = v34;
    unint64_t v103 = v69;
    if (v101)
    {
      uint64_t v104 = static Duration.zero.getter();
      uint64_t v102 = MEMORY[0x185304360](v104);
      unint64_t v103 = v105;
    }
    MEMORY[0x185304360](v97, v98, v102, v103);
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v106 = static Duration.zero.getter();
      MEMORY[0x185304360](v106);
    }
    static Duration.zero.getter();
    if (static Duration.== infix(_:_:)())
    {
      unint64_t v185 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v107 = v176;
      unint64_t v108 = v181;
      static Duration./ infix<A>(_:_:)();
      unint64_t v185 = 2;
      uint64_t v109 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x185304360](v107, v108, v109, v110);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      unint64_t v38 = v184;
      LODWORD(v39) = v173;
      goto LABEL_69;
    }
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v111 = static Duration.zero.getter();
      uint64_t v112 = MEMORY[0x185304360](v111);
      uint64_t v47 = v113;
    }
    else
    {
      uint64_t v112 = v174;
    }
    uint64_t v114 = MEMORY[0x185304350](v70, v72, v112, v47);
    uint64_t v116 = v115;
    static Duration.zero.getter();
    char v117 = static Duration.< infix(_:_:)();
    uint64_t v172 = v114;
    uint64_t v174 = v116;
    if (v117)
    {
      uint64_t v118 = static Duration.zero.getter();
      uint64_t v114 = MEMORY[0x185304360](v118);
      uint64_t v116 = v119;
    }
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v120 = static Duration.zero.getter();
      uint64_t v34 = MEMORY[0x185304360](v120);
      unint64_t v69 = v121;
    }
    MEMORY[0x185304360](v114, v116, v34, v69);
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v122 = static Duration.zero.getter();
      MEMORY[0x185304360](v122);
    }
    uint64_t v123 = v183;
    uint64_t v124 = v177;
    (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v177, v182, v8);
    int v125 = (*(uint64_t (**)(char *, uint64_t))(v123 + 88))(v124, v8);
    if (v125 == *MEMORY[0x1E4FBBEA0])
    {
      static Duration.< infix(_:_:)();
LABEL_68:
      unint64_t v185 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v126 = v176;
      unint64_t v39 = v181;
      static Duration./ infix<A>(_:_:)();
      unint64_t v185 = 2;
      uint64_t v127 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x185304360](v126, v39, v127, v128);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      static Duration.== infix(_:_:)();
      unint64_t v38 = v184;
      LODWORD(v39) = v173;
      uint64_t v8 = v175;
      goto LABEL_69;
    }
    if (v125 == *MEMORY[0x1E4FBBE98])
    {
      if (static Duration.< infix(_:_:)() & 1) == 0 && (static Duration.== infix(_:_:)())
      {
        unint64_t v185 = 2;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v160 = v176;
        unint64_t v161 = v181;
        static Duration./ infix<A>(_:_:)();
        unint64_t v185 = 2;
        uint64_t v162 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x185304360](v160, v161, v162, v163);
        static Duration.zero.getter();
        static Duration.== infix(_:_:)();
      }
      goto LABEL_68;
    }
    if (v125 == *MEMORY[0x1E4FBBEA8] || v125 == *MEMORY[0x1E4FBBEB0])
    {
      static Duration.< infix(_:_:)();
      goto LABEL_68;
    }
    if (v125 == *MEMORY[0x1E4FBBE88] || v125 == *MEMORY[0x1E4FBBE90]) {
      goto LABEL_68;
    }
    int v169 = 0;
    uint64_t v168 = 55;
    goto LABEL_143;
  }
  unint64_t v44 = 0;
  uint64_t v45 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v129 = v45[2] >= v44 ? v44 : v45[2];
    if (v129)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Duration.UnitsFormatStyle.Unit, Double>);
      uint64_t v131 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v131 = (void *)MEMORY[0x1E4FBC868];
    }
    uint64_t v133 = v8;
    uint64_t v189 = v131;
    swift_bridgeObjectRetain_n();
    if (!v38) {
      break;
    }
    unint64_t v38 = 0;
    uint64_t v8 = 1;
    while (v44 != v38)
    {
      unint64_t v134 = v45[2];
      if (v38 == v134) {
        goto LABEL_99;
      }
      if (v38 >= v134) {
        goto LABEL_123;
      }
      uint64_t v129 = *((unsigned __int8 *)v36 + v38 + 32);
      if (v129 == 8) {
        goto LABEL_99;
      }
      uint64_t v135 = v45[v38 + 4];
      char v188 = *((unsigned char *)v36 + v38 + 32);
      unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v129);
      uint64_t v138 = v131[2];
      BOOL v139 = (v137 & 1) == 0;
      BOOL v140 = __OFADD__(v138, v139);
      uint64_t v141 = v138 + v139;
      if (v140) {
        goto LABEL_124;
      }
      char v142 = v137;
      if (v131[3] < v141)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v141, 1);
        uint64_t v131 = v189;
        unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v129);
        if ((v142 & 1) != (v143 & 1)) {
          goto LABEL_144;
        }
      }
      if (v142) {
        goto LABEL_141;
      }
      v131[(v136 >> 6) + 8] |= 1 << v136;
      *(unsigned char *)(v131[6] + v136) = v129;
      *(void *)(v131[7] + 8 * v136) = v135;
      uint64_t v144 = v131[2];
      BOOL v140 = __OFADD__(v144, 1);
      uint64_t v145 = v144 + 1;
      if (v140) {
        goto LABEL_125;
      }
      ++v38;
      v131[2] = v145;
      if (v184 == v38) {
        goto LABEL_99;
      }
    }
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
    if (!v44)
    {
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
    }
LABEL_79:
    if (v44 > v45[2]) {
      goto LABEL_128;
    }
    *(double *)&v45[v44 + 3] = ((double)(uint64_t)v131 * 1.0e-18 + (double)v129) / v4 + *(double *)&v45[v44 + 3];
    unint64_t v44 = v36[2];
  }
LABEL_99:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  unint64_t object = v193._object;
  if (!v193._object) {
    goto LABEL_138;
  }
  uint64_t countAndFlagsBits = v193._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t v148 = specialized static Duration.TimeFormatStyle.Attributed.componentsFromPatternString(_:patternSet:)(countAndFlagsBits, (unint64_t)object, outlined read-only object #3 of Duration.TimeFormatStyle.Attributed.format(_:));
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  uint64_t v149 = v178;
  if (v131[2])
  {
    unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
    double v151 = 0.0;
    double v152 = 0.0;
    if (v153) {
      double v152 = *(double *)(v131[7] + 8 * v150);
    }
    if (v131[2])
    {
      unint64_t v154 = specialized __RawDictionaryStorage.find<A>(_:)(3u);
      double v155 = 0.0;
      if (v156) {
        double v151 = *(double *)(v131[7] + 8 * v154);
      }
      if (v131[2])
      {
        unint64_t v157 = specialized __RawDictionaryStorage.find<A>(_:)(4u);
        if (v158) {
          double v155 = *(double *)(v131[7] + 8 * v157);
        }
      }
    }
    else
    {
      double v155 = 0.0;
    }
  }
  else
  {
    double v151 = 0.0;
    double v152 = 0.0;
    double v155 = 0.0;
  }
  swift_release();
  Duration.TimeFormatStyle.Attributed.formatWithPatternComponents(_:hour:minute:second:)((uint64_t)v148, v149, v152, v151, v155);
  swift_bridgeObjectRelease();
  v180(v182, v133);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

__n128 Duration.TimeFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v2, a2, type metadata accessor for Duration.TimeFormatStyle);
  uint64_t v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

void Duration.TimeFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v22)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  unsigned char v56[144];
  unsigned char v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  void v75[18];
  unsigned char v76[144];
  unsigned char v77[152];

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  __n128 v7 = &v56[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (Swift::UInt *)&v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v2, (uint64_t)v10, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v12 = *v10;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v13 + 48), v4);
      Swift::UInt v14 = 1;
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v15 + 48), v4);
      Swift::UInt v14 = 2;
    }
    Hasher._combine(_:)(v14);
  }
  else
  {
    (*(void (**)(unsigned char *, Swift::UInt *, uint64_t))(v5 + 32))(v7, v10, v4);
    Swift::UInt v12 = 0;
  }
  Hasher._combine(_:)(v12);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = v2 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v16 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v17 = *(void *)v16;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
  }
  uint64_t v18 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(v18 + 20)));
  uint64_t v19 = *(void *)(v2 + *(int *)(v18 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(ObjectType, v19))
  {
    Swift::UInt8 v21 = 1;
LABEL_14:
    Hasher._combine(_:)(v21);
    return;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 464);
  swift_unknownObjectRetain();
  v22(v75, ObjectType, v19);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v77) == 1)
  {
    Swift::UInt8 v21 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v57, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v57[0] == 2)
  {
    char v23 = 0;
  }
  else
  {
    char v23 = v57[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v23);
  uint64_t v24 = v58;
  if (!v58)
  {
    Hasher._combine(_:)(0);
    uint64_t v29 = v57;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v24 + 16));
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v29 = v56;
LABEL_29:
    outlined retain of LocalePreferences(v29);
    if (!v59) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v26 = v24 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v26 += 16;
    --v25;
  }
  while (v25);
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v60) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v60)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v27 = v61;
    if (!v61) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = v62;
    if (!v62) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v61;
  if (v61) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v28 = v62;
  if (!v62)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v28);
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t v31 = v63;
  unint64_t v30 = v64;
  int v33 = v65;
  uint64_t v32 = v66;
  uint64_t v34 = v67;
  if (v63)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v35 = v30;
    uint64_t v36 = v33;
    uint64_t v37 = v32;
    unint64_t v38 = v34;
    unint64_t v39 = v31;
    _CFObject.hash(into:)();
    if (v30) {
      goto LABEL_36;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unint64_t v44 = v34;
    uint64_t v45 = v30;
    uint64_t v46 = v33;
    uint64_t v47 = v32;
    if (v30)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v40 = v30;
      _CFObject.hash(into:)();

      if (v33) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v33)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v41 = v33;
    _CFObject.hash(into:)();

    if (v32) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v34) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v32) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v42 = v32;
  _CFObject.hash(into:)();

  if (v34)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v43 = v34;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  uint64_t v43 = 0;
LABEL_45:

  char v48 = v68;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v48);
    swift_bridgeObjectRelease();
    uint64_t v49 = v69;
    if (v69) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v70) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  uint64_t v49 = v69;
  if (!v69) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v49);
  swift_bridgeObjectRelease();
  if (!v70) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v50 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }
  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v51 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v73 == 2)
  {
    unint64_t v52 = 0;
  }
  else
  {
    unint64_t v52 = v73 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v52);
  if (v74 == 2)
  {
    uint64_t v53 = 0;
  }
  else
  {
    unint64_t v54 = v74 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v53 = v54;
  }
  Hasher._combine(_:)(v53);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.CodingKeys()
{
  return 0x756269727474615FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x756269727474615FLL && a2 == 0xEB00000000646574)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.TimeFormatStyle.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Duration.TimeFormatStyle.hashValue.getter()
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned char *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  unsigned char v55[144];
  unsigned char v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  unsigned char v75[144];
  unsigned char v76[144];
  unsigned char v77[72];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (Swift::UInt *)&v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1;
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(unsigned char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  uint64_t v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  uint64_t v17 = *(void *)(v1 + *(int *)(v16 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17))
  {
    Swift::UInt8 v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v74, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v19 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    Swift::UInt8 v21 = 0;
  }
  else
  {
    Swift::UInt8 v21 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  uint64_t v22 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    uint64_t v27 = v56;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v22 + 16));
  char v23 = *(void *)(v22 + 16);
  if (!v23)
  {
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v27 = v55;
LABEL_29:
    outlined retain of LocalePreferences(v27);
    if (!v58) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v25 = v60;
    if (!v60) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = v61;
    if (!v61) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v60;
  if (v60) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v26 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v26);
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t v29 = v62;
  uint64_t v28 = v63;
  uint64_t v31 = v64;
  unint64_t v30 = v65;
  uint64_t v32 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v33 = v28;
    uint64_t v34 = v31;
    unint64_t v35 = v30;
    uint64_t v36 = v32;
    uint64_t v37 = v29;
    _CFObject.hash(into:)();
    if (v28) {
      goto LABEL_36;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v42 = v32;
    uint64_t v43 = v28;
    unint64_t v44 = v31;
    uint64_t v45 = v30;
    if (v28)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      unint64_t v38 = v28;
      _CFObject.hash(into:)();

      if (v31) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v31)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v39 = v31;
    _CFObject.hash(into:)();

    if (v30) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v32) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v40 = v30;
  _CFObject.hash(into:)();

  if (v32)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v41 = v32;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  uint64_t v41 = 0;
LABEL_45:

  uint64_t v46 = v67;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v46);
    swift_bridgeObjectRelease();
    uint64_t v47 = v68;
    if (v68) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  uint64_t v47 = v68;
  if (!v68) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v47);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v48 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v72 == 2)
  {
    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v50 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v50);
  if (v73 == 2)
  {
    uint64_t v51 = 0;
  }
  else
  {
    unint64_t v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v51 = v52;
  }
  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of Duration.TimeFormatStyle.Pattern(v15, (uint64_t)v11, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v11, v13, type metadata accessor for Duration.TimeFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.TimeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Duration.TimeFormatStyle.format(_:)(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.TimeFormatStyle@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v2, a2, type metadata accessor for Duration.TimeFormatStyle);
  uint64_t v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle()
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  unsigned char v73[144];
  unsigned char v74[144];
  unsigned char v75[72];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (Swift::UInt *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1;
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  uint64_t v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  uint64_t v17 = *(void *)(v1 + *(int *)(v16 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17))
  {
    Swift::UInt8 v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v72, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v19 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)&v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54 == 2)
  {
    Swift::UInt8 v21 = 0;
  }
  else
  {
    Swift::UInt8 v21 = v54 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  uint64_t v22 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v54);
    if (!v56) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v22 + 16));
  char v23 = *(void *)(v22 + 16);
  if (!v23) {
    goto LABEL_28;
  }
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v25 = v58;
    if (!v58) {
      goto LABEL_25;
    }
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = v59;
    if (!v59) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v58;
  if (v58) {
    goto LABEL_31;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v26 = v59;
  if (!v59)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v26);
  swift_bridgeObjectRelease();
LABEL_33:
  uint64_t v28 = v60;
  uint64_t v27 = v61;
  unint64_t v30 = v62;
  uint64_t v29 = v63;
  uint64_t v31 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v32 = v27;
    int v33 = v30;
    uint64_t v34 = v29;
    unint64_t v35 = v31;
    uint64_t v36 = v28;
    _CFObject.hash(into:)();
    if (v27) {
      goto LABEL_35;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v41 = v31;
    uint64_t v42 = v27;
    uint64_t v43 = v30;
    unint64_t v44 = v29;
    if (v27)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v37 = v27;
      _CFObject.hash(into:)();

      if (v30) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
  }
  Hasher._combine(_:)(0);
  if (v30)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v38 = v30;
    _CFObject.hash(into:)();

    if (v29) {
      goto LABEL_37;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v31) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  if (!v29) {
    goto LABEL_42;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  unint64_t v39 = v29;
  _CFObject.hash(into:)();

  if (v31)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v40 = v31;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }
LABEL_43:
  Hasher._combine(_:)(0);
  uint64_t v40 = 0;
LABEL_44:

  uint64_t v45 = v65;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v45);
    swift_bridgeObjectRelease();
    uint64_t v46 = v66;
    if (v66) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  uint64_t v46 = v66;
  if (!v66) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v46);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v47 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v48 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v70 == 2)
  {
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v49 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v49);
  if (v71 == 2)
  {
    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v51 = v71 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v50 = v51;
  }
  Hasher._combine(_:)(v50);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t static FormatStyle<>.time(pattern:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(a1, a2, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static LocaleCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, &v9);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  uint64_t v5 = v9;
  uint64_t v6 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(unsigned char *)(a2 + *(int *)(result + 20)) = 0;
  uint64_t v8 = (uint64_t *)(a2 + *(int *)(result + 24));
  *uint64_t v8 = v5;
  v8[1] = v6;
  return result;
}

__n128 Duration.TimeFormatStyle.Attributed.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v2, a2, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  uint64_t v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

uint64_t closure #1 in Duration.TimeFormatStyle.Attributed.format(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::String *a6, uint64_t *a7)
{
  uint64_t v10 = *(void *)(a3 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt v12 = *(void (**)(uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  v12(ObjectType, v10);
  swift_unknownObjectRelease();
  if (!a1) {
LABEL_11:
  }
    __break(1u);
  if (a5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a5 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int TimePattern = uatmufmt_getTimePattern();
  swift_release();
  specialized String.init(_utf16:)(a1, TimePattern);
  if (v15)
  {
    Swift::String v16 = String.lowercased()();
    swift_bridgeObjectRelease();
    *a6 = v16;
  }
  else
  {
    uint64_t v14 = (void *)a7[1];
    a6->_uint64_t countAndFlagsBits = *a7;
    a6->_unint64_t object = v14;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t Duration.TimeFormatStyle.Attributed.formatWithPatternComponents(_:hour:minute:second:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v155 = a1;
  unint64_t v150 = a2;
  uint64_t v154 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v154);
  uint64_t v149 = (char **)((char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  uint64_t v156 = (uint64_t)&v143 - v11;
  uint64_t v159 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1F4188790](v159);
  uint64_t v145 = (uint64_t)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v152 = (uint64_t)&v143 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v15);
  uint64_t v163 = (uint64_t)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v165 = (uint64_t)&v143 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v144 = (char *)&v143 - v20;
  MEMORY[0x1F4188790](v21);
  char v143 = (char *)&v143 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v148 = (uint64_t)&v143 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v147 = (uint64_t)&v143 - v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v146 = (uint64_t)&v143 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v157 = (uint64_t)&v143 - v30;
  MEMORY[0x1F4188790](v31);
  int v33 = (_OWORD *)((char *)&v143 - v32);
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (char *)&v143 - v35;
  uint64_t v37 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  uint64_t v38 = *(int *)(v37 + 24);
  unint64_t v39 = (char *)v33 + *(int *)(v15 + 36);
  *(void *)unint64_t v39 = 0;
  v39[8] = 1;
  *((void *)v39 + 2) = 0;
  *((void *)v39 + 3) = 0;
  *((void *)v39 + 4) = 0;
  *((void *)v39 + 5) = 0x1FFFFFFFELL;
  *((void *)v39 + 7) = 0;
  *((void *)v39 + 8) = 0;
  *((void *)v39 + 6) = 0;
  *((_DWORD *)v39 + 18) = 131584;
  *((_WORD *)v39 + 38) = 512;
  uint64_t v40 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v41 = &v39[v40[9]];
  uint64_t v42 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v176 = *(void *)(v42 - 8);
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v176 + 56);
  long long v177 = *(_OWORD *)(v5 + v38);
  uint64_t v153 = v42;
  v43(v41, 1, 1);
  unint64_t v44 = &v39[v40[10]];
  *(void *)unint64_t v44 = 0;
  v44[8] = -1;
  v39[v40[11]] = 3;
  _OWORD *v33 = v177;
  uint64_t v45 = *(int *)(v37 + 20);
  uint64_t v164 = v5;
  LOBYTE(v37) = *(unsigned char *)(v5 + v45);
  outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v33, (uint64_t)v36);
  uint64_t v167 = v15;
  uint64_t v168 = v36;
  v36[*(int *)(v15 + 36) + 73] = v37;
  swift_unknownObjectRetain();
  outlined destroy of Any?((uint64_t)v33, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  BigString.init()();
  v178[0] = 0;
  MEMORY[0x185309530](v178, 8);
  uint64_t v46 = v178[0];
  uint64_t v166 = type metadata accessor for AttributedString.Guts();
  uint64_t v47 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v49 = v185;
    *(_OWORD *)(v47 + 16) = v184;
    *(_OWORD *)(v47 + 32) = v49;
    *(_OWORD *)(v47 + 48) = v186;
    *(void *)(v47 + 64) = 0;
    *(void *)(v47 + 72) = 0;
    *(void *)(v47 + 80) = 0;
    *(void *)(v47 + 88) = v46;
    BOOL v50 = a3 < 0.0;
    if (a4 < 0.0) {
      BOOL v50 = 1;
    }
    if (a5 < 0.0) {
      BOOL v50 = 1;
    }
    BOOL v158 = v50;
    uint64_t v51 = *(void *)(v155 + 16);
    if (v51)
    {
      uint64_t v162 = v165 + 74;
      double v151 = (void (**)(uint64_t, uint64_t))(v176 + 8);
      unint64_t v52 = (unsigned char *)(swift_bridgeObjectRetain() + 40);
      long long v161 = xmmword_182106C90;
      unint64_t v160 = 0x80000001823AE490;
      while (1)
      {
        uint64_t v64 = (void *)*((void *)v52 - 1);
        if (*v52 == 1)
        {
          uint64_t v65 = v64[2];
          if (!v65) {
            goto LABEL_10;
          }
          uint64_t v175 = v52;
          uint64_t v176 = v51;
          uint64_t v66 = v64[4];
          uint64_t v67 = v64[5];
          BOOL v68 = v66 == 104 && v67 == 0xE100000000000000;
          if (v68 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v69 = v164 + *(int *)(v159 + 20);
            if ((*(unsigned char *)(v69 + 8) & 1) == 0)
            {
              uint64_t v70 = *(void *)v69;
              if (v65 <= v70) {
                uint64_t v65 = v70;
              }
            }
            if (v65 >= 999) {
              uint64_t v71 = 999;
            }
            else {
              uint64_t v71 = v65;
            }
            uint64_t v72 = (uint64_t)v168;
            uint64_t v73 = v157;
            outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v168, v157);
            uint64_t v74 = v73 + *(int *)(v167 + 36);
            *(void *)(v74 + 16) = v71;
            *(void *)(v74 + 24) = 0;
            *(void *)(v74 + 32) = 0;
            *(void *)(v74 + 40) = 1;
            *(void *)(v74 + 56) = 0;
            *(void *)(v74 + 64) = 0;
            *(void *)(v74 + 48) = 0;
            *(unsigned char *)(v74 + 72) = 0x80;
            outlined destroy of Any?(v72, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            outlined init with take of LocalePreferences?(v73, v72, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            char v75 = 2;
            if (v158) {
              goto LABEL_25;
            }
            int v76 = 65793;
LABEL_84:
            uint64_t v119 = v163;
            outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v168, v163);
            uint64_t v120 = v165;
            outlined init with copy of FloatingPointFormatStyle<Double>(v119, v165);
            uint64_t v121 = v162 + *(int *)(v167 + 36);
            *(unsigned char *)(v121 + 2) = BYTE2(v76);
            *(_WORD *)uint64_t v121 = v76;
            outlined destroy of Any?(v119, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            specialized FloatingPointFormatStyle.format(_:)();
            outlined destroy of Any?(v120, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            uint64_t v182 = MEMORY[0x1E4FBC868];
            uint64_t v183 = MEMORY[0x1E4FBC870];
            v178[3] = (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
            v178[4] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
            LOBYTE(v178[0]) = v75;
            long long v179 = v161;
            char v180 = 1;
            uint64_t v181 = 0;
            specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v178, 0xD000000000000021, v160);
            uint64_t v122 = v182;
            uint64_t v123 = v183;
            BigString.init(_:)();
            AttributedString.init(_:attributes:)(v187, v122, v123, v178);
            double v77 = (_OWORD *)v178[0];
            uint64_t v78 = (_OWORD *)v47;
            goto LABEL_85;
          }
          BOOL v79 = v66 == 109 && v67 == 0xE100000000000000;
          if (v79 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v80 = v152;
            outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v164, v152, type metadata accessor for Duration.TimeFormatStyle.Pattern);
            outlined init with take of Duration.TimeFormatStyle.Pattern(v80, v156, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload)
            {
              if (EnumCaseMultiPayload == 1)
              {
                if ((unint64_t)v65 >= 0x3E7) {
                  uint64_t v82 = 999;
                }
                else {
                  uint64_t v82 = v65;
                }
                uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
                uint64_t v84 = v156 + *(int *)(v83 + 48);
                uint64_t v85 = (uint64_t)v168;
                uint64_t v86 = v147;
                outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v168, v147);
                uint64_t v87 = v86 + *(int *)(v167 + 36);
                *(void *)(v87 + 16) = v82;
                *(void *)(v87 + 24) = 0;
                *(void *)(v87 + 32) = 0;
                *(void *)(v87 + 40) = 1;
                *(void *)(v87 + 56) = 0;
                *(void *)(v87 + 64) = 0;
                *(void *)(v87 + 48) = 0;
                *(unsigned char *)(v87 + 72) = 0x80;
                outlined destroy of Any?(v85, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
                outlined init with take of LocalePreferences?(v86, v85, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
                (*v151)(v84, v153);
                goto LABEL_61;
              }
              uint64_t v106 = v164 + *(int *)(v159 + 20);
              if ((*(unsigned char *)(v106 + 8) & 1) == 0)
              {
                uint64_t v107 = *(void *)v106;
                if (v65 <= v107) {
                  uint64_t v65 = v107;
                }
              }
              if (v65 >= 999) {
                uint64_t v108 = 999;
              }
              else {
                uint64_t v108 = v65;
              }
              uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
              uint64_t v110 = v156 + *(int *)(v109 + 48);
              uint64_t v111 = (uint64_t)v168;
              uint64_t v112 = v148;
              outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v168, v148);
              uint64_t v113 = v112 + *(int *)(v167 + 36);
              *(void *)(v113 + 16) = v108;
              *(void *)(v113 + 24) = 0;
              *(void *)(v113 + 32) = 0;
              *(void *)(v113 + 40) = 1;
              *(void *)(v113 + 56) = 0;
              *(void *)(v113 + 64) = 0;
              *(void *)(v113 + 48) = 0;
              *(unsigned char *)(v113 + 72) = 0x80;
              outlined destroy of Any?(v111, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
              outlined init with take of LocalePreferences?(v112, v111, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
              (*v151)(v110, v153);
              char v75 = 3;
              if (v158)
              {
LABEL_25:
                int v76 = 0;
                goto LABEL_84;
              }
            }
            else
            {
              if ((unint64_t)v65 >= 0x3E7) {
                uint64_t v102 = 999;
              }
              else {
                uint64_t v102 = v65;
              }
              uint64_t v103 = (uint64_t)v168;
              uint64_t v104 = v146;
              outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v168, v146);
              uint64_t v105 = v104 + *(int *)(v167 + 36);
              *(void *)(v105 + 16) = v102;
              *(void *)(v105 + 24) = 0;
              *(void *)(v105 + 32) = 0;
              *(void *)(v105 + 40) = 1;
              *(void *)(v105 + 56) = 0;
              *(void *)(v105 + 64) = 0;
              *(void *)(v105 + 48) = 0;
              *(unsigned char *)(v105 + 72) = 0x80;
              outlined destroy of Any?(v103, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
              outlined init with take of LocalePreferences?(v104, v103, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
              (*v151)(v156, v153);
LABEL_61:
              char v75 = 3;
            }
            int v76 = 65793;
            goto LABEL_84;
          }
          BOOL v88 = v66 == 115 && v67 == 0xE100000000000000;
          if (v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v89 = v145;
            outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v164, v145, type metadata accessor for Duration.TimeFormatStyle.Pattern);
            outlined init with take of Duration.TimeFormatStyle.Pattern(v89, (uint64_t)v149, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
            int v90 = swift_getEnumCaseMultiPayload();
            if (v90)
            {
              if (v90 == 1)
              {
                uint64_t v91 = v149;
                uint64_t v92 = *v149;
                if ((unint64_t)v65 >= 0x3E7) {
                  uint64_t v93 = 999;
                }
                else {
                  uint64_t v93 = v65;
                }
                if (v92 >= 998) {
                  uint64_t v94 = 998;
                }
                else {
                  uint64_t v94 = *v149;
                }
                uint64_t v95 = v94 & ~(v94 >> 63);
                uint64_t v96 = v92 & ~(v92 >> 63);
                if (v96 >= 998) {
                  uint64_t v97 = 998;
                }
                else {
                  uint64_t v97 = v96;
                }
                uint64_t v98 = (char *)v91
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                             + 48);
                uint64_t v99 = (uint64_t)v168;
                uint64_t v100 = (uint64_t)v168;
                uint64_t v101 = (uint64_t)v143;
              }
              else
              {
                uint64_t v114 = v149;
                uint64_t v115 = *v149;
                if ((unint64_t)v65 >= 0x3E7) {
                  uint64_t v93 = 999;
                }
                else {
                  uint64_t v93 = v65;
                }
                if (v115 >= 998) {
                  uint64_t v116 = 998;
                }
                else {
                  uint64_t v116 = *v149;
                }
                uint64_t v95 = v116 & ~(v116 >> 63);
                uint64_t v117 = v115 & ~(v115 >> 63);
                if (v117 >= 998) {
                  uint64_t v97 = 998;
                }
                else {
                  uint64_t v97 = v117;
                }
                uint64_t v98 = (char *)v114
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                             + 48);
                uint64_t v99 = (uint64_t)v168;
                uint64_t v100 = (uint64_t)v168;
                uint64_t v101 = (uint64_t)v144;
              }
              outlined init with copy of FloatingPointFormatStyle<Double>(v100, v101);
              uint64_t v118 = v101 + *(int *)(v167 + 36);
              *(void *)(v118 + 16) = v93;
              *(void *)(v118 + 24) = 0;
              *(void *)(v118 + 32) = 0;
              *(void *)(v118 + 40) = 1;
              *(void *)(v118 + 48) = v95;
              *(void *)(v118 + 56) = 0;
              *(void *)(v118 + 64) = v97;
              *(unsigned char *)(v118 + 72) = 0x80;
              outlined destroy of Any?(v99, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
              outlined init with take of LocalePreferences?(v101, v99, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
              (*v151)((uint64_t)v98, v153);
            }
            else
            {
              (*v151)((uint64_t)v149, v153);
            }
            char v75 = 4;
            int v76 = 65793;
            goto LABEL_84;
          }
          v178[0] = (uint64_t)v64;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
          lazy protocol witness table accessor for type [Character] and conformance [A]();
          String.init<A>(_:)();
        }
        else
        {
          uint64_t v175 = v52;
          uint64_t v176 = v51;
          v178[0] = (uint64_t)v64;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
          lazy protocol witness table accessor for type [Character] and conformance [A]();
          String.init<A>(_:)();
        }
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v188, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], v178);
        double v77 = (_OWORD *)v178[0];
        uint64_t v78 = (_OWORD *)v47;
LABEL_85:
        long long v124 = v78[2];
        v194[0] = v78[1];
        v194[1] = v124;
        v194[2] = v78[3];
        uint64_t v174 = v77;
        swift_retain();
        swift_retain();
        outlined retain of Locale((uint64_t)v194);
        uint64_t v125 = BigString.endIndex.getter();
        uint64_t v59 = v126;
        uint64_t v128 = v127;
        *(void *)&long long v177 = v129;
        outlined release of Locale((uint64_t)v194);
        swift_release();
        long long v130 = *(_OWORD *)(v47 + 32);
        v193[0] = *(_OWORD *)(v47 + 16);
        v193[1] = v130;
        v193[2] = *(_OWORD *)(v47 + 48);
        swift_retain();
        outlined retain of Locale((uint64_t)v193);
        uint64_t v58 = v47;
        uint64_t v131 = BigString.endIndex.getter();
        uint64_t v133 = v132;
        uint64_t v135 = v134;
        uint64_t v137 = v136;
        outlined release of Locale((uint64_t)v193);
        swift_release();
        uint64_t v138 = v131;
        uint64_t v139 = v137;
        uint64_t v171 = v133;
        uint64_t v172 = v125;
        uint64_t v140 = v135;
        uint64_t v141 = v59;
        uint64_t v173 = v128;
        uint64_t v142 = v177;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result)
        {
          __break(1u);
          goto LABEL_91;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          long long v53 = *(_OWORD *)(v58 + 32);
          v192[0] = *(_OWORD *)(v58 + 16);
          v192[1] = v53;
          v192[2] = *(_OWORD *)(v58 + 48);
          unint64_t v54 = (void *)v58;
          uint64_t v55 = *(void *)(v58 + 64);
          uint64_t v56 = v54[9];
          uint64_t v57 = v54[10];
          uint64_t v170 = v54[11];
          uint64_t v169 = swift_allocObject();
          outlined retain of Locale((uint64_t)v192);
          swift_unknownObjectRetain();
          uint64_t v58 = AttributedString.Guts.init(string:runs:)(v192, v55, v56, v57, v170);
          swift_release();
          uint64_t v59 = v141;
        }
        long long v60 = *(_OWORD *)(v58 + 32);
        v191[0] = *(_OWORD *)(v58 + 16);
        v191[1] = v60;
        v191[2] = *(_OWORD *)(v58 + 48);
        swift_retain();
        outlined retain of Locale((uint64_t)v191);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v191);
        long long v61 = *(_OWORD *)(v58 + 16);
        long long v62 = *(_OWORD *)(v58 + 48);
        v190[1] = *(_OWORD *)(v58 + 32);
        v190[2] = v62;
        v190[0] = v61;
        long long v63 = *(_OWORD *)(v58 + 16);
        v195[1] = *(_OWORD *)(v58 + 32);
        v195[2] = v62;
        v195[0] = v63;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v195, (uint64_t)v196);
        outlined retain of Locale((uint64_t)v196);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v190);
        swift_release();
        v189[0] = v172;
        v189[1] = v59;
        v189[2] = v173;
        v189[3] = v142;
        v189[4] = v138;
        v189[5] = v171;
        v189[6] = v140;
        v189[7] = v139;
        uint64_t v47 = v58;
        specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)v189, v174);
        swift_release_n();
        unint64_t v52 = v175;
        uint64_t v51 = v176;
LABEL_10:
        v52 += 32;
        if (!--v51)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    uint64_t result = outlined destroy of Any?((uint64_t)v168, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    *unint64_t v150 = v47;
  }
  else
  {
LABEL_91:
    __break(1u);
  }
  return result;
}

uint64_t Duration.TimeFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v23)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned char *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  id v57;
  unsigned char v58[144];
  unsigned char v59[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  void v77[18];
  unsigned char v78[144];
  unsigned char v79[152];

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  __n128 v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (Swift::UInt *)&v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v2, (uint64_t)v10, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v12 = *v10;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v13 + 48), v4);
      Swift::UInt v14 = 1;
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v15 + 48), v4);
      Swift::UInt v14 = 2;
    }
    Hasher._combine(_:)(v14);
  }
  else
  {
    (*(void (**)(unsigned char *, Swift::UInt *, uint64_t))(v5 + 32))(v7, v10, v4);
    Swift::UInt v12 = 0;
  }
  Hasher._combine(_:)(v12);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = v2 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v16 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v17 = *(void *)v16;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
  }
  uint64_t v18 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(v18 + 20)));
  uint64_t v19 = *(void *)(v2 + *(int *)(v18 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 48);
  swift_unknownObjectRetain();
  if (v21(ObjectType, v19))
  {
    Swift::UInt8 v22 = 1;
LABEL_14:
    Hasher._combine(_:)(v22);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 464);
  swift_unknownObjectRetain();
  v23(v77, ObjectType, v19);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Swift::UInt8 v22 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59[0] == 2)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = v59[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v24);
  uint64_t v25 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v59;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v25 + 16));
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v30 = v58;
LABEL_29:
    outlined retain of LocalePreferences(v30);
    if (!v61) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v27 = v25 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v27 += 16;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v28 = v63;
    if (!v63) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v64;
    if (!v64) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = v63;
  if (v63) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v29 = v64;
  if (!v64)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v29);
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t v31 = v65;
  uint64_t v32 = v66;
  uint64_t v34 = v67;
  int v33 = v68;
  uint64_t v35 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v36 = v32;
    uint64_t v37 = v34;
    uint64_t v38 = v33;
    unint64_t v39 = v35;
    uint64_t v40 = v31;
    _CFObject.hash(into:)();
    uint64_t v57 = v31;
    if (v32) {
      goto LABEL_36;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v45 = v35;
    uint64_t v46 = v32;
    uint64_t v47 = v34;
    char v48 = v33;
    uint64_t v57 = 0;
    if (v32)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v41 = v32;
      _CFObject.hash(into:)();

      if (v34) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v42 = v34;
    _CFObject.hash(into:)();

    if (v33) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v35) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v33) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  unint64_t v44 = 0;
LABEL_45:

  long long v49 = v70;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v49);
    swift_bridgeObjectRelease();
    BOOL v50 = v71;
    if (v71) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  BOOL v50 = v71;
  if (!v71) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v50);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v51 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v52 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v75 == 2)
  {
    long long v53 = 0;
  }
  else
  {
    long long v53 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v53);
  if (v76 == 2)
  {
    unint64_t v54 = 0;
  }
  else
  {
    uint64_t v55 = v76 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v54 = v55;
  }
  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  uint64_t v1 = 0x676E6970756F7267;
  if (*v0 != 1) {
    uint64_t v1 = 0x656C61636F6CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E726574746170;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Attributed.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.TimeFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Pattern);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
    LOBYTE(v11) = *(unsigned char *)(v3 + *(int *)(v9 + 20));
    char v12 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    char v12 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Duration.TimeFormatStyle.Attributed.hashValue.getter()
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned char *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  unsigned char v55[144];
  unsigned char v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  unsigned char v75[144];
  unsigned char v76[144];
  unsigned char v77[72];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (Swift::UInt *)&v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1;
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(unsigned char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(unsigned char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  uint64_t v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  uint64_t v17 = *(void *)(v1 + *(int *)(v16 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17))
  {
    Swift::UInt8 v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v74, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v19 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  Swift::UInt8 v22 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    uint64_t v27 = v56;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v22 + 16));
  uint64_t v23 = *(void *)(v22 + 16);
  if (!v23)
  {
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v27 = v55;
LABEL_29:
    outlined retain of LocalePreferences(v27);
    if (!v58) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v25 = v60;
    if (!v60) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = v61;
    if (!v61) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v60;
  if (v60) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v26 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v26);
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t v29 = v62;
  uint64_t v28 = v63;
  uint64_t v31 = v64;
  uint64_t v30 = v65;
  uint64_t v32 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v33 = v28;
    uint64_t v34 = v31;
    uint64_t v35 = v30;
    uint64_t v36 = v32;
    uint64_t v37 = v29;
    _CFObject.hash(into:)();
    if (v28) {
      goto LABEL_36;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v42 = v32;
    uint64_t v43 = v28;
    unint64_t v44 = v31;
    uint64_t v45 = v30;
    if (v28)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v38 = v28;
      _CFObject.hash(into:)();

      if (v31) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v31)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v39 = v31;
    _CFObject.hash(into:)();

    if (v30) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v32) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v40 = v30;
  _CFObject.hash(into:)();

  if (v32)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v41 = v32;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  uint64_t v41 = 0;
LABEL_45:

  uint64_t v46 = v67;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v46);
    swift_bridgeObjectRelease();
    uint64_t v47 = v68;
    if (v68) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  uint64_t v47 = v68;
  if (!v68) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v47);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v48 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v72 == 2)
  {
    BOOL v50 = 0;
  }
  else
  {
    BOOL v50 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v50);
  if (v73 == 2)
  {
    uint64_t v51 = 0;
  }
  else
  {
    unint64_t v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v51 = v52;
  }
  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v19 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Attributed.CodingKeys>);
  uint64_t v18 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(v10 + 20);
  v9[v11] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v16 = v11;
  uint64_t v12 = v18;
  uint64_t v13 = (uint64_t)v9;
  LOBYTE(v22) = 0;
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Pattern);
  uint64_t v14 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of Duration.TimeFormatStyle.Pattern(v21, v13, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  char v23 = 1;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v13 + v16) = v22;
  char v23 = 2;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v14);
  *(_OWORD *)(v13 + *(int *)(v7 + 24)) = v22;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v13, v17, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of Duration.TimeFormatStyle.Pattern.Fields(v13, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Duration.TimeFormatStyle.Attributed.format(_:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.TimeFormatStyle.Attributed@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v3, a3, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  uint64_t v7 = *(int *)(a2 + 24);
  __n128 v9 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v9;
  *(__n128 *)(a3 + v7) = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Attributed(void *a1)
{
  return Duration.TimeFormatStyle.Attributed.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.TimeFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  void (*v23)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  unsigned char v75[144];
  unsigned char v76[152];

  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  __n128 v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (Swift::UInt *)((char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v4, (uint64_t)v12, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v14 = *v12;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v12 + *(int *)(v15 + 48), v6);
      Swift::UInt v16 = 1;
    }
    else
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v12 + *(int *)(v17 + 48), v6);
      Swift::UInt v16 = 2;
    }
    Hasher._combine(_:)(v16);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v7 + 32))(v9, v12, v6);
    Swift::UInt v14 = 0;
  }
  Hasher._combine(_:)(v14);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v18 = v4 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v18 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v19 = *(void *)v18;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + *(int *)(a2 + 20)));
  uint64_t v20 = *(void *)(v4 + *(int *)(a2 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 48))(ObjectType, v20))
  {
    Swift::UInt8 v22 = 1;
LABEL_14:
    Hasher._combine(_:)(v22);
    return;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v20 + 64))(ObjectType, v20);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v23 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 464);
  swift_unknownObjectRetain();
  v23(v74, ObjectType, v20);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v22 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)&v56, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56 == 2)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = v56 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v24);
  uint64_t v25 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v56);
    if (!v58) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v25 + 16));
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26) {
    goto LABEL_28;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v27 = v25 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v27 += 16;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v28 = v60;
    if (!v60) {
      goto LABEL_25;
    }
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v61;
    if (!v61) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = v60;
  if (v60) {
    goto LABEL_31;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v29 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v29);
  swift_bridgeObjectRelease();
LABEL_33:
  uint64_t v31 = v62;
  uint64_t v30 = v63;
  int v33 = v64;
  uint64_t v32 = v65;
  uint64_t v34 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v35 = v30;
    uint64_t v36 = v33;
    uint64_t v37 = v32;
    uint64_t v38 = v34;
    unint64_t v39 = v31;
    _CFObject.hash(into:)();
    if (v30) {
      goto LABEL_35;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unint64_t v44 = v34;
    uint64_t v45 = v30;
    uint64_t v46 = v33;
    uint64_t v47 = v32;
    if (v30)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v40 = v30;
      _CFObject.hash(into:)();

      if (v33) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
  }
  Hasher._combine(_:)(0);
  if (v33)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v41 = v33;
    _CFObject.hash(into:)();

    if (v32) {
      goto LABEL_37;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v34) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  if (!v32) {
    goto LABEL_42;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v42 = v32;
  _CFObject.hash(into:)();

  if (v34)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v43 = v34;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }
LABEL_43:
  Hasher._combine(_:)(0);
  uint64_t v43 = 0;
LABEL_44:

  char v48 = v67;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v48);
    swift_bridgeObjectRelease();
    long long v49 = v68;
    if (v68) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  long long v49 = v68;
  if (!v68) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v49);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    BOOL v50 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v51 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v72 == 2)
  {
    unint64_t v52 = 0;
  }
  else
  {
    unint64_t v52 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v52);
  if (v73 == 2)
  {
    long long v53 = 0;
  }
  else
  {
    unint64_t v54 = v73 & 1;
    Hasher._combine(_:)(1u);
    long long v53 = v54;
  }
  Hasher._combine(_:)(v53);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  void (*v22)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  unsigned char v75[144];
  unsigned char v76[144];
  unsigned char v77[72];

  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (Swift::UInt *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v4, (uint64_t)v11, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v13 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v14 + 48), v5);
      Swift::UInt v15 = 1;
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v16 + 48), v5);
      Swift::UInt v15 = 2;
    }
    Hasher._combine(_:)(v15);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    Swift::UInt v13 = 0;
  }
  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v4 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(unsigned char *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + *(int *)(a2 + 20)));
  uint64_t v19 = *(void *)(v4 + *(int *)(a2 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(ObjectType, v19))
  {
    Swift::UInt8 v21 = 1;
LABEL_14:
    Hasher._combine(_:)(v21);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt8 v22 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 464);
  swift_unknownObjectRetain();
  v22(v74, ObjectType, v19);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v21 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)&v56, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56 == 2)
  {
    char v23 = 0;
  }
  else
  {
    char v23 = v56 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v23);
  uint64_t v24 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v56);
    if (!v58) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v24 + 16));
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25) {
    goto LABEL_28;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v26 = v24 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v26 += 16;
    --v25;
  }
  while (v25);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v27 = v60;
    if (!v60) {
      goto LABEL_25;
    }
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = v61;
    if (!v61) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v60;
  if (v60) {
    goto LABEL_31;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v28 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v28);
  swift_bridgeObjectRelease();
LABEL_33:
  uint64_t v30 = v62;
  uint64_t v29 = v63;
  uint64_t v32 = v64;
  uint64_t v31 = v65;
  int v33 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v34 = v29;
    uint64_t v35 = v32;
    uint64_t v36 = v31;
    uint64_t v37 = v33;
    uint64_t v38 = v30;
    _CFObject.hash(into:)();
    if (v29) {
      goto LABEL_35;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v43 = v33;
    unint64_t v44 = v29;
    uint64_t v45 = v32;
    uint64_t v46 = v31;
    if (v29)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      unint64_t v39 = v29;
      _CFObject.hash(into:)();

      if (v32) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
  }
  Hasher._combine(_:)(0);
  if (v32)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v40 = v32;
    _CFObject.hash(into:)();

    if (v31) {
      goto LABEL_37;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v33) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  if (!v31) {
    goto LABEL_42;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v41 = v31;
  _CFObject.hash(into:)();

  if (v33)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v42 = v33;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }
LABEL_43:
  Hasher._combine(_:)(0);
  uint64_t v42 = 0;
LABEL_44:

  uint64_t v47 = v67;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v47);
    swift_bridgeObjectRelease();
    char v48 = v68;
    if (v68) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  char v48 = v68;
  if (!v68) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v48);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v49 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    BOOL v50 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }
  if (v72 == 2)
  {
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v51);
  if (v73 == 2)
  {
    unint64_t v52 = 0;
  }
  else
  {
    long long v53 = v73 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v52 = v53;
  }
  Hasher._combine(_:)(v52);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.grouping(_:)(a1, type metadata accessor for Duration.TimeFormatStyle, a2);
}

uint64_t Duration.TimeFormatStyle.grouping.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t Duration.TimeFormatStyle.grouping.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*Duration.TimeFormatStyle.grouping.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3);
  return Measurement<>.FormatStyle<>.hidesScaleName.modify;
}

uint64_t Duration.TimeFormatStyle.Attributed.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.grouping(_:)(a1, type metadata accessor for Duration.TimeFormatStyle.Attributed, a2);
}

uint64_t Duration.TimeFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v3, a3, a2);
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(unsigned char *)(a3 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t Duration.TimeFormatStyle.Attributed.subscript.getter(uint64_t a1)
{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(a1);
}

{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  MEMORY[0x1F4188790](a1);
  uint64_t v3 = (char *)&v5 - v2;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)&v5 - v2, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_getAtKeyPath();
  return outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v3, type metadata accessor for Duration.TimeFormatStyle);
}

uint64_t Duration.TimeFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Duration.TimeFormatStyle.Attributed.subscript.setter(a1);
  swift_release();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + v3 + 8) - 8) + 8);

  return v4(a1);
}

void (*Duration.TimeFormatStyle.Attributed.subscript.modify(void *a1, void *a2))(uint64_t **a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = malloc(0x40uLL);
  *a1 = v6;
  *uint64_t v6 = a2;
  v6[1] = v3;
  uint64_t v7 = (void *)(*a2 + *MEMORY[0x1E4FBBC10]);
  uint64_t v8 = malloc(*(void *)(*(void *)(*v7 - 8) + 64));
  v6[2] = v8;
  uint64_t v9 = v7[1];
  v6[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v6[5] = malloc(v11);
  v6[6] = malloc(v11);
  v6[7] = malloc(v11);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v3, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_getAtKeyPath();
  outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle);
  return Duration.TimeFormatStyle.Attributed.subscript.modify;
}

void Duration.TimeFormatStyle.Attributed.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16);
  v4((*a1)[6], v3[7], v3[3]);
  char v5 = (void *)v3[6];
  uint64_t v17 = (void *)v3[7];
  uint64_t v7 = v3[4];
  uint64_t v6 = (void *)v3[5];
  uint64_t v8 = (void *)v3[2];
  uint64_t v9 = v3[1];
  if (a2)
  {
    uint64_t v16 = (void *)v3[6];
    uint64_t v10 = (void *)v3[5];
    uint64_t v11 = v3[3];
    v4((uint64_t)v10, (uint64_t)v16, v11);
    outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v9, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_retain();
    swift_setAtWritableKeyPath();
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields(v9, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v8, v9, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_release();
    uint64_t v12 = *(void (**)(void *, uint64_t))(v7 + 8);
    v12(v16, v11);
    Swift::UInt v13 = v17;
    uint64_t v14 = v11;
    uint64_t v6 = v10;
    char v5 = v16;
    v12(v17, v14);
  }
  else
  {
    uint64_t v15 = v3[3];
    outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v3[1], v3[2], type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_retain();
    swift_setAtWritableKeyPath();
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields(v9, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v8, v9, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_release();
    Swift::UInt v13 = v17;
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v15);
  }
  free(v13);
  free(v5);
  free(v6);
  free(v8);

  free(v3);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.TimeFormatStyle.Attributed.discreteInput(before:)(a1, a2, 1, MEMORY[0x1E4FBC6F8]);
}

uint64_t Duration.TimeFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.TimeFormatStyle.discreteInput(before:)(a1, a2, 1, MEMORY[0x1E4FBC6F8]);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.TimeFormatStyle.Attributed.discreteInput(before:)(a1, a2, 0, MEMORY[0x1E4FBC6F0]);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v47 = a4;
  int v51 = a3;
  uint64_t v5 = v4;
  uint64_t v52 = a2;
  uint64_t v50 = a1;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v53 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v11);
  Swift::UInt v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (uint64_t *)((char *)&v46 - v15);
  uint64_t v17 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  Swift::UInt8 v22 = (char *)&v46 - v21;
  uint64_t v23 = type metadata accessor for Duration.TimeFormatStyle(0);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v5, (uint64_t)v25, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  uint64_t v26 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  uint64_t v27 = *(int *)(v26 + 24);
  v25[*(int *)(v26 + 20)] = 0;
  uint64_t v28 = *(int *)(v26 + 24);
  long long v48 = *(_OWORD *)(v5 + v27);
  *(_OWORD *)&v25[v28] = v48;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v25, (uint64_t)v22, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v22, (uint64_t)v16, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v29 = *v16;
    uint64_t v30 = (char *)v16
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                 + 48);
    swift_unknownObjectRetain();
    static Duration.interval(fractionalSecondsLength:)(v29);
    uint64_t v54 = 1;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    *(void *)&long long v48 = static Duration.* infix<A>(_:_:)();
    uint64_t v32 = v31;
    int v33 = *(void (**)(char *, uint64_t))(v53 + 8);
    v33(v30, v6);
  }
  else
  {
    int v33 = *(void (**)(char *, uint64_t))(v53 + 8);
    swift_unknownObjectRetain();
    v33((char *)v16, v6);
    *(void *)&long long v48 = 0x40AAD21B3B700000;
    uint64_t v32 = 3;
  }
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v25, (uint64_t)v19, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v19, (uint64_t)v13, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v34 = v53;
    uint64_t v35 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                      + 48)];
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    uint64_t v35 = v13;
  }
  uint64_t v37 = v49;
  v36(v49, v35, v6);
  v36(v10, v37, v6);
  outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v19, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  uint64_t v38 = static Duration.bound(for:in:countingDown:roundingRule:)(v50, v52, v48, v32, v51 & 1, (uint64_t)v10);
  uint64_t v40 = v39;
  char v42 = v41;
  v33(v10, v6);
  if (v42)
  {
    uint64_t v43 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t v38 = v47(v38, v40, v43, v44);
  }
  outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v25, type metadata accessor for Duration.TimeFormatStyle);
  return v38;
}

uint64_t Duration.TimeFormatStyle.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.TimeFormatStyle.discreteInput(before:)(a1, a2, 0, MEMORY[0x1E4FBC6F0]);
}

uint64_t Duration.TimeFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(void, void, void, void))
{
  int v50 = a3;
  uint64_t v6 = v4;
  uint64_t v51 = a2;
  uint64_t v49 = a1;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v52 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (uint64_t *)((char *)&v46 - v17);
  uint64_t v19 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v46 - v23;
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v6, (uint64_t)&v46 - v23, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v24, (uint64_t)v18, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v47 = a4;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v26 = *v18;
      uint64_t v27 = (char *)v18
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                   + 48);
      static Duration.interval(fractionalSecondsLength:)(v26);
      uint64_t v53 = 1;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v28 = static Duration.* infix<A>(_:_:)();
      uint64_t v48 = v29;
      uint64_t v30 = *(void (**)(char *, uint64_t))(v52 + 8);
      v30(v27, v7);
    }
    else
    {
      uint64_t v31 = *v18;
      uint64_t v32 = (char *)v18
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                   + 48);
      static Duration.interval(fractionalSecondsLength:)(v31);
      uint64_t v53 = 1;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v33 = static Duration.* infix<A>(_:_:)();
      uint64_t v48 = v34;
      uint64_t v30 = *(void (**)(char *, uint64_t))(v52 + 8);
      uint64_t v35 = v32;
      uint64_t v28 = v33;
      v30(v35, v7);
    }
    a4 = v47;
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v52 + 8);
    v30((char *)v18, v7);
    uint64_t v28 = 0x40AAD21B3B700000;
    uint64_t v48 = 3;
  }
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v6, (uint64_t)v21, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v21, (uint64_t)v15, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v36 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                      + 48)];
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    uint64_t v36 = v15;
  }
  v37(v9, v36, v7);
  v37(v12, v9, v7);
  outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v21, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  uint64_t v38 = static Duration.bound(for:in:countingDown:roundingRule:)(v49, v51, v28, v48, v50 & 1, (uint64_t)v12);
  uint64_t v40 = v39;
  char v42 = v41;
  v30(v12, v7);
  if (v42)
  {
    uint64_t v43 = Duration.init(secondsComponent:attosecondsComponent:)();
    return a4(v38, v40, v43, v44);
  }
  return v38;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, Duration.TimeFormatStyle.Attributed.discreteInput(before:), a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, Duration.TimeFormatStyle.Attributed.discreteInput(after:), a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1]);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, Duration.TimeFormatStyle.discreteInput(before:), a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.TimeFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, Duration.TimeFormatStyle.discreteInput(after:), a2);
}

uint64_t specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  uint64_t v55 = v5;
  MEMORY[0x1F4188790](v4);
  int v50 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v51 = (char *)&v50 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v52 = (char *)&v50 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v50 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (uint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (uint64_t *)((char *)&v50 - v20);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v50 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Duration.TimeFormatStyle.Pattern.Fields, Duration.TimeFormatStyle.Pattern.Fields));
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = &v27[*(int *)(v28 + 56)];
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(a1, (uint64_t)v27, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(a2, (uint64_t)v29, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v27, (uint64_t)v21, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
      uint64_t v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                   + 48);
      uint64_t v24 = (char *)v21 + v31;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v32 = *v21;
        uint64_t v33 = *(void *)v29;
        uint64_t v34 = &v29[v31];
        uint64_t v35 = v55;
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
        uint64_t v37 = v53;
        uint64_t v38 = v24;
        uint64_t v39 = v54;
        v36(v53, v38, v54);
        uint64_t v40 = v52;
LABEL_9:
        v36(v40, v34, v39);
        if (v32 == v33)
        {
          char v43 = static FloatingPointRoundingRule.== infix(_:_:)();
          uint64_t v47 = *(void (**)(char *, uint64_t))(v35 + 8);
          v47(v40, v39);
          v47(v37, v39);
          goto LABEL_11;
        }
        uint64_t v48 = *(void (**)(char *, uint64_t))(v35 + 8);
        v48(v40, v39);
        v48(v37, v39);
        outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v27, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
LABEL_14:
        char v43 = 0;
        return v43 & 1;
      }
    }
    else
    {
      outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v27, (uint64_t)v18, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
      uint64_t v45 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                   + 48);
      uint64_t v24 = (char *)v18 + v45;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v32 = *v18;
        uint64_t v33 = *(void *)v29;
        uint64_t v34 = &v29[v45];
        uint64_t v35 = v55;
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
        uint64_t v37 = v51;
        uint64_t v46 = v24;
        uint64_t v39 = v54;
        v36(v51, v46, v54);
        uint64_t v40 = v50;
        goto LABEL_9;
      }
    }
LABEL_12:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v24, v54);
    outlined destroy of Any?((uint64_t)v27, &demangling cache variable for type metadata for (Duration.TimeFormatStyle.Pattern.Fields, Duration.TimeFormatStyle.Pattern.Fields));
    goto LABEL_14;
  }
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v27, (uint64_t)v24, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload()) {
    goto LABEL_12;
  }
  uint64_t v42 = v54;
  uint64_t v41 = v55;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v15, v29, v54);
  char v43 = static FloatingPointRoundingRule.== infix(_:_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v41 + 8);
  v44(v15, v42);
  v44(v24, v42);
LABEL_11:
  outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)v27, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  return v43 & 1;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with take of Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Duration.TimeFormatStyle.Attributed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(unsigned char *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  int v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if (v6)
  {
    if (!v8) {
      goto LABEL_9;
    }
  }
  else
  {
    if (*v5 != *v7) {
      LOBYTE(v8) = 1;
    }
    if (v8) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v9 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v9 + 20)))
  {
    uint64_t v12 = *(int *)(v9 + 24);
    long long v13 = *(_OWORD *)(a1 + v12);
    long long v14 = *(_OWORD *)(a2 + v12);
    long long v15 = v13;
    char v10 = specialized static Locale.== infix(_:_:)((uint64_t)&v15, (uint64_t)&v14);
    return v10 & 1;
  }
LABEL_9:
  char v10 = 0;
  return v10 & 1;
}

uint64_t specialized static Duration.TimeFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(unsigned char *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  int v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if (v6)
  {
    if (!v8) {
      return 0;
    }
  }
  else
  {
    if (*v5 != *v7) {
      LOBYTE(v8) = 1;
    }
    if (v8) {
      return 0;
    }
  }
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v9 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v9 + 20)))
  {
    uint64_t v10 = *(int *)(v9 + 24);
    long long v11 = *(_OWORD *)(a1 + v10);
    long long v13 = *(_OWORD *)(a2 + v10);
    long long v14 = v11;
    if (specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13)) {
      return 1;
    }
  }
  return 0;
}

void *specialized static Duration.TimeFormatStyle.Attributed.componentsFromPatternString(_:patternSet:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  v50[0] = a1;
  v50[1] = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v50[2] = 0;
  _OWORD v50[3] = v4;
  swift_bridgeObjectRetain();
  uint64_t v5 = v50;
  Swift::String_optional v7 = String.Iterator.next()();
  unint64_t object = v7.value._object;
  if (v7.value._object)
  {
    uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    long long v11 = 0;
    char v43 = a3;
    uint64_t v12 = a3 + 9;
    uint64_t v13 = 0;
    uint64_t v41 = v12;
    char v48 = 1;
    char v49 = 0;
    long long v14 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v47 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v16 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_80;
      }
      uint64_t v17 = v13;
      uint64_t v5 = v11;
      long long v11 = object;
      uint64_t v13 = countAndFlagsBits;
      if (v49) {
        break;
      }
      uint64_t v18 = v43[2];
      if (!v18) {
        goto LABEL_26;
      }
      BOOL v19 = v43[4] == countAndFlagsBits && object == (void *)v43[5];
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v10 >= v9) {
          goto LABEL_41;
        }
      }
      else
      {
        if (v18 == 1)
        {
LABEL_26:
          if (v10 >= v9) {
            goto LABEL_53;
          }
          goto LABEL_27;
        }
        uint64_t v45 = v10;
        if ((v43[6] != countAndFlagsBits || v11 != (void *)v43[7])
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v18 != 2)
          {
            uint64_t v25 = v41;
            uint64_t v10 = 2;
            while (!__OFADD__(v10, 1))
            {
              if (*(v25 - 1) == countAndFlagsBits && v11 == (void *)*v25) {
                goto LABEL_40;
              }
              uint64_t v42 = v10 + 1;
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                goto LABEL_40;
              }
              v25 += 2;
              ++v10;
              if (v42 == v18) {
                goto LABEL_52;
              }
            }
LABEL_80:
            __break(1u);
LABEL_81:
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
            goto LABEL_74;
          }
LABEL_52:
          uint64_t v10 = v45;
          uint64_t v13 = countAndFlagsBits;
          if (v45 >= v9)
          {
LABEL_53:
            char v48 = 0;
            if (countAndFlagsBits == 39) {
              goto LABEL_54;
            }
            goto LABEL_55;
          }
LABEL_27:
          if ((v48 & 1) == 0) {
            goto LABEL_53;
          }
LABEL_28:
          uint64_t v44 = v10;
          uint64_t v46 = v13;
          char v20 = 0;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_29;
          }
          goto LABEL_36;
        }
LABEL_40:
        uint64_t v10 = v45;
        uint64_t v13 = countAndFlagsBits;
        if (v45 >= v9) {
          goto LABEL_41;
        }
      }
      if (v5)
      {
        if (countAndFlagsBits == v17 && v11 == v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_41:
          char v48 = 1;
          if (countAndFlagsBits == 39) {
            goto LABEL_54;
          }
          goto LABEL_55;
        }
        uint64_t v44 = v10;
        uint64_t v46 = v13;
      }
      else
      {
        uint64_t v44 = v10;
        uint64_t v46 = v13;
      }
      char v20 = 1;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_29:
        uint64_t v21 = v47;
        goto LABEL_30;
      }
LABEL_36:
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
LABEL_30:
      unint64_t v23 = v21[2];
      unint64_t v22 = v21[3];
      if (v23 >= v22 >> 1) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
      }
      v21[2] = v23 + 1;
      uint64_t v47 = v21;
      uint64_t v24 = &v21[4 * v23];
      v24[4] = v14;
      *((unsigned char *)v24 + 40) = v48 & 1;
      v24[6] = v44;
      v24[7] = v9;
      uint64_t v10 = v9;
      char v48 = v20;
      long long v14 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = v46;
      if (countAndFlagsBits == 39)
      {
LABEL_54:
        if (v11 == (void *)0xE100000000000000) {
          goto LABEL_56;
        }
      }
LABEL_55:
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        }
        unint64_t v33 = v14[2];
        unint64_t v32 = v14[3];
        if (v33 >= v32 >> 1) {
          long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v14);
        }
        v14[2] = v33 + 1;
        uint64_t v34 = &v14[2 * v33];
        uint64_t v13 = v31;
        v34[4] = v31;
        v34[5] = v11;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
LABEL_56:
      if (v5)
      {
        if (v17 == 39 && v5 == (void *)0xE100000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v27 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
          }
          unint64_t v29 = v14[2];
          unint64_t v28 = v14[3];
          if (v29 >= v28 >> 1) {
            long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v14);
          }
          v14[2] = v29 + 1;
          uint64_t v30 = &v14[2 * v29];
          v30[4] = 39;
          v30[5] = 0xE100000000000000;
          swift_bridgeObjectRelease();
          uint64_t v13 = v27;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
      }
      v49 ^= 1u;
LABEL_7:
      uint64_t v5 = v50;
      Swift::String_optional v15 = String.Iterator.next()();
      unint64_t object = v15.value._object;
      uint64_t countAndFlagsBits = v15.value._countAndFlagsBits;
      uint64_t v9 = v16;
      if (!v15.value._object) {
        goto LABEL_71;
      }
    }
    if (v10 >= v9 || (v48 & 1) == 0) {
      goto LABEL_53;
    }
    goto LABEL_28;
  }
  uint64_t v10 = 0;
  long long v14 = (void *)MEMORY[0x1E4FBC860];
  char v48 = 1;
  uint64_t v47 = (void *)MEMORY[0x1E4FBC860];
LABEL_71:
  swift_bridgeObjectRelease();
  if (v14[2])
  {
    uint64_t v5 = (void *)String.count.getter();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_81;
    }
    uint64_t v35 = v47;
LABEL_74:
    unint64_t v37 = v35[2];
    unint64_t v36 = v35[3];
    if (v37 >= v36 >> 1) {
      uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
    }
    _OWORD v35[2] = v37 + 1;
    uint64_t v38 = &v35[4 * v37];
    v38[4] = v14;
    *((unsigned char *)v38 + 40) = v48;
    v38[6] = v10;
    v38[7] = v5;
    uint64_t v39 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = v47;
  }
  swift_bridgeObjectRelease();
  return v39;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t specialized Duration.TimeFormatStyle.Pattern.Fields.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x756E694D72756F68 && a2 == 0xEA00000000006574;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823AE4C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65536574756E696DLL && a2 == 0xEC000000646E6F63)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x80000001823AE4E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001823AE500)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Duration.TimeFormatStyle.Pattern.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73646C656966 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001823AE470)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Duration.TimeFormatStyle.Attributed.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E726574746170 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6970756F7267 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized Duration.TimeFormatStyle.Attributed.subscript.setter(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v3 = (char *)&v9 - v2;
  double v5 = MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v9 - v6, v5);
  outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(v1, (uint64_t)v3, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_setAtWritableKeyPath();
  outlined destroy of Duration.TimeFormatStyle.Pattern.Fields(v1, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  return outlined init with take of Duration.TimeFormatStyle.Pattern((uint64_t)v3, v1, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Pattern()
{
  return lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle);
  a1[2] = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle()
{
  return lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
  uint64_t result = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Attributed);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181D02748@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24));

  return swift_unknownObjectRetain();
}

uint64_t sub_181D02798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Duration.TimeFormatStyle.Pattern.Fields(a1, a2, type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

uint64_t sub_181D027CC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 20));
  return result;
}

uint64_t sub_181D02804(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(unsigned char *)(a2 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t sub_181D02838(uint64_t a1, uint64_t *a2)
{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(*a2);
}

uint64_t sub_181D02860(uint64_t a1)
{
  swift_retain();
  specialized Duration.TimeFormatStyle.Attributed.subscript.setter(a1);

  return swift_release();
}

uint64_t sub_181D028B8()
{
  return 8;
}

void *sub_181D028C4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
    Swift::String_optional v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)Swift::String_optional v15 = *(void *)v16;
    _OWORD v15[8] = v16[8];
    *((unsigned char *)a1 + *(int *)(v6 + 20)) = *((unsigned char *)a2 + *(int *)(v6 + 20));
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle(uint64_t a1)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0);

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for Duration.TimeFormatStyle(void *a1, void *a2)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((unsigned char *)a1 + *(int *)(v13 + 20)) = *((unsigned char *)a2 + *(int *)(v13 + 20));
  *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  uint64_t v14 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((unsigned char *)a1 + *(int *)(v14 + 20)) = *((unsigned char *)a2 + *(int *)(v14 + 20));
  uint64_t v15 = *(int *)(v14 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v16[1] = v18;
  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle(void *a1, void *a2)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((unsigned char *)a1 + *(int *)(v13 + 20)) = *((unsigned char *)a2 + *(int *)(v13 + 20));
  *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((unsigned char *)a1 + *(int *)(v13 + 20)) = *((unsigned char *)a2 + *(int *)(v13 + 20));
  uint64_t v14 = *(int *)(v13 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  swift_unknownObjectRelease();
  v15[1] = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D0338C);
}

uint64_t sub_181D0338C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_3(a1, a2, a3, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D033B8);
}

uint64_t sub_181D033B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_3(a1, a2, a3, a4, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Pattern(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    _OWORD v15[8] = v16[8];
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Pattern(uint64_t a1)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                 + 48);
  }
  else if (result)
  {
    return result;
  }
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void *initializeWithCopy for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    }
    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D03D5C);
}

uint64_t sub_181D03D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_3(a1, a2, a3, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D03D88);
}

uint64_t sub_181D03D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_3(a1, a2, a3, a4, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
}

void *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    _OWORD v15[8] = v16[8];
    uint64_t v17 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v17[1] = v19;
  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    }
    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a2 + v15);
  uint64_t v19 = *((void *)v17 + 1);
  *uint64_t v16 = v18;
  swift_unknownObjectRelease();
  v16[1] = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D04838);
}

uint64_t sub_181D04838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D0490C);
}

uint64_t sub_181D0490C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  return &unk_1ECA51340;
}

void *type metadata accessor for Duration.TimeFormatStyle.CodingKeys()
{
  return &unk_1ECA51550;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  return &unk_1ECA515E0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Pattern.Fields(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                 + 48);
  }
  else if (result)
  {
    return result;
  }
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void *initializeWithCopy for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Duration.TimeFormatStyle.Pattern.Fields((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Pattern.Fields()
{
  return lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields, (void (*)(uint64_t))type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Character] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Character] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Character] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Character]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Character] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

uint64_t initializeWithCopy for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Duration.TimeFormatStyle.Attributed.PatternComponent()
{
  return &type metadata for Duration.TimeFormatStyle.Attributed.PatternComponent;
}

unsigned char *storeEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D059A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  return &unk_1ECA51670;
}

unsigned char *storeEnumTagSinglePayload for Duration.TimeFormatStyle.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D05A74);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return &unk_1ECA51700;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  return &unk_1ECA51820;
}

unsigned char *storeEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D05B88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  return &unk_1ECA51790;
}

uint64_t NSDecimal.ParseStrategy.parse(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int64_t a6)
{
  uint64_t v134 = a2;
  uint64_t v132 = a1;
  uint64_t v9 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v137 = v9;
  uint64_t v138 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v139 = (uint64_t)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v136 = v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v142 = (char *)&v122 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v127 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  uint64_t v122 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
  MEMORY[0x1F4188790](v17 - 8);
  long long v130 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  unint64_t v128 = *(void *)(v19 - 8);
  int64_t v129 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v124 = (uint64_t)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle?);
  MEMORY[0x1F4188790](v21 - 8);
  unint64_t v23 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v135 = a6;
  uint64_t v24 = *(void *)(a6 + 16);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v123 = (char *)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v122 - v29;
  MEMORY[0x1F4188790](v31);
  unint64_t v33 = (char *)&v122 - v32;
  uint64_t v34 = type metadata accessor for NSDecimal.FormatStyle(0);
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  unint64_t v37 = (char *)&v122 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  double v39 = MEMORY[0x1F4188790](v38);
  uint64_t v140 = (uint64_t *)((char *)&v122 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v131 = a3;
  unint64_t v133 = a5;
  if (a3 >> 14 >= a5 >> 14) {
    goto LABEL_18;
  }
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16);
  v41(v33, v141, v24, v39);
  int v42 = swift_dynamicCast();
  char v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
  if (v42)
  {
    v43(v23, 0, 1, v34);
    outlined init with take of NSDecimal.FormatStyle((uint64_t)v23, (uint64_t)v37, type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v44 = v140;
    outlined init with take of NSDecimal.FormatStyle((uint64_t)&v37[*(int *)(v34 + 20)], (uint64_t)v140, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    swift_storeEnumTagMultiPayload();
    unint64_t v45 = *((void *)v37 + 1);
    uint64_t isUniquelyReferenced_nonNull_native = v141;
    uint64_t v47 = (uint64_t)v142;
    uint64_t v48 = v139;
  }
  else
  {
    v43(v23, 1, 1, v34);
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NSDecimal.FormatStyle?);
    uint64_t isUniquelyReferenced_nonNull_native = v141;
    ((void (*)(char *, uint64_t, uint64_t))v41)(v30, v141, v24);
    int64_t v50 = v129;
    uint64_t v49 = (uint64_t)v130;
    int v51 = swift_dynamicCast();
    uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, int64_t))(v128 + 56);
    if (v51)
    {
      v52(v49, 0, 1, v50);
      uint64_t v53 = v124;
      outlined init with take of NSDecimal.FormatStyle(v49, v124, type metadata accessor for NSDecimal.FormatStyle.Percent);
      uint64_t v44 = v140;
      outlined init with take of NSDecimal.FormatStyle(v53 + *(int *)(v50 + 20), (uint64_t)v140, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      swift_storeEnumTagMultiPayload();
      unint64_t v45 = *(void *)(v53 + 8);
      uint64_t v47 = (uint64_t)v142;
      uint64_t v48 = v139;
    }
    else
    {
      v52(v49, 1, 1, v50);
      outlined destroy of Any?(v49, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
      ((void (*)(char *, uint64_t, uint64_t))v41)(v123, isUniquelyReferenced_nonNull_native, v24);
      uint64_t v54 = (uint64_t)v127;
      uint64_t v55 = v126;
      int v56 = swift_dynamicCast();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56);
      uint64_t v48 = v139;
      if (!v56)
      {
        v57(v54, 1, 1, v55);
        outlined destroy of Any?(v54, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
        uint64_t v44 = v140;
        *uint64_t v140 = 0;
        *((unsigned char *)v44 + 8) = 1;
        _OWORD v44[2] = 0;
        _OWORD v44[3] = 0;
        v44[4] = 0;
        v44[5] = 0x1FFFFFFFELL;
        v44[7] = 0;
        v44[8] = 0;
        v44[6] = 0;
        *((_DWORD *)v44 + 18) = 131584;
        *((_WORD *)v44 + 38) = 512;
        uint64_t v59 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        long long v60 = (char *)v44 + v59[9];
        uint64_t v61 = type metadata accessor for FloatingPointRoundingRule();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v60, 1, 1, v61);
        long long v62 = (char *)v44 + v59[10];
        *(void *)long long v62 = 0;
        v62[8] = -1;
        *((unsigned char *)v44 + v59[11]) = 3;
        swift_storeEnumTagMultiPayload();
        uint64_t v47 = (uint64_t)v142;
        if (one-time initialization token for cache != -1) {
          goto LABEL_32;
        }
        goto LABEL_9;
      }
      v57(v54, 0, 1, v55);
      uint64_t v58 = v122;
      outlined init with take of NSDecimal.FormatStyle(v54, v122, type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v44 = v140;
      outlined init with copy of NSDecimal.FormatStyle(v58 + *(int *)(v55 + 24), (uint64_t)v140, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      swift_storeEnumTagMultiPayload();
      unint64_t v45 = *(void *)(v58 + 8);
      swift_unknownObjectRetain();
      outlined destroy of NSDecimal.FormatStyle(v58, type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v47 = (uint64_t)v142;
    }
  }
  while (1)
  {
    char v65 = *(unsigned char *)(isUniquelyReferenced_nonNull_native + *(int *)(v135 + 36));
    outlined init with copy of NSDecimal.FormatStyle((uint64_t)v44, v47, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v67 = *(uint64_t (**)(uint64_t, unint64_t))(v45 + 64);
    swift_unknownObjectRetain_n();
    uint64_t v68 = v67(ObjectType, v45);
    uint64_t v44 = v142;
    uint64_t v69 = v68;
    uint64_t v71 = v70;
    swift_unknownObjectRelease();
    unint64_t v72 = v137;
    uint64_t v73 = (void *)((char *)v44 + *(int *)(v137 + 20));
    uint64_t *v73 = v69;
    v73[1] = v71;
    *((unsigned char *)v44 + *(int *)(v72 + 24)) = v65;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v74 = static ICULegacyNumberFormatter.cache;
    uint64_t v75 = unk_1E8ED3298;
    outlined init with copy of NSDecimal.FormatStyle((uint64_t)v44, v48, type metadata accessor for ICULegacyNumberFormatter.Signature);
    unint64_t v76 = (*(unsigned __int8 *)(v138 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    uint64_t v77 = swift_allocObject();
    uint64_t v78 = outlined init with take of NSDecimal.FormatStyle(v48, v77 + v76, type metadata accessor for ICULegacyNumberFormatter.Signature);
    MEMORY[0x1F4188790](v78);
    *(&v122 - 2) = (uint64_t)v44;
    BOOL v79 = (uint64_t *)(v75 + 16);
    uint64_t v48 = v75 + 24;
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v75 + 24));
    _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICULegacyNumberB0C9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLV_AJTG5TA_0(v75 + 16, v143);
    os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 24));
    swift_release();
    if (v143[0])
    {
      swift_release();
      goto LABEL_14;
    }
    uint64_t v47 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v75 + 24));
    uint64_t v91 = *(void *)(*(void *)(v75 + 16) + 16);
    uint64_t v141 = *(void *)(v75 + 16);
    if (v74 >= v91) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t *v79 = MEMORY[0x1E4FBC868];
    }
    swift_retain();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = *v79;
    uint64_t v92 = v144[0];
    uint64_t *v79 = 0x8000000000000000;
    unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v44);
    uint64_t v95 = *(void *)(v92 + 16);
    BOOL v96 = (v93 & 1) == 0;
    uint64_t v97 = v95 + v96;
    if (!__OFADD__(v95, v96)) {
      break;
    }
    __break(1u);
LABEL_32:
    swift_once();
LABEL_9:
    uint64_t v63 = static LocaleCache.cache + 16;
    uint64_t v64 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v64);
    closure #1 in LocaleCache.autoupdatingCurrent.getter(v63, v143);
    os_unfair_lock_unlock(v64);
    swift_release_n();
    unint64_t v45 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  }
  char v98 = v93;
  if (*(void *)(v92 + 24) < v97)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v97, isUniquelyReferenced_nonNull_native);
    uint64_t v99 = v144[0];
    unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v44);
    if ((v98 & 1) != (v101 & 1)) {
      goto LABEL_72;
    }
    unint64_t v94 = v100;
    if ((v98 & 1) == 0)
    {
LABEL_68:
      uint64_t v120 = v139;
      unint64_t v121 = v94;
      outlined init with copy of NSDecimal.FormatStyle((uint64_t)v44, v139, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v121, v120, v47, (void *)v99);
LABEL_69:
      *(void *)(v75 + 16) = v99;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 24));
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_14:
      outlined destroy of NSDecimal.FormatStyle((uint64_t)v44, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      unint64_t v80 = String.subscript.getter();
      uint64_t v82 = v81;
      uint64_t v84 = v83;
      uint64_t v86 = v85;
      v144[0] = 0;
      specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v80, v81, v83, v85, v144);
      if ((v87 & 0x100000000) == 0)
      {
        v143[0] = v80;
        v143[1] = v82;
        v143[2] = v84;
        v143[3] = v86;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        uint64_t v88 = String.Index.init<A>(utf16Offset:in:)();
        swift_unknownObjectRelease();
        swift_release();
        outlined destroy of NSDecimal.FormatStyle((uint64_t)v140, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
        char v89 = 0;
LABEL_19:
        LOBYTE(v143[0]) = v89;
        return v88;
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of NSDecimal.FormatStyle((uint64_t)v140, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_18:
      uint64_t v88 = 0;
      char v89 = 1;
      goto LABEL_19;
    }
LABEL_30:
    uint64_t v102 = *(void *)(v99 + 56);
    uint64_t v103 = 8 * v94;
    swift_release();
    *(void *)(v102 + v103) = v47;
    goto LABEL_69;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v99 = v92;
    if ((v93 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_30;
  }
  LODWORD(v127) = v93;
  unint64_t v128 = v94;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v104 = static _DictionaryStorage.copy(original:)();
  uint64_t v99 = v104;
  if (!*(void *)(v92 + 16))
  {
LABEL_67:
    swift_bridgeObjectRelease();
    uint64_t v44 = v142;
    unint64_t v94 = v128;
    if ((v127 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_30;
  }
  uint64_t v105 = (char *)(v104 + 64);
  uint64_t v106 = 1 << *(unsigned char *)(v99 + 32);
  long long v130 = (char *)(v92 + 64);
  unint64_t v107 = (unint64_t)(v106 + 63) >> 6;
  if (v99 != v92 || v105 >= &v130[8 * v107]) {
    memmove(v105, v130, 8 * v107);
  }
  int64_t v135 = 0;
  *(void *)(v99 + 16) = *(void *)(v92 + 16);
  uint64_t v108 = 1 << *(unsigned char *)(v92 + 32);
  uint64_t v109 = -1;
  if (v108 < 64) {
    uint64_t v109 = ~(-1 << v108);
  }
  unint64_t v137 = v109 & *(void *)(v92 + 64);
  int64_t v129 = (unint64_t)(v108 + 63) >> 6;
  uint64_t v110 = v139;
  while (1)
  {
    if (v137)
    {
      unint64_t v111 = __clz(__rbit64(v137));
      v137 &= v137 - 1;
      unint64_t v112 = v111 | (v135 << 6);
      goto LABEL_41;
    }
    int64_t v116 = v135 + 1;
    if (__OFADD__(v135, 1))
    {
      __break(1u);
      goto LABEL_71;
    }
    if (v116 >= v129) {
      goto LABEL_67;
    }
    unint64_t v117 = *(void *)&v130[8 * v116];
    int64_t v118 = v135 + 1;
    if (!v117)
    {
      int64_t v118 = v135 + 2;
      if (v135 + 2 >= v129) {
        goto LABEL_67;
      }
      unint64_t v117 = *(void *)&v130[8 * v118];
      if (!v117)
      {
        int64_t v118 = v135 + 3;
        if (v135 + 3 >= v129) {
          goto LABEL_67;
        }
        unint64_t v117 = *(void *)&v130[8 * v118];
        if (!v117)
        {
          int64_t v118 = v135 + 4;
          if (v135 + 4 >= v129) {
            goto LABEL_67;
          }
          unint64_t v117 = *(void *)&v130[8 * v118];
          if (!v117)
          {
            int64_t v118 = v135 + 5;
            if (v135 + 5 >= v129) {
              goto LABEL_67;
            }
            unint64_t v117 = *(void *)&v130[8 * v118];
            if (!v117)
            {
              int64_t v118 = v135 + 6;
              if (v135 + 6 >= v129) {
                goto LABEL_67;
              }
              unint64_t v117 = *(void *)&v130[8 * v118];
              if (!v117)
              {
                int64_t v118 = v135 + 7;
                if (v135 + 7 >= v129) {
                  goto LABEL_67;
                }
                unint64_t v117 = *(void *)&v130[8 * v118];
                if (!v117)
                {
                  int64_t v118 = v135 + 8;
                  if (v135 + 8 >= v129) {
                    goto LABEL_67;
                  }
                  unint64_t v117 = *(void *)&v130[8 * v118];
                  if (!v117) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_66:
    unint64_t v137 = (v117 - 1) & v117;
    int64_t v135 = v118;
    unint64_t v112 = __clz(__rbit64(v117)) + (v118 << 6);
LABEL_41:
    uint64_t v113 = *(void *)(v92 + 48);
    unint64_t v136 = *(void *)(v138 + 72) * v112;
    outlined init with copy of NSDecimal.FormatStyle(v113 + v136, v110, type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v114 = 8 * v112;
    uint64_t v115 = *(void *)(*(void *)(v92 + 56) + 8 * v112);
    outlined init with take of NSDecimal.FormatStyle(v110, *(void *)(v99 + 48) + v136, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v99 + 56) + v114) = v115;
    swift_retain();
  }
  int64_t v119 = v135 + 9;
  if (v135 + 9 >= v129) {
    goto LABEL_67;
  }
  unint64_t v117 = *(void *)&v130[8 * v119];
  if (v117)
  {
    int64_t v118 = v135 + 9;
    goto LABEL_66;
  }
  while (1)
  {
    int64_t v118 = v119 + 1;
    if (__OFADD__(v119, 1)) {
      break;
    }
    if (v118 >= v129) {
      goto LABEL_67;
    }
    unint64_t v117 = *(void *)&v130[8 * v118];
    ++v119;
    if (v117) {
      goto LABEL_66;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.ParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t NSDecimal.ParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*NSDecimal.ParseStrategy.formatStyle.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.ParseStrategy.lenient.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t NSDecimal.ParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*NSDecimal.ParseStrategy.lenient.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void NSDecimal.ParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 36)));
}

uint64_t static NSDecimal.ParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    uint64_t v4 = type metadata accessor for NSDecimal.ParseStrategy();
    char v5 = *(unsigned char *)(a1 + *(int *)(v4 + 36)) ^ *(unsigned char *)(a2 + *(int *)(v4 + 36)) ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t NSDecimal.ParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x745374616D726F66 && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65696E656CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t NSDecimal.ParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x746E65696E656CLL;
  }
  else {
    return 0x745374616D726F66;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys(uint64_t a1)
{
  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  Hasher.init(_seed:)();
  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return NSDecimal.ParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = NSDecimal.ParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t NSDecimal.ParseStrategy.encode(to:)(void *a1, uint64_t a2)
{
  v9[0] = a2;
  v9[2] = *(void *)(a2 + 16);
  type metadata accessor for NSDecimal.ParseStrategy.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)v9 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  uint64_t v7 = v9[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v7)
  {
    char v10 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t type metadata accessor for NSDecimal.ParseStrategy.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Int NSDecimal.ParseStrategy.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(a1 + 36)));
  return Hasher._finalize()();
}

uint64_t NSDecimal.ParseStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v28 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v31 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSDecimal.ParseStrategy.CodingKeys();
  swift_getWitnessTable();
  uint64_t v30 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v27 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v29 = a3;
  uint64_t v10 = type metadata accessor for NSDecimal.ParseStrategy();
  uint64_t v25 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v23 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = (uint64_t)v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v32 = a1;
  uint64_t v24 = v12;
  uint64_t v14 = v27;
  uint64_t v15 = v28;
  char v34 = 0;
  uint64_t v16 = v30;
  uint64_t v17 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v24, v17, a2);
  char v33 = 1;
  char v18 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v16);
  char v19 = v18 & 1;
  uint64_t v21 = v24;
  uint64_t v20 = v25;
  v24[*(int *)(v10 + 36)] = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v26, v21, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v21, v10);
}

void protocol witness for ParseStrategy.parse(_:) in conformance NSDecimal.ParseStrategy<A>(NSDecimal **a1@<X0>, uint64_t a2@<X8>)
{
  NSDecimal.ParseStrategy.parse(_:)(*a1, *(Swift::String *)a1);
  if (!v6)
  {
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 16) = v5;
  }
}

uint64_t specialized NSDecimal.ParseStrategy.parse(_:)(unint64_t a1, unint64_t a2)
{
  void (*v22)(unsigned char *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;
  Swift::String v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  Swift::String v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v60;
  Swift::String v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  __int16 v72;
  int v73;
  int v74;
  Swift::String v75;
  int v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  int v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  void *v95;
  void (*v96)(unsigned char *__return_ptr, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  Swift::String v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  Swift::String v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v126;
  Swift::String v127;
  int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  __int16 v139;
  int v140;
  int v141;
  Swift::String v142;
  int v143;
  Swift::String v144;
  Swift::String v145;
  Swift::String v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Swift::String v150;
  Swift::String v151;
  Swift::String v152;
  uint64_t v153;
  Swift::String v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  uint64_t *v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  id v169;
  id v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  char v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unsigned char v198[20];
  unsigned char v199[140];
  unsigned char v200[140];
  unsigned char v201[144];
  unsigned char v202[40];
  uint64_t v203;
  char v204;
  uint64_t v205;

  long long v205 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v9 = a1;
  }
  uint64_t v10 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v10 = 11;
  }
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15, v10 | (v9 << 16));
  if ((v12 & 0x100000000) == 0) {
    return v11;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v202);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v202, (uint64_t)&v203);
  if (v204 != 1) {
    return v203;
  }
  uint64_t v189 = v3;
  specialized NSDecimal.init(_:)(3.14);
  unint64_t v191 = v13;
  Swift::String v193 = v14;
  LODWORD(v192) = v15;
  id v187 = v2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  uint64_t v16 = *(void *)(v2 + 8);
  long long v185 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v188 = v6;
  uint64_t v18 = ObjectType;
  char v19 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 472);
  swift_unknownObjectRetain();
  uint64_t v190 = v19(v18, v16);
  long long v186 = (char *)v20;
  swift_unknownObjectRelease();
  uint64_t v21 = (void *)(v16 + 464);
  uint64_t v22 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v16 + 464);
  swift_unknownObjectRetain();
  v22(v200, v18, v16);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v200, (uint64_t)v201);
  outlined init with copy of NSDecimal.FormatStyle(v187, (uint64_t)v8, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v23 = v188;
  uint64_t v24 = (uint64_t *)&v8[*(int *)(v188 + 20)];
  uint64_t v25 = (uint64_t)v186;
  *uint64_t v24 = v190;
  v24[1] = v25;
  outlined init with take of LocalePreferences?((uint64_t)v201, (uint64_t)&v8[*(int *)(v23 + 24)]);
  uint64_t v26 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  long long v186 = v8;
  outlined destroy of NSDecimal.FormatStyle((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  uint64_t v183 = a1;
  long long v184 = (void *)a2;
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v28 = v191;
    uint64_t v29 = v193;
    LODWORD(v30) = v192;
    uint64_t v21 = v189;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v27, v191, v193, v192);
    if (!v21) {
      goto LABEL_41;
    }

    swift_release();
    uint64_t v31 = v29;
    uint64_t v189 = 0;
  }
  else
  {
    LODWORD(v30) = v192;
    uint64_t v28 = v191;
    uint64_t v31 = v193;
  }
  while (2)
  {
    *(void *)uint64_t v200 = v28;
    char v33 = HIDWORD(v28);
    char v34 = HIWORD(v28);
    uint64_t v35 = v31 >> 16;
    *(_DWORD *)&v200[8] = v31;
    uint64_t v36 = HIDWORD(v31);
    unint64_t v37 = HIWORD(v31);
    *(_WORD *)&v200[12] = WORD2(v31);
    uint64_t v38 = v30;
    double v39 = v37;
    uint64_t v40 = HIWORD(v38);
    *(_WORD *)&v200[14] = v37;
    *(_DWORD *)&v200[16] = v38;
    if (!_So9NSDecimala__length_getter(v200))
    {
      *(void *)uint64_t v200 = v28;
      *(_WORD *)&v200[8] = v193;
      *(_WORD *)&v200[10] = v35;
      *(_WORD *)&v200[12] = v36;
      *(_WORD *)&v200[14] = v39;
      *(_DWORD *)&v200[16] = v38;
      if (_So9NSDecimala__isNegative_getter(v200))
      {
        uint64_t v64 = 5136718;
        char v65 = 0xE300000000000000;
        goto LABEL_56;
      }
    }
    *(void *)uint64_t v200 = v28;
    *(_WORD *)&v200[8] = v193;
    *(_WORD *)&v200[10] = v35;
    *(_WORD *)&v200[12] = v36;
    *(_WORD *)&v200[14] = v39;
    *(_DWORD *)&v200[16] = v38;
    if (!_So9NSDecimala__length_getter(v200))
    {
      char v65 = 0xE100000000000000;
      uint64_t v64 = 48;
      goto LABEL_56;
    }
    *(void *)uint64_t v198 = 0;
    *(void *)&v198[8] = 0xE000000000000000;
    *(void *)uint64_t v200 = v28;
    *(_WORD *)&v200[8] = v193;
    *(_WORD *)&v200[10] = v35;
    *(_WORD *)&v200[12] = v36;
    *(_WORD *)&v200[14] = v39;
    *(_DWORD *)&v200[16] = v38;
    *(void *)uint64_t v199 = v28;
    *(_WORD *)&v199[8] = v193;
    *(_WORD *)&v199[10] = v35;
    *(_WORD *)&v199[12] = v36;
    *(_WORD *)&v199[14] = v39;
    *(_DWORD *)&v199[16] = v38;
    if ((int)_So9NSDecimala__exponent_getter(v199) >= 1)
    {
      do
      {
        LODWORD(v192) = v38;
        v41._uint64_t countAndFlagsBits = 48;
        v41._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v41);
        *(_DWORD *)uint64_t v199 = v28;
        *(_WORD *)&v199[4] = v33;
        *(_WORD *)&v199[6] = v34;
        *(_WORD *)&v199[8] = v193;
        *(_WORD *)&v199[10] = v35;
        *(_WORD *)&v199[12] = v36;
        *(_WORD *)&v199[14] = v39;
        *(_WORD *)&v199[16] = v192;
        *(_WORD *)&v199[18] = v40;
        int v42 = _So9NSDecimala__exponent_getter(v199);
        _So9NSDecimala__exponent_setter((v42 - 1), v200);
        uint64_t v28 = *(unsigned int *)v200;
        LOWORD(v33) = *(_WORD *)&v200[4];
        LOWORD(v34) = *(_WORD *)&v200[6];
        LOWORD(v35) = *(_WORD *)&v200[10];
        LOWORD(v36) = *(_WORD *)&v200[12];
        double v39 = *(_WORD *)&v200[14];
        uint64_t v38 = *(unsigned __int16 *)&v200[16];
        uint64_t v40 = *(unsigned __int16 *)&v200[18];
        *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
        *(_WORD *)&v199[4] = *(_WORD *)&v200[4];
        *(_WORD *)&v199[6] = *(_WORD *)&v200[6];
        Swift::String v193 = *(unsigned __int16 *)&v200[8];
        *(_WORD *)&v199[8] = *(_WORD *)&v200[8];
        *(_WORD *)&v199[10] = *(_WORD *)&v200[10];
        *(_WORD *)&v199[12] = *(_WORD *)&v200[12];
        *(_WORD *)&v199[14] = *(_WORD *)&v200[14];
        *(_WORD *)&v199[16] = *(_WORD *)&v200[16];
        *(_WORD *)&v199[18] = *(_WORD *)&v200[18];
      }
      while ((int)_So9NSDecimala__exponent_getter(v199) > 0);
    }
    *(_DWORD *)uint64_t v199 = v28;
    *(_WORD *)&v199[4] = v33;
    *(_WORD *)&v199[6] = v34;
    *(_WORD *)&v199[8] = v193;
    *(_WORD *)&v199[10] = v35;
    *(_WORD *)&v199[12] = v36;
    *(_WORD *)&v199[14] = v39;
    *(_WORD *)&v199[16] = v38;
    *(_WORD *)&v199[18] = v40;
    char v43 = _So9NSDecimala__exponent_getter(v199);
    uint64_t v44 = v193;
    if (!v43)
    {
      _So9NSDecimala__exponent_setter(1, v200);
      uint64_t v28 = *(unsigned int *)v200;
      LOWORD(v33) = *(_WORD *)&v200[4];
      LOWORD(v34) = *(_WORD *)&v200[6];
      uint64_t v44 = *(unsigned __int16 *)&v200[8];
      LOWORD(v35) = *(_WORD *)&v200[10];
      LOWORD(v36) = *(_WORD *)&v200[12];
      double v39 = *(_WORD *)&v200[14];
      uint64_t v38 = *(unsigned __int16 *)&v200[16];
      uint64_t v40 = *(unsigned __int16 *)&v200[18];
    }
    unint64_t v191 = v28;
    *(_DWORD *)uint64_t v199 = v28;
    *(_WORD *)&v199[4] = v33;
    *(_WORD *)&v199[6] = v34;
    Swift::String v193 = v44;
    *(_WORD *)&v199[8] = v44;
    *(_WORD *)&v199[10] = v35;
    *(_WORD *)&v199[12] = v36;
    *(_WORD *)&v199[14] = v39;
    *(_WORD *)&v199[16] = v38;
    LODWORD(v190) = v40;
    *(_WORD *)&v199[18] = v40;
    if (!_So9NSDecimala__length_getter(v199))
    {
      unint64_t v45 = v191;
      uint64_t v46 = v193;
      uint64_t v47 = v190;
LABEL_45:
      LODWORD(v190) = v47;
      *(_DWORD *)uint64_t v199 = v45;
      *(_WORD *)&v199[4] = v33;
      *(_WORD *)&v199[6] = v34;
      *(_WORD *)&v199[8] = v46;
      *(_WORD *)&v199[10] = v35;
      *(_WORD *)&v199[12] = v36;
      *(_WORD *)&v199[14] = v39;
      *(_WORD *)&v199[16] = v38;
      *(_WORD *)&v199[18] = v47;
      uint64_t v68 = v46;
      uint64_t v69 = v45;
      uint64_t v70 = _So9NSDecimala__exponent_getter(v199);
      uint64_t v71 = v69;
      if (v70 <= 0)
      {
        unint64_t v191 = v69;
        *(_DWORD *)uint64_t v199 = v69;
        *(_WORD *)&v199[4] = v33;
        *(_WORD *)&v199[6] = v34;
        Swift::String v193 = v68;
        *(_WORD *)&v199[8] = v68;
        *(_WORD *)&v199[10] = v35;
        *(_WORD *)&v199[12] = v36;
        *(_WORD *)&v199[14] = v39;
        *(_WORD *)&v199[16] = v38;
        uint64_t v73 = v190;
        *(_WORD *)&v199[18] = v190;
        uint64_t v74 = _So9NSDecimala__exponent_getter(v199);
        LODWORD(v192) = v38;
        if (v74)
        {
          unint64_t v72 = v193;
          do
          {
            v75._uint64_t countAndFlagsBits = 48;
            v75._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v75);
            *(_DWORD *)uint64_t v199 = v191;
            *(_WORD *)&v199[4] = v33;
            *(_WORD *)&v199[6] = v34;
            *(_WORD *)&v199[8] = v72;
            *(_WORD *)&v199[10] = v35;
            *(_WORD *)&v199[12] = v36;
            *(_WORD *)&v199[14] = v39;
            *(_WORD *)&v199[16] = v192;
            *(_WORD *)&v199[18] = v73;
            unint64_t v76 = _So9NSDecimala__exponent_getter(v199);
            _So9NSDecimala__exponent_setter((v76 + 1), v200);
            LOWORD(v33) = *(_WORD *)&v200[4];
            LOWORD(v34) = *(_WORD *)&v200[6];
            unint64_t v72 = *(_WORD *)&v200[8];
            LOWORD(v35) = *(_WORD *)&v200[10];
            LOWORD(v36) = *(_WORD *)&v200[12];
            double v39 = *(_WORD *)&v200[14];
            uint64_t v73 = *(unsigned __int16 *)&v200[18];
            unint64_t v191 = *(unsigned int *)v200;
            *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
            *(_WORD *)&v199[4] = *(_WORD *)&v200[4];
            *(_WORD *)&v199[6] = *(_WORD *)&v200[6];
            *(_WORD *)&v199[8] = *(_WORD *)&v200[8];
            *(_WORD *)&v199[10] = *(_WORD *)&v200[10];
            *(_WORD *)&v199[12] = *(_WORD *)&v200[12];
            *(_WORD *)&v199[14] = *(_WORD *)&v200[14];
            LODWORD(v192) = *(unsigned __int16 *)&v200[16];
            *(_WORD *)&v199[16] = *(_WORD *)&v200[16];
            *(_WORD *)&v199[18] = *(_WORD *)&v200[18];
          }
          while (_So9NSDecimala__exponent_getter(v199));
        }
        else
        {
          unint64_t v72 = v193;
        }
        LODWORD(v190) = v73;
        v77._uint64_t countAndFlagsBits = 46;
        v77._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v77);
        v78._uint64_t countAndFlagsBits = 48;
        v78._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v78);
        LOWORD(v38) = v192;
        uint64_t v71 = v191;
      }
      else
      {
        unint64_t v72 = v68;
      }
      *(_DWORD *)uint64_t v199 = v71;
      *(_WORD *)&v199[4] = v33;
      *(_WORD *)&v199[6] = v34;
      *(_WORD *)&v199[8] = v72;
      *(_WORD *)&v199[10] = v35;
      *(_WORD *)&v199[12] = v36;
      *(_WORD *)&v199[14] = v39;
      *(_WORD *)&v199[16] = v38;
      *(_WORD *)&v199[18] = v190;
      if (_So9NSDecimala__isNegative_getter(v199))
      {
        v79._uint64_t countAndFlagsBits = 45;
        v79._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v79);
      }
      *(void *)uint64_t v199 = *(void *)v198;
      *(void *)&v199[8] = *(void *)&v198[8];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      uint64_t v64 = String.init<A>(_:)();
      char v65 = v80;
      goto LABEL_56;
    }
    uint64_t v28 = 3435973837;
    unint64_t v45 = v191;
    uint64_t v46 = v193;
    uint64_t v47 = v190;
    while (1)
    {
      unint64_t v191 = v45;
      Swift::String v193 = v46;
      LODWORD(v190) = v47;
      *(_DWORD *)uint64_t v199 = v45;
      *(_WORD *)&v199[4] = v33;
      *(_WORD *)&v199[6] = v34;
      *(_WORD *)&v199[8] = v46;
      *(_WORD *)&v199[10] = v35;
      *(_WORD *)&v199[12] = v36;
      *(_WORD *)&v199[14] = v39;
      *(_WORD *)&v199[16] = v38;
      *(_WORD *)&v199[18] = v47;
      if (!_So9NSDecimala__exponent_getter(v199))
      {
        LODWORD(v192) = v38;
        v48._uint64_t countAndFlagsBits = 46;
        v48._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        LOWORD(v38) = v192;
      }
      *(_DWORD *)uint64_t v199 = v191;
      *(_WORD *)&v199[4] = v33;
      *(_WORD *)&v199[6] = v34;
      *(_WORD *)&v199[8] = v193;
      *(_WORD *)&v199[10] = v35;
      *(_WORD *)&v199[12] = v36;
      *(_WORD *)&v199[14] = v39;
      *(_WORD *)&v199[16] = v38;
      *(_WORD *)&v199[18] = v190;
      uint64_t v49 = _So9NSDecimala__exponent_getter(v199);
      _So9NSDecimala__exponent_setter((v49 + 1), v200);
      int64_t v50 = *(unsigned int *)v200;
      int v51 = *(_WORD *)&v200[6];
      int v192 = *(unsigned __int16 *)&v200[8];
      Swift::String v193 = *(unsigned __int16 *)&v200[4];
      uint64_t v190 = *(unsigned __int16 *)&v200[12];
      unint64_t v191 = *(unsigned __int16 *)&v200[10];
      uint64_t v181 = *(unsigned __int16 *)&v200[14];
      LODWORD(v182) = *(unsigned __int16 *)&v200[16];
      char v180 = *(unsigned __int16 *)&v200[18];
      NSDecimal.asVariableLengthInteger()(*(unsigned int *)v200 | ((unint64_t)*(unsigned __int16 *)&v200[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v200[6] << 48), *(unsigned __int16 *)&v200[8] | ((unint64_t)*(unsigned __int16 *)&v200[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v200[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v200[14] << 48), *(unsigned __int16 *)&v200[16] | (*(unsigned __int16 *)&v200[18] << 16));
      uint64_t v53 = v52;
      uint64_t v54 = *(void *)(v52 + 16);
      if (v54) {
        break;
      }
      LODWORD(v34) = 0;
      uint64_t v30 = MEMORY[0x1E4FBC860];
      uint64_t v58 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v58)
      {
LABEL_31:
        if (!*(_WORD *)(v30 + 2 * v58 + 30))
        {
          do
          {
            *(void *)(v30 + 16) = v58 - 1;
            if (v58 == 1) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v30 + 28 + 2 * v58--));
        }
      }
LABEL_34:
      swift_bridgeObjectRelease();
      *(_DWORD *)uint64_t v199 = v50;
      *(_WORD *)&v199[4] = v193;
      *(_WORD *)&v199[6] = v51;
      *(_WORD *)&v199[8] = v192;
      *(_WORD *)&v199[10] = v191;
      *(_WORD *)&v199[12] = v190;
      *(_WORD *)&v199[14] = v181;
      *(_WORD *)&v199[16] = v182;
      *(_WORD *)&v199[18] = v180;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v30);
      if (v21) {
        goto LABEL_115;
      }
      uint64_t v189 = 0;
      long long v60 = *(void *)(v30 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v60))
      {
LABEL_114:
        uint64_t v178 = 0;
        long long v177 = 3455;
        uint64_t v176 = 2;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_115:
        swift_bridgeObjectRelease();
        swift_unexpectedError();
        __break(1u);
        goto LABEL_116;
      }
      _So9NSDecimala__length_setter(v60, v199);
      *(_DWORD *)uint64_t v200 = *(_DWORD *)v199;
      *(_OWORD *)&v200[4] = *(_OWORD *)&v199[4];
      *(void *)uint64_t v199 = v34 | 0x30;
      v61._uint64_t countAndFlagsBits = MEMORY[0x185302020](v199, 1);
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      unint64_t v191 = *(unsigned int *)v200;
      LOWORD(v33) = *(_WORD *)&v200[4];
      LOWORD(v34) = *(_WORD *)&v200[6];
      Swift::String v193 = *(unsigned __int16 *)&v200[8];
      LOWORD(v35) = *(_WORD *)&v200[10];
      LOWORD(v36) = *(_WORD *)&v200[12];
      double v39 = *(_WORD *)&v200[14];
      LODWORD(v192) = *(unsigned __int16 *)&v200[16];
      long long v62 = *(unsigned __int16 *)&v200[18];
      *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
      *(_WORD *)&v199[4] = *(_WORD *)&v200[4];
      *(_WORD *)&v199[6] = *(_WORD *)&v200[6];
      *(_WORD *)&v199[8] = *(_WORD *)&v200[8];
      *(_WORD *)&v199[10] = *(_WORD *)&v200[10];
      *(_WORD *)&v199[12] = *(_WORD *)&v200[12];
      *(_WORD *)&v199[14] = *(_WORD *)&v200[14];
      *(_WORD *)&v199[16] = *(_WORD *)&v200[16];
      *(_WORD *)&v199[18] = *(_WORD *)&v200[18];
      uint64_t v63 = _So9NSDecimala__length_getter(v199);
      unint64_t v45 = v191;
      uint64_t v47 = v62;
      uint64_t v46 = v193;
      uint64_t v38 = v192;
      if (!v63) {
        goto LABEL_45;
      }
    }
    long long v179 = v50;
    uint64_t v30 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v30 + 16) = v54;
    bzero((void *)(v30 + 32), 2 * v54);
    uint64_t v55 = *(unsigned __int16 *)(2 * v54 + v53 + 30);
    int v56 = v55 / 0xA;
    do
    {
      *(_WORD *)(v30 + 30 + 2 * v54) = v56;
      LODWORD(v34) = v55 % 0xA;
      if (v54 == 1)
      {
        LODWORD(v50) = v179;
        uint64_t v58 = *(void *)(v30 + 16);
        if (!v58) {
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      uint64_t v55 = *(unsigned __int16 *)(v53 + 28 + 2 * v54) | (v34 << 16);
      int v56 = v55 / 0xA;
      uint64_t v57 = v54 - 2;
      --v54;
    }
    while (v57 < *(void *)(v30 + 16));
    __break(1u);
LABEL_41:
    uint64_t v66 = v28;
    uint64_t v67 = swift_retain_n();
    uint64_t v190 = (uint64_t)&v179;
    MEMORY[0x1F4188790](v67);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v179 - 8), (uint64_t *)v200);
    uint64_t v189 = v21;
    if (!v21)
    {
      uint64_t v64 = *(void *)v200;
      char v65 = *(void *)&v200[8];
      swift_release();
      swift_release_n();
      if (!v65)
      {
        uint64_t v31 = v193;
        uint64_t v28 = v66;
        continue;
      }
LABEL_56:
      uint64_t v196 = v64;
      uint64_t v197 = v65;
      *(void *)uint64_t v200 = specialized NSDecimal.init(_:)(0x3039uLL);
      *(_DWORD *)&v200[8] = v81;
      *(_WORD *)&v200[12] = v82;
      *(_WORD *)&v200[14] = v83;
      *(_WORD *)&v200[16] = v84;
      *(_WORD *)&v200[18] = v85;
      _So9NSDecimala__isNegative_setter_0(v200);
      unint64_t v191 = *(unsigned int *)v200;
      Swift::String v193 = *(unsigned __int16 *)&v200[4];
      uint64_t v190 = *(unsigned __int16 *)&v200[6];
      uint64_t v86 = *(unsigned __int16 *)&v200[8];
      uint64_t v87 = *(unsigned __int16 *)&v200[10];
      uint64_t v88 = *(unsigned __int16 *)&v200[12];
      char v89 = *(unsigned __int16 *)&v200[14];
      LODWORD(v90) = *(unsigned __int16 *)&v200[16];
      LODWORD(v192) = *(unsigned __int16 *)&v200[18];
      uint64_t v91 = *(void *)(v185 + 8);
      uint64_t v92 = swift_getObjectType();
      uint64_t v181 = v92;
      long long v185 = v91 + 472;
      int v93 = *(uint64_t (**)(uint64_t, uint64_t))(v91 + 472);
      swift_unknownObjectRetain();
      long long v185 = v93(v92, v91);
      uint64_t v182 = v94;
      swift_unknownObjectRelease();
      uint64_t v95 = (void *)(v91 + 464);
      BOOL v96 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v91 + 464);
      swift_unknownObjectRetain();
      v96(v199, v181, v91);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v199, (uint64_t)v200);
      uint64_t v97 = (uint64_t)v186;
      outlined init with copy of NSDecimal.FormatStyle(v187, (uint64_t)v186, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      char v98 = v188;
      uint64_t v99 = (uint64_t *)(v97 + *(int *)(v188 + 20));
      unint64_t v100 = v182;
      void *v99 = v185;
      v99[1] = v100;
      outlined init with take of LocalePreferences?((uint64_t)v200, v97 + *(int *)(v98 + 24));
      char v101 = specialized static ICUNumberFormatter._create(with:)(v97);
      outlined destroy of NSDecimal.FormatStyle(v97, type metadata accessor for ICUNumberFormatter.Signature);
      if (v101)
      {
        uint64_t v102 = *(void *)(v101 + 16);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        char v188 = v101;
        uint64_t v103 = v191;
        uint64_t v104 = v192;
        uint64_t v95 = v189;
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v102, v191 | (v193 << 32) | (v190 << 48), v86 | (v87 << 16) | (v88 << 32) | (v89 << 48), v90 | (v192 << 16));
        if (!v95) {
          goto LABEL_88;
        }

        swift_release();
        uint64_t v189 = 0;
      }
      else
      {
        uint64_t v103 = v191;
        uint64_t v104 = v192;
      }
      while (1)
      {
        *(_DWORD *)uint64_t v199 = v103;
        *(_WORD *)&v199[4] = v193;
        uint64_t v105 = v190;
        *(_WORD *)&v199[6] = v190;
        *(_WORD *)&v199[8] = v86;
        *(_WORD *)&v199[10] = v87;
        *(_WORD *)&v199[12] = v88;
        *(_WORD *)&v199[14] = v89;
        *(_WORD *)&v199[16] = v90;
        *(_WORD *)&v199[18] = v104;
        if (!_So9NSDecimala__length_getter(v199))
        {
          *(_DWORD *)uint64_t v199 = v103;
          *(_WORD *)&v199[4] = v193;
          *(_WORD *)&v199[6] = v105;
          *(_WORD *)&v199[8] = v86;
          *(_WORD *)&v199[10] = v87;
          *(_WORD *)&v199[12] = v88;
          *(_WORD *)&v199[14] = v89;
          *(_WORD *)&v199[16] = v90;
          *(_WORD *)&v199[18] = v104;
          if (_So9NSDecimala__isNegative_getter(v199))
          {
            long long v130 = 5136718;
            unint64_t v131 = 0xE300000000000000;
            goto LABEL_103;
          }
        }
        *(_DWORD *)uint64_t v199 = v103;
        *(_WORD *)&v199[4] = v193;
        *(_WORD *)&v199[6] = v105;
        *(_WORD *)&v199[8] = v86;
        *(_WORD *)&v199[10] = v87;
        *(_WORD *)&v199[12] = v88;
        *(_WORD *)&v199[14] = v89;
        *(_WORD *)&v199[16] = v90;
        *(_WORD *)&v199[18] = v104;
        if (!_So9NSDecimala__length_getter(v199))
        {
          unint64_t v131 = 0xE100000000000000;
          long long v130 = 48;
          goto LABEL_103;
        }
        uint64_t v194 = 0;
        uint64_t v195 = 0xE000000000000000;
        *(_DWORD *)uint64_t v199 = v103;
        *(_WORD *)&v199[4] = v193;
        *(_WORD *)&v199[6] = v105;
        *(_WORD *)&v199[8] = v86;
        *(_WORD *)&v199[10] = v87;
        *(_WORD *)&v199[12] = v88;
        *(_WORD *)&v199[14] = v89;
        *(_WORD *)&v199[16] = v90;
        *(_WORD *)&v199[18] = v104;
        *(_DWORD *)uint64_t v198 = v103;
        *(_WORD *)&v198[4] = v193;
        *(_WORD *)&v198[6] = v105;
        *(_WORD *)&v198[8] = v86;
        *(_WORD *)&v198[10] = v87;
        *(_WORD *)&v198[12] = v88;
        *(_WORD *)&v198[14] = v89;
        *(_WORD *)&v198[16] = v90;
        *(_WORD *)&v198[18] = v104;
        if ((int)_So9NSDecimala__exponent_getter(v198) >= 1)
        {
          do
          {
            LODWORD(v192) = v104;
            v106._uint64_t countAndFlagsBits = 48;
            v106._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v106);
            *(_DWORD *)uint64_t v198 = v103;
            *(_WORD *)&v198[4] = v193;
            *(_WORD *)&v198[6] = v105;
            *(_WORD *)&v198[8] = v86;
            *(_WORD *)&v198[10] = v87;
            *(_WORD *)&v198[12] = v88;
            *(_WORD *)&v198[14] = v89;
            *(_WORD *)&v198[16] = v90;
            *(_WORD *)&v198[18] = v192;
            unint64_t v107 = _So9NSDecimala__exponent_getter(v198);
            _So9NSDecimala__exponent_setter((v107 - 1), v199);
            uint64_t v103 = *(unsigned int *)v199;
            uint64_t v105 = *(unsigned __int16 *)&v199[6];
            LOWORD(v86) = *(_WORD *)&v199[8];
            LOWORD(v87) = *(_WORD *)&v199[10];
            LOWORD(v88) = *(_WORD *)&v199[12];
            LOWORD(v89) = *(_WORD *)&v199[14];
            LOWORD(v90) = *(_WORD *)&v199[16];
            uint64_t v104 = *(unsigned __int16 *)&v199[18];
            *(_DWORD *)uint64_t v198 = *(_DWORD *)v199;
            Swift::String v193 = *(unsigned __int16 *)&v199[4];
            *(_WORD *)&v198[4] = *(_WORD *)&v199[4];
            *(_WORD *)&v198[6] = *(_WORD *)&v199[6];
            *(_WORD *)&v198[8] = *(_WORD *)&v199[8];
            *(_WORD *)&v198[10] = *(_WORD *)&v199[10];
            *(_WORD *)&v198[12] = *(_WORD *)&v199[12];
            *(_WORD *)&v198[14] = *(_WORD *)&v199[14];
            *(_WORD *)&v198[16] = *(_WORD *)&v199[16];
            *(_WORD *)&v198[18] = *(_WORD *)&v199[18];
          }
          while ((int)_So9NSDecimala__exponent_getter(v198) > 0);
        }
        *(_DWORD *)uint64_t v198 = v103;
        *(_WORD *)&v198[4] = v193;
        *(_WORD *)&v198[6] = v105;
        *(_WORD *)&v198[8] = v86;
        *(_WORD *)&v198[10] = v87;
        *(_WORD *)&v198[12] = v88;
        *(_WORD *)&v198[14] = v89;
        *(_WORD *)&v198[16] = v90;
        *(_WORD *)&v198[18] = v104;
        uint64_t v108 = _So9NSDecimala__exponent_getter(v198);
        uint64_t v109 = v193;
        if (!v108)
        {
          _So9NSDecimala__exponent_setter(1, v199);
          uint64_t v103 = *(unsigned int *)v199;
          uint64_t v109 = *(unsigned __int16 *)&v199[4];
          uint64_t v105 = *(unsigned __int16 *)&v199[6];
          LOWORD(v86) = *(_WORD *)&v199[8];
          LOWORD(v87) = *(_WORD *)&v199[10];
          LOWORD(v88) = *(_WORD *)&v199[12];
          LOWORD(v89) = *(_WORD *)&v199[14];
          LOWORD(v90) = *(_WORD *)&v199[16];
          uint64_t v104 = *(unsigned __int16 *)&v199[18];
        }
        *(_DWORD *)uint64_t v198 = v103;
        uint64_t v110 = v105;
        unint64_t v111 = v109;
        *(_WORD *)&v198[4] = v109;
        uint64_t v190 = v110;
        unint64_t v191 = v103;
        *(_WORD *)&v198[6] = v110;
        *(_WORD *)&v198[8] = v86;
        *(_WORD *)&v198[10] = v87;
        *(_WORD *)&v198[12] = v88;
        *(_WORD *)&v198[14] = v89;
        *(_WORD *)&v198[16] = v90;
        LODWORD(v192) = v104;
        *(_WORD *)&v198[18] = v104;
        if (!_So9NSDecimala__length_getter(v198)) {
          break;
        }
        unint64_t v112 = v111;
        uint64_t v114 = v190;
        uint64_t v113 = v191;
        uint64_t v115 = v192;
        while (1)
        {
          unint64_t v191 = v113;
          Swift::String v193 = v112;
          LODWORD(v192) = v115;
          *(_DWORD *)uint64_t v198 = v113;
          *(_WORD *)&v198[4] = v112;
          *(_WORD *)&v198[6] = v114;
          *(_WORD *)&v198[8] = v86;
          *(_WORD *)&v198[10] = v87;
          *(_WORD *)&v198[12] = v88;
          *(_WORD *)&v198[14] = v89;
          *(_WORD *)&v198[16] = v90;
          *(_WORD *)&v198[18] = v115;
          if (!_So9NSDecimala__exponent_getter(v198))
          {
            uint64_t v190 = v114;
            v116._uint64_t countAndFlagsBits = 46;
            v116._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v116);
            LOWORD(v114) = v190;
          }
          *(_DWORD *)uint64_t v198 = v191;
          *(_WORD *)&v198[4] = v193;
          *(_WORD *)&v198[6] = v114;
          *(_WORD *)&v198[8] = v86;
          *(_WORD *)&v198[10] = v87;
          *(_WORD *)&v198[12] = v88;
          *(_WORD *)&v198[14] = v89;
          *(_WORD *)&v198[16] = v90;
          *(_WORD *)&v198[18] = v192;
          unint64_t v117 = _So9NSDecimala__exponent_getter(v198);
          _So9NSDecimala__exponent_setter((v117 + 1), v199);
          int64_t v118 = *(unsigned int *)v199;
          LOWORD(v89) = *(_WORD *)&v199[6];
          int v192 = *(unsigned __int16 *)&v199[8];
          Swift::String v193 = *(unsigned __int16 *)&v199[4];
          uint64_t v190 = *(unsigned __int16 *)&v199[12];
          unint64_t v191 = *(unsigned __int16 *)&v199[10];
          id v187 = *(unsigned __int16 *)&v199[14];
          LODWORD(v188) = *(unsigned __int16 *)&v199[16];
          LODWORD(v186) = *(unsigned __int16 *)&v199[18];
          NSDecimal.asVariableLengthInteger()(*(unsigned int *)v199 | ((unint64_t)*(unsigned __int16 *)&v199[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v199[6] << 48), *(unsigned __int16 *)&v199[8] | ((unint64_t)*(unsigned __int16 *)&v199[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v199[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v199[14] << 48), *(unsigned __int16 *)&v199[16] | (*(unsigned __int16 *)&v199[18] << 16));
          uint64_t v120 = v119;
          uint64_t v86 = *(void *)(v119 + 16);
          if (v86) {
            break;
          }
          LODWORD(v88) = 0;
          uint64_t v87 = MEMORY[0x1E4FBC860];
          uint64_t v124 = *(void *)(MEMORY[0x1E4FBC860] + 16);
          if (v124)
          {
LABEL_78:
            if (!*(_WORD *)(v87 + 2 * v124 + 30))
            {
              do
              {
                *(void *)(v87 + 16) = v124 - 1;
                if (v124 == 1) {
                  break;
                }
              }
              while (!*(unsigned __int16 *)(v87 + 28 + 2 * v124--));
            }
          }
LABEL_81:
          swift_bridgeObjectRelease();
          *(_DWORD *)uint64_t v198 = v118;
          *(_WORD *)&v198[4] = v193;
          *(_WORD *)&v198[6] = v89;
          *(_WORD *)&v198[8] = v192;
          *(_WORD *)&v198[10] = v191;
          *(_WORD *)&v198[12] = v190;
          *(_WORD *)&v198[14] = v187;
          *(_WORD *)&v198[16] = v188;
          *(_WORD *)&v198[18] = (_WORD)v186;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v87);
          if (v95) {
            goto LABEL_115;
          }
          uint64_t v189 = 0;
          uint64_t v126 = *(void *)(v87 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v126)) {
            goto LABEL_114;
          }
          _So9NSDecimala__length_setter(v126, v198);
          *(_DWORD *)uint64_t v199 = *(_DWORD *)v198;
          *(_OWORD *)&v199[4] = *(_OWORD *)&v198[4];
          *(void *)uint64_t v198 = v88 | 0x30;
          v127._uint64_t countAndFlagsBits = MEMORY[0x185302020](v198, 1);
          String.append(_:)(v127);
          swift_bridgeObjectRelease();
          Swift::String v193 = *(unsigned __int16 *)&v199[4];
          uint64_t v190 = *(unsigned __int16 *)&v199[6];
          unint64_t v191 = *(unsigned int *)v199;
          LOWORD(v86) = *(_WORD *)&v199[8];
          LOWORD(v87) = *(_WORD *)&v199[10];
          LOWORD(v88) = *(_WORD *)&v199[12];
          LOWORD(v89) = *(_WORD *)&v199[14];
          LOWORD(v90) = *(_WORD *)&v199[16];
          unint64_t v128 = *(unsigned __int16 *)&v199[18];
          *(_DWORD *)uint64_t v198 = *(_DWORD *)v199;
          *(_WORD *)&v198[4] = *(_WORD *)&v199[4];
          *(_WORD *)&v198[6] = *(_WORD *)&v199[6];
          *(_WORD *)&v198[8] = *(_WORD *)&v199[8];
          *(_WORD *)&v198[10] = *(_WORD *)&v199[10];
          *(_WORD *)&v198[12] = *(_WORD *)&v199[12];
          *(_WORD *)&v198[14] = *(_WORD *)&v199[14];
          *(_WORD *)&v198[16] = *(_WORD *)&v199[16];
          *(_WORD *)&v198[18] = *(_WORD *)&v199[18];
          int64_t v129 = _So9NSDecimala__length_getter(v198);
          uint64_t v115 = v128;
          unint64_t v112 = v193;
          uint64_t v114 = v190;
          uint64_t v113 = v191;
          if (!v129) {
            goto LABEL_92;
          }
        }
        long long v185 = v118;
        uint64_t v87 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        int v90 = v87 + 30;
        *(void *)(v87 + 16) = v86;
        bzero((void *)(v87 + 32), 2 * v86);
        unint64_t v121 = *(unsigned __int16 *)(2 * v86 + v120 + 30);
        uint64_t v122 = v121 / 0xA;
        do
        {
          *(_WORD *)(v90 + 2 * v86) = v122;
          LODWORD(v88) = v121 % 0xA;
          if (v86 == 1)
          {
            LODWORD(v118) = v185;
            uint64_t v124 = *(void *)(v87 + 16);
            if (!v124) {
              goto LABEL_81;
            }
            goto LABEL_78;
          }
          unint64_t v121 = *(unsigned __int16 *)(v120 + 28 + 2 * v86) | (v88 << 16);
          uint64_t v122 = v121 / 0xA;
          uint64_t v123 = v86 - 2;
          --v86;
        }
        while (v123 < *(void *)(v87 + 16));
        __break(1u);
LABEL_88:
        uint64_t v132 = swift_retain_n();
        id v187 = (uint64_t)&v179;
        MEMORY[0x1F4188790](v132);
        swift_retain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v179 - 8), (uint64_t *)v199);
        uint64_t v189 = v95;
        if (v95) {
          goto LABEL_116;
        }
        long long v130 = *(void *)v199;
        long long v186 = *(char **)&v199[8];
        swift_release();
        swift_release_n();
        uint64_t v103 = v191;
        uint64_t v104 = v192;
        if (v186)
        {
          uint64_t v134 = v183;
          unint64_t v133 = v184;
          unint64_t v131 = (unint64_t)v186;
          goto LABEL_104;
        }
      }
      unint64_t v112 = v111;
      uint64_t v114 = v190;
      uint64_t v113 = v191;
      uint64_t v115 = v192;
LABEL_92:
      LODWORD(v192) = v115;
      *(_DWORD *)uint64_t v198 = v113;
      *(_WORD *)&v198[4] = v112;
      *(_WORD *)&v198[6] = v114;
      *(_WORD *)&v198[8] = v86;
      *(_WORD *)&v198[10] = v87;
      *(_WORD *)&v198[12] = v88;
      *(_WORD *)&v198[14] = v89;
      *(_WORD *)&v198[16] = v90;
      *(_WORD *)&v198[18] = v115;
      int64_t v135 = v112;
      unint64_t v136 = v113;
      unint64_t v137 = _So9NSDecimala__exponent_getter(v198);
      uint64_t v138 = v136;
      if (v137 <= 0)
      {
        unint64_t v191 = v136;
        *(_DWORD *)uint64_t v198 = v136;
        Swift::String v193 = v135;
        *(_WORD *)&v198[4] = v135;
        *(_WORD *)&v198[6] = v114;
        *(_WORD *)&v198[8] = v86;
        *(_WORD *)&v198[10] = v87;
        *(_WORD *)&v198[12] = v88;
        *(_WORD *)&v198[14] = v89;
        *(_WORD *)&v198[16] = v90;
        uint64_t v140 = v192;
        *(_WORD *)&v198[18] = v192;
        uint64_t v141 = _So9NSDecimala__exponent_getter(v198);
        uint64_t v190 = v114;
        if (v141)
        {
          uint64_t v139 = v193;
          do
          {
            v142._uint64_t countAndFlagsBits = 48;
            v142._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v142);
            *(_DWORD *)uint64_t v198 = v191;
            *(_WORD *)&v198[4] = v139;
            *(_WORD *)&v198[6] = v190;
            *(_WORD *)&v198[8] = v86;
            *(_WORD *)&v198[10] = v87;
            *(_WORD *)&v198[12] = v88;
            *(_WORD *)&v198[14] = v89;
            *(_WORD *)&v198[16] = v90;
            *(_WORD *)&v198[18] = v140;
            char v143 = _So9NSDecimala__exponent_getter(v198);
            _So9NSDecimala__exponent_setter((v143 + 1), v199);
            uint64_t v139 = *(_WORD *)&v199[4];
            LOWORD(v86) = *(_WORD *)&v199[8];
            LOWORD(v87) = *(_WORD *)&v199[10];
            LOWORD(v88) = *(_WORD *)&v199[12];
            LOWORD(v89) = *(_WORD *)&v199[14];
            LOWORD(v90) = *(_WORD *)&v199[16];
            uint64_t v140 = *(unsigned __int16 *)&v199[18];
            uint64_t v190 = *(unsigned __int16 *)&v199[6];
            unint64_t v191 = *(unsigned int *)v199;
            *(_DWORD *)uint64_t v198 = *(_DWORD *)v199;
            *(_WORD *)&v198[4] = *(_WORD *)&v199[4];
            *(_WORD *)&v198[6] = *(_WORD *)&v199[6];
            *(_WORD *)&v198[8] = *(_WORD *)&v199[8];
            *(_WORD *)&v198[10] = *(_WORD *)&v199[10];
            *(_WORD *)&v198[12] = *(_WORD *)&v199[12];
            *(_WORD *)&v198[14] = *(_WORD *)&v199[14];
            *(_WORD *)&v198[16] = *(_WORD *)&v199[16];
            *(_WORD *)&v198[18] = *(_WORD *)&v199[18];
          }
          while (_So9NSDecimala__exponent_getter(v198));
        }
        else
        {
          uint64_t v139 = v193;
        }
        LODWORD(v192) = v140;
        v144._uint64_t countAndFlagsBits = 46;
        v144._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v144);
        v145._uint64_t countAndFlagsBits = 48;
        v145._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v145);
        LOWORD(v114) = v190;
        uint64_t v138 = v191;
      }
      else
      {
        uint64_t v139 = v135;
      }
      *(_DWORD *)uint64_t v198 = v138;
      *(_WORD *)&v198[4] = v139;
      *(_WORD *)&v198[6] = v114;
      *(_WORD *)&v198[8] = v86;
      *(_WORD *)&v198[10] = v87;
      *(_WORD *)&v198[12] = v88;
      *(_WORD *)&v198[14] = v89;
      *(_WORD *)&v198[16] = v90;
      *(_WORD *)&v198[18] = v192;
      if (_So9NSDecimala__isNegative_getter(v198))
      {
        v146._uint64_t countAndFlagsBits = 45;
        v146._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v146);
      }
      *(void *)uint64_t v198 = v194;
      *(void *)&v198[8] = v195;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      long long v130 = String.init<A>(_:)();
      unint64_t v131 = v147;
LABEL_103:
      uint64_t v134 = v183;
      unint64_t v133 = v184;
LABEL_104:
      *(void *)uint64_t v198 = v130;
      *(void *)&v198[8] = v131;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v148 = swift_allocObject();
      *(_OWORD *)(v148 + 16) = xmmword_1821037E0;
      *(void *)(v148 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(v148 + 40) = v149;
      *(void *)uint64_t v199 = 0;
      *(void *)&v199[8] = 0xE000000000000000;
      _StringGuts.grow(_:)(83);
      v150._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
      v150._unint64_t object = (void *)0xED00002065737261;
      String.append(_:)(v150);
      v151._uint64_t countAndFlagsBits = v134;
      v151._unint64_t object = v133;
      String.append(_:)(v151);
      v152._unint64_t object = (void *)0x80000001823AE520;
      v152._uint64_t countAndFlagsBits = 0xD000000000000039;
      String.append(_:)(v152);
      uint64_t v153 = MEMORY[0x1E4FBB1A0];
      _print_unlocked<A, B>(_:_:)();
      v154._uint64_t countAndFlagsBits = 0x2220726F2022;
      v154._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v154);
      _print_unlocked<A, B>(_:_:)();
      v155._uint64_t countAndFlagsBits = 34;
      v155._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v155);
      uint64_t v156 = *(void *)v199;
      uint64_t v157 = *(void *)&v199[8];
      *(void *)(v148 + 72) = v153;
      *(void *)(v148 + 48) = v156;
      *(void *)(v148 + 56) = v157;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      BOOL v158 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(v148 + 32, (uint64_t)v199);
      uint64_t v159 = *(void *)v199;
      unint64_t v160 = *(void *)&v199[8];
      swift_retain();
      long long v161 = specialized __RawDictionaryStorage.find<A>(_:)(v159, v160);
      if (v162)
      {
        __break(1u);
      }
      else
      {
        v158[(v161 >> 6) + 8] |= 1 << v161;
        uint64_t v163 = (uint64_t *)(v158[6] + 16 * v161);
        *uint64_t v163 = v159;
        v163[1] = v160;
        outlined init with take of Any(&v199[16], (_OWORD *)(v158[7] + 32 * v161));
        uint64_t v164 = v158[2];
        uint64_t v165 = __OFADD__(v164, 1);
        uint64_t v166 = v164 + 1;
        if (!v165)
        {
          v158[2] = v166;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          uint64_t v167 = objc_allocWithZone((Class)NSError);
          uint64_t v168 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v169 = objc_msgSend(v167, sel_initWithDomain_code_userInfo_, v168, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v170 = objc_msgSend(v169, sel_domain);
          uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
          uint64_t v173 = v172;

          if (v171 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v173 == v174)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_110;
          }
          uint64_t v175 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v175)
          {
LABEL_110:
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v11;
          }
LABEL_113:
          __break(1u);
        }
      }
      __break(1u);
      goto LABEL_113;
    }
    break;
  }
LABEL_116:
  swift_release_n();
  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  Swift::String v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  Swift::String v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  Swift::String v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  Swift::String v59;
  int v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  int v65;
  __int16 v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  unint64_t v80;
  Swift::String v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  Swift::String v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v101;
  Swift::String v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  __int16 v112;
  int v113;
  int v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;
  int v118;
  Swift::String v119;
  int v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  unint64_t v124;
  uint64_t inited;
  uint64_t v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  Swift::String v131;
  Swift::String v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t *v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  unsigned char v153[40];
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unsigned char v173[20];
  unsigned char v174[120];
  unsigned char v175[40];
  uint64_t v176;
  char v177;
  uint64_t v178;

  uint64_t v178 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v6 = a1;
  }
  uint64_t v7 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v7 = 11;
  }
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15, v7 | (v6 << 16));
  if ((v9 & 0x100000000) == 0) {
    return v8;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v175);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v175, (uint64_t)&v176);
  if (v177 != 1) {
    return v176;
  }
  long long v161 = (void *)a2;
  specialized NSDecimal.init(_:)(3.14);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  int v15 = v14;
  uint64_t v16 = type metadata accessor for ICUPercentNumberFormatter();
  uint64_t v17 = static ICUPercentNumberFormatter.create(for:)(v2);
  unint64_t v160 = a1;
  uint64_t v162 = (uint64_t *)v16;
  uint64_t v163 = v2;
  uint64_t v168 = v11;
  uint64_t v166 = v13;
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v167 = v17;
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v18, v11, v13, v15);
    char v19 = v15;
    if (!v3) {
      goto LABEL_41;
    }

    swift_release();
    uint64_t v164 = 0;
  }
  else
  {
    uint64_t v164 = v3;
    char v19 = v15;
  }
  while (2)
  {
    *(void *)uint64_t v174 = v168;
    uint64_t v21 = HIDWORD(v168);
    uint64_t v22 = HIWORD(v168);
    uint64_t v23 = v166;
    uint64_t v24 = v166 >> 16;
    *(void *)&v174[8] = v166;
    uint64_t v25 = HIDWORD(v166);
    uint64_t v26 = HIWORD(v166);
    uint64_t v27 = HIWORD(v19);
    *(_DWORD *)&v174[16] = v19;
    if (!_So9NSDecimala__length_getter(v174))
    {
      *(_DWORD *)uint64_t v174 = v168;
      *(_WORD *)&void v174[4] = v21;
      *(_WORD *)&v174[6] = v22;
      *(_WORD *)&v174[8] = v23;
      *(_WORD *)&v174[10] = v24;
      *(_WORD *)&v174[12] = v25;
      *(_WORD *)&v174[14] = v26;
      *(_DWORD *)&v174[16] = v19;
      if (_So9NSDecimala__isNegative_getter(v174))
      {
        uint64_t v52 = 5136718;
        uint64_t v53 = 0xE300000000000000;
        goto LABEL_55;
      }
    }
    *(_DWORD *)uint64_t v174 = v168;
    *(_WORD *)&void v174[4] = v21;
    *(_WORD *)&v174[6] = v22;
    *(_WORD *)&v174[8] = v23;
    *(_WORD *)&v174[10] = v24;
    *(_WORD *)&v174[12] = v25;
    *(_WORD *)&v174[14] = v26;
    *(_DWORD *)&v174[16] = v19;
    if (!_So9NSDecimala__length_getter(v174))
    {
      uint64_t v53 = 0xE100000000000000;
      uint64_t v52 = 48;
      goto LABEL_55;
    }
    uint64_t v171 = 0;
    uint64_t v172 = 0xE000000000000000;
    *(_DWORD *)uint64_t v174 = v168;
    *(_WORD *)&void v174[4] = v21;
    *(_WORD *)&v174[6] = v22;
    *(_WORD *)&v174[8] = v23;
    *(_WORD *)&v174[10] = v24;
    *(_WORD *)&v174[12] = v25;
    *(_WORD *)&v174[14] = v26;
    *(_DWORD *)&v174[16] = v19;
    *(_DWORD *)uint64_t v173 = v168;
    *(_WORD *)&v173[4] = v21;
    *(_WORD *)&v173[6] = v22;
    *(_WORD *)&uint64_t v173[8] = v23;
    *(_WORD *)&v173[10] = v24;
    *(_WORD *)&v173[12] = v25;
    *(_WORD *)&v173[14] = v26;
    *(_DWORD *)&v173[16] = v19;
    if ((int)_So9NSDecimala__exponent_getter(v173) >= 1)
    {
      do
      {
        LODWORD(v167) = v19;
        v28._uint64_t countAndFlagsBits = 48;
        v28._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        *(_DWORD *)uint64_t v173 = v168;
        *(_WORD *)&v173[4] = v21;
        *(_WORD *)&v173[6] = v22;
        *(_WORD *)&uint64_t v173[8] = v23;
        *(_WORD *)&v173[10] = v24;
        *(_WORD *)&v173[12] = v25;
        *(_WORD *)&v173[14] = v26;
        *(_WORD *)&v173[16] = v167;
        *(_WORD *)&v173[18] = v27;
        uint64_t v29 = _So9NSDecimala__exponent_getter(v173);
        _So9NSDecimala__exponent_setter((v29 - 1), v174);
        LOWORD(v21) = *(_WORD *)&v174[4];
        LOWORD(v22) = *(_WORD *)&v174[6];
        uint64_t v23 = *(unsigned __int16 *)&v174[8];
        LOWORD(v24) = *(_WORD *)&v174[10];
        LOWORD(v25) = *(_WORD *)&v174[12];
        LOWORD(v26) = *(_WORD *)&v174[14];
        char v19 = *(unsigned __int16 *)&v174[16];
        uint64_t v27 = *(unsigned __int16 *)&v174[18];
        uint64_t v168 = *(unsigned int *)v174;
        *(_DWORD *)uint64_t v173 = *(_DWORD *)v174;
        *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
        *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
        *(_DWORD *)&uint64_t v173[8] = *(_DWORD *)&v174[8];
        *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
        *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
        *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
        *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
      }
      while ((int)_So9NSDecimala__exponent_getter(v173) > 0);
    }
    *(_DWORD *)uint64_t v173 = v168;
    *(_WORD *)&v173[4] = v21;
    *(_WORD *)&v173[6] = v22;
    *(_WORD *)&uint64_t v173[8] = v23;
    *(_WORD *)&v173[10] = v24;
    *(_WORD *)&v173[12] = v25;
    *(_WORD *)&v173[14] = v26;
    *(_WORD *)&v173[16] = v19;
    *(_WORD *)&v173[18] = v27;
    uint64_t v30 = _So9NSDecimala__exponent_getter(v173);
    uint64_t v31 = v168;
    if (!v30)
    {
      _So9NSDecimala__exponent_setter(1, v174);
      uint64_t v31 = *(unsigned int *)v174;
      LOWORD(v21) = *(_WORD *)&v174[4];
      LOWORD(v22) = *(_WORD *)&v174[6];
      uint64_t v23 = *(unsigned __int16 *)&v174[8];
      LOWORD(v24) = *(_WORD *)&v174[10];
      LOWORD(v25) = *(_WORD *)&v174[12];
      LOWORD(v26) = *(_WORD *)&v174[14];
      char v19 = *(unsigned __int16 *)&v174[16];
      uint64_t v27 = *(unsigned __int16 *)&v174[18];
    }
    uint64_t v168 = v31;
    *(_DWORD *)uint64_t v173 = v31;
    *(_WORD *)&v173[4] = v21;
    *(_WORD *)&v173[6] = v22;
    *(_WORD *)&uint64_t v173[8] = v23;
    *(_WORD *)&v173[10] = v24;
    *(_WORD *)&v173[12] = v25;
    *(_WORD *)&v173[14] = v26;
    LODWORD(v167) = v19;
    *(_WORD *)&v173[16] = v19;
    LODWORD(v165) = v27;
    *(_WORD *)&v173[18] = v27;
    if (!_So9NSDecimala__length_getter(v173))
    {
      uint64_t v32 = v168;
      char v33 = v167;
      char v34 = v165;
LABEL_45:
      LODWORD(v165) = v34;
      *(_DWORD *)uint64_t v173 = v32;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&uint64_t v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v33;
      *(_WORD *)&v173[18] = v34;
      uint64_t v55 = v32;
      int v56 = v33;
      if ((int)_So9NSDecimala__exponent_getter(v173) <= 0)
      {
        uint64_t v168 = v55;
        *(_DWORD *)uint64_t v173 = v55;
        *(_WORD *)&v173[4] = v21;
        *(_WORD *)&v173[6] = v22;
        *(_WORD *)&uint64_t v173[8] = v23;
        *(_WORD *)&v173[10] = v24;
        *(_WORD *)&v173[12] = v25;
        *(_WORD *)&v173[14] = v26;
        LODWORD(v167) = v56;
        *(_WORD *)&v173[16] = v56;
        *(_WORD *)&v173[18] = v165;
        uint64_t v57 = _So9NSDecimala__exponent_getter(v173);
        uint64_t v166 = v23;
        if (v57)
        {
          LOWORD(v56) = v167;
          LOWORD(v58) = v165;
          do
          {
            v59._uint64_t countAndFlagsBits = 48;
            v59._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v59);
            *(_DWORD *)uint64_t v173 = v168;
            *(_WORD *)&v173[4] = v21;
            *(_WORD *)&v173[6] = v22;
            *(_WORD *)&uint64_t v173[8] = v166;
            *(_WORD *)&v173[10] = v24;
            *(_WORD *)&v173[12] = v25;
            *(_WORD *)&v173[14] = v26;
            *(_WORD *)&v173[16] = v56;
            *(_WORD *)&v173[18] = v58;
            long long v60 = _So9NSDecimala__exponent_getter(v173);
            _So9NSDecimala__exponent_setter((v60 + 1), v174);
            LOWORD(v21) = *(_WORD *)&v174[4];
            LOWORD(v22) = *(_WORD *)&v174[6];
            LOWORD(v24) = *(_WORD *)&v174[10];
            LOWORD(v25) = *(_WORD *)&v174[12];
            LOWORD(v26) = *(_WORD *)&v174[14];
            LOWORD(v56) = *(_WORD *)&v174[16];
            uint64_t v58 = *(unsigned __int16 *)&v174[18];
            uint64_t v168 = *(unsigned int *)v174;
            *(_DWORD *)uint64_t v173 = *(_DWORD *)v174;
            *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
            *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
            uint64_t v166 = *(unsigned __int16 *)&v174[8];
            *(_DWORD *)&uint64_t v173[8] = *(_DWORD *)&v174[8];
            *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
            *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
            *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
            *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          }
          while (_So9NSDecimala__exponent_getter(v173));
        }
        else
        {
          LOWORD(v56) = v167;
          uint64_t v58 = v165;
        }
        LODWORD(v165) = v58;
        v61._uint64_t countAndFlagsBits = 46;
        v61._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v61);
        v62._uint64_t countAndFlagsBits = 48;
        v62._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v62);
        LOWORD(v23) = v166;
        LODWORD(v55) = v168;
      }
      *(_DWORD *)uint64_t v173 = v55;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&uint64_t v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v56;
      *(_WORD *)&v173[18] = v165;
      if (_So9NSDecimala__isNegative_getter(v173))
      {
        v63._uint64_t countAndFlagsBits = 45;
        v63._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v63);
      }
      *(void *)uint64_t v173 = v171;
      *(void *)&uint64_t v173[8] = v172;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      uint64_t v52 = String.init<A>(_:)();
      uint64_t v53 = v64;
      goto LABEL_55;
    }
    char v19 = -858993459;
    uint64_t v32 = v168;
    char v33 = v167;
    char v34 = v165;
    while (1)
    {
      uint64_t v168 = v32;
      LODWORD(v167) = v33;
      LODWORD(v165) = v34;
      *(_DWORD *)uint64_t v173 = v32;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&uint64_t v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v33;
      *(_WORD *)&v173[18] = v34;
      if (!_So9NSDecimala__exponent_getter(v173))
      {
        uint64_t v166 = v23;
        v35._uint64_t countAndFlagsBits = 46;
        v35._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v35);
        LOWORD(v23) = v166;
      }
      *(_DWORD *)uint64_t v173 = v168;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&uint64_t v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v167;
      *(_WORD *)&v173[18] = v165;
      uint64_t v36 = _So9NSDecimala__exponent_getter(v173);
      _So9NSDecimala__exponent_setter((v36 + 1), v174);
      unint64_t v37 = *(unsigned int *)v174;
      uint64_t v38 = *(_WORD *)&v174[6];
      uint64_t v167 = *(unsigned __int16 *)&v174[8];
      uint64_t v168 = *(unsigned __int16 *)&v174[4];
      uint64_t v165 = *(unsigned __int16 *)&v174[12];
      uint64_t v166 = *(unsigned __int16 *)&v174[10];
      BOOL v158 = *(unsigned __int16 *)&v174[14];
      LODWORD(v159) = *(unsigned __int16 *)&v174[16];
      uint64_t v157 = *(unsigned __int16 *)&v174[18];
      NSDecimal.asVariableLengthInteger()(*(unsigned int *)v174 | ((unint64_t)*(unsigned __int16 *)&v174[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[6] << 48), *(unsigned __int16 *)&v174[8] | ((unint64_t)*(unsigned __int16 *)&v174[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v174[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[14] << 48), *(unsigned __int16 *)&v174[16] | (*(unsigned __int16 *)&v174[18] << 16));
      uint64_t v40 = v39;
      uint64_t v41 = *(void *)(v39 + 16);
      if (v41) {
        break;
      }
      LODWORD(v21) = 0;
      int v42 = MEMORY[0x1E4FBC860];
LABEL_30:
      uint64_t v46 = *(void *)(v42 + 16);
      if (v46 && !*(_WORD *)(v42 + 2 * v46 + 30))
      {
        do
        {
          *(void *)(v42 + 16) = v46 - 1;
          if (v46 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v42 + 28 + 2 * v46--));
      }
      swift_bridgeObjectRelease();
      *(_DWORD *)uint64_t v173 = v37;
      *(_WORD *)&v173[4] = v168;
      *(_WORD *)&v173[6] = v38;
      *(_WORD *)&uint64_t v173[8] = v167;
      *(_WORD *)&v173[10] = v166;
      *(_WORD *)&v173[12] = v165;
      *(_WORD *)&v173[14] = v158;
      *(_WORD *)&v173[16] = v159;
      *(_WORD *)&v173[18] = v157;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v42);
      if (v3)
      {
LABEL_113:
        swift_bridgeObjectRelease();
        swift_unexpectedError();
        __break(1u);
LABEL_114:
        uint64_t v155 = 0;
        uint64_t v154 = 3455;
        v153[32] = 2;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_115;
      }
      uint64_t v164 = 0;
      uint64_t v48 = *(void *)(v42 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v48)) {
        goto LABEL_114;
      }
      _So9NSDecimala__length_setter(v48, v173);
      *(_DWORD *)uint64_t v174 = *(_DWORD *)v173;
      *(_OWORD *)&void v174[4] = *(_OWORD *)&v173[4];
      *(void *)uint64_t v173 = v21 | 0x30;
      v49._uint64_t countAndFlagsBits = MEMORY[0x185302020](v173, 1);
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      uint64_t v168 = *(unsigned int *)v174;
      LOWORD(v21) = *(_WORD *)&v174[4];
      LOWORD(v22) = *(_WORD *)&v174[6];
      uint64_t v166 = *(unsigned __int16 *)&v174[8];
      LOWORD(v24) = *(_WORD *)&v174[10];
      LOWORD(v25) = *(_WORD *)&v174[12];
      LOWORD(v26) = *(_WORD *)&v174[14];
      LODWORD(v167) = *(unsigned __int16 *)&v174[16];
      int64_t v50 = *(unsigned __int16 *)&v174[18];
      *(_DWORD *)uint64_t v173 = *(_DWORD *)v174;
      *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
      *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
      *(_DWORD *)&uint64_t v173[8] = *(_DWORD *)&v174[8];
      *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
      *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
      *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
      *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
      int v51 = _So9NSDecimala__length_getter(v173);
      char v33 = v167;
      uint64_t v32 = v168;
      char v34 = v50;
      uint64_t v23 = v166;
      if (!v51) {
        goto LABEL_45;
      }
    }
    uint64_t v156 = v37;
    int v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v42 + 16) = v41;
    bzero((void *)(v42 + 32), 2 * v41);
    char v43 = *(unsigned __int16 *)(2 * v41 + v40 + 30);
    uint64_t v44 = v43 / 0xA;
    do
    {
      *(_WORD *)(v42 + 30 + 2 * v41) = v44;
      LODWORD(v21) = v43 % 0xA;
      if (v41 == 1)
      {
        LODWORD(v37) = v156;
        goto LABEL_30;
      }
      char v43 = *(unsigned __int16 *)(v40 + 28 + 2 * v41) | (v21 << 16);
      uint64_t v44 = v43 / 0xA;
      unint64_t v45 = v41 - 2;
      --v41;
    }
    while (v45 < *(void *)(v42 + 16));
    __break(1u);
LABEL_41:
    uint64_t v54 = swift_retain_n();
    MEMORY[0x1F4188790](v54);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v153, (uint64_t *)v174);
    if (!v3)
    {
      uint64_t v52 = *(void *)v174;
      uint64_t v53 = *(void *)&v174[8];
      swift_release();
      swift_release_n();
      uint64_t v164 = 0;
      if (!v53) {
        continue;
      }
LABEL_55:
      uint64_t v171 = v52;
      uint64_t v172 = v53;
      *(void *)uint64_t v174 = specialized NSDecimal.init(_:)(0x3039uLL);
      *(_DWORD *)&v174[8] = v65;
      *(_WORD *)&v174[12] = v66;
      *(_WORD *)&v174[14] = v67;
      *(_DWORD *)&v174[16] = v68;
      _So9NSDecimala__isNegative_setter_0(v174);
      uint64_t v69 = *(unsigned int *)v174;
      uint64_t v168 = *(unsigned __int16 *)&v174[4];
      uint64_t v166 = *(unsigned __int16 *)&v174[6];
      uint64_t v70 = *(unsigned __int16 *)&v174[8];
      uint64_t v71 = *(unsigned __int16 *)&v174[10];
      unint64_t v72 = *(unsigned __int16 *)&v174[12];
      uint64_t v73 = *(unsigned __int16 *)&v174[14];
      LODWORD(v74) = *(unsigned __int16 *)&v174[16];
      uint64_t v75 = *(unsigned __int16 *)&v174[18];
      unint64_t v76 = static ICUPercentNumberFormatter.create(for:)(v163);
      if (v76)
      {
        uint64_t v77 = *(void *)(v76 + 16);
        uint64_t v167 = v76;
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        uint64_t v3 = v164;
        uint64_t v78 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v77, v69 | (v168 << 32) | (v166 << 48), v70 | (v71 << 16) | (v72 << 32) | (v73 << 48), v74 | (v75 << 16));
        if (!v3) {
          goto LABEL_87;
        }

        swift_release();
        uint64_t v164 = 0;
      }
      BOOL v79 = v168;
      while (1)
      {
        *(_DWORD *)uint64_t v174 = v69;
        *(_WORD *)&void v174[4] = v79;
        unint64_t v80 = v166;
        *(_WORD *)&v174[6] = v166;
        *(_WORD *)&v174[8] = v70;
        *(_WORD *)&v174[10] = v71;
        *(_WORD *)&v174[12] = v72;
        *(_WORD *)&v174[14] = v73;
        *(_WORD *)&v174[16] = v74;
        *(_WORD *)&v174[18] = v75;
        if (!_So9NSDecimala__length_getter(v174))
        {
          *(_DWORD *)uint64_t v174 = v69;
          *(_WORD *)&void v174[4] = v168;
          *(_WORD *)&v174[6] = v80;
          *(_WORD *)&v174[8] = v70;
          *(_WORD *)&v174[10] = v71;
          *(_WORD *)&v174[12] = v72;
          *(_WORD *)&v174[14] = v73;
          *(_WORD *)&v174[16] = v74;
          *(_WORD *)&v174[18] = v75;
          if (_So9NSDecimala__isNegative_getter(v174))
          {
            uint64_t v105 = 5136718;
            uint64_t v106 = 0xE300000000000000;
            goto LABEL_102;
          }
        }
        *(_DWORD *)uint64_t v174 = v69;
        *(_WORD *)&void v174[4] = v168;
        *(_WORD *)&v174[6] = v80;
        *(_WORD *)&v174[8] = v70;
        *(_WORD *)&v174[10] = v71;
        *(_WORD *)&v174[12] = v72;
        *(_WORD *)&v174[14] = v73;
        *(_WORD *)&v174[16] = v74;
        *(_WORD *)&v174[18] = v75;
        if (!_So9NSDecimala__length_getter(v174))
        {
          uint64_t v106 = 0xE100000000000000;
          uint64_t v105 = 48;
          goto LABEL_102;
        }
        uint64_t v169 = 0;
        uint64_t v170 = 0xE000000000000000;
        *(_DWORD *)uint64_t v174 = v69;
        *(_WORD *)&void v174[4] = v168;
        *(_WORD *)&v174[6] = v80;
        *(_WORD *)&v174[8] = v70;
        *(_WORD *)&v174[10] = v71;
        *(_WORD *)&v174[12] = v72;
        *(_WORD *)&v174[14] = v73;
        *(_WORD *)&v174[16] = v74;
        *(_WORD *)&v174[18] = v75;
        *(_DWORD *)uint64_t v173 = v69;
        *(_WORD *)&v173[4] = v168;
        *(_WORD *)&v173[6] = v80;
        *(_WORD *)&uint64_t v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        *(_WORD *)&v173[18] = v75;
        if ((int)_So9NSDecimala__exponent_getter(v173) >= 1)
        {
          do
          {
            LODWORD(v167) = v75;
            v81._uint64_t countAndFlagsBits = 48;
            v81._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v81);
            *(_DWORD *)uint64_t v173 = v69;
            *(_WORD *)&v173[4] = v168;
            *(_WORD *)&v173[6] = v80;
            *(_WORD *)&uint64_t v173[8] = v70;
            *(_WORD *)&v173[10] = v71;
            *(_WORD *)&v173[12] = v72;
            *(_WORD *)&v173[14] = v73;
            *(_WORD *)&v173[16] = v74;
            *(_WORD *)&v173[18] = v167;
            uint64_t v82 = _So9NSDecimala__exponent_getter(v173);
            _So9NSDecimala__exponent_setter((v82 - 1), v174);
            uint64_t v69 = *(unsigned int *)v174;
            unint64_t v80 = *(unsigned __int16 *)&v174[6];
            LOWORD(v70) = *(_WORD *)&v174[8];
            LOWORD(v71) = *(_WORD *)&v174[10];
            LOWORD(v72) = *(_WORD *)&v174[12];
            LOWORD(v73) = *(_WORD *)&v174[14];
            LOWORD(v74) = *(_WORD *)&v174[16];
            uint64_t v75 = *(unsigned __int16 *)&v174[18];
            *(_DWORD *)uint64_t v173 = *(_DWORD *)v174;
            uint64_t v168 = *(unsigned __int16 *)&v174[4];
            *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
            *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
            *(_DWORD *)&uint64_t v173[8] = *(_DWORD *)&v174[8];
            *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
            *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
            *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
            *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          }
          while ((int)_So9NSDecimala__exponent_getter(v173) > 0);
        }
        *(_DWORD *)uint64_t v173 = v69;
        *(_WORD *)&v173[4] = v168;
        *(_WORD *)&v173[6] = v80;
        *(_WORD *)&uint64_t v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        *(_WORD *)&v173[18] = v75;
        uint64_t v83 = _So9NSDecimala__exponent_getter(v173);
        uint64_t v84 = v168;
        if (!v83)
        {
          _So9NSDecimala__exponent_setter(1, v174);
          uint64_t v69 = *(unsigned int *)v174;
          uint64_t v84 = *(unsigned __int16 *)&v174[4];
          unint64_t v80 = *(unsigned __int16 *)&v174[6];
          LOWORD(v70) = *(_WORD *)&v174[8];
          LOWORD(v71) = *(_WORD *)&v174[10];
          LOWORD(v72) = *(_WORD *)&v174[12];
          LOWORD(v73) = *(_WORD *)&v174[14];
          LOWORD(v74) = *(_WORD *)&v174[16];
          uint64_t v75 = *(unsigned __int16 *)&v174[18];
        }
        *(_DWORD *)uint64_t v173 = v69;
        unint64_t v85 = v80;
        uint64_t v86 = v84;
        *(_WORD *)&v173[4] = v84;
        uint64_t v165 = v69;
        uint64_t v166 = v85;
        *(_WORD *)&v173[6] = v85;
        *(_WORD *)&uint64_t v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        LODWORD(v167) = v75;
        *(_WORD *)&v173[18] = v75;
        if (!_So9NSDecimala__length_getter(v173)) {
          break;
        }
        uint64_t v75 = -858993459;
        uint64_t v69 = 10;
        uint64_t v87 = v86;
        uint64_t v88 = v165;
        char v89 = v166;
        int v90 = v167;
        while (1)
        {
          uint64_t v165 = v88;
          uint64_t v168 = v87;
          LODWORD(v167) = v90;
          *(_DWORD *)uint64_t v173 = v88;
          *(_WORD *)&v173[4] = v87;
          *(_WORD *)&v173[6] = v89;
          *(_WORD *)&uint64_t v173[8] = v70;
          *(_WORD *)&v173[10] = v71;
          *(_WORD *)&v173[12] = v72;
          *(_WORD *)&v173[14] = v73;
          *(_WORD *)&v173[16] = v74;
          *(_WORD *)&v173[18] = v90;
          if (!_So9NSDecimala__exponent_getter(v173))
          {
            uint64_t v166 = v89;
            v91._uint64_t countAndFlagsBits = 46;
            v91._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v91);
            LOWORD(v89) = v166;
          }
          *(_DWORD *)uint64_t v173 = v165;
          *(_WORD *)&v173[4] = v168;
          *(_WORD *)&v173[6] = v89;
          *(_WORD *)&uint64_t v173[8] = v70;
          *(_WORD *)&v173[10] = v71;
          *(_WORD *)&v173[12] = v72;
          *(_WORD *)&v173[14] = v73;
          *(_WORD *)&v173[16] = v74;
          *(_WORD *)&v173[18] = v167;
          uint64_t v92 = _So9NSDecimala__exponent_getter(v173);
          _So9NSDecimala__exponent_setter((v92 + 1), v174);
          int v93 = *(unsigned int *)v174;
          LOWORD(v70) = *(_WORD *)&v174[6];
          uint64_t v167 = *(unsigned __int16 *)&v174[8];
          uint64_t v168 = *(unsigned __int16 *)&v174[4];
          uint64_t v165 = *(unsigned __int16 *)&v174[12];
          uint64_t v166 = *(unsigned __int16 *)&v174[10];
          uint64_t v162 = (uint64_t *)*(unsigned __int16 *)&v174[14];
          LODWORD(v163) = *(unsigned __int16 *)&v174[16];
          LODWORD(v159) = *(unsigned __int16 *)&v174[18];
          NSDecimal.asVariableLengthInteger()(*(unsigned int *)v174 | ((unint64_t)*(unsigned __int16 *)&v174[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[6] << 48), *(unsigned __int16 *)&v174[8] | ((unint64_t)*(unsigned __int16 *)&v174[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v174[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[14] << 48), *(unsigned __int16 *)&v174[16] | (*(unsigned __int16 *)&v174[18] << 16));
          uint64_t v95 = v94;
          uint64_t v73 = *(void *)(v94 + 16);
          if (v73) {
            break;
          }
          LODWORD(v71) = 0;
          unint64_t v72 = MEMORY[0x1E4FBC860];
LABEL_76:
          uint64_t v99 = *(void *)(v72 + 16);
          if (v99 && !*(_WORD *)(v72 + 2 * v99 + 30))
          {
            do
            {
              *(void *)(v72 + 16) = v99 - 1;
              if (v99 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v72 + 28 + 2 * v99--));
          }
          swift_bridgeObjectRelease();
          *(_DWORD *)uint64_t v173 = v93;
          *(_WORD *)&v173[4] = v168;
          *(_WORD *)&v173[6] = v70;
          *(_WORD *)&uint64_t v173[8] = v167;
          *(_WORD *)&v173[10] = v166;
          *(_WORD *)&v173[12] = v165;
          *(_WORD *)&v173[14] = (_WORD)v162;
          *(_WORD *)&v173[16] = v163;
          *(_WORD *)&v173[18] = v159;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v72);
          if (v3) {
            goto LABEL_113;
          }
          uint64_t v164 = 0;
          char v101 = *(void *)(v72 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v101)) {
            goto LABEL_114;
          }
          _So9NSDecimala__length_setter(v101, v173);
          *(_DWORD *)uint64_t v174 = *(_DWORD *)v173;
          *(_OWORD *)&void v174[4] = *(_OWORD *)&v173[4];
          *(void *)uint64_t v173 = v71 | 0x30;
          v102._uint64_t countAndFlagsBits = MEMORY[0x185302020](v173, 1);
          String.append(_:)(v102);
          swift_bridgeObjectRelease();
          uint64_t v168 = *(unsigned __int16 *)&v174[4];
          uint64_t v165 = *(unsigned int *)v174;
          uint64_t v166 = *(unsigned __int16 *)&v174[6];
          LOWORD(v70) = *(_WORD *)&v174[8];
          LOWORD(v71) = *(_WORD *)&v174[10];
          LOWORD(v72) = *(_WORD *)&v174[12];
          LOWORD(v73) = *(_WORD *)&v174[14];
          LOWORD(v74) = *(_WORD *)&v174[16];
          uint64_t v103 = *(unsigned __int16 *)&v174[18];
          *(_DWORD *)uint64_t v173 = *(_DWORD *)v174;
          *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
          *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
          *(_DWORD *)&uint64_t v173[8] = *(_DWORD *)&v174[8];
          *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
          *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
          *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
          *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          uint64_t v104 = _So9NSDecimala__length_getter(v173);
          int v90 = v103;
          uint64_t v87 = v168;
          uint64_t v88 = v165;
          char v89 = v166;
          if (!v104) {
            goto LABEL_91;
          }
        }
        BOOL v158 = v93;
        unint64_t v72 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v74 = v72 + 30;
        *(void *)(v72 + 16) = v73;
        bzero((void *)(v72 + 32), 2 * v73);
        BOOL v96 = *(unsigned __int16 *)(2 * v73 + v95 + 30);
        uint64_t v97 = v96 / 0xA;
        do
        {
          *(_WORD *)(v74 + 2 * v73) = v97;
          LODWORD(v71) = v96 % 0xA;
          if (v73 == 1)
          {
            LODWORD(v93) = v158;
            goto LABEL_76;
          }
          BOOL v96 = *(unsigned __int16 *)(v95 + 28 + 2 * v73) | (v71 << 16);
          uint64_t v97 = v96 / 0xA;
          char v98 = v73 - 2;
          --v73;
        }
        while (v98 < *(void *)(v72 + 16));
        __break(1u);
LABEL_87:
        uint64_t v165 = v69;
        unint64_t v107 = v78;
        uint64_t v108 = swift_retain_n();
        uint64_t v162 = &v156;
        MEMORY[0x1F4188790](v108);
        swift_retain();
        uint64_t v163 = v107;
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v153, (uint64_t *)v174);
        uint64_t v164 = v3;
        if (v3) {
          goto LABEL_116;
        }
        uint64_t v105 = *(void *)v174;
        uint64_t v159 = *(void *)&v174[8];
        swift_release();
        swift_release_n();
        BOOL v79 = v168;
        uint64_t v69 = v165;
        if (v159)
        {
          uint64_t v109 = v160;
          uint64_t v110 = v161;
          uint64_t v106 = v159;
          goto LABEL_103;
        }
      }
      LOWORD(v87) = v86;
      uint64_t v88 = v165;
      char v89 = v166;
      int v90 = v167;
LABEL_91:
      LODWORD(v167) = v90;
      *(_DWORD *)uint64_t v173 = v88;
      *(_WORD *)&v173[4] = v87;
      *(_WORD *)&v173[6] = v89;
      *(_WORD *)&uint64_t v173[8] = v70;
      *(_WORD *)&v173[10] = v71;
      *(_WORD *)&v173[12] = v72;
      *(_WORD *)&v173[14] = v73;
      *(_WORD *)&v173[16] = v74;
      *(_WORD *)&v173[18] = v90;
      unint64_t v111 = v88;
      unint64_t v112 = v87;
      uint64_t v113 = _So9NSDecimala__exponent_getter(v173);
      uint64_t v114 = v111;
      uint64_t v115 = v112;
      int64_t v116 = v167;
      if (v113 <= 0)
      {
        uint64_t v165 = v111;
        *(_DWORD *)uint64_t v173 = v111;
        unint64_t v117 = v115;
        *(_WORD *)&v173[4] = v115;
        *(_WORD *)&v173[6] = v89;
        *(_WORD *)&uint64_t v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        *(_WORD *)&v173[18] = v167;
        int64_t v118 = _So9NSDecimala__exponent_getter(v173);
        uint64_t v166 = v89;
        if (v118)
        {
          int64_t v116 = v167;
          do
          {
            v119._uint64_t countAndFlagsBits = 48;
            v119._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v119);
            *(_DWORD *)uint64_t v173 = v165;
            *(_WORD *)&v173[4] = v117;
            *(_WORD *)&v173[6] = v166;
            *(_WORD *)&uint64_t v173[8] = v70;
            *(_WORD *)&v173[10] = v71;
            *(_WORD *)&v173[12] = v72;
            *(_WORD *)&v173[14] = v73;
            *(_WORD *)&v173[16] = v74;
            *(_WORD *)&v173[18] = v116;
            uint64_t v120 = _So9NSDecimala__exponent_getter(v173);
            _So9NSDecimala__exponent_setter((v120 + 1), v174);
            unint64_t v117 = *(_WORD *)&v174[4];
            LOWORD(v70) = *(_WORD *)&v174[8];
            LOWORD(v71) = *(_WORD *)&v174[10];
            LOWORD(v72) = *(_WORD *)&v174[12];
            LOWORD(v73) = *(_WORD *)&v174[14];
            LOWORD(v74) = *(_WORD *)&v174[16];
            int64_t v116 = *(_WORD *)&v174[18];
            uint64_t v165 = *(unsigned int *)v174;
            uint64_t v166 = *(unsigned __int16 *)&v174[6];
            *(_DWORD *)uint64_t v173 = *(_DWORD *)v174;
            *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
            *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
            *(_DWORD *)&uint64_t v173[8] = *(_DWORD *)&v174[8];
            *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
            *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
            *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
            *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          }
          while (_So9NSDecimala__exponent_getter(v173));
        }
        else
        {
          int64_t v116 = v167;
        }
        v121._uint64_t countAndFlagsBits = 46;
        v121._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v121);
        v122._uint64_t countAndFlagsBits = 48;
        v122._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v122);
        uint64_t v114 = v165;
        LOWORD(v89) = v166;
      }
      else
      {
        unint64_t v117 = v115;
      }
      *(_DWORD *)uint64_t v173 = v114;
      *(_WORD *)&v173[4] = v117;
      *(_WORD *)&v173[6] = v89;
      *(_WORD *)&uint64_t v173[8] = v70;
      *(_WORD *)&v173[10] = v71;
      *(_WORD *)&v173[12] = v72;
      *(_WORD *)&v173[14] = v73;
      *(_WORD *)&v173[16] = v74;
      *(_WORD *)&v173[18] = v116;
      if (_So9NSDecimala__isNegative_getter(v173))
      {
        v123._uint64_t countAndFlagsBits = 45;
        v123._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v123);
      }
      *(void *)uint64_t v173 = v169;
      *(void *)&uint64_t v173[8] = v170;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      uint64_t v105 = String.init<A>(_:)();
      uint64_t v106 = v124;
LABEL_102:
      uint64_t v109 = v160;
      uint64_t v110 = v161;
LABEL_103:
      *(void *)uint64_t v173 = v105;
      *(void *)&uint64_t v173[8] = v106;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v126;
      *(void *)uint64_t v174 = 0;
      *(void *)&v174[8] = 0xE000000000000000;
      _StringGuts.grow(_:)(83);
      v127._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
      v127._unint64_t object = (void *)0xED00002065737261;
      String.append(_:)(v127);
      v128._uint64_t countAndFlagsBits = v109;
      v128._unint64_t object = v110;
      String.append(_:)(v128);
      v129._unint64_t object = (void *)0x80000001823AE520;
      v129._uint64_t countAndFlagsBits = 0xD000000000000039;
      String.append(_:)(v129);
      long long v130 = MEMORY[0x1E4FBB1A0];
      _print_unlocked<A, B>(_:_:)();
      v131._uint64_t countAndFlagsBits = 0x2220726F2022;
      v131._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v131);
      _print_unlocked<A, B>(_:_:)();
      v132._uint64_t countAndFlagsBits = 34;
      v132._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v132);
      unint64_t v133 = *(void *)v174;
      uint64_t v134 = *(void *)&v174[8];
      *(void *)(inited + 72) = v130;
      *(void *)(inited + 48) = v133;
      *(void *)(inited + 56) = v134;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      int64_t v135 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)v174);
      unint64_t v136 = *(void *)v174;
      unint64_t v137 = *(void *)&v174[8];
      swift_retain();
      uint64_t v138 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v137);
      if (v139)
      {
        __break(1u);
      }
      else
      {
        v135[(v138 >> 6) + 8] |= 1 << v138;
        uint64_t v140 = (uint64_t *)(v135[6] + 16 * v138);
        *uint64_t v140 = v136;
        v140[1] = v137;
        outlined init with take of Any(&v174[16], (_OWORD *)(v135[7] + 32 * v138));
        uint64_t v141 = v135[2];
        uint64_t v142 = __OFADD__(v141, 1);
        char v143 = v141 + 1;
        if (!v142)
        {
          v135[2] = v143;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          uint64_t v144 = objc_allocWithZone((Class)NSError);
          uint64_t v145 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v146 = objc_msgSend(v144, sel_initWithDomain_code_userInfo_, v145, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v147 = objc_msgSend(v146, sel_domain);
          uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
          unint64_t v150 = v149;

          if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v150 == v151)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_109;
          }
          uint64_t v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v152)
          {
LABEL_109:
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v8;
          }
LABEL_112:
          __break(1u);
        }
      }
      __break(1u);
      goto LABEL_112;
    }
    break;
  }
LABEL_115:
  swift_release_n();
  swift_willThrow();
  __break(1u);
LABEL_116:
  swift_release_n();
  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  Swift::String v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  Swift::String v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  Swift::String v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  Swift::String v59;
  int v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  int v65;
  __int16 v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  unint64_t v80;
  Swift::String v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  Swift::String v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v101;
  Swift::String v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  __int16 v114;
  int v115;
  int v116;
  Swift::String v117;
  int v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  unint64_t v122;
  uint64_t inited;
  uint64_t v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  uint64_t v128;
  Swift::String v129;
  Swift::String v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t *v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  id v144;
  id v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  unsigned char v151[40];
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned char v171[20];
  unsigned char v172[120];
  unsigned char v173[40];
  uint64_t v174;
  char v175;
  uint64_t v176;

  uint64_t v4 = v2;
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1;
  }
  uint64_t v8 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v8 = 11;
  }
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15, v8 | (v7 << 16));
  if ((v10 & 0x100000000) == 0) {
    return v9;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v173);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v173, (uint64_t)&v174);
  if (v175 != 1) {
    return v174;
  }
  unint64_t v160 = (void *)a2;
  specialized NSDecimal.init(_:)(3.14);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = specialized static ICUCurrencyNumberFormatter.create(for:)(v4);
  uint64_t v159 = a1;
  long long v161 = v4;
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    char v19 = v18;
    uint64_t v20 = v12;
    uint64_t v164 = v14;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v19, v12, v14, v16);
    if (!v3) {
      goto LABEL_42;
    }

    swift_release();
    uint64_t v162 = 0;
LABEL_10:
    uint64_t v14 = v164;
  }
  else
  {
    uint64_t v20 = v12;
    uint64_t v162 = v3;
  }
  *(void *)uint64_t v172 = v20;
  uint64_t v22 = HIDWORD(v20);
  uint64_t v166 = v20;
  uint64_t v23 = HIWORD(v20);
  uint64_t v24 = v14 >> 16;
  *(void *)&v172[8] = v14;
  uint64_t v25 = HIDWORD(v14);
  uint64_t v26 = HIWORD(v14);
  uint64_t v27 = HIWORD(v16);
  *(_DWORD *)&v172[16] = v16;
  if (!_So9NSDecimala__length_getter(v172))
  {
    *(_DWORD *)uint64_t v172 = v166;
    *(_WORD *)&v172[4] = v22;
    *(_WORD *)&v172[6] = v23;
    *(void *)&v172[8] = v14;
    *(_DWORD *)&v172[16] = v16;
    if (_So9NSDecimala__isNegative_getter(v172))
    {
      uint64_t v52 = 5136718;
      uint64_t v53 = 0xE300000000000000;
      goto LABEL_56;
    }
  }
  *(_DWORD *)uint64_t v172 = v166;
  *(_WORD *)&v172[4] = v22;
  *(_WORD *)&v172[6] = v23;
  *(void *)&v172[8] = v14;
  *(_DWORD *)&v172[16] = v16;
  if (!_So9NSDecimala__length_getter(v172))
  {
    uint64_t v53 = 0xE100000000000000;
    uint64_t v52 = 48;
    goto LABEL_56;
  }
  uint64_t v169 = 0;
  uint64_t v170 = 0xE000000000000000;
  *(_DWORD *)uint64_t v172 = v166;
  *(_WORD *)&v172[4] = v22;
  *(_WORD *)&v172[6] = v23;
  *(void *)&v172[8] = v14;
  *(_DWORD *)&v172[16] = v16;
  *(_DWORD *)uint64_t v171 = v166;
  *(_WORD *)&v171[4] = v22;
  *(_WORD *)&v171[6] = v23;
  *(void *)&v171[8] = v14;
  *(_DWORD *)&v171[16] = v16;
  if ((int)_So9NSDecimala__exponent_getter(v171) >= 1)
  {
    do
    {
      LODWORD(v165) = v16;
      v28._uint64_t countAndFlagsBits = 48;
      v28._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      *(_DWORD *)uint64_t v171 = v166;
      *(_WORD *)&v171[4] = v22;
      *(_WORD *)&v171[6] = v23;
      *(_WORD *)&v171[8] = v14;
      *(_WORD *)&v171[10] = v24;
      *(_WORD *)&v171[12] = v25;
      *(_WORD *)&v171[14] = v26;
      *(_WORD *)&v171[16] = v165;
      *(_WORD *)&v171[18] = v27;
      uint64_t v29 = _So9NSDecimala__exponent_getter(v171);
      _So9NSDecimala__exponent_setter((v29 - 1), v172);
      LOWORD(v22) = *(_WORD *)&v172[4];
      LOWORD(v23) = *(_WORD *)&v172[6];
      uint64_t v14 = *(unsigned __int16 *)&v172[8];
      LOWORD(v24) = *(_WORD *)&v172[10];
      LOWORD(v25) = *(_WORD *)&v172[12];
      LOWORD(v26) = *(_WORD *)&v172[14];
      uint64_t v16 = *(unsigned __int16 *)&v172[16];
      uint64_t v27 = *(unsigned __int16 *)&v172[18];
      uint64_t v166 = *(unsigned int *)v172;
      *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
      *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
      *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
      *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
      *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
      *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
      *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
      *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
      *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v171) > 0);
  }
  *(_DWORD *)uint64_t v171 = v166;
  *(_WORD *)&v171[4] = v22;
  *(_WORD *)&v171[6] = v23;
  *(_WORD *)&v171[8] = v14;
  *(_WORD *)&v171[10] = v24;
  *(_WORD *)&v171[12] = v25;
  *(_WORD *)&v171[14] = v26;
  *(_WORD *)&v171[16] = v16;
  *(_WORD *)&v171[18] = v27;
  uint64_t v30 = _So9NSDecimala__exponent_getter(v171);
  uint64_t v31 = v166;
  if (!v30)
  {
    _So9NSDecimala__exponent_setter(1, v172);
    uint64_t v31 = *(unsigned int *)v172;
    LOWORD(v22) = *(_WORD *)&v172[4];
    LOWORD(v23) = *(_WORD *)&v172[6];
    uint64_t v14 = *(unsigned __int16 *)&v172[8];
    LOWORD(v24) = *(_WORD *)&v172[10];
    LOWORD(v25) = *(_WORD *)&v172[12];
    LOWORD(v26) = *(_WORD *)&v172[14];
    uint64_t v16 = *(unsigned __int16 *)&v172[16];
    uint64_t v27 = *(unsigned __int16 *)&v172[18];
  }
  uint64_t v166 = v31;
  *(_DWORD *)uint64_t v171 = v31;
  *(_WORD *)&v171[4] = v22;
  *(_WORD *)&v171[6] = v23;
  *(_WORD *)&v171[8] = v14;
  *(_WORD *)&v171[10] = v24;
  *(_WORD *)&v171[12] = v25;
  *(_WORD *)&v171[14] = v26;
  LODWORD(v165) = v16;
  *(_WORD *)&v171[16] = v16;
  LODWORD(v163) = v27;
  *(_WORD *)&v171[18] = v27;
  if (!_So9NSDecimala__length_getter(v171))
  {
    uint64_t v32 = v166;
    char v33 = v165;
    char v34 = v163;
LABEL_46:
    LODWORD(v163) = v34;
    *(_DWORD *)uint64_t v171 = v32;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v33;
    *(_WORD *)&v171[18] = v34;
    uint64_t v55 = v32;
    int v56 = v33;
    if ((int)_So9NSDecimala__exponent_getter(v171) <= 0)
    {
      uint64_t v166 = v55;
      *(_DWORD *)uint64_t v171 = v55;
      *(_WORD *)&v171[4] = v22;
      *(_WORD *)&v171[6] = v23;
      *(_WORD *)&v171[8] = v14;
      *(_WORD *)&v171[10] = v24;
      *(_WORD *)&v171[12] = v25;
      *(_WORD *)&v171[14] = v26;
      LODWORD(v165) = v56;
      *(_WORD *)&v171[16] = v56;
      *(_WORD *)&v171[18] = v163;
      uint64_t v57 = _So9NSDecimala__exponent_getter(v171);
      uint64_t v164 = v14;
      if (v57)
      {
        LOWORD(v56) = v165;
        LOWORD(v58) = v163;
        do
        {
          v59._uint64_t countAndFlagsBits = 48;
          v59._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v59);
          *(_DWORD *)uint64_t v171 = v166;
          *(_WORD *)&v171[4] = v22;
          *(_WORD *)&v171[6] = v23;
          *(_WORD *)&v171[8] = v164;
          *(_WORD *)&v171[10] = v24;
          *(_WORD *)&v171[12] = v25;
          *(_WORD *)&v171[14] = v26;
          *(_WORD *)&v171[16] = v56;
          *(_WORD *)&v171[18] = v58;
          long long v60 = _So9NSDecimala__exponent_getter(v171);
          _So9NSDecimala__exponent_setter((v60 + 1), v172);
          LOWORD(v22) = *(_WORD *)&v172[4];
          LOWORD(v23) = *(_WORD *)&v172[6];
          LOWORD(v24) = *(_WORD *)&v172[10];
          LOWORD(v25) = *(_WORD *)&v172[12];
          LOWORD(v26) = *(_WORD *)&v172[14];
          LOWORD(v56) = *(_WORD *)&v172[16];
          uint64_t v58 = *(unsigned __int16 *)&v172[18];
          uint64_t v166 = *(unsigned int *)v172;
          *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
          *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
          *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
          uint64_t v164 = *(unsigned __int16 *)&v172[8];
          *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
          *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
          *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
          *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
          *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
          *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        }
        while (_So9NSDecimala__exponent_getter(v171));
      }
      else
      {
        LOWORD(v56) = v165;
        uint64_t v58 = v163;
      }
      LODWORD(v163) = v58;
      v61._uint64_t countAndFlagsBits = 46;
      v61._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 48;
      v62._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      LOWORD(v14) = v164;
      LODWORD(v55) = v166;
    }
    *(_DWORD *)uint64_t v171 = v55;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v56;
    *(_WORD *)&v171[18] = v163;
    if (_So9NSDecimala__isNegative_getter(v171))
    {
      v63._uint64_t countAndFlagsBits = 45;
      v63._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v63);
    }
    *(void *)uint64_t v171 = v169;
    *(void *)&v171[8] = v170;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    uint64_t v52 = String.init<A>(_:)();
    uint64_t v53 = v64;
    goto LABEL_56;
  }
  uint64_t v16 = -858993459;
  uint64_t v32 = v166;
  char v33 = v165;
  char v34 = v163;
  while (1)
  {
    uint64_t v166 = v32;
    LODWORD(v165) = v33;
    LODWORD(v163) = v34;
    *(_DWORD *)uint64_t v171 = v32;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v33;
    *(_WORD *)&v171[18] = v34;
    if (!_So9NSDecimala__exponent_getter(v171))
    {
      uint64_t v164 = v14;
      v35._uint64_t countAndFlagsBits = 46;
      v35._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      LOWORD(v14) = v164;
    }
    *(_DWORD *)uint64_t v171 = v166;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v165;
    *(_WORD *)&v171[18] = v163;
    uint64_t v36 = _So9NSDecimala__exponent_getter(v171);
    _So9NSDecimala__exponent_setter((v36 + 1), v172);
    unint64_t v37 = *(unsigned int *)v172;
    uint64_t v38 = *(_WORD *)&v172[6];
    uint64_t v165 = *(unsigned __int16 *)&v172[8];
    uint64_t v166 = *(unsigned __int16 *)&v172[4];
    uint64_t v163 = *(unsigned __int16 *)&v172[12];
    uint64_t v164 = *(unsigned __int16 *)&v172[10];
    uint64_t v157 = *(unsigned __int16 *)&v172[14];
    LODWORD(v158) = *(unsigned __int16 *)&v172[16];
    LODWORD(v156) = *(unsigned __int16 *)&v172[18];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v172 | ((unint64_t)*(unsigned __int16 *)&v172[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[6] << 48), *(unsigned __int16 *)&v172[8] | ((unint64_t)*(unsigned __int16 *)&v172[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v172[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[14] << 48), *(unsigned __int16 *)&v172[16] | (*(unsigned __int16 *)&v172[18] << 16));
    uint64_t v40 = v39;
    uint64_t v41 = *(void *)(v39 + 16);
    if (v41) {
      break;
    }
    LODWORD(v22) = 0;
    int v42 = MEMORY[0x1E4FBC860];
LABEL_31:
    uint64_t v46 = *(void *)(v42 + 16);
    if (v46 && !*(_WORD *)(v42 + 2 * v46 + 30))
    {
      do
      {
        *(void *)(v42 + 16) = v46 - 1;
        if (v46 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v42 + 28 + 2 * v46--));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v171 = v37;
    *(_WORD *)&v171[4] = v166;
    *(_WORD *)&v171[6] = v38;
    *(_WORD *)&v171[8] = v165;
    *(_WORD *)&v171[10] = v164;
    *(_WORD *)&v171[12] = v163;
    *(_WORD *)&v171[14] = v157;
    *(_WORD *)&v171[16] = (_WORD)v158;
    *(_WORD *)&v171[18] = v156;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v42);
    if (v3) {
      goto LABEL_115;
    }
    uint64_t v162 = 0;
    uint64_t v48 = *(void *)(v42 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v48))
    {
LABEL_114:
      uint64_t v153 = 0;
      uint64_t v152 = 3455;
      v151[32] = 2;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_115:
      swift_bridgeObjectRelease();
      swift_unexpectedError();
      __break(1u);
      goto LABEL_116;
    }
    _So9NSDecimala__length_setter(v48, v171);
    *(_DWORD *)uint64_t v172 = *(_DWORD *)v171;
    *(_OWORD *)&v172[4] = *(_OWORD *)&v171[4];
    *(void *)uint64_t v171 = v22 | 0x30;
    v49._uint64_t countAndFlagsBits = MEMORY[0x185302020](v171, 1);
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    uint64_t v166 = *(unsigned int *)v172;
    LOWORD(v22) = *(_WORD *)&v172[4];
    LOWORD(v23) = *(_WORD *)&v172[6];
    uint64_t v164 = *(unsigned __int16 *)&v172[8];
    LOWORD(v24) = *(_WORD *)&v172[10];
    LOWORD(v25) = *(_WORD *)&v172[12];
    LOWORD(v26) = *(_WORD *)&v172[14];
    LODWORD(v165) = *(unsigned __int16 *)&v172[16];
    int64_t v50 = *(unsigned __int16 *)&v172[18];
    *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
    *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
    *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
    *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
    *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
    *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
    *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
    *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
    *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
    int v51 = _So9NSDecimala__length_getter(v171);
    char v33 = v165;
    uint64_t v32 = v166;
    char v34 = v50;
    uint64_t v14 = v164;
    if (!v51) {
      goto LABEL_46;
    }
  }
  uint64_t v155 = v37;
  int v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  uint64_t v20 = v42 + 30;
  *(void *)(v42 + 16) = v41;
  bzero((void *)(v42 + 32), 2 * v41);
  char v43 = *(unsigned __int16 *)(2 * v41 + v40 + 30);
  uint64_t v44 = v43 / 0xA;
  do
  {
    *(_WORD *)(v20 + 2 * v41) = v44;
    LODWORD(v22) = v43 % 0xA;
    if (v41 == 1)
    {
      LODWORD(v37) = v155;
      goto LABEL_31;
    }
    char v43 = *(unsigned __int16 *)(v40 + 28 + 2 * v41) | (v22 << 16);
    uint64_t v44 = v43 / 0xA;
    unint64_t v45 = v41 - 2;
    --v41;
  }
  while (v45 < *(void *)(v42 + 16));
  __break(1u);
LABEL_42:
  uint64_t v54 = swift_retain_n();
  MEMORY[0x1F4188790](v54);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v151, (uint64_t *)v172);
  uint64_t v162 = v3;
  if (!v3)
  {
    uint64_t v52 = *(void *)v172;
    uint64_t v53 = *(void *)&v172[8];
    swift_release();
    swift_release_n();
    if (!v53) {
      goto LABEL_10;
    }
LABEL_56:
    uint64_t v169 = v52;
    uint64_t v170 = v53;
    *(void *)uint64_t v172 = specialized NSDecimal.init(_:)(0x3039uLL);
    *(_DWORD *)&v172[8] = v65;
    *(_WORD *)&v172[12] = v66;
    *(_WORD *)&v172[14] = v67;
    *(_DWORD *)&v172[16] = v68;
    _So9NSDecimala__isNegative_setter_0(v172);
    uint64_t v69 = *(unsigned int *)v172;
    uint64_t v166 = *(unsigned __int16 *)&v172[4];
    uint64_t v70 = *(unsigned __int16 *)&v172[6];
    uint64_t v71 = *(unsigned __int16 *)&v172[8];
    unint64_t v72 = *(unsigned __int16 *)&v172[10];
    uint64_t v73 = *(unsigned __int16 *)&v172[12];
    uint64_t v74 = *(unsigned __int16 *)&v172[14];
    LODWORD(v75) = *(unsigned __int16 *)&v172[16];
    unint64_t v76 = *(unsigned __int16 *)&v172[18];
    uint64_t v77 = specialized static ICUCurrencyNumberFormatter.create(for:)(v161);
    uint64_t v164 = v70;
    if (v77)
    {
      uint64_t v163 = *(void *)(v77 + 16);
      uint64_t v165 = v77;
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      uint64_t v3 = v162;
      uint64_t v78 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v163, v69 | (v166 << 32) | (v70 << 48), v71 | (v72 << 16) | (v73 << 32) | (v74 << 48), v75 | (v76 << 16));
      if (!v3) {
        goto LABEL_88;
      }

      swift_release();
      uint64_t v162 = 0;
    }
    BOOL v79 = v166;
    while (1)
    {
      *(_DWORD *)uint64_t v172 = v69;
      *(_WORD *)&v172[4] = v79;
      unint64_t v80 = v164;
      *(_WORD *)&v172[6] = v164;
      *(_WORD *)&v172[8] = v71;
      *(_WORD *)&v172[10] = v72;
      *(_WORD *)&v172[12] = v73;
      *(_WORD *)&v172[14] = v74;
      *(_WORD *)&v172[16] = v75;
      *(_WORD *)&v172[18] = v76;
      if (!_So9NSDecimala__length_getter(v172))
      {
        *(_DWORD *)uint64_t v172 = v69;
        *(_WORD *)&v172[4] = v166;
        *(_WORD *)&v172[6] = v80;
        *(_WORD *)&v172[8] = v71;
        *(_WORD *)&v172[10] = v72;
        *(_WORD *)&v172[12] = v73;
        *(_WORD *)&v172[14] = v74;
        *(_WORD *)&v172[16] = v75;
        *(_WORD *)&v172[18] = v76;
        if (_So9NSDecimala__isNegative_getter(v172))
        {
          uint64_t v105 = 5136718;
          uint64_t v106 = 0xE300000000000000;
          goto LABEL_103;
        }
      }
      *(_DWORD *)uint64_t v172 = v69;
      *(_WORD *)&v172[4] = v166;
      *(_WORD *)&v172[6] = v80;
      *(_WORD *)&v172[8] = v71;
      *(_WORD *)&v172[10] = v72;
      *(_WORD *)&v172[12] = v73;
      *(_WORD *)&v172[14] = v74;
      *(_WORD *)&v172[16] = v75;
      *(_WORD *)&v172[18] = v76;
      if (!_So9NSDecimala__length_getter(v172))
      {
        uint64_t v106 = 0xE100000000000000;
        uint64_t v105 = 48;
        goto LABEL_103;
      }
      uint64_t v167 = 0;
      uint64_t v168 = 0xE000000000000000;
      *(_DWORD *)uint64_t v172 = v69;
      *(_WORD *)&v172[4] = v166;
      *(_WORD *)&v172[6] = v80;
      *(_WORD *)&v172[8] = v71;
      *(_WORD *)&v172[10] = v72;
      *(_WORD *)&v172[12] = v73;
      *(_WORD *)&v172[14] = v74;
      *(_WORD *)&v172[16] = v75;
      *(_WORD *)&v172[18] = v76;
      *(_DWORD *)uint64_t v171 = v69;
      *(_WORD *)&v171[4] = v166;
      *(_WORD *)&v171[6] = v80;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      *(_WORD *)&v171[18] = v76;
      if ((int)_So9NSDecimala__exponent_getter(v171) >= 1)
      {
        do
        {
          LODWORD(v165) = v76;
          v81._uint64_t countAndFlagsBits = 48;
          v81._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v81);
          *(_DWORD *)uint64_t v171 = v69;
          *(_WORD *)&v171[4] = v166;
          *(_WORD *)&v171[6] = v80;
          *(_WORD *)&v171[8] = v71;
          *(_WORD *)&v171[10] = v72;
          *(_WORD *)&v171[12] = v73;
          *(_WORD *)&v171[14] = v74;
          *(_WORD *)&v171[16] = v75;
          *(_WORD *)&v171[18] = v165;
          uint64_t v82 = _So9NSDecimala__exponent_getter(v171);
          _So9NSDecimala__exponent_setter((v82 - 1), v172);
          uint64_t v69 = *(unsigned int *)v172;
          unint64_t v80 = *(unsigned __int16 *)&v172[6];
          LOWORD(v71) = *(_WORD *)&v172[8];
          LOWORD(v72) = *(_WORD *)&v172[10];
          LOWORD(v73) = *(_WORD *)&v172[12];
          LOWORD(v74) = *(_WORD *)&v172[14];
          LOWORD(v75) = *(_WORD *)&v172[16];
          unint64_t v76 = *(unsigned __int16 *)&v172[18];
          *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
          uint64_t v166 = *(unsigned __int16 *)&v172[4];
          *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
          *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
          *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
          *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
          *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
          *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
          *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
          *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        }
        while ((int)_So9NSDecimala__exponent_getter(v171) > 0);
      }
      *(_DWORD *)uint64_t v171 = v69;
      *(_WORD *)&v171[4] = v166;
      *(_WORD *)&v171[6] = v80;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      *(_WORD *)&v171[18] = v76;
      uint64_t v83 = _So9NSDecimala__exponent_getter(v171);
      uint64_t v84 = v166;
      if (!v83)
      {
        _So9NSDecimala__exponent_setter(1, v172);
        uint64_t v69 = *(unsigned int *)v172;
        uint64_t v84 = *(unsigned __int16 *)&v172[4];
        unint64_t v80 = *(unsigned __int16 *)&v172[6];
        LOWORD(v71) = *(_WORD *)&v172[8];
        LOWORD(v72) = *(_WORD *)&v172[10];
        LOWORD(v73) = *(_WORD *)&v172[12];
        LOWORD(v74) = *(_WORD *)&v172[14];
        LOWORD(v75) = *(_WORD *)&v172[16];
        unint64_t v76 = *(unsigned __int16 *)&v172[18];
      }
      *(_DWORD *)uint64_t v171 = v69;
      unint64_t v85 = v80;
      uint64_t v86 = v84;
      *(_WORD *)&v171[4] = v84;
      uint64_t v163 = v69;
      uint64_t v164 = v85;
      *(_WORD *)&v171[6] = v85;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      LODWORD(v165) = v76;
      *(_WORD *)&v171[18] = v76;
      if (!_So9NSDecimala__length_getter(v171)) {
        break;
      }
      unint64_t v76 = -858993459;
      uint64_t v69 = 10;
      uint64_t v87 = v86;
      uint64_t v88 = v163;
      char v89 = v164;
      int v90 = v165;
      while (1)
      {
        uint64_t v163 = v88;
        uint64_t v166 = v87;
        LODWORD(v165) = v90;
        *(_DWORD *)uint64_t v171 = v88;
        *(_WORD *)&v171[4] = v87;
        *(_WORD *)&v171[6] = v89;
        *(_WORD *)&v171[8] = v71;
        *(_WORD *)&v171[10] = v72;
        *(_WORD *)&v171[12] = v73;
        *(_WORD *)&v171[14] = v74;
        *(_WORD *)&v171[16] = v75;
        *(_WORD *)&v171[18] = v90;
        if (!_So9NSDecimala__exponent_getter(v171))
        {
          uint64_t v164 = v89;
          v91._uint64_t countAndFlagsBits = 46;
          v91._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v91);
          LOWORD(v89) = v164;
        }
        *(_DWORD *)uint64_t v171 = v163;
        *(_WORD *)&v171[4] = v166;
        *(_WORD *)&v171[6] = v89;
        *(_WORD *)&v171[8] = v71;
        *(_WORD *)&v171[10] = v72;
        *(_WORD *)&v171[12] = v73;
        *(_WORD *)&v171[14] = v74;
        *(_WORD *)&v171[16] = v75;
        *(_WORD *)&v171[18] = v165;
        uint64_t v92 = _So9NSDecimala__exponent_getter(v171);
        _So9NSDecimala__exponent_setter((v92 + 1), v172);
        int v93 = *(unsigned int *)v172;
        LOWORD(v71) = *(_WORD *)&v172[6];
        uint64_t v165 = *(unsigned __int16 *)&v172[8];
        uint64_t v166 = *(unsigned __int16 *)&v172[4];
        uint64_t v163 = *(unsigned __int16 *)&v172[12];
        uint64_t v164 = *(unsigned __int16 *)&v172[10];
        BOOL v158 = (uint64_t *)*(unsigned __int16 *)&v172[14];
        LODWORD(v161) = *(unsigned __int16 *)&v172[16];
        LODWORD(v157) = *(unsigned __int16 *)&v172[18];
        NSDecimal.asVariableLengthInteger()(*(unsigned int *)v172 | ((unint64_t)*(unsigned __int16 *)&v172[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[6] << 48), *(unsigned __int16 *)&v172[8] | ((unint64_t)*(unsigned __int16 *)&v172[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v172[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[14] << 48), *(unsigned __int16 *)&v172[16] | (*(unsigned __int16 *)&v172[18] << 16));
        uint64_t v95 = v94;
        uint64_t v74 = *(void *)(v94 + 16);
        if (v74) {
          break;
        }
        LODWORD(v72) = 0;
        uint64_t v73 = MEMORY[0x1E4FBC860];
        uint64_t v99 = *(void *)(MEMORY[0x1E4FBC860] + 16);
        if (v99)
        {
LABEL_78:
          if (!*(_WORD *)(v73 + 2 * v99 + 30))
          {
            do
            {
              *(void *)(v73 + 16) = v99 - 1;
              if (v99 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v73 + 28 + 2 * v99--));
          }
        }
LABEL_81:
        swift_bridgeObjectRelease();
        *(_DWORD *)uint64_t v171 = v93;
        *(_WORD *)&v171[4] = v166;
        *(_WORD *)&v171[6] = v71;
        *(_WORD *)&v171[8] = v165;
        *(_WORD *)&v171[10] = v164;
        *(_WORD *)&v171[12] = v163;
        *(_WORD *)&v171[14] = (_WORD)v158;
        *(_WORD *)&v171[16] = (_WORD)v161;
        *(_WORD *)&v171[18] = v157;
        NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v73);
        uint64_t v162 = v3;
        if (v3) {
          goto LABEL_115;
        }
        char v101 = *(void *)(v73 + 16);
        swift_bridgeObjectRelease();
        if (HIDWORD(v101)) {
          goto LABEL_114;
        }
        _So9NSDecimala__length_setter(v101, v171);
        *(_DWORD *)uint64_t v172 = *(_DWORD *)v171;
        *(_OWORD *)&v172[4] = *(_OWORD *)&v171[4];
        *(void *)uint64_t v171 = v72 | 0x30;
        v102._uint64_t countAndFlagsBits = MEMORY[0x185302020](v171, 1);
        String.append(_:)(v102);
        swift_bridgeObjectRelease();
        uint64_t v166 = *(unsigned __int16 *)&v172[4];
        uint64_t v163 = *(unsigned int *)v172;
        uint64_t v164 = *(unsigned __int16 *)&v172[6];
        LOWORD(v71) = *(_WORD *)&v172[8];
        LOWORD(v72) = *(_WORD *)&v172[10];
        LOWORD(v73) = *(_WORD *)&v172[12];
        LOWORD(v74) = *(_WORD *)&v172[14];
        LOWORD(v75) = *(_WORD *)&v172[16];
        uint64_t v103 = *(unsigned __int16 *)&v172[18];
        *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
        *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
        *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
        *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
        *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
        *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
        *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
        *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
        *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        uint64_t v104 = _So9NSDecimala__length_getter(v171);
        int v90 = v103;
        uint64_t v87 = v166;
        uint64_t v88 = v163;
        char v89 = v164;
        if (!v104) {
          goto LABEL_92;
        }
      }
      uint64_t v156 = v93;
      uint64_t v73 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v75 = v73 + 30;
      *(void *)(v73 + 16) = v74;
      bzero((void *)(v73 + 32), 2 * v74);
      BOOL v96 = *(unsigned __int16 *)(2 * v74 + v95 + 30);
      uint64_t v97 = v96 / 0xA;
      do
      {
        *(_WORD *)(v75 + 2 * v74) = v97;
        LODWORD(v72) = v96 % 0xA;
        if (v74 == 1)
        {
          LODWORD(v93) = v156;
          uint64_t v99 = *(void *)(v73 + 16);
          if (!v99) {
            goto LABEL_81;
          }
          goto LABEL_78;
        }
        BOOL v96 = *(unsigned __int16 *)(v95 + 28 + 2 * v74) | (v72 << 16);
        uint64_t v97 = v96 / 0xA;
        char v98 = v74 - 2;
        --v74;
      }
      while (v98 < *(void *)(v73 + 16));
      __break(1u);
LABEL_88:
      uint64_t v163 = v69;
      unint64_t v107 = (void *)v78;
      uint64_t v108 = swift_retain_n();
      BOOL v158 = &v154;
      MEMORY[0x1F4188790](v108);
      swift_retain();
      long long v161 = v107;
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v151, (uint64_t *)v172);
      uint64_t v162 = v3;
      if (v3) {
        goto LABEL_116;
      }
      uint64_t v105 = *(void *)v172;
      uint64_t v157 = *(void *)&v172[8];
      swift_release();
      swift_release_n();
      BOOL v79 = v166;
      uint64_t v69 = v163;
      if (v157)
      {
        uint64_t v109 = v160;
        uint64_t v106 = v157;
        goto LABEL_104;
      }
    }
    uint64_t v87 = v86;
    uint64_t v88 = v163;
    char v89 = v164;
    int v90 = v165;
LABEL_92:
    LODWORD(v165) = v90;
    *(_DWORD *)uint64_t v171 = v88;
    *(_WORD *)&v171[4] = v87;
    *(_WORD *)&v171[6] = v89;
    *(_WORD *)&v171[8] = v71;
    *(_WORD *)&v171[10] = v72;
    *(_WORD *)&v171[12] = v73;
    *(_WORD *)&v171[14] = v74;
    *(_WORD *)&v171[16] = v75;
    *(_WORD *)&v171[18] = v90;
    uint64_t v110 = v87;
    unint64_t v111 = v88;
    unint64_t v112 = _So9NSDecimala__exponent_getter(v171);
    uint64_t v113 = v111;
    if (v112 <= 0)
    {
      uint64_t v163 = v111;
      *(_DWORD *)uint64_t v171 = v111;
      uint64_t v166 = v110;
      *(_WORD *)&v171[4] = v110;
      *(_WORD *)&v171[6] = v89;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      uint64_t v115 = v165;
      *(_WORD *)&v171[18] = v165;
      int64_t v116 = _So9NSDecimala__exponent_getter(v171);
      uint64_t v164 = v89;
      if (v116)
      {
        uint64_t v114 = v166;
        do
        {
          v117._uint64_t countAndFlagsBits = 48;
          v117._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v117);
          *(_DWORD *)uint64_t v171 = v163;
          *(_WORD *)&v171[4] = v114;
          *(_WORD *)&v171[6] = v164;
          *(_WORD *)&v171[8] = v71;
          *(_WORD *)&v171[10] = v72;
          *(_WORD *)&v171[12] = v73;
          *(_WORD *)&v171[14] = v74;
          *(_WORD *)&v171[16] = v75;
          *(_WORD *)&v171[18] = v115;
          int64_t v118 = _So9NSDecimala__exponent_getter(v171);
          _So9NSDecimala__exponent_setter((v118 + 1), v172);
          uint64_t v114 = *(_WORD *)&v172[4];
          LOWORD(v71) = *(_WORD *)&v172[8];
          LOWORD(v72) = *(_WORD *)&v172[10];
          LOWORD(v73) = *(_WORD *)&v172[12];
          LOWORD(v74) = *(_WORD *)&v172[14];
          LOWORD(v75) = *(_WORD *)&v172[16];
          uint64_t v115 = *(unsigned __int16 *)&v172[18];
          uint64_t v163 = *(unsigned int *)v172;
          uint64_t v164 = *(unsigned __int16 *)&v172[6];
          *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
          *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
          *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
          *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
          *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
          *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
          *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
          *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
          *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        }
        while (_So9NSDecimala__exponent_getter(v171));
      }
      else
      {
        uint64_t v114 = v166;
      }
      LODWORD(v165) = v115;
      v119._uint64_t countAndFlagsBits = 46;
      v119._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v119);
      v120._uint64_t countAndFlagsBits = 48;
      v120._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v120);
      uint64_t v113 = v163;
      LOWORD(v89) = v164;
    }
    else
    {
      uint64_t v114 = v110;
    }
    *(_DWORD *)uint64_t v171 = v113;
    *(_WORD *)&v171[4] = v114;
    *(_WORD *)&v171[6] = v89;
    *(_WORD *)&v171[8] = v71;
    *(_WORD *)&v171[10] = v72;
    *(_WORD *)&v171[12] = v73;
    *(_WORD *)&v171[14] = v74;
    *(_WORD *)&v171[16] = v75;
    *(_WORD *)&v171[18] = v165;
    if (_So9NSDecimala__isNegative_getter(v171))
    {
      v121._uint64_t countAndFlagsBits = 45;
      v121._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v121);
    }
    *(void *)uint64_t v171 = v167;
    *(void *)&v171[8] = v168;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    uint64_t v105 = String.init<A>(_:)();
    uint64_t v106 = v122;
LABEL_103:
    uint64_t v109 = v160;
LABEL_104:
    *(void *)uint64_t v171 = v105;
    *(void *)&v171[8] = v106;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 40) = v124;
    *(void *)uint64_t v172 = 0;
    *(void *)&v172[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(83);
    v125._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
    v125._unint64_t object = (void *)0xED00002065737261;
    String.append(_:)(v125);
    v126._uint64_t countAndFlagsBits = v159;
    v126._unint64_t object = v109;
    String.append(_:)(v126);
    v127._unint64_t object = (void *)0x80000001823AE520;
    v127._uint64_t countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v127);
    unint64_t v128 = MEMORY[0x1E4FBB1A0];
    _print_unlocked<A, B>(_:_:)();
    v129._uint64_t countAndFlagsBits = 0x2220726F2022;
    v129._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v129);
    _print_unlocked<A, B>(_:_:)();
    v130._uint64_t countAndFlagsBits = 34;
    v130._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v130);
    unint64_t v131 = *(void *)v172;
    uint64_t v132 = *(void *)&v172[8];
    *(void *)(inited + 72) = v128;
    *(void *)(inited + 48) = v131;
    *(void *)(inited + 56) = v132;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    unint64_t v133 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)v172);
    uint64_t v134 = *(void *)v172;
    int64_t v135 = *(void *)&v172[8];
    swift_retain();
    unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v135);
    if (v137)
    {
      __break(1u);
    }
    else
    {
      v133[(v136 >> 6) + 8] |= 1 << v136;
      uint64_t v138 = (uint64_t *)(v133[6] + 16 * v136);
      *uint64_t v138 = v134;
      v138[1] = v135;
      outlined init with take of Any(&v172[16], (_OWORD *)(v133[7] + 32 * v136));
      uint64_t v139 = v133[2];
      uint64_t v140 = __OFADD__(v139, 1);
      uint64_t v141 = v139 + 1;
      if (!v140)
      {
        v133[2] = v141;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        uint64_t v142 = objc_allocWithZone((Class)NSError);
        char v143 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v144 = objc_msgSend(v142, sel_initWithDomain_code_userInfo_, v143, 2048, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v145 = objc_msgSend(v144, sel_domain);
        uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
        uint64_t v148 = v147;

        if (v146 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v148 == v149)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_110;
        }
        unint64_t v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v150)
        {
LABEL_110:
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v9;
        }
LABEL_113:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_113;
  }
LABEL_116:
  swift_release_n();
  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal.ParseStrategy.parse(_:)(NSDecimal *__return_ptr retstr, Swift::String a2)
{
  int64_t v3 = v2;
  unint64_t object = (unint64_t)a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v68 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v14 = countAndFlagsBits;
  }
  uint64_t v15 = 7;
  if (((object >> 60) & ((countAndFlagsBits & 0x800000000000000) == 0)) != 0) {
    uint64_t v15 = 11;
  }
  NSDecimal.ParseStrategy.parse(_:startingAt:in:)(countAndFlagsBits, object, 0xFuLL, v11, v15 | (v14 << 16), v3);
  if ((v16 & 0x100000000) != 0)
  {
    swift_bridgeObjectRetain();
    specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(countAndFlagsBits, object, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v65);
    swift_bridgeObjectRelease();
    outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v65, (uint64_t)&v66);
    if (v67 == 1)
    {
      specialized NSDecimal.init(_:)(3.14);
      LODWORD(v62) = v17;
      WORD2(v62) = v18;
      HIWORD(v62) = v19;
      LODWORD(v63) = v20;
      WORD2(v63) = v21;
      HIWORD(v63) = v22;
      LODWORD(v64) = v23;
      uint64_t v24 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v6 + 48);
      v24(&v62, v7, v6);
      unint64_t v62 = specialized NSDecimal.init(_:)(0x3039uLL);
      LODWORD(v63) = v25;
      WORD2(v63) = v26;
      HIWORD(v63) = v27;
      LODWORD(v64) = v28;
      _So9NSDecimala__isNegative_setter_0(&v62);
      uint64_t v60 = AssociatedTypeWitness;
      v24(&v62, v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v30;
      unint64_t v62 = 0;
      unint64_t v63 = 0xE000000000000000;
      _StringGuts.grow(_:)(83);
      v31._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
      v31._unint64_t object = (void *)0xED00002065737261;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = countAndFlagsBits;
      v32._unint64_t object = (void *)object;
      String.append(_:)(v32);
      v33._unint64_t object = (void *)0x80000001823AE520;
      v33._uint64_t countAndFlagsBits = 0xD000000000000039;
      String.append(_:)(v33);
      _print_unlocked<A, B>(_:_:)();
      v34._uint64_t countAndFlagsBits = 0x2220726F2022;
      v34._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v34);
      _print_unlocked<A, B>(_:_:)();
      v35._uint64_t countAndFlagsBits = 34;
      v35._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      unint64_t v36 = v62;
      unint64_t v37 = v63;
      *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 48) = v36;
      *(void *)(inited + 56) = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v62);
      uint64_t v39 = v62;
      uint64_t v40 = v63;
      swift_retain();
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
      if (v42)
      {
        __break(1u);
      }
      else
      {
        v38[(v41 >> 6) + 8] |= 1 << v41;
        char v43 = (uint64_t *)(v38[6] + 16 * v41);
        uint64_t *v43 = v39;
        v43[1] = v40;
        outlined init with take of Any(&v64, (_OWORD *)(v38[7] + 32 * v41));
        uint64_t v44 = v38[2];
        BOOL v45 = __OFADD__(v44, 1);
        uint64_t v46 = v44 + 1;
        if (!v45)
        {
          v38[2] = v46;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v47 = objc_allocWithZone((Class)NSError);
          uint64_t v48 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v49 = objc_msgSend(v47, sel_initWithDomain_code_userInfo_, v48, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v50 = objc_msgSend(v49, sel_domain);
          id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          uint64_t v53 = v52;

          if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v53 == v54)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v55 = v13;
LABEL_14:
            swift_willThrow();
            uint64_t v57 = *(void (**)(char *, uint64_t))(v61 + 8);
            uint64_t v58 = v60;
            v57(v68, v60);
            v57(v55, v58);
            return;
          }
          char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v55 = v13;
          if (v56) {
            goto LABEL_14;
          }
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.ParseStrategy<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return NSDecimal.ParseStrategy.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.ParseStrategy<A>(void *a1, uint64_t a2)
{
  return NSDecimal.ParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.ParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  NSDecimal.ParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.ParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  return static NSDecimal.ParseStrategy.== infix(_:_:)(a1, a2);
}

uint64_t NSDecimal.init<A>(_:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v10, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v4) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return v10;
}

uint64_t NSDecimal.init(_:format:lenient:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return NSDecimal.init(_:format:lenient:)(a1, a2, a3, a4, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, type metadata accessor for NSDecimal.FormatStyle, (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:), type metadata accessor for NSDecimal.FormatStyle);
}

{
  return NSDecimal.init(_:format:lenient:)(a1, a2, a3, a4, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:), type metadata accessor for NSDecimal.FormatStyle.Percent);
}

{
  return NSDecimal.init(_:format:lenient:)(a1, a2, a3, a4, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:), type metadata accessor for NSDecimal.FormatStyle.Currency);
}

uint64_t NSDecimal.init(_:format:lenient:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t), uint64_t (*a8)(void))
{
  int v23 = a8;
  __int16 v22 = a7;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15);
  __int16 v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NSDecimal.FormatStyle(a3, (uint64_t)v18, a6);
  v18[*(int *)(v16 + 44)] = a4;
  uint64_t v19 = v22(a1, a2);
  if (!v8) {
    uint64_t v16 = v19;
  }
  outlined destroy of Any?((uint64_t)v18, a5);
  swift_bridgeObjectRelease();
  outlined destroy of NSDecimal.FormatStyle(a3, v23);
  return v16;
}

uint64_t NSDecimal.ParseStrategy<>.init(format:lenient:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a3);
}

{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle.Percent, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a3);
}

{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle.Currency, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, a3);
}

uint64_t NSDecimal.ParseStrategy<>.init(format:lenient:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  outlined init with take of NSDecimal.FormatStyle(a1, a5, a3);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a4);
  *(unsigned char *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.ParseStrategy<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.ParseStrategy<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for NSDecimal.ParseStrategy(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for NSDecimal.ParseStrategy(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x181D0D2B0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          a1[v9] = a2 + 1;
        }
        else
        {
          __int16 v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for NSDecimal.ParseStrategy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D0D3A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t sub_181D0D420()
{
  uint64_t v1 = *(void *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1) {
      goto LABEL_7;
    }
    uint64_t v6 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  uint64_t v7 = v0 + v3 + *(int *)(v6 + 36);
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
LABEL_7:
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t outlined destroy of NSDecimal.FormatStyle(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _expressionCompatibleValue(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v38[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  size_t v10 = (char *)&v38[-1] - v9;
  outlined init with copy of Any(a1, (uint64_t)v49);
  outlined init with copy of Any((uint64_t)v49, (uint64_t)v44);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  if (!v48)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  outlined destroy of Any?((uint64_t)&v47, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v11 = MEMORY[0x1E4FBB1A0];
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast() & 1) != 0 || (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast())
    {
      outlined consume of Data._Representation(v47, *((unint64_t *)&v47 + 1));
      goto LABEL_27;
    }
    if (swift_dynamicCast())
    {

      swift_release();
      swift_release();
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    if (swift_dynamicCast()) {
      goto LABEL_27;
    }
    type metadata accessor for NSDecimal(0);
    if ((swift_dynamicCast() & 1) != 0 || (swift_dynamicCast() & 1) != 0 || swift_dynamicCast()) {
      goto LABEL_27;
    }
    type metadata accessor for NSComparisonResult(0);
    if (swift_dynamicCast())
    {
      uint64_t v13 = v47;
      *(void *)(a2 + 24) = MEMORY[0x1E4FBB550];
      *(void *)a2 = v13;
    }
    else if (swift_dynamicCast())
    {
      outlined init with take of PredicateExpressions.PredicateRegex((uint64_t)v10, (uint64_t)v7);
      unsigned int v14 = &v7[*(int *)(v5 + 20)];
      uint64_t v16 = *(void *)v14;
      uint64_t v15 = *((void *)v14 + 1);
      *(void *)(a2 + 24) = v11;
      *(void *)a2 = v16;
      *(void *)(a2 + 8) = v15;
      swift_bridgeObjectRetain();
      outlined destroy of PredicateExpressions.PredicateRegex((uint64_t)v7);
    }
    else
    {
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sequence);
        if (swift_dynamicCast())
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v44);
          uint64_t v18 = v45;
          uint64_t v19 = v46;
          int v20 = __swift_project_boxed_opaque_existential_1(v44, v45);
          MEMORY[0x1F4188790](v20);
          *(&v37 - 4) = v18;
          *(&v37 - 3) = (uint64_t)v19;
          *(&v37 - 2) = (uint64_t)_expressionCompatibleValue(for:);
          *(&v37 - 1) = 0;
          MEMORY[0x1F4188790](v21);
          *(&v37 - 4) = v18;
          *(&v37 - 3) = (uint64_t)v19;
          *(&v37 - 2) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error);
          *(&v37 - 1) = v22;
          uint64_t v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pypSgIsgnrzr_xSayAFGsAE_pSTRzAFRsd__sAE_pRsd_0_r_0_lIetMgnozo_Tp5((void (*)(void *__return_ptr, char *, uint64_t *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out Any?, @error @owned Error), (uint64_t)(&v37 - 6), v18, v19);
          if (!v2)
          {
            uint64_t v24 = v23;
            *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
            *(void *)a2 = v24;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClosedRange);
          if (!swift_dynamicCast())
          {
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            *Swift::String v31 = 1;
            swift_willThrow();
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
          }
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v44);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_182106040;
          uint64_t v26 = v45;
          __int16 v27 = v46;
          __swift_project_boxed_opaque_existential_1(v44, v45);
          (*((void (**)(void *, void *, uint64_t, void (*)(char *, char *, uint64_t)))v27 + 1))(v42, v40, v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
          uint64_t v28 = v43;
          uint64_t v29 = __swift_project_boxed_opaque_existential_1(v42, v43);
          uint64_t v39 = v28;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(boxed_opaque_existential_1, v29, v28);
          _expressionCompatibleValue(for:)(v38);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
          if (v2)
          {
            *(void *)(v25 + 16) = 0;
            swift_release();
          }
          else
          {
            uint64_t v32 = v45;
            Swift::String v33 = v46;
            __swift_project_boxed_opaque_existential_1(v44, v45);
            (*((void (**)(void *, void *, uint64_t, void (*)(char *, char *, uint64_t)))v33 + 1))(v42, v40, v32, v33);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
            uint64_t v34 = v41;
            Swift::String v35 = __swift_project_boxed_opaque_existential_1(v40, v41);
            uint64_t v39 = v34;
            unint64_t v36 = __swift_allocate_boxed_opaque_existential_1(v38);
            (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v36, v35, v34);
            _expressionCompatibleValue(for:)(v38);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
            *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
            *(void *)a2 = v25;
          }
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      }
      long long v17 = v47;
      *(void *)(a2 + 24) = v11;
      *(_OWORD *)a2 = v17;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  swift_bridgeObjectRelease();
LABEL_27:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return outlined init with copy of Any(a1, a2);
}

uint64_t ClosedRange._bounds.getter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  a1[3] = v6;
  a1[4] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  unsigned int v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v12(boxed_opaque_existential_1, v3, v6);
  uint64_t v9 = v3 + *(int *)(a3 + 36);
  a2[3] = v6;
  a2[4] = v7;
  size_t v10 = __swift_allocate_boxed_opaque_existential_1(a2);

  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v12)(v10, v9, v6);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _OWORD v7[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, a1, AssociatedTypeWitness);
  a2(v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

id PredicateExpressions.Value.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v4 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, id, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v2, v4);
  _expressionCompatibleValue(for:)((uint64_t)v14, (uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v3)
  {
    uint64_t v6 = v17;
    if (v17)
    {
      uint64_t v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
      uint64_t v8 = *(void *)(v6 - 8);
      double v9 = MEMORY[0x1F4188790](v7);
      uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v8 + 16))(v11, v9);
      uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    else
    {
      uint64_t v12 = 0;
    }
    id v2 = objc_msgSend(self, sel_expressionForConstantValue_, v12);
    swift_unknownObjectRelease();
  }
  return v2;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Value<A>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.Value.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

void *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Variable<A>(uint64_t a1)
{
  uint64_t v3 = (void *)specialized PredicateExpressions.Variable.convert(state:)(a1);
  if (!v2)
  {
    uint64_t v1 = v3;
    id v4 = v3;
  }
  return v1;
}

id PredicateExpressions.KeyPath.convert(state:)(uint64_t a1, uint64_t a2)
{
  id v4 = v3;
  uint64_t v5 = v2;
  uint64_t v175 = a1;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v173 = a2;
  uint64_t v7 = *(void **)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v176 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v176 - 8);
  MEMORY[0x1F4188790](v176);
  uint64_t v11 = (char *)&v170 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v174 = (char *)&v170 - v14;
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v170 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v20 = *(void (**)(char *, void *, void *, double))(v19 + 16);
  id v187 = v5;
  v20(v18, v5, v7, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  id v177 = v7;
  if (swift_dynamicCast())
  {
    uint64_t v172 = v6;
    uint64_t v171 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v181, (uint64_t)&v184);
    uint64_t v22 = v185;
    uint64_t v21 = v186;
    __swift_project_boxed_opaque_existential_1(&v184, v185);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v175, v22, v21);
    uint64_t v25 = v3;
    if (!v3)
    {
      id v31 = (id)v23;
      char v32 = v24;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v184);
      if (v32)
      {
        LOBYTE(v184) = 1;
        id v33 = v31;
        uint64_t v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        Swift::String v35 = self;
        id v36 = objc_msgSend(v35, sel_expressionForConstantValue_, v34);
        swift_unknownObjectRelease();
        LOBYTE(v184) = 0;
        id v37 = objc_msgSend(v35, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        uint64_t v38 = v35;
        uint64_t v25 = 0;
        id v31 = objc_msgSend(v38, sel_expressionForConditional_trueExpression_falseExpression_, v33, v36, v37);
      }
      uint64_t AssociatedTypeWitness = v171;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v184);
    id v4 = 0;
    id v26 = v3;
    uint64_t AssociatedTypeWitness = v171;
    uint64_t v6 = v172;
  }
  else
  {
    uint64_t v183 = 0;
    long long v181 = 0u;
    long long v182 = 0u;
    outlined destroy of Any?((uint64_t)&v181, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v26 = 0;
  }
  *(void *)&long long v184 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, id, uint64_t))(v6 + 16))(&v184, v177, v6);
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v176);
    if (v26) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v172 = v6;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  __int16 v27 = v174;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v174, v11, AssociatedTypeWitness);
  uint64_t v180 = AssociatedTypeWitness;
  uint64_t v28 = __swift_allocate_boxed_opaque_existential_1(&v178);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(v28, v27, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)&v178, (uint64_t)&v181);
  uint64_t v25 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v178);
  if (*((void *)&v182 + 1))
  {
    outlined init with take of Any(&v181, &v184);
    __swift_project_boxed_opaque_existential_1(&v184, v185);
    uint64_t v39 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v31 = objc_msgSend(self, sel_expressionForConstantValue_, v39);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v184);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v27, AssociatedTypeWitness);

LABEL_18:
    if (AssociatedTypeWitness == MEMORY[0x1E4FBB7A8] || AssociatedTypeWitness == MEMORY[0x1E4FBB1A0]) {
      uint64_t v41 = 0x6874676E656CLL;
    }
    else {
      uint64_t v41 = 0x746E756F6340;
    }
    uint64_t v42 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (v43)
    {
      uint64_t v44 = v42;
      uint64_t v45 = v43;
      swift_bridgeObjectRelease();
      if (objc_msgSend(v31, sel_expressionType) == (id)1)
      {
LABEL_26:
        uint64_t v46 = String._bridgeToObjectiveCImpl()();
        id v47 = objc_msgSend(self, sel_expressionForKeyPath_, v46);
LABEL_47:
        id v26 = v47;

        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return v26;
      }
      if (objc_msgSend(v31, sel_expressionType) != (id)3)
      {
LABEL_50:
        uint64_t v79 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
        uint64_t v185 = v79;
        *(void *)&long long v184 = v31;
        unint64_t v80 = self;
        uint64_t v81 = String._bridgeToObjectiveCImpl()();
        id v82 = v31;
        id v83 = objc_msgSend(v80, sel__newKeyPathExpressionForString_, v81);
        swift_unknownObjectRelease();
        if (v83)
        {
          *((void *)&v182 + 1) = v79;
          *(void *)&long long v181 = v83;
        }
        else
        {
          long long v181 = 0u;
          long long v182 = 0u;
        }
        id v84 = objc_allocWithZone((Class)NSKeyPathExpression);
        id v85 = @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v184, &v181);
        if (v85)
        {
LABEL_54:
          id v26 = v85;

          swift_bridgeObjectRelease();
          return v26;
        }
        goto LABEL_101;
      }
      id v187 = v25;
      id v50 = objc_msgSend(v31, sel_keyPath);
      id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      uint64_t v53 = v52;

      *(void *)&long long v184 = 64;
      *((void *)&v184 + 1) = 0xE100000000000000;
      *(void *)&long long v181 = v51;
      *((void *)&v181 + 1) = v53;
      if ((v53 & 0x1000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        unint64_t v54 = String.subscript.getter();
        unint64_t v56 = v55;
        uint64_t v58 = v57;
        uint64_t v60 = v59;
        swift_bridgeObjectRelease();
        uint64_t v178 = 64;
        unint64_t v179 = 0xE100000000000000;
        unint64_t v61 = Substring.init<A>(_:)();
        if ((v54 ^ v56) >= 0x4000 && (v61 ^ v62) >> 14)
        {
          specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v61, v62, v63, v64, 0, 0, 0, 0, 0, v54, v56, v58, v60);
          char v66 = v65;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v66 & 1) == 0) {
            goto LABEL_50;
          }
LABEL_46:
          id v72 = objc_msgSend(v31, sel_keyPath);
          id v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
          uint64_t v75 = v74;

          *(void *)&long long v184 = v73;
          *((void *)&v184 + 1) = v75;
          v76._uint64_t countAndFlagsBits = 46;
          v76._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v76);
          v77._uint64_t countAndFlagsBits = v44;
          v77._unint64_t object = v45;
          String.append(_:)(v77);
          uint64_t v78 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v47 = objc_msgSend(self, sel_expressionForKeyPath_, v78);
          goto LABEL_47;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_45:
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
      id v177 = v31;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      StringProtocol._ephemeralString.getter();
      char v67 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v68 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v69 = objc_msgSend(v67, sel_rangeOfString_, v68);
      uint64_t v71 = v70;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v69 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        id v31 = v177;
        goto LABEL_45;
      }
      if (!__OFADD__(v69, v71))
      {
        StringProtocol._toUTF16Indices(_:)();
        swift_bridgeObjectRelease();
        id v31 = v177;
        goto LABEL_50;
      }
      __break(1u);
      goto LABEL_99;
    }
    id v26 = (id)AssociatedTypeWitness;
    if (swift_conformsToProtocol2()) {
      uint64_t v48 = AssociatedTypeWitness;
    }
    else {
      uint64_t v48 = 0;
    }
    if (!v48
      || (static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)((char *)&v184), v184 == 4))
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *id v49 = 0;
      swift_willThrow();

      return v26;
    }
    switch((char)v184)
    {
      case 1:
        if (objc_msgSend(v31, sel_expressionType) == (id)1)
        {
          uint64_t v86 = String._bridgeToObjectiveCImpl()();
          id v87 = objc_msgSend(self, sel_expressionForKeyPath_, v86);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_97;
        }
        if (objc_msgSend(v31, sel_expressionType) != (id)3) {
          goto LABEL_92;
        }
        unint64_t v112 = &selRef_initWithTarget_handler_;
        id v177 = v31;
        id v113 = objc_msgSend(v31, sel_keyPath);
        id v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
        uint64_t v116 = v115;

        *(void *)&long long v184 = 64;
        *((void *)&v184 + 1) = 0xE100000000000000;
        *(void *)&long long v181 = v114;
        *((void *)&v181 + 1) = v116;
        if ((v116 & 0x1000000000000000) != 0)
        {
          uint64_t v136 = v41;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol._ephemeralString.getter();
          StringProtocol._ephemeralString.getter();
          unint64_t v137 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v138 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v139 = objc_msgSend(v137, sel_rangeOfString_, v138);
          uint64_t v141 = v140;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v139 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            if (__OFADD__(v139, v141))
            {
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
              goto LABEL_105;
            }
            StringProtocol._toUTF16Indices(_:)();
            swift_bridgeObjectRelease();
            id v31 = v177;
            goto LABEL_92;
          }
          uint64_t v41 = v136;
          unint64_t v112 = &selRef_initWithTarget_handler_;
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v117 = String.subscript.getter();
          unint64_t v119 = v118;
          uint64_t v121 = v120;
          uint64_t v123 = v122;
          swift_bridgeObjectRelease();
          uint64_t v178 = 64;
          unint64_t v179 = 0xE100000000000000;
          unint64_t v124 = Substring.init<A>(_:)();
          if ((v117 ^ v119) >= 0x4000 && (v124 ^ v125) >> 14)
          {
            specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v124, v125, v126, v127, 0, 0, 0, 0, 0, v117, v119, v121, v123);
            char v129 = v128;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v31 = v177;
            if ((v129 & 1) == 0)
            {
LABEL_92:
              uint64_t v161 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
              uint64_t v185 = v161;
              *(void *)&long long v184 = v31;
              uint64_t v162 = self;
              uint64_t v163 = String._bridgeToObjectiveCImpl()();
              id v164 = v31;
              id v165 = objc_msgSend(v162, sel__newKeyPathExpressionForString_, v163);
              swift_unknownObjectRelease();
              if (v165)
              {
                *((void *)&v182 + 1) = v161;
                *(void *)&long long v181 = v165;
              }
              else
              {
                long long v181 = 0u;
                long long v182 = 0u;
              }
              id v166 = objc_allocWithZone((Class)NSKeyPathExpression);
              id v167 = @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v184, &v181);
              if (!v167)
              {
LABEL_105:
                __break(1u);
                JUMPOUT(0x181D0F830);
              }
              id v87 = v167;
              swift_bridgeObjectRelease();
LABEL_97:
              *(void *)&long long v184 = 0;
              uint64_t v168 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
              id v169 = objc_msgSend(self, sel_expressionForConstantValue_, v168);
              swift_unknownObjectRelease();
              id v26 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v87, v169, 0, 4, 0);

              return v26;
            }
LABEL_82:
            id v149 = [v31 v112[195]];
            id v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
            uint64_t v152 = v151;

            *(void *)&long long v184 = v150;
            *((void *)&v184 + 1) = v152;
            v153._uint64_t countAndFlagsBits = 46;
            v153._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v153);
            v154._uint64_t countAndFlagsBits = v41;
            v154._unint64_t object = (void *)0xE600000000000000;
            String.append(_:)(v154);
            uint64_t v155 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v87 = objc_msgSend(self, sel_expressionForKeyPath_, v155);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            goto LABEL_97;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        id v31 = v177;
        goto LABEL_82;
      case 2:
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v88 = swift_allocObject();
        *(_OWORD *)(v88 + 16) = xmmword_1821037E0;
        uint64_t v89 = String._bridgeToObjectiveCImpl()();
        int v90 = self;
        id v91 = objc_msgSend(v90, sel_expressionForSymbolicString_, v89);
        swift_unknownObjectRelease();
        if (v91) {
          goto LABEL_60;
        }
        goto LABEL_102;
      case 3:
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v88 = swift_allocObject();
        *(_OWORD *)(v88 + 16) = xmmword_1821037E0;
        uint64_t v92 = String._bridgeToObjectiveCImpl()();
        int v90 = self;
        id v91 = objc_msgSend(v90, sel_expressionForSymbolicString_, v92);
        swift_unknownObjectRelease();
        if (!v91) {
          goto LABEL_103;
        }
LABEL_60:
        *(void *)(v88 + 56) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
        *(void *)(v88 + 32) = v91;
        uint64_t v93 = String._bridgeToObjectiveCImpl()();
        id v26 = objc_msgSend(v90, sel_expressionForFunction_selectorName_arguments_, v31, v93, _ContiguousArrayBuffer._asCocoaArray()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        return v26;
      default:
        if (objc_msgSend(v31, sel_expressionType) == (id)1) {
          goto LABEL_26;
        }
        if (objc_msgSend(v31, sel_expressionType) != (id)3) {
          goto LABEL_85;
        }
        unint64_t v94 = &selRef_initWithTarget_handler_;
        id v177 = v31;
        id v95 = objc_msgSend(v31, sel_keyPath);
        id v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
        uint64_t v98 = v97;

        *(void *)&long long v184 = 64;
        *((void *)&v184 + 1) = 0xE100000000000000;
        *(void *)&long long v181 = v96;
        *((void *)&v181 + 1) = v98;
        if ((v98 & 0x1000000000000000) != 0)
        {
          uint64_t v130 = v41;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol._ephemeralString.getter();
          StringProtocol._ephemeralString.getter();
          unint64_t v131 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v132 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v133 = objc_msgSend(v131, sel_rangeOfString_, v132);
          uint64_t v135 = v134;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v133 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            if (__OFADD__(v133, v135))
            {
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }
            StringProtocol._toUTF16Indices(_:)();
            swift_bridgeObjectRelease();
            id v31 = v177;
LABEL_85:
            uint64_t v156 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
            uint64_t v185 = v156;
            *(void *)&long long v184 = v31;
            uint64_t v157 = self;
            uint64_t v158 = String._bridgeToObjectiveCImpl()();
            id v82 = v31;
            id v159 = objc_msgSend(v157, sel__newKeyPathExpressionForString_, v158);
            swift_unknownObjectRelease();
            if (v159)
            {
              *((void *)&v182 + 1) = v156;
              *(void *)&long long v181 = v159;
            }
            else
            {
              long long v181 = 0u;
              long long v182 = 0u;
            }
            id v160 = objc_allocWithZone((Class)NSKeyPathExpression);
            id v85 = @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v184, &v181);
            if (v85) {
              goto LABEL_54;
            }
            goto LABEL_104;
          }
          uint64_t v41 = v130;
          unint64_t v94 = &selRef_initWithTarget_handler_;
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v99 = String.subscript.getter();
          unint64_t v101 = v100;
          uint64_t v103 = v102;
          uint64_t v105 = v104;
          swift_bridgeObjectRelease();
          uint64_t v178 = 64;
          unint64_t v179 = 0xE100000000000000;
          unint64_t v106 = Substring.init<A>(_:)();
          if ((v99 ^ v101) >= 0x4000 && (v106 ^ v107) >> 14)
          {
            specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v106, v107, v108, v109, 0, 0, 0, 0, 0, v99, v101, v103, v105);
            char v111 = v110;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v31 = v177;
            if ((v111 & 1) == 0) {
              goto LABEL_85;
            }
LABEL_79:
            id v142 = [v31 v94[195]];
            id v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
            uint64_t v145 = v144;

            *(void *)&long long v184 = v143;
            *((void *)&v184 + 1) = v145;
            v146._uint64_t countAndFlagsBits = 46;
            v146._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v146);
            v147._uint64_t countAndFlagsBits = v41;
            v147._unint64_t object = (void *)0xE600000000000000;
            String.append(_:)(v147);
            uint64_t v148 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v47 = objc_msgSend(self, sel_expressionForKeyPath_, v148);
            goto LABEL_47;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        id v31 = v177;
        goto LABEL_79;
    }
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v27, AssociatedTypeWitness);
  outlined destroy of Any?((uint64_t)&v181, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v26) {
    goto LABEL_11;
  }
LABEL_10:
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  unsigned char *v29 = 2;
LABEL_11:
  swift_willThrow();
  return v26;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.KeyPath<A, B>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.KeyPath.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.PredicateEvaluate.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a2[2];
  uint64_t v5 = 8 * v4;
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a2[4] & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v7 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v4)
    {
      unint64_t v8 = 0;
      unint64_t v9 = v2[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v4 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v7[-v9] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v9 + 16);
      uint64_t v11 = v7 + 16;
      unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v4 != v8)
      {
LABEL_9:
        unint64_t v14 = v4 - v8;
        uint64_t v15 = 8 * v8;
        double v16 = &v7[8 * v8];
        uint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)double v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v169 = TupleTypeMetadata;
  uint64_t v160 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v176 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = a1;
  unint64_t v182 = v4;
  uint64_t v185 = v2;
  id v165 = &v156;
  if (v4 == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v21 = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    long long v181 = &v156;
    MEMORY[0x1F4188790](v19);
    uint64_t v22 = 8 * v4;
    if (v4)
    {
      unint64_t v23 = v185[4] & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v24 = v185[6] & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v25 = (uint64_t *)((char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v26 = v182;
      do
      {
        v23 += 8;
        v24 += 8;
        swift_getAssociatedTypeWitness();
        *v25++ = type metadata accessor for PredicateExpressions.Variable();
        --v26;
      }
      while (v26);
    }
    unint64_t v4 = v182;
    uint64_t v21 = swift_getTupleTypeMetadata();
    uint64_t v2 = v185;
    uint64_t v5 = v22;
  }
  id v164 = &v156;
  uint64_t v168 = v21;
  id v177 = *(char **)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v171 = (char *)&v156 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = &v156;
  long long v181 = (uint64_t *)v2[3];
  uint64_t v28 = *(v181 - 1);
  MEMORY[0x1F4188790](v29);
  id v31 = (char *)&v156 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = &v156;
  MEMORY[0x1F4188790](v32);
  if (v4)
  {
    unint64_t v33 = v185[4] & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v185[6] & 0xFFFFFFFFFFFFFFFELL;
    Swift::String v35 = (uint64_t *)((char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v36 = v182;
    do
    {
      v33 += 8;
      v34 += 8;
      *v35++ = swift_getAssociatedTypeWitness();
      --v36;
    }
    while (v36);
  }
  uint64_t v37 = type metadata accessor for Predicate();
  uint64_t v180 = type metadata accessor for Optional();
  uint64_t v179 = *(void *)(v180 - 8);
  MEMORY[0x1F4188790](v180);
  uint64_t v39 = (char *)&v156 - v38;
  uint64_t v162 = &v156;
  uint64_t v40 = *(void *)(v37 - 8);
  double v42 = MEMORY[0x1F4188790](v41);
  uint64_t v44 = (uint64_t *)((char *)&v156 - v43);
  uint64_t v45 = v181;
  (*(void (**)(char *, char *, uint64_t *, double))(v28 + 16))(v31, v184, v181, v42);
  *(void *)&long long v191 = MEMORY[0x1E4FBC860];
  uint64_t v46 = v185;
  id v47 = v183;
  (*(void (**)(long long *, uint64_t *))(v185[5] + 16))(&v191, v45);
  if (v47)
  {

    (*(void (**)(char *, uint64_t *))(v28 + 8))(v31, v45);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v39, 1, 1, v37);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v39, v180);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v48 = 2;
    swift_willThrow();
    return (uint64_t)v165;
  }
  uint64_t v183 = 0;
  (*(void (**)(char *, uint64_t *))(v28 + 8))(v31, v45);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v39, 0, 1, v37);
  uint64_t v157 = v40;
  (*(void (**)(void *, char *, uint64_t))(v40 + 32))(v44, v39, v37);
  uint64_t v50 = *(int *)(v37 + 36);
  id v159 = v44;
  (*((void (**)(char *, char *, uint64_t))v177 + 2))(v171, (char *)v44 + v50, v168);
  uint64_t v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v160 + 16))(v176, &v184[*((int *)v46 + 15)], v169);
  uint64_t v158 = v37;
  unint64_t v52 = v182;
  if (!v182)
  {
LABEL_94:
    uint64_t v135 = v159[3];
    uint64_t v136 = v159[4];
    unint64_t v137 = __swift_project_boxed_opaque_existential_1(v159, v135);
    double v138 = MEMORY[0x1F4188790](v137);
    (*(void (**)(char *, void *, uint64_t, double))(v140 + 16))((char *)&v156 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0), v137, v135, v138);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v188, (uint64_t)&v191);
      uint64_t v141 = v192;
      uint64_t v142 = v193;
      __swift_project_boxed_opaque_existential_1(&v191, v192);
      id v143 = v183;
      uint64_t v144 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 16))(v178, v141, v142);
      uint64_t v145 = v143;
      if (!v143)
      {
        id v49 = (id)v144;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v191);
        uint64_t v148 = v157;
        id v149 = v159;
        goto LABEL_113;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v191);
      Swift::String v146 = 0;
      Swift::String v147 = v145;
    }
    else
    {
      uint64_t v190 = 0;
      long long v188 = 0u;
      long long v189 = 0u;
      outlined destroy of Any?((uint64_t)&v188, &demangling cache variable for type metadata for ConvertibleExpression?);
      Swift::String v147 = 0;
      Swift::String v146 = v183;
    }
    *(void *)&long long v191 = MEMORY[0x1E4FBC860];
    (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t))(*(void *)(v136 + 8) + 16))(&v194, &v191, v135);
    if (v146)
    {

      uint64_t v148 = v157;
      id v149 = v159;
LABEL_103:
      if (!v147)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *id v150 = 2;
      }
      id v49 = v165;
      swift_willThrow();
      (*(void (**)(void *, uint64_t))(v148 + 8))(v149, v158);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v176, v169);
      return (uint64_t)v49;
    }
    uint64_t v148 = v157;
    id v149 = v159;
    if (v194 == 2) {
      goto LABEL_103;
    }
    uint64_t v187 = MEMORY[0x1E4FBB390];
    LOBYTE(v186[0]) = v194 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v186, (uint64_t)&v188);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v186);
    if (!*((void *)&v189 + 1))
    {
      outlined destroy of Any?((uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_103;
    }
    outlined init with take of Any(&v188, &v191);
    __swift_project_boxed_opaque_existential_1(&v191, v192);
    uint64_t v155 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v49 = objc_msgSend(self, sel_expressionForConstantValue_, v155);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v191);

LABEL_113:
    (*(void (**)(void *, uint64_t))(v148 + 8))(v149, v158);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v176, v169);
    return (uint64_t)v49;
  }
  uint64_t v53 = 0;
  unint64_t v167 = v46[4] & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v166 = v46[6] & 0xFFFFFFFFFFFFFFFELL;
  while (1)
  {
    unint64_t v55 = (uint64_t *)(v52 == 1 ? v171 : &v171[*(int *)(v168 + 16 * v53 + 32)]);
    unint64_t v56 = *(void **)(v167 + 8 * v53);
    id v177 = *(char **)(v166 + 8 * v53);
    uint64_t v180 = *v55;
    uint64_t v57 = (uint64_t *)*(v56 - 1);
    uint64_t v58 = v57[8];
    double v59 = MEMORY[0x1F4188790](v51);
    uint64_t v60 = (char *)&v156 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
    long long v181 = v57;
    unint64_t v61 = (uint64_t (*)(char *, double))v57[2];
    uint64_t v62 = v61(v60, v59);
    double v63 = MEMORY[0x1F4188790](v62);
    long long v184 = v60;
    ((void (*)(char *, char *, void *, double))v61)(v60, v60, v56, v63);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    uint64_t v185 = v56;
    int v64 = swift_dynamicCast();
    uint64_t v179 = v53;
    if (v64)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v188, (uint64_t)&v191);
      uint64_t v65 = v192;
      uint64_t v66 = v193;
      __swift_project_boxed_opaque_existential_1(&v191, v192);
      uint64_t v67 = v178;
      uint64_t v68 = v183;
      uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v178, v65, v66);
      if (!v68)
      {
        id v94 = (id)v69;
        char v112 = v70;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v191);
        uint64_t v183 = 0;
        if (v112)
        {
          LOBYTE(v191) = 1;
          id v113 = v94;
          uint64_t v114 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          uint64_t v115 = self;
          id v116 = objc_msgSend(v115, sel_expressionForConstantValue_, v114);
          swift_unknownObjectRelease();
          LOBYTE(v191) = 0;
          id v117 = objc_msgSend(v115, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          id v94 = objc_msgSend(v115, sel_expressionForConditional_trueExpression_falseExpression_, v113, v116, v117);

          uint64_t v67 = v178;
        }
        uint64_t v95 = v180;
        goto LABEL_40;
      }
      uint64_t v175 = &v156;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v191);
      id v174 = v68;
      uint64_t v183 = 0;
    }
    else
    {
      uint64_t v175 = &v156;
      uint64_t v190 = 0;
      long long v188 = 0u;
      long long v189 = 0u;
      outlined destroy of Any?((uint64_t)&v188, &demangling cache variable for type metadata for ConvertibleExpression?);
      id v174 = 0;
    }
    uint64_t v71 = MEMORY[0x1E4FBC860];
    id v72 = v177;
    id v73 = v185;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v173 = &v156;
    uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
    MEMORY[0x1F4188790](AssociatedTypeWitness);
    Swift::String v77 = (char *)&v156 - v76;
    uint64_t v78 = type metadata accessor for Optional();
    uint64_t v172 = &v156;
    uint64_t v79 = *(void *)(v78 - 8);
    double v80 = MEMORY[0x1F4188790](v78);
    id v82 = (char *)&v156 - v81;
    *(void *)&long long v191 = v71;
    id v83 = v183;
    (*((void (**)(long long *, void *, char *, double))v72 + 2))(&v191, v73, v72, v80);
    if (v83)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v82, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v82, v78);
      goto LABEL_108;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v82, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v77, v82, AssociatedTypeWitness);
    uint64_t v187 = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v186);
    (*(void (**)(uint64_t *, char *, uint64_t))(v75 + 16))(boxed_opaque_existential_1, v77, AssociatedTypeWitness);
    _expressionCompatibleValue(for:)((uint64_t)v186, (uint64_t)&v188);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v186);
    if (!*((void *)&v189 + 1)) {
      break;
    }
    id v177 = v77;
    uint64_t v183 = 0;
    outlined init with take of Any(&v188, &v191);
    uint64_t v85 = v192;
    uint64_t v86 = __swift_project_boxed_opaque_existential_1(&v191, v192);
    uint64_t v170 = &v156;
    uint64_t v87 = *(void *)(v85 - 8);
    uint64_t v88 = *(void *)(v87 + 64);
    double v89 = MEMORY[0x1F4188790](v86);
    unint64_t v90 = (v88 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v91 = *(void (**)(char *, double))(v87 + 16);
    v91((char *)&v156 - v90, v89);
    uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    if (isClassOrObjCExistentialType)
    {
      if (v88 != 8) {
        goto LABEL_117;
      }
      uint64_t v93 = *(uint64_t *)((char *)&v156 - v90);
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v156 = (uint64_t)&v156;
      double v118 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
      ((void (*)(char *, char *, uint64_t, double))v91)((char *)&v156 - v90, (char *)&v156 - v90, v85, v118);
      uint64_t v93 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    (*(void (**)(char *, uint64_t))(v87 + 8))((char *)&v156 - v90, v85);
    id v94 = objc_msgSend(self, sel_expressionForConstantValue_, v93);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v191);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v177, AssociatedTypeWitness);

    uint64_t v67 = v178;
    uint64_t v95 = v180;
LABEL_40:
    ((void (*)(char *, void *))v181[1])(v184, v185);
    id v96 = v94;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v191 = *(void *)(v67 + 8);
    uint64_t v98 = v191;
    *(void *)(v67 + 8) = 0x8000000000000000;
    unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v95);
    uint64_t v101 = *(void *)(v98 + 16);
    BOOL v102 = (v99 & 1) == 0;
    uint64_t v103 = v101 + v102;
    if (__OFADD__(v101, v102))
    {
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v104 = v99;
    if (*(void *)(v98 + 24) >= v103)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v105 = v98;
        if (v99) {
          goto LABEL_25;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
        uint64_t v119 = static _DictionaryStorage.copy(original:)();
        uint64_t v105 = v119;
        if (*(void *)(v98 + 16))
        {
          uint64_t v120 = (void *)(v119 + 64);
          unint64_t v121 = (unint64_t)((1 << *(unsigned char *)(v105 + 32)) + 63) >> 6;
          if (v105 != v98 || (unint64_t)v120 >= v98 + 64 + 8 * v121) {
            memmove(v120, (const void *)(v98 + 64), 8 * v121);
          }
          uint64_t v185 = (void *)(v98 + 64);
          int64_t v122 = 0;
          *(void *)(v105 + 16) = *(void *)(v98 + 16);
          uint64_t v123 = 1 << *(unsigned char *)(v98 + 32);
          if (v123 < 64) {
            uint64_t v124 = ~(-1 << v123);
          }
          else {
            uint64_t v124 = -1;
          }
          unint64_t v125 = v124 & *(void *)(v98 + 64);
          int64_t v126 = (unint64_t)(v123 + 63) >> 6;
          while (1)
          {
            if (v125)
            {
              unint64_t v127 = __clz(__rbit64(v125));
              v125 &= v125 - 1;
              unint64_t v128 = v127 | (v122 << 6);
            }
            else
            {
              BOOL v110 = __OFADD__(v122++, 1);
              if (v110) {
                goto LABEL_119;
              }
              if (v122 >= v126) {
                goto LABEL_91;
              }
              unint64_t v132 = v185[v122];
              if (!v132)
              {
                int64_t v133 = v122 + 1;
                if (v122 + 1 >= v126) {
                  goto LABEL_91;
                }
                unint64_t v132 = v185[v133];
                if (v132) {
                  goto LABEL_73;
                }
                int64_t v133 = v122 + 2;
                if (v122 + 2 >= v126) {
                  goto LABEL_91;
                }
                unint64_t v132 = v185[v133];
                if (v132) {
                  goto LABEL_73;
                }
                int64_t v133 = v122 + 3;
                if (v122 + 3 >= v126) {
                  goto LABEL_91;
                }
                unint64_t v132 = v185[v133];
                if (v132)
                {
LABEL_73:
                  int64_t v122 = v133;
                }
                else
                {
                  int64_t v134 = v122 + 4;
                  if (v122 + 4 >= v126) {
                    goto LABEL_90;
                  }
                  unint64_t v132 = v185[v134];
                  if (!v132)
                  {
                    int64_t v134 = v122 + 5;
                    if (v122 + 5 >= v126) {
                      goto LABEL_90;
                    }
                    unint64_t v132 = v185[v134];
                    if (!v132)
                    {
                      int64_t v134 = v122 + 6;
                      if (v122 + 6 >= v126) {
                        goto LABEL_90;
                      }
                      unint64_t v132 = v185[v134];
                      if (!v132)
                      {
                        int64_t v134 = v122 + 7;
                        if (v122 + 7 >= v126) {
                          goto LABEL_90;
                        }
                        unint64_t v132 = v185[v134];
                        if (!v132)
                        {
                          int64_t v134 = v122 + 8;
                          if (v122 + 8 >= v126)
                          {
LABEL_90:
                            uint64_t v67 = v178;
LABEL_91:
                            uint64_t v95 = v180;
                            break;
                          }
                          unint64_t v132 = v185[v134];
                          if (!v132)
                          {
                            while (1)
                            {
                              int64_t v122 = v134 + 1;
                              if (__OFADD__(v134, 1)) {
                                goto LABEL_120;
                              }
                              if (v122 >= v126) {
                                goto LABEL_90;
                              }
                              unint64_t v132 = v185[v122];
                              ++v134;
                              uint64_t v67 = v178;
                              if (v132) {
                                goto LABEL_74;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  int64_t v122 = v134;
                  uint64_t v67 = v178;
                }
              }
LABEL_74:
              unint64_t v125 = (v132 - 1) & v132;
              unint64_t v128 = __clz(__rbit64(v132)) + (v122 << 6);
            }
            uint64_t v129 = 8 * v128;
            uint64_t v130 = *(void **)(*(void *)(v98 + 56) + v129);
            *(void *)(*(void *)(v105 + 48) + v129) = *(void *)(*(void *)(v98 + 48) + v129);
            *(void *)(*(void *)(v105 + 56) + v129) = v130;
            id v131 = v130;
          }
        }
        swift_bridgeObjectRelease();
        if (v104) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v103, isUniquelyReferenced_nonNull_native);
      uint64_t v105 = v191;
      uint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v95);
      if ((v104 & 1) != (v107 & 1)) {
        goto LABEL_121;
      }
      unint64_t v100 = v106;
      if (v104)
      {
LABEL_25:
        uint64_t v54 = *(void *)(v105 + 56);

        *(void *)(v54 + 8 * v100) = v96;
        goto LABEL_26;
      }
    }
    *(void *)(v105 + 8 * (v100 >> 6) + 64) |= 1 << v100;
    uint64_t v108 = 8 * v100;
    *(void *)(*(void *)(v105 + 48) + v108) = v95;
    *(void *)(*(void *)(v105 + 56) + v108) = v96;
    uint64_t v109 = *(void *)(v105 + 16);
    BOOL v110 = __OFADD__(v109, 1);
    uint64_t v111 = v109 + 1;
    if (v110) {
      goto LABEL_118;
    }
    *(void *)(v105 + 16) = v111;
LABEL_26:
    *(void *)(v67 + 8) = v105;

    uint64_t v51 = swift_bridgeObjectRelease();
    uint64_t v53 = v179 + 1;
    unint64_t v52 = v182;
    if (v179 + 1 == v182) {
      goto LABEL_94;
    }
  }
  (*(void (**)(char *, uint64_t))(v75 + 8))(v77, AssociatedTypeWitness);
  outlined destroy of Any?((uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_108:
  id v49 = v165;
  uint64_t v151 = v157;
  uint64_t v152 = v159;
  if (!v174)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *Swift::String v153 = 2;
  }
  swift_willThrow();
  ((void (*)(char *, void *))v181[1])(v184, v185);
  (*(void (**)(void *, uint64_t))(v151 + 8))(v152, v158);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v176, v169);
  return (uint64_t)v49;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.PredicateEvaluate.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.ExpressionEvaluate.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[5];
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)v177 - v8;
  uint64_t v185 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v183 = (char *)v177 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = v4[2];
  uint64_t v14 = 8 * v13;
  uint64_t v182 = v11;
  uint64_t v181 = v15;
  long long v211 = v2;
  if (v13 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(v4[4] & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v11);
    uint64_t v17 = (char *)v177 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v13)
    {
      unint64_t v18 = 0;
      unint64_t v19 = v4[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v13 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v17[-v19] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v18 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v20 = (long long *)(v19 + 16);
      uint64_t v21 = v17 + 16;
      unint64_t v22 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *uint64_t v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      if (v13 != v18)
      {
LABEL_9:
        unint64_t v24 = v13 - v18;
        uint64_t v25 = 8 * v18;
        unint64_t v26 = &v17[8 * v18];
        uint64_t v27 = (uint64_t *)(v19 + v25);
        do
        {
          uint64_t v28 = *v27++;
          *(void *)unint64_t v26 = v28;
          v26 += 8;
          --v24;
        }
        while (v24);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  long long v184 = v9;
  uint64_t v192 = v6;
  long long v191 = v177;
  uint64_t v196 = TupleTypeMetadata;
  uint64_t v186 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v202 = (char *)v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v204 = a1;
  unint64_t v209 = v13;
  uint64_t v210 = v3;
  uint64_t v220 = v4;
  if (v13 == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v31 = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v29);
    if (v13)
    {
      unint64_t v32 = v220[4] & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = v220[7] & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = (void *)((char *)v177 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v35 = v209;
      do
      {
        v32 += 8;
        v33 += 8;
        swift_getAssociatedTypeWitness();
        *v34++ = type metadata accessor for PredicateExpressions.Variable();
        --v35;
      }
      while (v35);
    }
    unint64_t v13 = v209;
    uint64_t v31 = swift_getTupleTypeMetadata();
    uint64_t v4 = v220;
  }
  uint64_t v190 = v177;
  uint64_t v195 = v31;
  uint64_t v205 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v198 = (char *)v177 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = v177;
  int v208 = (void *)v4[3];
  uint64_t v37 = *(v208 - 1);
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (char *)v177 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v189 = v177;
  MEMORY[0x1F4188790](v41);
  if (v13)
  {
    unint64_t v42 = v220[4] & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v220[7] & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v44 = (void *)((char *)v177 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v45 = v209;
    do
    {
      v42 += 8;
      v43 += 8;
      *v44++ = swift_getAssociatedTypeWitness();
      --v45;
    }
    while (v45);
  }
  uint64_t v46 = type metadata accessor for Expression();
  uint64_t v47 = type metadata accessor for Optional();
  uint64_t v206 = *(void *)(v47 - 8);
  uint64_t v207 = v47;
  MEMORY[0x1F4188790](v47);
  id v49 = (char *)v177 - v48;
  long long v188 = v177;
  uint64_t v50 = *(void *)(v46 - 8);
  double v52 = MEMORY[0x1F4188790](v51);
  uint64_t v54 = (void *)((char *)v177 - v53);
  uint64_t v55 = v37;
  unint64_t v56 = *(void (**)(char *, char *, void *, double))(v37 + 16);
  uint64_t v57 = v211;
  uint64_t v58 = v208;
  v56(v40, v211, v208, v52);
  *(void *)&long long v217 = MEMORY[0x1E4FBC860];
  double v59 = v220;
  uint64_t v60 = v210;
  (*(void (**)(long long *, void *))(v220[6] + 16))(&v217, v58);
  if (v60)
  {

    (*(void (**)(char *, void *))(v55 + 8))(v40, v58);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, 1, 1, v46);
    (*(void (**)(char *, uint64_t))(v206 + 8))(v49, v207);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v61 = 2;
    swift_willThrow();
    return (uint64_t)v40;
  }
  uint64_t v210 = 0;
  (*(void (**)(char *, void *))(v55 + 8))(v40, v58);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v49, 0, 1, v46);
  (*(void (**)(void *, char *, uint64_t))(v50 + 32))(v54, v49, v46);
  uint64_t v62 = *(int *)(v46 + 44);
  uint64_t v180 = v54;
  (*(void (**)(char *, char *, uint64_t))(v205 + 16))(v198, (char *)v54 + v62, v195);
  uint64_t v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v186 + 16))(v202, &v57[*((int *)v59 + 17)], v196);
  uint64_t v179 = v46;
  uint64_t v178 = v50;
  unint64_t v64 = v209;
  if (!v209)
  {
    uint64_t v79 = v204;
LABEL_96:
    uint64_t v149 = v180[3];
    uint64_t v150 = v180[4];
    uint64_t v151 = __swift_project_boxed_opaque_existential_1(v180, v149);
    double v152 = MEMORY[0x1F4188790](v151);
    (*(void (**)(char *, void *, uint64_t, double))(v154 + 16))((char *)v177 - ((v153 + 15) & 0xFFFFFFFFFFFFFFF0), v151, v149, v152);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
      uint64_t v155 = v218;
      uint64_t v156 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, v218);
      uint64_t v157 = v210;
      uint64_t v158 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 16))(v79, v155, v156);
      id v159 = v157;
      if (!v157)
      {
        uint64_t v40 = (char *)v158;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        id v174 = v180;
        goto LABEL_116;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      uint64_t v160 = 0;
      uint64_t v161 = v159;
      uint64_t v162 = v180;
    }
    else
    {
      uint64_t v216 = 0;
      long long v214 = 0u;
      long long v215 = 0u;
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v161 = 0;
      uint64_t v162 = v180;
      uint64_t v160 = v210;
    }
    *(void *)&long long v217 = MEMORY[0x1E4FBC860];
    uint64_t v163 = *(void (**)(long long *, uint64_t))(*(void *)(v150 + 8) + 16);
    id v164 = v184;
    v163(&v217, v149);
    uint64_t v40 = v160;
    if (v160)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56))(v164, 1, 1, v192);
      (*(void (**)(char *, uint64_t))(v181 + 8))(v164, v182);
      if (v161) {
        goto LABEL_106;
      }
      goto LABEL_105;
    }
    uint64_t v165 = v185;
    unint64_t v166 = v164;
    unint64_t v167 = v164;
    uint64_t v168 = v192;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v185 + 56))(v166, 0, 1, v192);
    uint64_t v169 = v183;
    (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v183, v167, v168);
    uint64_t v213 = v168;
    uint64_t v170 = __swift_allocate_boxed_opaque_existential_1(&v212);
    (*(void (**)(uint64_t *, char *, uint64_t))(v165 + 16))(v170, v169, v168);
    _expressionCompatibleValue(for:)((uint64_t)&v212, (uint64_t)&v214);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
    uint64_t v162 = v180;
    if (!*((void *)&v215 + 1))
    {
      (*(void (**)(char *, uint64_t))(v165 + 8))(v183, v168);
      outlined destroy of Any?((uint64_t)&v214, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161) {
        goto LABEL_106;
      }
LABEL_105:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *uint64_t v171 = 2;
LABEL_106:
      swift_willThrow();
      (*(void (**)(void *, uint64_t))(v178 + 8))(v162, v179);
      (*(void (**)(char *, uint64_t))(v186 + 8))(v202, v196);
      return (uint64_t)v40;
    }
    outlined init with take of Any(&v214, &v217);
    __swift_project_boxed_opaque_existential_1(&v217, v218);
    uint64_t v175 = v165;
    uint64_t v176 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v40 = (char *)objc_msgSend(self, sel_expressionForConstantValue_, v176);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v183, v168);
    id v174 = v180;

LABEL_116:
    (*(void (**)(void *, uint64_t))(v178 + 8))(v174, v179);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v202, v196);
    return (uint64_t)v40;
  }
  uint64_t v65 = 0;
  unint64_t v194 = v59[4] & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v193 = v59[7] & 0xFFFFFFFFFFFFFFFELL;
  while (1)
  {
    uint64_t v67 = v64 == 1 ? v198 : &v198[*(int *)(v195 + 16 * v65 + 32)];
    uint64_t v68 = *(void **)(v194 + 8 * v65);
    uint64_t v203 = *(char **)(v193 + 8 * v65);
    uint64_t v206 = *(void *)v67;
    uint64_t v69 = *(v68 - 1);
    uint64_t v70 = *(void *)(v69 + 64);
    double v71 = MEMORY[0x1F4188790](v63);
    id v72 = (char *)v177 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v207 = v69;
    id v73 = *(uint64_t (**)(char *, double))(v69 + 16);
    uint64_t v74 = v73(v72, v71);
    double v75 = MEMORY[0x1F4188790](v74);
    long long v211 = v72;
    ((void (*)(char *, char *, void *, double))v73)(v72, v72, v68, v75);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    uint64_t v220 = v68;
    int v76 = swift_dynamicCast();
    uint64_t v205 = v65;
    if (v76)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
      uint64_t v77 = v218;
      uint64_t v78 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, v218);
      uint64_t v79 = v204;
      double v80 = v210;
      uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v204, v77, v78);
      if (!v80)
      {
        id v107 = (id)v81;
        char v109 = v82;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        uint64_t v210 = 0;
        if (v109)
        {
          LOBYTE(v217) = 1;
          id v110 = v107;
          uint64_t v111 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          char v112 = self;
          id v113 = objc_msgSend(v112, sel_expressionForConstantValue_, v111);
          swift_unknownObjectRelease();
          LOBYTE(v217) = 0;
          id v114 = objc_msgSend(v112, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          uint64_t v79 = v204;
          id v107 = objc_msgSend(v112, sel_expressionForConditional_trueExpression_falseExpression_, v110, v113, v114);
        }
        unint64_t v64 = v209;
        uint64_t v108 = v206;
        goto LABEL_43;
      }
      uint64_t v201 = v177;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      int v208 = v80;
      uint64_t v210 = 0;
    }
    else
    {
      uint64_t v201 = v177;
      uint64_t v216 = 0;
      long long v214 = 0u;
      long long v215 = 0u;
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
      int v208 = 0;
    }
    uint64_t v83 = MEMORY[0x1E4FBC860];
    id v84 = v203;
    uint64_t v85 = v220;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v200 = v177;
    uint64_t v87 = *(void *)(AssociatedTypeWitness - 8);
    MEMORY[0x1F4188790](AssociatedTypeWitness);
    double v89 = (char *)v177 - v88;
    uint64_t v90 = type metadata accessor for Optional();
    uint64_t v199 = v177;
    uint64_t v91 = *(void *)(v90 - 8);
    double v92 = MEMORY[0x1F4188790](v90);
    id v94 = (char *)v177 - v93;
    *(void *)&long long v217 = v83;
    uint64_t v95 = v210;
    (*((void (**)(long long *, void *, char *, double))v84 + 2))(&v217, v85, v84, v92);
    if (v95)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v94, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v94, v90);
      uint64_t v97 = v208;
      goto LABEL_109;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v94, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v89, v94, AssociatedTypeWitness);
    uint64_t v213 = AssociatedTypeWitness;
    id v96 = __swift_allocate_boxed_opaque_existential_1(&v212);
    (*(void (**)(uint64_t *, char *, uint64_t))(v87 + 16))(v96, v89, AssociatedTypeWitness);
    _expressionCompatibleValue(for:)((uint64_t)&v212, (uint64_t)&v214);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
    uint64_t v97 = v208;
    if (!*((void *)&v215 + 1)) {
      break;
    }
    uint64_t v203 = v89;
    uint64_t v210 = 0;
    outlined init with take of Any(&v214, &v217);
    uint64_t v98 = v218;
    char v99 = __swift_project_boxed_opaque_existential_1(&v217, v218);
    uint64_t v197 = v177;
    uint64_t v100 = *(void *)(v98 - 8);
    uint64_t v101 = *(void *)(v100 + 64);
    double v102 = MEMORY[0x1F4188790](v99);
    unint64_t v103 = (v101 + 15) & 0xFFFFFFFFFFFFFFF0;
    char v104 = *(void (**)(char *, double))(v100 + 16);
    v104((char *)v177 - v103, v102);
    uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    if (isClassOrObjCExistentialType)
    {
      if (v101 != 8) {
        goto LABEL_118;
      }
      uint64_t v106 = *(void *)((char *)v177 - v103);
      swift_unknownObjectRetain();
    }
    else
    {
      v177[1] = v177;
      double v131 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
      ((void (*)(char *, char *, uint64_t, double))v104)((char *)v177 - v103, (char *)v177 - v103, v98, v131);
      uint64_t v106 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    (*(void (**)(char *, uint64_t))(v100 + 8))((char *)v177 - v103, v98);
    id v107 = objc_msgSend(self, sel_expressionForConstantValue_, v106);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v203, AssociatedTypeWitness);

    uint64_t v79 = v204;
    unint64_t v64 = v209;
    uint64_t v108 = v206;
LABEL_43:
    (*(void (**)(char *, void *))(v207 + 8))(v211, v220);
    id v115 = v107;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v217 = *(void *)(v79 + 8);
    uint64_t v117 = v217;
    *(void *)(v79 + 8) = 0x8000000000000000;
    unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v108);
    uint64_t v120 = *(void *)(v117 + 16);
    BOOL v121 = (v118 & 1) == 0;
    uint64_t v122 = v120 + v121;
    if (__OFADD__(v120, v121))
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v123 = v118;
    if (*(void *)(v117 + 24) >= v122)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v124 = v117;
        if (v118) {
          goto LABEL_25;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
        uint64_t v132 = static _DictionaryStorage.copy(original:)();
        uint64_t v124 = v132;
        if (*(void *)(v117 + 16))
        {
          unint64_t v133 = v64;
          int64_t v134 = (void *)(v132 + 64);
          unint64_t v135 = (unint64_t)((1 << *(unsigned char *)(v124 + 32)) + 63) >> 6;
          uint64_t v220 = (void *)(v117 + 64);
          if (v124 != v117 || (unint64_t)v134 >= v117 + 64 + 8 * v135) {
            memmove(v134, v220, 8 * v135);
          }
          int64_t v136 = 0;
          *(void *)(v124 + 16) = *(void *)(v117 + 16);
          uint64_t v137 = 1 << *(unsigned char *)(v117 + 32);
          if (v137 < 64) {
            uint64_t v138 = ~(-1 << v137);
          }
          else {
            uint64_t v138 = -1;
          }
          unint64_t v139 = v138 & *(void *)(v117 + 64);
          int64_t v140 = (unint64_t)(v137 + 63) >> 6;
          while (1)
          {
            if (v139)
            {
              unint64_t v141 = __clz(__rbit64(v139));
              v139 &= v139 - 1;
              unint64_t v142 = v141 | (v136 << 6);
            }
            else
            {
              BOOL v129 = __OFADD__(v136++, 1);
              if (v129) {
                goto LABEL_120;
              }
              unint64_t v64 = v133;
              if (v136 >= v140)
              {
LABEL_90:
                uint64_t v108 = v206;
                uint64_t v79 = v204;
                break;
              }
              unint64_t v146 = v220[v136];
              if (!v146)
              {
                int64_t v147 = v136 + 1;
                if (v136 + 1 >= v140) {
                  goto LABEL_90;
                }
                unint64_t v146 = v220[v147];
                if (v146) {
                  goto LABEL_73;
                }
                int64_t v147 = v136 + 2;
                if (v136 + 2 >= v140) {
                  goto LABEL_90;
                }
                unint64_t v146 = v220[v147];
                if (v146) {
                  goto LABEL_73;
                }
                int64_t v147 = v136 + 3;
                if (v136 + 3 >= v140)
                {
                  uint64_t v108 = v206;
                  unint64_t v64 = v133;
                  uint64_t v79 = v204;
                  break;
                }
                unint64_t v146 = v220[v147];
                if (v146)
                {
LABEL_73:
                  int64_t v136 = v147;
                }
                else
                {
                  int64_t v148 = v136 + 4;
                  if (v136 + 4 >= v140) {
                    goto LABEL_94;
                  }
                  unint64_t v146 = v220[v148];
                  if (!v146)
                  {
                    int64_t v148 = v136 + 5;
                    if (v136 + 5 >= v140) {
                      goto LABEL_94;
                    }
                    unint64_t v146 = v220[v148];
                    if (!v146)
                    {
                      int64_t v148 = v136 + 6;
                      if (v136 + 6 >= v140) {
                        goto LABEL_94;
                      }
                      unint64_t v146 = v220[v148];
                      if (!v146)
                      {
                        int64_t v148 = v136 + 7;
                        if (v136 + 7 >= v140) {
                          goto LABEL_94;
                        }
                        unint64_t v146 = v220[v148];
                        if (!v146)
                        {
                          int64_t v148 = v136 + 8;
                          if (v136 + 8 >= v140)
                          {
LABEL_94:
                            uint64_t v79 = v204;
                            unint64_t v64 = v209;
                            uint64_t v108 = v206;
                            break;
                          }
                          unint64_t v146 = v220[v148];
                          if (!v146)
                          {
                            while (1)
                            {
                              int64_t v136 = v148 + 1;
                              if (__OFADD__(v148, 1)) {
                                goto LABEL_121;
                              }
                              if (v136 >= v140) {
                                goto LABEL_94;
                              }
                              unint64_t v146 = v220[v136];
                              ++v148;
                              unint64_t v133 = v209;
                              if (v146) {
                                goto LABEL_74;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  int64_t v136 = v148;
                  unint64_t v133 = v209;
                }
              }
LABEL_74:
              unint64_t v139 = (v146 - 1) & v146;
              unint64_t v142 = __clz(__rbit64(v146)) + (v136 << 6);
            }
            uint64_t v143 = 8 * v142;
            uint64_t v144 = *(void **)(*(void *)(v117 + 56) + v143);
            *(void *)(*(void *)(v124 + 48) + v143) = *(void *)(*(void *)(v117 + 48) + v143);
            *(void *)(*(void *)(v124 + 56) + v143) = v144;
            id v145 = v144;
          }
        }
        swift_bridgeObjectRelease();
        if (v123) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v122, isUniquelyReferenced_nonNull_native);
      uint64_t v124 = v217;
      uint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(v108);
      if ((v123 & 1) != (v126 & 1)) {
        goto LABEL_122;
      }
      unint64_t v119 = v125;
      if (v123)
      {
LABEL_25:
        uint64_t v66 = *(void *)(v124 + 56);

        *(void *)(v66 + 8 * v119) = v115;
        goto LABEL_26;
      }
    }
    *(void *)(v124 + 8 * (v119 >> 6) + 64) |= 1 << v119;
    uint64_t v127 = 8 * v119;
    *(void *)(*(void *)(v124 + 48) + v127) = v108;
    *(void *)(*(void *)(v124 + 56) + v127) = v115;
    uint64_t v128 = *(void *)(v124 + 16);
    BOOL v129 = __OFADD__(v128, 1);
    uint64_t v130 = v128 + 1;
    if (v129) {
      goto LABEL_119;
    }
    *(void *)(v124 + 16) = v130;
LABEL_26:
    *(void *)(v79 + 8) = v124;

    uint64_t v63 = swift_bridgeObjectRelease();
    uint64_t v65 = v205 + 1;
    if (v205 + 1 == v64) {
      goto LABEL_96;
    }
  }
  (*(void (**)(char *, uint64_t))(v87 + 8))(v89, AssociatedTypeWitness);
  outlined destroy of Any?((uint64_t)&v214, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_109:
  uint64_t v40 = (char *)v180;
  if (!v97)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v172 = 2;
  }
  swift_willThrow();
  (*(void (**)(char *, void *))(v207 + 8))(v211, v220);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v40, v179);
  (*(void (**)(char *, uint64_t))(v186 + 8))(v202, v196);
  return (uint64_t)v40;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.ExpressionEvaluate.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Conjunction<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Conjunction.convert(state:)(a1, a2, (SEL *)&selRef_andPredicateWithSubpredicates_);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

char *PredicateExpressions.Conjunction.convert(state:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v46 = a3;
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v50 = *(void *)(a2 + 24);
  uint64_t v49 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v48 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1821A2800;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v6, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v17 = swift_dynamicCast();
  uint64_t v47 = a1;
  if (!v17)
  {
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for ConvertibleExpression?);
    unint64_t v22 = 0;
    goto LABEL_5;
  }
  uint64_t v51 = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v54, (uint64_t)&v57);
  uint64_t v18 = v58;
  uint64_t v19 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a1, v18, v19);
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    uint64_t v5 = 0;
    unint64_t v22 = v4;
    uint64_t v16 = v51;
LABEL_5:
    *(void *)&long long v57 = MEMORY[0x1E4FBC860];
    long long v23 = v6;
    (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t))(*(void *)(a2 + 32) + 16))(&v60, &v57, v11);
    if (v5)
    {

LABEL_10:
      if (!v22)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *unint64_t v24 = 2;
      }
      swift_willThrow();
      *(void *)(v16 + 16) = 0;
      goto LABEL_13;
    }
    if (v60 == 2) {
      goto LABEL_10;
    }
    uint64_t v51 = v16;
    uint64_t v53 = MEMORY[0x1E4FBB390];
    v52[0] = v60 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v52, (uint64_t)&v54);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    if (!*((void *)&v55 + 1))
    {
      outlined destroy of Any?((uint64_t)&v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v16 = v51;
      goto LABEL_10;
    }
    outlined init with take of Any(&v54, &v57);
    __swift_project_boxed_opaque_existential_1(&v57, v58);
    uint64_t v28 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v26 = objc_msgSend(self, sel_expressionForConstantValue_, v28);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);

    goto LABEL_19;
  }
  id v26 = (id)v20;
  char v27 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
  if ((v27 & 1) == 0)
  {
LABEL_19:
    LOBYTE(v57) = 1;
    id v29 = v26;
    uint64_t v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v31 = objc_msgSend(self, sel_expressionForConstantValue_, v30);
    swift_unknownObjectRelease();
    id v26 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v29, v31, 0, 4, 0);
  }
  uint64_t v32 = v50;
  *(void *)(v51 + 32) = v26;
  unint64_t v33 = &v6[*(int *)(a2 + 52)];
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v48, v33, v32);
  if (!swift_dynamicCast())
  {
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&long long v57 = MEMORY[0x1E4FBC860];
    long long v23 = v33;
    (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t))(*(void *)(a2 + 40) + 16))(&v60, &v57, v32);
    uint64_t v36 = v51;
    if (v60 != 2)
    {
      uint64_t v53 = MEMORY[0x1E4FBB390];
      v52[0] = v60 & 1;
      _expressionCompatibleValue(for:)((uint64_t)v52, (uint64_t)&v54);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      if (*((void *)&v55 + 1))
      {
        outlined init with take of Any(&v54, &v57);
        __swift_project_boxed_opaque_existential_1(&v57, v58);
        uint64_t v41 = _bridgeAnythingToObjectiveC<A>(_:)();
        id v38 = objc_msgSend(self, sel_expressionForConstantValue_, v41);
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);

LABEL_30:
        LOBYTE(v57) = 1;
        id v42 = v38;
        uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v44 = objc_msgSend(self, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        id v38 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v42, v44, 0, 4, 0);

        goto LABEL_31;
      }
      outlined destroy of Any?((uint64_t)&v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v37 = 2;
    swift_willThrow();

    *(void *)(v36 + 16) = 0;
LABEL_13:
    swift_release();
    return v23;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v54, (uint64_t)&v57);
  uint64_t v34 = v58;
  uint64_t v35 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  id v38 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v47, v34, v35);
  char v40 = v39;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
  uint64_t v36 = v51;
  if ((v40 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(v36 + 40) = v38;
  *(void *)&long long v57 = v36;
  specialized Array._endMutation()();
  if ((unint64_t)v57 >> 62)
  {
    if ((uint64_t)v57 < 0) {
      uint64_t v45 = v57;
    }
    else {
      uint64_t v45 = v57 & 0xFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSPredicate);
    uint64_t v45 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  long long v23 = (char *)objc_msgSend(self, *v46, v45);
  swift_unknownObjectRelease();
  return v23;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Disjunction<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Conjunction.convert(state:)(a1, a2, (SEL *)&selRef_orPredicateWithSubpredicates_);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Equal<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Equal.convert(state:)(a1, a2, 4);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

char *PredicateExpressions.Equal.convert(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = a3;
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v77 = *(void *)(a2 + 24);
  uint64_t v75 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v74 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v78 = v9;
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v81 = v13;
  MEMORY[0x1F4188790](v13);
  id v72 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  int v17 = (char *)&v69 - v16;
  uint64_t v82 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  double v71 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (char *)&v69 - v21;
  double v24 = MEMORY[0x1F4188790](v23);
  id v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16);
  uint64_t v91 = v6;
  v28(v26, v6, v11, v24);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v29 = swift_dynamicCast();
  uint64_t v76 = a1;
  if (v29)
  {
    uint64_t v79 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
    uint64_t v30 = v89;
    uint64_t v31 = v90;
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(a1, v30, v31);
    if (!v4)
    {
      char v39 = (void *)v32;
      char v40 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      if (v40)
      {
        LOBYTE(v88) = 1;
        id v42 = v39;
        uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v44 = self;
        id v45 = objc_msgSend(v44, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        LOBYTE(v88) = 0;
        id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v69 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
      }
      else
      {
        id v69 = v39;
      }
      uint64_t v36 = v82;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
    uint64_t v5 = 0;
    uint64_t v34 = v4;
    uint64_t AssociatedTypeWitness = v79;
  }
  else
  {
    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
    outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v34 = 0;
  }
  *(void *)&long long v88 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, uint64_t, uint64_t))(v10 + 16))(&v88, v11, v10);
  if (!v5)
  {
    uint64_t v36 = v82;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v17, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v22, v17, AssociatedTypeWitness);
    uint64_t v84 = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v83);
    id v38 = *(void (**)(uint64_t *, char *, uint64_t))(v36 + 16);
    uint64_t v79 = AssociatedTypeWitness;
    v38(boxed_opaque_existential_1, v22, AssociatedTypeWitness);
    _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (!*((void *)&v86 + 1))
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v79);
      outlined destroy of Any?((uint64_t)&v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v34) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined init with take of Any(&v85, &v88);
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    uint64_t v41 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v69 = objc_msgSend(self, sel_expressionForConstantValue_, v41);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v79);

LABEL_18:
    uint64_t v48 = v77;
    uint64_t v47 = v78;
    uint64_t v49 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v91 + *(int *)(v78 + 60), v77);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
      uint64_t v50 = v89;
      uint64_t v51 = v90;
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      id v59 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v49, v50, v51);
      char v61 = v60;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      if (v61)
      {
        LOBYTE(v88) = 1;
        id v62 = v59;
        uint64_t v63 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        unint64_t v64 = self;
        id v65 = objc_msgSend(v64, sel_expressionForConstantValue_, v63);
        swift_unknownObjectRelease();
        LOBYTE(v88) = 0;
        id v66 = objc_msgSend(v64, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v59 = objc_msgSend(v64, sel_expressionForConditional_trueExpression_falseExpression_, v62, v65, v66);
      }
    }
    else
    {
      uint64_t v87 = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
      int v17 = 0;
      *(void *)&long long v88 = MEMORY[0x1E4FBC860];
      double v52 = v72;
      (*(void (**)(long long *, uint64_t))(*(void *)(v47 + 40) + 16))(&v88, v48);
      uint64_t v53 = v79;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v52, 0, 1, v79);
      long long v54 = v71;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v71, v52, v53);
      uint64_t v84 = v53;
      long long v55 = __swift_allocate_boxed_opaque_existential_1(v83);
      (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(v55, v54, v53);
      _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
      if (!*((void *)&v86 + 1))
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v53);
        outlined destroy of Any?((uint64_t)&v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v56 = v69;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *long long v57 = 2;
        swift_willThrow();

        return v17;
      }
      outlined init with take of Any(&v85, &v88);
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      uint64_t v67 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v59 = objc_msgSend(self, sel_expressionForConstantValue_, v67);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v53);
    }
    uint64_t v68 = v69;
    int v17 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v69, v59, 0, v70, 0);

    return v17;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v17, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v81);
  if (!v34)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v35 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v17;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NotEqual<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Equal.convert(state:)(a1, a2, 5);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

id PredicateExpressions.Arithmetic.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v83 = a1;
  uint64_t v82 = *(void *)(a2 + 24);
  uint64_t v79 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v78 = (char *)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v84 = *(void *)(v11 - 8);
  uint64_t v85 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v77 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v75 - v14;
  uint64_t v87 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v76 = (char *)v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v81 = (char *)v75 - v19;
  uint64_t v20 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v2;
  int v24 = *v2;
  uint64_t v86 = AssociatedTypeWitness;
  if (v24)
  {
    if (v24 == 1)
    {
      unint64_t v25 = 0xEE003A7463617274;
      uint64_t v26 = 0x6275733A6D6F7266;
    }
    else
    {
      unint64_t v25 = 0xEC0000003A79623ALL;
      uint64_t v26 = 0x796C7069746C756DLL;
    }
  }
  else
  {
    unint64_t v25 = 0xE700000000000000;
    uint64_t v26 = 0x3A6F743A646461;
  }
  v75[2] = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_182106040;
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v20 + 16))(v23, &v97[*(int *)(a2 + 60)], v9);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    v75[1] = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    uint64_t v27 = v95;
    uint64_t v28 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v83, v27, v28);
    if (!v3)
    {
      id v39 = (id)v29;
      char v40 = v30;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      v75[0] = 0;
      if (v40)
      {
        LOBYTE(v94) = 1;
        id v41 = v39;
        uint64_t v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v43 = self;
        id v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v39 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);
      }
      char v33 = (void *)v88;
      uint64_t v36 = v86;
      goto LABEL_22;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    uint64_t v4 = 0;
    uint64_t v31 = v3;
  }
  else
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v31 = 0;
  }
  *(void *)&long long v94 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, uint64_t, uint64_t))(v8 + 16))(&v94, v9, v8);
  id v32 = v4;
  if (!v4)
  {
    uint64_t v36 = v86;
    uint64_t v35 = v87;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v15, 0, 1, v86);
    uint64_t v37 = v81;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v81, v15, v36);
    uint64_t v90 = v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 16))(boxed_opaque_existential_1, v37, v36);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    v75[0] = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    char v33 = (void *)v88;
    if (!*((void *)&v92 + 1))
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
      outlined destroy of Any?((uint64_t)&v91, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v31) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v46 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v39 = objc_msgSend(self, sel_expressionForConstantValue_, v46);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);

LABEL_22:
    uint64_t v47 = v82;
    uint64_t v48 = v79;
    uint64_t v49 = v78;
    uint64_t v81 = (char *)type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    v33[7] = v81;
    v33[4] = v39;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v48 + 16))(v49, &v97[*(int *)(a2 + 64)], v47);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
      uint64_t v50 = v95;
      uint64_t v51 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      double v52 = (void *)v75[0];
      uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v83, v50, v51);
      long long v55 = v52;
      if (!v52)
      {
        id v64 = (id)v53;
        char v65 = v54;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
        if (v65)
        {
          LOBYTE(v94) = 1;
          id v66 = v64;
          uint64_t v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          uint64_t v68 = self;
          id v69 = objc_msgSend(v68, sel_expressionForConstantValue_, v67);
          swift_unknownObjectRelease();
          LOBYTE(v94) = 0;
          id v70 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          double v71 = v68;
          char v33 = (void *)v88;
          id v64 = objc_msgSend(v71, sel_expressionForConditional_trueExpression_falseExpression_, v66, v69, v70);
        }
        goto LABEL_39;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      uint64_t v56 = 0;
      long long v57 = v55;
      uint64_t v47 = v82;
    }
    else
    {
      uint64_t v93 = 0;
      long long v91 = 0u;
      long long v92 = 0u;
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
      long long v57 = 0;
      uint64_t v56 = (void *)v75[0];
    }
    *(void *)&long long v94 = MEMORY[0x1E4FBC860];
    uint64_t v58 = v77;
    (*(void (**)(long long *, uint64_t))(*(void *)(a2 + 40) + 16))(&v94, v47);
    if (v56)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v58, 1, 1, v36);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v58, v85);
      id v32 = v33 + 4;
      if (v57) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    uint64_t v59 = v87;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v58, 0, 1, v36);
    char v60 = v76;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v76, v58, v36);
    uint64_t v90 = v36;
    char v61 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, uint64_t))(v59 + 16))(v61, v60, v36);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (!*((void *)&v92 + 1))
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v36);
      outlined destroy of Any?((uint64_t)&v91, (uint64_t *)&demangling cache variable for type metadata for Any?);
      id v32 = v33 + 4;
      if (v57) {
        goto LABEL_32;
      }
LABEL_31:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *id v62 = 2;
LABEL_32:
      swift_willThrow();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      goto LABEL_33;
    }
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v72 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v64 = objc_msgSend(self, sel_expressionForConstantValue_, v72);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v36);

LABEL_39:
    v33[11] = v81;
    v33[8] = v64;
    uint64_t v73 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v74 = _ContiguousArrayBuffer._asCocoaArray()();
    id v32 = objc_msgSend(self, sel_expressionForFunction_arguments_, v73, v74);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v32;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v15, 1, 1, v86);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v15, v85);
  char v33 = (void *)v88;
  if (!v31)
  {
LABEL_12:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v34 = 2;
  }
LABEL_13:
  swift_willThrow();
  swift_bridgeObjectRelease();
LABEL_33:
  v33[2] = 0;
  swift_release();
  return v32;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Arithmetic<A, B>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.Arithmetic.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

id PredicateExpressions.UnaryMinus.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v49 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v47 - v10;
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v52 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v48 = (char *)&v47 - v13;
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_182106040;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v5, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    uint64_t v47 = v18;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v54, (uint64_t)&v57);
    uint64_t v19 = v58;
    uint64_t v20 = v59;
    __swift_project_boxed_opaque_existential_1(&v57, v58);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v49, v19, v20);
    if (!v3)
    {
      id v31 = (id)v21;
      char v32 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
      if (v32)
      {
        LOBYTE(v57) = 1;
        id v33 = v31;
        uint64_t v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v35 = self;
        id v36 = objc_msgSend(v35, sel_expressionForConstantValue_, v34);
        swift_unknownObjectRelease();
        LOBYTE(v57) = 0;
        id v37 = objc_msgSend(v35, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v31 = objc_msgSend(v35, sel_expressionForConditional_trueExpression_falseExpression_, v33, v36, v37);
      }
      uint64_t v18 = v47;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    uint64_t v4 = 0;
    uint64_t v23 = v3;
    uint64_t v18 = v47;
  }
  else
  {
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v23 = 0;
  }
  *(void *)&long long v57 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, uint64_t, uint64_t))(v7 + 16))(&v57, v6, v7);
  id v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v11, 1, 1, v60);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v51);
    if (v23) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unint64_t v25 = v23;
  uint64_t v26 = v52;
  uint64_t v27 = v60;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v11, 0, 1, v60);
  uint64_t v28 = v48;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v48, v11, v27);
  v53[3] = v27;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(boxed_opaque_existential_1, v28, v27);
  _expressionCompatibleValue(for:)((uint64_t)v53, (uint64_t)&v54);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  if (*((void *)&v55 + 1))
  {
    outlined init with take of Any(&v54, &v57);
    __swift_project_boxed_opaque_existential_1(&v57, v58);
    uint64_t v38 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v39 = objc_msgSend(self, sel_expressionForConstantValue_, v38);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    char v40 = v28;
    id v31 = v39;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v40, v27);

LABEL_17:
    uint64_t v41 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    *(void *)(v18 + 56) = v41;
    *(void *)(v18 + 32) = v31;
    *(void *)&long long v57 = -1;
    uint64_t v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    uint64_t v43 = self;
    id v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
    swift_unknownObjectRelease();
    *(void *)(v18 + 88) = v41;
    *(void *)(v18 + 64) = v44;
    uint64_t v45 = String._bridgeToObjectiveCImpl()();
    id v24 = objc_msgSend(v43, sel_expressionForFunction_arguments_, v45, _ContiguousArrayBuffer._asCocoaArray()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v24;
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v27);
  outlined destroy of Any?((uint64_t)&v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v25) {
    goto LABEL_11;
  }
LABEL_10:
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *char v30 = 2;
LABEL_11:
  swift_willThrow();
  *(void *)(v18 + 16) = 0;
  swift_release();
  return v24;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.UnaryMinus<A>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.UnaryMinus.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

char *PredicateExpressions.Comparison.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v82 = *(void *)(a2 + 24);
  uint64_t v79 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v78 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v87 = *(void *)(v12 - 8);
  uint64_t v88 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v85 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v74 - v15;
  uint64_t v98 = AssociatedTypeWitness;
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v77 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v84 = (char *)&v74 - v20;
  double v22 = MEMORY[0x1F4188790](v21);
  id v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *v2;
  uint64_t v86 = a2;
  uint64_t v26 = *(int *)(a2 + 60);
  uint64_t v80 = v2;
  (*(void (**)(char *, unsigned __int8 *, uint64_t, double))(v27 + 16))(v24, &v2[v26], v10, v22);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v28 = swift_dynamicCast();
  uint64_t v29 = MEMORY[0x1E4FBC860];
  uint64_t v81 = a1;
  if (v28)
  {
    uint64_t v76 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v92, (uint64_t)&v95);
    uint64_t v31 = v96;
    uint64_t v30 = v97;
    __swift_project_boxed_opaque_existential_1(&v95, v96);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v31, v30);
    uint64_t v34 = v3;
    if (!v3)
    {
      char v40 = (void *)v32;
      char v41 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
      uint64_t v75 = 0;
      if (v41)
      {
        LOBYTE(v95) = 1;
        id v43 = v40;
        uint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v45 = self;
        id v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v95) = 0;
        id v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v74 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);
      }
      else
      {
        id v74 = v40;
      }
      uint64_t v25 = v76;
      uint64_t v37 = v98;
      uint64_t v36 = v89;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    uint64_t v4 = 0;
    uint64_t v25 = v76;
    uint64_t v29 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v94 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    outlined destroy of Any?((uint64_t)&v92, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v34 = 0;
  }
  *(void *)&long long v95 = v29;
  (*(void (**)(long long *, uint64_t, uint64_t))(v9 + 16))(&v95, v10, v9);
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v16, 1, 1, v98);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v16, v88);
    if (v34)
    {
LABEL_8:
      swift_willThrow();
      return v16;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v35 = 2;
    goto LABEL_8;
  }
  uint64_t v36 = v89;
  uint64_t v37 = v98;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v16, 0, 1, v98);
  uint64_t v38 = v84;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v84, v16, v37);
  uint64_t v91 = v37;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v90);
  (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v38, v37);
  _expressionCompatibleValue(for:)((uint64_t)v90, (uint64_t)&v92);
  uint64_t v16 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
  if (!*((void *)&v93 + 1))
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);
    outlined destroy of Any?((uint64_t)&v92, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v34) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v75 = 0;
  outlined init with take of Any(&v92, &v95);
  __swift_project_boxed_opaque_existential_1(&v95, v96);
  uint64_t v42 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v74 = objc_msgSend(self, sel_expressionForConstantValue_, v42);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);

LABEL_18:
  uint64_t v48 = v82;
  uint64_t v50 = v85;
  uint64_t v49 = v86;
  uint64_t v51 = v81;
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v79 + 16))(v78, &v80[*(int *)(v86 + 64)], v82);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v92, (uint64_t)&v95);
    uint64_t v52 = v96;
    uint64_t v53 = v97;
    __swift_project_boxed_opaque_existential_1(&v95, v96);
    long long v54 = v75;
    uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, v53);
    long long v57 = v54;
    if (!v54)
    {
      id v64 = (id)v55;
      char v65 = v56;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
      if (v65)
      {
        LOBYTE(v95) = 1;
        id v66 = v64;
        uint64_t v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v68 = self;
        id v69 = objc_msgSend(v68, sel_expressionForConstantValue_, v67);
        swift_unknownObjectRelease();
        LOBYTE(v95) = 0;
        id v70 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v64 = objc_msgSend(v68, sel_expressionForConditional_trueExpression_falseExpression_, v66, v69, v70);
      }
      goto LABEL_34;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    uint64_t v58 = 0;
    uint64_t v16 = v57;
    uint64_t v50 = v85;
    uint64_t v49 = v86;
  }
  else
  {
    uint64_t v94 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    outlined destroy of Any?((uint64_t)&v92, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v16 = 0;
    uint64_t v58 = v75;
  }
  *(void *)&long long v95 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, uint64_t))(*(void *)(v49 + 40) + 16))(&v95, v48);
  if (!v58)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v50, 0, 1, v37);
    uint64_t v59 = v77;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v77, v50, v37);
    uint64_t v91 = v37;
    uint64_t v60 = __swift_allocate_boxed_opaque_existential_1(v90);
    (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(v60, v59, v37);
    _expressionCompatibleValue(for:)((uint64_t)v90, (uint64_t)&v92);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    if (!*((void *)&v93 + 1))
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v59, v37);
      outlined destroy of Any?((uint64_t)&v92, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_26;
    }
    outlined init with take of Any(&v92, &v95);
    __swift_project_boxed_opaque_existential_1(&v95, v96);
    double v71 = v59;
    uint64_t v72 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v64 = objc_msgSend(self, sel_expressionForConstantValue_, v72);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v71, v37);

LABEL_34:
    uint64_t v73 = v74;
    uint64_t v16 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v74, v64, 0, v25, 0);

    return v16;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v50, 1, 1, v37);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v50, v88);
LABEL_26:
  char v61 = v74;
  if (!v16)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *id v62 = 2;
  }
  swift_willThrow();

  return v16;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Comparison<A, B>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.Comparison.convert(state:)(a1, a2);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

id PredicateExpressions.Negation.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v10 + 16))(&v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v2, v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v28, (uint64_t)&v31);
    uint64_t v11 = v32;
    uint64_t v12 = v33;
    __swift_project_boxed_opaque_existential_1(&v31, v32);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v11, v12);
    if (!v3)
    {
      id v17 = (id)v13;
      char v18 = v14;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      if (v18) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    uint64_t v4 = 0;
    id v15 = v3;
  }
  else
  {
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    outlined destroy of Any?((uint64_t)&v28, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v15 = 0;
  }
  *(void *)&long long v31 = MEMORY[0x1E4FBC860];
  (*(void (**)(char *__return_ptr, long long *, uint64_t))(*(void *)(a2 + 24) + 16))(&v27, &v31, v7);
  if (!v4)
  {
    if (v27 == 2) {
      goto LABEL_10;
    }
    uint64_t v26 = MEMORY[0x1E4FBB390];
    v25[0] = v27 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v25, (uint64_t)&v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (!*((void *)&v29 + 1))
    {
      outlined destroy of Any?((uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_10;
    }
    outlined init with take of Any(&v28, &v31);
    __swift_project_boxed_opaque_existential_1(&v31, v32);
    uint64_t v19 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v17 = objc_msgSend(self, sel_expressionForConstantValue_, v19);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);

LABEL_17:
    LOBYTE(v31) = 1;
    id v20 = v17;
    uint64_t v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v22 = objc_msgSend(self, sel_expressionForConstantValue_, v21);
    swift_unknownObjectRelease();
    id v17 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v20, v22, 0, 4, 0);

LABEL_18:
    id v15 = objc_msgSend(self, sel_notPredicateWithSubpredicate_, v17);

    return v15;
  }

LABEL_10:
  if (!v15)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v16 = 2;
  }
  swift_willThrow();
  return v15;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Negation<A>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.Negation.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.Filter.convert(state:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v73 = *(void *)(a2 + 24);
  uint64_t v71 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](a1);
  id v70 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v77 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v76 = type metadata accessor for Optional();
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v78 = (char *)&v67 - v10;
  uint64_t v80 = AssociatedTypeWitness;
  uint64_t v79 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  id v74 = (char *)&v67 - v12;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = a2;
  uint64_t v17 = *(void *)&v3[*(int *)(a2 + 64)];
  *(void *)&long long v88 = 0x5F6C61636F6C5FLL;
  *((void *)&v88 + 1) = 0xE700000000000000;
  *(void *)&long long v85 = *a1;
  uint64_t v18 = v85;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  uint64_t result = swift_bridgeObjectRelease();
  if (v18 != -1)
  {
    long long v21 = v88;
    *a1 = v18 + 1;
    uint64_t v81 = *((void *)&v21 + 1);
    uint64_t v67 = v21;
    uint64_t v22 = String._bridgeToObjectiveCImpl()();
    id v68 = self;
    id v23 = objc_msgSend(v68, sel_expressionForVariable_, v22);
    swift_unknownObjectRelease();
    specialized Dictionary.subscript.setter((uint64_t)v23, v17);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v3, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    int v24 = swift_dynamicCast();
    uint64_t v25 = MEMORY[0x1E4FBC860];
    id v69 = a1;
    if (v24)
    {
      uint64_t v26 = v3;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
      uint64_t v27 = v89;
      uint64_t v28 = v90;
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      long long v29 = v82;
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 16))(a1, v27, v28);
      uint64_t v32 = v29;
      if (!v29)
      {
        char v40 = (char *)v30;
        char v41 = v31;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
        uint64_t v82 = 0;
        if (v41)
        {
          LOBYTE(v88) = 1;
          uint64_t v42 = v40;
          uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          id v44 = v68;
          id v45 = objc_msgSend(v68, sel_expressionForConstantValue_, v43);
          swift_unknownObjectRelease();
          LOBYTE(v88) = 0;
          id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          uint64_t v78 = (char *)objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
        }
        else
        {
          uint64_t v78 = v40;
        }
        goto LABEL_18;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v87 = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v32 = 0;
      uint64_t v33 = v82;
    }
    *(void *)&long long v88 = v25;
    uint64_t v34 = v78;
    (*(void (**)(long long *, uint64_t))(v77 + 16))(&v88, v8);
    uint64_t v35 = v79;
    if (v33)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v34, 1, 1, v80);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v34, v76);
      if (v32)
      {
LABEL_9:
        swift_willThrow();
LABEL_30:
        swift_bridgeObjectRelease();
        return (uint64_t)v3;
      }
LABEL_8:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      unsigned char *v36 = 2;
      goto LABEL_9;
    }
    uint64_t v37 = v80;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v34, 0, 1, v80);
    uint64_t v38 = v74;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v74, v34, v37);
    uint64_t v84 = v37;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v83);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 16))(boxed_opaque_existential_1, v38, v37);
    _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
    uint64_t v82 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (!*((void *)&v86 + 1))
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v37);
      outlined destroy of Any?((uint64_t)&v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v32) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v26 = v3;
    outlined init with take of Any(&v85, &v88);
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    uint64_t v78 = (char *)objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v37);

LABEL_18:
    uint64_t v47 = v73;
    uint64_t v48 = v72;
    uint64_t v49 = v69;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v70, &v26[*(int *)(v72 + 60)], v73);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
      uint64_t v50 = v89;
      uint64_t v51 = v90;
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      uint64_t v52 = v82;
      uint64_t v53 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v51 + 16))(v49, v50, v51);
      uint64_t v55 = v52;
      if (!v52)
      {
        id v58 = (id)v53;
        char v59 = v54;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
        id v60 = v68;
        if (v59) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      char v56 = 0;
      uint64_t v3 = v55;
    }
    else
    {
      uint64_t v87 = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v3 = 0;
      char v56 = v82;
    }
    *(void *)&long long v88 = MEMORY[0x1E4FBC860];
    (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t))(*(void *)(v48 + 40) + 16))(&v91, &v88, v47);
    if (v56)
    {

LABEL_27:
      if (!v3)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *long long v57 = 2;
      }
      swift_willThrow();

      goto LABEL_30;
    }
    if (v91 == 2) {
      goto LABEL_27;
    }
    uint64_t v84 = MEMORY[0x1E4FBB390];
    LOBYTE(v83[0]) = v91 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (!*((void *)&v86 + 1))
    {
      outlined destroy of Any?((uint64_t)&v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_27;
    }
    outlined init with take of Any(&v85, &v88);
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    uint64_t v61 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v60 = v68;
    id v58 = objc_msgSend(v68, sel_expressionForConstantValue_, v61);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);

LABEL_36:
    LOBYTE(v88) = 1;
    id v62 = v58;
    id v63 = objc_msgSend(v60, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    id v58 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v62, v63, 0, 4, 0);

LABEL_37:
    uint64_t v64 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v65 = v60;
    id v66 = v78;
    uint64_t v3 = (char *)objc_msgSend(v65, sel_expressionForSubquery_usingIteratorVariable_predicate_, v78, v64, v58);
    swift_unknownObjectRelease();

    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Filter<A, B>(void *a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Filter.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

id PredicateExpressions.FloatDivision.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v81 = *(void *)(a2 + 24);
  uint64_t v79 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v78 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v83 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v84 = *(void *)(v12 - 8);
  uint64_t v85 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v77 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v75 - v15;
  uint64_t v87 = AssociatedTypeWitness;
  uint64_t v97 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v76 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  long long v21 = (char *)&v75 - v20;
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_182106040;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v88 = v5;
  v26(v25, v5, v10);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t v80 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    uint64_t v29 = v95;
    uint64_t v30 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      id v40 = (id)v31;
      char v41 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if (v41)
      {
        LOBYTE(v94) = 1;
        id v42 = v40;
        uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v44 = self;
        id v45 = objc_msgSend(v44, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v40 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
      }
      uint64_t v35 = (void *)v86;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    uint64_t v4 = 0;
    uint64_t v33 = v3;
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0;
  }
  *(void *)&long long v94 = v28;
  (*(void (**)(long long *, uint64_t, uint64_t))(v9 + 16))(&v94, v10, v9);
  id v34 = v4;
  if (!v4)
  {
    uint64_t v37 = v97;
    uint64_t v38 = v87;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v16, 0, 1, v87);
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v21, v16, v38);
    uint64_t v90 = v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v21, v38);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    uint64_t v35 = (void *)v86;
    if (!*((void *)&v92 + 1))
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v38);
      outlined destroy of Any?((uint64_t)&v91, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v47 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v48 = v37;
    id v40 = objc_msgSend(self, sel_expressionForConstantValue_, v47);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v38);

LABEL_17:
    uint64_t v49 = v81;
    uint64_t v50 = v80;
    uint64_t v51 = v83;
    uint64_t v52 = v79;
    uint64_t v53 = v78;
    uint64_t v86 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    v35[7] = v86;
    v35[4] = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v53, v88 + *(int *)(v51 + 60), v49);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
      uint64_t v54 = v95;
      uint64_t v55 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      id v63 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v50, v54, v55);
      char v65 = v64;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if (v65)
      {
        LOBYTE(v94) = 1;
        id v66 = v63;
        uint64_t v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v68 = self;
        id v69 = objc_msgSend(v68, sel_expressionForConstantValue_, v67);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v70 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v63 = objc_msgSend(v68, sel_expressionForConditional_trueExpression_falseExpression_, v66, v69, v70);
      }
    }
    else
    {
      uint64_t v93 = 0;
      long long v91 = 0u;
      long long v92 = 0u;
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
      id v34 = 0;
      *(void *)&long long v94 = MEMORY[0x1E4FBC860];
      char v56 = v77;
      (*(void (**)(long long *, uint64_t))(*(void *)(v51 + 40) + 16))(&v94, v49);
      uint64_t v57 = v97;
      uint64_t v58 = v87;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v56, 0, 1, v87);
      char v59 = v76;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v76, v56, v58);
      uint64_t v90 = v58;
      id v60 = __swift_allocate_boxed_opaque_existential_1(v89);
      (*(void (**)(uint64_t *, char *, uint64_t))(v57 + 16))(v60, v59, v58);
      _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      if (!*((void *)&v92 + 1))
      {
        (*(void (**)(char *, uint64_t))(v97 + 8))(v59, v58);
        outlined destroy of Any?((uint64_t)&v91, (uint64_t *)&demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        unsigned char *v61 = 2;
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(v35 + 4));
        goto LABEL_21;
      }
      outlined init with take of Any(&v91, &v94);
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      uint64_t v71 = v58;
      uint64_t v72 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v63 = objc_msgSend(self, sel_expressionForConstantValue_, v72);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v59, v71);
    }
    v35[11] = v86;
    v35[8] = v63;
    uint64_t v73 = String._bridgeToObjectiveCImpl()();
    uint64_t v74 = _ContiguousArrayBuffer._asCocoaArray()();
    id v34 = objc_msgSend(self, sel_expressionForFunction_arguments_, v73, v74);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v34;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v16, 1, 1, v87);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v16, v85);
  uint64_t v35 = (void *)v86;
  if (!v33)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v36 = 2;
  }
LABEL_8:
  swift_willThrow();
LABEL_21:
  _OWORD v35[2] = 0;
  swift_release();
  return v34;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.FloatDivision<A, B>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.FloatDivision.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

id PredicateExpressions.ClosedRange.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v81 = *(void *)(a2 + 24);
  uint64_t v77 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v76 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v80 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v12 - 8);
  uint64_t v83 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v75 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v84 = AssociatedTypeWitness;
  uint64_t v86 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v74 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  long long v21 = (char *)&v73 - v20;
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_1821A2800;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v95 = v5;
  v26(v25, v5, v10);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t v78 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    uint64_t v29 = v93;
    uint64_t v30 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      id v40 = (id)v31;
      char v41 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      if (v41)
      {
        LOBYTE(v92) = 1;
        id v42 = v40;
        uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v44 = self;
        id v45 = objc_msgSend(v44, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        LOBYTE(v92) = 0;
        id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v40 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
      }
      uint64_t v38 = v84;
      uint64_t v35 = v85;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    uint64_t v4 = 0;
    uint64_t v33 = v3;
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v91 = 0;
    long long v89 = 0u;
    long long v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0;
  }
  *(void *)&long long v92 = v28;
  (*(void (**)(long long *, uint64_t, uint64_t))(v9 + 16))(&v92, v10, v9);
  id v34 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v16, 1, 1, v84);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v16, v83);
    uint64_t v35 = v85;
    if (v33)
    {
LABEL_8:
      swift_willThrow();
LABEL_21:
      *(void *)(v35 + 16) = 0;
      swift_release();
      return v34;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v36 = 2;
    goto LABEL_8;
  }
  uint64_t v37 = v86;
  uint64_t v38 = v84;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v16, 0, 1, v84);
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v21, v16, v38);
  uint64_t v88 = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v87);
  (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v21, v38);
  _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
  uint64_t v35 = v85;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
  if (!*((void *)&v90 + 1))
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v38);
    outlined destroy of Any?((uint64_t)&v89, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v33) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  outlined init with take of Any(&v89, &v92);
  __swift_project_boxed_opaque_existential_1(&v92, v93);
  uint64_t v47 = v37;
  uint64_t v48 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v40 = objc_msgSend(self, sel_expressionForConstantValue_, v48);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v38);

LABEL_17:
  uint64_t v49 = v81;
  uint64_t v50 = v78;
  uint64_t v51 = v80;
  uint64_t v52 = v77;
  uint64_t v53 = v76;
  *(void *)(v35 + 32) = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v53, v95 + *(int *)(v51 + 60), v49);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    uint64_t v54 = v93;
    uint64_t v55 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    id v62 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v50, v54, v55);
    char v64 = v63;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    if (v64)
    {
      LOBYTE(v92) = 1;
      id v65 = v62;
      uint64_t v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      uint64_t v67 = self;
      id v68 = objc_msgSend(v67, sel_expressionForConstantValue_, v66);
      swift_unknownObjectRelease();
      LOBYTE(v92) = 0;
      id v69 = objc_msgSend(v67, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v62 = objc_msgSend(v67, sel_expressionForConditional_trueExpression_falseExpression_, v65, v68, v69);
    }
  }
  else
  {
    uint64_t v91 = 0;
    long long v89 = 0u;
    long long v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&long long v92 = MEMORY[0x1E4FBC860];
    char v56 = v75;
    (*(void (**)(long long *, uint64_t))(*(void *)(v51 + 40) + 16))(&v92, v49);
    id v34 = 0;
    uint64_t v57 = v86;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v56, 0, 1, v38);
    uint64_t v58 = v74;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v74, v56, v38);
    uint64_t v88 = v38;
    char v59 = __swift_allocate_boxed_opaque_existential_1(v87);
    (*(void (**)(uint64_t *, char *, uint64_t))(v57 + 16))(v59, v58, v38);
    _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    if (!*((void *)&v90 + 1))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v38);
      outlined destroy of Any?((uint64_t)&v89, (uint64_t *)&demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *id v60 = 2;
      swift_willThrow();

      goto LABEL_21;
    }
    outlined init with take of Any(&v89, &v92);
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    uint64_t v70 = v57;
    uint64_t v71 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v62 = objc_msgSend(self, sel_expressionForConstantValue_, v71);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v38);
  }
  *(void *)(v35 + 40) = v62;
  *(void *)&long long v92 = v35;
  specialized Array._endMutation()();
  if ((unint64_t)v92 >> 62)
  {
    if ((uint64_t)v92 < 0) {
      uint64_t v72 = v92;
    }
    else {
      uint64_t v72 = v92 & 0xFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    uint64_t v72 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  id v34 = objc_msgSend(self, sel_expressionForAggregate_, v72);
  swift_unknownObjectRelease();
  return v34;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.ClosedRange<A, B>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.ClosedRange.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

id PredicateExpressions.SequenceContains.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v81 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v79 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v87 = (char *)&v76 - v6;
  uint64_t v88 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v80 = (char *)&v76 - v8;
  uint64_t v85 = v4;
  uint64_t v84 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v83 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v90 = *(void *)(v14 - 8);
  id v91 = (id)v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v76 - v15;
  uint64_t v93 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v17);
  long long v89 = (char *)&v76 - v18;
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(int *)(a2 + 68);
  uint64_t v86 = v2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v22, v2 + v23, v12, v20);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v25 = swift_dynamicCast();
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if (v25)
  {
    uint64_t v77 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)&v99);
    uint64_t v27 = v100;
    uint64_t v28 = v101;
    __swift_project_boxed_opaque_existential_1(&v99, v100);
    uint64_t v29 = v102;
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v92, v27, v28);
    char v32 = v29;
    if (!v29)
    {
      id v39 = (void *)v30;
      char v40 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      double v102 = 0;
      if (v40)
      {
        LOBYTE(v99) = 1;
        id v43 = v39;
        uint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v45 = self;
        id v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v99) = 0;
        id v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v91 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);
      }
      else
      {
        id v91 = v39;
      }
      uint64_t AssociatedTypeWitness = v77;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
    uint64_t v33 = 0;
    id v34 = v32;
    uint64_t AssociatedTypeWitness = v77;
  }
  else
  {
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v34 = 0;
    uint64_t v33 = v102;
  }
  *(void *)&long long v99 = v26;
  (*(void (**)(long long *, uint64_t, uint64_t))(v11 + 16))(&v99, v12, v11);
  if (v33)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v16, 1, 1, v13);
    (*(void (**)(char *, id))(v90 + 8))(v16, v91);
    if (v34)
    {
LABEL_8:
      swift_willThrow();
      return v34;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v35 = 2;
    goto LABEL_8;
  }
  uint64_t v36 = v93;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v16, 0, 1, v13);
  uint64_t v37 = v89;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v89, v16, v13);
  uint64_t v95 = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v94);
  (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v37, v13);
  _expressionCompatibleValue(for:)((uint64_t)v94, (uint64_t)&v96);
  double v102 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
  char v41 = v34;
  if (!*((void *)&v97 + 1))
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);
    outlined destroy of Any?((uint64_t)&v96, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v34) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  outlined init with take of Any(&v96, &v99);
  __swift_project_boxed_opaque_existential_1(&v99, v100);
  uint64_t v42 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v91 = objc_msgSend(self, sel_expressionForConstantValue_, v42);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);

LABEL_18:
  uint64_t v48 = v88;
  uint64_t v49 = v87;
  uint64_t v50 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v86, v85);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)&v99);
    uint64_t v51 = v100;
    uint64_t v52 = v101;
    __swift_project_boxed_opaque_existential_1(&v99, v100);
    uint64_t v53 = v102;
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v92, v51, v52);
    char v56 = v53;
    if (!v53)
    {
      id v63 = (id)v54;
      char v64 = v55;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      if (v64)
      {
        LOBYTE(v99) = 1;
        id v65 = v63;
        uint64_t v66 = AssociatedTypeWitness;
        uint64_t v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v68 = self;
        id v69 = objc_msgSend(v68, sel_expressionForConstantValue_, v67);
        swift_unknownObjectRelease();
        LOBYTE(v99) = 0;
        id v70 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v63 = objc_msgSend(v68, sel_expressionForConditional_trueExpression_falseExpression_, v65, v69, v70);

        uint64_t AssociatedTypeWitness = v66;
      }
      goto LABEL_34;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
    uint64_t v57 = 0;
    id v34 = v56;
  }
  else
  {
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v34 = 0;
    uint64_t v57 = v102;
  }
  *(void *)&long long v99 = v26;
  (*(void (**)(long long *, uint64_t))(v81 + 16))(&v99, v50);
  if (v57)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v79);
    if (v34) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, AssociatedTypeWitness);
  uint64_t v58 = v80;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v80, v49, AssociatedTypeWitness);
  uint64_t v95 = AssociatedTypeWitness;
  char v59 = __swift_allocate_boxed_opaque_existential_1(v94);
  (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(v59, v58, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v94, (uint64_t)&v96);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
  if (!*((void *)&v97 + 1))
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v80, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v96, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v34) {
      goto LABEL_28;
    }
LABEL_27:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *id v60 = 2;
LABEL_28:
    uint64_t v61 = v91;
    swift_willThrow();

    return v34;
  }
  outlined init with take of Any(&v96, &v99);
  __swift_project_boxed_opaque_existential_1(&v99, v100);
  uint64_t v71 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v63 = objc_msgSend(self, sel_expressionForConstantValue_, v71);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v80, AssociatedTypeWitness);

LABEL_34:
  if (swift_conformsToProtocol2()) {
    uint64_t v72 = AssociatedTypeWitness;
  }
  else {
    uint64_t v72 = 0;
  }
  if (v72) {
    uint64_t v73 = 100;
  }
  else {
    uint64_t v73 = 10;
  }
  id v74 = objc_allocWithZone((Class)NSComparisonPredicate);
  uint64_t v75 = v91;
  id v34 = objc_msgSend(v74, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v91, v63, 0, v73, 0);

  return v34;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceContains<A, B>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.SequenceContains.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.Range._lower.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  a2[3] = v3;
  a2[4] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v6(boxed_opaque_existential_1, v2, v3);
}

uint64_t PredicateExpressions.Range._upper.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 60);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  a2[3] = v4;
  a2[4] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v7(boxed_opaque_existential_1, v3, v4);
}

uint64_t RangeExpression._anyRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v62 = type metadata accessor for PartialRangeUpTo();
  uint64_t v57 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v58 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v61 = (char *)&v56 - v7;
  uint64_t v66 = type metadata accessor for PartialRangeThrough();
  uint64_t v59 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  id v60 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v65 = (char *)&v56 - v10;
  uint64_t v70 = type metadata accessor for PartialRangeFrom();
  uint64_t v63 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  char v64 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  id v69 = (char *)&v56 - v13;
  uint64_t v14 = type metadata accessor for ClosedRange();
  uint64_t v67 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  id v68 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  int v25 = (char *)&v56 - v24;
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (uint64_t *)((char *)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = v30;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, double))(v30 + 16))(v29, v71, a1, v27);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v19);
    uint64_t v71 = v29;
    uint64_t v31 = v72;
    *(void *)(v72 + 24) = AssociatedTypeWitness;
    *(void *)(v31 + 32) = AssociatedConformanceWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v31);
    uint64_t v33 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
    v33(boxed_opaque_existential_1, v22, AssociatedTypeWitness);
    id v34 = &v22[*(int *)(v19 + 36)];
    *(void *)(v31 + 64) = AssociatedTypeWitness;
    *(void *)(v31 + 72) = AssociatedConformanceWitness;
    uint64_t v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 40));
    v33(v35, v34, AssociatedTypeWitness);
    *(unsigned char *)(v31 + 80) = 0;
    uint64_t v29 = v71;
  }
  else
  {
    uint64_t v36 = v72;
    if (swift_dynamicCast())
    {
      uint64_t v37 = v68;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v68, v18, v14);
      uint64_t v71 = (uint64_t *)(v36 + 40);
      *(void *)(v36 + 24) = AssociatedTypeWitness;
      *(void *)(v36 + 32) = AssociatedConformanceWitness;
      uint64_t v38 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
      id v39 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
      v39(v38, v37, AssociatedTypeWitness);
      char v40 = &v37[*(int *)(v14 + 36)];
      *(void *)(v36 + 64) = AssociatedTypeWitness;
      *(void *)(v36 + 72) = AssociatedConformanceWitness;
      char v41 = __swift_allocate_boxed_opaque_existential_1(v71);
      v39(v41, v40, AssociatedTypeWitness);
      char v42 = 1;
    }
    else
    {
      uint64_t v44 = v69;
      uint64_t v43 = v70;
      if (swift_dynamicCast())
      {
        id v45 = v64;
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v64, v44, v43);
        *(void *)(v36 + 24) = AssociatedTypeWitness;
        *(void *)(v36 + 32) = AssociatedConformanceWitness;
        id v46 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v46, v45, AssociatedTypeWitness);
        char v42 = 2;
      }
      else
      {
        uint64_t v48 = v65;
        uint64_t v47 = v66;
        if (swift_dynamicCast())
        {
          uint64_t v49 = v60;
          (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v60, v48, v47);
          *(void *)(v36 + 24) = AssociatedTypeWitness;
          *(void *)(v36 + 32) = AssociatedConformanceWitness;
          uint64_t v50 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
          (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v50, v49, AssociatedTypeWitness);
          char v42 = 3;
        }
        else
        {
          uint64_t v52 = v61;
          uint64_t v51 = v62;
          if (swift_dynamicCast())
          {
            uint64_t v53 = v58;
            (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v58, v52, v51);
            *(void *)(v36 + 24) = AssociatedTypeWitness;
            *(void *)(v36 + 32) = AssociatedConformanceWitness;
            uint64_t v54 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
            (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v54, v53, AssociatedTypeWitness);
            char v42 = 4;
          }
          else
          {
            *(_OWORD *)(v36 + 48) = 0u;
            *(_OWORD *)(v36 + 64) = 0u;
            *(_OWORD *)(v36 + 16) = 0u;
            *(_OWORD *)(v36 + 32) = 0u;
            *(_OWORD *)uint64_t v36 = 0u;
            char v42 = -1;
          }
        }
      }
    }
    *(unsigned char *)(v36 + 80) = v42;
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v73 + 8))(v29, a1);
}

uint64_t PredicateExpressions.Value<A>._anyRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RangeExpression._anyRange.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for _RangeValue._anyRange.getter in conformance <A> PredicateExpressions.Value<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.Value<A>._anyRange.getter(a1, a2);
}

id PredicateExpressions.RangeExpressionContains.convert(state:)(uint64_t *a1, uint64_t a2)
{
  void (*v83)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  id v90;
  char v91;
  char v92;
  id v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  char *v105;
  char *v106;
  unsigned char *v107;
  unsigned char *v108;
  uint64_t v109;
  id v110;
  id v111;
  char *v112;
  uint64_t *v113;
  id v114;
  char v115;
  char v116;
  void *v117;
  uint64_t v118;
  id v119;
  id v120;
  uint64_t v121;
  void *v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  double v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, double);
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t *v148;
  unsigned char *v149;
  uint64_t v150;
  void *v151;
  uint64_t *v152;
  void *v153;
  id v154;
  id v155;
  char v156;
  char v157;
  id v158;
  uint64_t v159;
  void *v160;
  id v161;
  id v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  id v166;
  id v167;
  uint64_t v168;
  void *v169;
  id v170;
  id v171;
  uint64_t v172;
  void *v173;
  uint64_t *v174;
  void *v175;
  id v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  long long *v185;
  uint64_t *v186;
  id v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t *v205;
  void (**v206)(char *, char *, uint64_t);
  uint64_t *v207;
  id v208;
  uint64_t v209;
  uint64_t v210[4];
  uint64_t v211[4];
  uint64_t v212[3];
  uint64_t v213;
  long long v214;
  long long v215;
  uint64_t v216;
  long long v217;
  long long v218;
  uint64_t v219;
  long long v220;
  long long v221;
  void v222[6];
  unsigned __int8 v223;
  long long v224;
  uint64_t v225;
  uint64_t v226;
  id v227;

  uint64_t v207 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v199 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v190 = *(void *)(v6 - 8);
  long long v191 = v6;
  MEMORY[0x1F4188790](v6);
  unint64_t v194 = (char *)&v188 - v7;
  uint64_t v197 = AssociatedTypeWitness;
  uint64_t v196 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v192 = (char *)&v188 - v9;
  uint64_t v205 = *(uint64_t **)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  long long v189 = (char *)&v188 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v193 = (char *)&v188 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v195 = (char *)&v188 - v15;
  uint64_t v16 = *(void **)(a2 + 24);
  unint64_t v209 = *(void *)(a2 + 40);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v202 = *(void *)(v18 - 8);
  uint64_t v203 = (char *)v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v188 - v19;
  uint64_t v206 = *(void (***)(char *, char *, uint64_t))(v17 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v198 = (char *)&v188 - v22;
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v188 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v188 = a2;
  uint64_t v27 = *(int *)(a2 + 60);
  uint64_t v204 = v2;
  (*(void (**)(char *, char *, void *, double))(v28 + 16))(v26, &v2[v27], v16, v24);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v208 = v16;
  uint64_t v200 = v29;
  int v30 = swift_dynamicCast();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  if (v30)
  {
    uint64_t v201 = v4;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v224);
    uint64_t v33 = v225;
    uint64_t v32 = v226;
    __swift_project_boxed_opaque_existential_1(&v224, v225);
    id v34 = v227;
    uint64_t v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 16))(v207, v33, v32);
    id v37 = v34;
    if (!v34)
    {
      id v46 = (id)v35;
      char v47 = v36;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
      if (v47)
      {
        LOBYTE(v224) = 1;
        id v48 = v46;
        uint64_t v49 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v50 = self;
        id v51 = objc_msgSend(v50, sel_expressionForConstantValue_, v49);
        swift_unknownObjectRelease();
        LOBYTE(v224) = 0;
        id v52 = objc_msgSend(v50, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v46 = objc_msgSend(v50, sel_expressionForConditional_trueExpression_falseExpression_, v48, v51, v52);
      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
    id v38 = 0;
    id v39 = v37;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    uint64_t v4 = v201;
  }
  else
  {
    v222[0] = 0;
    uint64_t v220 = 0u;
    uint64_t v221 = 0u;
    outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v39 = 0;
    id v38 = v227;
  }
  *(void *)&uint64_t v224 = v31;
  (*(void (**)(long long *, id))(v209 + 16))(&v224, v208);
  id v40 = v38;
  if (v38)
  {

    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v206[7])(v20, 1, 1, v17);
    (*(void (**)(char *, char *))(v202 + 8))(v20, v203);
    if (v39)
    {
LABEL_8:
      swift_willThrow();
      return v40;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v41 = 2;
    goto LABEL_8;
  }
  uint64_t v201 = v4;
  uint64_t v43 = v206;
  ((void (*)(char *, void, uint64_t, uint64_t))v206[7])(v20, 0, 1, v17);
  uint64_t v44 = v198;
  v43[4](v198, v20, v17);
  *((void *)&v218 + 1) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v217);
  v43[2]((char *)boxed_opaque_existential_1, v44, v17);
  _expressionCompatibleValue(for:)((uint64_t)&v217, (uint64_t)&v220);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
  if (!*((void *)&v221 + 1))
  {
    ((void (*)(char *, uint64_t))v43[1])(v44, v17);
    outlined destroy of Any?((uint64_t)&v220, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v39) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  outlined init with take of Any(&v220, &v224);
  __swift_project_boxed_opaque_existential_1(&v224, v225);
  uint64_t v53 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v54 = v39;
  id v46 = objc_msgSend(self, sel_expressionForConstantValue_, v53);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
  ((void (*)(char *, uint64_t))v43[1])(v44, v17);

LABEL_17:
  char v55 = v207;
  uint64_t v56 = v199;
  uint64_t v57 = (void (*)(char *, char *, uint64_t))v205[2];
  uint64_t v58 = v201;
  v205 += 2;
  v57(v195, v204, v201);
  int v59 = swift_dynamicCast();
  uint64_t v227 = v46;
  if (v59)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v224);
    uint64_t v60 = v225;
    uint64_t v61 = v226;
    __swift_project_boxed_opaque_existential_1(&v224, v225);
    uint64_t v90 = (id)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v61 + 16))(v55, v60, v61);
    uint64_t v92 = v91;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
    if (v92)
    {
      LOBYTE(v224) = 1;
      uint64_t v93 = v90;
      uint64_t v94 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      uint64_t v95 = self;
      long long v96 = objc_msgSend(v95, sel_expressionForConstantValue_, v94);
      swift_unknownObjectRelease();
      LOBYTE(v224) = 0;
      long long v97 = objc_msgSend(v95, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      uint64_t v90 = objc_msgSend(v95, sel_expressionForConditional_trueExpression_falseExpression_, v93, v96, v97);
    }
    goto LABEL_38;
  }
  v222[0] = 0;
  uint64_t v220 = 0u;
  uint64_t v221 = 0u;
  outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for ConvertibleExpression?);
  *(void *)&uint64_t v224 = MEMORY[0x1E4FBC860];
  uint64_t v62 = v194;
  uint64_t v63 = v58;
  (*(void (**)(long long *, uint64_t, uint64_t))(v56 + 16))(&v224, v58, v56);
  uint64_t v87 = v196;
  uint64_t v86 = v197;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v196 + 56))(v62, 0, 1, v197);
  uint64_t v88 = v192;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v192, v62, v86);
  *((void *)&v218 + 1) = v86;
  long long v89 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v217);
  (*(void (**)(uint64_t *, char *, uint64_t))(v87 + 16))(v89, v88, v86);
  _expressionCompatibleValue(for:)((uint64_t)&v217, (uint64_t)&v220);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
  if (*((void *)&v221 + 1))
  {
    outlined init with take of Any(&v220, &v224);
    __swift_project_boxed_opaque_existential_1(&v224, v225);
    char v109 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v90 = objc_msgSend(self, sel_expressionForConstantValue_, v109);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
    (*(void (**)(char *, uint64_t))(v196 + 8))(v192, v197);

LABEL_38:
    id v110 = objc_allocWithZone((Class)NSComparisonPredicate);
    uint64_t v111 = v227;
    id v40 = objc_msgSend(v110, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v227, v90, 0, 100, 0);

    return v40;
  }
  (*(void (**)(char *, uint64_t))(v196 + 8))(v192, v197);
  outlined destroy of Any?((uint64_t)&v220, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v85 = v227;
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  char v64 = (void *)swift_allocError();
  *id v65 = 2;
  swift_willThrow();

  uint64_t v66 = v204;
  v57(v193, v204, v63);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RangeOperator);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v222[0] = 0;
    uint64_t v220 = 0u;
    uint64_t v221 = 0u;
    outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for _RangeOperator?);
    v57(v189, v66, v63);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RangeValue);
    if (swift_dynamicCast())
    {
      uint64_t v81 = *((void *)&v218 + 1);
      uint64_t v82 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
      uint64_t v83 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v82 + 8);
      uint64_t v84 = v82;
      uint64_t v85 = v227;
      v83(&v220, v81, v84);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      if (v223 != 255)
      {
        outlined init with take of AnyRange((uint64_t)&v220, (uint64_t)&v224);
        outlined init with copy of AnyRange((uint64_t)&v224, (uint64_t)&v220);
        switch(v223)
        {
          case 1u:
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v217);
            outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)&v222[1], (uint64_t)&v214);
            uint64_t v150 = *((void *)&v215 + 1);
            uint64_t v151 = __swift_project_boxed_opaque_existential_1(&v214, *((uint64_t *)&v215 + 1));
            v211[3] = v150;
            double v152 = __swift_allocate_boxed_opaque_existential_1(v211);
            (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v150 - 8) + 16))(v152, v151, v150);
            _expressionCompatibleValue(for:)((uint64_t)v211, (uint64_t)v212);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v211);
            uint64_t v172 = *((void *)&v218 + 1);
            uint64_t v173 = __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
            v210[3] = v172;
            id v174 = __swift_allocate_boxed_opaque_existential_1(v210);
            (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v172 - 8) + 16))(v174, v173, v172);
            _expressionCompatibleValue(for:)((uint64_t)v210, (uint64_t)v211);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
            uint64_t v182 = swift_allocObject();
            *(_OWORD *)(v182 + 16) = xmmword_182106040;
            outlined init with copy of Any?((uint64_t)v212, v182 + 32);
            outlined init with copy of Any?((uint64_t)v211, v182 + 64);
            v210[0] = v182;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
            uint64_t v183 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            long long v184 = objc_msgSend(self, sel_expressionForConstantValue_, v183);
            swift_unknownObjectRelease();
            id v40 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v85, v184, 0, 100, 0);

            outlined destroy of Any?((uint64_t)v211, (uint64_t *)&demangling cache variable for type metadata for Any?);
            outlined destroy of Any?((uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for Any?);
            outlined destroy of AnyRange((uint64_t)&v224);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v214);
            uint64_t v185 = &v217;
            goto LABEL_65;
          case 2u:
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v217);
            uint64_t v153 = (void *)specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(&v217);
            uint64_t v154 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v85, v153, 0, 3, 0);
            goto LABEL_66;
          case 3u:
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v217);
            uint64_t v153 = (void *)specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(&v217);
            uint64_t v154 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v85, v153, 0, 1, 0);
            goto LABEL_66;
          case 4u:
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v217);
            uint64_t v153 = (void *)specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(&v217);
            uint64_t v154 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v85, v153, 0, 0, 0);
LABEL_66:
            id v40 = v154;

            break;
          default:
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v217);
            outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)&v222[1], (uint64_t)&v214);
            uint64_t v169 = (void *)specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(&v214);
            uint64_t v170 = objc_allocWithZone((Class)NSComparisonPredicate);
            uint64_t v171 = v227;
            uint64_t v207 = (uint64_t *)objc_msgSend(v170, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v227, v169, 0, 3, 0);

            uint64_t v175 = (void *)specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(&v217);
            uint64_t v176 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v171, v175, 0, 0, 0);

            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            id v177 = swift_allocObject();
            *(_OWORD *)(v177 + 16) = xmmword_1821A2800;
            uint64_t v178 = v207;
            *(void *)(v177 + 32) = v207;
            *(void *)(v177 + 40) = v176;
            v212[0] = v177;
            specialized Array._endMutation()();
            if ((unint64_t)v212[0] >> 62)
            {
              if (v212[0] < 0) {
                uint64_t v181 = v212[0];
              }
              else {
                uint64_t v181 = v212[0] & 0xFFFFFFFFFFFFFF8;
              }
              uint64_t v186 = v178;
              uint64_t v187 = v176;
            }
            else
            {
              type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSPredicate);
              uint64_t v179 = v178;
              uint64_t v180 = v176;
              uint64_t v181 = _ContiguousArrayBuffer._asCocoaArray()();
            }
            id v40 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v181);

            swift_unknownObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v214);
            break;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        outlined destroy of AnyRange((uint64_t)&v224);
        return v40;
      }
    }
    else
    {
      uint64_t v219 = 0;
      long long v217 = 0u;
      uint64_t v218 = 0u;
      outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for _RangeValue?);
      uint64_t v220 = 0u;
      uint64_t v221 = 0u;
      memset(v222, 0, sizeof(v222));
      long long v223 = -1;
    }
    outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for AnyRange?);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    id v40 = (id)swift_allocError();
    *uint64_t v108 = 2;
    swift_willThrow();

    return v40;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v220, (uint64_t)&v224);
  uint64_t v67 = v225;
  uint64_t v68 = v226;
  __swift_project_boxed_opaque_existential_1(&v224, v225);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v68 + 8))(&v220, v67, v68);
  uint64_t v69 = *((void *)&v221 + 1);
  uint64_t v70 = v222[0];
  uint64_t v71 = __swift_project_boxed_opaque_existential_1(&v220, *((uint64_t *)&v221 + 1));
  double v72 = MEMORY[0x1F4188790](v71);
  id v74 = (char *)&v188 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = *(void (**)(char *, double))(v75 + 16);
  unint64_t v209 = v77;
  v76(v74, v72);
  if (!swift_dynamicCast())
  {
    uint64_t v216 = 0;
    long long v214 = 0u;
    long long v215 = 0u;
    outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
    int v208 = 0;
    uint64_t v204 = 0;
    uint64_t v98 = swift_getAssociatedTypeWitness();
    uint64_t v206 = (void (**)(char *, char *, uint64_t))&v188;
    long long v99 = *(void *)(v98 - 8);
    MEMORY[0x1F4188790](v98);
    uint64_t v203 = (char *)&v188 - v100;
    uint64_t v101 = type metadata accessor for Optional();
    uint64_t v205 = &v188;
    double v102 = *(void *)(v101 - 8);
    unint64_t v103 = MEMORY[0x1F4188790](v101);
    uint64_t v105 = (char *)&v188 - v104;
    *(void *)&long long v217 = MEMORY[0x1E4FBC860];
    uint64_t v106 = v204;
    (*(void (**)(long long *, uint64_t, uint64_t, double))(v70 + 16))(&v217, v69, v70, v103);
    if (v106)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v105, 1, 1, v98);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v105, v101);
      id v40 = v227;
      if (!v208)
      {
LABEL_32:
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *id v107 = 2;
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v105, 0, 1, v98);
      char v112 = v203;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v203, v105, v98);
      uint64_t v213 = v98;
      id v113 = __swift_allocate_boxed_opaque_existential_1(v212);
      (*(void (**)(uint64_t *, char *, uint64_t))(v99 + 16))(v113, v112, v98);
      _expressionCompatibleValue(for:)((uint64_t)v212, (uint64_t)&v214);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v212);
      id v40 = v227;
      uint64_t v117 = v208;
      if (*((void *)&v215 + 1))
      {
        outlined init with take of Any(&v214, &v217);
        __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
        char v118 = _bridgeAnythingToObjectiveC<A>(_:)();
        unint64_t v119 = objc_msgSend(self, sel_expressionForConstantValue_, v118);
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v112, v98);
        id v114 = v119;

        goto LABEL_47;
      }
      (*(void (**)(char *, uint64_t))(v99 + 8))(v112, v98);
      outlined destroy of Any?((uint64_t)&v214, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v117) {
        goto LABEL_32;
      }
    }
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v220);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
    return v40;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
  uint64_t v78 = *((void *)&v218 + 1);
  uint64_t v79 = v219;
  __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
  uint64_t v80 = v207;
  id v114 = (id)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v79 + 16))(v207, v78, v79);
  id v116 = v115;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
  if ((v116 & 1) == 0) {
    goto LABEL_48;
  }
  LOBYTE(v217) = 1;
  uint64_t v120 = v114;
  BOOL v121 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v122 = self;
  char v123 = objc_msgSend(v122, sel_expressionForConstantValue_, v121);
  swift_unknownObjectRelease();
  LOBYTE(v217) = 0;
  uint64_t v124 = objc_msgSend(v122, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  id v114 = objc_msgSend(v122, sel_expressionForConditional_trueExpression_falseExpression_, v120, v123, v124);

LABEL_47:
  uint64_t v80 = v207;
LABEL_48:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v220);
  uint64_t v125 = v225;
  char v126 = v226;
  __swift_project_boxed_opaque_existential_1(&v224, v225);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v126 + 16))(&v220, v125, v126);
  uint64_t v128 = *((void *)&v221 + 1);
  uint64_t v127 = v222[0];
  BOOL v129 = __swift_project_boxed_opaque_existential_1(&v220, *((uint64_t *)&v221 + 1));
  uint64_t v130 = MEMORY[0x1F4188790](v129);
  uint64_t v132 = (char *)&v188 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v134 = *(void (**)(char *, double))(v133 + 16);
  unint64_t v209 = v135;
  v134(v132, v130);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
    int64_t v136 = v80;
    uint64_t v137 = *((void *)&v218 + 1);
    uint64_t v138 = v219;
    __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
    uint64_t v155 = (id)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v138 + 16))(v136, v137, v138);
    uint64_t v157 = v156;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    if (v157)
    {
      LOBYTE(v217) = 1;
      uint64_t v158 = v155;
      id v159 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      uint64_t v160 = self;
      uint64_t v161 = objc_msgSend(v160, sel_expressionForConstantValue_, v159);
      swift_unknownObjectRelease();
      LOBYTE(v217) = 0;
      uint64_t v162 = objc_msgSend(v160, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      uint64_t v155 = objc_msgSend(v160, sel_expressionForConditional_trueExpression_falseExpression_, v158, v161, v162);
    }
  }
  else
  {
    int v208 = v114;
    uint64_t v216 = 0;
    long long v214 = 0u;
    long long v215 = 0u;
    outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v206 = 0;
    unint64_t v139 = swift_getAssociatedTypeWitness();
    uint64_t v205 = &v188;
    int64_t v140 = *(void *)(v139 - 8);
    MEMORY[0x1F4188790](v139);
    uint64_t v204 = (char *)&v188 - v141;
    unint64_t v142 = type metadata accessor for Optional();
    uint64_t v207 = &v188;
    uint64_t v143 = MEMORY[0x1F4188790](v142);
    uint64_t v144 = v127;
    unint64_t v146 = (char *)&v188 - v145;
    *(void *)&long long v217 = MEMORY[0x1E4FBC860];
    (*(void (**)(long long *, uint64_t, double))(v144 + 16))(&v217, v128, v143);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v146, 0, 1, v139);
    int64_t v147 = v204;
    (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v204, v146, v139);
    uint64_t v213 = v139;
    int64_t v148 = __swift_allocate_boxed_opaque_existential_1(v212);
    (*(void (**)(uint64_t *, char *, uint64_t))(v140 + 16))(v148, v147, v139);
    _expressionCompatibleValue(for:)((uint64_t)v212, (uint64_t)&v214);
    id v114 = v208;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v212);
    id v40 = v227;
    if (!*((void *)&v215 + 1))
    {
      (*(void (**)(char *, uint64_t))(v140 + 8))(v147, v139);
      outlined destroy of Any?((uint64_t)&v214, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v206)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v149 = 2;
      }
      swift_willThrow();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v220);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
      return v40;
    }
    outlined init with take of Any(&v214, &v217);
    __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
    uint64_t v163 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v164 = v147;
    uint64_t v155 = objc_msgSend(self, sel_expressionForConstantValue_, v163);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v164, v139);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v220);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v165 = swift_allocObject();
  *(_OWORD *)(v165 + 16) = xmmword_1821A2800;
  unint64_t v166 = objc_allocWithZone((Class)NSComparisonPredicate);
  unint64_t v167 = v227;
  *(void *)(v165 + 32) = objc_msgSend(v166, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v227, v114, 0, 3, 0);
  *(void *)(v165 + 40) = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v167, v155, 0, 0, 0);
  *(void *)&uint64_t v220 = v165;
  specialized Array._endMutation()();
  if ((unint64_t)v220 >> 62)
  {
    if ((uint64_t)v220 < 0) {
      uint64_t v168 = v220;
    }
    else {
      uint64_t v168 = v220 & 0xFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSPredicate);
    uint64_t v168 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  id v40 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v168);

  swift_unknownObjectRelease();
  uint64_t v185 = &v224;
LABEL_65:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
  return v40;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.RangeExpressionContains<A, B>(uint64_t *a1, uint64_t a2)
{
  id result = PredicateExpressions.RangeExpressionContains.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceContainsWhere.convert(state:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v107 = *(void *)(a2 + 24);
  uint64_t v106 = *(void *)(v107 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v105 = (char *)v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v112 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v110 = type metadata accessor for Optional();
  uint64_t v109 = *(void *)(v110 - 8);
  MEMORY[0x1F4188790](v110);
  id v113 = (char *)v103 - v10;
  uint64_t v114 = AssociatedTypeWitness;
  uint64_t v115 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v111 = (char *)v103 - v12;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = a2;
  uint64_t v17 = *(void *)(v3 + *(int *)(a2 + 64));
  *(void *)&long long v123 = 0x5F6C61636F6C5FLL;
  *((void *)&v123 + 1) = 0xE700000000000000;
  *(void *)&long long v120 = *a1;
  uint64_t v18 = v120;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  uint64_t result = swift_bridgeObjectRelease();
  if (v18 == -1)
  {
    __break(1u);
    goto LABEL_54;
  }
  long long v21 = v123;
  *a1 = v18 + 1;
  uint64_t v116 = *((void *)&v21 + 1);
  v103[1] = v21;
  uint64_t v22 = String._bridgeToObjectiveCImpl()();
  id v104 = self;
  id v23 = objc_msgSend(v104, sel_expressionForVariable_, v22);
  swift_unknownObjectRelease();
  specialized Dictionary.subscript.setter((uint64_t)v23, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v3, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v24 = swift_dynamicCast();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v26 = v3;
  if (v24)
  {
    uint64_t v27 = v3;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v120, (uint64_t)&v123);
    uint64_t v28 = v124;
    uint64_t v29 = v125;
    __swift_project_boxed_opaque_existential_1(&v123, v124);
    int v30 = v117;
    uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 16))(a1, v28, v29);
    id v33 = v30;
    if (!v30)
    {
      char v42 = (void *)v31;
      char v43 = v32;
      uint64_t v117 = a1;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
      if (v43)
      {
        LOBYTE(v123) = 1;
        id v49 = v42;
        uint64_t v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v51 = v104;
        id v52 = objc_msgSend(v104, sel_expressionForConstantValue_, v50);
        swift_unknownObjectRelease();
        LOBYTE(v123) = 0;
        id v53 = objc_msgSend(v51, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v44 = objc_msgSend(v51, sel_expressionForConditional_trueExpression_falseExpression_, v49, v52, v53);
      }
      else
      {
        id v44 = v42;
      }
      uint64_t v45 = v107;
      uint64_t v46 = v108;
      uint64_t v26 = v27;
      uint64_t v47 = v106;
      id v48 = v105;
      uint64_t v25 = MEMORY[0x1E4FBC860];
      goto LABEL_19;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
    id v34 = 0;
    uint64_t v35 = v33;
    uint64_t v26 = v3;
    uint64_t v25 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v122 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    outlined destroy of Any?((uint64_t)&v120, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v35 = 0;
    id v34 = v117;
  }
  *(void *)&long long v123 = v25;
  id v33 = v113;
  (*(void (**)(long long *, uint64_t))(v112 + 16))(&v123, v8);
  uint64_t v36 = v114;
  if (v34)
  {

    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v115 + 56))(v33, 1, 1, v36);
    (*(void (**)(id, uint64_t))(v109 + 8))(v33, v110);
    if (v35)
    {
LABEL_9:
      swift_willThrow();
LABEL_25:
      swift_bridgeObjectRelease();
      return (uint64_t)v33;
    }
LABEL_8:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v37 = 2;
    goto LABEL_9;
  }
  uint64_t v38 = v115;
  (*(void (**)(id, void, uint64_t, uint64_t))(v115 + 56))(v33, 0, 1, v114);
  id v39 = v33;
  id v40 = v111;
  (*(void (**)(char *, id, uint64_t))(v38 + 32))(v111, v39, v36);
  uint64_t v119 = v36;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v118);
  (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(boxed_opaque_existential_1, v40, v36);
  _expressionCompatibleValue(for:)((uint64_t)v118, (uint64_t)&v120);
  id v33 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
  if (!*((void *)&v121 + 1))
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v111, v36);
    outlined destroy of Any?((uint64_t)&v120, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v35) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v117 = a1;
  outlined init with take of Any(&v120, &v123);
  __swift_project_boxed_opaque_existential_1(&v123, v124);
  id v44 = objc_msgSend(v104, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v111, v36);

  uint64_t v45 = v107;
  uint64_t v46 = v108;
  uint64_t v47 = v106;
  id v48 = v105;
LABEL_19:
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v48, v26 + *(int *)(v46 + 60), v45);
  if (!swift_dynamicCast())
  {
    uint64_t v122 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    outlined destroy of Any?((uint64_t)&v120, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&long long v123 = v25;
    (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t))(*(void *)(v46 + 40) + 16))(&v126, &v123, v45);
    if (v126 != 2)
    {
      uint64_t v119 = MEMORY[0x1E4FBB390];
      LOBYTE(v118[0]) = v126 & 1;
      _expressionCompatibleValue(for:)((uint64_t)v118, (uint64_t)&v120);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
      if (*((void *)&v121 + 1))
      {
        outlined init with take of Any(&v120, &v123);
        __swift_project_boxed_opaque_existential_1(&v123, v124);
        uint64_t v61 = _bridgeAnythingToObjectiveC<A>(_:)();
        id v60 = v104;
        id v57 = objc_msgSend(v104, sel_expressionForConstantValue_, v61);
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);

LABEL_31:
        LOBYTE(v123) = 1;
        id v62 = v57;
        id v63 = objc_msgSend(v60, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v57 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v62, v63, 0, 4, 0);

        goto LABEL_32;
      }
      outlined destroy of Any?((uint64_t)&v120, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v56 = 2;
    swift_willThrow();

    goto LABEL_25;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v120, (uint64_t)&v123);
  uint64_t v54 = v124;
  uint64_t v55 = v125;
  __swift_project_boxed_opaque_existential_1(&v123, v124);
  id v57 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v55 + 16))(v117, v54, v55);
  char v59 = v58;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  id v60 = v104;
  if ((v59 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v64 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v65 = objc_msgSend(v60, sel_expressionForSubquery_usingIteratorVariable_predicate_, v44, v64, v57);
  swift_unknownObjectRelease();

  if (objc_msgSend(v65, sel_expressionType) == (id)1)
  {
    id v66 = objc_msgSend(v60, sel_expressionForKeyPath_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
LABEL_52:
    *(void *)&long long v123 = 0;
    id v102 = objc_msgSend(v60, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    id v33 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v66, v102, 0, 5, 0);

    return (uint64_t)v33;
  }
  if (objc_msgSend(v65, sel_expressionType) != (id)3) {
    goto LABEL_47;
  }
  uint64_t v67 = &selRef_initWithTarget_handler_;
  id v68 = objc_msgSend(v65, sel_keyPath);
  id v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  uint64_t v71 = v70;

  *(void *)&long long v123 = 64;
  *((void *)&v123 + 1) = 0xE100000000000000;
  *(void *)&long long v120 = v69;
  *((void *)&v120 + 1) = v71;
  if ((v71 & 0x1000000000000000) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    uint64_t v85 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v86 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v87 = objc_msgSend(v85, sel_rangeOfString_, v86);
    uint64_t v89 = v88;
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    if (v87 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v60 = v104;
      uint64_t v67 = &selRef_initWithTarget_handler_;
LABEL_43:
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    id v60 = v104;
    if (!__OFADD__(v87, v89))
    {
      StringProtocol._toUTF16Indices(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  unint64_t v72 = String.subscript.getter();
  unint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  swift_bridgeObjectRelease();
  v118[0] = 64;
  v118[1] = 0xE100000000000000;
  unint64_t v79 = Substring.init<A>(_:)();
  if ((v72 ^ v74) < 0x4000 || !((v79 ^ v80) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v60 = v104;
    goto LABEL_43;
  }
  specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v79, v80, v81, v82, 0, 0, 0, 0, 0, v72, v74, v76, v78);
  char v84 = v83;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v60 = v104;
  if (v84)
  {
LABEL_44:
    id v90 = [v65 v67[195]];
    id v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
    uint64_t v93 = v92;

    *(void *)&long long v123 = v91;
    *((void *)&v123 + 1) = v93;
    v94._uint64_t countAndFlagsBits = 46;
    v94._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v94);
    v95._uint64_t countAndFlagsBits = 0x746E756F6340;
    v95._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v95);
    uint64_t v96 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v66 = objc_msgSend(v60, sel_expressionForKeyPath_, v96);
    swift_unknownObjectRelease();
    goto LABEL_52;
  }
LABEL_47:
  uint64_t v97 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  uint64_t v124 = v97;
  *(void *)&long long v123 = v65;
  uint64_t v98 = String._bridgeToObjectiveCImpl()();
  id v99 = v65;
  id v100 = objc_msgSend(v60, sel__newKeyPathExpressionForString_, v98);
  swift_unknownObjectRelease();
  if (v100)
  {
    *((void *)&v121 + 1) = v97;
    *(void *)&long long v120 = v100;
  }
  else
  {
    long long v120 = 0u;
    long long v121 = 0u;
  }
  id v101 = objc_allocWithZone((Class)NSKeyPathExpression);
  uint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v123, &v120);
  if (result)
  {
    id v66 = (id)result;
    goto LABEL_52;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceContainsWhere<A, B>(void *a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceContainsWhere.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.convert(state:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v104 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v102 = type metadata accessor for Optional();
  v101[1] = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  uint64_t v105 = (char *)v101 - v8;
  uint64_t v107 = (char *)AssociatedTypeWitness;
  uint64_t v106 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v103 = (char *)v101 - v10;
  uint64_t v111 = v6;
  uint64_t v110 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v109 = (char *)v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v3 + *(int *)(a2 + 64));
  *(void *)&long long v121 = 0x5F6C61636F6C5FLL;
  *((void *)&v121 + 1) = 0xE700000000000000;
  uint64_t v115 = a1;
  *(void *)&long long v118 = *a1;
  uint64_t v19 = v118;
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  uint64_t result = swift_bridgeObjectRelease();
  if (v19 == -1)
  {
    __break(1u);
    goto LABEL_52;
  }
  long long v22 = v121;
  *uint64_t v115 = v19 + 1;
  uint64_t v113 = *((void *)&v22 + 1);
  v101[0] = v22;
  uint64_t v23 = String._bridgeToObjectiveCImpl()();
  id v112 = self;
  id v24 = objc_msgSend(v112, sel_expressionForVariable_, v23);
  swift_unknownObjectRelease();
  specialized Dictionary.subscript.setter((uint64_t)v24, v18);
  uint64_t v25 = *(int *)(a2 + 60);
  uint64_t v108 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v3 + v25, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (!swift_dynamicCast())
  {
    char v32 = v115;
    uint64_t v120 = 0;
    long long v118 = 0u;
    long long v119 = 0u;
    outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v34 = 0;
    id v33 = v114;
    goto LABEL_6;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v118, (uint64_t)&v121);
  uint64_t v26 = v122;
  uint64_t v27 = v123;
  __swift_project_boxed_opaque_existential_1(&v121, v122);
  uint64_t v28 = v114;
  uint64_t v29 = v115;
  uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 16))(v115, v26, v27);
  uint64_t v17 = v28;
  if (v28)
  {
    char v32 = v29;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    id v33 = 0;
    id v34 = v17;
LABEL_6:
    *(void *)&long long v121 = MEMORY[0x1E4FBC860];
    (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t))(*(void *)(a2 + 40) + 16))(&v124, &v121, v13);
    if (v33)
    {

LABEL_11:
      if (!v34)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v35 = 2;
      }
      swift_willThrow();
      swift_bridgeObjectRelease();
      return (uint64_t)v17;
    }
    if (v124 == 2) {
      goto LABEL_11;
    }
    uint64_t v117 = (char *)MEMORY[0x1E4FBB390];
    LOBYTE(v116[0]) = v124 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v116, (uint64_t)&v118);
    uint64_t v17 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    if (!*((void *)&v119 + 1))
    {
      outlined destroy of Any?((uint64_t)&v118, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_11;
    }
    outlined init with take of Any(&v118, &v121);
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    uint64_t v39 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v38 = v112;
    id v36 = objc_msgSend(v112, sel_expressionForConstantValue_, v39);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);

    uint64_t v29 = v32;
    goto LABEL_19;
  }
  id v36 = (id)v30;
  char v37 = v31;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
  id v38 = v112;
  if ((v37 & 1) == 0)
  {
LABEL_19:
    LOBYTE(v121) = 1;
    id v40 = v36;
    id v41 = objc_msgSend(v38, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    id v36 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v40, v41, 0, 4, 0);
  }
  id v42 = objc_msgSend(self, sel_notPredicateWithSubpredicate_, v36);

  uint64_t v43 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v108, v111);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v118, (uint64_t)&v121);
    uint64_t v44 = v122;
    uint64_t v45 = v123;
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    id v51 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v45 + 16))(v29, v44, v45);
    char v53 = v52;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    if (v53)
    {
      LOBYTE(v121) = 1;
      id v57 = v51;
      uint64_t v58 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v54 = v112;
      id v59 = objc_msgSend(v112, sel_expressionForConstantValue_, v58);
      swift_unknownObjectRelease();
      LOBYTE(v121) = 0;
      id v60 = objc_msgSend(v54, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v51 = objc_msgSend(v54, sel_expressionForConditional_trueExpression_falseExpression_, v57, v59, v60);
    }
    else
    {
      id v54 = v112;
    }
  }
  else
  {
    uint64_t v120 = 0;
    long long v118 = 0u;
    long long v119 = 0u;
    outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v46 = v105;
    *(void *)&long long v121 = MEMORY[0x1E4FBC860];
    (*(void (**)(long long *, uint64_t))(v104 + 16))(&v121, v43);
    uint64_t v47 = v106;
    uint64_t v17 = v107;
    (*(void (**)(char *, void, uint64_t, char *))(v106 + 56))(v46, 0, 1, v107);
    id v48 = v103;
    (*(void (**)(char *, char *, char *))(v47 + 32))(v103, v46, v17);
    uint64_t v117 = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v116);
    (*(void (**)(uint64_t *, char *, char *))(v47 + 16))(boxed_opaque_existential_1, v48, v17);
    _expressionCompatibleValue(for:)((uint64_t)v116, (uint64_t)&v118);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    if (!*((void *)&v119 + 1))
    {
      (*(void (**)(char *, char *))(v47 + 8))(v103, v17);
      outlined destroy of Any?((uint64_t)&v118, (uint64_t *)&demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *uint64_t v50 = 2;
      swift_willThrow();
      swift_bridgeObjectRelease();

      return (uint64_t)v17;
    }
    outlined init with take of Any(&v118, &v121);
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    uint64_t v55 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v54 = v112;
    uint64_t v56 = v47;
    id v51 = objc_msgSend(v112, sel_expressionForConstantValue_, v55);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    (*(void (**)(char *, char *))(v56 + 8))(v103, v17);
  }
  uint64_t v61 = String._bridgeToObjectiveCImpl()();
  id v62 = v42;
  swift_bridgeObjectRelease();
  id v63 = objc_msgSend(v54, sel_expressionForSubquery_usingIteratorVariable_predicate_, v51, v61, v62);
  swift_unknownObjectRelease();

  if (objc_msgSend(v63, sel_expressionType) == (id)1)
  {
    id v64 = objc_msgSend(v54, sel_expressionForKeyPath_, String._bridgeToObjectiveCImpl()());
LABEL_42:
    id v94 = v64;
    swift_unknownObjectRelease();
LABEL_50:
    *(void *)&long long v121 = 0;
    id v100 = objc_msgSend(v54, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    uint64_t v17 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v94, v100, 0, 4, 0);

    return (uint64_t)v17;
  }
  if (objc_msgSend(v63, sel_expressionType) != (id)3) {
    goto LABEL_45;
  }
  id v65 = objc_msgSend(v63, sel_keyPath);
  id v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
  uint64_t v68 = v67;

  *(void *)&long long v121 = 64;
  *((void *)&v121 + 1) = 0xE100000000000000;
  *(void *)&long long v118 = v66;
  *((void *)&v118 + 1) = v68;
  if ((v68 & 0x1000000000000000) != 0)
  {
    uint64_t v115 = 0;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    uint64_t v82 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v83 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v84 = objc_msgSend(v82, sel_rangeOfString_, v83);
    uint64_t v86 = v85;
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    if (v84 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v54 = v112;
LABEL_40:
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    id v54 = v112;
    if (!__OFADD__(v84, v86))
    {
      StringProtocol._toUTF16Indices(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  unint64_t v69 = String.subscript.getter();
  unint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  swift_bridgeObjectRelease();
  v116[0] = 64;
  v116[1] = 0xE100000000000000;
  unint64_t v76 = Substring.init<A>(_:)();
  if ((v69 ^ v71) < 0x4000 || !((v76 ^ v77) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v54 = v112;
    goto LABEL_40;
  }
  specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v76, v77, v78, v79, 0, 0, 0, 0, 0, v69, v71, v73, v75);
  char v81 = v80;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v54 = v112;
  if (v81)
  {
LABEL_41:
    id v87 = objc_msgSend(v63, sel_keyPath);
    id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    uint64_t v90 = v89;

    *(void *)&long long v121 = v88;
    *((void *)&v121 + 1) = v90;
    v91._uint64_t countAndFlagsBits = 46;
    v91._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v91);
    v92._uint64_t countAndFlagsBits = 0x746E756F6340;
    v92._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v92);
    uint64_t v93 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v64 = objc_msgSend(v54, sel_expressionForKeyPath_, v93);
    goto LABEL_42;
  }
LABEL_45:
  uint64_t v95 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  uint64_t v122 = v95;
  *(void *)&long long v121 = v63;
  uint64_t v96 = String._bridgeToObjectiveCImpl()();
  id v97 = v63;
  id v98 = objc_msgSend(v54, sel__newKeyPathExpressionForString_, v96);
  swift_unknownObjectRelease();
  if (v98)
  {
    *((void *)&v119 + 1) = v95;
    *(void *)&long long v118 = v98;
  }
  else
  {
    long long v118 = 0u;
    long long v119 = 0u;
  }
  id v99 = objc_allocWithZone((Class)NSKeyPathExpression);
  uint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v121, &v118);
  if (result)
  {
    id v94 = (id)result;
    goto LABEL_50;
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceAllSatisfy<A, B>(void *a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceAllSatisfy.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceMaximum.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v79 = (char *)&v77 - v14;
  double v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v7, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    uint64_t v78 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    uint64_t v19 = v86;
    uint64_t v20 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      id v29 = (id)v21;
      char v30 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if (v30)
      {
        LOBYTE(v85) = 1;
        id v31 = v29;
        uint64_t v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v33 = self;
        id v34 = objc_msgSend(v33, sel_expressionForConstantValue_, v32);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        id v35 = objc_msgSend(v33, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v29 = objc_msgSend(v33, sel_expressionForConditional_trueExpression_falseExpression_, v31, v34, v35);
      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    uint64_t v4 = 0;
    uint64_t v23 = v3;
    uint64_t v12 = v78;
  }
  else
  {
    uint64_t v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v23 = 0;
  }
  *(void *)&long long v85 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, uint64_t, uint64_t))(v8 + 16))(&v85, v7, v8);
  id v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v88);
    if (v23) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  uint64_t v25 = v79;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v79, v11, AssociatedTypeWitness);
  v81[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v25, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v81, (uint64_t)&v82);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  if (!*((void *)&v83 + 1))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v82, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v23) {
      goto LABEL_11;
    }
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v27 = 2;
LABEL_11:
    swift_willThrow();
    return (uint64_t)v24;
  }
  outlined init with take of Any(&v82, &v85);
  __swift_project_boxed_opaque_existential_1(&v85, v86);
  uint64_t v36 = _bridgeAnythingToObjectiveC<A>(_:)();
  char v37 = v23;
  id v29 = objc_msgSend(self, sel_expressionForConstantValue_, v36);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);

LABEL_17:
  if (objc_msgSend(v29, sel_expressionType) == (id)1)
  {
    uint64_t v38 = String._bridgeToObjectiveCImpl()();
    id v39 = objc_msgSend(self, sel_expressionForKeyPath_, v38);
LABEL_30:
    id v24 = v39;

    swift_unknownObjectRelease();
    return (uint64_t)v24;
  }
  if (objc_msgSend(v29, sel_expressionType) != (id)3) {
    goto LABEL_33;
  }
  id v40 = &selRef_initWithTarget_handler_;
  id v41 = v29;
  id v42 = objc_msgSend(v29, sel_keyPath);
  id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  *(void *)&long long v85 = 64;
  *((void *)&v85 + 1) = 0xE100000000000000;
  *(void *)&long long v82 = v43;
  *((void *)&v82 + 1) = v45;
  if ((v45 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v46 = String.subscript.getter();
    unint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    v81[0] = 64;
    v81[1] = 0xE100000000000000;
    unint64_t v53 = Substring.init<A>(_:)();
    if ((v46 ^ v48) >= 0x4000 && (v53 ^ v54) >> 14)
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v53, v54, v55, v56, 0, 0, 0, 0, 0, v46, v48, v50, v52);
      char v58 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v29 = v41;
      if ((v58 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_29:
      id v64 = [v29 v40[195]];
      id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      uint64_t v67 = v66;

      *(void *)&long long v85 = v65;
      *((void *)&v85 + 1) = v67;
      v68._uint64_t countAndFlagsBits = 46;
      v68._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      v69._uint64_t countAndFlagsBits = 0x6C65732E78616D40;
      v69._unint64_t object = (void *)0xE900000000000066;
      String.append(_:)(v69);
      uint64_t v70 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend(self, sel_expressionForKeyPath_, v70);
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    id v29 = v41;
    goto LABEL_29;
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  id v59 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v60 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v61 = objc_msgSend(v59, sel_rangeOfString_, v60);
  uint64_t v63 = v62;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (v61 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v40 = &selRef_initWithTarget_handler_;
    goto LABEL_28;
  }
  if (__OFADD__(v61, v63))
  {
    __break(1u);
    goto LABEL_39;
  }
  StringProtocol._toUTF16Indices(_:)();
  swift_bridgeObjectRelease();
  id v29 = v41;
LABEL_33:
  uint64_t v71 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  uint64_t v86 = v71;
  *(void *)&long long v85 = v29;
  uint64_t v72 = self;
  uint64_t v73 = String._bridgeToObjectiveCImpl()();
  id v74 = v29;
  id v75 = objc_msgSend(v72, sel__newKeyPathExpressionForString_, v73);
  swift_unknownObjectRelease();
  if (v75)
  {
    *((void *)&v83 + 1) = v71;
    *(void *)&long long v82 = v75;
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  id v76 = objc_allocWithZone((Class)NSKeyPathExpression);
  uint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v85, &v82);
  if (result)
  {
    id v24 = (id)result;

    return (uint64_t)v24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceMaximum<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceMaximum.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceMinimum.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v79 = (char *)&v77 - v14;
  double v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v7, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    uint64_t v78 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    uint64_t v19 = v86;
    uint64_t v20 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      id v29 = (id)v21;
      char v30 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if (v30)
      {
        LOBYTE(v85) = 1;
        id v31 = v29;
        uint64_t v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v33 = self;
        id v34 = objc_msgSend(v33, sel_expressionForConstantValue_, v32);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        id v35 = objc_msgSend(v33, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v29 = objc_msgSend(v33, sel_expressionForConditional_trueExpression_falseExpression_, v31, v34, v35);
      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    uint64_t v4 = 0;
    uint64_t v23 = v3;
    uint64_t v12 = v78;
  }
  else
  {
    uint64_t v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v23 = 0;
  }
  *(void *)&long long v85 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, uint64_t, uint64_t))(v8 + 16))(&v85, v7, v8);
  id v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v88);
    if (v23) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  uint64_t v25 = v79;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v79, v11, AssociatedTypeWitness);
  v81[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v25, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v81, (uint64_t)&v82);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  if (!*((void *)&v83 + 1))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v82, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v23) {
      goto LABEL_11;
    }
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v27 = 2;
LABEL_11:
    swift_willThrow();
    return (uint64_t)v24;
  }
  outlined init with take of Any(&v82, &v85);
  __swift_project_boxed_opaque_existential_1(&v85, v86);
  uint64_t v36 = _bridgeAnythingToObjectiveC<A>(_:)();
  char v37 = v23;
  id v29 = objc_msgSend(self, sel_expressionForConstantValue_, v36);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);

LABEL_17:
  if (objc_msgSend(v29, sel_expressionType) == (id)1)
  {
    uint64_t v38 = String._bridgeToObjectiveCImpl()();
    id v39 = objc_msgSend(self, sel_expressionForKeyPath_, v38);
LABEL_30:
    id v24 = v39;

    swift_unknownObjectRelease();
    return (uint64_t)v24;
  }
  if (objc_msgSend(v29, sel_expressionType) != (id)3) {
    goto LABEL_33;
  }
  id v40 = &selRef_initWithTarget_handler_;
  id v41 = v29;
  id v42 = objc_msgSend(v29, sel_keyPath);
  id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  *(void *)&long long v85 = 64;
  *((void *)&v85 + 1) = 0xE100000000000000;
  *(void *)&long long v82 = v43;
  *((void *)&v82 + 1) = v45;
  if ((v45 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v46 = String.subscript.getter();
    unint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    v81[0] = 64;
    v81[1] = 0xE100000000000000;
    unint64_t v53 = Substring.init<A>(_:)();
    if ((v46 ^ v48) >= 0x4000 && (v53 ^ v54) >> 14)
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v53, v54, v55, v56, 0, 0, 0, 0, 0, v46, v48, v50, v52);
      char v58 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v29 = v41;
      if ((v58 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_29:
      id v64 = [v29 v40[195]];
      id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      uint64_t v67 = v66;

      *(void *)&long long v85 = v65;
      *((void *)&v85 + 1) = v67;
      v68._uint64_t countAndFlagsBits = 46;
      v68._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      v69._uint64_t countAndFlagsBits = 0x6C65732E6E696D40;
      v69._unint64_t object = (void *)0xE900000000000066;
      String.append(_:)(v69);
      uint64_t v70 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend(self, sel_expressionForKeyPath_, v70);
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    id v29 = v41;
    goto LABEL_29;
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  id v59 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v60 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v61 = objc_msgSend(v59, sel_rangeOfString_, v60);
  uint64_t v63 = v62;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (v61 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v40 = &selRef_initWithTarget_handler_;
    goto LABEL_28;
  }
  if (__OFADD__(v61, v63))
  {
    __break(1u);
    goto LABEL_39;
  }
  StringProtocol._toUTF16Indices(_:)();
  swift_bridgeObjectRelease();
  id v29 = v41;
LABEL_33:
  uint64_t v71 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  uint64_t v86 = v71;
  *(void *)&long long v85 = v29;
  uint64_t v72 = self;
  uint64_t v73 = String._bridgeToObjectiveCImpl()();
  id v74 = v29;
  id v75 = objc_msgSend(v72, sel__newKeyPathExpressionForString_, v73);
  swift_unknownObjectRelease();
  if (v75)
  {
    *((void *)&v83 + 1) = v71;
    *(void *)&long long v82 = v75;
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  id v76 = objc_allocWithZone((Class)NSKeyPathExpression);
  uint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v85, &v82);
  if (result)
  {
    id v24 = (id)result;

    return (uint64_t)v24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceMinimum<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceMinimum.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

char *PredicateExpressions.Conditional.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v90 = *(void *)(a2 + 32);
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v88 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v95 = *(void *)(v9 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v93 = type metadata accessor for Optional();
  uint64_t v92 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  uint64_t v87 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v84 - v14;
  uint64_t v101 = AssociatedTypeWitness;
  uint64_t v98 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v86 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  Swift::String v91 = (char *)&v84 - v19;
  uint64_t v97 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v96 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a2 + 16);
  double v24 = MEMORY[0x1F4188790](v23);
  (*(void (**)(char *, char *, uint64_t, double))(v26 + 16))((char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v22, v24);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t v94 = a1;
  if (v27)
  {
    id v100 = v15;
    id v29 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
    uint64_t v30 = v108;
    uint64_t v31 = v109;
    __swift_project_boxed_opaque_existential_1(&v107, v108);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(a1, v30, v31);
    if (!v3)
    {
      char v37 = (char *)v32;
      char v38 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
      uint64_t v5 = v29;
      uint64_t v28 = MEMORY[0x1E4FBC860];
      if (v38)
      {
LABEL_17:
        long long v85 = v37;
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v96, &v5[*(int *)(a2 + 68)], v10);
        int v43 = swift_dynamicCast();
        uint64_t v44 = v101;
        if (v43)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
          uint64_t v45 = v108;
          uint64_t v46 = v109;
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          unint64_t v54 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v94, v45, v46);
          char v56 = v55;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          uint64_t v84 = v5;
          if (v56)
          {
            LOBYTE(v107) = 1;
            char v58 = v54;
            uint64_t v59 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            uint64_t v60 = self;
            id v61 = objc_msgSend(v60, sel_expressionForConstantValue_, v59);
            swift_unknownObjectRelease();
            LOBYTE(v107) = 0;
            id v62 = objc_msgSend(v60, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            id v100 = (char *)objc_msgSend(v60, sel_expressionForConditional_trueExpression_falseExpression_, v58, v61, v62);
          }
          else
          {
            id v100 = v54;
          }
          uint64_t v49 = v98;
        }
        else
        {
          uint64_t v106 = 0;
          long long v104 = 0u;
          long long v105 = 0u;
          outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for ConvertibleExpression?);
          *(void *)&long long v107 = v28;
          unint64_t v47 = v100;
          (*(void (**)(long long *, uint64_t))(v95 + 16))(&v107, v10);
          uint64_t v49 = v98;
          uint64_t v50 = v101;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v47, 0, 1, v101);
          uint64_t v51 = v91;
          uint64_t v52 = v47;
          uint64_t v44 = v50;
          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v91, v52, v50);
          uint64_t v103 = v50;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v102);
          (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(boxed_opaque_existential_1, v51, v50);
          _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          id v35 = v85;
          if (!*((void *)&v105 + 1))
          {
            (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v44);
            outlined destroy of Any?((uint64_t)&v104, (uint64_t *)&demangling cache variable for type metadata for Any?);
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            unsigned char *v48 = 2;
            swift_willThrow();
            goto LABEL_31;
          }
          uint64_t v84 = v5;
          outlined init with take of Any(&v104, &v107);
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          uint64_t v57 = _bridgeAnythingToObjectiveC<A>(_:)();
          id v100 = (char *)objc_msgSend(self, sel_expressionForConstantValue_, v57);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v44);
        }
        uint64_t v63 = v90;
        uint64_t v64 = v94;
        (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v88, &v84[*(int *)(a2 + 72)], v90);
        if (swift_dynamicCast())
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
          uint64_t v65 = v108;
          uint64_t v66 = v109;
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          id v73 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v64, v65, v66);
          char v75 = v74;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          if (v75)
          {
            LOBYTE(v107) = 1;
            id v76 = v73;
            uint64_t v77 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            uint64_t v78 = self;
            id v79 = objc_msgSend(v78, sel_expressionForConstantValue_, v77);
            swift_unknownObjectRelease();
            LOBYTE(v107) = 0;
            id v80 = objc_msgSend(v78, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            id v73 = objc_msgSend(v78, sel_expressionForConditional_trueExpression_falseExpression_, v76, v79, v80);
          }
          goto LABEL_37;
        }
        uint64_t v106 = 0;
        long long v104 = 0u;
        long long v105 = 0u;
        outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for ConvertibleExpression?);
        *(void *)&long long v107 = MEMORY[0x1E4FBC860];
        uint64_t v67 = v87;
        (*(void (**)(long long *, uint64_t))(*(void *)(a2 + 56) + 16))(&v107, v63);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v67, 0, 1, v44);
        Swift::String v68 = v86;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v86, v67, v44);
        uint64_t v103 = v44;
        Swift::String v69 = __swift_allocate_boxed_opaque_existential_1(v102);
        (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(v69, v68, v44);
        _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
        if (*((void *)&v105 + 1))
        {
          outlined init with take of Any(&v104, &v107);
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          uint64_t v81 = _bridgeAnythingToObjectiveC<A>(_:)();
          id v73 = objc_msgSend(self, sel_expressionForConstantValue_, v81);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v68, v44);

LABEL_37:
          long long v82 = v85;
          long long v83 = v100;
          id v35 = (char *)objc_msgSend(self, sel_expressionForConditional_trueExpression_falseExpression_, v85, v100, v73);

          return v35;
        }
        (*(void (**)(char *, uint64_t))(v49 + 8))(v68, v44);
        outlined destroy of Any?((uint64_t)&v104, (uint64_t *)&demangling cache variable for type metadata for Any?);
        id v35 = v100;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        unsigned char *v70 = 2;
        uint64_t v71 = v85;
        swift_willThrow();

LABEL_31:
        return v35;
      }
LABEL_16:
      LOBYTE(v107) = 1;
      id v40 = v37;
      uint64_t v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v42 = objc_msgSend(self, sel_expressionForConstantValue_, v41);
      swift_unknownObjectRelease();
      char v37 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v40, v42, 0, 4, 0);

      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
    uint64_t v4 = 0;
    id v34 = v3;
    uint64_t v5 = v2;
    uint64_t v28 = MEMORY[0x1E4FBC860];
    uint64_t v15 = v100;
  }
  else
  {
    uint64_t v106 = 0;
    long long v104 = 0u;
    long long v105 = 0u;
    outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v34 = 0;
  }
  *(void *)&long long v107 = v28;
  id v35 = v5;
  (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t))(*(void *)(a2 + 40) + 16))(&v110, &v107, v22);
  if (!v4)
  {
    id v100 = v15;
    uint64_t v103 = MEMORY[0x1E4FBB390];
    LOBYTE(v102[0]) = v110 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    if (!*((void *)&v105 + 1))
    {
      outlined destroy of Any?((uint64_t)&v104, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v34) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined init with take of Any(&v104, &v107);
    __swift_project_boxed_opaque_existential_1(&v107, v108);
    uint64_t v39 = _bridgeAnythingToObjectiveC<A>(_:)();
    char v37 = (char *)objc_msgSend(self, sel_expressionForConstantValue_, v39);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);

    goto LABEL_16;
  }

  if (!v34)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v36 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v35;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Conditional<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Conditional.convert(state:)(a1, a2);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

id PredicateExpressions.NilCoalesce.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = a2[3];
  uint64_t v85 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v84 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v83 = (char *)&v82 - v8;
  uint64_t v90 = v6;
  uint64_t v87 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v86 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v82 - v14;
  uint64_t v95 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v89 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v93 = (char *)&v82 - v19;
  uint64_t v96 = a2;
  uint64_t v20 = a2[2];
  double v22 = MEMORY[0x1F4188790](v21);
  double v24 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16);
  uint64_t v97 = v3;
  v26(v24, v3, v20, v22);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t v92 = AssociatedTypeWitness;
  uint64_t v88 = a1;
  if (v27)
  {
    uint64_t v94 = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
    uint64_t v30 = v104;
    uint64_t v29 = v105;
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    id v31 = v106;
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(a1, v30, v29);
    id v34 = v31;
    if (!v31)
    {
      id v47 = (id)v32;
      char v48 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      if (v48)
      {
        LOBYTE(v103) = 1;
        id v49 = v47;
        uint64_t v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v51 = self;
        id v52 = objc_msgSend(v51, sel_expressionForConstantValue_, v50);
        swift_unknownObjectRelease();
        LOBYTE(v103) = 0;
        id v53 = objc_msgSend(v51, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v47 = objc_msgSend(v51, sel_expressionForConditional_trueExpression_falseExpression_, v49, v52, v53);
      }
      uint64_t v54 = v90;
      char v55 = v89;
      uint64_t v56 = v88;
      char v38 = v96;
      uint64_t v37 = v97;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    id v35 = 0;
    uint64_t v36 = v34;
    uint64_t v11 = v94;
    char v38 = v96;
    uint64_t v37 = v97;
  }
  else
  {
    uint64_t v102 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v36 = 0;
    char v38 = v96;
    uint64_t v37 = v97;
    id v35 = v106;
  }
  *(void *)&long long v103 = v28;
  (*(void (**)(long long *, uint64_t))(v38[4] + 16))(&v103, v20);
  if (!v35)
  {
    uint64_t v42 = v95;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v15, 0, 1, v11);
    int v43 = v93;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v93, v15, v11);
    uint64_t v99 = v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
    uint64_t v45 = *(void (**)(uint64_t *, char *, uint64_t))(v42 + 16);
    uint64_t v94 = v11;
    v45(boxed_opaque_existential_1, v43, v11);
    _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    uint64_t v57 = v36;
    if (!*((void *)&v101 + 1))
    {
      uint64_t v46 = *(void (**)(char *, uint64_t))(v42 + 8);
      id v39 = (id)(v42 + 8);
      v46(v43, v94);
      outlined destroy of Any?((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v36) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined init with take of Any(&v100, &v103);
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    uint64_t v58 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v47 = objc_msgSend(self, sel_expressionForConstantValue_, v58);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v94);

    uint64_t v54 = v90;
    char v55 = v89;
    uint64_t v56 = v88;
LABEL_17:
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v37 + *((int *)v38 + 13), v54);
    if (swift_dynamicCast())
    {
      id v106 = v47;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
      uint64_t v59 = v104;
      uint64_t v60 = v105;
      __swift_project_boxed_opaque_existential_1(&v103, v104);
      id v67 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v56, v59, v60);
      char v69 = v68;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      if (v69)
      {
        LOBYTE(v103) = 1;
        id v70 = v67;
        uint64_t v71 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v72 = self;
        id v73 = objc_msgSend(v72, sel_expressionForConstantValue_, v71);
        swift_unknownObjectRelease();
        LOBYTE(v103) = 0;
        id v74 = objc_msgSend(v72, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v67 = objc_msgSend(v72, sel_expressionForConditional_trueExpression_falseExpression_, v70, v73, v74);
      }
      id v47 = v106;
    }
    else
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
      id v39 = 0;
      *(void *)&long long v103 = MEMORY[0x1E4FBC860];
      (*(void (**)(long long *, uint64_t))(v85 + 16))(&v103, v54);
      uint64_t v61 = v84;
      uint64_t v62 = v92;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v55, 0, 1, v92);
      uint64_t v63 = v83;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v83, v55, v62);
      uint64_t v99 = v62;
      uint64_t v64 = __swift_allocate_boxed_opaque_existential_1(v98);
      (*(void (**)(uint64_t *, char *, uint64_t))(v61 + 16))(v64, v63, v62);
      _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
      if (!*((void *)&v101 + 1))
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(v83, v92);
        outlined destroy of Any?((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v65 = 2;
        swift_willThrow();

        return v39;
      }
      outlined init with take of Any(&v100, &v103);
      __swift_project_boxed_opaque_existential_1(&v103, v104);
      uint64_t v75 = _bridgeAnythingToObjectiveC<A>(_:)();
      uint64_t v76 = v61;
      id v67 = objc_msgSend(self, sel_expressionForConstantValue_, v75);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v83, v92);
    }
    uint64_t v77 = self;
    id v78 = v47;
    id v79 = objc_msgSend(v77, sel_expressionForConstantValue_, 0);
    id v80 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v78, v79, 0, 5, 0);

    id v81 = v80;
    id v39 = objc_msgSend(v77, sel_expressionForConditional_trueExpression_falseExpression_, v81, v78, v67);

    return v39;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v15, 1, 1, v11);
  id v40 = *(void (**)(char *, uint64_t))(v13 + 8);
  id v39 = (id)(v13 + 8);
  v40(v15, v12);
  if (!v36)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v41 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v39;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NilCoalesce<A, B>(uint64_t a1, void *a2)
{
  id result = PredicateExpressions.NilCoalesce.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.OptionalFlatMap.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v5 = a2[4];
  uint64_t v118 = a2[7];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v116 = type metadata accessor for Optional();
  uint64_t v115 = *(void *)(v116 - 8);
  MEMORY[0x1F4188790](v116);
  uint64_t v125 = (char *)&v112 - v7;
  uint64_t v119 = AssociatedTypeWitness;
  uint64_t v126 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v117 = (char *)&v112 - v9;
  uint64_t v124 = v5;
  uint64_t v10 = v5;
  uint64_t v11 = v2;
  uint64_t v122 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v12);
  long long v121 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v128 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  uint64_t v17 = (char *)&v112 - v16;
  uint64_t v18 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v127 = (char *)&v112 - v20;
  uint64_t v138 = a2;
  uint64_t v21 = a2[2];
  double v23 = MEMORY[0x1F4188790](v22);
  (*(void (**)(char *, char *, uint64_t, double))(v25 + 16))((char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v21, v23);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v26 = swift_dynamicCast();
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v123 = a1;
  if (!v26)
  {
    uint64_t v134 = 0;
    long long v132 = 0u;
    long long v133 = 0u;
    outlined destroy of Any?((uint64_t)&v132, &demangling cache variable for type metadata for ConvertibleExpression?);
    char v33 = 0;
    id v34 = v129;
    goto LABEL_5;
  }
  uint64_t v114 = v11;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v132, (uint64_t)&v135);
  uint64_t v29 = v136;
  uint64_t v28 = v137;
  __swift_project_boxed_opaque_existential_1(&v135, v136);
  id v30 = v129;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, v29, v28);
  char v33 = v30;
  if (v30)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
    id v34 = 0;
    uint64_t v11 = v114;
    uint64_t v27 = MEMORY[0x1E4FBC860];
LABEL_5:
    *(void *)&long long v135 = v27;
    (*(void (**)(long long *, uint64_t))(v138[6] + 16))(&v135, v21);
    if (v34)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, v14);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v128);
      if (v33)
      {
LABEL_8:
        swift_willThrow();
        return (uint64_t)v11;
      }
LABEL_7:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *id v35 = 2;
      goto LABEL_8;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v14);
    uint64_t v36 = v127;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v127, v17, v14);
    uint64_t v131 = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v130);
    (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 16))(boxed_opaque_existential_1, v36, v14);
    _expressionCompatibleValue(for:)((uint64_t)v130, (uint64_t)&v132);
    uint64_t v113 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
    if (!*((void *)&v133 + 1))
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v36, v14);
      outlined destroy of Any?((uint64_t)&v132, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined init with take of Any(&v132, &v135);
    __swift_project_boxed_opaque_existential_1(&v135, v136);
    uint64_t v49 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v38 = objc_msgSend(self, sel_expressionForConstantValue_, v49);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v36, v14);

    uint64_t v46 = v125;
    uint64_t v45 = v126;
    uint64_t v47 = v124;
    uint64_t v48 = v123;
    goto LABEL_17;
  }
  id v38 = (id)v31;
  char v39 = v32;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
  uint64_t v113 = 0;
  if (v39)
  {
    LOBYTE(v135) = 1;
    id v40 = v38;
    uint64_t v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    uint64_t v42 = self;
    id v43 = objc_msgSend(v42, sel_expressionForConstantValue_, v41);
    swift_unknownObjectRelease();
    LOBYTE(v135) = 0;
    id v44 = objc_msgSend(v42, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    id v38 = objc_msgSend(v42, sel_expressionForConditional_trueExpression_falseExpression_, v40, v43, v44);
  }
  uint64_t v46 = v125;
  uint64_t v45 = v126;
  uint64_t v47 = v124;
  uint64_t v48 = v123;
  uint64_t v11 = v114;
LABEL_17:
  uint64_t v50 = *(void *)&v11[*((int *)v138 + 18)];
  id v129 = v38;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v135 = *(void *)(v48 + 8);
  uint64_t v52 = v135;
  *(void *)(v48 + 8) = 0x8000000000000000;
  uint64_t v128 = v50;
  unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
  uint64_t v55 = *(void *)(v52 + 16);
  BOOL v56 = (v53 & 1) == 0;
  uint64_t v57 = v55 + v56;
  if (__OFADD__(v55, v56))
  {
    __break(1u);
  }
  else
  {
    LODWORD(v50) = v53;
    if (*(void *)(v52 + 24) < v57)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
      uint64_t v58 = v135;
      uint64_t v59 = v128;
      uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v128);
      if ((v50 & 1) != (v61 & 1)) {
        goto LABEL_82;
      }
      unint64_t v54 = v60;
      if (v50) {
        goto LABEL_21;
      }
LABEL_24:
      uint64_t v66 = v59;
      id v67 = v129;
      specialized _NativeDictionary._insert(at:key:value:)(v54, v66, (uint64_t)v129, (void *)v58);
      id v65 = v67;
LABEL_25:
      uint64_t v68 = v122;
      *(void *)(v48 + 8) = v58;

      swift_bridgeObjectRelease();
      v11 += *((int *)v138 + 17);
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v121, v11, v47);
      if (swift_dynamicCast())
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v132, (uint64_t)&v135);
        uint64_t v69 = v136;
        uint64_t v70 = v137;
        __swift_project_boxed_opaque_existential_1(&v135, v136);
        uint64_t v71 = v113;
        uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v48, v69, v70);
        id v74 = v71;
        if (!v71)
        {
          id v81 = (id)v72;
          char v82 = v73;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
          if (v82)
          {
            LOBYTE(v135) = 1;
            id v83 = v81;
            uint64_t v84 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            uint64_t v85 = self;
            id v86 = objc_msgSend(v85, sel_expressionForConstantValue_, v84);
            swift_unknownObjectRelease();
            LOBYTE(v135) = 0;
            id v87 = objc_msgSend(v85, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            id v81 = objc_msgSend(v85, sel_expressionForConditional_trueExpression_falseExpression_, v83, v86, v87);
          }
          goto LABEL_41;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
        uint64_t v75 = 0;
        uint64_t v76 = v74;
      }
      else
      {
        uint64_t v134 = 0;
        long long v132 = 0u;
        long long v133 = 0u;
        outlined destroy of Any?((uint64_t)&v132, &demangling cache variable for type metadata for ConvertibleExpression?);
        uint64_t v76 = 0;
        uint64_t v75 = v113;
      }
      *(void *)&long long v135 = MEMORY[0x1E4FBC860];
      (*(void (**)(long long *, uint64_t))(v118 + 16))(&v135, v47);
      if (v75)
      {

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, 1, 1, v119);
        (*(void (**)(char *, uint64_t))(v115 + 8))(v46, v116);
        if (v76) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      uint64_t v77 = v119;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v119);
      uint64_t v11 = v117;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v117, v46, v77);
      uint64_t v131 = v77;
      id v78 = __swift_allocate_boxed_opaque_existential_1(v130);
      (*(void (**)(uint64_t *, char *, uint64_t))(v45 + 16))(v78, v11, v77);
      _expressionCompatibleValue(for:)((uint64_t)v130, (uint64_t)&v132);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
      if (!*((void *)&v133 + 1))
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v117, v77);
        outlined destroy of Any?((uint64_t)&v132, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v76) {
          goto LABEL_35;
        }
LABEL_34:
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        unsigned char *v79 = 2;
LABEL_35:
        swift_willThrow();

        return (uint64_t)v11;
      }
      outlined init with take of Any(&v132, &v135);
      __swift_project_boxed_opaque_existential_1(&v135, v136);
      uint64_t v88 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v81 = objc_msgSend(self, sel_expressionForConstantValue_, v88);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v117, v77);

LABEL_41:
      uint64_t v89 = self;
      id v90 = v129;
      id v91 = objc_msgSend(v89, sel_expressionForConstantValue_, 0);
      id v92 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v90, v91, 0, 5, 0);

      id v93 = v92;
      id v94 = objc_msgSend(v89, sel_expressionForConstantValue_, 0);
      uint64_t v11 = (char *)objc_msgSend(v89, sel_expressionForConditional_trueExpression_falseExpression_, v93, v81, v94);

      return (uint64_t)v11;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v58 = v52;
      uint64_t v59 = v128;
      if ((v53 & 1) == 0) {
        goto LABEL_24;
      }
LABEL_21:
      uint64_t v62 = *(void *)(v58 + 56);
      uint64_t v63 = v11;
      uint64_t v64 = 8 * v54;

      id v65 = v129;
      *(void *)(v62 + v64) = v129;
      uint64_t v11 = v63;
      goto LABEL_25;
    }
  }
  unint64_t v112 = v54;
  LODWORD(v127) = v50;
  uint64_t v114 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  uint64_t v95 = static _DictionaryStorage.copy(original:)();
  uint64_t v58 = v95;
  if (!*(void *)(v52 + 16))
  {
LABEL_78:
    swift_bridgeObjectRelease();
    uint64_t v46 = v125;
    uint64_t v45 = v126;
    uint64_t v47 = v124;
    uint64_t v11 = v114;
    uint64_t v59 = v128;
    unint64_t v54 = v112;
    if ((v127 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  uint64_t v96 = (void *)(v95 + 64);
  uint64_t v97 = v52 + 64;
  unint64_t v98 = (unint64_t)((1 << *(unsigned char *)(v58 + 32)) + 63) >> 6;
  if (v58 != v52 || (unint64_t)v96 >= v97 + 8 * v98) {
    memmove(v96, (const void *)(v52 + 64), 8 * v98);
  }
  int64_t v99 = 0;
  *(void *)(v58 + 16) = *(void *)(v52 + 16);
  uint64_t v100 = 1 << *(unsigned char *)(v52 + 32);
  uint64_t v101 = -1;
  if (v100 < 64) {
    uint64_t v101 = ~(-1 << v100);
  }
  unint64_t v102 = v101 & *(void *)(v52 + 64);
  int64_t v103 = (unint64_t)(v100 + 63) >> 6;
  while (1)
  {
    if (v102)
    {
      unint64_t v104 = __clz(__rbit64(v102));
      v102 &= v102 - 1;
      unint64_t v105 = v104 | (v99 << 6);
      goto LABEL_51;
    }
    if (__OFADD__(v99++, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v99 >= v103) {
      goto LABEL_78;
    }
    unint64_t v110 = *(void *)(v97 + 8 * v99);
    if (!v110) {
      break;
    }
LABEL_73:
    unint64_t v102 = (v110 - 1) & v110;
    unint64_t v105 = __clz(__rbit64(v110)) + (v99 << 6);
LABEL_51:
    uint64_t v106 = 8 * v105;
    long long v107 = *(void **)(*(void *)(v52 + 56) + v106);
    *(void *)(*(void *)(v58 + 48) + v106) = *(void *)(*(void *)(v52 + 48) + v106);
    *(void *)(*(void *)(v58 + 56) + v106) = v107;
    id v108 = v107;
  }
  int64_t v111 = v99 + 1;
  if (v99 + 1 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110) {
    goto LABEL_72;
  }
  int64_t v111 = v99 + 2;
  if (v99 + 2 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110) {
    goto LABEL_72;
  }
  int64_t v111 = v99 + 3;
  if (v99 + 3 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110) {
    goto LABEL_72;
  }
  int64_t v111 = v99 + 4;
  if (v99 + 4 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110) {
    goto LABEL_72;
  }
  int64_t v111 = v99 + 5;
  if (v99 + 5 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110) {
    goto LABEL_72;
  }
  int64_t v111 = v99 + 6;
  if (v99 + 6 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110) {
    goto LABEL_72;
  }
  int64_t v111 = v99 + 7;
  if (v99 + 7 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110) {
    goto LABEL_72;
  }
  int64_t v111 = v99 + 8;
  if (v99 + 8 >= v103) {
    goto LABEL_78;
  }
  unint64_t v110 = *(void *)(v97 + 8 * v111);
  if (v110)
  {
LABEL_72:
    int64_t v99 = v111;
    goto LABEL_73;
  }
  while (1)
  {
    int64_t v99 = v111 + 1;
    if (__OFADD__(v111, 1)) {
      break;
    }
    if (v99 >= v103) {
      goto LABEL_78;
    }
    unint64_t v110 = *(void *)(v97 + 8 * v99);
    ++v111;
    if (v110) {
      goto LABEL_73;
    }
  }
LABEL_81:
  __break(1u);
LABEL_82:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.OptionalFlatMap.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

id PredicateExpressions.CollectionIndexSubscript<>.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v96 = a1;
  uint64_t v3 = v2;
  uint64_t v5 = a2[3];
  uint64_t v85 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v82 = type metadata accessor for Optional();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  id v90 = (char *)&v80 - v7;
  uint64_t v84 = AssociatedTypeWitness;
  uint64_t v91 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  id v83 = (char *)&v80 - v9;
  uint64_t v89 = v5;
  uint64_t v87 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v10);
  id v86 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a2[4];
  uint64_t v88 = a2;
  uint64_t v13 = a2[2];
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v94 = *(void *)(v15 - 8);
  uint64_t v95 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v80 - v16;
  uint64_t v18 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v19);
  id v93 = (char *)&v80 - v20;
  uint64_t v21 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_182106040;
  int v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v106 = v3;
  v26(v24, v3, v13);
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  if (v27)
  {
    uint64_t v80 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
    uint64_t v30 = v104;
    uint64_t v29 = v105;
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    uint64_t v31 = v97;
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v96, v30, v29);
    id v34 = v31;
    if (!v31)
    {
      id v41 = (id)v32;
      char v42 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      uint64_t v97 = 0;
      if (v42)
      {
        LOBYTE(v103) = 1;
        id v43 = v41;
        uint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v45 = self;
        id v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v103) = 0;
        id v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v41 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);
      }
      uint64_t v25 = v80;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    id v35 = 0;
    uint64_t v36 = v34;
    uint64_t v25 = v80;
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v102 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v36 = 0;
    id v35 = v97;
  }
  *(void *)&long long v103 = v28;
  (*(void (**)(long long *, uint64_t, uint64_t))(v12 + 16))(&v103, v13, v12);
  id v37 = v35;
  if (!v35)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v14);
    char v39 = v93;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v93, v17, v14);
    uint64_t v99 = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 16))(boxed_opaque_existential_1, v39, v14);
    _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    if (!*((void *)&v101 + 1))
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v39, v14);
      outlined destroy of Any?((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v36) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    uint64_t v97 = 0;
    outlined init with take of Any(&v100, &v103);
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    uint64_t v48 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v41 = objc_msgSend(self, sel_expressionForConstantValue_, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v39, v14);

LABEL_17:
    uint64_t v49 = v91;
    uint64_t v50 = v90;
    uint64_t v51 = v89;
    uint64_t v52 = v96;
    int v53 = v88;
    uint64_t v54 = v87;
    uint64_t v55 = v86;
    uint64_t v96 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    *(void *)(v25 + 56) = v96;
    *(void *)(v25 + 32) = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v55, v106 + *((int *)v53 + 15), v51);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
      uint64_t v56 = v104;
      uint64_t v57 = v105;
      __swift_project_boxed_opaque_existential_1(&v103, v104);
      uint64_t v58 = v97;
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v52, v56, v57);
      char v61 = v58;
      if (!v58)
      {
        id v69 = (id)v59;
        char v70 = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
        if (v70)
        {
          LOBYTE(v103) = 1;
          id v71 = v69;
          uint64_t v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          char v73 = self;
          id v74 = objc_msgSend(v73, sel_expressionForConstantValue_, v72);
          swift_unknownObjectRelease();
          LOBYTE(v103) = 0;
          id v75 = objc_msgSend(v73, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          id v69 = objc_msgSend(v73, sel_expressionForConditional_trueExpression_falseExpression_, v71, v74, v75);
        }
        goto LABEL_34;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      uint64_t v62 = 0;
      uint64_t v63 = v61;
    }
    else
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v63 = 0;
      uint64_t v62 = v97;
    }
    *(void *)&long long v103 = MEMORY[0x1E4FBC860];
    (*(void (**)(long long *, uint64_t))(v85 + 16))(&v103, v51);
    if (v62)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, 1, 1, v84);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v50, v82);
      id v37 = (id)(v25 + 32);
      if (v63) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    uint64_t v64 = v84;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v84);
    id v65 = v83;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v83, v50, v64);
    uint64_t v99 = v64;
    uint64_t v66 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(v66, v65, v64);
    _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    if (!*((void *)&v101 + 1))
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v83, v64);
      outlined destroy of Any?((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for Any?);
      id v37 = (id)(v25 + 32);
      if (v63) {
        goto LABEL_27;
      }
LABEL_26:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      unsigned char *v67 = 2;
LABEL_27:
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      goto LABEL_28;
    }
    outlined init with take of Any(&v100, &v103);
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    uint64_t v76 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v77 = v64;
    id v69 = objc_msgSend(self, sel_expressionForConstantValue_, v76);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v83, v77);

LABEL_34:
    *(void *)(v25 + 88) = v96;
    *(void *)(v25 + 64) = v69;
    uint64_t v78 = String._bridgeToObjectiveCImpl()();
    uint64_t v79 = _ContiguousArrayBuffer._asCocoaArray()();
    id v37 = objc_msgSend(self, sel_expressionForFunction_arguments_, v78, v79);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v37;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, v14);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v17, v95);
  if (!v36)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v38 = 2;
  }
LABEL_8:
  swift_willThrow();
LABEL_28:
  *(void *)(v25 + 16) = 0;
  swift_release();
  return v37;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, void *a2)
{
  id result = PredicateExpressions.CollectionIndexSubscript<>.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

id PredicateExpressions.DictionaryKeySubscript.convert(state:)(uint64_t a1, uint64_t a2)
{
  id v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v62 = *(void *)(a2 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = type metadata accessor for Optional();
  v59[1] = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  id v67 = (char *)v59 - v10;
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  v59[0] = (char *)v59 - v12;
  uint64_t v66 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v13);
  id v65 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_182106040;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v5, v15);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v20 = swift_dynamicCast();
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v63 = a1;
  if (v20)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v72, (uint64_t)&v75);
    uint64_t v22 = v76;
    uint64_t v23 = v77;
    __swift_project_boxed_opaque_existential_1(&v75, v76);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(a1, v22, v23);
    if (!v3)
    {
      id v30 = (id)v24;
      char v31 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
      if (v31)
      {
        LOBYTE(v75) = 1;
        id v32 = v30;
        uint64_t v33 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v34 = self;
        id v35 = objc_msgSend(v34, sel_expressionForConstantValue_, v33);
        swift_unknownObjectRelease();
        LOBYTE(v75) = 0;
        id v36 = objc_msgSend(v34, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v30 = objc_msgSend(v34, sel_expressionForConditional_trueExpression_falseExpression_, v32, v35, v36);
      }
      int v27 = (void *)v69;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    id v4 = 0;
    int v26 = v3;
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v74 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    outlined destroy of Any?((uint64_t)&v72, &demangling cache variable for type metadata for ConvertibleExpression?);
    int v26 = 0;
  }
  *(void *)&long long v75 = v21;
  (*(void (**)(void **__return_ptr, long long *, uint64_t))(*(void *)(a2 + 40) + 16))(&v78, &v75, v15);
  if (v4)
  {

    int v27 = (void *)v69;
LABEL_10:
    if (!v26)
    {
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *uint64_t v28 = 2;
    }
    swift_willThrow();
    goto LABEL_13;
  }
  id v4 = v78;
  int v27 = (void *)v69;
  if (!v78) {
    goto LABEL_10;
  }
  uint64_t v71 = type metadata accessor for Dictionary();
  v70[0] = (uint64_t)v4;
  swift_bridgeObjectRetain();
  _expressionCompatibleValue(for:)((uint64_t)v70, (uint64_t)&v72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  if (!*((void *)&v73 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v72, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  outlined init with take of Any(&v72, &v75);
  __swift_project_boxed_opaque_existential_1(&v75, v76);
  uint64_t v41 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v30 = objc_msgSend(self, sel_expressionForConstantValue_, v41);
  int v27 = (void *)v69;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
  swift_bridgeObjectRelease();

LABEL_18:
  uint64_t v37 = v63;
  uint64_t v69 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  v27[7] = v69;
  void v27[4] = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v5 + *(int *)(a2 + 68), v8);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v72, (uint64_t)&v75);
    uint64_t v38 = v76;
    uint64_t v39 = v77;
    __swift_project_boxed_opaque_existential_1(&v75, v76);
    id v48 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v37, v38, v39);
    char v50 = v49;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    if (v50)
    {
      LOBYTE(v75) = 1;
      id v51 = v48;
      uint64_t v52 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      int v53 = self;
      id v54 = objc_msgSend(v53, sel_expressionForConstantValue_, v52);
      swift_unknownObjectRelease();
      LOBYTE(v75) = 0;
      id v55 = objc_msgSend(v53, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v48 = objc_msgSend(v53, sel_expressionForConditional_trueExpression_falseExpression_, v51, v54, v55);
    }
    goto LABEL_28;
  }
  uint64_t v74 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  outlined destroy of Any?((uint64_t)&v72, &demangling cache variable for type metadata for ConvertibleExpression?);
  id v40 = v67;
  *(void *)&long long v75 = MEMORY[0x1E4FBC860];
  (*(void (**)(long long *, uint64_t))(v62 + 16))(&v75, v8);
  uint64_t v42 = v61;
  uint64_t v43 = v68;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v40, 0, 1, v68);
  uint64_t v44 = v40;
  uint64_t v45 = v59[0];
  (*(void (**)(void, char *, uint64_t))(v42 + 32))(v59[0], v44, v43);
  uint64_t v71 = v43;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v70);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v42 + 16))(boxed_opaque_existential_1, v45, v43);
  _expressionCompatibleValue(for:)((uint64_t)v70, (uint64_t)&v72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  if (*((void *)&v73 + 1))
  {
    outlined init with take of Any(&v72, &v75);
    __swift_project_boxed_opaque_existential_1(&v75, v76);
    uint64_t v56 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v48 = objc_msgSend(self, sel_expressionForConstantValue_, v56);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v43);

LABEL_28:
    v27[11] = v69;
    _OWORD v27[8] = v48;
    uint64_t v57 = String._bridgeToObjectiveCImpl()();
    uint64_t v58 = _ContiguousArrayBuffer._asCocoaArray()();
    id v4 = objc_msgSend(self, sel_expressionForFunction_arguments_, v57, v58);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v4;
  }
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v43);
  outlined destroy of Any?((uint64_t)&v72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  id v4 = v27 + 4;
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *id v47 = 2;
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v27 + 4));
LABEL_13:
  v27[2] = 0;
  swift_release();
  return v4;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.DictionaryKeySubscript.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

char *PredicateExpressions.CollectionContainsCollection<>.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v93 = a1;
  uint64_t v4 = a2[3];
  uint64_t v82 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v79 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v88 = (char *)&v77 - v7;
  uint64_t v81 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v78 = (char *)&v77 - v9;
  uint64_t v10 = a2[4];
  id v86 = a2;
  uint64_t v11 = a2[2];
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v91 = *(void *)(v13 - 8);
  id v92 = (id)v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v77 - v14;
  uint64_t v94 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v16);
  id v90 = (char *)&v77 - v17;
  uint64_t v87 = v4;
  uint64_t v18 = v4;
  uint64_t v19 = v2;
  uint64_t v85 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v84 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  (*(void (**)(char *, char *, uint64_t, double))(v25 + 16))((char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v11, v23);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v26 = swift_dynamicCast();
  int v27 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v89 = AssociatedTypeWitness;
  if (v26)
  {
    uint64_t v80 = v2;
    uint64_t v77 = v6;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v97, (uint64_t)&v100);
    uint64_t v29 = v101;
    uint64_t v28 = v102;
    __swift_project_boxed_opaque_existential_1(&v100, v101);
    id v30 = v103;
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v93, v29, v28);
    uint64_t v33 = v30;
    if (!v30)
    {
      uint64_t v41 = (void *)v31;
      char v42 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      long long v103 = 0;
      if (v42)
      {
        LOBYTE(v100) = 1;
        id v49 = v41;
        uint64_t v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v51 = self;
        id v52 = objc_msgSend(v51, sel_expressionForConstantValue_, v50);
        swift_unknownObjectRelease();
        LOBYTE(v100) = 0;
        id v53 = objc_msgSend(v51, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v92 = objc_msgSend(v51, sel_expressionForConditional_trueExpression_falseExpression_, v49, v52, v53);
      }
      else
      {
        id v92 = v41;
      }
      uint64_t v46 = v89;
      uint64_t v44 = v88;
      uint64_t v45 = v87;
      uint64_t v47 = v93;
      id v48 = v86;
      id v36 = (char *)MEMORY[0x1E4FBC860];
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
    id v34 = 0;
    id v35 = v33;
    uint64_t v6 = v77;
    uint64_t v19 = v80;
  }
  else
  {
    uint64_t v99 = 0;
    long long v97 = 0u;
    long long v98 = 0u;
    outlined destroy of Any?((uint64_t)&v97, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v35 = 0;
    id v34 = v103;
  }
  *(void *)&long long v100 = v27;
  id v36 = v19;
  (*(void (**)(long long *, uint64_t, uint64_t))(v10 + 16))(&v100, v11, v10);
  if (!v34)
  {
    id v36 = v27;
    uint64_t v38 = v94;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v15, 0, 1, v12);
    uint64_t v39 = v90;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v90, v15, v12);
    uint64_t v96 = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v95);
    (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(boxed_opaque_existential_1, v39, v12);
    _expressionCompatibleValue(for:)((uint64_t)v95, (uint64_t)&v97);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    if (!*((void *)&v98 + 1))
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v12);
      outlined destroy of Any?((uint64_t)&v97, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v35) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    long long v103 = 0;
    uint64_t v80 = v19;
    uint64_t v77 = v6;
    outlined init with take of Any(&v97, &v100);
    __swift_project_boxed_opaque_existential_1(&v100, v101);
    uint64_t v43 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v92 = objc_msgSend(self, sel_expressionForConstantValue_, v43);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v12);

    uint64_t v44 = v88;
    uint64_t v45 = v87;
    uint64_t v46 = v89;
    uint64_t v47 = v93;
    id v48 = v86;
LABEL_18:
    id v54 = &v80[*((int *)v48 + 19)];
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v84, v54, v45);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v97, (uint64_t)&v100);
      uint64_t v55 = v101;
      uint64_t v56 = v102;
      __swift_project_boxed_opaque_existential_1(&v100, v101);
      uint64_t v57 = v103;
      uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v47, v55, v56);
      uint64_t v60 = v57;
      if (!v57)
      {
        id v67 = (id)v58;
        char v68 = v59;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
        if (v68)
        {
          LOBYTE(v100) = 1;
          id v69 = v67;
          uint64_t v70 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          uint64_t v71 = self;
          id v72 = objc_msgSend(v71, sel_expressionForConstantValue_, v70);
          swift_unknownObjectRelease();
          LOBYTE(v100) = 0;
          id v73 = objc_msgSend(v71, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          id v67 = objc_msgSend(v71, sel_expressionForConditional_trueExpression_falseExpression_, v69, v72, v73);
        }
        uint64_t v74 = v92;
        goto LABEL_35;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      uint64_t v61 = 0;
    }
    else
    {
      uint64_t v99 = 0;
      long long v97 = 0u;
      long long v98 = 0u;
      outlined destroy of Any?((uint64_t)&v97, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v60 = 0;
      uint64_t v61 = v103;
    }
    *(void *)&long long v100 = v36;
    id v36 = v54;
    (*(void (**)(long long *, uint64_t))(v82 + 16))(&v100, v45);
    if (v61)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v44, 1, 1, v46);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v44, v77);
      uint64_t v62 = v92;
      if (v60) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    uint64_t v63 = v81;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v44, 0, 1, v46);
    id v36 = v78;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v78, v44, v46);
    uint64_t v96 = v46;
    uint64_t v64 = __swift_allocate_boxed_opaque_existential_1(v95);
    (*(void (**)(uint64_t *, char *, uint64_t))(v63 + 16))(v64, v36, v46);
    _expressionCompatibleValue(for:)((uint64_t)v95, (uint64_t)&v97);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    if (!*((void *)&v98 + 1))
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v46);
      outlined destroy of Any?((uint64_t)&v97, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v62 = v92;
      if (v60) {
        goto LABEL_28;
      }
LABEL_27:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *id v65 = 2;
LABEL_28:
      swift_willThrow();

      return v36;
    }
    outlined init with take of Any(&v97, &v100);
    __swift_project_boxed_opaque_existential_1(&v100, v101);
    long long v75 = v36;
    uint64_t v76 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v67 = objc_msgSend(self, sel_expressionForConstantValue_, v76);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v75, v46);

    uint64_t v74 = v92;
LABEL_35:
    id v36 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v74, v67, 0, 99, 0);

    return v36;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v15, 1, 1, v12);
  (*(void (**)(char *, id))(v91 + 8))(v15, v92);
  if (!v35)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v37 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v36;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void))PredicateExpressions.CollectionContainsCollection<>.convert(state:));
}

char *PredicateExpressions.SequenceStartsWith<>.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v90 = a1;
  uint64_t v3 = v2;
  uint64_t v5 = a2[3];
  uint64_t v80 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v85 = (char *)v75 - v8;
  uint64_t v79 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v77 = (char *)v75 - v10;
  uint64_t v84 = v5;
  uint64_t v82 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v81 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a2[4];
  uint64_t v83 = a2;
  uint64_t v14 = a2[2];
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v88 = *(void *)(v16 - 8);
  uint64_t v89 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v75 - v17;
  uint64_t v19 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v87 = (char *)v75 - v21;
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v27 = *(void (**)(char *, char *, uint64_t, double))(v26 + 16);
  long long v100 = v3;
  v27(v25, v3, v14, v23);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v29 = swift_dynamicCast();
  uint64_t v30 = MEMORY[0x1E4FBC860];
  uint64_t v86 = AssociatedTypeWitness;
  if (v29)
  {
    v75[1] = v28;
    uint64_t v76 = v7;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
    uint64_t v31 = v98;
    uint64_t v32 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    id v33 = v91;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v90, v31, v32);
    id v36 = v33;
    if (!v33)
    {
      uint64_t v41 = (void *)v34;
      char v42 = v35;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      if (v42)
      {
        LOBYTE(v97) = 1;
        id v52 = v41;
        uint64_t v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v54 = self;
        id v55 = objc_msgSend(v54, sel_expressionForConstantValue_, v53);
        swift_unknownObjectRelease();
        LOBYTE(v97) = 0;
        id v56 = objc_msgSend(v54, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v91 = objc_msgSend(v54, sel_expressionForConditional_trueExpression_falseExpression_, v52, v55, v56);
      }
      else
      {
        id v91 = v41;
      }
      uint64_t v47 = v86;
      uint64_t v44 = v85;
      uint64_t v45 = v84;
      uint64_t v46 = v90;
      id v48 = v100;
      id v49 = v83;
      uint64_t v50 = v82;
      id v51 = v81;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    uint64_t v37 = 0;
    uint64_t v7 = v76;
    uint64_t v30 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v96 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v36 = 0;
    uint64_t v37 = v91;
  }
  *(void *)&long long v97 = v30;
  uint64_t v38 = v100;
  (*(void (**)(long long *, uint64_t, uint64_t))(v13 + 16))(&v97, v14, v13);
  if (!v37)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, v15);
    uint64_t v38 = v87;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v87, v18, v15);
    uint64_t v93 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v92);
    (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 16))(boxed_opaque_existential_1, v38, v15);
    _expressionCompatibleValue(for:)((uint64_t)v92, (uint64_t)&v94);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    if (!*((void *)&v95 + 1))
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v38, v15);
      outlined destroy of Any?((uint64_t)&v94, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v36) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    uint64_t v76 = v7;
    outlined init with take of Any(&v94, &v97);
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    uint64_t v43 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v91 = objc_msgSend(self, sel_expressionForConstantValue_, v43);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v38, v15);

    uint64_t v44 = v85;
    uint64_t v45 = v84;
    uint64_t v46 = v90;
    uint64_t v47 = v86;
    id v48 = v100;
    id v49 = v83;
    uint64_t v50 = v82;
    id v51 = v81;
LABEL_18:
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v51, &v48[*((int *)v49 + 19)], v45);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
      uint64_t v57 = v98;
      uint64_t v58 = v99;
      __swift_project_boxed_opaque_existential_1(&v97, v98);
      id v64 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v46, v57, v58);
      char v66 = v65;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      if (v66)
      {
        LOBYTE(v97) = 1;
        id v67 = v64;
        uint64_t v68 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v69 = self;
        id v70 = objc_msgSend(v69, sel_expressionForConstantValue_, v68);
        swift_unknownObjectRelease();
        LOBYTE(v97) = 0;
        id v71 = objc_msgSend(v69, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v64 = objc_msgSend(v69, sel_expressionForConditional_trueExpression_falseExpression_, v67, v70, v71);
      }
    }
    else
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(void *)&long long v97 = MEMORY[0x1E4FBC860];
      (*(void (**)(long long *, uint64_t))(v80 + 16))(&v97, v45);
      uint64_t v59 = v79;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v44, 0, 1, v47);
      uint64_t v38 = v77;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v77, v44, v47);
      uint64_t v93 = v47;
      uint64_t v60 = __swift_allocate_boxed_opaque_existential_1(v92);
      (*(void (**)(uint64_t *, char *, uint64_t))(v59 + 16))(v60, v38, v47);
      _expressionCompatibleValue(for:)((uint64_t)v92, (uint64_t)&v94);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
      if (!*((void *)&v95 + 1))
      {
        (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v47);
        outlined destroy of Any?((uint64_t)&v94, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v61 = v91;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v62 = 2;
        swift_willThrow();

        return v38;
      }
      outlined init with take of Any(&v94, &v97);
      __swift_project_boxed_opaque_existential_1(&v97, v98);
      id v72 = v38;
      uint64_t v73 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v64 = objc_msgSend(self, sel_expressionForConstantValue_, v73);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v72, v47);
    }
    uint64_t v74 = v91;
    uint64_t v38 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v91, v64, 0, 8, 0);

    return v38;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, 1, 1, v15);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v18, v89);
  if (!v36)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v39 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v38;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void))PredicateExpressions.SequenceStartsWith<>.convert(state:));
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, void))
{
  uint64_t result = a4(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
  if (v4) {
    return v6;
  }
  return result;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NilLiteral<A>()
{
  return objc_msgSend(self, sel_expressionForConstantValue_, 0);
}

id PredicateExpressions.StringContainsRegex.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v95 = a1;
  uint64_t v3 = v2;
  uint64_t v5 = a2[3];
  uint64_t v84 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v82 = type metadata accessor for Optional();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v90 = (char *)&v79 - v7;
  uint64_t v83 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v79 - v9;
  uint64_t v89 = v5;
  uint64_t v87 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v86 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a2[4];
  uint64_t v88 = a2;
  uint64_t v14 = a2[2];
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v92 = *(void *)(v16 - 8);
  id v93 = (id)v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v79 - v17;
  uint64_t v19 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v20);
  id v91 = (char *)&v79 - v21;
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16);
  uint64_t v105 = v3;
  v27(v25, v3, v14, v23);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v28 = swift_dynamicCast();
  uint64_t v29 = MEMORY[0x1E4FBC860];
  if (v28)
  {
    uint64_t v79 = v10;
    uint64_t v80 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v99, (uint64_t)&v102);
    uint64_t v30 = v103;
    uint64_t v31 = v104;
    __swift_project_boxed_opaque_existential_1(&v102, v103);
    uint64_t v32 = v96;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v95, v30, v31);
    char v35 = v32;
    if (!v32)
    {
      uint64_t v41 = (void *)v33;
      char v42 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
      uint64_t v96 = 0;
      if (v42)
      {
        LOBYTE(v102) = 1;
        id v44 = v41;
        uint64_t v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v46 = self;
        id v47 = objc_msgSend(v46, sel_expressionForConstantValue_, v45);
        swift_unknownObjectRelease();
        LOBYTE(v102) = 0;
        id v48 = objc_msgSend(v46, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v93 = objc_msgSend(v46, sel_expressionForConditional_trueExpression_falseExpression_, v44, v47, v48);
      }
      else
      {
        id v93 = v41;
      }
      uint64_t AssociatedTypeWitness = v80;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
    id v36 = 0;
    id v94 = v35;
    uint64_t AssociatedTypeWitness = v80;
    uint64_t v10 = v79;
  }
  else
  {
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v94 = 0;
    id v36 = v96;
  }
  *(void *)&long long v102 = v29;
  (*(void (**)(long long *, uint64_t, uint64_t))(v13 + 16))(&v102, v14, v13);
  id v37 = v36;
  if (v36)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, 1, 1, v15);
    (*(void (**)(char *, id))(v92 + 8))(v18, v93);
    if (v94)
    {
LABEL_8:
      swift_willThrow();
      return v37;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v38 = 2;
    goto LABEL_8;
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, v15);
  uint64_t v39 = v91;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v91, v18, v15);
  uint64_t v98 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v97._countAndFlagsBits);
  (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 16))(boxed_opaque_existential_1, v39, v15);
  _expressionCompatibleValue(for:)((uint64_t)&v97, (uint64_t)&v99);
  uint64_t v96 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
  if (!*((void *)&v100 + 1))
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v15);
    outlined destroy of Any?((uint64_t)&v99, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v94) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v79 = v10;
  outlined init with take of Any(&v99, &v102);
  __swift_project_boxed_opaque_existential_1(&v102, v103);
  uint64_t v43 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v93 = objc_msgSend(self, sel_expressionForConstantValue_, v43);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v15);

LABEL_18:
  id v49 = v90;
  uint64_t v50 = v89;
  uint64_t v51 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v105 + *((int *)v88 + 17), v89);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v99, (uint64_t)&v102);
    uint64_t v52 = v103;
    uint64_t v53 = v104;
    __swift_project_boxed_opaque_existential_1(&v102, v103);
    id v54 = v96;
    uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, v53);
    uint64_t v57 = v54;
    if (!v54)
    {
      id v67 = (id)v55;
      char v68 = v56;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
      if (v68)
      {
        LOBYTE(v102) = 1;
        id v69 = v67;
        uint64_t v70 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v71 = self;
        id v72 = objc_msgSend(v71, sel_expressionForConstantValue_, v70);
        swift_unknownObjectRelease();
        LOBYTE(v102) = 0;
        id v73 = objc_msgSend(v71, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v67 = objc_msgSend(v71, sel_expressionForConditional_trueExpression_falseExpression_, v69, v72, v73);
      }
      goto LABEL_34;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
    uint64_t v58 = 0;
    uint64_t v59 = v57;
  }
  else
  {
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v59 = 0;
    uint64_t v58 = v96;
  }
  *(void *)&long long v102 = v29;
  (*(void (**)(long long *, uint64_t))(v84 + 16))(&v102, v50);
  id v37 = v58;
  if (v58)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v49, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v49, v82);
    uint64_t v60 = v93;
    if (v59) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v61 = v83;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v49, 0, 1, AssociatedTypeWitness);
  uint64_t v62 = v79;
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v79, v49, AssociatedTypeWitness);
  uint64_t v98 = AssociatedTypeWitness;
  uint64_t v63 = __swift_allocate_boxed_opaque_existential_1(&v97._countAndFlagsBits);
  id v64 = v62;
  (*(void (**)(uint64_t *, char *, uint64_t))(v61 + 16))(v63, v62, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)&v97, (uint64_t)&v99);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
  if (!*((void *)&v100 + 1))
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v99, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v60 = v93;
    if (v59) {
      goto LABEL_28;
    }
LABEL_27:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *char v65 = 2;
LABEL_28:
    swift_willThrow();

    return v37;
  }
  outlined init with take of Any(&v99, &v102);
  __swift_project_boxed_opaque_existential_1(&v102, v103);
  uint64_t v74 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v67 = objc_msgSend(self, sel_expressionForConstantValue_, v74);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v64, AssociatedTypeWitness);

LABEL_34:
  long long v75 = v93;
  if (objc_msgSend(v67, sel_constantValue))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v99 = 0u;
    long long v100 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v99, (uint64_t)&v102);
  if (v103)
  {
    if (swift_dynamicCast())
    {
      *(void *)&long long v102 = 10798;
      *((void *)&v102 + 1) = 0xE200000000000000;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      v76._uint64_t countAndFlagsBits = 10798;
      v76._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v76);
      uint64_t v77 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v78 = objc_msgSend(self, sel_expressionForConstantValue_, v77);

      swift_unknownObjectRelease();
      id v67 = v78;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v102, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  id v37 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v75, v67, 0, 6, 0);

  return v37;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringContainsRegex<A, B>(uint64_t a1, void *a2)
{
  id result = PredicateExpressions.StringContainsRegex.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t NSComparisonResult.expression.getter(uint64_t a1)
{
  type metadata accessor for NSComparisonResult(0);
  _OWORD v13[3] = v3;
  v13[0] = a1;
  _expressionCompatibleValue(for:)((uint64_t)v13, (uint64_t)v14);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (!v1)
  {
    uint64_t v5 = v15;
    if (v15)
    {
      uint64_t v6 = __swift_project_boxed_opaque_existential_1(v14, v15);
      uint64_t v7 = *(void *)(v5 - 8);
      double v8 = MEMORY[0x1F4188790](v6);
      uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v7 + 16))(v10, v8);
      uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      uint64_t v11 = 0;
    }
    id v12 = objc_msgSend(self, sel_expressionForConstantValue_, v11);
    swift_unknownObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

char *_expressionForComparisonResult<A, B>(_:_:state:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v150 = a4;
  uint64_t v162 = a2;
  uint64_t v156 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v152 = type metadata accessor for Optional();
  uint64_t v151 = *(void *)(v152 - 8);
  MEMORY[0x1F4188790](v152);
  id v145 = (char *)&v141 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v155 = (char *)&v141 - v18;
  id v159 = (char *)AssociatedTypeWitness;
  uint64_t v158 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v143 = (char *)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v153 = (char *)&v141 - v22;
  uint64_t v161 = a6;
  uint64_t v164 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v144 = (char *)&v141 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v157 = (char *)&v141 - v26;
  uint64_t v167 = a7;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v165 = *(void *)(v28 - 8);
  uint64_t v166 = v28;
  MEMORY[0x1F4188790](v28);
  int64_t v147 = (char *)&v141 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v141 - v31;
  uint64_t v177 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v33);
  unint64_t v146 = (char *)&v141 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  id v37 = (char *)&v141 - v36;
  uint64_t v38 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v149 = (char *)&v141 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v42 = MEMORY[0x1F4188790](v41);
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  uint64_t v168 = a1;
  int64_t v148 = v43;
  ((void (*)(char *, uint64_t, uint64_t, double))v43)((char *)&v141 - v44, a1, a5, v42);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v45 = swift_dynamicCast();
  uint64_t v46 = MEMORY[0x1E4FBC860];
  uint64_t v154 = a3;
  if (v45)
  {
    uint64_t v163 = v27;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v171, (uint64_t)&v174);
    uint64_t v47 = v175;
    uint64_t v48 = v176;
    __swift_project_boxed_opaque_existential_1(&v174, v175);
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(a3, v47, v48);
    if (!v8)
    {
      char v56 = (void *)v49;
      char v57 = v50;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
      if (v57)
      {
        LOBYTE(v174) = 1;
        id v59 = v56;
        uint64_t v60 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v61 = self;
        id v62 = objc_msgSend(v61, sel_expressionForConstantValue_, v60);
        swift_unknownObjectRelease();
        LOBYTE(v174) = 0;
        id v63 = objc_msgSend(v61, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v142 = objc_msgSend(v61, sel_expressionForConditional_trueExpression_falseExpression_, v59, v62, v63);
      }
      else
      {
        id v142 = v56;
      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
    uint64_t v9 = 0;
    uint64_t v51 = v8;
    uint64_t v46 = MEMORY[0x1E4FBC860];
    uint64_t v27 = v163;
  }
  else
  {
    uint64_t v173 = 0;
    long long v171 = 0u;
    long long v172 = 0u;
    outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v51 = 0;
  }
  *(void *)&long long v174 = v46;
  (*(void (**)(long long *, uint64_t))(v167 + 16))(&v174, a5);
  if (!v9)
  {
    uint64_t v53 = v177;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v177 + 56))(v32, 0, 1, v27);
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v37, v32, v27);
    uint64_t v170 = (char *)v27;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v169);
    uint64_t v55 = *(void (**)(uint64_t *, char *, uint64_t))(v53 + 16);
    uint64_t v163 = v27;
    v55(boxed_opaque_existential_1, v37, v27);
    _expressionCompatibleValue(for:)((uint64_t)v169, (uint64_t)&v171);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
    if (!*((void *)&v172 + 1))
    {
      (*(void (**)(char *, uint64_t))(v177 + 8))(v37, v163);
      outlined destroy of Any?((uint64_t)&v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v51) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined init with take of Any(&v171, &v174);
    __swift_project_boxed_opaque_existential_1(&v174, v175);
    uint64_t v58 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v142 = objc_msgSend(self, sel_expressionForConstantValue_, v58);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v37, v163);

LABEL_17:
    uint64_t v64 = v161;
    uint64_t v65 = v164 + 16;
    char v66 = v157;
    uint64_t v157 = *(char **)(v164 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v157)(v66, v162, v161);
    int v67 = swift_dynamicCast();
    uint64_t v164 = v65;
    if (v67)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v171, (uint64_t)&v174);
      uint64_t v68 = v175;
      uint64_t v69 = v176;
      __swift_project_boxed_opaque_existential_1(&v174, v175);
      id v77 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v154, v68, v69);
      char v79 = v78;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
      if (v79)
      {
        LOBYTE(v174) = 1;
        id v80 = v77;
        uint64_t v81 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v82 = self;
        id v83 = objc_msgSend(v82, sel_expressionForConstantValue_, v81);
        swift_unknownObjectRelease();
        LOBYTE(v174) = 0;
        id v84 = objc_msgSend(v82, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v77 = objc_msgSend(v82, sel_expressionForConditional_trueExpression_falseExpression_, v80, v83, v84);
      }
      uint64_t v73 = MEMORY[0x1E4FBC860];
    }
    else
    {
      uint64_t v173 = 0;
      long long v171 = 0u;
      long long v172 = 0u;
      outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v70 = MEMORY[0x1E4FBC860];
      *(void *)&long long v174 = MEMORY[0x1E4FBC860];
      id v71 = v155;
      (*(void (**)(long long *, uint64_t))(v156 + 16))(&v174, v64);
      uint64_t v73 = v70;
      uint64_t v74 = v158;
      uint64_t v32 = v159;
      (*(void (**)(char *, void, uint64_t, char *))(v158 + 56))(v71, 0, 1, v159);
      long long v75 = v153;
      (*(void (**)(char *, char *, char *))(v74 + 32))(v153, v71, v32);
      uint64_t v170 = v32;
      Swift::String v76 = __swift_allocate_boxed_opaque_existential_1(v169);
      (*(void (**)(uint64_t *, char *, char *))(v74 + 16))(v76, v75, v32);
      _expressionCompatibleValue(for:)((uint64_t)v169, (uint64_t)&v171);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
      uint64_t v85 = v142;
      if (!*((void *)&v172 + 1))
      {
        (*(void (**)(char *, char *))(v158 + 8))(v153, v159);
        outlined destroy of Any?((uint64_t)&v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *id v72 = 2;
        swift_willThrow();

        return v32;
      }
      outlined init with take of Any(&v171, &v174);
      __swift_project_boxed_opaque_existential_1(&v174, v175);
      uint64_t v86 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v77 = objc_msgSend(self, sel_expressionForConstantValue_, v86);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
      (*(void (**)(char *, char *))(v158 + 8))(v153, v159);
    }
    uint64_t v87 = v149;
    uint64_t v88 = v148;
    id v89 = objc_allocWithZone((Class)NSComparisonPredicate);
    uint64_t v90 = v142;
    id v91 = (char *)objc_msgSend(v89, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v142, v77, 0, 4, v150);

    v88(v87, v168, a5);
    if (swift_dynamicCast())
    {
      uint64_t v155 = v91;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v171, (uint64_t)&v174);
      uint64_t v92 = v175;
      uint64_t v93 = v176;
      __swift_project_boxed_opaque_existential_1(&v174, v175);
      uint64_t v32 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v154, v92, v93);
      char v103 = v102;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
      if (v103)
      {
        LOBYTE(v174) = 1;
        uint64_t v104 = v32;
        uint64_t v105 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v106 = self;
        id v107 = objc_msgSend(v106, sel_expressionForConstantValue_, v105);
        swift_unknownObjectRelease();
        LOBYTE(v174) = 0;
        id v108 = objc_msgSend(v106, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        uint64_t v32 = (char *)objc_msgSend(v106, sel_expressionForConditional_trueExpression_falseExpression_, v104, v107, v108);

        uint64_t v109 = v161;
        unint64_t v110 = v145;
        uint64_t v111 = v156;
        uint64_t v112 = v154;
LABEL_35:
        ((void (*)(char *, uint64_t, uint64_t))v157)(v144, v162, v109);
        if (swift_dynamicCast())
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v171, (uint64_t)&v174);
          uint64_t v114 = v175;
          uint64_t v115 = v176;
          __swift_project_boxed_opaque_existential_1(&v174, v175);
          id v122 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v112, v114, v115);
          char v124 = v123;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
          if (v124)
          {
            LOBYTE(v174) = 1;
            id v125 = v122;
            uint64_t v126 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            uint64_t v127 = self;
            id v128 = objc_msgSend(v127, sel_expressionForConstantValue_, v126);
            swift_unknownObjectRelease();
            LOBYTE(v174) = 0;
            id v129 = objc_msgSend(v127, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            id v122 = objc_msgSend(v127, sel_expressionForConditional_trueExpression_falseExpression_, v125, v128, v129);
          }
          goto LABEL_45;
        }
        uint64_t v173 = 0;
        long long v171 = 0u;
        long long v172 = 0u;
        outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for ConvertibleExpression?);
        *(void *)&long long v174 = MEMORY[0x1E4FBC860];
        (*(void (**)(long long *, uint64_t, uint64_t))(v111 + 16))(&v174, v109, v111);
        uint64_t v116 = v158;
        uint64_t v117 = v159;
        (*(void (**)(char *, void, uint64_t, char *))(v158 + 56))(v110, 0, 1, v159);
        uint64_t v118 = v143;
        (*(void (**)(char *, char *, char *))(v116 + 32))(v143, v110, v117);
        uint64_t v170 = v117;
        uint64_t v119 = __swift_allocate_boxed_opaque_existential_1(v169);
        (*(void (**)(uint64_t *, char *, char *))(v116 + 16))(v119, v118, v117);
        _expressionCompatibleValue(for:)((uint64_t)v169, (uint64_t)&v171);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
        uint64_t v130 = v155;
        if (*((void *)&v172 + 1))
        {
          outlined init with take of Any(&v171, &v174);
          __swift_project_boxed_opaque_existential_1(&v174, v175);
          uint64_t v131 = _bridgeAnythingToObjectiveC<A>(_:)();
          id v122 = objc_msgSend(self, sel_expressionForConstantValue_, v131);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
          (*(void (**)(char *, char *))(v158 + 8))(v143, v159);

LABEL_45:
          id v132 = objc_allocWithZone((Class)NSComparisonPredicate);
          id v133 = objc_msgSend(v132, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v32, v122, 0, 0, v150);

          uint64_t v134 = NSComparisonResult.expression.getter(-1);
          long long v135 = NSComparisonResult.expression.getter(1);
          uint64_t v136 = self;
          id v137 = v133;
          id v138 = objc_msgSend(v136, sel_expressionForConditional_trueExpression_falseExpression_, v137, v134, v135);

          unint64_t v139 = NSComparisonResult.expression.getter(0);
          int64_t v140 = v155;
          uint64_t v32 = (char *)objc_msgSend(v136, sel_expressionForConditional_trueExpression_falseExpression_, v140, v139, v138);

          return v32;
        }
        (*(void (**)(char *, char *))(v158 + 8))(v143, v159);
        outlined destroy of Any?((uint64_t)&v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v120 = 2;
        swift_willThrow();

LABEL_39:
        return v32;
      }
    }
    else
    {
      uint64_t v173 = 0;
      long long v171 = 0u;
      long long v172 = 0u;
      outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(void *)&long long v174 = v73;
      id v94 = v147;
      (*(void (**)(long long *, uint64_t))(v167 + 16))(&v174, a5);
      uint64_t v155 = v91;
      uint64_t v96 = v177;
      Swift::String v97 = (char *)v163;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v177 + 56))(v94, 0, 1, v163);
      uint64_t v98 = v146;
      (*(void (**)(char *, char *, char *))(v96 + 32))(v146, v94, v97);
      uint64_t v170 = v97;
      long long v99 = __swift_allocate_boxed_opaque_existential_1(v169);
      long long v100 = *(void (**)(uint64_t *, char *, char *))(v96 + 16);
      uint64_t v101 = v97;
      v100(v99, v98, v97);
      _expressionCompatibleValue(for:)((uint64_t)v169, (uint64_t)&v171);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
      if (!*((void *)&v172 + 1))
      {
        (*(void (**)(char *, char *))(v177 + 8))(v98, v97);
        outlined destroy of Any?((uint64_t)&v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v32 = v155;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v95 = 2;
        swift_willThrow();
        goto LABEL_39;
      }
      outlined init with take of Any(&v171, &v174);
      __swift_project_boxed_opaque_existential_1(&v174, v175);
      uint64_t v113 = _bridgeAnythingToObjectiveC<A>(_:)();
      uint64_t v32 = (char *)objc_msgSend(self, sel_expressionForConstantValue_, v113);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
      (*(void (**)(char *, char *))(v177 + 8))(v98, v101);
    }
    unint64_t v110 = v145;
    uint64_t v111 = v156;
    uint64_t v112 = v154;
    uint64_t v109 = v161;
    goto LABEL_35;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v177 + 56))(v32, 1, 1, v27);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v32, v166);
  if (!v51)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v52 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v32;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringCaseInsensitiveCompare<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(a1, a2, 1);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

char *PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _expressionForComparisonResult<A, B>(_:_:state:options:)(v3, v3 + *(int *)(a2 + 68), a1, a3, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40));
  if (v4) {
    return (char *)v6;
  }
  return result;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(a1, a2, 8);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

char *PredicateExpressions.StringLocalizedStandardContains.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v90 = a1;
  uint64_t v3 = v2;
  uint64_t v5 = a2[3];
  uint64_t v80 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v85 = (char *)v75 - v8;
  uint64_t v79 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  id v77 = (char *)v75 - v10;
  uint64_t v84 = v5;
  uint64_t v82 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v81 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a2[4];
  id v83 = a2;
  uint64_t v14 = a2[2];
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v88 = *(void *)(v16 - 8);
  uint64_t v89 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v75 - v17;
  uint64_t v19 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v87 = (char *)v75 - v21;
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t, double))(v26 + 16);
  long long v100 = v3;
  v27(v25, v3, v14, v23);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v29 = swift_dynamicCast();
  uint64_t v30 = MEMORY[0x1E4FBC860];
  uint64_t v86 = AssociatedTypeWitness;
  if (v29)
  {
    v75[1] = v28;
    uint64_t v76 = v7;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
    uint64_t v31 = v98;
    uint64_t v32 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    id v33 = v91;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v90, v31, v32);
    uint64_t v36 = v33;
    if (!v33)
    {
      uint64_t v41 = (void *)v34;
      char v42 = v35;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      if (v42)
      {
        LOBYTE(v97) = 1;
        id v52 = v41;
        uint64_t v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v54 = self;
        id v55 = objc_msgSend(v54, sel_expressionForConstantValue_, v53);
        swift_unknownObjectRelease();
        LOBYTE(v97) = 0;
        id v56 = objc_msgSend(v54, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v91 = objc_msgSend(v54, sel_expressionForConditional_trueExpression_falseExpression_, v52, v55, v56);
      }
      else
      {
        id v91 = v41;
      }
      uint64_t v47 = v86;
      uint64_t v44 = v85;
      uint64_t v45 = v84;
      uint64_t v46 = v90;
      uint64_t v48 = v100;
      uint64_t v49 = v83;
      uint64_t v50 = v82;
      uint64_t v51 = v81;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    id v37 = 0;
    uint64_t v7 = v76;
    uint64_t v30 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v96 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v36 = 0;
    id v37 = v91;
  }
  *(void *)&long long v97 = v30;
  uint64_t v38 = v100;
  (*(void (**)(long long *, uint64_t, uint64_t))(v13 + 16))(&v97, v14, v13);
  if (!v37)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, v15);
    uint64_t v38 = v87;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v87, v18, v15);
    uint64_t v93 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v92);
    (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 16))(boxed_opaque_existential_1, v38, v15);
    _expressionCompatibleValue(for:)((uint64_t)v92, (uint64_t)&v94);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    if (!*((void *)&v95 + 1))
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v38, v15);
      outlined destroy of Any?((uint64_t)&v94, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v36) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    uint64_t v76 = v7;
    outlined init with take of Any(&v94, &v97);
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    uint64_t v43 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v91 = objc_msgSend(self, sel_expressionForConstantValue_, v43);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v38, v15);

    uint64_t v44 = v85;
    uint64_t v45 = v84;
    uint64_t v46 = v90;
    uint64_t v47 = v86;
    uint64_t v48 = v100;
    uint64_t v49 = v83;
    uint64_t v50 = v82;
    uint64_t v51 = v81;
LABEL_18:
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v51, &v48[*((int *)v49 + 17)], v45);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
      uint64_t v57 = v98;
      uint64_t v58 = v99;
      __swift_project_boxed_opaque_existential_1(&v97, v98);
      id v64 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v46, v57, v58);
      char v66 = v65;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      if (v66)
      {
        LOBYTE(v97) = 1;
        id v67 = v64;
        uint64_t v68 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v69 = self;
        id v70 = objc_msgSend(v69, sel_expressionForConstantValue_, v68);
        swift_unknownObjectRelease();
        LOBYTE(v97) = 0;
        id v71 = objc_msgSend(v69, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v64 = objc_msgSend(v69, sel_expressionForConditional_trueExpression_falseExpression_, v67, v70, v71);
      }
    }
    else
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(void *)&long long v97 = MEMORY[0x1E4FBC860];
      (*(void (**)(long long *, uint64_t))(v80 + 16))(&v97, v45);
      uint64_t v59 = v79;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v44, 0, 1, v47);
      uint64_t v38 = v77;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v77, v44, v47);
      uint64_t v93 = v47;
      uint64_t v60 = __swift_allocate_boxed_opaque_existential_1(v92);
      (*(void (**)(uint64_t *, char *, uint64_t))(v59 + 16))(v60, v38, v47);
      _expressionCompatibleValue(for:)((uint64_t)v92, (uint64_t)&v94);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
      if (!*((void *)&v95 + 1))
      {
        (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v47);
        outlined destroy of Any?((uint64_t)&v94, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v61 = v91;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *id v62 = 2;
        swift_willThrow();

        return v38;
      }
      outlined init with take of Any(&v94, &v97);
      __swift_project_boxed_opaque_existential_1(&v97, v98);
      id v72 = v38;
      uint64_t v73 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v64 = objc_msgSend(self, sel_expressionForConstantValue_, v73);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v72, v47);
    }
    uint64_t v74 = v91;
    uint64_t v38 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v91, v64, 0, 99, 11);

    return v38;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, 1, 1, v15);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v18, v89);
  if (!v36)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    unsigned char *v39 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v38;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.StringLocalizedStandardContains.convert(state:)(a1, a2);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

unint64_t NSPredicate.init<A>(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = a1[5];
  uint64_t v6 = v45;
  uint64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_expressionForEvaluatedObject);
  id v46 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v45);
  if (v11)
  {
    __break(1u);
    goto LABEL_15;
  }
  v9[(result >> 6) + 8] |= 1 << result;
  uint64_t v12 = 8 * result;
  *(void *)(v9[6] + v12) = v6;
  *(void *)(v9[7] + v12) = v8;
  uint64_t v13 = v9[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v36 = v3;
  v9[2] = v15;
  id v16 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, NSExpression));
  swift_arrayDestroy();
  v47[0] = 1;
  v47[1] = v9;
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(a1, v18);
  double v20 = MEMORY[0x1F4188790](v19);
  (*(void (**)(char *, void *, uint64_t, double))(v22 + 16))((char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v18, v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v39, (uint64_t)&v42);
    uint64_t v23 = v43;
    uint64_t v24 = v44;
    __swift_project_boxed_opaque_existential_1(&v42, v43);
    id v28 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 16))(v47, v23, v24);
    char v30 = v29;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    if (v30) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v41 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    outlined destroy of Any?((uint64_t)&v39, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&long long v42 = MEMORY[0x1E4FBC860];
    (*(void (**)(char *__return_ptr, long long *, uint64_t))(*(void *)(v17 + 8) + 16))(&v38, &v42, v18);
    v37[3] = MEMORY[0x1E4FBB390];
    LOBYTE(v37[0]) = v38 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v37, (uint64_t)&v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    if (!*((void *)&v40 + 1))
    {
      outlined destroy of Any?((uint64_t)&v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      uint64_t v25 = (void *)swift_allocError();
      *uint64_t v26 = 2;
      swift_willThrow();

      swift_bridgeObjectRelease();
      *(void *)&long long v42 = a2;
      uint64_t v27 = type metadata accessor for Predicate();
      (*(void (**)(void *, uint64_t))(*(void *)(v27 - 8) + 8))(a1, v27);
      return 0;
    }
    outlined init with take of Any(&v39, &v42);
    __swift_project_boxed_opaque_existential_1(&v42, v43);
    id v28 = objc_msgSend(v7, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  }
  LOBYTE(v42) = 1;
  id v31 = v28;
  id v32 = objc_msgSend(v7, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v31, v32, 0, 4, 0);

LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v33 = v36;
  *(void *)&long long v39 = swift_dynamicCastUnknownClassUnconditional();
  (*(void (**)(long long *, long long *, uint64_t))(*(void *)(v33 - 8) + 32))(&v42, &v39, v33);
  v37[0] = a2;
  uint64_t v34 = type metadata accessor for Predicate();
  (*(void (**)(void *, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
  return v42;
}

unint64_t NSExpression.init<A, B>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v55 = type metadata accessor for Optional();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v9 = (char *)&v51 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = a1[5];
  uint64_t v13 = v65;
  BOOL v14 = self;
  id v15 = objc_msgSend(v14, sel_expressionForEvaluatedObject);
  id v66 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  id v16 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if (v18)
  {
    __break(1u);
    goto LABEL_14;
  }
  v16[(result >> 6) + 8] |= 1 << result;
  uint64_t v19 = 8 * result;
  *(void *)(v16[6] + v19) = v13;
  *(void *)(v16[7] + v19) = v15;
  uint64_t v20 = v16[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  id v51 = v14;
  uint64_t v52 = v4;
  uint64_t v57 = a2;
  v16[2] = v22;
  id v23 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, NSExpression));
  swift_arrayDestroy();
  v67[0] = 1;
  v67[1] = v16;
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v26 = __swift_project_boxed_opaque_existential_1(a1, v25);
  double v27 = MEMORY[0x1F4188790](v26);
  (*(void (**)(char *, void *, uint64_t, double))(v29 + 16))((char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v25, v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    id v56 = a1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v59, (uint64_t)&v62);
    uint64_t v30 = v63;
    uint64_t v31 = v64;
    __swift_project_boxed_opaque_existential_1(&v62, v63);
    long long v39 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 16))(v67, v30, v31);
    char v41 = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    uint64_t v37 = v57;
    if (v41)
    {
      LOBYTE(v62) = 1;
      id v42 = v39;
      uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v44 = v51;
      id v45 = objc_msgSend(v51, sel_expressionForConstantValue_, v43);
      swift_unknownObjectRelease();
      LOBYTE(v62) = 0;
      id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v47 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
    }
  }
  else
  {
    uint64_t v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    outlined destroy of Any?((uint64_t)&v59, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&long long v62 = MEMORY[0x1E4FBC860];
    (*(void (**)(long long *, uint64_t))(*(void *)(v24 + 8) + 16))(&v62, v25);
    id v56 = a1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, a3);
    uint64_t v35 = v53;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v9, a3);
    v58[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v35, a3);
    _expressionCompatibleValue(for:)((uint64_t)v58, (uint64_t)&v59);
    uint64_t v37 = v57;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    if (!*((void *)&v60 + 1))
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v35, a3);
      outlined destroy of Any?((uint64_t)&v59, (uint64_t *)&demangling cache variable for type metadata for Any?);
      char v38 = v56;
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      id v32 = (void *)swift_allocError();
      unsigned char *v33 = 2;
      swift_willThrow();

      swift_bridgeObjectRelease();
      *(void *)&long long v62 = v37;
      uint64_t v34 = type metadata accessor for Expression();
      (*(void (**)(void *, uint64_t))(*(void *)(v34 - 8) + 8))(v38, v34);
      return 0;
    }
    outlined init with take of Any(&v59, &v62);
    __swift_project_boxed_opaque_existential_1(&v62, v63);
    id v48 = objc_msgSend(v51, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, a3);
  }
  swift_bridgeObjectRelease();
  uint64_t v49 = v52;
  *(void *)&long long v59 = swift_dynamicCastUnknownClassUnconditional();
  (*(void (**)(long long *, long long *, uint64_t))(*(void *)(v49 - 8) + 32))(&v62, &v59, v49);
  v58[0] = v37;
  uint64_t v50 = type metadata accessor for Expression();
  (*(void (**)(void *, uint64_t))(*(void *)(v50 - 8) + 8))(v56, v50);
  return v62;
}

id @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a2[3];
    if (v12) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v18 = 0;
    goto LABEL_6;
  }
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v7 = *(void *)(v4 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  uint64_t v12 = a2[3];
  if (!v12) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(a2, v12);
  uint64_t v14 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v17, v15);
  uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
LABEL_6:
  id v19 = objc_msgSend(v2, sel_initWithOperand_andKeyPath_, v11, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v19;
}

unint64_t lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError()
{
  unint64_t result = lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError;
  if (!lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError;
  if (!lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Value<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.KeyPath<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Arithmetic<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.UnaryMinus<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Filter<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.FloatDivision<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.ClosedRange<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.SequenceMaximum<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.SequenceMinimum<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Conditional<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilCoalesce<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for [A](uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for NSPredicateConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D28C58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NSPredicateConversionError()
{
  return &unk_1ECA419E8;
}

uint64_t outlined init with take of AnyRange(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

uint64_t outlined init with copy of AnyRange(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized PredicateExpressions.Variable.convert(state:)(uint64_t result)
{
  long long v2 = v1;
  uint64_t v3 = *(void *)(result + 8);
  if (*(void *)(v3 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v2);
    if (v4) {
      return *(void *)(*(void *)(v3 + 56) + 8 * result);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, v2);
  void v14[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
  _expressionCompatibleValue(for:)((uint64_t)v14, (uint64_t)v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v1)
  {
    uint64_t v6 = v16;
    if (v16)
    {
      uint64_t v7 = __swift_project_boxed_opaque_existential_1(v15, v16);
      uint64_t v8 = *(void *)(v6 - 8);
      double v9 = MEMORY[0x1F4188790](v7);
      uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v8 + 16))(v11, v9);
      uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    }
    else
    {
      uint64_t v12 = 0;
    }
    id v13 = objc_msgSend(self, sel_expressionForConstantValue_, v12);
    swift_unknownObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t outlined destroy of AnyRange(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)(a1, *(void (**)(uint64_t *))(v1 + 32));
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out Any?, @error @owned Error)(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t outlined init with take of PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for AnyRange(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 >= 5) {
    unsigned int v2 = *(_DWORD *)a1 + 5;
  }
  if (v2 <= 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    v1 += 40;
  }
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for AnyRange(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 80);
  if (v4 >= 5) {
    unsigned int v4 = *(_DWORD *)a2 + 5;
  }
  switch(v4)
  {
    case 1u:
      long long v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      long long v9 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, a2 + 40);
      char v7 = 1;
      break;
    case 2u:
      long long v10 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
      char v7 = 2;
      break;
    case 3u:
      long long v11 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
      char v7 = 3;
      break;
    case 4u:
      long long v12 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
      char v7 = 4;
      break;
    default:
      long long v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      long long v6 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
      char v7 = 0;
      break;
  }
  *(unsigned char *)(a1 + 80) = v7;
  return a1;
}

uint64_t assignWithCopy for AnyRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 80);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    if (v4 <= 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      a1 = v2 + 40;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 80);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 1u:
        uint64_t v9 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v9;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v2, a2);
        uint64_t v10 = *(void *)(a2 + 64);
        *(void *)(v2 + 64) = v10;
        *(void *)(v2 + 72) = *(void *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v2 + 40, a2 + 40);
        char v8 = 1;
        break;
      case 2u:
        uint64_t v11 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v11;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v2, a2);
        char v8 = 2;
        break;
      case 3u:
        uint64_t v12 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v12;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v2, a2);
        char v8 = 3;
        break;
      case 4u:
        uint64_t v13 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v13;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v2, a2);
        char v8 = 4;
        break;
      default:
        uint64_t v6 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v6;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v2, a2);
        uint64_t v7 = *(void *)(a2 + 64);
        *(void *)(v2 + 64) = v7;
        *(void *)(v2 + 72) = *(void *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v2 + 40, a2 + 40);
        char v8 = 0;
        break;
    }
    *(unsigned char *)(v2 + 80) = v8;
  }
  return v2;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AnyRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 80);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    if (v4 <= 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      a1 = v2 + 40;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 80);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 1u:
        long long v9 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v2 + 48) = v9;
        *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v10;
        char v6 = 1;
        break;
      case 2u:
        long long v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v11;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        char v6 = 2;
        break;
      case 3u:
        long long v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v12;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        char v6 = 3;
        break;
      case 4u:
        long long v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v13;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        char v6 = 4;
        break;
      default:
        char v6 = 0;
        long long v7 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v2 + 48) = v7;
        *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v8;
        break;
    }
    *(unsigned char *)(v2 + 80) = v6;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for AnyRange(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnyRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AnyRange(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 80);
  if (result >= 5) {
    return (*(_DWORD *)a1 + 5);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AnyRange(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 80) = a2;
  return result;
}

void *type metadata accessor for AnyRange()
{
  return &unk_1ECA4A8B8;
}

unsigned __int8 *_sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n0defgh74C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xlmnoc28VGKXExAOKXExSS05UTF16Q0VKXEtuv46AOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Z0AF23LocalizedStringResourceVSgAIxsAJ_pRi_zRi0_zlyAMIsgyrzo_Tf1nnc_n(uint64_t *a1, uint64_t a2, void *(*a3)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    v12[0] = v5;
    v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t result = (unsigned __int8 *)v12;
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v8, a2, a3);
  }
  uint64_t v5 = static String._copying(_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *a1 = v5;
  a1[1] = v11;
  unint64_t v6 = v11;
  if ((v11 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t result = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v8, a2, a3);
  }
  uint64_t result = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  if (result)
  {
    if ((v8 & 0x8000000000000000) == 0) {
      return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v8, a2, a3);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *_sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(uint64_t *a1, uint64_t (*a2)(void *, uint64_t))
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v6 = HIBYTE(v4) & 0xF;
    uint64_t result = v10;
    return (void *)a2(result, v6);
  }
  uint64_t v3 = static String._copying(_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v9;
  unint64_t v4 = v9;
  if ((v9 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t result = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    return (void *)a2(result, v6);
  }
  uint64_t result = (void *)_StringObject.sharedUTF8.getter();
  if (result)
  {
    if ((v6 & 0x8000000000000000) == 0) {
      return (void *)a2(result, v6);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PropertyListDecoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t PropertyListDecoder.userInfo.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t PropertyListDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

uint64_t PropertyListDecoder.decode<A>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 200;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 192))(a1, a2, a3, &v8, a4, a5, a6);
}

uint64_t PropertyListDecoder.decode<A, B>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  double v16 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(a8 + 16))(a6, a8, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v9 + 168))(v21, v22, v23, v18, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

uint64_t PropertyListDecoder.decode<A, B>(_:from:format:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  double v16 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(a9 + 16))(a7, a9, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v10 + 192))(v20, v21, v22, v23, v18, a6, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

uint64_t PropertyListDecoder.decode<A>(_:from:format:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a1;
  uint64_t v32 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = v8;
  uint64_t v25 = partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:configuration:);
  uint64_t v26 = v28;
  uint64_t v27 = a4;
  uint64_t v17 = a6;
  uint64_t v18 = v8;
  id v19 = partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:configuration:);
  uint64_t v20 = v28;
  uint64_t v21 = a4;
  uint64_t v11 = a6;
  uint64_t v12 = v8;
  uint64_t v13 = a4;
  uint64_t v14 = partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:configuration:);
  uint64_t v15 = v28;
  return static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a2, a3, (uint64_t (*)(uint64_t, uint64_t, __n128))partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v22, (uint64_t)partial apply for closure #2 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v16, (void (*)(id))partial apply for closure #3 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v10, a8, a6);
}

void closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, void (*a5)(long long *))
{
  __ParseOldStylePropertyList(utf16:)(a1, a2, (uint64_t)&v36);
  if (!v5)
  {
    outlined init with take of Any(&v36, v41);
    outlined init with copy of Any((uint64_t)v41, (uint64_t)&v36);
    uint64_t v32 = *(void *)(a3 + 16);
    uint64_t v33 = type metadata accessor for __PlistDictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v34 = __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v36, MEMORY[0x1E4FBC860], v32);
    *a4 = 1;
    *((void *)&v37 + 1) = v33;
    char v38 = &protocol witness table for __PlistDictionaryDecoder;
    *(void *)&long long v36 = v34;
    swift_retain();
    a5(&v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return;
  }
  id v42 = v5;
  id v9 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }

  uint64_t v10 = v39;
  uint64_t v11 = v40;
  uint64_t v12 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v36);
  long long v18 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, *((uint64_t *)&v18 + 1));
  if (v20)
  {
    __break(1u);
    goto LABEL_13;
  }
  v17[(v19 >> 6) + 8] |= 1 << v19;
  *(_OWORD *)(v17[6] + 16 * v19) = v18;
  outlined init with take of Any(&v37, (_OWORD *)(v17[7] + 32 * v19));
  uint64_t v21 = v17[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  _OWORD v17[2] = v23;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v24 = objc_allocWithZone((Class)NSError);
  uint64_t v25 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v27 = objc_msgSend(v26, sel_domain);
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;

  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v30 == v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBA78], v12);
    swift_willThrow();
LABEL_11:

    return;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void partial apply for closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2)
{
}

{
  uint64_t v2;

  closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(void *)(v2 + 24), *(void **)(v2 + 32), *(void (**)(long long *))(v2 + 40));
}

uint64_t partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:configuration:)(void *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4, v2, v3, v6, v7);
}

unsigned char *specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  unint64_t v9 = (unint64_t)&a1[a2];
  BOOL v22 = a1;
  uint64_t v23 = a2;
  id v24 = a1;
  uint64_t v25 = a1;
  id v26 = &a1[a2];
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v28 = 0;
  uint64_t result = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(a1);
  if (v9 < (unint64_t)(result + 1)) {
    return result;
  }
  if (v9 < (unint64_t)result)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(v9 - (void)result) < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (*result == 60)
  {
    uint64_t result = a4(v19, a1, a2);
    if (!v4)
    {
      long long v17 = v19[1];
      long long v18 = v19[0];
      long long v15 = v19[3];
      long long v16 = v19[2];
      long long v13 = v19[5];
      long long v14 = v19[4];
      uint64_t v11 = v20;
      uint64_t v12 = v21;
      uint64_t result = (unsigned char *)outlined consume of LocalizedStringResource?(*(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 56), *(void *)(a3 + 64), *(void **)(a3 + 72));
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v16;
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 64) = v14;
      *(_OWORD *)(a3 + 80) = v13;
      *(void *)(a3 + 96) = v11;
      *(void *)(a3 + 104) = v12;
    }
  }
  return result;
}

unsigned char *_s10Foundation19PropertyListDecoderC22withUTF8Representation2of14sourceEncoding_xAA10BufferViewVys5UInt8VG_SSAAE0J0VxAKKXEtKlFZyt_TBm5016_s10Foundation19bcd78C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xAA10kl4Vys5M82VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Tg5AA23LocalizedStringResourceVSgAKxs5Error_pRi_zRi0_zlyAPIsgyrzo_Tf1nnnc_n(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  if (a3 == 4) {
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, a4, a5);
  }
  id v8 = specialized String.init<A>(bytes:encoding:)((char *)a1, a2, a3);
  if (v9)
  {
    v13[0] = (uint64_t)v8;
    v13[1] = v9;
    _sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n0defgh74C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xlmnoc28VGKXExAOKXExSS05UTF16Q0VKXEtuv46AOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Z0AF23LocalizedStringResourceVSgAIxsAJ_pRi_zRi0_zlyAMIsgyrzo_Tf1nnc_n(v13, a4, a5);
    return (unsigned char *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v12 = v11;
    _CodingPathNode.path.getter(0x8000000000000000);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA78], v10);
    return (unsigned char *)swift_willThrow();
  }
}

uint64_t PropertyListDecoder.decode<A>(_:fromTopLevel:)@<X0>(ValueMetadata *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v21[-v11];
  outlined init with copy of Any((uint64_t)a2, (uint64_t)v21);
  uint64_t v13 = *(void *)(v4 + 16);
  type metadata accessor for __PlistDictionaryDecoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)v21, MEMORY[0x1E4FBC860], v13);
  __PlistDictionaryDecoder.unbox<A>(_:as:)(a2, a1, a3, (uint64_t)v12);
  if (v5) {
    return swift_release();
  }
  uint64_t v14 = v10;
  uint64_t v15 = v22;
  uint64_t v16 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, a3) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v12, v9);
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *unint64_t v19 = a1;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v16 + 32))(v15, v12, a3);
}

uint64_t PropertyListDecoder.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_181D2AA28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_181D2AA74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for PropertyListDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PropertyListDecoder);
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PropertyListDecoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A, B>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A, B>(_:from:format:configuration:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 184))(a1);
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

ValueMetadata *type metadata accessor for PropertyListDecoder._Options()
{
  return &type metadata for PropertyListDecoder._Options;
}

uint64_t outlined consume of LocalizedStringResource?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Date.FormatStyle.DateFieldCollection.collection(date:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 17);
  char v4 = *(unsigned char *)(v2 + 18);
  char v5 = *(unsigned char *)(v2 + 19);
  char v6 = *(unsigned char *)(v2 + 35);
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(v2 + 8);
  char v9 = *(unsigned char *)(v2 + 16);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t result = *(unsigned __int8 *)(v2 + 32);
  char v12 = *(unsigned char *)(v2 + 33) & 1;
  switch(v7)
  {
    case 0:
      goto LABEL_9;
    case 1:
      uint64_t v8 = 0;
      char v4 = 0;
      goto LABEL_4;
    case 2:
      uint64_t v8 = 0;
      uint64_t v10 = 0;
      char v12 = 0;
      uint64_t result = 1;
      char v4 = 2;
      goto LABEL_6;
    case 3:
      uint64_t v8 = 0;
      uint64_t v10 = 0;
      char v12 = 0;
      uint64_t result = 1;
      char v9 = 3;
      char v4 = 3;
      goto LABEL_9;
    case 4:
      uint64_t v8 = 0;
      uint64_t v10 = 0;
      char v12 = 0;
      uint64_t result = 1;
      char v9 = 3;
      char v4 = 3;
      char v6 = 1;
      goto LABEL_9;
    default:
      uint64_t v8 = 0;
LABEL_4:
      uint64_t v10 = 0;
      char v12 = 0;
      uint64_t result = 1;
LABEL_6:
      char v9 = 3;
LABEL_9:
      __int16 v13 = *(_WORD *)(v2 + 48);
      uint64_t v14 = *(void *)(v2 + 40);
      char v15 = *(unsigned char *)(v2 + 34);
      *(unsigned char *)a2 = *(unsigned char *)v2;
      *(void *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 16) = v9;
      *(unsigned char *)(a2 + 17) = v3;
      *(unsigned char *)(a2 + 18) = v4;
      *(unsigned char *)(a2 + 19) = v5;
      *(void *)(a2 + 24) = v10;
      *(unsigned char *)(a2 + 32) = result;
      *(unsigned char *)(a2 + 33) = v12;
      *(unsigned char *)(a2 + 34) = v15;
      *(unsigned char *)(a2 + 35) = v6;
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(v2 + 36);
      *(void *)(a2 + 40) = v14;
      *(_WORD *)(a2 + 48) = v13;
      return result;
  }
}

__n128 Date.FormatStyle.locale(_:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)&v25[26] = *(long long *)((char *)v2 + 106);
  long long v5 = v2[1];
  long long v20 = *v2;
  long long v21 = v5;
  long long v6 = v2[3];
  long long v22 = v2[2];
  long long v23 = v6;
  long long v7 = v2[5];
  long long v24 = v2[4];
  *(_OWORD *)uint64_t v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  char v8 = v25[41];
  char v9 = v25[40];
  uint64_t v10 = *((void *)&v6 + 1);
  char v11 = v24;
  long long v16 = v21;
  long long v17 = v20;
  long long v12 = v22;
  __int16 v13 = v6;
  __n128 v18 = *(__n128 *)&v25[24];
  long long v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  long long v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  __n128 result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(unsigned char *)(a2 + 120) = v9;
  *(unsigned char *)(a2 + 121) = v8;
  return result;
}

BOOL static Date.FormatStyle.TimeStyle.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void Date.FormatStyle.DateFieldCollection.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(unsigned char *)v2 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  int v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 8);
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v5, v4);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 17) == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 18) == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 19) != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v2 + 33) & 1) == 0) {
      goto LABEL_15;
    }
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
  Hasher._combine(_:)(0);
  if (*(unsigned char *)(v2 + 33)) {
    goto LABEL_23;
  }
LABEL_15:
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(unsigned char *)(v2 + 32);
  Hasher._combine(_:)(1u);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = 10;
    if (v6 < 10) {
      uint64_t v8 = v6;
    }
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    MEMORY[0x185302340](103, 0xE100000000000000, v9);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_25:
  if (*(unsigned char *)(v2 + 34) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 35) == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 36) == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
  int v10 = *(unsigned __int8 *)(v2 + 37);
  if (v10 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v10);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 38) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 39) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  int v11 = *(unsigned __int8 *)(v2 + 48);
  if (v11 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v12 = *(void *)(v2 + 40);
    char v13 = v11 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v12, v13);
  }
  int v14 = *(unsigned __int8 *)(v2 + 49);
  if (v14 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v14);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatStyle.DateFieldCollection.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 6386277;
  switch(a1)
  {
    case 1:
      uint64_t result = 1918985593;
      break;
    case 2:
      uint64_t result = 0x72657472617571;
      break;
    case 3:
      uint64_t result = 0x68746E6F6DLL;
      break;
    case 4:
      uint64_t result = 1801807223;
      break;
    case 5:
      uint64_t result = 7954788;
      break;
    case 6:
      uint64_t result = 0x616559664F796164;
      break;
    case 7:
      uint64_t result = 0x7961646B656577;
      break;
    case 8:
      uint64_t result = 0x6F69726550796164;
      break;
    case 9:
      uint64_t result = 1920298856;
      break;
    case 10:
      uint64_t result = 0x6574756E696DLL;
      break;
    case 11:
      uint64_t result = 0x646E6F636573;
      break;
    case 12:
      uint64_t result = 0x7246646E6F636573;
      break;
    case 13:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Date.FormatStyle.DateFieldCollection.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateFieldCollection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of LocalePreferences?(v3, (uint64_t)&v25, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v25, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  char v11 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    outlined init with take of LocalePreferences?(v3 + 8, (uint64_t)v24, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
    outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
    char v11 = 1;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 17, (uint64_t)&v23, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v23, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
    char v11 = 2;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 18, (uint64_t)&v22, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v22, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
    char v11 = 3;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 19, (uint64_t)&v21, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v21, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
    char v11 = 4;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 24, (uint64_t)v20, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
    outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
    char v11 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 34, (uint64_t)&v19, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v19, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
    char v11 = 6;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 35, (uint64_t)&v18, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v18, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
    char v11 = 7;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 36, (uint64_t)&v17, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v17, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
    char v11 = 8;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 37, (uint64_t)&v16, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v16, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
    char v11 = 9;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 38, (uint64_t)&v15, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v15, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
    char v11 = 10;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 39, (uint64_t)&v14, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v14, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    char v11 = 11;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 40, (uint64_t)v13, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
    char v11 = 12;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 49, (uint64_t)&v12, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v12, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
    char v11 = 13;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  return Date.FormatStyle.DateFieldCollection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.DateFieldCollection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.DateFieldCollection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Date.FormatStyle.DateFieldCollection.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

double protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.DateFieldCollection@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized Date.FormatStyle.DateFieldCollection.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_WORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateFieldCollection(void *a1)
{
  return Date.FormatStyle.DateFieldCollection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.DateFieldCollection()
{
  Hasher.init(_seed:)();
  Date.FormatStyle.DateFieldCollection.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.DateFieldCollection()
{
  Hasher.init(_seed:)();
  Date.FormatStyle.DateFieldCollection.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.DateFieldCollection(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  __int16 v6 = *(_WORD *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  __int16 v8 = *(_WORD *)(a2 + 48);
  return specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)((unsigned __int8 *)v5, (unsigned __int8 *)v7);
}

uint64_t Date.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 72);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 72) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 88);
  return swift_unknownObjectRetain();
}

uint64_t (*Date.FormatStyle.timeZone.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 104) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.FormatStyle.capitalizationContext.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 120);
}

uint64_t (*Date.FormatStyle.capitalizationContext.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.attributed.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v3 = v1[5];
  long long v14 = v1[4];
  long long v15 = v3;
  v16[0] = v1[6];
  long long v4 = v16[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v1 + 106);
  long long v5 = v1[1];
  v11[0] = *v1;
  v11[1] = v5;
  long long v6 = v1[3];
  long long v12 = v1[2];
  long long v13 = v6;
  *(_OWORD *)((char *)v18 + 10) = *(_OWORD *)((char *)v16 + 10);
  uint64_t v17[5] = v3;
  v18[0] = v4;
  void v17[3] = v6;
  v17[4] = v14;
  v17[1] = v5;
  _OWORD v17[2] = v12;
  v17[0] = v11[0];
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v17);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v19);
  long long v7 = v19[5];
  a1[4] = v19[4];
  a1[5] = v7;
  a1[6] = v20[0];
  *(_OWORD *)((char *)a1 + 106) = *(_OWORD *)((char *)v20 + 10);
  long long v8 = v19[1];
  *a1 = v19[0];
  a1[1] = v8;
  long long v9 = v19[3];
  a1[2] = v19[2];
  a1[3] = v9;
  return outlined retain of Date.FormatStyle((uint64_t)v11);
}

uint64_t Date.AttributedStyle.InnerStyle.hash(into:)(uint64_t a1)
{
  void (*v24)(void *__return_ptr, void, void);
  void (*v25)(void *__return_ptr, void, void);
  Swift::UInt8 v26;
  Swift::UInt8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  Swift::UInt v58;
  Swift::UInt v59;
  Swift::UInt8 v60;
  Swift::UInt8 v61;
  Swift::UInt8 v62;
  uint64_t v63;
  uint64_t v64;
  Swift::UInt v65;
  Swift::UInt8 v66;
  uint64_t v67;
  void (*v68)(void, void, void);
  uint64_t v69;
  void (*v70)(void, void, void);
  unsigned char *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  Swift::UInt v94;
  Swift::UInt v95;
  Swift::UInt8 v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  uint64_t v99;
  void *v100;
  unsigned char v101[144];
  unsigned char v102[8];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  char v119;
  void v120[18];
  unsigned char v121[144];
  unsigned char v122[144];
  long long v123;
  long long v124;
  long long v125;
  __int16 v126;
  long long v127[8];
  _OWORD v128[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v127);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v127, v128);
  int v3 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v128);
  long long v4 = (void *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v128);
  uint64_t v5 = (uint64_t)v4;
  if (v3 != 1)
  {
    Hasher._combine(_:)(0);
    __int16 v16 = *(_WORD *)(v5 + 48);
    long long v17 = *(_OWORD *)(v5 + 16);
    char v123 = *(_OWORD *)v5;
    char v124 = v17;
    id v125 = *(_OWORD *)(v5 + 32);
    uint64_t v126 = v16;
    Swift::UInt v18 = *(void *)(v5 + 56);
    int v19 = *(unsigned __int8 *)(v5 + 64);
    outlined retain of Date.FormatStyle(v5);
    specialized Optional<A>.hash(into:)(a1);
    if (v19 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v18);
    }
    uint64_t v20 = *(void *)(v5 + 80);
    uint64_t ObjectType = swift_getObjectType();
    char v22 = *(uint64_t (**)(void, void))(v20 + 48);
    swift_unknownObjectRetain();
    if (v22(ObjectType, v20))
    {
      Swift::UInt8 v23 = 1;
LABEL_12:
      Hasher._combine(_:)(v23);
LABEL_79:
      swift_unknownObjectRelease();
      uint64_t v63 = *(void *)(v5 + 96);
      uint64_t v64 = *(void *)(v5 + 112);
      uint64_t v65 = *(unsigned __int8 *)(v5 + 120);
      id v66 = *(unsigned char *)(v5 + 121);
      id v67 = swift_getObjectType();
      uint64_t v68 = *(void (**)(void, void, void))(v63 + 112);
      swift_unknownObjectRetain();
      v68(a1, v67, v63);
      swift_unknownObjectRelease();
      uint64_t v69 = swift_getObjectType();
      id v70 = *(void (**)(void, void, void))(v64 + 120);
      swift_unknownObjectRetain();
      v70(a1, v69, v64);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v65);
      Hasher._combine(_:)(v66);
      return outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v20 + 64))(ObjectType, v20);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v24 = *(void (**)(void *__return_ptr, void, void))(v20 + 464);
    swift_unknownObjectRetain();
    v24(v120, ObjectType, v20);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v120, (uint64_t)v121, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v122, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v122) == 1)
    {
      Swift::UInt8 v23 = 0;
      goto LABEL_12;
    }
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v102[0] == 2)
    {
      id v26 = 0;
    }
    else
    {
      id v26 = v102[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v26);
    uint64_t v28 = v103;
    if (v103)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v28 + 16));
      uint64_t v29 = *(void *)(v28 + 16);
      if (v29)
      {
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v30 = v28 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v30 += 16;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
        if (!v104)
        {
LABEL_28:
          Hasher._combine(_:)(0);
          if (!v105) {
            goto LABEL_29;
          }
          goto LABEL_45;
        }
LABEL_44:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v105)
        {
LABEL_29:
          Hasher._combine(_:)(0);
          uint64_t v31 = v106;
          if (!v106) {
            goto LABEL_30;
          }
          goto LABEL_46;
        }
LABEL_45:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v31 = v106;
        if (!v106)
        {
LABEL_30:
          Hasher._combine(_:)(0);
          uint64_t v32 = v107;
          if (!v107)
          {
LABEL_31:
            Hasher._combine(_:)(0);
            goto LABEL_48;
          }
LABEL_47:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v32);
          swift_bridgeObjectRelease();
LABEL_48:
          char v38 = v108;
          uint64_t v39 = v109;
          char v41 = v110;
          uint64_t v40 = v111;
          id v42 = v112;
          if (v108)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v43 = v39;
            id v44 = v41;
            id v45 = v40;
            id v46 = v42;
            id v47 = v38;
            _CFObject.hash(into:)();
            long long v100 = v38;
            if (v39) {
              goto LABEL_50;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v52 = v42;
            uint64_t v53 = v39;
            uint64_t v54 = v41;
            uint64_t v55 = v40;
            long long v100 = 0;
            if (v39)
            {
LABEL_50:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v48 = v39;
              _CFObject.hash(into:)();

              if (v41) {
                goto LABEL_51;
              }
              goto LABEL_56;
            }
          }
          Hasher._combine(_:)(0);
          if (v41)
          {
LABEL_51:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v49 = v41;
            _CFObject.hash(into:)();

            if (v40) {
              goto LABEL_52;
            }
            goto LABEL_57;
          }
LABEL_56:
          Hasher._combine(_:)(0);
          if (v40)
          {
LABEL_52:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v50 = v40;
            _CFObject.hash(into:)();

            if (v42)
            {
LABEL_53:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v51 = v42;
              _CFObject.hash(into:)();

              goto LABEL_59;
            }
LABEL_58:
            Hasher._combine(_:)(0);
            id v51 = 0;
LABEL_59:

            id v56 = v113;
            if (v56)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v56);
              swift_bridgeObjectRelease();
              uint64_t v57 = v114;
              if (v114) {
                goto LABEL_61;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v57 = v114;
              if (v114)
              {
LABEL_61:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v57);
                swift_bridgeObjectRelease();
                if (v115)
                {
LABEL_62:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_66:
                  if (v116 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v58 = v116 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v58);
                  }
                  if (v117 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    long long v59 = v117 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v59);
                  }
                  if (v118 == 2)
                  {
                    long long v60 = 0;
                  }
                  else
                  {
                    long long v60 = v118 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v60);
                  if (v119 == 2)
                  {
                    uint64_t v61 = 0;
                  }
                  else
                  {
                    long long v62 = v119 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v61 = v62;
                  }
                  Hasher._combine(_:)(v61);
                  outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_79;
                }
LABEL_65:
                Hasher._combine(_:)(0);
                goto LABEL_66;
              }
            }
            Hasher._combine(_:)(0);
            if (v115) {
              goto LABEL_62;
            }
            goto LABEL_65;
          }
LABEL_57:
          Hasher._combine(_:)(0);
          if (v42) {
            goto LABEL_53;
          }
          goto LABEL_58;
        }
LABEL_46:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v31);
        swift_bridgeObjectRelease();
        uint64_t v32 = v107;
        if (!v107) {
          goto LABEL_31;
        }
        goto LABEL_47;
      }
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v33 = v101;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v33 = v102;
    }
    outlined retain of LocalePreferences(v33);
    if (!v104) {
      goto LABEL_28;
    }
    goto LABEL_44;
  }
  uint64_t v6 = v4[1];
  uint64_t v7 = v4[3];
  uint64_t v8 = v4[4];
  uint64_t v99 = v4[5];
  Hasher._combine(_:)(1uLL);
  uint64_t v9 = swift_getObjectType();
  int v10 = *(void (**)(void, void, void))(v6 + 112);
  outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  swift_unknownObjectRetain();
  v10(a1, v9, v6);
  swift_unknownObjectRelease();
  uint64_t v11 = swift_getObjectType();
  long long v12 = *(void (**)(void, void, void))(v7 + 120);
  swift_unknownObjectRetain();
  v12(a1, v11, v7);
  swift_unknownObjectRelease();
  if (v8)
  {
    Hasher._combine(_:)(1u);
    uint64_t v13 = swift_getObjectType();
    long long v14 = *(uint64_t (**)(void, void))(v99 + 48);
    swift_unknownObjectRetain_n();
    if (v14(v13, v99))
    {
      Swift::UInt8 v15 = 1;
LABEL_16:
      Hasher._combine(_:)(v15);
      swift_unknownObjectRelease_n();
      goto LABEL_17;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v99 + 64))(v13, v99);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    char v25 = *(void (**)(void *__return_ptr, void, void))(v99 + 464);
    swift_unknownObjectRetain();
    v25(v120, v13, v99);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v120, (uint64_t)v121, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v122, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v122) == 1)
    {
      Swift::UInt8 v15 = 0;
      goto LABEL_16;
    }
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v102[0] == 2)
    {
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = v102[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v27);
    uint64_t v34 = v103;
    if (v103)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v34 + 16));
      char v35 = *(void *)(v34 + 16);
      if (v35)
      {
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        long long v36 = v34 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v36 += 16;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease();
        if (!v104)
        {
LABEL_39:
          Hasher._combine(_:)(0);
          if (!v105) {
            goto LABEL_40;
          }
          goto LABEL_85;
        }
LABEL_84:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v105)
        {
LABEL_40:
          Hasher._combine(_:)(0);
          long long v37 = v106;
          if (!v106)
          {
LABEL_41:
            Hasher._combine(_:)(0);
            goto LABEL_87;
          }
LABEL_86:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v37);
          swift_bridgeObjectRelease();
LABEL_87:
          uint64_t v73 = v107;
          if (v107)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v73);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v74 = v108;
          long long v75 = v109;
          id v77 = v110;
          uint64_t v76 = v111;
          uint64_t v78 = v112;
          if (v108)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v79 = v75;
            uint64_t v80 = v77;
            uint64_t v81 = v76;
            uint64_t v82 = v78;
            id v83 = v74;
            _CFObject.hash(into:)();
            if (v75) {
              goto LABEL_92;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v88 = v78;
            uint64_t v89 = v75;
            uint64_t v90 = v77;
            id v91 = v76;
            if (v75)
            {
LABEL_92:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v84 = v75;
              _CFObject.hash(into:)();

              if (v77) {
                goto LABEL_93;
              }
              goto LABEL_98;
            }
          }
          Hasher._combine(_:)(0);
          if (v77)
          {
LABEL_93:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v85 = v77;
            _CFObject.hash(into:)();

            if (v76) {
              goto LABEL_94;
            }
            goto LABEL_99;
          }
LABEL_98:
          Hasher._combine(_:)(0);
          if (v76)
          {
LABEL_94:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v86 = v76;
            _CFObject.hash(into:)();

            if (v78)
            {
LABEL_95:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v87 = v78;
              _CFObject.hash(into:)();

              goto LABEL_101;
            }
LABEL_100:
            Hasher._combine(_:)(0);
            uint64_t v87 = 0;
LABEL_101:

            uint64_t v92 = v113;
            if (v92)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v92);
              swift_bridgeObjectRelease();
            }
            else
            {
              Hasher._combine(_:)(0);
            }
            uint64_t v93 = v114;
            if (v114)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v93);
              swift_bridgeObjectRelease();
              if (v115)
              {
LABEL_106:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_109:
                if (v116 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  long long v94 = v116 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v94);
                }
                if (v117 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  long long v95 = v117 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v95);
                }
                if (v118 == 2)
                {
                  uint64_t v96 = 0;
                }
                else
                {
                  uint64_t v96 = v118 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v96);
                if (v119 == 2)
                {
                  long long v97 = 0;
                }
                else
                {
                  uint64_t v98 = v119 & 1;
                  Hasher._combine(_:)(1u);
                  long long v97 = v98;
                }
                Hasher._combine(_:)(v97);
                outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease_n();
                goto LABEL_17;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              if (v115) {
                goto LABEL_106;
              }
            }
            Hasher._combine(_:)(0);
            goto LABEL_109;
          }
LABEL_99:
          Hasher._combine(_:)(0);
          if (v78) {
            goto LABEL_95;
          }
          goto LABEL_100;
        }
LABEL_85:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        long long v37 = v106;
        if (!v106) {
          goto LABEL_41;
        }
        goto LABEL_86;
      }
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
      id v72 = v101;
    }
    else
    {
      Hasher._combine(_:)(0);
      id v72 = v102;
    }
    outlined retain of LocalePreferences(v72);
    if (!v104) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
  Hasher._combine(_:)(0);
LABEL_17:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

uint64_t Date.AttributedStyle.InnerStyle.encode(to:)(void *a1)
{
  long long v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys>);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys>);
  *(void *)&long long v29 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.CodingKeys>);
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v41);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v42);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v42) == 1)
  {
    uint64_t v13 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v42);
    long long v29 = *(_OWORD *)(v13 + 32);
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v28 = *(void *)(v13 + 56);
    LOBYTE(v33) = 1;
    long long v15 = *(_OWORD *)v13;
    long long v26 = *(_OWORD *)(v13 + 16);
    long long v27 = v15;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v40);
    _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v40);
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v33 = v27;
    long long v34 = v26;
    long long v35 = v29;
    *(void *)&long long v36 = v14;
    *((void *)&v36 + 1) = v28;
    lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
    uint64_t v16 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v16);
  }
  else
  {
    long long v17 = (long long *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v42);
    LOBYTE(v33) = 0;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v40);
    uint64_t v18 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v40);
    outlined retain of Date.FormatStyle(v18);
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v19 = *v17;
    long long v20 = v17[1];
    long long v21 = v17[3];
    long long v35 = v17[2];
    long long v36 = v21;
    long long v33 = v19;
    long long v34 = v20;
    long long v22 = v17[4];
    long long v23 = v17[5];
    long long v24 = v17[6];
    *(_OWORD *)((char *)v39 + 10) = *(long long *)((char *)v17 + 106);
    long long v38 = v23;
    v39[0] = v24;
    long long v37 = v22;
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  return outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

uint64_t Date.AttributedStyle.InnerStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v24 = a2;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys>);
  uint64_t v26 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys>);
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.CodingKeys>);
  uint64_t v27 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  long long v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  uint64_t v12 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    uint64_t v13 = v28;
    uint64_t v45 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v14 = v8;
    if (*(void *)(v45 + 16) == 1)
    {
      if (*(unsigned char *)(v45 + 32))
      {
        LOBYTE(v37) = 1;
        lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
        long long v15 = v4;
        uint64_t v16 = v14;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v17 = v27;
        (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v16);
        long long v37 = v30;
        long long v38 = v31;
        long long v39 = v32;
        long long v40 = v33;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v37);
        long long v23 = &v37;
      }
      else
      {
        LOBYTE(v37) = 0;
        lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        long long v22 = (void (**)(char *, uint64_t))(v27 + 8);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
        swift_bridgeObjectRelease();
        (*v22)(v10, v8);
        long long v34 = v41;
        long long v35 = v42;
        v36[0] = v43[0];
        *(_OWORD *)((char *)v36 + 10) = *(_OWORD *)((char *)v43 + 10);
        long long v30 = v37;
        long long v31 = v38;
        long long v32 = v39;
        long long v33 = v40;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v30);
        long long v23 = &v30;
      }
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v23, v44);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v44, v24);
    }
    else
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v20 = &type metadata for Date.AttributedStyle.InnerStyle;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA70], v18);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0x745374616D726F66;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AttributedStyle.InnerStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.AttributedStyle.InnerStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AttributedStyle.InnerStyle@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.AttributedStyle.InnerStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AttributedStyle.InnerStyle(void *a1)
{
  return Date.AttributedStyle.InnerStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.AttributedStyle.InnerStyle()
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v3);
  Hasher.init(_seed:)();
  Date.AttributedStyle.InnerStyle.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AttributedStyle.InnerStyle()
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v3);
  Hasher.init(_seed:)();
  Date.AttributedStyle.InnerStyle.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t Date.AttributedStyle.format(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v104);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v104, v105);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v105) == 1)
  {
    uint64_t v5 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v105);
    uint64_t v6 = *(void *)(v5 + 48);
    uint64_t v7 = *(void *)(v5 + 56);
    long long v72 = *(_OWORD *)(v5 + 16);
    long long v84 = *(_OWORD *)v5;
    long long v85 = v72;
    *(_OWORD *)uint64_t v86 = *(_OWORD *)(v5 + 32);
    *(void *)&v86[16] = v6;
    *(void *)&v86[24] = v7;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v104, v90);
    _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v90);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    ICUDateFormatter.DateFormatInfo.init(_:)(&v84, (uint64_t)&v74);
    long long v84 = v74;
    long long v85 = v75;
    v86[0] = v76[0];
    *(_OWORD *)&v86[8] = *(_OWORD *)&v76[8];
    v86[24] = v76[24];
    long long v87 = v77;
    char v88 = v78;
    uint64_t v89 = *((void *)&v78 + 1);
    uint64_t v8 = &v84;
  }
  else
  {
    uint64_t v9 = (long long *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v105);
    long long v77 = v9[4];
    long long v78 = v9[5];
    v79[0] = v9[6];
    *(_OWORD *)((char *)v79 + 10) = *(long long *)((char *)v9 + 106);
    long long v74 = *v9;
    long long v75 = v9[1];
    *(_OWORD *)uint64_t v76 = v9[2];
    *(_OWORD *)&v76[16] = v9[3];
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v104, v90);
    uint64_t v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v90);
    outlined retain of Date.FormatStyle(v10);
    outlined retain of Date.FormatStyle((uint64_t)v9);
    ICUDateFormatter.DateFormatInfo.init(_:)(&v74, (uint64_t)&v84);
    long long v74 = v84;
    long long v75 = v85;
    v76[0] = v86[0];
    *(_OWORD *)&v76[8] = *(_OWORD *)&v86[8];
    v76[24] = v86[24];
    long long v77 = v87;
    LOBYTE(v78) = v88;
    *((void *)&v78 + 1) = v89;
    uint64_t v8 = &v74;
  }
  uint64_t v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
  if (!v11) {
    goto LABEL_23;
  }
  *(void *)&v90[0] = v4;
  swift_retain();
  Swift::tuple_String_OpaquePointer_optional v106 = ICUDateFormatter.attributedFormat(_:)(v12);
  if (!v106.value._0._object)
  {
    swift_release();
LABEL_23:
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v90, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v74);
    uint64_t result = swift_release();
    uint64_t v17 = v74;
    goto LABEL_24;
  }
  uint64_t countAndFlagsBits = v106.value._0._countAndFlagsBits;
  unint64_t object = v106.value._0._object;
  rawValue = v106.value._1._rawValue;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  uint64_t v16 = MEMORY[0x1E4FBC870];
  AttributedString.init(_:attributes:)(v91, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v90);
  uint64_t v17 = *(void *)&v90[0];
  uint64_t v18 = rawValue[2];
  if (!v18)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release_n();
LABEL_24:
    *a2 = v17;
    return result;
  }
  uint64_t v64 = a2;
  swift_bridgeObjectRetain();
  uint64_t v68 = object;
  lazy protocol witness table accessor for type String and conformance String();
  long long v19 = (char *)(rawValue + 6);
  uint64_t v67 = countAndFlagsBits;
  while (1)
  {
    uint64_t v20 = *((unsigned int *)v19 - 4);
    uint64_t v73 = v19;
    *(void *)&long long v74 = countAndFlagsBits;
    *((void *)&v74 + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v21 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)&long long v74 = countAndFlagsBits;
    *((void *)&v74 + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v22 = String.Index.init<A>(utf16Offset:in:)();
    if (v22 >> 14 < v21 >> 14) {
      break;
    }
    unint64_t v23 = v22;
    uint64_t v71 = v18;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v21, v23, (_OWORD *)v17, (uint64_t *)&v74);
    uint64_t v24 = *((void *)&v75 + 1);
    if (*((void *)&v75 + 1) == 2) {
      goto LABEL_27;
    }
    uint64_t v25 = v74;
    uint64_t v69 = v75;
    uint64_t v70 = *((void *)&v74 + 1);
    long long v26 = *(_OWORD *)v76;
    long long v27 = *(_OWORD *)&v76[16];
    uint64_t v28 = MEMORY[0x1E4FBC868];
    uint64_t v82 = MEMORY[0x1E4FBC868];
    uint64_t v83 = v16;
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v20, (char *)&v74);
    if (v74 == 17)
    {
      uint64_t v29 = v28;
    }
    else
    {
      specialized AttributeContainer.subscript.setter(v74);
      uint64_t v29 = v82;
      uint64_t v16 = v83;
    }
    v81[0] = v29;
    v81[1] = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v30 = *(_OWORD *)(v17 + 32);
      v101[0] = *(_OWORD *)(v17 + 16);
      v101[1] = v30;
      void v101[2] = *(_OWORD *)(v17 + 48);
      uint64_t v31 = *(void *)(v17 + 64);
      uint64_t v65 = *(void *)(v17 + 72);
      uint64_t v66 = v25;
      uint64_t v32 = *(void *)(v17 + 80);
      uint64_t v33 = *(void *)(v17 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v101);
      swift_unknownObjectRetain();
      uint64_t v34 = v32;
      uint64_t v25 = v66;
      uint64_t v35 = AttributedString.Guts.init(string:runs:)(v101, v31, v65, v34, v33);
      swift_release();
      uint64_t v17 = v35;
    }
    long long v36 = *(_OWORD *)(v17 + 32);
    v100[0] = *(_OWORD *)(v17 + 16);
    v100[1] = v36;
    v100[2] = *(_OWORD *)(v17 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v100);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v100);
    long long v37 = *(_OWORD *)(v17 + 16);
    long long v38 = *(_OWORD *)(v17 + 48);
    v99[1] = *(_OWORD *)(v17 + 32);
    v99[2] = v38;
    v99[0] = v37;
    long long v39 = *(_OWORD *)(v17 + 16);
    v102[1] = *(_OWORD *)(v17 + 32);
    v102[2] = v38;
    v102[0] = v39;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v102, (uint64_t)v103);
    outlined retain of Locale((uint64_t)v103);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v99);
    swift_release();
    *(void *)&long long v84 = v25;
    *((void *)&v84 + 1) = v70;
    *(void *)&long long v85 = v69;
    *((void *)&v85 + 1) = v24;
    *(_OWORD *)uint64_t v86 = v26;
    *(_OWORD *)&v86[16] = v27;
    long long v40 = *(_OWORD *)(v17 + 16);
    long long v41 = *(_OWORD *)(v17 + 48);
    long long v97 = *(_OWORD *)(v17 + 32);
    long long v98 = v41;
    long long v96 = v40;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v92);
    uint64_t v42 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v49 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    outlined release of Locale((uint64_t)v90);
    swift_release();
    *(void *)&long long v74 = v17;
    *((void *)&v74 + 1) = v42;
    *(void *)&long long v75 = v44;
    *((void *)&v75 + 1) = v46;
    *(void *)uint64_t v76 = v48;
    *(void *)&v76[8] = v49;
    *(void *)&v76[16] = v51;
    *(void *)&v76[24] = v53;
    *(void *)&long long v77 = v55;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    id v56 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v57 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v57);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v56, &v80);
    os_unfair_lock_unlock(v57);
    swift_release();
    uint64_t v58 = v80;
    *((void *)&v77 + 1) = v80;
    BigString.init()();
    uint64_t v80 = 0;
    MEMORY[0x185309530](&v80, 8);
    uint64_t v59 = v80;
    type metadata accessor for AttributedString.Guts();
    uint64_t v60 = swift_allocObject();
    char v61 = BigString.isEmpty.getter();
    uint64_t v16 = MEMORY[0x1E4FBC870];
    if ((v61 & 1) == 0) {
      goto LABEL_26;
    }
    long long v62 = v94;
    *(_OWORD *)(v60 + 16) = v93;
    *(_OWORD *)(v60 + 32) = v62;
    *(_OWORD *)(v60 + 48) = v95;
    *(void *)(v60 + 64) = 0;
    *(void *)(v60 + 72) = 0;
    *(void *)(v60 + 80) = 0;
    *(void *)(v60 + 88) = v59;
    swift_release();
    LOBYTE(v80) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v81, (char *)&v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v77 + 1) != v58) {
      goto LABEL_28;
    }
    long long v19 = v73 + 24;
    uint64_t v17 = v74;
    swift_release();
    uint64_t v18 = v71 - 1;
    uint64_t countAndFlagsBits = v67;
    unint64_t object = v68;
    if (v71 == 1)
    {
      swift_bridgeObjectRelease();
      a2 = v64;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *Date.AttributedStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v40);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v40, v41);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41) == 1)
  {
    uint64_t v7 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
    long long v22 = *(_OWORD *)(v7 + 16);
    long long v24 = *(_OWORD *)v7;
    outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    long long v26 = v24;
    long long v27 = v22;
    uint64_t v28 = v5;
    uint64_t v29 = v6;
    uint64_t v30 = v8;
    uint64_t v31 = v9;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v26);
  }
  else
  {
    uint64_t v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    char v25 = *(unsigned char *)(v10 + 121);
    uint64_t v11 = a2;
    char v12 = *(unsigned char *)(v10 + 120);
    uint64_t v13 = *(void *)(v10 + 56);
    char v14 = *(unsigned char *)(v10 + 64);
    long long v19 = *(_OWORD *)(v10 + 16);
    long long v20 = *(_OWORD *)v10;
    uint64_t v15 = *(void *)(v10 + 32);
    uint64_t v16 = *(void *)(v10 + 40);
    __int16 v17 = *(_WORD *)(v10 + 48);
    long long v21 = *(_OWORD *)(v10 + 104);
    long long v23 = *(_OWORD *)(v10 + 88);
    outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    long long v26 = v20;
    long long v27 = v19;
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    LOWORD(v30) = v17;
    uint64_t v31 = v13;
    char v32 = v14;
    uint64_t v33 = v5;
    uint64_t v34 = v6;
    long long v35 = v23;
    long long v36 = v21;
    char v37 = v12;
    a2 = v11;
    char v38 = v25;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v26);
  }
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v26, v39);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v39, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AttributedStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x79745372656E6E69 && a2 == 0xEA0000000000656CLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.AttributedStyle.hash(into:)(uint64_t a1)
{
  void (*v21)(void *__return_ptr, void, void);
  void (*v22)(void *__return_ptr, void, void);
  Swift::UInt8 v23;
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  Swift::UInt v60;
  Swift::UInt v61;
  Swift::UInt8 v62;
  Swift::UInt8 v63;
  Swift::UInt8 v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  Swift::UInt8 v68;
  uint64_t v69;
  void (*v70)(void, void, void);
  uint64_t v71;
  void (*v72)(void, void, void);
  unsigned char *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Swift::UInt v95;
  Swift::UInt v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  Swift::UInt8 v99;
  uint64_t v100;
  void (*v101)(void, void, void);
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  unsigned char v109[144];
  unsigned char v110[8];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  char v126;
  char v127;
  void v128[18];
  unsigned char v129[144];
  unsigned char v130[144];
  _OWORD v131[11];
  __int16 v132;
  long long v133[8];
  _OWORD v134[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v133);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v133, v134);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v134) != 1)
  {
    uint64_t v11 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v134);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v133, v131);
    uint64_t v12 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v131);
    Hasher._combine(_:)(0);
    __int16 v13 = *(_WORD *)(v11 + 48);
    long long v14 = *(_OWORD *)(v11 + 16);
    v131[8] = *(_OWORD *)v11;
    v131[9] = v14;
    v131[10] = *(_OWORD *)(v11 + 32);
    id v132 = v13;
    Swift::UInt v15 = *(void *)(v11 + 56);
    char v16 = *(unsigned char *)(v11 + 64);
    outlined retain of Date.FormatStyle(v12);
    outlined retain of Date.FormatStyle(v11);
    specialized Optional<A>.hash(into:)(a1);
    if (v16)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v15);
    }
    uint64_t v17 = *(void *)(v11 + 80);
    uint64_t ObjectType = swift_getObjectType();
    long long v19 = *(uint64_t (**)(void, void))(v17 + 48);
    swift_unknownObjectRetain();
    if (v19(ObjectType, v17))
    {
      Swift::UInt8 v20 = 1;
LABEL_12:
      Hasher._combine(_:)(v20);
LABEL_80:
      swift_unknownObjectRelease();
      uint64_t v65 = *(void *)(v11 + 96);
      uint64_t v66 = *(void *)(v11 + 112);
      uint64_t v67 = *(unsigned __int8 *)(v11 + 120);
      uint64_t v68 = *(unsigned char *)(v11 + 121);
      uint64_t v69 = swift_getObjectType();
      uint64_t v70 = *(void (**)(void, void, void))(v65 + 112);
      swift_unknownObjectRetain();
      v70(a1, v69, v65);
      swift_unknownObjectRelease();
      uint64_t v71 = swift_getObjectType();
      long long v72 = *(void (**)(void, void, void))(v66 + 120);
      swift_unknownObjectRetain();
      v72(a1, v71, v66);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      goto LABEL_81;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v21 = *(void (**)(void *__return_ptr, void, void))(v17 + 464);
    swift_unknownObjectRetain();
    v21(v128, ObjectType, v17);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v129, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v130, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v130) == 1)
    {
      Swift::UInt8 v20 = 0;
      goto LABEL_12;
    }
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v110, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v110[0] == 2)
    {
      long long v23 = 0;
    }
    else
    {
      long long v23 = v110[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v23);
    char v25 = v111;
    if (v111)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v25 + 16));
      long long v26 = *(void *)(v25 + 16);
      if (v26)
      {
        outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        long long v27 = v25 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v27 += 16;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        if (!v112)
        {
LABEL_28:
          Hasher._combine(_:)(0);
          if (!v113) {
            goto LABEL_29;
          }
          goto LABEL_46;
        }
LABEL_45:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v113)
        {
LABEL_29:
          Hasher._combine(_:)(0);
          uint64_t v28 = v114;
          if (!v114) {
            goto LABEL_30;
          }
          goto LABEL_47;
        }
LABEL_46:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = v114;
        if (!v114)
        {
LABEL_30:
          Hasher._combine(_:)(0);
          uint64_t v29 = v115;
          if (!v115)
          {
LABEL_31:
            uint64_t v30 = a1;
            Hasher._combine(_:)(0);
            goto LABEL_49;
          }
LABEL_48:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          uint64_t v30 = a1;
          specialized Dictionary<>.hash(into:)(a1, v29);
          swift_bridgeObjectRelease();
LABEL_49:
          char v38 = v116;
          char v37 = v117;
          long long v40 = v118;
          long long v39 = v119;
          long long v41 = v120;
          Swift::tuple_String_OpaquePointer_optional v106 = v119;
          id v108 = v117;
          char v102 = v120;
          if (v116)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v42 = v108;
            uint64_t v43 = v40;
            uint64_t v44 = v40;
            uint64_t v45 = v39;
            uint64_t v46 = v41;
            uint64_t v47 = v38;
            char v37 = v108;
            _CFObject.hash(into:)();
            uint64_t v104 = v38;
            if (v108) {
              goto LABEL_51;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v54 = v41;
            uint64_t v55 = v37;
            uint64_t v43 = v40;
            id v56 = v40;
            uint64_t v57 = v39;
            uint64_t v104 = 0;
            if (v37)
            {
LABEL_51:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v48 = v37;
              _CFObject.hash(into:)();

              if (v43) {
                goto LABEL_52;
              }
              goto LABEL_57;
            }
          }
          Hasher._combine(_:)(0);
          if (v43)
          {
LABEL_52:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v49 = v43;
            _CFObject.hash(into:)();

            uint64_t v50 = v106;
            if (v106) {
              goto LABEL_53;
            }
            goto LABEL_58;
          }
LABEL_57:
          Hasher._combine(_:)(0);
          uint64_t v50 = v106;
          if (v106)
          {
LABEL_53:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v51 = v50;
            _CFObject.hash(into:)();

            uint64_t v52 = v102;
            if (v102)
            {
LABEL_54:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              a1 = v30;
              uint64_t v53 = v52;
              _CFObject.hash(into:)();

              goto LABEL_60;
            }
LABEL_59:
            a1 = v30;
            Hasher._combine(_:)(0);
            uint64_t v53 = 0;
LABEL_60:

            uint64_t v58 = v121;
            if (v58)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v58);
              swift_bridgeObjectRelease();
              uint64_t v59 = v122;
              if (v122) {
                goto LABEL_62;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v59 = v122;
              if (v122)
              {
LABEL_62:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v59);
                swift_bridgeObjectRelease();
                if (v123)
                {
LABEL_63:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_67:
                  if (v124 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v60 = v124 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v60);
                  }
                  if (v125 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    char v61 = v125 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v61);
                  }
                  if (v126 == 2)
                  {
                    long long v62 = 0;
                  }
                  else
                  {
                    long long v62 = v126 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v62);
                  if (v127 == 2)
                  {
                    uint64_t v63 = 0;
                  }
                  else
                  {
                    uint64_t v64 = v127 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v63 = v64;
                  }
                  Hasher._combine(_:)(v63);
                  outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_80;
                }
LABEL_66:
                Hasher._combine(_:)(0);
                goto LABEL_67;
              }
            }
            Hasher._combine(_:)(0);
            if (v123) {
              goto LABEL_63;
            }
            goto LABEL_66;
          }
LABEL_58:
          Hasher._combine(_:)(0);
          uint64_t v52 = v102;
          if (v102) {
            goto LABEL_54;
          }
          goto LABEL_59;
        }
LABEL_47:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v28);
        swift_bridgeObjectRelease();
        uint64_t v29 = v115;
        if (!v115) {
          goto LABEL_31;
        }
        goto LABEL_48;
      }
      outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v109, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v31 = v109;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v31 = v110;
    }
    outlined retain of LocalePreferences(v31);
    if (!v112) {
      goto LABEL_28;
    }
    goto LABEL_45;
  }
  uint64_t v3 = (void *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v134);
  uint64_t v4 = v3[1];
  uint64_t v105 = v3[4];
  id v107 = v3[3];
  long long v100 = v3[5];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v133, v131);
  _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v131);
  Hasher._combine(_:)(1uLL);
  uint64_t v5 = swift_getObjectType();
  uint64_t v101 = *(void (**)(void, void, void))(v4 + 112);
  char v103 = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v133, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  swift_unknownObjectRetain();
  v101(a1, v103, v4);
  swift_unknownObjectRelease();
  uint64_t v6 = swift_getObjectType();
  char v7 = *(void (**)(void, void, void))(v107 + 120);
  swift_unknownObjectRetain();
  v7(a1, v6, v107);
  swift_unknownObjectRelease();
  if (v105)
  {
    Hasher._combine(_:)(1u);
    uint64_t v8 = swift_getObjectType();
    uint64_t v9 = *(uint64_t (**)(void, void))(v100 + 48);
    swift_unknownObjectRetain_n();
    if (v9(v8, v100))
    {
      Swift::UInt8 v10 = 1;
LABEL_16:
      Hasher._combine(_:)(v10);
      swift_unknownObjectRelease_n();
      goto LABEL_17;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v100 + 64))(v8, v100);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v22 = *(void (**)(void *__return_ptr, void, void))(v100 + 464);
    swift_unknownObjectRetain();
    v22(v128, v8, v100);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v129, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v130, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v130) == 1)
    {
      Swift::UInt8 v10 = 0;
      goto LABEL_16;
    }
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v110, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v110[0] == 2)
    {
      long long v24 = 0;
    }
    else
    {
      long long v24 = v110[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v24);
    char v32 = v111;
    if (v111)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v32 + 16));
      uint64_t v33 = *(void *)(v32 + 16);
      if (v33)
      {
        outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v34 = v32 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v34 += 16;
          --v33;
        }
        while (v33);
        swift_bridgeObjectRelease();
        if (!v112)
        {
LABEL_39:
          Hasher._combine(_:)(0);
          if (!v113) {
            goto LABEL_40;
          }
          goto LABEL_86;
        }
LABEL_85:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v113)
        {
LABEL_40:
          Hasher._combine(_:)(0);
          long long v35 = v114;
          if (!v114) {
            goto LABEL_41;
          }
          goto LABEL_87;
        }
LABEL_86:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        long long v35 = v114;
        if (!v114)
        {
LABEL_41:
          Hasher._combine(_:)(0);
          long long v36 = v115;
          if (!v115)
          {
LABEL_42:
            Hasher._combine(_:)(0);
            goto LABEL_89;
          }
LABEL_88:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v36);
          swift_bridgeObjectRelease();
LABEL_89:
          uint64_t v76 = v116;
          long long v75 = v117;
          long long v78 = v118;
          long long v77 = v119;
          uint64_t v79 = v120;
          if (v116)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v80 = v75;
            uint64_t v81 = v78;
            uint64_t v82 = v77;
            uint64_t v83 = v79;
            long long v84 = v76;
            _CFObject.hash(into:)();
            if (v75) {
              goto LABEL_91;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v89 = v79;
            uint64_t v90 = v75;
            id v91 = v78;
            uint64_t v92 = v77;
            if (v75)
            {
LABEL_91:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              long long v85 = v75;
              _CFObject.hash(into:)();

              if (v78) {
                goto LABEL_92;
              }
              goto LABEL_97;
            }
          }
          Hasher._combine(_:)(0);
          if (v78)
          {
LABEL_92:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v86 = v78;
            _CFObject.hash(into:)();

            if (v77) {
              goto LABEL_93;
            }
            goto LABEL_98;
          }
LABEL_97:
          Hasher._combine(_:)(0);
          if (v77)
          {
LABEL_93:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            long long v87 = v77;
            _CFObject.hash(into:)();

            if (v79)
            {
LABEL_94:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              char v88 = v79;
              _CFObject.hash(into:)();

              goto LABEL_100;
            }
LABEL_99:
            Hasher._combine(_:)(0);
            char v88 = 0;
LABEL_100:

            long long v93 = v121;
            if (v93)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v93);
              swift_bridgeObjectRelease();
            }
            else
            {
              Hasher._combine(_:)(0);
            }
            long long v94 = v122;
            if (v122)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v94);
              swift_bridgeObjectRelease();
              if (v123)
              {
LABEL_105:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_108:
                if (v124 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  long long v95 = v124 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v95);
                }
                if (v125 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  long long v96 = v125 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v96);
                }
                if (v126 == 2)
                {
                  long long v97 = 0;
                }
                else
                {
                  long long v97 = v126 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v97);
                if (v127 == 2)
                {
                  long long v98 = 0;
                }
                else
                {
                  uint64_t v99 = v127 & 1;
                  Hasher._combine(_:)(1u);
                  long long v98 = v99;
                }
                Hasher._combine(_:)(v98);
                outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease_n();
                goto LABEL_17;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              if (v123) {
                goto LABEL_105;
              }
            }
            Hasher._combine(_:)(0);
            goto LABEL_108;
          }
LABEL_98:
          Hasher._combine(_:)(0);
          if (v79) {
            goto LABEL_94;
          }
          goto LABEL_99;
        }
LABEL_87:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v35);
        swift_bridgeObjectRelease();
        long long v36 = v115;
        if (!v115) {
          goto LABEL_42;
        }
        goto LABEL_88;
      }
      outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v109, &demangling cache variable for type metadata for LocalePreferences?);
      long long v74 = v109;
    }
    else
    {
      Hasher._combine(_:)(0);
      long long v74 = v110;
    }
    outlined retain of LocalePreferences(v74);
    if (!v112) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }
  Hasher._combine(_:)(0);
LABEL_17:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_81:
  outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v133, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
  return outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v133, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

uint64_t static Date.AttributedStyle.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v6);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v6, v5);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4);
  return specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(v5, v4) & 1;
}

uint64_t Date.AttributedStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v10, v9);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.AttributedStyle.hashValue.getter()
{
  long long v1 = v0[5];
  long long v10 = v0[4];
  long long v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(long long *)((char *)v0 + 106);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t Date.AttributedStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    long long v8 = v18;
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v14);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v14, v15);
    long long v9 = v15[5];
    void v8[4] = v15[4];
    v8[5] = v9;
    v8[6] = v16[0];
    *(_OWORD *)((char *)v8 + 106) = *(_OWORD *)((char *)v16 + 10);
    long long v10 = v15[1];
    *long long v8 = v15[0];
    v8[1] = v10;
    long long v11 = v15[3];
    v8[2] = v15[2];
    v8[3] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

_OWORD *protocol witness for FormatStyle.locale(_:) in conformance Date.AttributedStyle@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v40);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v40, v41);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41) == 1)
  {
    uint64_t v7 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
    long long v22 = *(_OWORD *)(v7 + 16);
    long long v24 = *(_OWORD *)v7;
    outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    long long v26 = v24;
    long long v27 = v22;
    uint64_t v28 = v5;
    uint64_t v29 = v6;
    uint64_t v30 = v8;
    uint64_t v31 = v9;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v26);
  }
  else
  {
    uint64_t v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    char v25 = *(unsigned char *)(v10 + 121);
    long long v11 = a2;
    char v12 = *(unsigned char *)(v10 + 120);
    uint64_t v13 = *(void *)(v10 + 56);
    char v14 = *(unsigned char *)(v10 + 64);
    long long v19 = *(_OWORD *)(v10 + 16);
    long long v20 = *(_OWORD *)v10;
    uint64_t v15 = *(void *)(v10 + 32);
    uint64_t v16 = *(void *)(v10 + 40);
    __int16 v17 = *(_WORD *)(v10 + 48);
    long long v21 = *(_OWORD *)(v10 + 104);
    long long v23 = *(_OWORD *)(v10 + 88);
    outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    long long v26 = v20;
    long long v27 = v19;
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    LOWORD(v30) = v17;
    uint64_t v31 = v13;
    char v32 = v14;
    uint64_t v33 = v5;
    uint64_t v34 = v6;
    long long v35 = v23;
    long long v36 = v21;
    char v37 = v12;
    a2 = v11;
    char v38 = v25;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v26);
  }
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v26, v39);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v39, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AttributedStyle@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.AttributedStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AttributedStyle(void *a1)
{
  return Date.AttributedStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.AttributedStyle()
{
  long long v1 = v0[5];
  long long v10 = v0[4];
  long long v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(long long *)((char *)v0 + 106);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AttributedStyle()
{
  long long v1 = v0[5];
  long long v10 = v0[4];
  long long v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(long long *)((char *)v0 + 106);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.AttributedStyle(long long *a1, long long *a2)
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v6);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v6, v5);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4);
  return specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(v5, v4) & 1;
}

uint64_t Date.FormatStyle.Attributed.subscript.getter()
{
  long long v1 = v0[5];
  v5[4] = v0[4];
  v5[5] = v1;
  v6[0] = v0[6];
  *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)v0 + 106);
  long long v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  long long v3 = v0[3];
  _OWORD v5[2] = v0[2];
  _OWORD v5[3] = v3;
  outlined retain of Date.FormatStyle((uint64_t)v5);
  swift_getAtKeyPath();
  return outlined release of Date.FormatStyle((uint64_t)v5);
}

uint64_t key path getter for Date.FormatStyle.Attributed.subscript<A>(dynamicMember:) : <A>Date.FormatStyle.AttributedA(_OWORD *a1, uint64_t *a2)
{
  long long v2 = a1[5];
  uint64_t v7[4] = a1[4];
  v7[5] = v2;
  v8[0] = a1[6];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)a1 + 106);
  long long v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  long long v4 = a1[3];
  _OWORD v7[2] = a1[2];
  _OWORD v7[3] = v4;
  uint64_t v5 = *a2;
  outlined retain of Date.FormatStyle((uint64_t)v7);
  Date.FormatStyle.Attributed.subscript.getter(v5);
  return outlined release of Date.FormatStyle((uint64_t)v7);
}

uint64_t Date.FormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Date.FormatStyle.Attributed.subscript.setter(a1);
  swift_release();
  long long v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + v3 + 8) - 8) + 8);

  return v4(a1);
}

void (*Date.FormatStyle.Attributed.subscript.modify(void *a1, void *a2))(uint64_t a1, char a2)
{
  uint64_t v5 = (char *)malloc(0x138uLL);
  *a1 = v5;
  *((void *)v5 + 32) = a2;
  *((void *)v5 + 33) = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x1E4FBBC10] + *a2 + 8);
  *((void *)v5 + 34) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *((void *)v5 + 35) = v7;
  size_t v8 = *(void *)(v7 + 64);
  *((void *)v5 + 36) = malloc(v8);
  *((void *)v5 + 37) = malloc(v8);
  *((void *)v5 + 38) = malloc(v8);
  long long v9 = v2[4];
  long long v10 = v2[5];
  *((_OWORD *)v5 + 4) = v9;
  *((_OWORD *)v5 + 5) = v10;
  long long v11 = v2[6];
  *((_OWORD *)v5 + 6) = v11;
  long long v12 = *(long long *)((char *)v2 + 106);
  *(_OWORD *)(v5 + 106) = v12;
  long long v13 = *v2;
  long long v14 = v2[1];
  *(_OWORD *)uint64_t v5 = *v2;
  *((_OWORD *)v5 + 1) = v14;
  long long v15 = v2[2];
  long long v16 = v2[3];
  *((_OWORD *)v5 + 2) = v15;
  *((_OWORD *)v5 + 3) = v16;
  *(_OWORD *)(v5 + 234) = v12;
  *((_OWORD *)v5 + 13) = v10;
  *((_OWORD *)v5 + 14) = v11;
  *((_OWORD *)v5 + 11) = v16;
  *((_OWORD *)v5 + 12) = v9;
  *((_OWORD *)v5 + 9) = v14;
  *((_OWORD *)v5 + 10) = v15;
  *((_OWORD *)v5 + 8) = v13;
  outlined retain of Date.FormatStyle((uint64_t)v5);
  swift_getAtKeyPath();
  outlined release of Date.FormatStyle((uint64_t)v5);
  return Date.FormatStyle.Attributed.subscript.modify;
}

void Date.FormatStyle.Attributed.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  long long v4 = *(void (**)(void, void *, void))(*(void *)(*(void *)a1 + 280) + 16);
  v4(*(void *)(*(void *)a1 + 296), (void *)v3[38], v3[34]);
  uint64_t v5 = (void *)v3[37];
  long long v11 = (void *)v3[38];
  uint64_t v7 = v3[35];
  uint64_t v6 = (void *)v3[36];
  uint64_t v8 = v3[34];
  if (a2)
  {
    v4(v3[36], v5, v3[34]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    long long v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v5, v8);
    long long v10 = v11;
    v9(v11, v8);
  }
  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    long long v10 = v11;
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v8);
  }
  free(v10);
  free(v5);
  free(v6);

  free(v3);
}

uint64_t Date.FormatStyle.Attributed.format(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = v2[5];
  long long v5 = v2[3];
  long long v123 = v2[4];
  long long v124 = v4;
  long long v6 = v2[5];
  v125[0] = v2[6];
  *(_OWORD *)((char *)v125 + 10) = *(_OWORD *)((char *)v2 + 106);
  long long v7 = v2[1];
  v120[0] = *v2;
  v120[1] = v7;
  long long v8 = v2[3];
  long long v10 = *v2;
  long long v9 = v2[1];
  long long v121 = v2[2];
  long long v122 = v8;
  long long v88 = v123;
  long long v89 = v6;
  v90[0] = v2[6];
  *(_OWORD *)((char *)v90 + 10) = *(_OWORD *)((char *)v2 + 106);
  long long v85 = v10;
  long long v86 = v9;
  uint64_t v11 = *a1;
  *(_OWORD *)long long v87 = v121;
  *(_OWORD *)&v87[16] = v5;
  outlined retain of Date.FormatStyle((uint64_t)v120);
  outlined retain of Date.FormatStyle((uint64_t)v120);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v85, (uint64_t)&v91);
  long long v85 = v91;
  long long v86 = v92;
  v87[0] = v93;
  *(_OWORD *)&v87[8] = v94;
  v87[24] = v95;
  long long v88 = v96;
  LOBYTE(v89) = v97;
  *((void *)&v89 + 1) = v98;
  uint64_t v12 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of Date.FormatStyle((uint64_t)v120);
  uint64_t v71 = a2;
  if (!v12) {
    goto LABEL_20;
  }
  *(void *)&long long v85 = v11;
  Swift::tuple_String_OpaquePointer_optional v126 = ICUDateFormatter.attributedFormat(_:)(v13);
  if (!v126.value._0._object)
  {
    swift_release();
LABEL_20:
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)(&v85, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v91);
    uint64_t v17 = v91;
    goto LABEL_21;
  }
  uint64_t countAndFlagsBits = v126.value._0._countAndFlagsBits;
  unint64_t object = v126.value._0._object;
  rawValue = v126.value._1._rawValue;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v99, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v85);
  uint64_t v17 = v85;
  uint64_t v18 = rawValue[2];
  if (!v18)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_21:
    *uint64_t v71 = v17;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v74 = countAndFlagsBits;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v19 = 0;
  long long v20 = (char *)(rawValue + 6);
  uint64_t v73 = object;
  while (1)
  {
    uint64_t v80 = v19;
    uint64_t v21 = *((unsigned int *)v20 - 4);
    *(void *)&long long v91 = countAndFlagsBits;
    *((void *)&v91 + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v22 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)&long long v91 = countAndFlagsBits;
    *((void *)&v91 + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v23 = String.Index.init<A>(utf16Offset:in:)();
    if (v23 >> 14 < v22 >> 14) {
      break;
    }
    unint64_t v24 = v23;
    long long v78 = v20;
    uint64_t v79 = v18;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v22, v24, (_OWORD *)v17, (uint64_t *)&v91);
    uint64_t v25 = *((void *)&v92 + 1);
    if (*((void *)&v92 + 1) == 2) {
      goto LABEL_24;
    }
    uint64_t v76 = *((void *)&v91 + 1);
    uint64_t v77 = v91;
    uint64_t v75 = v92;
    uint64_t v26 = v93;
    uint64_t v28 = *((void *)&v94 + 1);
    uint64_t v27 = v94;
    uint64_t v29 = v95;
    uint64_t v30 = MEMORY[0x1E4FBC868];
    uint64_t v83 = MEMORY[0x1E4FBC868];
    uint64_t v31 = MEMORY[0x1E4FBC870];
    uint64_t v84 = MEMORY[0x1E4FBC870];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v21, (char *)&v91);
    if (v91 == 17)
    {
      uint64_t v32 = v31;
      uint64_t v33 = v30;
    }
    else
    {
      specialized AttributeContainer.subscript.setter(v91);
      uint64_t v33 = v83;
      uint64_t v32 = v84;
    }
    v82[0] = v33;
    v82[1] = v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v34 = *(_OWORD *)(v17 + 32);
      v117[0] = *(_OWORD *)(v17 + 16);
      v117[1] = v34;
      v117[2] = *(_OWORD *)(v17 + 48);
      uint64_t v35 = *(void *)(v17 + 64);
      uint64_t v36 = *(void *)(v17 + 72);
      uint64_t v72 = v29;
      uint64_t v37 = v28;
      uint64_t v38 = v27;
      uint64_t v39 = v26;
      uint64_t v40 = *(void *)(v17 + 80);
      uint64_t v41 = *(void *)(v17 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v117);
      swift_unknownObjectRetain();
      uint64_t v42 = v40;
      uint64_t v26 = v39;
      uint64_t v27 = v38;
      uint64_t v28 = v37;
      uint64_t v29 = v72;
      uint64_t v43 = AttributedString.Guts.init(string:runs:)(v117, v35, v36, v42, v41);
      swift_release();
      uint64_t v17 = v43;
    }
    long long v44 = *(_OWORD *)(v17 + 32);
    v116[0] = *(_OWORD *)(v17 + 16);
    v116[1] = v44;
    v116[2] = *(_OWORD *)(v17 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v116);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v116);
    long long v45 = *(_OWORD *)(v17 + 16);
    long long v46 = *(_OWORD *)(v17 + 48);
    v115[1] = *(_OWORD *)(v17 + 32);
    v115[2] = v46;
    v115[0] = v45;
    long long v47 = *(_OWORD *)(v17 + 16);
    v118[1] = *(_OWORD *)(v17 + 32);
    v118[2] = v46;
    v118[0] = v47;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v118, (uint64_t)v119);
    outlined retain of Locale((uint64_t)v119);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v115);
    swift_release();
    uint64_t v104 = v77;
    uint64_t v105 = v76;
    uint64_t v106 = v75;
    uint64_t v107 = v25;
    uint64_t v108 = v26;
    uint64_t v109 = v27;
    uint64_t v110 = v28;
    uint64_t v111 = v29;
    long long v48 = *(_OWORD *)(v17 + 16);
    long long v49 = *(_OWORD *)(v17 + 48);
    long long v113 = *(_OWORD *)(v17 + 32);
    long long v114 = v49;
    long long v112 = v48;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v100);
    uint64_t v50 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v57 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    outlined release of Locale((uint64_t)&v85);
    swift_release();
    *(void *)&long long v91 = v17;
    *((void *)&v91 + 1) = v50;
    *(void *)&long long v92 = v52;
    *((void *)&v92 + 1) = v54;
    uint64_t v93 = v56;
    *(void *)&long long v94 = v57;
    *((void *)&v94 + 1) = v59;
    uint64_t v95 = v61;
    *(void *)&long long v96 = v63;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v64 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v65 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v65);
    uint64_t v19 = v80;
    closure #1 in static AttributedString._nextModifyIdentity.getter(v64, &v81);
    os_unfair_lock_unlock(v65);
    swift_release();
    uint64_t v66 = v81;
    *((void *)&v96 + 1) = v81;
    BigString.init()();
    uint64_t v81 = 0;
    MEMORY[0x185309530](&v81, 8);
    uint64_t v67 = v81;
    type metadata accessor for AttributedString.Guts();
    uint64_t v68 = swift_allocObject();
    uint64_t countAndFlagsBits = v74;
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_23;
    }
    long long v69 = v102;
    *(_OWORD *)(v68 + 16) = v101;
    *(_OWORD *)(v68 + 32) = v69;
    *(_OWORD *)(v68 + 48) = v103;
    *(void *)(v68 + 64) = 0;
    *(void *)(v68 + 72) = 0;
    *(void *)(v68 + 80) = 0;
    *(void *)(v68 + 88) = v67;
    swift_release();
    LOBYTE(v81) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v82, (char *)&v81);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v96 + 1) != v66) {
      goto LABEL_25;
    }
    long long v20 = v78 + 24;
    uint64_t v17 = v91;
    swift_release();
    uint64_t v18 = v79 - 1;
    unint64_t object = v73;
    if (v79 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 Date.FormatStyle.Attributed.locale(_:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)&v25[26] = *(long long *)((char *)v2 + 106);
  long long v5 = v2[1];
  long long v20 = *v2;
  long long v21 = v5;
  long long v6 = v2[3];
  long long v22 = v2[2];
  long long v23 = v6;
  long long v7 = v2[5];
  long long v24 = v2[4];
  *(_OWORD *)uint64_t v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  char v8 = v25[41];
  char v9 = v25[40];
  uint64_t v10 = *((void *)&v6 + 1);
  char v11 = v24;
  long long v16 = v21;
  long long v17 = v20;
  long long v12 = v22;
  __int16 v13 = v6;
  __n128 v18 = *(__n128 *)&v25[24];
  long long v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  long long v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  __n128 result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(unsigned char *)(a2 + 120) = v9;
  *(unsigned char *)(a2 + 121) = v8;
  return result;
}

uint64_t Date.FormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  unsigned char v54[144];
  unsigned char v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  unsigned char v74[144];
  unsigned char v75[144];
  long long v76;
  long long v77;
  long long v78;
  __int16 v79;
  _OWORD v80[2];
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  unsigned char v85[26];

  long long v3 = v1[5];
  uint64_t v83 = v1[4];
  uint64_t v84 = v3;
  *(_OWORD *)long long v85 = v1[6];
  *(_OWORD *)&v85[10] = *(_OWORD *)((char *)v1 + 106);
  long long v4 = v1[1];
  v80[0] = *v1;
  v80[1] = v4;
  long long v5 = v1[3];
  uint64_t v81 = v1[2];
  uint64_t v82 = v5;
  uint64_t v76 = v80[0];
  uint64_t v77 = v4;
  long long v78 = v81;
  uint64_t v79 = v5;
  Swift::UInt v6 = *((void *)&v5 + 1);
  int v7 = v83;
  outlined retain of Date.FormatStyle((uint64_t)v80);
  specialized Optional<A>.hash(into:)(a1);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  uint64_t v8 = v84;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  if (v10(ObjectType, v8))
  {
    Swift::UInt8 v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v12(v73, ObjectType, v8);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    __int16 v13 = 0;
  }
  else
  {
    __int16 v13 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  long long v14 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    long long v19 = v55;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  long long v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    long long v19 = v54;
LABEL_23:
    outlined retain of LocalePreferences(v19);
    if (!v57) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    long long v17 = v59;
    if (!v59) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v17);
    swift_bridgeObjectRelease();
    __n128 v18 = v60;
    if (!v60) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v17 = v59;
  if (v59) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  __n128 v18 = v60;
  if (!v60)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v18);
  swift_bridgeObjectRelease();
LABEL_28:
  long long v21 = v61;
  long long v20 = v62;
  long long v23 = v63;
  long long v22 = v64;
  long long v24 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v25 = v20;
    uint64_t v26 = v23;
    uint64_t v27 = v22;
    uint64_t v28 = v24;
    uint64_t v29 = v21;
    _CFObject.hash(into:)();
    if (v20) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v34 = v24;
    uint64_t v35 = v20;
    uint64_t v36 = v23;
    uint64_t v37 = v22;
    if (v20)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v30 = v20;
      _CFObject.hash(into:)();

      if (v23) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v31 = v23;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v24) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v22) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  uint64_t v33 = 0;
LABEL_39:

  uint64_t v38 = v66;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v38);
    swift_bridgeObjectRelease();
    uint64_t v39 = v67;
    if (v67) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  uint64_t v39 = v67;
  if (!v67) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v40 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v41 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v71 == 2)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v42);
  if (v72 == 2)
  {
    uint64_t v43 = 0;
  }
  else
  {
    long long v44 = v72 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v43 = v44;
  }
  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  long long v45 = *(void *)v85;
  long long v46 = *(void *)&v85[16];
  long long v47 = v85[24];
  long long v48 = v85[25];
  long long v49 = swift_getObjectType();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 112);
  swift_unknownObjectRetain();
  v50(a1, v49, v45);
  swift_unknownObjectRelease();
  uint64_t v51 = swift_getObjectType();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 120);
  swift_unknownObjectRetain();
  v52(a1, v51, v46);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v47);
  Hasher._combine(_:)(v48);
  return outlined release of Date.FormatStyle((uint64_t)v80);
}

uint64_t static Date.FormatStyle.Attributed.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[5];
  void v11[4] = a1[4];
  v11[5] = v2;
  v12[0] = a1[6];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 106);
  long long v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  long long v4 = a1[3];
  _OWORD v11[2] = a1[2];
  _OWORD v11[3] = v4;
  long long v5 = a2[5];
  void v9[4] = a2[4];
  v9[5] = v5;
  v10[0] = a2[6];
  *(_OWORD *)((char *)v10 + 10) = *(_OWORD *)((char *)a2 + 106);
  long long v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  long long v7 = a2[3];
  v9[2] = a2[2];
  _OWORD v9[3] = v7;
  return specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v11, (uint64_t *)v9) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.Attributed.CodingKeys()
{
  return 1702060386;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.FormatStyle.Attributed.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Attributed.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v8 = v2[5];
  v12[4] = v2[4];
  v12[5] = v8;
  v13[0] = v2[6];
  *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v2 + 106);
  long long v9 = v2[1];
  v12[0] = *v2;
  v12[1] = v9;
  long long v10 = v2[3];
  _OWORD v12[2] = v2[2];
  long long v12[3] = v10;
  lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.FormatStyle.Attributed.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;
  Swift::UInt8 v46;
  uint64_t v47;
  void (*v48)(unsigned char *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(unsigned char *, uint64_t, uint64_t);
  unsigned char v52[144];
  unsigned char v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void v71[18];
  unsigned char v72[144];
  unsigned char v73[144];
  unsigned char v74[72];
  long long v75;
  long long v76;
  long long v77;
  __int16 v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  unsigned char v85[26];

  long long v1 = v0[5];
  uint64_t v83 = v0[4];
  uint64_t v84 = v1;
  *(_OWORD *)long long v85 = v0[6];
  *(_OWORD *)&v85[10] = *(long long *)((char *)v0 + 106);
  long long v2 = v0[1];
  uint64_t v79 = *v0;
  uint64_t v80 = v2;
  long long v3 = v0[3];
  uint64_t v81 = v0[2];
  uint64_t v82 = v3;
  Hasher.init(_seed:)();
  uint64_t v75 = v79;
  uint64_t v76 = v80;
  uint64_t v77 = v81;
  long long v78 = v82;
  Swift::UInt v4 = *((void *)&v82 + 1);
  int v5 = v83;
  outlined retain of Date.FormatStyle((uint64_t)&v79);
  specialized Optional<A>.hash(into:)((uint64_t)v74);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  uint64_t v6 = v84;
  uint64_t ObjectType = swift_getObjectType();
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if (v8(ObjectType, v6))
  {
    Swift::UInt8 v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v71, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v53, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    Swift::UInt8 v11 = 0;
  }
  else
  {
    Swift::UInt8 v11 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  long long v12 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    long long v17 = v53;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  __int16 v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v52, &demangling cache variable for type metadata for LocalePreferences?);
    long long v17 = v52;
LABEL_23:
    outlined retain of LocalePreferences(v17);
    if (!v55) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v56) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    long long v15 = v57;
    if (!v57) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v15);
    swift_bridgeObjectRelease();
    long long v16 = v58;
    if (!v58) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v15 = v57;
  if (v57) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  long long v16 = v58;
  if (!v58)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v16);
  swift_bridgeObjectRelease();
LABEL_28:
  long long v19 = v59;
  __n128 v18 = v60;
  long long v21 = v61;
  long long v20 = v62;
  long long v22 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v23 = v18;
    long long v24 = v21;
    uint64_t v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v22;
    uint64_t v33 = v18;
    long long v34 = v21;
    uint64_t v35 = v20;
    if (v18)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  uint64_t v31 = 0;
LABEL_39:

  uint64_t v36 = v64;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v36);
    swift_bridgeObjectRelease();
    uint64_t v37 = v65;
    if (v65) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v66) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  uint64_t v37 = v65;
  if (!v65) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v37);
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v39 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v69 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = v69 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v70 == 2)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  uint64_t v43 = *(void *)v85;
  long long v44 = *(void *)&v85[16];
  long long v45 = v85[24];
  long long v46 = v85[25];
  long long v47 = swift_getObjectType();
  long long v48 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 112);
  swift_unknownObjectRetain();
  v48(v74, v47, v43);
  swift_unknownObjectRelease();
  long long v49 = swift_getObjectType();
  uint64_t v50 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v44 + 120);
  swift_unknownObjectRetain();
  v50(v74, v49, v44);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v45);
  Hasher._combine(_:)(v46);
  outlined release of Date.FormatStyle((uint64_t)&v79);
  return Hasher._finalize()();
}

uint64_t Date.FormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v9 = v13[5];
    a2[4] = v13[4];
    a2[5] = v9;
    a2[6] = v14[0];
    *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)((char *)v14 + 10);
    long long v10 = v13[1];
    *a2 = v13[0];
    a2[1] = v10;
    long long v11 = v13[3];
    a2[2] = v13[2];
    a2[3] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Date.FormatStyle.Attributed@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)&v25[26] = *(long long *)((char *)v2 + 106);
  long long v5 = v2[1];
  long long v20 = *v2;
  long long v21 = v5;
  long long v6 = v2[3];
  long long v22 = v2[2];
  long long v23 = v6;
  long long v7 = v2[5];
  long long v24 = v2[4];
  *(_OWORD *)uint64_t v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  char v8 = v25[41];
  char v9 = v25[40];
  uint64_t v10 = *((void *)&v6 + 1);
  char v11 = v24;
  long long v16 = v21;
  long long v17 = v20;
  long long v12 = v22;
  __int16 v13 = v6;
  __n128 v18 = *(__n128 *)&v25[24];
  long long v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  long long v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  __n128 result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(unsigned char *)(a2 + 120) = v9;
  *(unsigned char *)(a2 + 121) = v8;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Attributed@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.FormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Attributed(void *a1)
{
  return Date.FormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Attributed()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(unsigned char *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(unsigned char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  void v69[18];
  unsigned char v70[144];
  unsigned char v71[144];
  unsigned char v72[72];
  long long v73;
  long long v74;
  long long v75;
  __int16 v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  unsigned char v83[26];

  long long v1 = v0[5];
  uint64_t v81 = v0[4];
  uint64_t v82 = v1;
  *(_OWORD *)uint64_t v83 = v0[6];
  *(_OWORD *)&v83[10] = *(long long *)((char *)v0 + 106);
  long long v2 = v0[1];
  uint64_t v77 = *v0;
  long long v78 = v2;
  long long v3 = v0[3];
  uint64_t v79 = v0[2];
  uint64_t v80 = v3;
  Hasher.init(_seed:)();
  uint64_t v73 = v77;
  uint64_t v74 = v78;
  uint64_t v75 = v79;
  uint64_t v76 = v80;
  Swift::UInt v4 = *((void *)&v80 + 1);
  int v5 = v81;
  outlined retain of Date.FormatStyle((uint64_t)&v77);
  specialized Optional<A>.hash(into:)((uint64_t)v72);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  uint64_t v6 = v82;
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if (v8(ObjectType, v6))
  {
    Swift::UInt8 v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v69, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v71) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)&v51, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v51 == 2)
  {
    char v11 = 0;
  }
  else
  {
    char v11 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  long long v12 = v52;
  if (!v52)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v51);
    if (!v53) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  __int16 v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v54) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    long long v15 = v55;
    if (!v55) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v15);
    swift_bridgeObjectRelease();
    long long v16 = v56;
    if (!v56) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v15 = v55;
  if (v55) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  long long v16 = v56;
  if (!v56)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v16);
  swift_bridgeObjectRelease();
LABEL_27:
  __n128 v18 = v57;
  long long v17 = v58;
  long long v20 = v59;
  long long v19 = v60;
  long long v21 = v61;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v22 = v17;
    long long v23 = v20;
    long long v24 = v19;
    uint64_t v25 = v21;
    uint64_t v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_29;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = v21;
    uint64_t v32 = v17;
    uint64_t v33 = v20;
    long long v34 = v19;
    if (v17)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  uint64_t v30 = 0;
LABEL_38:

  uint64_t v35 = v62;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v63;
    if (v63) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v64) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  uint64_t v36 = v63;
  if (!v63) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v36);
  swift_bridgeObjectRelease();
  if (!v64) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v67 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = v67 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v68 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = v68 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  uint64_t v42 = *(void *)v83;
  uint64_t v43 = *(void *)&v83[16];
  long long v44 = v83[24];
  long long v45 = v83[25];
  long long v46 = swift_getObjectType();
  long long v47 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v42 + 112);
  swift_unknownObjectRetain();
  v47(v72, v46, v42);
  swift_unknownObjectRelease();
  long long v48 = swift_getObjectType();
  long long v49 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 120);
  swift_unknownObjectRetain();
  v49(v72, v48, v43);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v44);
  Hasher._combine(_:)(v45);
  outlined release of Date.FormatStyle((uint64_t)&v77);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[5];
  void v11[4] = a1[4];
  v11[5] = v2;
  v12[0] = a1[6];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 106);
  long long v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  long long v4 = a1[3];
  _OWORD v11[2] = a1[2];
  _OWORD v11[3] = v4;
  long long v5 = a2[5];
  void v9[4] = a2[4];
  v9[5] = v5;
  v10[0] = a2[6];
  *(_OWORD *)((char *)v10 + 10) = *(_OWORD *)((char *)a2 + 106);
  long long v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  long long v7 = a2[3];
  v9[2] = a2[2];
  _OWORD v9[3] = v7;
  return specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v11, (uint64_t *)v9) & 1;
}

uint64_t Date.FormatStyle.attributedStyle.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v3 = v1[5];
  long long v13 = v1[4];
  long long v2 = v13;
  long long v14 = v3;
  v15[0] = v1[6];
  long long v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  long long v5 = *(_OWORD *)((char *)v15 + 10);
  long long v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  long long v8 = v1[3];
  long long v11 = v1[2];
  long long v7 = v11;
  long long v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

uint64_t Date.FormatStyle.era(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = v2[5];
  *(_OWORD *)&unsigned char v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v4;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(long long *)((char *)v2 + 106);
  unsigned long long v5 = v2[1];
  long long v19 = *v2;
  unsigned long long v20 = v5;
  long long v6 = v2[3];
  long long v21 = v2[2];
  *(_OWORD *)long long v22 = v6;
  uint64_t v7 = v21;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 3)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    unint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    uint64_t v7 = v12 | v11 | v8;
    unsigned long long v15 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int16 v13 = 3327;
  }
  else
  {
    __int16 v13 = *(_WORD *)v22;
    uint64_t v14 = *((void *)&v21 + 1);
    unsigned long long v15 = v20;
    uint64_t v16 = *((void *)&v19 + 1);
    unint64_t v17 = v19 & 0xFFFFFFFFFFFFFF00;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(void *)a2 = v17 | v3;
  *(void *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 16) = v15;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.quarter(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  long long v4 = v2[1];
  long long v18 = *v2;
  long long v19 = v4;
  long long v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&unsigned char v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  long long v6 = v2[3];
  unsigned long long v20 = v2[2];
  *(_OWORD *)long long v21 = v6;
  unsigned long long v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 5)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    uint64_t v14 = 0;
    uint64_t v15 = v9 | v10;
    unsigned long long v7 = (unint64_t)v12 | (unsigned __int128)(v11 | (unint64_t)v8);
    long long v13 = xmmword_1821A2DA0;
    __int16 v16 = 3327;
  }
  else
  {
    long long v13 = v18;
    uint64_t v14 = *((void *)&v19 + 1);
    uint64_t v15 = v19;
    __int16 v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v15 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v3 << 8);
  *(void *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 32) = v7;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.week(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = v2[5];
  *(_OWORD *)&v23[16] = v2[4];
  *(_OWORD *)&v23[32] = v4;
  *(_OWORD *)&v23[48] = v2[6];
  *(_OWORD *)&v23[58] = *(long long *)((char *)v2 + 106);
  long long v5 = v2[1];
  long long v20 = *v2;
  long long v21 = v5;
  long long v6 = v2[3];
  long long v22 = v2[2];
  *(_OWORD *)long long v23 = v6;
  uint64_t v7 = v22;
  if ((v22 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    int v9 = 50332931;
    if (v3 == 3)
    {
      int v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      int v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      int v10 = 327680;
    }
    unint64_t v18 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = v9 | v10;
    uint64_t v7 = v12 | v11 | v8;
    long long v17 = xmmword_1821A2DA0;
    __int16 v13 = 3327;
  }
  else
  {
    __int16 v13 = *(_WORD *)v23;
    uint64_t v14 = *((void *)&v22 + 1);
    uint64_t v15 = *((void *)&v21 + 1);
    int v16 = v21;
    long long v17 = v20;
    unint64_t v18 = v21 & 0xFFFFFFFF00000000;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v23[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v23[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v23[50];
  *(void *)(a2 + 114) = *(void *)&v23[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v23[2];
  *(_OWORD *)a2 = v17;
  *(void *)(a2 + 16) = v18 | (v3 << 24) | *(void *)&v16 & 0xFFFFFFLL;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v20);
}

uint64_t Date.FormatStyle.dayOfYear(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned long long v4 = v2[1];
  long long v18 = *v2;
  unsigned long long v19 = v4;
  long long v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&unsigned char v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  long long v6 = v2[3];
  long long v20 = v2[2];
  *(_OWORD *)long long v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 3)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    uint64_t v15 = 0;
    uint64_t v7 = v12 | v11 | v8;
    unsigned long long v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    long long v14 = xmmword_1821A2DA0;
    __int16 v16 = 3327;
  }
  else
  {
    long long v14 = v18;
    unsigned long long v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v3 << 16);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.minute(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = v2[5];
  *(_OWORD *)&unsigned char v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v4;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(long long *)((char *)v2 + 106);
  unsigned long long v5 = v2[1];
  long long v19 = *v2;
  unsigned long long v20 = v5;
  long long v6 = v2[3];
  long long v21 = v2[2];
  *(_OWORD *)long long v22 = v6;
  uint64_t v7 = v21;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 2)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    uint64_t v14 = 0;
    uint64_t v7 = v12 | v11 | v8;
    unsigned long long v16 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    long long v17 = xmmword_1821A2DA0;
    __int16 v13 = 3327;
    unint64_t v15 = 0x200000000000000;
  }
  else
  {
    __int16 v13 = *(_WORD *)v22;
    uint64_t v14 = *((void *)&v21 + 1);
    unint64_t v15 = v21 & 0xFF00000000000000;
    long long v17 = v19;
    unsigned long long v16 = v20;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(void *)(a2 + 32) = v15 | (v3 << 48) | v7 & 0xFFFFFFFFFFFFLL;
  *(void *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.second(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned long long v4 = v2[1];
  long long v18 = *v2;
  unsigned long long v19 = v4;
  long long v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&unsigned char v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  long long v6 = v2[3];
  long long v20 = v2[2];
  *(_OWORD *)long long v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 2)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    uint64_t v15 = 0;
    uint64_t v7 = v12 | v11 | v8;
    unsigned long long v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    long long v14 = xmmword_1821A2DA0;
    __int16 v16 = 3327;
  }
  else
  {
    long long v14 = v18;
    unsigned long long v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v3 << 56);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.secondFraction(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  int v4 = *((unsigned __int8 *)a1 + 8);
  long long v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&unsigned char v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  unsigned long long v6 = v2[1];
  long long v18 = *v2;
  unsigned long long v19 = v6;
  long long v7 = v2[3];
  long long v20 = v2[2];
  *(_OWORD *)long long v21 = v7;
  uint64_t v8 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v9 = 0x906030001;
    uint64_t v10 = 50332931;
    if (v4 == 255)
    {
      uint64_t v13 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v10 = 50333183;
      uint64_t v9 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v13 = 327680;
    }
    uint64_t v8 = v12 | v11 | v9;
    unsigned long long v14 = (unint64_t)v10 | (unsigned __int128)(unint64_t)v13;
    long long v15 = xmmword_1821A2DA0;
    __int16 v16 = 12;
  }
  else
  {
    long long v15 = v18;
    unsigned long long v14 = v19;
    __int16 v16 = v21[1];
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v3;
  *(_WORD *)(a2 + 48) = v4 | (v16 << 8);
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.timeZone(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  long long v4 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&unsigned char v21[32] = v4;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(long long *)((char *)v2 + 106);
  unsigned long long v5 = v2[1];
  long long v18 = *v2;
  unsigned long long v19 = v5;
  long long v6 = v2[3];
  long long v20 = v2[2];
  *(_OWORD *)long long v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v8 = 0x906030001;
    uint64_t v9 = 50332931;
    if (v3 == 12)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0x1000000000000;
      uint64_t v12 = 0x200000000000000;
    }
    else
    {
      uint64_t v9 = 50333183;
      uint64_t v8 = 0x906030100;
      uint64_t v11 = 0x2000000000000;
      uint64_t v12 = 0x2000E0000000000;
      uint64_t v10 = 327680;
    }
    uint64_t v13 = 0;
    uint64_t v7 = v12 | v11 | v8;
    unsigned long long v14 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    long long v15 = xmmword_1821A2DA0;
    unsigned __int8 v16 = -1;
  }
  else
  {
    uint64_t v13 = *((void *)&v20 + 1);
    long long v15 = v18;
    unsigned long long v14 = v19;
    unsigned __int8 v16 = v21[0];
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v13;
  *(_WORD *)(a2 + 48) = v16 | (v3 << 8);
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.Attributed.era(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.era(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.year(_:)(uint64_t *a1)
{
  return Date.FormatStyle.Attributed.year(_:)(a1, (uint64_t (*)(uint64_t *))Date.FormatStyle.year(_:));
}

uint64_t Date.FormatStyle.Attributed.quarter(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.quarter(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.month(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.month(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.week(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.week(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.day(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 9);
  uint64_t v5 = *(void *)a1;
  char v6 = v2;
  char v7 = v3;
  return Date.FormatStyle.day(_:)(&v5, a2);
}

uint64_t Date.FormatStyle.Attributed.dayOfYear(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.dayOfYear(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.weekday(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.weekday(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.hour(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.hour(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.minute(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.minute(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.second(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.second(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.secondFraction(_:)(uint64_t *a1)
{
  return Date.FormatStyle.Attributed.year(_:)(a1, (uint64_t (*)(uint64_t *))Date.FormatStyle.secondFraction(_:));
}

uint64_t Date.FormatStyle.Attributed.year(_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *a1;
  char v5 = v2;
  return a2(&v4);
}

uint64_t Date.FormatStyle.Attributed.timeZone(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.timeZone(_:)(&v3, a2);
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.FormatStyle.parse(_:)(Swift::String a1)
{
  unint64_t object = a1._object;
  __darwin_time_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v73 = v1;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  long long v6 = v2[5];
  long long v7 = v2[3];
  long long v91 = v2[4];
  long long v92 = v6;
  long long v8 = v2[5];
  v93[0] = v2[6];
  *(_OWORD *)((char *)v93 + 10) = *(_OWORD *)((char *)v2 + 106);
  long long v9 = v2[1];
  v88[0] = *v2;
  v88[1] = v9;
  long long v10 = v2[3];
  timespec v12 = (timespec)*v2;
  timespec v11 = (timespec)v2[1];
  long long v89 = v2[2];
  long long v90 = v10;
  long long v85 = v91;
  long long v86 = v8;
  v87[0] = v2[6];
  *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v2 + 106);
  timespec v82 = v12;
  timespec v83 = v11;
  *(_OWORD *)uint64_t v84 = v89;
  *(_OWORD *)&v84[16] = v7;
  outlined retain of Date.FormatStyle((uint64_t)v88);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v82, (uint64_t)v75);
  timespec v82 = v75[0];
  timespec v83 = v75[1];
  v84[0] = v76;
  *(_OWORD *)&v84[8] = v77;
  v84[24] = v78;
  long long v85 = v79;
  LOBYTE(v86) = v80;
  *((void *)&v86 + 1) = v81;
  uint64_t v13 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    v82.__darwin_time_t tv_sec = countAndFlagsBits;
    v82.uint64_t tv_nsec = (uint64_t)object;
    udat_getCalendar();
    LODWORD(v75[0].tv_sec) = 0;
    ucal_clone();
    if (SLODWORD(v75[0].tv_sec) <= 0)
    {
      swift_bridgeObjectRetain();
      __darwin_time_t v14 = countAndFlagsBits;
      long long v15 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v16 = String.Index.utf16Offset<A>(in:)();
      if (v16 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      uint64_t v17 = v16;
      if (v16 > 0x7FFFFFFF)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int v74 = v16;
      if (v15[2] >> 31)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
      udat_parseCalendar();
      swift_release();
      if (SLODWORD(v75[0].tv_sec) < 1 && v17 != v74)
      {
        ucal_getMillis();
        if (SLODWORD(v75[0].tv_sec) < 1)
        {
          double v71 = v18 / 1000.0 + -978307200.0;
          ucal_close();
          swift_release();
          double *v73 = v71;
          return result;
        }
      }
      __darwin_time_t countAndFlagsBits = v14;
      ucal_close();
    }
    uint64_t v19 = countAndFlagsBits;
    v82.__darwin_time_t tv_sec = 0;
    v82.uint64_t tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &v82);
    uint64_t v20 = swift_retain_n();
    MEMORY[0x1F4188790](v20);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v72, &v82.tv_sec);
    if (!v3)
    {
      __darwin_time_t tv_sec = v82.tv_sec;
      uint64_t tv_nsec = v82.tv_nsec;
      swift_release_n();
      uint64_t v73 = (double *)tv_nsec;
      v82.__darwin_time_t tv_sec = 0;
      v82.uint64_t tv_nsec = 0xE000000000000000;
      if (tv_nsec)
      {
        _StringGuts.grow(_:)(88);
        v23.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143;
        v23._unint64_t object = (void *)0xED00002065737261;
        String.append(_:)(v23);
        v24.___darwin_time_t countAndFlagsBits = v19;
        v24._unint64_t object = object;
        String.append(_:)(v24);
        v25.___darwin_time_t countAndFlagsBits = 0xD000000000000046;
        v25._unint64_t object = (void *)0x80000001823AB110;
        String.append(_:)(v25);
        __darwin_time_t v26 = tv_sec;
        uint64_t v27 = tv_nsec;
      }
      else
      {
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)&v82, "Cannot parse ");
        HIWORD(v82.tv_nsec) = -4864;
        __darwin_time_t v26 = v19;
        uint64_t v27 = (uint64_t)object;
      }
      String.append(_:)(*(Swift::String *)&v26);
      v47.___darwin_time_t countAndFlagsBits = 46;
      v47._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      __darwin_time_t v48 = v82.tv_sec;
      uint64_t v49 = v82.tv_nsec;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 40) = v51;
      *(void *)(inited + 48) = v48;
      *(void *)(inited + 56) = v49;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v52 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v82);
      __darwin_time_t v53 = v82.tv_sec;
      uint64_t v54 = v82.tv_nsec;
      swift_retain();
      unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
      if (v56)
      {
        __break(1u);
      }
      else
      {
        v52[(v55 >> 6) + 8] |= 1 << v55;
        uint64_t v57 = (__darwin_time_t *)(v52[6] + 16 * v55);
        *uint64_t v57 = v53;
        v57[1] = v54;
        outlined init with take of Any(&v83, (_OWORD *)(v52[7] + 32 * v55));
        uint64_t v58 = v52[2];
        BOOL v37 = __OFADD__(v58, 1);
        uint64_t v59 = v58 + 1;
        if (!v37)
        {
          v52[2] = v59;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v60 = objc_allocWithZone((Class)NSError);
          uint64_t v61 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, 2048, _NativeDictionary.bridged()(), v73);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v63 = objc_msgSend(v62, sel_domain);
          id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          uint64_t v66 = v65;

          if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v66 == v67)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
LABEL_25:
            swift_willThrow();
            swift_release();
            return result;
          }
          char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v68) {
            goto LABEL_25;
          }
          goto LABEL_33;
        }
      }
      __break(1u);
      goto LABEL_31;
    }
    swift_release_n();
    swift_willThrow();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v28 = swift_initStackObject();
    *(_OWORD *)(v28 + 16) = xmmword_1821037E0;
    *(void *)(v28 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v28 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v28 + 40) = v29;
    *(void *)(v28 + 48) = 0xD000000000000021;
    *(void *)(v28 + 56) = 0x80000001823AE7F0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v30 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v28 + 32, (uint64_t)&v82);
    __darwin_time_t v31 = v82.tv_sec;
    uint64_t v32 = v82.tv_nsec;
    swift_retain();
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
    if (v34)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v30[(v33 >> 6) + 8] |= 1 << v33;
    uint64_t v35 = (__darwin_time_t *)(v30[6] + 16 * v33);
    *uint64_t v35 = v31;
    v35[1] = v32;
    outlined init with take of Any(&v83, (_OWORD *)(v30[7] + 32 * v33));
    uint64_t v36 = v30[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    _OWORD v30[2] = v38;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v39 = objc_allocWithZone((Class)NSError);
    uint64_t v40 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v41 = objc_msgSend(v39, sel_initWithDomain_code_userInfo_, v40, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v42 = objc_msgSend(v41, sel_domain);
    id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v45 = v44;

    if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v45 == v46)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0) {
        goto LABEL_37;
      }
    }
    swift_willThrow();
  }
  return result;
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.FormatStyle(Swift::String *a1)
{
  return Date.FormatStyle.parse(_:)(*a1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.CodingKeys()
{
  unint64_t result = 0x736C6F626D7973;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x656E6F5A656D6974;
      break;
    case 3:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 0x6C79745365746164;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.FormatStyle.encode(to:)(void *a1)
{
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.CodingKeys>);
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v1;
  unint64_t v7 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v33 = v1[1];
  uint64_t v34 = v6;
  unint64_t v8 = v1[4];
  uint64_t v35 = v1[5];
  unsigned int v9 = *((unsigned __int16 *)v1 + 24);
  uint64_t v29 = v1[7];
  HIDWORD(v28) = *((unsigned __int8 *)v1 + 64);
  long long v10 = *(_OWORD *)(v1 + 9);
  long long v31 = *(_OWORD *)(v1 + 11);
  long long v32 = v10;
  long long v30 = *(_OWORD *)(v1 + 13);
  int v56 = *((unsigned __int8 *)v1 + 120);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v8 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v11 = 0;
    LOBYTE(v12) = 0;
    uint64_t v13 = 0;
    LOBYTE(v14) = 0;
    LOBYTE(v15) = 0;
    uint64_t v16 = 0;
    LOBYTE(v17) = 12;
    LOBYTE(v9) = -1;
    LOBYTE(v18) = 2;
    LOBYTE(v19) = 9;
    LOBYTE(v20) = 6;
    LOBYTE(v8) = 1;
    LOBYTE(v21) = 5;
    LOBYTE(v5) = 3;
    LOBYTE(v7) = 3;
    LOBYTE(v22) = 3;
    LOBYTE(v23) = 3;
    LOBYTE(v24) = 1;
  }
  else
  {
    unint64_t v21 = v7 >> 8;
    unint64_t v12 = v7 >> 16;
    unint64_t v22 = v7 >> 24;
    uint64_t v14 = (v8 >> 8) & 1;
    unint64_t v23 = v8 >> 16;
    unint64_t v20 = v8 >> 24;
    unint64_t v19 = HIDWORD(v8);
    unint64_t v15 = v8 >> 40;
    unint64_t v24 = HIWORD(v8);
    unint64_t v18 = HIBYTE(v8);
    unsigned int v17 = v9 >> 8;
    uint64_t v13 = v34;
    uint64_t v16 = v35;
    uint64_t v11 = v33;
  }
  LOBYTE(v39) = v5;
  *((void *)&v39 + 1) = v11;
  char v40 = v7;
  char v41 = v21;
  char v42 = v12;
  char v43 = v22;
  uint64_t v44 = v13;
  char v45 = v8;
  char v46 = v14;
  char v47 = v23;
  char v48 = v20;
  char v49 = v19;
  char v50 = v15;
  char v51 = v24;
  char v52 = v18;
  uint64_t v53 = v16;
  char v54 = v9;
  char v55 = v17;
  char v57 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
  uint64_t v26 = v37;
  uint64_t v25 = v38;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v26)
  {
    long long v39 = v32;
    char v57 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v39 = v31;
    char v57 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v39 = v30;
    char v57 = 3;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v39) = v56;
    char v57 = 4;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v39 = v29;
    BYTE8(v39) = BYTE4(v28);
    char v57 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v4, v25);
}

uint64_t Date.FormatStyle.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v53 = 0;
    lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v37 = v38;
    uint64_t v35 = *((void *)&v38 + 1);
    uint64_t v36 = v39;
    uint64_t v28 = v41;
    int v25 = v42;
    uint64_t v27 = v43;
    uint64_t v26 = v44;
    uint64_t v29 = v45;
    long long v30 = a2;
    uint64_t v33 = v46;
    uint64_t v34 = v40;
    uint64_t v32 = v47;
    uint64_t v31 = v48;
    uint64_t v9 = v49;
    int v10 = v50;
    int v11 = v51;
    char v53 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v21 = v11;
    int v22 = v10;
    uint64_t v23 = v9;
    long long v24 = v38;
    char v53 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v20 = v38;
    char v53 = 3;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v19 = v38;
    char v53 = 4;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v13 = v38;
    char v53 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = BYTE8(v38);
    uint64_t v15 = 256;
    if (!v25) {
      uint64_t v15 = 0;
    }
    char v52 = BYTE8(v38);
    uint64_t v16 = v30;
    uint64_t v17 = v15 | v28 | (v27 << 16) | (v26 << 24) | (v29 << 32);
    uint64_t v18 = v38;
    *long long v30 = v37;
    v16[1] = v35;
    _OWORD v16[2] = v36;
    void v16[3] = v34;
    v16[4] = v17 | (v33 << 40) | (v32 << 48) | (v31 << 56);
    v16[5] = v23;
    *((_WORD *)v16 + 24) = v22 | ((_WORD)v21 << 8);
    v16[7] = v18;
    *((unsigned char *)v16 + 64) = v14;
    *(_OWORD *)(v16 + 9) = v24;
    *(_OWORD *)(v16 + 11) = v20;
    *(_OWORD *)(v16 + 13) = v19;
    *((unsigned char *)v16 + 120) = v13;
    *((unsigned char *)v16 + 121) = 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Date.FormatStyle.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  void *v51;
  void *v52;
  void *v53;
  Swift::UInt8 v54;
  void *v55;
  Swift::UInt v56;
  uint64_t v57;
  uint64_t v58;
  unsigned char v59[144];
  unsigned char v60[8];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char v77;
  void v78[18];
  unsigned char v79[144];
  unsigned char v80[144];
  unsigned char v81[64];

  outlined init with take of LocalePreferences?(v1, (uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  Swift::UInt v3 = *(void *)(v1 + 56);
  int v4 = *(unsigned __int8 *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 80);
  char v57 = *(void *)(v1 + 96);
  uint64_t v58 = *(void *)(v1 + 112);
  int v56 = *(unsigned __int8 *)(v1 + 120);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 121);
  specialized Optional<A>.hash(into:)(a1);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v8(ObjectType, v5))
  {
    Swift::UInt8 v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    int v11 = v56;
    goto LABEL_62;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v10(v78, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v80) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v60, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60[0] == 2)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = v60[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  char v13 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    uint64_t v17 = v60;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  char v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v17 = v59;
LABEL_22:
    outlined retain of LocalePreferences(v17);
    if (!v62) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v63) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v64;
    if (!v64) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v63) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  uint64_t v16 = v64;
  if (!v64)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v18 = v65;
  char v54 = v6;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v20 = v66;
  long long v19 = v67;
  int v22 = v68;
  int v21 = v69;
  uint64_t v23 = v70;
  unsigned __int8 v51 = v68;
  char v52 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v24 = v19;
    int v25 = v22;
    uint64_t v26 = v21;
    uint64_t v27 = v21;
    uint64_t v28 = v23;
    uint64_t v29 = v20;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v30 = v23;
    uint64_t v31 = v19;
    uint64_t v32 = v22;
    uint64_t v26 = v21;
    uint64_t v33 = v21;
  }
  char v53 = v20;
  char v55 = v19;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v34 = v19;
    _CFObject.hash(into:)();

    uint64_t v35 = v51;
    if (v51) {
      goto LABEL_34;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v35 = v51;
    if (v51)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v36 = v35;
      _CFObject.hash(into:)();

      if (v26) {
        goto LABEL_35;
      }
LABEL_39:
      Hasher._combine(_:)(0);
      long long v38 = v52;
      if (v52) {
        goto LABEL_36;
      }
      goto LABEL_40;
    }
  }
  Hasher._combine(_:)(0);
  if (!v26) {
    goto LABEL_39;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v37 = v26;
  _CFObject.hash(into:)();

  long long v38 = v52;
  if (v52)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unsigned int v39 = v38;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }
LABEL_40:
  Hasher._combine(_:)(0);
  unsigned int v39 = 0;
LABEL_41:

  uint64_t v40 = v71;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::UInt8 v6 = v54;
  unsigned __int8 v41 = v72;
  if (!v72)
  {
    Hasher._combine(_:)(0);
    if (v73) {
      goto LABEL_46;
    }
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  if (!v73) {
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  int v11 = v56;
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unsigned __int8 v42 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unsigned __int8 v43 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v76 == 2)
  {
    unsigned __int8 v44 = 0;
  }
  else
  {
    unsigned __int8 v44 = v76 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v44);
  if (v77 == 2)
  {
    unsigned __int8 v45 = 0;
  }
  else
  {
    unsigned __int8 v46 = v77 & 1;
    Hasher._combine(_:)(1u);
    unsigned __int8 v45 = v46;
  }
  Hasher._combine(_:)(v45);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_62:
  unsigned __int8 v47 = swift_getObjectType();
  unsigned __int8 v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 112);
  swift_unknownObjectRetain();
  v48(a1, v47, v57);
  swift_unknownObjectRelease();
  uint64_t v49 = swift_getObjectType();
  unsigned __int8 v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 120);
  swift_unknownObjectRetain();
  v50(a1, v49, v58);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v6);
}

Swift::Int Date.FormatStyle.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(unsigned char *, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(unsigned char *, uint64_t, uint64_t);
  void *v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned char v53[144];
  unsigned char v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  unsigned char v73[144];
  unsigned char v74[144];
  unsigned char v75[72];
  unsigned char v76[64];

  outlined init with take of LocalePreferences?(v0, (uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  Swift::UInt v1 = *(void *)(v0 + 56);
  int v2 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 80);
  unsigned __int8 v51 = *(void *)(v0 + 112);
  char v52 = *(void *)(v0 + 96);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 120);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 121);
  Hasher.init(_seed:)();
  specialized Optional<A>.hash(into:)((uint64_t)v75);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v3))
  {
    Swift::UInt8 v8 = 1;
LABEL_8:
    Hasher._combine(_:)(v8);
    swift_unknownObjectRelease();
    int v10 = v51;
    goto LABEL_62;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt8 v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v9(v72, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54[0] == 2)
  {
    int v11 = 0;
  }
  else
  {
    int v11 = v54[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  unint64_t v12 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
    uint64_t v16 = v54;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  char v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v53, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v16 = v53;
LABEL_22:
    outlined retain of LocalePreferences(v16);
    if (!v56) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = v58;
    if (!v58) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  uint64_t v15 = v58;
  if (!v58)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v15);
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v17 = v59;
  unsigned __int8 v50 = v5;
  uint64_t v49 = v4;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v19 = v60;
  uint64_t v18 = v61;
  int v21 = v62;
  long long v20 = v63;
  int v22 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v23 = v18;
    long long v24 = v21;
    int v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v22;
    uint64_t v29 = v18;
    long long v30 = v21;
    uint64_t v31 = v20;
  }
  unsigned __int8 v48 = v19;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v32 = v18;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_34;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v21)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v33 = v21;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_35;
      }
LABEL_39:
      Hasher._combine(_:)(0);
      if (v22) {
        goto LABEL_36;
      }
      goto LABEL_40;
    }
  }
  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_39;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v34 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }
LABEL_40:
  Hasher._combine(_:)(0);
  uint64_t v35 = 0;
LABEL_41:
  Swift::UInt v4 = v49;

  uint64_t v36 = v65;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::UInt8 v5 = v50;
  uint64_t v37 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_46;
    }
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v37);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  int v10 = v51;
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v38 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unsigned int v39 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v70 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v71 == 2)
  {
    unsigned __int8 v41 = 0;
  }
  else
  {
    unsigned __int8 v42 = v71 & 1;
    Hasher._combine(_:)(1u);
    unsigned __int8 v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_62:
  unsigned __int8 v43 = swift_getObjectType();
  unsigned __int8 v44 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v52 + 112);
  swift_unknownObjectRetain();
  v44(v75, v43, v52);
  swift_unknownObjectRelease();
  unsigned __int8 v45 = swift_getObjectType();
  unsigned __int8 v46 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 120);
  swift_unknownObjectRetain();
  v46(v75, v45, v10);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Date.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle(void *a1)
{
  return Date.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt v10;
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(unsigned char *, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(unsigned char *, uint64_t, uint64_t);
  void *v49;
  uint64_t v50;
  Swift::UInt8 v51;
  Swift::UInt v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  unsigned char v73[144];
  unsigned char v74[144];
  unsigned char v75[72];
  unsigned char v76[64];

  outlined init with take of LocalePreferences?(v0, (uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  Swift::UInt v1 = *(void *)(v0 + 56);
  int v2 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 96);
  char v52 = *(unsigned __int8 *)(v0 + 120);
  char v53 = *(void *)(v0 + 112);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 121);
  Hasher.init(_seed:)();
  specialized Optional<A>.hash(into:)((uint64_t)v75);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v3))
  {
    Swift::UInt8 v8 = 1;
LABEL_8:
    Hasher._combine(_:)(v8);
    swift_unknownObjectRelease();
    int v10 = v52;
    goto LABEL_61;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt8 v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v9(v72, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)&v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54 == 2)
  {
    int v11 = 0;
  }
  else
  {
    int v11 = v54 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  unint64_t v12 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
LABEL_21:
    outlined retain of LocalePreferences(&v54);
    if (!v56) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  char v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_21;
  }
  char v14 = v4;
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  uint64_t v4 = v14;
  if (!v56)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_18;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v58;
    if (!v58) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_23;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  uint64_t v16 = v58;
  if (!v58)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v17 = v59;
  unsigned __int8 v51 = v5;
  unsigned __int8 v50 = v4;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v19 = v60;
  uint64_t v18 = v61;
  long long v20 = v62;
  int v21 = v63;
  int v22 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v23 = v18;
    long long v24 = v20;
    int v25 = v21;
    uint64_t v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v22;
    uint64_t v29 = v18;
    long long v30 = v20;
    uint64_t v31 = v21;
  }
  uint64_t v49 = v19;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v32 = v18;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_33;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v20)
    {
LABEL_33:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v33 = v20;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_34;
      }
LABEL_38:
      Hasher._combine(_:)(0);
      if (v22) {
        goto LABEL_35;
      }
      goto LABEL_39;
    }
  }
  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_38;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v34 = v21;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_35:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  uint64_t v35 = 0;
LABEL_40:
  Swift::UInt8 v5 = v51;

  uint64_t v36 = v65;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v10 = v52;
  uint64_t v4 = v50;
  uint64_t v37 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v37);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v38 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unsigned int v39 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v70 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v71 == 2)
  {
    unsigned __int8 v41 = 0;
  }
  else
  {
    unsigned __int8 v42 = v71 & 1;
    Hasher._combine(_:)(1u);
    unsigned __int8 v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_61:
  unsigned __int8 v43 = swift_getObjectType();
  unsigned __int8 v44 = v4;
  unsigned __int8 v45 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 112);
  swift_unknownObjectRetain();
  v45(v75, v43, v44);
  swift_unknownObjectRelease();
  unsigned __int8 v46 = swift_getObjectType();
  unsigned __int8 v47 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v53 + 120);
  swift_unknownObjectRetain();
  v47(v75, v46, v53);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void static Date.FormatStyle.DateStyle.complete.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  return 0x65756C6156776172;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.DateStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.DateStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.FormatStyle.DateStyle.encode(to:)(void *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
}

uint64_t Date.FormatStyle.DateStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.DateStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.DateStyle@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
}

void static Date.FormatStyle.TimeStyle.omitted.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static Date.FormatStyle.TimeStyle.complete.getter(void *a1@<X8>)
{
  *a1 = 3;
}

void Date.FormatStyle.TimeStyle.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.DateStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.TimeStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.TimeStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.FormatStyle.TimeStyle.encode(to:)(void *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
}

uint64_t Date.FormatStyle.DateStyle.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  int v10 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.FormatStyle.TimeStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys, a2);
}

uint64_t Date.FormatStyle.DateStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  char v13 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v14 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    *char v13 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.TimeStyle@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.TimeStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.TimeStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v12 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Date.FormatStyle.parseStrategy.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v3 = v1[5];
  long long v13 = v1[4];
  long long v2 = v13;
  long long v14 = v3;
  v15[0] = v1[6];
  long long v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  long long v5 = *(_OWORD *)((char *)v15 + 10);
  long long v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  long long v8 = v1[3];
  long long v11 = v1[2];
  long long v7 = v11;
  long long v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance Date.FormatStyle@<X0>(_OWORD *a1@<X8>)
{
  long long v3 = v1[5];
  long long v13 = v1[4];
  long long v2 = v13;
  long long v14 = v3;
  v15[0] = v1[6];
  long long v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  long long v5 = *(_OWORD *)((char *)v15 + 10);
  long long v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  long long v8 = v1[3];
  long long v11 = v1[2];
  long long v7 = v11;
  long long v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.discreteInput(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  *(Foundation::Date *)&v7._time = (Foundation::Date)*v1;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.FormatStyle.bound(for:isLower:)(v7, (Swift::Bool)&v7);
  int v4 = v9;
  if (v9 == 2)
  {
    double v5 = 0.0;
  }
  else
  {
    double v5 = v8;
    if (v9)
    {
      double v6 = 0.0 - v8;
      if (0.0 - v8 < INFINITY) {
        *(void *)&v6 += (*(uint64_t *)&v6 >> 63) | 1;
      }
      double v5 = -v6;
    }
  }
  *(double *)uint64_t v3 = v5;
  *(unsigned char *)(v3 + 8) = v4 == 2;
  result.value = *(Foundation::Date *)&v5;
  return result;
}

Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional __swiftcall Date.FormatStyle.bound(for:isLower:)(Foundation::Date a1, Swift::Bool isLower)
{
  char v5 = v2;
  uint64_t v6 = v3;
  double v7 = *(double *)isLower;
  *(_OWORD *)&v29[26] = *(long long *)((char *)v4 + 106);
  long long v8 = v4[6];
  *(_OWORD *)uint64_t v29 = v4[5];
  *(_OWORD *)&v29[16] = v8;
  long long v9 = v4[4];
  long long v10 = v4[1];
  long long v24 = *v4;
  long long v25 = v10;
  long long v11 = v4[3];
  long long v26 = v4[2];
  long long v27 = v11;
  long long v28 = v9;
  long long v23 = *(_OWORD *)&v29[24];
  long long v30 = *(_OWORD *)&v29[8];
  long long v31 = *(_OWORD *)&v29[24];
  long long v22 = *(_OWORD *)&v29[8];
  outlined retain of Locale((uint64_t)&v31);
  outlined retain of Locale((uint64_t)&v30);
  Calendar.timeZone.setter((uint64_t *)&v22);
  long long v22 = v23;
  double v21 = v7;
  uint64_t v12 = one-time initialization token for updateScheduleCache;
  uint64_t v13 = swift_unknownObjectRetain();
  if (v12 != -1) {
    uint64_t v13 = swift_once();
  }
  uint64_t v14 = static ICUDateFormatter.DateFormatInfo.updateScheduleCache;
  MEMORY[0x1F4188790](v13);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  partial apply for closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)((uint64_t *)(v14 + 16), (uint64_t)&v19);
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
  swift_release();
  uint64_t v17 = v19;
  char v18 = v20;
  Calendar.bound(for:isLower:updateSchedule:)(&v21, v5 & 1, &v17, v6);
  char v15 = swift_unknownObjectRelease_n();
  result.value.bound._time = v16;
  result.value.includedInRangeOfInput = v15;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.discreteInput(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  *(Foundation::Date *)&v6._time = (Foundation::Date)*v1;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.FormatStyle.bound(for:isLower:)(v6, (Swift::Bool)&v6);
  int v4 = v8;
  if (v8 == 2)
  {
    double v5 = 0.0;
  }
  else
  {
    double v5 = v7;
    if (v8)
    {
      double v5 = v7 + 0.0;
      if (v7 + 0.0 < INFINITY) {
        *(void *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
      }
    }
  }
  *(double *)uint64_t v3 = v5;
  *(unsigned char *)(v3 + 8) = v4 == 2;
  result.value = *(Foundation::Date *)&v5;
  return result;
}

uint64_t Calendar.bound(for:isLower:updateSchedule:)@<X0>(double *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = *a1;
  uint64_t v8 = *a3;
  char v9 = *((unsigned char *)a3 + 8);
  uint64_t v10 = *v4;
  uint64_t v11 = v4[1];
  __dst[0] = 0uLL;
  double v33 = 0.0;
  uint64_t v34 = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v33, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(double *__return_ptr, long long *, uint64_t, uint64_t))(v11 + 176))(&v35, __dst, ObjectType, v11);
  outlined release of DateComponents((uint64_t)__src);
  if (v36)
  {
    double v13 = -978307200.0;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      BOOL v14 = v7 < v13;
      goto LABEL_6;
    }
  }
  else
  {
    double v13 = v35;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  BOOL v14 = v13 < v7;
LABEL_6:
  char v15 = v14;
  *(void *)&__dst[0] = v8;
  BYTE8(__dst[0]) = v9;
  ICUDateFormatter.DateFormatInfo.UpdateSchedule.updateIntervals.getter();
  uint64_t v18 = *(void *)(v16 + 16);
  if (!v18)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_34:
    double time = 0.0;
    char v27 = 2;
    goto LABEL_35;
  }
  char v28 = v15;
  uint64_t v29 = a4;
  double time = 0.0;
  char v20 = (uint64_t *)(v16 + 40);
  char v21 = 1;
  do
  {
    char v23 = *((unsigned char *)v20 - 8);
    uint64_t v24 = *v20;
    *(void *)&__dst[0] = v10;
    *((void *)&__dst[0] + 1) = v11;
    double v35 = v7;
    char v31 = a2 & 1;
    char v30 = v23;
    Calendar.advance(_:_:by:_:)(&v35, &v31, v24, &v30, (uint64_t)&v33, v17);
    if ((_BYTE)v34) {
      double v25 = time;
    }
    else {
      double v25 = v33;
    }
    if (v34)
    {
      double time = v25;
      v21 &= v34;
    }
    else
    {
      v17._double time = v33;
      if (time >= v33) {
        double v22 = time;
      }
      else {
        double v22 = v33;
      }
      if (time < v33) {
        v17._double time = time;
      }
      if (a2) {
        v17._double time = v22;
      }
      if (v21) {
        double time = v25;
      }
      else {
        double time = v17._time;
      }
      if (v21) {
        v21 &= v34;
      }
      else {
        char v21 = 0;
      }
    }
    v20 += 2;
    --v18;
  }
  while (v18);
  uint64_t result = swift_bridgeObjectRelease();
  a4 = v29;
  if (v21) {
    goto LABEL_34;
  }
  char v27 = v28;
  if (v7 == time) {
    char v27 = 1;
  }
LABEL_35:
  *(double *)a4 = time;
  *(unsigned char *)(a4 + 8) = v27;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double static Calendar.nextAccuracyStep(for:direction:)@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, double *a3@<X8>)
{
  double v3 = *a1;
  double v4 = 0.0 - *a1;
  if (v4 < INFINITY) {
    *(void *)&double v4 = ((COERCE__INT64(0.0 - *a1) >> 63) | 1) + COERCE__INT64(0.0 - *a1);
  }
  double v5 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v5 < INFINITY) {
    *(void *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
  }
  double v6 = (fabs(v3 + v4) + vabdd_f64(v3, v5 / -1000.0 + -978307200.0)) * 9.0;
  double v7 = -v6;
  if (!*a2) {
    double v7 = v6;
  }
  double result = v3 + v7;
  *a3 = result;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.FormatStyle(double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.FormatStyle(double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.discreteInput(before:)(Foundation::Date before)
{
  return Date.FormatStyle.discreteInput(before:)(*(Foundation::Date *)&v1->_time);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.discreteInput(after:)(Foundation::Date after)
{
  return Date.FormatStyle.discreteInput(after:)(*(Foundation::Date *)&v1->_time);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.FormatStyle.Attributed(Foundation::Date *a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.discreteInput(before:)(*(Foundation::Date *)&a1->_time);
  return result;
}

double protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Date.FormatStyle.Attributed(Foundation::Date *a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.discreteInput(after:)(*(Foundation::Date *)&a1->_time);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.FormatStyle.Attributed(double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.Attributed.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.FormatStyle.Attributed(double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.Attributed.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

double *Calendar.advance(_:_:by:_:)@<X0>(double *result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>, Foundation::Date a6@<D0>)
{
  double v9 = *result;
  int v10 = *a2;
  Swift::UInt v11 = *a4;
  double v13 = *v6;
  double v12 = v6[1];
  if (*a4)
  {
    if (v11 == 13)
    {
      double v14 = (v9 + 978307200.0) * 1000.0;
      double v15 = (double)a3 * 0.000001;
      double v16 = v15 * floor(v14 / v15);
      if (v14 >= v16) {
        double v14 = v16;
      }
      if (v10)
      {
        double v17 = v14 / 1000.0 + -978307200.0;
        if (v9 < v17) {
          double v17 = *result;
        }
      }
      else
      {
        double v17 = (v15 + v14) / 1000.0 + -978307200.0;
        if (v9 >= v17) {
          double v17 = *result;
        }
      }
      *(double *)a5 = v17;
LABEL_31:
      *(unsigned char *)(a5 + 8) = 0;
      return result;
    }
    if (*a2)
    {
      *(double *)__dst = *v6;
      *(double *)&__dst[1] = v12;
      LOBYTE(v75[0]) = v11;
      if (!__OFSUB__(0, a3))
      {
        v78[0] = v9;
        *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v75, -a3, a6, (Swift::Bool)v78);
        uint64_t v34 = *(void *)__src;
        if (__src[8])
        {
          *(void *)a5 = *(void *)__src;
          goto LABEL_101;
        }
        *(void *)&__src[8] = 0;
        *(void *)__src = 0;
        v78[1] = 0.0;
        v78[0] = 0.0;
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)((long long *)__src, (uint64_t *)v78, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        *(unsigned char *)(swift_allocObject() + 32) = v11;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
        uint64_t v45 = static _SetStorage.allocate(capacity:)();
        uint64_t v46 = v45 + 56;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Swift::Int v47 = Hasher._finalize()();
        uint64_t v48 = -1 << *(unsigned char *)(v45 + 32);
        unint64_t v49 = v47 & ~v48;
        unint64_t v50 = v49 >> 6;
        uint64_t v51 = *(void *)(v45 + 56 + 8 * (v49 >> 6));
        uint64_t v52 = 1 << v49;
        uint64_t v53 = *(void *)(v45 + 48);
        if (((1 << v49) & v51) != 0)
        {
          if (*(unsigned __int8 *)(v53 + v49) == v11) {
            goto LABEL_51;
          }
          uint64_t v54 = ~v48;
          unint64_t v49 = (v49 + 1) & v54;
          unint64_t v50 = v49 >> 6;
          uint64_t v51 = *(void *)(v46 + 8 * (v49 >> 6));
          uint64_t v52 = 1 << v49;
          if ((v51 & (1 << v49)) != 0)
          {
            if (*(unsigned __int8 *)(v53 + v49) == v11) {
              goto LABEL_51;
            }
            unint64_t v49 = (v49 + 1) & v54;
            unint64_t v50 = v49 >> 6;
            uint64_t v51 = *(void *)(v46 + 8 * (v49 >> 6));
            uint64_t v52 = 1 << v49;
            if ((v51 & (1 << v49)) != 0)
            {
              if (*(unsigned __int8 *)(v53 + v49) == v11) {
                goto LABEL_51;
              }
              unint64_t v49 = (v49 + 1) & v54;
              unint64_t v50 = v49 >> 6;
              uint64_t v51 = *(void *)(v46 + 8 * (v49 >> 6));
              uint64_t v52 = 1 << v49;
              if ((v51 & (1 << v49)) != 0)
              {
                while (*(unsigned __int8 *)(v53 + v49) != v11)
                {
                  unint64_t v49 = (v49 + 1) & v54;
                  unint64_t v50 = v49 >> 6;
                  uint64_t v51 = *(void *)(v46 + 8 * (v49 >> 6));
                  uint64_t v52 = 1 << v49;
                  if ((v51 & (1 << v49)) == 0) {
                    goto LABEL_49;
                  }
                }
LABEL_51:
                swift_setDeallocating();
                swift_deallocClassInstance();
                double v76 = v13;
                double v77 = v12;
                uint64_t v57 = swift_bridgeObjectRetain();
                Calendar.ComponentSet.init(_:)(v57, &v74);
                double v58 = 1.59271755e13;
                if (v9 <= 1.59271755e13) {
                  double v58 = v9;
                }
                v78[0] = fmax(v58, -2.11845067e11);
                Calendar._dateComponents(_:from:)(&v74, v78, __src);
                swift_release();
                outlined release of DateComponents((uint64_t)__src);
                v59.is_nil = 1;
                v59.value = 0;
                switch(v11)
                {
                  case 1uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[48];
                    break;
                  case 2uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[64];
                    break;
                  case 3uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[80];
                    break;
                  case 4uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[112];
                    break;
                  case 5uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[128];
                    break;
                  case 6uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[144];
                    break;
                  case 7uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[176];
                    break;
                  case 8uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[192];
                    break;
                  case 9uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[208];
                    break;
                  case 0xAuLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[240];
                    break;
                  case 0xBuLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[256];
                    break;
                  case 0xCuLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[272];
                    break;
                  case 0xDuLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[160];
                    break;
                  case 0xEuLL:
                  case 0xFuLL:
                  case 0x10uLL:
                    break;
                  case 0x11uLL:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[96];
                    break;
                  default:
                    Swift::Int_optional v59 = *(Swift::Int_optional *)&__src[32];
                    break;
                }
                LOBYTE(v75[0]) = v11;
                DateComponents.setValue(_:for:)(v59, (Foundation::Calendar::Component)v75);
                *(double *)&long long v73 = v13;
                *((double *)&v73 + 1) = v12;
                double v72 = *(double *)&v34;
                memcpy(v78, __dst, 0x11AuLL);
                memcpy(v75, __dst, 0x11AuLL);
                __int16 v71 = 0;
                char v70 = 0;
                Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v72, v75, (char *)&v71 + 1, (char *)&v71, &v70, (uint64_t)&v68);
                double result = (double *)outlined release of DateComponents((uint64_t)v78);
                char v67 = v69;
                *(void *)a5 = v68;
                if ((v67 & 1) == 0) {
                  goto LABEL_31;
                }
                goto LABEL_101;
              }
            }
          }
        }
LABEL_49:
        *(void *)(v46 + 8 * v50) = v52 | v51;
        *(unsigned char *)(v53 + v49) = v11;
        uint64_t v55 = *(void *)(v45 + 16);
        BOOL v30 = __OFADD__(v55, 1);
        uint64_t v56 = v55 + 1;
        if (!v30)
        {
          *(void *)(v45 + 16) = v56;
          goto LABEL_51;
        }
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
        JUMPOUT(0x181D38D0CLL);
      }
      goto LABEL_103;
    }
    *(double *)__dst = *v6;
    *(double *)&__dst[1] = v12;
    uint64_t v35 = 0x4000;
    switch((int)v11)
    {
      case 2:
        *(void *)&v78[0] = 4;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[8];
        uint64_t v37 = &__dst[9];
        goto LABEL_71;
      case 3:
        *(void *)&v78[0] = 8;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[10];
        uint64_t v37 = &__dst[11];
        goto LABEL_71;
      case 4:
        *(void *)&v78[0] = 16;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[14];
        uint64_t v37 = &__dst[15];
        goto LABEL_71;
      case 5:
        *(void *)&v78[0] = 32;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[16];
        uint64_t v37 = &__dst[17];
        goto LABEL_71;
      case 6:
        *(void *)&v78[0] = 64;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[18];
        uint64_t v37 = &__dst[19];
        goto LABEL_71;
      case 7:
        *(void *)&v78[0] = 128;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[22];
        uint64_t v37 = &__dst[23];
        goto LABEL_71;
      case 8:
        *(void *)&v78[0] = 256;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[24];
        uint64_t v37 = &__dst[25];
        goto LABEL_71;
      case 9:
        *(void *)&v78[0] = 512;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[26];
        uint64_t v37 = &__dst[27];
        goto LABEL_71;
      case 10:
        *(void *)&v78[0] = 1024;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[30];
        uint64_t v37 = &__dst[31];
        goto LABEL_71;
      case 11:
        *(void *)&v78[0] = 2048;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[32];
        uint64_t v37 = &__dst[33];
        goto LABEL_71;
      case 12:
        *(void *)&v78[0] = 4096;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[34];
        uint64_t v37 = &__dst[35];
        goto LABEL_71;
      case 13:
        *(void *)&v78[0] = 0x2000;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[20];
        uint64_t v37 = &__dst[21];
        goto LABEL_71;
      case 14:
        goto LABEL_69;
      case 15:
        uint64_t v35 = 0x8000;
        goto LABEL_69;
      case 16:
        uint64_t v35 = 0x10000;
LABEL_69:
        *(void *)&v78[0] = v35;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = 0;
        goto LABEL_73;
      case 17:
        *(void *)&v78[0] = 0x40000;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[12];
        uint64_t v37 = &__dst[13];
        goto LABEL_71;
      default:
        *(void *)&v78[0] = 2;
        v75[0] = v9;
        Calendar._dateComponents(_:from:)((uint64_t *)v78, v75, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t v36 = __dst[6];
        uint64_t v37 = &__dst[7];
LABEL_71:
        if (*(unsigned char *)v37) {
          uint64_t v36 = 0;
        }
LABEL_73:
        BOOL v30 = __OFADD__(v36, a3);
        Swift::Int v60 = v36 + a3;
        if (v30) {
          goto LABEL_104;
        }
        LOBYTE(v78[0]) = v11;
        Calendar.Component.nextHigherUnit.getter(__src);
        if (__src[0] == 18) {
          goto LABEL_84;
        }
        LOBYTE(v78[0]) = v11;
        LOBYTE(v75[0]) = __src[0];
        double v61 = 1.59271755e13;
        if (v9 <= 1.59271755e13) {
          double v61 = v9;
        }
        double v62 = fmax(v61, -2.11845067e11);
        uint64_t ObjectType = swift_getObjectType();
        *(double *)__src = v62;
        uint64_t v64 = (*(uint64_t (**)(double *, double *, unsigned char *, uint64_t, double))(*(void *)&v12 + 144))(v78, v75, __src, ObjectType, COERCE_DOUBLE(*(void *)&v12));
        if ((v66 & 1) != 0 || v64 == v65 || v60 < v65) {
          goto LABEL_84;
        }
        if (!v65) {
          goto LABEL_107;
        }
        if (v60 == 0x8000000000000000 && v65 == -1) {
          goto LABEL_109;
        }
        BOOL v30 = __OFADD__(v64, v60 % v65);
        Swift::Int v60 = v64 + v60 % v65;
        if (v30) {
          goto LABEL_108;
        }
LABEL_84:
        *(void *)&__src[8] = 0;
        *(void *)__src = 0;
        v75[0] = 0.0;
        v75[1] = 0.0;
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)((long long *)__src, (uint64_t *)v75, 0, 1, 0, 1, 0, 1, (uint64_t)v78, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1);
        __src[0] = v11;
        v81.value = v60;
        v81.is_nil = 0;
        DateComponents.setValue(_:for:)(v81, (Foundation::Calendar::Component)__src);
        double v76 = v13;
        double v77 = v12;
        *(double *)&long long v73 = v9;
        memcpy(__src, v78, sizeof(__src));
        memcpy(v75, v78, 0x11AuLL);
        LOBYTE(v68) = 0;
        LOBYTE(v74) = 0;
        LOBYTE(v72) = 0;
        uint64_t v40 = (uint64_t *)&v73;
        unsigned __int8 v41 = v75;
        unsigned __int8 v42 = (char *)&v68;
        unsigned __int8 v43 = (char *)&v74;
        unsigned __int8 v44 = (char *)&v72;
        break;
    }
LABEL_85:
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v40, v41, v42, v43, v44, a5);
    return (double *)outlined release of DateComponents((uint64_t)__src);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v18 = static _SetStorage.allocate(capacity:)();
  uint64_t v19 = v18 + 56;
  Swift::UInt v20 = byte_1ECA4BC98;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v20);
  Swift::Int v21 = Hasher._finalize()();
  uint64_t v22 = -1 << *(unsigned char *)(v18 + 32);
  unint64_t v23 = v21 & ~v22;
  unint64_t v24 = v23 >> 6;
  uint64_t v25 = *(void *)(v18 + 56 + 8 * (v23 >> 6));
  uint64_t v26 = 1 << v23;
  uint64_t v27 = *(void *)(v18 + 48);
  if (((1 << v23) & v25) == 0) {
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)(v27 + v23) == v20) {
    goto LABEL_20;
  }
  uint64_t v28 = ~v22;
  unint64_t v23 = (v23 + 1) & v28;
  unint64_t v24 = v23 >> 6;
  uint64_t v25 = *(void *)(v19 + 8 * (v23 >> 6));
  uint64_t v26 = 1 << v23;
  if ((v25 & (1 << v23)) == 0) {
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)(v27 + v23) == v20) {
    goto LABEL_20;
  }
  unint64_t v23 = (v23 + 1) & v28;
  unint64_t v24 = v23 >> 6;
  uint64_t v25 = *(void *)(v19 + 8 * (v23 >> 6));
  uint64_t v26 = 1 << v23;
  if ((v25 & (1 << v23)) == 0) {
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)(v27 + v23) == v20) {
    goto LABEL_20;
  }
  unint64_t v23 = (v23 + 1) & v28;
  unint64_t v24 = v23 >> 6;
  uint64_t v25 = *(void *)(v19 + 8 * (v23 >> 6));
  uint64_t v26 = 1 << v23;
  if ((v25 & (1 << v23)) != 0)
  {
    while (*(unsigned __int8 *)(v27 + v23) != v20)
    {
      unint64_t v23 = (v23 + 1) & v28;
      unint64_t v24 = v23 >> 6;
      uint64_t v25 = *(void *)(v19 + 8 * (v23 >> 6));
      uint64_t v26 = 1 << v23;
      if ((v25 & (1 << v23)) == 0) {
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    *(void *)(v19 + 8 * v24) = v26 | v25;
    *(unsigned char *)(v27 + v23) = v20;
    uint64_t v29 = *(void *)(v18 + 16);
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    *(void *)(v18 + 16) = v31;
  }
LABEL_20:
  v75[0] = v13;
  v75[1] = v12;
  uint64_t v32 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v32, &v74);
  double v33 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v33 = v9;
  }
  *(void *)__src = fmax(v33, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v74, (double *)__src, __dst);
  swift_release();
  double result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[5] & 1) == 0)
  {
    uint64_t v38 = __dst[4];
    double v76 = v13;
    double v77 = v12;
    double v72 = v9;
    long long v73 = 0uLL;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    if (v10)
    {
      uint64_t v39 = __dst[4] - a3;
      if (!__OFSUB__(__dst[4], a3))
      {
LABEL_39:
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v73, &v68, v39, 0, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1);
        memcpy(v78, __src, 0x11AuLL);
        __int16 v71 = v10;
        char v70 = 0;
        uint64_t v40 = (uint64_t *)&v72;
        unsigned __int8 v41 = v78;
        unsigned __int8 v42 = (char *)&v71 + 1;
        unsigned __int8 v43 = &v70;
        unsigned __int8 v44 = (char *)&v71;
        goto LABEL_85;
      }
      __break(1u);
    }
    uint64_t v39 = v38 + a3;
    if (__OFADD__(v38, a3))
    {
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    goto LABEL_39;
  }
  *(void *)a5 = 0;
LABEL_101:
  *(unsigned char *)(a5 + 8) = 1;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 0;
  char v3 = 1;
  switch((int)result)
  {
    case 0:
      goto LABEL_20;
    case 1:
      char v2 = 1;
      goto LABEL_20;
    case 2:
      char v2 = 4;
      goto LABEL_20;
    case 3:
      char v2 = 9;
      goto LABEL_20;
    case 4:
    case 5:
    case 15:
    case 16:
      char v2 = 12;
      goto LABEL_20;
    case 6:
      char v2 = 13;
      goto LABEL_20;
    case 7:
      char v2 = 14;
      goto LABEL_20;
    case 8:
      char v2 = 15;
      goto LABEL_20;
    case 9:
      char v2 = 7;
      goto LABEL_20;
    case 10:
      char v2 = 10;
      goto LABEL_20;
    case 11:
      char v2 = 8;
      goto LABEL_20;
    case 12:
      char v2 = 5;
      goto LABEL_20;
    case 13:
      char v2 = 6;
      goto LABEL_20;
    case 14:
      char v2 = 11;
      goto LABEL_20;
    case 17:
      char v2 = 16;
LABEL_20:
      char v3 = v2;
      goto LABEL_21;
    case 18:
    case 20:
    case 30:
LABEL_21:
      *a2 = v3;
      break;
    case 19:
    case 25:
      *a2 = 7;
      break;
    case 21:
      *a2 = 9;
      break;
    case 22:
      *a2 = 14;
      break;
    case 23:
    case 24:
    case 29:
    case 31:
    case 32:
    case 33:
      *a2 = 16;
      break;
    case 26:
      *a2 = 4;
      break;
    case 27:
    case 28:
      *a2 = 3;
      break;
    case 35:
    case 36:
      *a2 = 11;
      break;
    default:
      *a2 = 17;
      break;
  }
  return result;
}

void Date.FormatStyle.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v5 = v3[5];
  v44[4] = v3[4];
  v44[5] = v5;
  v45[0] = v3[6];
  *(_OWORD *)((char *)v45 + 10) = *(_OWORD *)((char *)v3 + 106);
  long long v6 = v3[1];
  v44[0] = *v3;
  v44[1] = v6;
  long long v7 = v3[3];
  _OWORD v44[2] = v3[2];
  void v44[3] = v7;
  if (a1 >> 14 >= a2 >> 14)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return;
  }
  long long v8 = v3[5];
  long long v41 = v3[4];
  long long v42 = v8;
  v43[0] = v3[6];
  *(_OWORD *)((char *)v43 + 10) = *(_OWORD *)((char *)v3 + 106);
  long long v9 = v3[1];
  long long v38 = *v3;
  long long v39 = v9;
  long long v10 = v3[3];
  *(_OWORD *)uint64_t v40 = v3[2];
  *(_OWORD *)&v40[16] = v10;
  outlined retain of Date.FormatStyle((uint64_t)v44);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v38, (uint64_t)v31);
  long long v38 = v31[0];
  long long v39 = v31[1];
  v40[0] = v32;
  *(_OWORD *)&long long v40[8] = v33;
  v40[24] = v34;
  long long v41 = v35;
  LOBYTE(v42) = v36;
  *((void *)&v42 + 1) = v37;
  uint64_t v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v12 = String.subscript.getter();
  uint64_t v16 = v15;
  if (!((v12 ^ v13) >> 14)
    || (v17 = v12, unint64_t v18 = v13, v19 = v14, (*(unsigned char *)(v11 + 24) & 1) == 0)
    && (Substring.subscript.getter(), char v20 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v20 & 1) != 0))
  {
    swift_release();
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return;
  }
  *(void *)&long long v38 = v17;
  *((void *)&v38 + 1) = v18;
  *(void *)&long long v39 = v19;
  *((void *)&v39 + 1) = v16;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v21 = String.init<A>(_:)();
  unint64_t v23 = v22;
  *(void *)&long long v38 = v21;
  *((void *)&v38 + 1) = v22;
  udat_getCalendar();
  LODWORD(v31[0]) = 0;
  ucal_clone();
  if (SLODWORD(v31[0]) > 0)
  {
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = specialized _copyCollectionToContiguousArray<A>(_:)(v21, v23);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v24 = String.Index.utf16Offset<A>(in:)();
  if (v24 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v25 = v24;
  if (v24 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  int v30 = v24;
  if (v29[2] >> 31) {
    goto LABEL_22;
  }
  udat_parseCalendar();
  swift_release();
  if (SLODWORD(v31[0]) > 0 || v25 == v30 || (ucal_getMillis(), SLODWORD(v31[0]) >= 1))
  {
    ucal_close();
    goto LABEL_15;
  }
  double v27 = v26 / 1000.0 + -978307200.0;
  ucal_close();
  swift_bridgeObjectRelease();
  *(void *)&long long v38 = v17;
  *((void *)&v38 + 1) = v18;
  *(void *)&long long v39 = v19;
  *((void *)&v39 + 1) = v16;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v28 = String.Index.init<A>(utf16Offset:in:)();
  swift_release();
  *(void *)a3 = v28;
  *(double *)(a3 + 8) = v27;
  *(unsigned char *)(a3 + 16) = 0;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.FormatStyle(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.FormatStyle(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();

  return MEMORY[0x1F4188350](a1, v2);
}

uint64_t specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v42);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v43);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v44);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v45);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v46);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v46) == 1)
  {
    uint64_t v3 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v46);
    long long v25 = *(_OWORD *)(v3 + 16);
    long long v26 = *(_OWORD *)v3;
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = *(void *)(v3 + 56);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v41);
    int v8 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41);
    uint64_t v9 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    if (v8 == 1)
    {
      uint64_t v10 = *(void *)(v9 + 48);
      uint64_t v11 = *(void *)(v9 + 56);
      long long v34 = v26;
      long long v35 = v25;
      *(void *)&long long v36 = v4;
      *((void *)&v36 + 1) = v5;
      *(void *)&long long v37 = v6;
      *((void *)&v37 + 1) = v7;
      long long v12 = *(_OWORD *)(v9 + 16);
      long long v27 = *(_OWORD *)v9;
      long long v28 = v12;
      long long v29 = *(_OWORD *)(v9 + 32);
      *(void *)&long long v30 = v10;
      *((void *)&v30 + 1) = v11;
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      char v13 = specialized static Date.VerbatimFormatStyle.== infix(_:_:)(&v34, &v27);
LABEL_7:
      char v17 = v13;
      outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)((uint64_t)v44);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
      return v17 & 1;
    }
  }
  else
  {
    uint64_t v14 = (long long *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v46);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v41);
    int v15 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41);
    uint64_t v16 = (long long *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    if (v15 != 1)
    {
      long long v18 = v14[5];
      long long v38 = v14[4];
      long long v39 = v18;
      v40[0] = v14[6];
      *(_OWORD *)((char *)v40 + 10) = *(long long *)((char *)v14 + 106);
      long long v19 = v14[1];
      long long v34 = *v14;
      long long v35 = v19;
      long long v20 = v14[3];
      long long v36 = v14[2];
      long long v37 = v20;
      long long v21 = v16[5];
      long long v31 = v16[4];
      long long v32 = v21;
      v33[0] = v16[6];
      *(_OWORD *)((char *)v33 + 10) = *(long long *)((char *)v16 + 106);
      long long v22 = v16[1];
      long long v27 = *v16;
      long long v28 = v22;
      long long v23 = v16[3];
      long long v29 = v16[2];
      long long v30 = v23;
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      char v13 = specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)&v34, (uint64_t *)&v27);
      goto LABEL_7;
    }
  }
  outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  outlined release of Date.AttributedStyle.InnerStyle((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)((uint64_t)v44);
  char v17 = 0;
  return v17 & 1;
}

uint64_t specialized Date.FormatStyle.DateFieldCollection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.DateFieldCollection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v35 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v9 = v31;
  char v35 = 1;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v34 = v9;
  uint64_t v10 = v31;
  int v11 = v32;
  char v35 = 2;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v29 = v10;
  int v30 = v11;
  LOBYTE(v10) = v31;
  char v35 = 3;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v12 = v31;
  char v35 = 4;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v28 = v12;
  int v13 = v31;
  char v35 = 5;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v25 = v31;
  int v26 = v32;
  int v27 = v13;
  int v14 = v33;
  char v35 = 6;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v24 = v14;
  LOBYTE(v14) = v31;
  char v35 = 7;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v23 = v31;
  char v35 = 8;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v22 = v31;
  char v35 = 9;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v21 = v31;
  char v35 = 10;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v20 = v31;
  char v35 = 11;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v19 = v31;
  char v35 = 12;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v18 = v31;
  HIDWORD(v17) = v32;
  char v35 = 13;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v15 = v31;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(unsigned char *)a2 = v34;
  *(void *)(a2 + 8) = v29;
  *(unsigned char *)(a2 + 16) = v30;
  *(unsigned char *)(a2 + 17) = v10;
  *(unsigned char *)(a2 + 18) = v28;
  *(unsigned char *)(a2 + 19) = v27;
  *(void *)(a2 + 24) = v25;
  *(unsigned char *)(a2 + 32) = v26;
  *(unsigned char *)(a2 + 33) = v24;
  *(unsigned char *)(a2 + 34) = v14;
  *(unsigned char *)(a2 + 35) = v23;
  *(unsigned char *)(a2 + 36) = v22;
  *(unsigned char *)(a2 + 37) = v21;
  *(unsigned char *)(a2 + 38) = v20;
  *(unsigned char *)(a2 + 39) = v19;
  *(void *)(a2 + 40) = v18;
  *(unsigned char *)(a2 + 48) = BYTE4(v17);
  *(unsigned char *)(a2 + 49) = v15;
  return result;
}

uint64_t _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 120) >> 15;
}

uint64_t _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_(uint64_t result)
{
  *(_WORD *)(result + 120) &= ~0x8000u;
  return result;
}

uint64_t outlined consume of Date.AttributedStyle.InnerStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (a16 < 0) {
    swift_bridgeObjectRelease();
  }

  return swift_unknownObjectRelease();
}

uint64_t outlined release of Date.AttributedStyle.InnerStyle(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 120);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), v4);
  return a1;
}

uint64_t outlined copy of Date.AttributedStyle.InnerStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  swift_unknownObjectRetain();
  if (a16 < 0) {
    swift_bridgeObjectRetain();
  }
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }
  return result;
}

uint64_t specialized Date.FormatStyle.DateFieldCollection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6386277 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1918985593 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72657472617571 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x68746E6F6DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1801807223 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7954788 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x616559664F796164 && a2 == 0xE900000000000072 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7961646B656577 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6F69726550796164 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1920298856 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7246646E6F636573 && a2 == 0xEE006E6F69746361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xEE006C6F626D7953)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

uint64_t specialized Date.AttributedStyle.InnerStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x745374616D726F66 && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823AE820)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Date.FormatStyle.Attributed.subscript.setter(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - v2, v1);
  return swift_setAtWritableKeyPath();
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.AttributedStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle);
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.FormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181D3AD24(uint64_t a1)
{
  swift_retain();
  specialized Date.FormatStyle.Attributed.subscript.setter(a1);

  return swift_release();
}

uint64_t sub_181D3AD7C()
{
  return 8;
}

void *sub_181D3AD88(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for Date.AttributedStyle()
{
  return &type metadata for Date.AttributedStyle;
}

uint64_t assignWithTake for Date.FormatStyle(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 122)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 122) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 122) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Attributed()
{
  return &type metadata for Date.FormatStyle.Attributed;
}

void *type metadata accessor for Date.FormatStyle.TimeStyle.CodingKeys()
{
  return &unk_1ECA44A38;
}

void *type metadata accessor for Date.FormatStyle.DateStyle.CodingKeys()
{
  return &unk_1ECA44C30;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D3AFF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.CodingKeys()
{
  return &type metadata for Date.FormatStyle.CodingKeys;
}

void *type metadata accessor for Date.FormatStyle.Attributed.CodingKeys()
{
  return &unk_1ECA44CE8;
}

void *type metadata accessor for Date.AttributedStyle.CodingKeys()
{
  return &unk_1ECA47758;
}

uint64_t destroy for Date.AttributedStyle(uint64_t a1)
{
  return outlined consume of Date.AttributedStyle.InnerStyle(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(_WORD *)(a1 + 120));
}

uint64_t initializeWithCopy for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  __int16 v19 = *(_WORD *)(a2 + 120);
  outlined copy of Date.AttributedStyle.InnerStyle(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(_WORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  __int16 v32 = *(_WORD *)(a2 + 120);
  outlined copy of Date.AttributedStyle.InnerStyle(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 112);
  __int16 v24 = *(_WORD *)(a1 + 120);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(_WORD *)(a1 + 120) = v32;
  outlined consume of Date.AttributedStyle.InnerStyle(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, v24);
  return a1;
}

uint64_t assignWithTake for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  __int16 v4 = *(_WORD *)(a2 + 120);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  __int16 v17 = *(_WORD *)(a1 + 120);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v3;
  *(_WORD *)(a1 + 120) = v4;
  outlined consume of Date.AttributedStyle.InnerStyle(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17);
  return a1;
}

uint64_t destructiveInjectEnumTag for Date.AttributedStyle.InnerStyle(uint64_t result, __int16 a2)
{
  uint64_t v2 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  __int16 v5 = *(_WORD *)(result + 120) & 0x107 | (a2 << 15);
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v2;
  *(void *)(result + 96) = v3;
  *(void *)(result + 112) = v4;
  *(_WORD *)(result + 120) = v5;
  return result;
}

ValueMetadata *type metadata accessor for Date.AttributedStyle.InnerStyle()
{
  return &type metadata for Date.AttributedStyle.InnerStyle;
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 38) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 38);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 38) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 50) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 50) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 38) = a2 + 2;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

uint64_t specialized Date.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736C6F626D7973 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001823A8D30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C79745365746164 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t partial apply for closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)(a1, *(long long **)(v2 + 16), a2);
}

{
  uint64_t v2;

  return closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  uint64_t v8 = *(void *)(a1 + 184);
  long long v13 = *(_OWORD *)(a1 + 208);
  long long v14 = *(_OWORD *)(a1 + 192);
  long long v12 = *(_OWORD *)(a1 + 224);
  uint64_t v9 = *(void *)(a1 + 240);
  __int16 v10 = *(_WORD *)(a1 + 248);
  outlined consume of Date.AttributedStyle.InnerStyle(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(_WORD *)(a1 + 120));
  outlined consume of Date.AttributedStyle.InnerStyle(v15, v2, v3, v4, v5, v6, v7, v8, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for Date.AttributedStyle.InnerStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D3C99CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.CodingKeys()
{
  return &unk_1ECA47638;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  return &unk_1ECA475A8;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.TimeStyle.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D3CA80);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  return &unk_1ECA47518;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D3CB84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  return &unk_1ECA44AF0;
}

uint64_t specialized Array.append<A>(contentsOf:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Unicode._NFD();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Unicode._NFD.Iterator();
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  MEMORY[0x1F4188790](v8);
  __int16 v32 = (char **)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v11 = *v1;
  int64_t v12 = *((void *)*v2 + 2);
  long long v13 = (char **)(v12 + v10);
  if (__OFADD__(v12, v10))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v14 = v10;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = (uint64_t)v2;
  *uint64_t v2 = v11;
  if (isUniquelyReferenced_nonNull_native && (uint64_t v17 = *((void *)v11 + 3) >> 1, v17 >= (uint64_t)v13))
  {
    long long v13 = v2;
  }
  else
  {
    if (v12 <= (uint64_t)v13) {
      int64_t v18 = (int64_t)v13;
    }
    else {
      int64_t v18 = v12;
    }
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v18, 1, v11);
    long long v13 = v2;
    *uint64_t v2 = v11;
    uint64_t v17 = *((void *)v11 + 3) >> 1;
  }
  uint64_t v2 = v32;
  uint64_t v19 = v17 - *((void *)v11 + 2);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v20 = dispatch thunk of Sequence._copyContents(initializing:)();
  long long v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  int64_t v21 = v5 + 8;
  v22(a1, v4);
  if (v20 < v14) {
    goto LABEL_17;
  }
  if (v20 < 1) {
    goto LABEL_13;
  }
  uint64_t v23 = *((void *)*v13 + 2);
  BOOL v24 = __OFADD__(v23, v20);
  uint64_t v25 = v23 + v20;
  if (v24)
  {
    __break(1u);
LABEL_23:
    while (1)
    {
      unint64_t v27 = *((void *)a1 + 3);
      int64_t v28 = v27 >> 1;
      if ((uint64_t)(v27 >> 1) >= v21 + 1) {
        break;
      }
      a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v21 + 1, 1, a1);
      *long long v13 = a1;
      char v29 = v34;
      int64_t v28 = *((void *)a1 + 3) >> 1;
      if ((v34 & 1) == 0) {
        goto LABEL_25;
      }
LABEL_22:
      *((void *)a1 + 2) = v21;
      if (v29) {
        return (*(uint64_t (**)(char **, uint64_t))(v30 + 8))(v2, v16);
      }
    }
    char v29 = 0;
    do
    {
LABEL_25:
      if (v21 >= v28) {
        break;
      }
      *(_DWORD *)&a1[4 * v21++ + 32] = v33;
      dispatch thunk of IteratorProtocol.next()();
      char v29 = v34;
    }
    while ((v34 & 1) == 0);
    goto LABEL_22;
  }
  *((void *)*v13 + 2) = v25;
LABEL_13:
  if (v20 != v19) {
    return (*(uint64_t (**)(char **, uint64_t))(v30 + 8))(v2, v31);
  }
LABEL_18:
  a1 = *v13;
  int64_t v21 = *((void *)*v13 + 2);
  uint64_t v16 = v31;
  dispatch thunk of IteratorProtocol.next()();
  if ((v34 & 1) == 0) {
    goto LABEL_23;
  }
  return (*(uint64_t (**)(char **, uint64_t))(v30 + 8))(v2, v16);
}

uint64_t PresentationIntent.components.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresentationIntent.components.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *double v1 = a1;
  return result;
}

uint64_t (*PresentationIntent.components.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.count.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t PresentationIntent.debugDescription.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = MEMORY[0x1853025A0](v0, &type metadata for PresentationIntent.IntentType);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PresentationIntent.Kind.debugDescription.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      uint64_t v3 = 0x6D6574497473696CLL;
      goto LABEL_15;
    case 2:
      uint64_t v11 = 0x636F6C4265646F63;
      if (v1) {
        uint64_t v4 = *(void *)v0;
      }
      else {
        uint64_t v4 = 0x3E656E6F6E3CLL;
      }
      if (v1) {
        uint64_t v5 = *(void **)(v0 + 8);
      }
      else {
        uint64_t v5 = (void *)0xE600000000000000;
      }
      swift_bridgeObjectRetain();
      v6.___darwin_time_t countAndFlagsBits = v4;
      v6._unint64_t object = v5;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7.___darwin_time_t countAndFlagsBits = 39;
      v7._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      return v11;
    case 3:
      uint64_t v11 = 0x20656C626174;
      uint64_t v8 = MEMORY[0x1853025A0](v2, &type metadata for PresentationIntent.TableColumn);
      goto LABEL_16;
    case 4:
      uint64_t v3 = 0x776F52656C626174;
      goto LABEL_15;
    case 5:
      uint64_t v3 = 0x6C6543656C626174;
      goto LABEL_15;
    case 6:
      uint64_t result = 0x7061726761726170;
      switch(v2)
      {
        case 1:
          uint64_t result = 0x4C6465726564726FLL;
          break;
        case 2:
          uint64_t result = 0x65726564726F6E75;
          break;
        case 3:
          uint64_t result = 0x6F75516B636F6C62;
          break;
        case 4:
          uint64_t result = 0x636974616D656874;
          break;
        case 5:
          uint64_t result = 0x616548656C626174;
          break;
        default:
          return result;
      }
      return result;
    default:
      uint64_t v3 = 0x20726564616568;
LABEL_15:
      uint64_t v11 = v3;
      uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_16:
      String.append(_:)(*(Swift::String *)&v8);
      swift_bridgeObjectRelease();
      return v11;
  }
}

uint64_t PresentationIntent.Kind.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
    v16.___darwin_time_t countAndFlagsBits = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v5 = specialized PresentationIntent.Kind.CodingNames.init(rawValue:)(v16);
    char v6 = 6;
    uint64_t v7 = v5;
    switch(v5)
    {
      case 1:
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
        uint64_t v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v7 = 0;
        char v6 = 0;
        goto LABEL_22;
      case 2:
        uint64_t v7 = 0;
        uint64_t v5 = 1;
        goto LABEL_22;
      case 3:
        uint64_t v7 = 0;
        uint64_t v5 = 2;
        goto LABEL_22;
      case 4:
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
        uint64_t v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v7 = 0;
        char v6 = 1;
        goto LABEL_22;
      case 5:
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
        uint64_t v5 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)();
        uint64_t v7 = v8;
        char v6 = 2;
        goto LABEL_22;
      case 6:
        uint64_t v7 = 0;
        uint64_t v5 = 3;
        goto LABEL_22;
      case 7:
        uint64_t v7 = 0;
        uint64_t v5 = 4;
        goto LABEL_22;
      case 8:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.TableColumn]);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
        lazy protocol witness table accessor for type [PresentationIntent.TableColumn] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.TableColumn] and conformance <A> [A], &demangling cache variable for type metadata for [PresentationIntent.TableColumn], (void (*)(void))lazy protocol witness table accessor for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        uint64_t v7 = 0;
        uint64_t v5 = v13;
        char v6 = 3;
        goto LABEL_22;
      case 9:
        uint64_t v7 = 0;
        uint64_t v5 = 5;
        goto LABEL_22;
      case 10:
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
        uint64_t v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v7 = 0;
        char v6 = 4;
        goto LABEL_22;
      case 11:
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
        uint64_t v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v7 = 0;
        char v6 = 5;
        goto LABEL_22;
      case 12:
        uint64_t v10 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v12 = v11;
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        dispatch thunk of Decoder.codingPath.getter();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA78], v10);
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      default:
LABEL_22:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        *(void *)a2 = v5;
        *(void *)(a2 + 8) = v7;
        *(unsigned char *)(a2 + 16) = v6;
        break;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t PresentationIntent.Kind.encode(to:)(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  switch(v3)
  {
    case 2:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (!v2)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        lazy protocol witness table accessor for type String? and conformance <A> A?();
        goto LABEL_6;
      }
      break;
    case 3:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (!v2)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.TableColumn]);
        lazy protocol witness table accessor for type [PresentationIntent.TableColumn] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.TableColumn] and conformance <A> [A], &demangling cache variable for type metadata for [PresentationIntent.TableColumn], (void (*)(void))lazy protocol witness table accessor for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
LABEL_6:
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      }
      break;
    case 6:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      break;
    default:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (!v2)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      }
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

void PresentationIntent.Kind.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      Swift::UInt v3 = 4;
      goto LABEL_14;
    case 2:
      Hasher._combine(_:)(5uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PresentationIntent.Kind(v1, v2, 2);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      return;
    case 3:
      Hasher._combine(_:)(8uLL);
      Hasher._combine(_:)(*(void *)(v1 + 16));
      uint64_t v4 = *(void *)(v1 + 16);
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(v1 + 32);
        do
        {
          unsigned int v6 = *v5++;
          Hasher._combine(_:)(v6);
          --v4;
        }
        while (v4);
      }
      return;
    case 4:
      Swift::UInt v3 = 10;
      goto LABEL_14;
    case 5:
      Swift::UInt v3 = 11;
      goto LABEL_14;
    case 6:
      switch(v1)
      {
        case 1:
          Swift::UInt v7 = 2;
          break;
        case 2:
          Swift::UInt v7 = 3;
          break;
        case 3:
          Swift::UInt v7 = 6;
          break;
        case 4:
          Swift::UInt v7 = 7;
          break;
        case 5:
          Swift::UInt v7 = 9;
          break;
        default:
          Swift::UInt v7 = 0;
          break;
      }
      goto LABEL_15;
    default:
      Swift::UInt v3 = 1;
LABEL_14:
      Hasher._combine(_:)(v3);
      Swift::UInt v7 = v1;
LABEL_15:
      Hasher._combine(_:)(v7);
      return;
  }
}

Swift::Int PresentationIntent.Kind.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationIntent.Kind()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent.Kind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.Kind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PresentationIntent.Kind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.Kind(void *a1)
{
  return PresentationIntent.Kind.encode(to:)(a1);
}

Foundation::PresentationIntent::TableColumn::Alignment_optional __swiftcall PresentationIntent.TableColumn.Alignment.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (Foundation::PresentationIntent::TableColumn::Alignment_optional)rawValue;
}

uint64_t PresentationIntent.TableColumn.Alignment.rawValue.getter()
{
  return *v0;
}

Foundation::PresentationIntent::TableColumn::Alignment_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PresentationIntent.TableColumn.Alignment(Swift::Int *a1)
{
  return PresentationIntent.TableColumn.Alignment.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.TableColumn.Alignment()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.TableColumn.Alignment()
{
  return RawRepresentable<>.encode(to:)();
}

void PresentationIntent.TableColumn.alignment.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *PresentationIntent.TableColumn.alignment.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*PresentationIntent.TableColumn.alignment.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::PresentationIntent::TableColumn __swiftcall PresentationIntent.TableColumn.init(alignment:)(Foundation::PresentationIntent::TableColumn alignment)
{
  *uint64_t v1 = *(unsigned char *)alignment.alignment;
  return alignment;
}

void PresentationIntent.TableColumn.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static PresentationIntent.TableColumn.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresentationIntent.TableColumn.CodingKeys()
{
  return 0x6E656D6E67696C61;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresentationIntent.TableColumn.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.TableColumn.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.TableColumn.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PresentationIntent.TableColumn.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.TableColumn.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int PresentationIntent.TableColumn.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PresentationIntent.TableColumn.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.TableColumn.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.TableColumn@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return PresentationIntent.TableColumn.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.TableColumn(void *a1)
{
  return PresentationIntent.TableColumn.encode(to:)(a1);
}

uint64_t PresentationIntent.IntentType.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of PresentationIntent.Kind(v2, v3, v4);
}

uint64_t PresentationIntent.IntentType.kind.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of PresentationIntent.Kind(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*PresentationIntent.IntentType.kind.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.IntentType.identity.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PresentationIntent.IntentType.identity.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*PresentationIntent.IntentType.identity.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.IntentType.debugDescription.getter()
{
  _print_unlocked<A, B>(_:_:)();
  v0.___darwin_time_t countAndFlagsBits = 0x2064692820;
  v0._unint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  v1.___darwin_time_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2.___darwin_time_t countAndFlagsBits = 41;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

void PresentationIntent.IntentType.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 24);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      Swift::UInt v4 = 4;
      goto LABEL_12;
    case 2:
      Hasher._combine(_:)(5uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v5 = v1;
        uint64_t v6 = v2;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v5 = v1;
        uint64_t v6 = 0;
      }
      outlined consume of PresentationIntent.Kind(v5, v6, 2);
      goto LABEL_14;
    case 3:
      Hasher._combine(_:)(8uLL);
      Hasher._combine(_:)(*(void *)(v1 + 16));
      uint64_t v7 = *(void *)(v1 + 16);
      if (v7)
      {
        uint64_t v8 = (unsigned __int8 *)(v1 + 32);
        do
        {
          unsigned int v9 = *v8++;
          Hasher._combine(_:)(v9);
          --v7;
        }
        while (v7);
      }
      goto LABEL_14;
    case 4:
      Swift::UInt v4 = 10;
      goto LABEL_12;
    case 5:
      Swift::UInt v4 = 11;
      goto LABEL_12;
    case 6:
      switch(v1)
      {
        case 1uLL:
          Swift::UInt v10 = 2;
          break;
        case 2uLL:
          Swift::UInt v10 = 3;
          break;
        case 3uLL:
          Swift::UInt v10 = 6;
          break;
        case 4uLL:
          Swift::UInt v10 = 7;
          break;
        case 5uLL:
          Swift::UInt v10 = 9;
          break;
        default:
          Swift::UInt v10 = 0;
          break;
      }
      goto LABEL_13;
    default:
      Swift::UInt v4 = 1;
LABEL_12:
      Hasher._combine(_:)(v4);
      Swift::UInt v10 = v1;
LABEL_13:
      Hasher._combine(_:)(v10);
LABEL_14:
      Hasher._combine(_:)(v3);
      return;
  }
}

uint64_t static PresentationIntent.IntentType.== infix(_:_:)(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  uint64_t v3 = *((void *)a1 + 3);
  char v4 = *((unsigned char *)a2 + 16);
  uint64_t v5 = *((void *)a2 + 3);
  long long v9 = *a1;
  char v10 = v2;
  long long v7 = *a2;
  char v8 = v4;
  return specialized static PresentationIntent.Kind.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v7) & (v3 == v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresentationIntent.IntentType.CodingKeys()
{
  if (*v0) {
    return 0x797469746E656469;
  }
  else {
    return 1684957547;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresentationIntent.IntentType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PresentationIntent.IntentType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.IntentType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.IntentType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PresentationIntent.IntentType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.IntentType.CodingKeys>);
  uint64_t v12 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  char v8 = *((unsigned char *)v1 + 16);
  v11[0] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v7;
  uint64_t v14 = v6;
  char v15 = v8;
  char v16 = 0;
  lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind();
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

Swift::Int PresentationIntent.IntentType.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Swift::UInt v5 = 4;
      goto LABEL_12;
    case 2:
      Hasher._combine(_:)(5uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PresentationIntent.Kind(v1, v2, 2);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      goto LABEL_14;
    case 3:
      Hasher._combine(_:)(8uLL);
      Hasher._combine(_:)(*(void *)(v1 + 16));
      uint64_t v6 = *(void *)(v1 + 16);
      if (v6)
      {
        uint64_t v7 = (unsigned __int8 *)(v1 + 32);
        do
        {
          unsigned int v8 = *v7++;
          Hasher._combine(_:)(v8);
          --v6;
        }
        while (v6);
      }
      goto LABEL_14;
    case 4:
      Swift::UInt v5 = 10;
      goto LABEL_12;
    case 5:
      Swift::UInt v5 = 11;
      goto LABEL_12;
    case 6:
      switch(v1)
      {
        case 1:
          Swift::UInt v9 = 2;
          break;
        case 2:
          Swift::UInt v9 = 3;
          break;
        case 3:
          Swift::UInt v9 = 6;
          break;
        case 4:
          Swift::UInt v9 = 7;
          break;
        case 5:
          Swift::UInt v9 = 9;
          break;
        default:
          Swift::UInt v9 = 0;
          break;
      }
      goto LABEL_13;
    default:
      Swift::UInt v5 = 1;
LABEL_12:
      Hasher._combine(_:)(v5);
      Swift::UInt v9 = v1;
LABEL_13:
      Hasher._combine(_:)(v9);
LABEL_14:
      Hasher._combine(_:)(v4);
      return Hasher._finalize()();
  }
}

uint64_t PresentationIntent.IntentType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.IntentType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v19 = 0;
  lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  LOBYTE(v15) = 1;
  int v18 = v17;
  outlined copy of PresentationIntent.Kind(v9, v16, v17);
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  char v12 = v18;
  *(unsigned char *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of PresentationIntent.Kind(v9, v10, v12);
}

void protocol witness for Hashable.hash(into:) in conformance PresentationIntent.IntentType()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 24);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      Swift::UInt v4 = 4;
      goto LABEL_12;
    case 2:
      Hasher._combine(_:)(5uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PresentationIntent.Kind(v1, v2, 2);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      goto LABEL_14;
    case 3:
      Hasher._combine(_:)(8uLL);
      Swift::UInt v5 = *(void *)(v1 + 16);
      Hasher._combine(_:)(v5);
      if (v5)
      {
        uint64_t v6 = (unsigned __int8 *)(v1 + 32);
        do
        {
          unsigned int v7 = *v6++;
          Hasher._combine(_:)(v7);
          --v5;
        }
        while (v5);
      }
      goto LABEL_14;
    case 4:
      Swift::UInt v4 = 10;
      goto LABEL_12;
    case 5:
      Swift::UInt v4 = 11;
      goto LABEL_12;
    case 6:
      switch(v1)
      {
        case 1:
          Swift::UInt v8 = 2;
          break;
        case 2:
          Swift::UInt v8 = 3;
          break;
        case 3:
          Swift::UInt v8 = 6;
          break;
        case 4:
          Swift::UInt v8 = 7;
          break;
        case 5:
          Swift::UInt v8 = 9;
          break;
        default:
          Swift::UInt v8 = 0;
          break;
      }
      goto LABEL_13;
    default:
      Swift::UInt v4 = 1;
LABEL_12:
      Hasher._combine(_:)(v4);
      Swift::UInt v8 = v1;
LABEL_13:
      Hasher._combine(_:)(v8);
LABEL_14:
      Hasher._combine(_:)(v3);
      return;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent.IntentType()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Swift::UInt v5 = 4;
      goto LABEL_12;
    case 2:
      Hasher._combine(_:)(5uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PresentationIntent.Kind(v1, v2, 2);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      goto LABEL_14;
    case 3:
      Hasher._combine(_:)(8uLL);
      Swift::UInt v6 = *(void *)(v1 + 16);
      Hasher._combine(_:)(v6);
      if (v6)
      {
        unsigned int v7 = (unsigned __int8 *)(v1 + 32);
        do
        {
          unsigned int v8 = *v7++;
          Hasher._combine(_:)(v8);
          --v6;
        }
        while (v6);
      }
      goto LABEL_14;
    case 4:
      Swift::UInt v5 = 10;
      goto LABEL_12;
    case 5:
      Swift::UInt v5 = 11;
      goto LABEL_12;
    case 6:
      switch(v1)
      {
        case 1:
          Swift::UInt v9 = 2;
          break;
        case 2:
          Swift::UInt v9 = 3;
          break;
        case 3:
          Swift::UInt v9 = 6;
          break;
        case 4:
          Swift::UInt v9 = 7;
          break;
        case 5:
          Swift::UInt v9 = 9;
          break;
        default:
          Swift::UInt v9 = 0;
          break;
      }
      goto LABEL_13;
    default:
      Swift::UInt v5 = 1;
LABEL_12:
      Hasher._combine(_:)(v5);
      Swift::UInt v9 = v1;
LABEL_13:
      Hasher._combine(_:)(v9);
LABEL_14:
      Hasher._combine(_:)(v4);
      return Hasher._finalize()();
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.IntentType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PresentationIntent.IntentType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.IntentType(void *a1)
{
  return PresentationIntent.IntentType.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationIntent.IntentType(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  uint64_t v3 = *((void *)a1 + 3);
  char v4 = *((unsigned char *)a2 + 16);
  uint64_t v5 = *((void *)a2 + 3);
  long long v9 = *a1;
  char v10 = v2;
  long long v7 = *a2;
  char v8 = v4;
  return specialized static PresentationIntent.Kind.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v7) & (v3 == v5);
}

uint64_t PresentationIntent.init(_:identity:parent:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  char v8 = *((unsigned char *)a1 + 16);
  uint64_t v9 = *a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.IntentType>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1821037E0;
  *(void *)(result + 32) = v6;
  *(void *)(result + 40) = v7;
  *(unsigned char *)(result + 48) = v8;
  *(void *)(result + 56) = a2;
  if (v9)
  {
    uint64_t v11 = result;
    specialized Array.append<A>(contentsOf:)(v9);
    uint64_t result = v11;
  }
  *a4 = result;
  return result;
}

Foundation::PresentationIntent __swiftcall PresentationIntent.init(types:)(Foundation::PresentationIntent types)
{
  v1->components._rawValue = types.components._rawValue;
  return types;
}

BOOL PresentationIntent.isValid.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    Swift::Int v2 = 0;
    uint64_t v3 = v1 - 1;
    do
    {
      Swift::Bool v4 = PresentationIntent.isValid(at:)(v2);
      if (!v4) {
        break;
      }
    }
    while (v3 != v2++);
  }
  else
  {
    return 0;
  }
  return v4;
}

Swift::Bool __swiftcall PresentationIntent.isValid(at:)(Swift::Int at)
{
  if (at < 0)
  {
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v2 = *v1;
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v3 <= at)
  {
LABEL_50:
    __break(1u);
    JUMPOUT(0x181D400ECLL);
  }
  uint64_t v4 = v2 + 32;
  uint64_t v5 = v2 + 32 + 32 * at;
  uint64_t v6 = *(void *)v5;
  Swift::Bool v7 = 1;
  switch(*(unsigned char *)(v5 + 16))
  {
    case 1:
      if (at + 1 >= v3) {
        return 0;
      }
      Swift::Int v8 = v4 + 32 * (at + 1);
      if (*(unsigned char *)(v8 + 16) != 6) {
        return 0;
      }
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      if (*(void *)v8 ^ 1 | v10)
      {
        if (v9 ^ 2 | v10) {
          return 0;
        }
      }
      LOBYTE(v11) = 6;
      goto LABEL_48;
    case 2:
      return at == 0;
    case 3:
      if (at - 2 >= v3) {
        return 0;
      }
      Swift::Int v12 = v4 + 32 * (at - 2);
      if (*(unsigned char *)(v12 + 16) != 5) {
        return 0;
      }
      uint64_t v10 = *(void *)(v12 + 8);
      if (at - 1 >= v3
        || (Swift::Int v13 = v4 + 32 * (at - 1),
            uint64_t v14 = *(void *)v13,
            uint64_t v15 = *(void *)(v13 + 8),
            int v16 = *(unsigned __int8 *)(v13 + 16),
            v16 != 4)
        && (v16 == 6 ? (v17 = v14 == 5) : (v17 = 0), v17 ? (BOOL v18 = v15 == 0) : (BOOL v18 = 0), !v18))
      {
        uint64_t v19 = *(void *)v12;
        goto LABEL_43;
      }
      Swift::Bool v7 = *(void *)v12 < *(void *)(v6 + 16);
      outlined copy of PresentationIntent.Kind(*(void *)v12, v10, 5);
      uint64_t v9 = v14;
      uint64_t v10 = v15;
      LOBYTE(v11) = v16;
      goto LABEL_48;
    case 4:
LABEL_37:
      if (at - 1 >= v3) {
        return 0;
      }
      Swift::Int v23 = v4 + 32 * (at - 1);
      if (*(unsigned char *)(v23 + 16) != 5) {
        return 0;
      }
      uint64_t v10 = *(void *)(v23 + 8);
      if (at + 1 < v3)
      {
        Swift::Bool v7 = *(unsigned char *)(v4 + 32 * (at + 1) + 16) == 3;
        uint64_t v9 = *(void *)v23;
        LOBYTE(v11) = 5;
        goto LABEL_48;
      }
      uint64_t v19 = *(void *)v23;
LABEL_43:
      LOBYTE(v11) = 5;
      goto LABEL_44;
    case 5:
      if (at + 1 >= v3) {
        return 0;
      }
      Swift::Int v20 = v4 + 32 * (at + 1);
      uint64_t v10 = *(void *)(v20 + 8);
      int v11 = *(unsigned __int8 *)(v20 + 16);
      if (v11 != 4)
      {
        if (v11 != 6) {
          return 0;
        }
        if (*(void *)v20 != 5 || v10 != 0) {
          return 0;
        }
      }
      if (at + 2 < v3 && *(unsigned char *)(v4 + 32 * (at + 2) + 16) == 3)
      {
        uint64_t v9 = *(void *)v20;
LABEL_48:
        outlined copy of PresentationIntent.Kind(v9, v10, v11);
      }
      else
      {
        uint64_t v19 = *(void *)v20;
LABEL_44:
        outlined copy of PresentationIntent.Kind(v19, v10, v11);
        return 0;
      }
      return v7;
    case 6:
      switch(v6)
      {
        case 1:
        case 2:
          if (at - 1 >= v3) {
            return 0;
          }
          Swift::Int v22 = v4 + 32 * (at - 1);
          if (*(unsigned char *)(v22 + 16) != 1) {
            return 0;
          }
          uint64_t v9 = *(void *)v22;
          uint64_t v10 = *(void *)(v22 + 8);
          LOBYTE(v11) = 1;
          goto LABEL_48;
        case 4:
          return at == 0;
        case 5:
          goto LABEL_37;
        default:
          return v7;
      }
    default:
      return v7;
  }
}

uint64_t PresentationIntent.indentationLevel.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  for (unint64_t i = (unsigned __int8 *)(*(void *)v0 + 48); ; i += 32)
  {
    uint64_t v4 = *i;
    if (v4 == 1) {
      goto LABEL_10;
    }
    if (v4 == 6 && !*((void *)i - 1) && *((void *)i - 2) == 3) {
      break;
    }
    uint64_t v4 = 0;
LABEL_10:
    BOOL v6 = __OFADD__(result, v4);
    result += v4;
    if (v6) {
      goto LABEL_15;
    }
LABEL_11:
    if (!--v1) {
      return result;
    }
  }
  BOOL v6 = __OFADD__(result++, 1);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return 0;
}

uint64_t PresentationIntent.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);

  return swift_bridgeObjectRelease();
}

uint64_t static PresentationIntent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PresentationIntent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  BOOL v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
  lazy protocol witness table accessor for type [PresentationIntent.TableColumn] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], &demangling cache variable for type metadata for [PresentationIntent.IntentType], (void (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int PresentationIntent.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PresentationIntent.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::Int v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    lazy protocol witness table accessor for type [PresentationIntent.TableColumn] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], &demangling cache variable for type metadata for [PresentationIntent.IntentType], (void (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationIntent()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresentationIntent(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return PresentationIntent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent(void *a1)
{
  return PresentationIntent.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = MEMORY[0x1853025A0](v0, &type metadata for PresentationIntent.IntentType);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationIntent(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t static PresentationIntent._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSPresentationIntent);
}

id PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (char *)a2[1];
  uint64_t v8 = *((unsigned __int8 *)a2 + 16);
  uint64_t v9 = a3[1];
  unint64_t v10 = *(void *)(*a3 + 16);
  if (v9 == v10)
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (v9 >= v10)
    {
      __break(1u);
LABEL_30:
      if (v9 < 0) {
        uint64_t v21 = v9;
      }
      else {
        uint64_t v21 = v9 & 0xFFFFFFFFFFFFFF8;
      }
LABEL_17:
      id v17 = objc_msgSend(self, sel_tableIntentWithIdentity_columnCount_alignments_nestedInsideIntent_, a1, v6, v21, v3);
      swift_unknownObjectRelease();
      goto LABEL_21;
    }
    uint64_t v11 = v9 + 1;
    uint64_t v12 = *a3 + 32 * v9;
    uint64_t v13 = *(void *)(v12 + 56);
    char v14 = *(unsigned char *)(v12 + 48);
    uint64_t v25 = *v4;
    long long v15 = *(_OWORD *)(v12 + 32);
    a3[1] = v11;
    long long v23 = v15;
    char v24 = v14;
    uint64_t v3 = (void *)PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(v13, &v23);
  }
  switch(v8)
  {
    case 1:
      id v16 = objc_msgSend(self, sel_listItemIntentWithIdentity_ordinal_nestedInsideIntent_, a1, v7, v3);
      goto LABEL_20;
    case 2:
      if (v6) {
        uint64_t v6 = (char *)String._bridgeToObjectiveCImpl()();
      }
      id v17 = objc_msgSend(self, sel_codeBlockIntentWithIdentity_languageHint_nestedInsideIntent_, a1, v6, v3);

      break;
    case 3:
      uint64_t v6 = *(char **)(v7 + 16);
      uint64_t v9 = MEMORY[0x1E4FBC860];
      if (v6)
      {
        *(void *)&long long v23 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        BOOL v18 = (unsigned __int8 *)(v7 + 32);
        uint64_t v19 = v6;
        do
        {
          unsigned int v20 = *v18++;
          objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v20);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v19;
        }
        while (v19);
        uint64_t v9 = v23;
      }
      if ((unint64_t)v9 >> 62) {
        goto LABEL_30;
      }
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      uint64_t v21 = _ContiguousArrayBuffer._asCocoaArray()();
      goto LABEL_17;
    case 4:
      id v16 = objc_msgSend(self, sel_tableRowIntentWithIdentity_row_nestedInsideIntent_, a1, v7, v3);
      goto LABEL_20;
    case 5:
      id v16 = objc_msgSend(self, sel_tableCellIntentWithIdentity_column_nestedInsideIntent_, a1, v7, v3);
      goto LABEL_20;
    case 6:
      switch(v7)
      {
        case 1:
          id v16 = objc_msgSend(self, sel_orderedListIntentWithIdentity_nestedInsideIntent_, a1, v3);
          break;
        case 2:
          id v16 = objc_msgSend(self, sel_unorderedListIntentWithIdentity_nestedInsideIntent_, a1, v3);
          break;
        case 3:
          id v16 = objc_msgSend(self, sel_blockQuoteIntentWithIdentity_nestedInsideIntent_, a1, v3);
          break;
        case 4:
          id v16 = objc_msgSend(self, sel_thematicBreakIntentWithIdentity_nestedInsideIntent_, a1, v3);
          break;
        case 5:
          id v16 = objc_msgSend(self, sel_tableHeaderRowIntentWithIdentity_nestedInsideIntent_, a1, v3);
          break;
        default:
          id v16 = objc_msgSend(self, sel_paragraphIntentWithIdentity_nestedInsideIntent_, a1, v3);
          break;
      }
      goto LABEL_20;
    default:
      id v16 = objc_msgSend(self, sel_headerIntentWithIdentity_level_nestedInsideIntent_, a1, v7, v3);
LABEL_20:
      id v17 = v16;
      break;
  }
LABEL_21:

  return v17;
}

void __swiftcall PresentationIntent._bridgeToObjectiveC()(NSPresentationIntent *__return_ptr retstr)
{
  v7[0] = *v1;
  if (*(void *)(v7[0] + 16))
  {
    char v2 = *(unsigned char *)(v7[0] + 48);
    uint64_t v3 = *(void *)(v7[0] + 56);
    v7[1] = 1;
    uint64_t v6 = v7[0];
    long long v4 = *(_OWORD *)(v7[0] + 32);
    char v5 = v2;
    swift_bridgeObjectRetain();
    if (PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(v3, (uint64_t *)&v4, v7))
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PresentationIntent._forceBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((v2 & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void static PresentationIntent._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0;
  if (!a1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v4);
  if (v3)
  {
    if (v4)
    {
      *a2 = v4;
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PresentationIntent(void *a1, void *a2)
{
  specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((v2 & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

BOOL specialized static PresentationIntent.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1:
      if (v7 != 1) {
        goto LABEL_38;
      }
      outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 1);
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      char v10 = 1;
      goto LABEL_29;
    case 2:
      if (v7 != 2) {
        goto LABEL_37;
      }
      if (!v3)
      {
        swift_bridgeObjectRetain();
        outlined copy of PresentationIntent.Kind(v5, v6, 2);
        outlined copy of PresentationIntent.Kind(v2, 0, 2);
        outlined consume of PresentationIntent.Kind(v2, 0, 2);
        outlined consume of PresentationIntent.Kind(v5, v6, 2);
        if (!v6) {
          return 1;
        }
        goto LABEL_92;
      }
      if (!v6)
      {
        outlined copy of PresentationIntent.Kind(*(void *)a2, 0, 2);
        outlined copy of PresentationIntent.Kind(v2, v3, 2);
LABEL_92:
        outlined consume of PresentationIntent.Kind(v2, v3, 2);
        uint64_t v26 = v5;
        uint64_t v27 = v6;
        char v28 = 2;
LABEL_39:
        outlined consume of PresentationIntent.Kind(v26, v27, v28);
        return 0;
      }
      uint64_t v11 = *(void *)a1;
      if (v2 != v5 || v3 != v6)
      {
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of PresentationIntent.Kind(v5, v6, 2);
        outlined copy of PresentationIntent.Kind(v2, v3, 2);
        outlined consume of PresentationIntent.Kind(v2, v3, 2);
        outlined consume of PresentationIntent.Kind(v5, v6, 2);
        return (v13 & 1) != 0;
      }
      outlined copy of PresentationIntent.Kind(v11, v3, 2);
      outlined copy of PresentationIntent.Kind(v2, v3, 2);
      outlined consume of PresentationIntent.Kind(v2, v3, 2);
      uint64_t v21 = v2;
      uint64_t v22 = v3;
      char v23 = 2;
LABEL_94:
      outlined consume of PresentationIntent.Kind(v21, v22, v23);
      return 1;
    case 3:
      if (v7 == 3)
      {
        uint64_t v14 = *(void *)(v2 + 16);
        if (v14 == *(void *)(v5 + 16))
        {
          if (v14) {
            BOOL v15 = v2 == v5;
          }
          else {
            BOOL v15 = 1;
          }
          if (v15)
          {
LABEL_24:
            outlined copy of PresentationIntent.Kind(*(void *)a2, *(void *)(a2 + 8), 3);
            outlined copy of PresentationIntent.Kind(v2, v3, 3);
            outlined consume of PresentationIntent.Kind(v2, v3, 3);
            uint64_t v21 = v5;
            uint64_t v22 = v6;
            char v23 = 3;
            goto LABEL_94;
          }
          id v16 = (unsigned __int8 *)(v2 + 32);
          id v17 = (unsigned __int8 *)(v5 + 32);
          while (1)
          {
            int v19 = *v16++;
            int v18 = v19;
            int v20 = *v17++;
            if (v18 != v20) {
              break;
            }
            if (!--v14) {
              goto LABEL_24;
            }
          }
        }
        outlined copy of PresentationIntent.Kind(*(void *)a2, *(void *)(a2 + 8), 3);
        outlined copy of PresentationIntent.Kind(v2, v3, 3);
        outlined consume of PresentationIntent.Kind(v2, v3, 3);
        uint64_t v26 = v5;
        uint64_t v27 = v6;
        char v28 = 3;
      }
      else
      {
LABEL_37:
        swift_bridgeObjectRetain();
LABEL_38:
        outlined copy of PresentationIntent.Kind(v5, v6, v7);
        outlined consume of PresentationIntent.Kind(v2, v3, v4);
        uint64_t v26 = v5;
        uint64_t v27 = v6;
        char v28 = v7;
      }
      goto LABEL_39;
    case 4:
      if (v7 != 4) {
        goto LABEL_38;
      }
      outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 4);
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      char v10 = 4;
      goto LABEL_29;
    case 5:
      if (v7 != 5) {
        goto LABEL_38;
      }
      outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 5);
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      char v10 = 5;
      goto LABEL_29;
    case 6:
      switch(v2)
      {
        case 1:
          if (v7 != 6 || v5 != 1 || v6 != 0) {
            goto LABEL_38;
          }
          outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 6);
          uint64_t v24 = 1;
          outlined consume of PresentationIntent.Kind(1, 0, 6);
          return v24;
        case 2:
          if (v7 != 6 || v5 != 2 || v6 != 0) {
            goto LABEL_38;
          }
          outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 6);
          uint64_t v21 = 2;
          goto LABEL_90;
        case 3:
          if (v7 != 6 || v5 != 3 || v6 != 0) {
            goto LABEL_38;
          }
          outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 6);
          uint64_t v21 = 3;
          goto LABEL_90;
        case 4:
          if (v7 != 6 || v5 != 4 || v6 != 0) {
            goto LABEL_38;
          }
          outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 6);
          uint64_t v21 = 4;
          goto LABEL_90;
        case 5:
          if (v7 != 6 || v5 != 5 || v6 != 0) {
            goto LABEL_38;
          }
          outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 6);
          uint64_t v21 = 5;
          goto LABEL_90;
        default:
          if (v7 != 6 || (v6 | v5) != 0) {
            goto LABEL_38;
          }
          outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 6);
          uint64_t v21 = 0;
LABEL_90:
          uint64_t v22 = 0;
          char v23 = 6;
          break;
      }
      goto LABEL_94;
    default:
      if (*(unsigned char *)(a2 + 16)) {
        goto LABEL_38;
      }
      outlined consume of PresentationIntent.Kind(*(void *)a1, v3, 0);
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      char v10 = 0;
LABEL_29:
      outlined consume of PresentationIntent.Kind(v8, v9, v10);
      return v2 == v5;
  }
}

unint64_t specialized PresentationIntent.Kind.CodingNames.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2.___darwin_time_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresentationIntent.Kind.CodingNames.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PresentationIntent.TableColumn] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized PresentationIntent.IntentType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of PresentationIntent.Kind(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of PresentationIntent.Kind(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationIntent.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PresentationIntent.Kind(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for PresentationIntent.Kind(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.Kind()
{
  return &type metadata for PresentationIntent.Kind;
}

ValueMetadata *type metadata accessor for PresentationIntent.TableColumn()
{
  return &type metadata for PresentationIntent.TableColumn;
}

unsigned char *storeEnumTagSinglePayload for PresentationIntent.TableColumn(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D41CB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.TableColumn.Alignment()
{
  return &type metadata for PresentationIntent.TableColumn.Alignment;
}

uint64_t initializeWithCopy for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of PresentationIntent.Kind(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of PresentationIntent.Kind(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationIntent.IntentType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.IntentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.CodingKeys()
{
  return &type metadata for PresentationIntent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PresentationIntent.IntentType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D41F78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PresentationIntent.IntentType.CodingKeys()
{
  return &unk_1ECA3AEC0;
}

unsigned char *storeEnumTagSinglePayload for PresentationIntent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D4204CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for PresentationIntent.TableColumn.CodingKeys()
{
  return &unk_1ECA3B060;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation8CalendarV9ComponentOG_AJ9component_Si9multitudets5NeverOTg5015_s10Foundation8e2V9f40OAESiIgnrd_A2E9component_Si9multitudets5i106OIegnrzr_TR090_s10Foundation16ICUDateFormatterC14DateFormatInfoV14UpdateScheduleO15updateIntervalsSayAA8b2L54C41O9component_Si9multitudetGvgAL_SitALXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v16 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v16;
  uint64_t result = specialized Set.startIndex.getter(a1);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_14;
    }
    char v10 = *(unsigned char *)(*(void *)(a1 + 48) + v5);
    unint64_t v12 = *(void *)(v16 + 16);
    unint64_t v11 = *(void *)(v16 + 24);
    if (v12 >= v11 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    }
    *(void *)(v16 + 16) = v12 + 1;
    uint64_t v13 = v16 + 16 * v12;
    *(unsigned char *)(v13 + 32) = v10;
    *(void *)(v13 + 40) = 1;
    uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    uint64_t v5 = result;
    uint64_t v7 = v14;
    char v9 = v15 & 1;
    if (!--v1)
    {
      outlined consume of Set<Calendar.Component>.Index._Variant(result, v14, v15 & 1);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Ss7elementtG_Sss5NeverOTg5166_sSS10FoundationE21purgingStringLiterals33_897C603A04DF76F04B69FE4D70F5F325LLSSyFSsSi6offset_Ss7elementt_tcfu_32f319bcf0ad9587a902b48655fa9ced40SiAD_SsAEtSsTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v13;
    unsigned int v4 = (uint64_t *)(a1 + 64);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      unint64_t v9 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1);
      }
      *(void *)(v13 + 16) = v9 + 1;
      unint64_t v11 = (void *)(v13 + 32 * v9);
      void v11[4] = v5;
      v11[5] = v6;
      _OWORD v11[6] = v8;
      _OWORD v11[7] = v7;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS9UTF16ViewV_So16UDateFormatFieldVs5NeverOTg5097_sSS10FoundationE14updateSchedule33_897C603A04DF76F04B69FE4D70F5F325LLAA16ICUDateFormatterC14Dateg22InfoV06UpdateC0OvgSo05f2P5H15Vs6UInt16VXEfU_Tf1cn_n(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_63;
  }
  uint64_t v5 = String.UTF16View._nativeGetOffset(for:)();
LABEL_3:
  uint64_t v6 = v5;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v5) {
    return v7;
  }
  uint64_t v26 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = ((unint64_t)a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 4 << v9;
    BOOL v11 = a1 < 0;
    if ((a2 & 0x2000000000000000) != 0) {
      unint64_t v12 = v4;
    }
    else {
      unint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if ((a2 & 0x2000000000000000) != 0) {
      BOOL v11 = (a2 & 0x4000000000000000) != 0;
    }
    BOOL v21 = v11;
    unint64_t v13 = 15;
    uint64_t v22 = a1;
    uint64_t v23 = v10;
    while (1)
    {
      if (!v6)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        uint64_t v5 = String.UTF16View._foreignCount()();
        goto LABEL_3;
      }
      uint64_t v4 = v13 & 0xC;
      unint64_t v14 = v13;
      if (v4 == v10) {
        unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a1, a2);
      }
      if (v14 >> 16 >= v12) {
        goto LABEL_59;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        String.UTF16View._foreignSubscript(position:)();
        goto LABEL_32;
      }
      if (v14)
      {
        if ((a2 & 0x2000000000000000) != 0) {
          goto LABEL_26;
        }
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v14, a1, a2);
        if ((a2 & 0x2000000000000000) != 0)
        {
LABEL_26:
          uint64_t v24 = a1;
          uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_27;
        }
      }
      if ((a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
LABEL_27:
      unsigned int v15 = _decodeScalar(_:startingAt:)();
      if ((v14 & 0xC000) == 0x4000)
      {
        if (v15 < 0x10000) {
          goto LABEL_61;
        }
      }
      else if (HIWORD(v15) && (((unsigned __int16)((v15 + 67043328) >> 10) + 55296) & 0x10000) != 0)
      {
        goto LABEL_62;
      }
LABEL_32:
      int v16 = udat_patternCharToDateFormatField();
      uint64_t v7 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v26;
      }
      unint64_t v18 = *(void *)(v7 + 16);
      unint64_t v17 = *(void *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v7 = v26;
      }
      *(void *)(v7 + 16) = v18 + 1;
      *(_DWORD *)(v7 + 4 * v18 + 32) = v16;
      uint64_t v10 = v23;
      a1 = v22;
      if (v4 == v23) {
        unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v22, a2);
      }
      uint64_t v4 = v13 >> 16;
      if (v13 >> 16 >= v12) {
        goto LABEL_60;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t v13 = MEMORY[0x185302270](v13, v22, a2);
        goto LABEL_14;
      }
      if (v21)
      {
        unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_14;
      }
      if ((v13 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v20 = _StringGuts.scalarAlignSlow(_:)(v13, v22, a2);
        unint64_t v13 = v20 & 0xFFFFFFFFFFFFFFF2 | 1;
        uint64_t v4 = v20 >> 16;
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_44:
          if ((v22 & 0x1000000000000000) != 0)
          {
            LODWORD(v19) = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32 + v4);
            if ((v19 & 0x80) == 0) {
              goto LABEL_53;
            }
          }
          else
          {
            LODWORD(v19) = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v4);
            if ((v19 & 0x80) == 0)
            {
LABEL_53:
              uint64_t v19 = 1;
              goto LABEL_54;
            }
          }
          goto LABEL_46;
        }
      }
      uint64_t v24 = v22;
      uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
      LODWORD(v19) = *((unsigned __int8 *)&v24 + v4);
      if ((v19 & 0x80) == 0) {
        goto LABEL_53;
      }
LABEL_46:
      LODWORD(v19) = __clz(v19 ^ 0xFF) - 24;
      if (v19 != 4)
      {
        uint64_t v19 = v19;
        goto LABEL_54;
      }
      if ((v13 & 0xC000) != 0)
      {
        uint64_t v19 = 4;
LABEL_54:
        unint64_t v13 = (v13 + (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_14;
      }
      unint64_t v13 = v13 & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_14:
      if (!--v6) {
        return v7;
      }
    }
  }
  __break(1u);
  return result;
}

Swift::tuple_String_OpaquePointer_optional __swiftcall ICUDateFormatter.attributedFormat(_:)(Foundation::Date a1)
{
  type metadata accessor for ICU.FieldPositer();
  uint64_t inited = swift_initStackObject();
  uint64_t v2 = ufieldpositer_open();
  if (!v2) {
    __break(1u);
  }
  *(void *)(inited + 16) = v2;
  swift_retain();
  swift_retain();
  uint64_t v3 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
  uint64_t v5 = v4;
  swift_release();
  swift_release();
  if (v5)
  {
    uint64_t v15 = v3;
    int v16 = (unint64_t *)MEMORY[0x1E4FBC860];
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    uint64_t v6 = v16;
    swift_retain();
    int v7 = ufieldpositer_next();
    if ((v7 & 0x80000000) == 0)
    {
      int v8 = v7;
      do
      {
        unint64_t v10 = v16[2];
        unint64_t v9 = v16[3];
        if (v10 >= v9 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        }
        _OWORD v16[2] = v10 + 1;
        BOOL v11 = &v16[3 * v10];
        *((_DWORD *)v11 + 8) = v8;
        v11[5] = 0;
        _OWORD v11[6] = 0;
        int v8 = ufieldpositer_next();
      }
      while ((v8 & 0x80000000) == 0);
    }
    swift_release_n();
    swift_release();
    uint64_t v12 = v15;
  }
  else
  {
    swift_release();
    uint64_t v12 = 0;
    uint64_t v6 = 0;
  }
  unint64_t v13 = v5;
  unint64_t v14 = v6;
  result.value._1._rawValue = v14;
  result.value._0._unint64_t object = v13;
  result.value._0.___darwin_time_t countAndFlagsBits = v12;
  return result;
}

void ICUDateFormatter.DateFormatInfo.UpdateSchedule.updateIntervals.getter()
{
  uint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    uint64_t v2 = Calendar.ComponentSet.set.getter();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation8CalendarV9ComponentOG_AJ9component_Si9multitudets5NeverOTg5015_s10Foundation8e2V9f40OAESiIgnrd_A2E9component_Si9multitudets5i106OIegnrzr_TR090_s10Foundation16ICUDateFormatterC14DateFormatInfoV14UpdateScheduleO15updateIntervalsSayAA8b2L54C41O9component_Si9multitudetGvgAL_SitALXEfU_Tf3nnnpf_nTf1cn_n(v2);
    swift_bridgeObjectRelease();
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, multitude: Int)>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1821037E0;
  *(unsigned char *)(v3 + 32) = 13;
  double v4 = __exp10((double)v1) + 0.0;
  if (v4 < INFINITY) {
    *(void *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
  }
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v4 < 9.22337204e18)
  {
    *(void *)(v3 + 40) = (uint64_t)v4;
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t ICUDateFormatter.__deallocating_deinit()
{
  udat_close();

  return swift_deallocClassInstance();
}

void *ICUDateFormatter.symbols(for:)()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v0 = udat_countSymbols();
  if (v0 < 0) {
    goto LABEL_15;
  }
  int v1 = v0;
  if (v0)
  {
    int v2 = 0;
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    while (v1 != v2)
    {
      uint64_t v5 = swift_retain();
      MEMORY[0x1F4188790](v5);
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v11, &v12);
      uint64_t v6 = v13;
      if (v13)
      {
        uint64_t v7 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
        }
        v3[2] = v9 + 1;
        double v4 = &v3[2 * v9];
        v4[4] = v7;
        v4[5] = v6;
      }
      if (v1 == ++v2) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return (void *)MEMORY[0x1E4FBC860];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUDateFormatter.DateFormatInfo()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateFormatter.DateFormatInfo()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUDateFormatter.PatternCacheKey()
{
  uint64_t v1 = v0[1];
  char v2 = *((unsigned char *)v0 + 16);
  char v3 = *((unsigned char *)v0 + 24);
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[6];
  char v6 = *((unsigned char *)v0 + 56);
  char v7 = *((unsigned char *)v0 + 57);
  __int16 v8 = *((_WORD *)v0 + 31);
  uint64_t v9 = v0[8];
  __int16 v10 = *((_WORD *)v0 + 36);
  uint64_t v13 = *v0;
  uint64_t v14 = v1;
  char v15 = v2;
  char v16 = v3;
  uint64_t v17 = v4;
  int v18 = *((_DWORD *)v0 + 10);
  uint64_t v19 = v5;
  char v20 = v6;
  char v21 = v7;
  int v22 = *(_DWORD *)((char *)v0 + 58);
  __int16 v23 = v8;
  uint64_t v24 = v9;
  __int16 v25 = v10;
  long long v26 = *((_OWORD *)v0 + 5);
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateFormatter.PatternCacheKey()
{
  uint64_t v1 = v0[1];
  char v2 = *((unsigned char *)v0 + 16);
  char v3 = *((unsigned char *)v0 + 24);
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[6];
  char v6 = *((unsigned char *)v0 + 56);
  char v7 = *((unsigned char *)v0 + 57);
  __int16 v8 = *((_WORD *)v0 + 31);
  uint64_t v9 = v0[8];
  __int16 v10 = *((_WORD *)v0 + 36);
  uint64_t v13 = *v0;
  uint64_t v14 = v1;
  char v15 = v2;
  char v16 = v3;
  uint64_t v17 = v4;
  int v18 = *((_DWORD *)v0 + 10);
  uint64_t v19 = v5;
  char v20 = v6;
  char v21 = v7;
  int v22 = *(_DWORD *)((char *)v0 + 58);
  __int16 v23 = v8;
  uint64_t v24 = v9;
  __int16 v25 = v10;
  long long v26 = *((_OWORD *)v0 + 5);
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

uint64_t ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t, void *);
  uint64_t (*v18)(uint64_t, void *);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void *);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)a1[3];
  uint64_t v30 = a1[7];
  uint64_t v31 = a1[6];
  if (a1[4])
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[1];
    uint64_t ObjectType = swift_getObjectType();
    __int16 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    swift_unknownObjectRetain();
    uint64_t v9 = ObjectType;
    uint64_t v3 = v6;
    uint64_t v10 = v8(v9, v5);
    char v28 = v11;
    char v29 = v10;
    swift_unknownObjectRelease();
  }
  else
  {
    char v28 = 0;
    char v29 = 0;
  }
  uint64_t v12 = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(v12, v3);
  long long v26 = v15;
  uint64_t v27 = v14;
  swift_unknownObjectRelease();
  uint64_t v16 = swift_getObjectType();
  uint64_t v17 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v4[3];
  swift_unknownObjectRetain();
  v17(&v32, v16, v4);
  swift_unknownObjectRelease();
  __int16 v25 = v32;
  int v18 = (uint64_t (*)(uint64_t, void *))v4[7];
  swift_unknownObjectRetain();
  uint64_t v19 = v18(v16, v4);
  swift_unknownObjectRelease();
  char v20 = (uint64_t (*)(uint64_t, void *))v4[9];
  swift_unknownObjectRetain();
  char v21 = v20(v16, v4);
  if (v28) {
    int v22 = v29;
  }
  else {
    int v22 = 0;
  }
  if (v28) {
    __int16 v23 = v28;
  }
  else {
    __int16 v23 = 0xE000000000000000;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  Swift::tuple_String_OpaquePointer_optional result = swift_unknownObjectRelease();
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v23;
  *(void *)(a2 + 16) = v27;
  *(void *)(a2 + 24) = v26;
  *(unsigned char *)(a2 + 32) = v25;
  *(void *)(a2 + 40) = v19;
  *(void *)(a2 + 48) = v21;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v31;
  *(void *)(a2 + 72) = v30;
  *(unsigned char *)(a2 + 80) = 1;
  *(void *)(a2 + 88) = 0xC1CD27E440000000;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  char v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v3 = a1[1];
  v25[0] = *a1;
  v25[1] = v3;
  Calendar.locale.getter(&v26);
  if (v26)
  {
    uint64_t v4 = v27;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
    __int16 v23 = v7;
    uint64_t v24 = v6;
    swift_unknownObjectRelease();
  }
  else
  {
    __int16 v23 = 0;
    uint64_t v24 = 0;
  }
  __int16 v8 = swift_getObjectType();
  uint64_t v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v9(&v26, v8, v3);
  swift_unknownObjectRelease();
  uint64_t v10 = v27;
  unint64_t v11 = swift_getObjectType();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v11, v10);
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v15(v25, v8, v3);
  swift_unknownObjectRelease();
  uint64_t v16 = v25[0];
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  int v18 = v17(v8, v3);
  swift_unknownObjectRelease();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v8, v3);
  Swift::tuple_String_OpaquePointer_optional result = swift_unknownObjectRelease();
  int v22 = v23;
  char v21 = v24;
  if (!v23)
  {
    char v21 = 0;
    int v22 = 0xE000000000000000;
  }
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v14;
  *(unsigned char *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = v18;
  *(void *)(a2 + 48) = v19;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0xE000000000000000;
  *(unsigned char *)(a2 + 80) = 1;
  *(void *)(a2 + 88) = 0xC1CD27E440000000;
  return result;
}

uint64_t ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)(uint64_t result)
{
  uint64_t v2 = *(void *)result;
  char v3 = *(unsigned char *)(result + 8);
  uint64_t v4 = *(void *)v1;
  if (*(unsigned char *)(v1 + 8))
  {
    if (*(unsigned char *)(result + 8))
    {
      uint64_t v5 = v4 | v2;
      if ((v5 & 0x2000) != 0)
      {
        uint64_t v2 = 0;
        char v3 = 0;
      }
      else if ((v5 & 0x40) != 0)
      {
        char v3 = 1;
        uint64_t v2 = 64;
      }
      else
      {
        uint64_t v6 = v5 & 1;
        if ((v5 & 0x20) != 0)
        {
          uint64_t v2 = v6 | 0x20;
        }
        else if ((v5 & 0x10) != 0)
        {
          uint64_t v2 = v6 | 0x10;
        }
        else if ((v5 & 0x80) != 0)
        {
          uint64_t v2 = v6 | 0x80;
        }
        else if ((v5 & 8) != 0)
        {
          uint64_t v2 = v6 | 8;
        }
        else
        {
          uint64_t v7 = unk_1ECA38970;
          if ((unk_1ECA38970 & ~qword_1ECA38968) == 0) {
            uint64_t v7 = 0;
          }
          uint64_t v8 = v7 | qword_1ECA38968;
          uint64_t v9 = qword_1ECA38978;
          if ((qword_1ECA38978 & ~v8) == 0) {
            uint64_t v9 = 0;
          }
          uint64_t v10 = v9 | v8;
          if ((unk_1ECA38980 & ~v10) != 0) {
            uint64_t v11 = unk_1ECA38980;
          }
          else {
            uint64_t v11 = 0;
          }
          uint64_t v12 = v11 | v10;
          uint64_t v14 = qword_1ECA38988;
          uint64_t v13 = unk_1ECA38990;
          if ((qword_1ECA38988 & ~v12) == 0) {
            uint64_t v14 = 0;
          }
          uint64_t v15 = v14 | v12;
          if ((unk_1ECA38990 & ~v15) == 0) {
            uint64_t v13 = 0;
          }
          uint64_t v2 = (v15 | v13 | 1) & v5;
        }
        char v3 = 1;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(result + 8)) {
      return result;
    }
    char v3 = 0;
    if (v2 >= v4) {
      uint64_t v2 = *(void *)v1;
    }
  }
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return result;
}

uint64_t one-time initialization function for updateScheduleCache(uint64_t a1)
{
  return one-time initialization function for patternCache(a1, &demangling cache variable for type metadata for LockedState<[ICUDateFormatter.DateFormatInfo : ICUDateFormatter.DateFormatInfo.UpdateSchedule]>._Buffer, &static ICUDateFormatter.DateFormatInfo.updateScheduleCache);
}

uint64_t closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *(_OWORD *)(a2 + 16);
  v90[0] = *(_OWORD *)a2;
  v90[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  _OWORD v90[2] = *(_OWORD *)(a2 + 32);
  uint64_t v90[3] = v8;
  outlined retain of Date.VerbatimFormatStyle(a2);
  ICUDateFormatter.DateFormatInfo.init(_:)(v90, (uint64_t)v91);
  uint64_t v9 = *a1;
  if (*(void *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
    if (v11)
    {
      uint64_t v12 = *(void *)(v9 + 56) + 16 * v10;
      unint64_t v13 = *(void *)v12;
      LOBYTE(v14) = *(unsigned char *)(v12 + 8);
      outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      goto LABEL_89;
    }
    outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
  }
  long long v85 = a1;
  uint64_t v84 = a3;
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  uint64_t v18 = udat_toCalendarDateField();
  LODWORD(v86) = v18;
  *(void *)&v90[0] = 39;
  *((void *)&v90[0] + 1) = 0xE100000000000000;
  MEMORY[0x1F4188790](v18);
  v83[2] = v90;
  swift_bridgeObjectRetain();
  uint64_t v19 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 0, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v83, v16, v17);
  uint64_t v20 = specialized Sequence.filter(_:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Ss7elementtG_Sss5NeverOTg5166_sSS10FoundationE21purgingStringLiterals33_897C603A04DF76F04B69FE4D70F5F325LLSSyFSsSi6offset_Ss7elementt_tcfu_32f319bcf0ad9587a902b48655fa9ced40SiAD_SsAEtSsTf3nnnpk_nTf1cn_n(v20);
  swift_bridgeObjectRelease();
  *(void *)&v90[0] = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
  LOBYTE(v22) = lazy protocol witness table accessor for type [Substring] and conformance [A]();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v23 = Sequence<>.joined(separator:)();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS9UTF16ViewV_So16UDateFormatFieldVs5NeverOTg5097_sSS10FoundationE14updateSchedule33_897C603A04DF76F04B69FE4D70F5F325LLAA16ICUDateFormatterC14Dateg22InfoV06UpdateC0OvgSo05f2P5H15Vs6UInt16VXEfU_Tf1cn_n(v23, v25);
  v83[4] = v3;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(updated + 16);
  if (!v27)
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  int v22 = &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>;
  long long v87 = xmmword_1821037E0;
  while (1)
  {
    int v29 = *(_DWORD *)(updated + 4 * v28 + 32);
    uint64_t v30 = v14[2];
    if (!v30 || (unint64_t v31 = v14[v30 + 3], (v32 = *(void *)(v31 + 16)) == 0) || *(_DWORD *)(v31 + 32) != v29)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v87;
      *(_DWORD *)(v35 + 32) = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      }
      unint64_t v37 = v14[2];
      unint64_t v36 = v14[3];
      if (v37 >= v36 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v14);
      }
      _OWORD v14[2] = v37 + 1;
      v14[v37 + 4] = v35;
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32 + 1, 1, (char *)v31);
    }
    unint64_t v13 = *(void *)(v31 + 16);
    unint64_t v33 = *(void *)(v31 + 24);
    if (v13 >= v33 >> 1) {
      unint64_t v31 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v13 + 1, 1, (char *)v31);
    }
    *(void *)(v31 + 16) = v13 + 1;
    *(_DWORD *)(v31 + 4 * v13 + 32) = v29;
    unint64_t v34 = v14[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      break;
    }
    if (!v34) {
      goto LABEL_25;
    }
LABEL_18:
    if (v34 > v14[2])
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    v14[v34 + 3] = v31;
    swift_bridgeObjectRelease();
LABEL_8:
    if (v27 == ++v28) {
      goto LABEL_26;
    }
  }
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
  if (v34) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  swift_bridgeObjectRelease();
LABEL_28:
  swift_bridgeObjectRelease();
  *(void *)&v90[0] = 0;
  BYTE8(v90[0]) = 1;
  uint64_t v38 = v14[2];
  if (v38)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = 0;
    int v40 = v86;
    do
    {
      int v22 = (uint64_t *)v14[v39 + 4];
      uint64_t v41 = v22[2];
      if (v41)
      {
        if (*((_DWORD *)v22 + 8) == 8)
        {
          uint64_t v42 = 9 - v41;
          if ((BYTE8(v90[0]) & 1) == 0 && v42 >= *(uint64_t *)&v90[0]) {
            uint64_t v42 = *(void *)&v90[0];
          }
          *(void *)&v90[0] = v42;
          BYTE8(v90[0]) = 0;
        }
        else
        {
          swift_bridgeObjectRetain();
          unsigned int v43 = udat_toCalendarDateField();
          if (v43 != v40 && v43 <= 0x16 && ((0x4ABDFFu >> v43) & 1) != 0)
          {
            uint64_t v88 = qword_1821A4838[v43];
            char v89 = 1;
            ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v88);
            int v40 = v86;
          }
          swift_bridgeObjectRelease();
        }
      }
      ++v39;
    }
    while (v38 != v39);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)&v90[0];
  LOBYTE(v14) = BYTE8(v90[0]);
  unsigned __int8 v44 = v85;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v90[0] = *v44;
  uint64_t v27 = *(void *)&v90[0];
  uint64_t *v44 = 0x8000000000000000;
  unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
  uint64_t v47 = *(void *)(v27 + 16);
  BOOL v48 = (v46 & 1) == 0;
  uint64_t v49 = v47 + v48;
  if (__OFADD__(v47, v48)) {
    goto LABEL_53;
  }
  LOBYTE(v22) = v46;
  if (*(void *)(v27 + 24) < v49)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
    uint64_t v50 = *(void *)&v90[0];
    unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
    if ((v22 & 1) != (v52 & 1)) {
      goto LABEL_92;
    }
    unint64_t v31 = v51;
    if ((v22 & 1) == 0)
    {
LABEL_87:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v91, v13, (char)v14, (void *)v50);
      outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
LABEL_88:
      uint64_t *v44 = v50;
      swift_bridgeObjectRelease();
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      a3 = v84;
LABEL_89:
      *(void *)a3 = v13;
      *(unsigned char *)(a3 + 8) = (_BYTE)v14;
      return result;
    }
LABEL_51:
    uint64_t v53 = *(void *)(v50 + 56) + 16 * v31;
    *(void *)uint64_t v53 = v13;
    *(unsigned char *)(v53 + 8) = (_BYTE)v14;
    goto LABEL_88;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v50 = v27;
    if ((v46 & 1) == 0) {
      goto LABEL_87;
    }
    goto LABEL_51;
  }
LABEL_54:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  uint64_t v54 = static _DictionaryStorage.copy(original:)();
  uint64_t v50 = v54;
  if (!*(void *)(v27 + 16))
  {
LABEL_86:
    swift_bridgeObjectRelease();
    unsigned __int8 v44 = v85;
    if ((v22 & 1) == 0) {
      goto LABEL_87;
    }
    goto LABEL_51;
  }
  uint64_t v55 = (void *)(v54 + 64);
  unint64_t v56 = (unint64_t)((1 << *(unsigned char *)(v50 + 32)) + 63) >> 6;
  if (v50 != v27 || (unint64_t)v55 >= v27 + 64 + 8 * v56) {
    memmove(v55, (const void *)(v27 + 64), 8 * v56);
  }
  uint64_t v86 = v27 + 64;
  uint64_t v57 = 0;
  *(void *)(v50 + 16) = *(void *)(v27 + 16);
  uint64_t v58 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v59 = -1;
  if (v58 < 64) {
    uint64_t v59 = ~(-1 << v58);
  }
  unint64_t v60 = v59 & *(void *)(v27 + 64);
  *(void *)&long long v87 = (unint64_t)(v58 + 63) >> 6;
  while (2)
  {
    if (v60)
    {
      unint64_t v61 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      unint64_t v62 = v61 | (v57 << 6);
LABEL_62:
      uint64_t v63 = 96 * v62;
      uint64_t v64 = *(void *)(v27 + 48) + 96 * v62;
      uint64_t v65 = *(void *)(v64 + 8);
      uint64_t v66 = *(void *)(v64 + 16);
      uint64_t v67 = *(void *)(v64 + 24);
      char v68 = *(unsigned char *)(v64 + 32);
      char v69 = *(unsigned char *)(v64 + 56);
      uint64_t v70 = *(void *)(v64 + 64);
      uint64_t v71 = *(void *)(v64 + 72);
      char v72 = *(unsigned char *)(v64 + 80);
      uint64_t v73 = *(void *)(v64 + 88);
      uint64_t v74 = 16 * v62;
      uint64_t v75 = *(void *)(v27 + 56) + v74;
      uint64_t v76 = *(void *)v75;
      LOBYTE(v75) = *(unsigned char *)(v75 + 8);
      uint64_t v77 = *(void *)(v50 + 48) + v63;
      long long v78 = *(_OWORD *)(v64 + 40);
      *(void *)uint64_t v77 = *(void *)v64;
      *(void *)(v77 + 8) = v65;
      *(void *)(v77 + 16) = v66;
      *(void *)(v77 + 24) = v67;
      *(unsigned char *)(v77 + 32) = v68;
      *(_OWORD *)(v77 + 40) = v78;
      *(unsigned char *)(v77 + 56) = v69;
      *(void *)(v77 + 64) = v70;
      *(void *)(v77 + 72) = v71;
      *(unsigned char *)(v77 + 80) = v72;
      *(void *)(v77 + 88) = v73;
      uint64_t v79 = *(void *)(v50 + 56) + v74;
      *(void *)uint64_t v79 = v76;
      *(unsigned char *)(v79 + 8) = v75;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  uint64_t v80 = v57 + 1;
  if (__OFADD__(v57, 1))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v80 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v80);
  ++v57;
  if (v81) {
    goto LABEL_85;
  }
  uint64_t v57 = v80 + 1;
  if (v80 + 1 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  uint64_t v57 = v80 + 2;
  if (v80 + 2 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  uint64_t v57 = v80 + 3;
  if (v80 + 3 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  uint64_t v57 = v80 + 4;
  if (v80 + 4 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  uint64_t v57 = v80 + 5;
  if (v80 + 5 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  uint64_t v57 = v80 + 6;
  if (v80 + 6 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v57);
  if (v81)
  {
LABEL_85:
    unint64_t v60 = (v81 - 1) & v81;
    unint64_t v62 = __clz(__rbit64(v81)) + (v57 << 6);
    goto LABEL_62;
  }
  uint64_t v82 = v80 + 7;
  if (v82 >= (uint64_t)v87) {
    goto LABEL_86;
  }
  unint64_t v81 = *(void *)(v86 + 8 * v82);
  if (v81)
  {
    uint64_t v57 = v82;
    goto LABEL_85;
  }
  while (1)
  {
    uint64_t v57 = v82 + 1;
    if (__OFADD__(v82, 1)) {
      break;
    }
    if (v57 >= (uint64_t)v87) {
      goto LABEL_86;
    }
    unint64_t v81 = *(void *)(v86 + 8 * v57);
    ++v82;
    if (v81) {
      goto LABEL_85;
    }
  }
LABEL_91:
  __break(1u);
LABEL_92:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = v3;
  long long v8 = a2[5];
  long long v83 = a2[4];
  long long v84 = v8;
  v85[0] = a2[6];
  *(_OWORD *)((char *)v85 + 10) = *(long long *)((char *)a2 + 106);
  long long v9 = a2[1];
  long long v79 = *a2;
  long long v80 = v9;
  long long v10 = a2[3];
  long long v81 = a2[2];
  long long v82 = v10;
  outlined retain of Date.FormatStyle((uint64_t)a2);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v79, (uint64_t)v87);
  uint64_t v11 = *a1;
  if (*(void *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
    if (v13)
    {
      uint64_t v14 = *(void *)(v11 + 56) + 16 * v12;
      uint64_t v15 = *(void *)v14;
      char v16 = *(unsigned char *)(v14 + 8);
      outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
LABEL_52:
      *(void *)a3 = v15;
      *(unsigned char *)(a3 + 8) = v16;
      return result;
    }
    outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
  }
  outlined init with take of LocalePreferences?((uint64_t)a2, (uint64_t)v86, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v79, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  char v19 = v81;
  uint64_t v103 = v3;
  if ((v81 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v22) = 0;
    uint64_t v30 = 0;
    v18.i64[0] = 0x3000000050003;
    char v32 = 12;
    char v31 = -1;
    LOBYTE(v20) = 2;
    LOBYTE(v23) = 9;
    LOBYTE(v24) = 6;
    char v19 = 1;
    char v27 = 3;
    LOBYTE(v25) = 3;
    LOBYTE(v21) = 1;
  }
  else
  {
    unint64_t v20 = BYTE7(v81);
    unint64_t v21 = WORD3(v81);
    unint64_t v22 = (unint64_t)v81 >> 40;
    unint64_t v23 = DWORD1(v81);
    unint64_t v24 = (unint64_t)v81 >> 24;
    unint64_t v25 = (unint64_t)v81 >> 16;
    unint64_t v26 = ((unint64_t)v81 >> 8) & 1;
    char v27 = v79;
    uint64_t v28 = *((void *)&v79 + 1);
    v18.i32[0] = v80;
    int16x8_t v18 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v18.i8);
    uint64_t v29 = *((void *)&v80 + 1);
    uint64_t v30 = *((void *)&v81 + 1);
    char v31 = v82;
    char v32 = BYTE1(v82);
  }
  char v88 = v27;
  uint64_t v89 = v28;
  unsigned __int32 v90 = vmovn_s16(v18).u32[0];
  uint64_t v91 = v29;
  char v92 = v19;
  char v93 = v26;
  char v94 = v25;
  char v95 = v24;
  char v96 = v23;
  char v97 = v22;
  char v98 = v21;
  char v99 = v20;
  uint64_t v100 = v30;
  char v101 = v31;
  char v102 = v32;
  Date.FormatStyle.DateFieldCollection.updateSchedule.getter((uint64_t)&v77);
  uint64_t v15 = v77;
  char v16 = v78;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v77 = *a1;
  uint64_t v34 = v77;
  *a1 = 0x8000000000000000;
  unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
  uint64_t v37 = *(void *)(v34 + 16);
  BOOL v38 = (v35 & 1) == 0;
  uint64_t v39 = v37 + v38;
  if (__OFADD__(v37, v38))
  {
    __break(1u);
  }
  else
  {
    char v4 = v35;
    if (*(void *)(v34 + 24) < v39)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      uint64_t v40 = v77;
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
      if ((v4 & 1) != (v42 & 1)) {
        goto LABEL_55;
      }
      unint64_t v36 = v41;
      if ((v4 & 1) == 0) {
        goto LABEL_50;
      }
LABEL_15:
      uint64_t v43 = *(void *)(v40 + 56) + 16 * v36;
      *(void *)uint64_t v43 = v15;
      *(unsigned char *)(v43 + 8) = v16;
LABEL_51:
      *a1 = v40;
      swift_bridgeObjectRelease();
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      goto LABEL_52;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v40 = v34;
      if (v35) {
        goto LABEL_15;
      }
LABEL_50:
      specialized _NativeDictionary._insert(at:key:value:)(v36, v87, v15, v16, (void *)v40);
      outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      goto LABEL_51;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  uint64_t v44 = static _DictionaryStorage.copy(original:)();
  uint64_t v40 = v44;
  if (!*(void *)(v34 + 16))
  {
LABEL_49:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
  uint64_t v45 = (void *)(v44 + 64);
  unint64_t v46 = (unint64_t)((1 << *(unsigned char *)(v40 + 32)) + 63) >> 6;
  if (v40 != v34 || (unint64_t)v45 >= v34 + 64 + 8 * v46) {
    memmove(v45, (const void *)(v34 + 64), 8 * v46);
  }
  int64_t v47 = 0;
  *(void *)(v40 + 16) = *(void *)(v34 + 16);
  uint64_t v48 = 1 << *(unsigned char *)(v34 + 32);
  uint64_t v49 = -1;
  if (v48 < 64) {
    uint64_t v49 = ~(-1 << v48);
  }
  unint64_t v50 = v49 & *(void *)(v34 + 64);
  uint64_t v73 = v34 + 64;
  int64_t v74 = (unint64_t)(v48 + 63) >> 6;
  while (1)
  {
    if (v50)
    {
      uint64_t v75 = (v50 - 1) & v50;
      int64_t v76 = v47;
      unint64_t v51 = __clz(__rbit64(v50)) | (v47 << 6);
      goto LABEL_25;
    }
    int64_t v69 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v69 >= v74) {
      goto LABEL_49;
    }
    unint64_t v70 = *(void *)(v73 + 8 * v69);
    int64_t v71 = v47 + 1;
    if (!v70)
    {
      int64_t v71 = v47 + 2;
      if (v47 + 2 >= v74) {
        goto LABEL_49;
      }
      unint64_t v70 = *(void *)(v73 + 8 * v71);
      if (!v70)
      {
        int64_t v71 = v47 + 3;
        if (v47 + 3 >= v74) {
          goto LABEL_49;
        }
        unint64_t v70 = *(void *)(v73 + 8 * v71);
        if (!v70)
        {
          int64_t v71 = v47 + 4;
          if (v47 + 4 >= v74) {
            goto LABEL_49;
          }
          unint64_t v70 = *(void *)(v73 + 8 * v71);
          if (!v70)
          {
            int64_t v71 = v47 + 5;
            if (v47 + 5 >= v74) {
              goto LABEL_49;
            }
            unint64_t v70 = *(void *)(v73 + 8 * v71);
            if (!v70)
            {
              int64_t v71 = v47 + 6;
              if (v47 + 6 >= v74) {
                goto LABEL_49;
              }
              unint64_t v70 = *(void *)(v73 + 8 * v71);
              if (!v70)
              {
                int64_t v71 = v47 + 7;
                if (v47 + 7 >= v74) {
                  goto LABEL_49;
                }
                unint64_t v70 = *(void *)(v73 + 8 * v71);
                if (!v70) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    uint64_t v75 = (v70 - 1) & v70;
    int64_t v76 = v71;
    unint64_t v51 = __clz(__rbit64(v70)) + (v71 << 6);
LABEL_25:
    uint64_t v52 = 96 * v51;
    uint64_t v53 = *(void *)(v34 + 48) + 96 * v51;
    uint64_t v54 = *(void *)(v53 + 8);
    uint64_t v55 = *(void *)(v53 + 16);
    uint64_t v56 = *(void *)(v53 + 24);
    char v57 = *(unsigned char *)(v53 + 32);
    char v58 = *(unsigned char *)(v53 + 56);
    uint64_t v59 = *(void *)(v53 + 64);
    uint64_t v60 = *(void *)(v53 + 72);
    char v61 = *(unsigned char *)(v53 + 80);
    uint64_t v62 = *(void *)(v53 + 88);
    uint64_t v63 = 16 * v51;
    uint64_t v64 = *(void *)(v34 + 56) + v63;
    uint64_t v65 = *(void *)v64;
    LOBYTE(v64) = *(unsigned char *)(v64 + 8);
    uint64_t v66 = *(void *)(v40 + 48) + v52;
    long long v67 = *(_OWORD *)(v53 + 40);
    *(void *)uint64_t v66 = *(void *)v53;
    *(void *)(v66 + 8) = v54;
    *(void *)(v66 + 16) = v55;
    *(void *)(v66 + 24) = v56;
    *(unsigned char *)(v66 + 32) = v57;
    *(_OWORD *)(v66 + 40) = v67;
    *(unsigned char *)(v66 + 56) = v58;
    *(void *)(v66 + 64) = v59;
    *(void *)(v66 + 72) = v60;
    *(unsigned char *)(v66 + 80) = v61;
    *(void *)(v66 + 88) = v62;
    uint64_t v68 = *(void *)(v40 + 56) + v63;
    *(void *)uint64_t v68 = v65;
    *(unsigned char *)(v68 + 8) = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v50 = v75;
    int64_t v47 = v76;
  }
  uint64_t v72 = v47 + 8;
  if (v47 + 8 >= v74) {
    goto LABEL_49;
  }
  unint64_t v70 = *(void *)(v73 + 8 * v72);
  if (v70)
  {
    int64_t v71 = v47 + 8;
    goto LABEL_48;
  }
  while (1)
  {
    int64_t v71 = v72 + 1;
    if (__OFADD__(v72, 1)) {
      break;
    }
    if (v71 >= v74) {
      goto LABEL_49;
    }
    unint64_t v70 = *(void *)(v73 + 8 * v71);
    ++v72;
    if (v70) {
      goto LABEL_48;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void Date.FormatStyle.DateFieldCollection.updateSchedule.getter(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 48);
  if (v3 != 255)
  {
    if (v3)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v6 = *(void *)(v1 + 40);
      BOOL v7 = __OFSUB__(9, v6);
      uint64_t v8 = 9 - v6;
      if (v7)
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    *(void *)a1 = v8;
    *(unsigned char *)(a1 + 8) = 0;
    return;
  }
  outlined init with take of LocalePreferences?(v1 + 39, (uint64_t)&v26, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v26, (uint64_t)&v27, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  if (v27 != 2)
  {
LABEL_18:
    *(void *)a1 = 64;
    *(unsigned char *)(a1 + 8) = 1;
    return;
  }
  uint64_t v12 = 0;
  char v13 = 1;
  outlined init with take of LocalePreferences?(v1, (uint64_t)&v25, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v25, (uint64_t)&v28, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  if (v28 != 3)
  {
    uint64_t v34 = 1;
    char v35 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v34);
  }
  outlined init with take of LocalePreferences?(v1 + 8, (uint64_t)v24, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v29, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  if (v29[8] != 255)
  {
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.YearOption((uint64_t)v29, (uint64_t)v30);
    uint64_t v34 = 2;
    char v35 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v34);
  }
  outlined init with take of LocalePreferences?(v1 + 17, (uint64_t)&v23, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v23, (uint64_t)&v31, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  if (v31 != 5)
  {
    uint64_t v34 = 512;
    char v35 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v34);
  }
  outlined init with take of LocalePreferences?(v1 + 18, (uint64_t)&v22, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v22, (uint64_t)&v32, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  if (v32 != 5)
  {
    uint64_t v34 = 4;
    char v35 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v34);
  }
  outlined init with take of LocalePreferences?(v1 + 19, (uint64_t)&v21, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v21, (uint64_t)&v33, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  switch(v33)
  {
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v5 = 1024;
      goto LABEL_23;
    case 3:
      break;
    default:
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v4) {
        uint64_t v5 = 1024;
      }
      else {
        uint64_t v5 = 2048;
      }
LABEL_23:
      uint64_t v34 = v5;
      char v35 = 1;
      ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v34);
      break;
  }
  outlined init with take of LocalePreferences?(v1 + 24, (uint64_t)v20, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v34, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  if ((v36 & 1) == 0)
  {
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption((uint64_t)&v34, (uint64_t)v37);
    uint64_t v10 = 8;
    char v11 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v10);
  }
  outlined init with take of LocalePreferences?(v1 + 34, (uint64_t)&v19, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v19, (uint64_t)&v38, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  if (v38 != 3)
  {
    uint64_t v10 = 0x40000;
    char v11 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v10);
  }
  outlined init with take of LocalePreferences?(v1 + 35, (uint64_t)&v18, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v18, (uint64_t)&v39, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  if (v39 != 6)
  {
    uint64_t v10 = 128;
    char v11 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v10);
  }
  outlined init with take of LocalePreferences?(v1 + 36, (uint64_t)&v17, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v17, (uint64_t)&v40, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  if (v40 != 9
    || (outlined init with take of LocalePreferences?(v1 + 37, (uint64_t)&v16, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?), outlined init with take of LocalePreferences?((uint64_t)&v16, (uint64_t)&v41, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?), v41 != 14))
  {
    uint64_t v10 = 16;
    char v11 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v10);
  }
  outlined init with take of LocalePreferences?(v1 + 38, (uint64_t)&v15, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v15, (uint64_t)&v42, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  if (v42 != 2)
  {
    uint64_t v10 = 32;
    char v11 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v10);
  }
  outlined init with take of LocalePreferences?(v1 + 49, (uint64_t)&v14, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v14, (uint64_t)&v43, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  if (v43 != 12)
  {
    uint64_t v10 = 0x8000;
    char v11 = 1;
    ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v10);
  }
  char v9 = v13;
  *(void *)a1 = v12;
  *(unsigned char *)(a1 + 8) = v9;
}

uint64_t outlined consume of Set<Calendar.Component>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of Date.VerbatimFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ICUDateFormatter.DateFormatInfo(uint64_t a1)
{
  return a1;
}

BOOL specialized static ICUDateFormatter.DateFormatInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  int v24 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 64);
  double v6 = *(double *)(a1 + 88);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  int v12 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 72);
  uint64_t v21 = *(void *)(a2 + 64);
  int v18 = *(unsigned __int8 *)(a2 + 80);
  int v19 = *(unsigned __int8 *)(a1 + 80);
  double v13 = *(double *)(a2 + 88);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v14 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8)
    {
      BOOL result = 0;
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0;
      if ((v16 & 1) == 0) {
        return result;
      }
    }
    if (v4 == v9 && v5 == v11 && v25 == v10 && v24 == v12)
    {
      if (v23 == v21 && v22 == v20)
      {
        if (v19 != v18) {
          return 0;
        }
        return v6 == v13;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0;
      if ((v17 & 1) != 0 && ((v19 ^ v18) & 1) == 0) {
        return v6 == v13;
      }
    }
  }
  return result;
}

BOOL specialized static ICUDateFormatter.PatternCacheKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  long long v7 = *(_OWORD *)(a1 + 5);
  v20[0] = *(_OWORD *)(a1 + 3);
  v20[1] = v7;
  _OWORD v20[2] = *(_OWORD *)(a1 + 7);
  __int16 v21 = *((_WORD *)a1 + 36);
  uint64_t v8 = a1[10];
  uint64_t v9 = a1[11];
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  int v12 = *((unsigned __int8 *)a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 3);
  long long v14 = *(_OWORD *)(a2 + 5);
  long long v15 = *(_OWORD *)(a2 + 7);
  __int16 v23 = *((_WORD *)a2 + 36);
  v22[1] = v14;
  _OWORD v22[2] = v15;
  v22[0] = v13;
  uint64_t v17 = a2[10];
  uint64_t v16 = a2[11];
  if (v4 == v10 && v5 == v11)
  {
    if (v6 != v12) {
      return 0;
    }
LABEL_7:
    if (specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)((unsigned __int8 *)v20, (unsigned __int8 *)v22))
    {
      if (v9) {
        return v16 && (v8 == v17 && v9 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      }
      if (!v16) {
        return 1;
      }
    }
    return 0;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if ((v18 & 1) != 0 && v6 == v12) {
    goto LABEL_7;
  }
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result)
{
  unint64_t v1 = 0;
  uint64_t v2 = result + 16;
  unint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
LABEL_2:
  if (v1 <= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = v1;
  }
  int v6 = (uint64_t *)(v2 + 32 * v1);
  unint64_t v7 = v1 - 1;
  uint64_t v8 = -(uint64_t)v5;
  while (1)
  {
    if (v7 - v3 == -1) {
      return v4;
    }
    if (v8 + v7 == -1) {
      break;
    }
    char v9 = v7 + 2;
    v6 += 4;
    ++v7;
    if (v9)
    {
      uint64_t v15 = *(v6 - 1);
      uint64_t v16 = *(v6 - 2);
      uint64_t v10 = v6[1];
      uint64_t v14 = *v6;
      swift_bridgeObjectRetain();
      BOOL result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        BOOL result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
      }
      unint64_t v12 = *(void *)(v4 + 16);
      unint64_t v11 = *(void *)(v4 + 24);
      if (v12 >= v11 >> 1) {
        BOOL result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      unint64_t v1 = v7 + 1;
      *(void *)(v4 + 16) = v12 + 1;
      long long v13 = (void *)(v4 + 40 * v12);
      void v13[4] = v7;
      v13[5] = v16;
      _OWORD v13[6] = v15;
      v13[7] = v14;
      v13[8] = v10;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for ICUDateFormatter.PatternCacheKey()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  uint64_t v5 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  *(unsigned char *)(a1 + 62) = *(unsigned char *)(a2 + 62);
  *(unsigned char *)(a1 + 63) = *(unsigned char *)(a2 + 63);
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 58) = *(_DWORD *)(a2 + 58);
  *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 62);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.AttributePosition()
{
  return &type metadata for ICUDateFormatter.AttributePosition;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.DateFormatInfo.UpdateSchedule()
{
  return &type metadata for ICUDateFormatter.DateFormatInfo.UpdateSchedule;
}

uint64_t destroy for ICUDateFormatter.DateFormatInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUDateFormatter.PatternCacheKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUDateFormatter.PatternCacheKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)BOOL result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

Swift::Void __swiftcall logFileIOErrno(_:at:)(Swift::Int32 _, Swift::String at)
{
  unint64_t object = at._object;
  uint64_t countAndFlagsBits = at._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int32 v19 = _;
  if (!strerror(_))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v9 = String.init(cString:)();
  unint64_t v11 = v10;
  if (!(id)_NSOSLog())
  {
LABEL_8:
    __break(1u);
    return;
  }
  Logger.init(_:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v21 = v17;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v16 = v9;
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v21);
    uint64_t v18 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 1024;
    LODWORD(v20) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_181795000, v12, v13, "Encountered %s failure %d %s", (uint8_t *)v14, 0x1Cu);
    uint64_t v15 = v17;
    swift_arrayDestroy();
    MEMORY[0x185309510](v15, -1, -1);
    MEMORY[0x185309510](v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void Notification.name.setter(void *a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*Notification.name.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Notification.object.setter(uint64_t a1)
{
  return outlined assign with take of Any?(a1, v1 + 8);
}

uint64_t (*Notification.object.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Notification.userInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Notification.userInfo.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Notification.hash(into:)(long long *a1)
{
  uint64_t v3 = *(void **)v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v1);
  id v4 = v3;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v1 + 40);
  if (!v5)
  {
    Swift::UInt v10 = 0;
    goto LABEL_30;
  }
  uint64_t v21 = v5 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v5 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v10 = 0;
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v16 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v17 = v16 | (v11 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v17, (uint64_t)&v24);
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v17, (uint64_t)&v26 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v24, (uint64_t)&v29, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((void *)&v30 + 1))
      {
        swift_release();
LABEL_30:
        Hasher._combine(_:)(v10);
        return;
      }
      v22[0] = v29;
      v22[1] = v30;
      uint64_t v23 = v31;
      uint64_t v12 = *((void *)a1 + 8);
      long long v13 = a1[1];
      long long v24 = *a1;
      long long v25 = v13;
      long long v14 = a1[3];
      long long v26 = a1[2];
      long long v27 = v14;
      uint64_t v28 = v12;
      AnyHashable.hash(into:)();
      v32[4] = v26;
      v32[5] = v27;
      uint64_t v33 = v28;
      v32[2] = v24;
      v32[3] = v25;
      Swift::Int v15 = Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v22);
      v10 ^= v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v8) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v18 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v18 < v9)
      {
        unint64_t v19 = *(void *)(v21 + 8 * v18);
        if (v19) {
          goto LABEL_12;
        }
        int64_t v20 = v11 + 2;
        ++v11;
        if (v18 + 1 < v9)
        {
          unint64_t v19 = *(void *)(v21 + 8 * v20);
          if (v19) {
            goto LABEL_15;
          }
          int64_t v11 = v18 + 1;
          if (v18 + 2 < v9)
          {
            unint64_t v19 = *(void *)(v21 + 8 * (v18 + 2));
            if (v19)
            {
              v18 += 2;
              goto LABEL_12;
            }
            int64_t v20 = v18 + 3;
            int64_t v11 = v18 + 2;
            if (v18 + 3 < v9) {
              break;
            }
          }
        }
      }
LABEL_26:
      unint64_t v8 = 0;
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
    }
    unint64_t v19 = *(void *)(v21 + 8 * v20);
    if (v19)
    {
LABEL_15:
      int64_t v18 = v20;
LABEL_12:
      unint64_t v8 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v18 << 6);
      int64_t v11 = v18;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v18 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v18 >= v9)
    {
      int64_t v11 = v9 - 1;
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v21 + 8 * v18);
    ++v20;
    if (v19) {
      goto LABEL_12;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t Notification.debugDescription.getter()
{
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0x203D20656D616ELL;
  unint64_t v9 = 0xE700000000000000;
  v1._uint64_t countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v2._unint64_t object = (void *)0xEB00000000203D20;
  String.append(_:)(v2);
  outlined init with copy of Any?(v0 + 8, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  v3._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x6E4972657375202CLL;
  v4._unint64_t object = (void *)0xED0000203D206F66;
  String.append(_:)(v4);
  v7[0] = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
  v5._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Int Notification.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::String v1 = *(void **)v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  id v2 = v1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 40);
  if (!v3)
  {
    Swift::UInt v13 = 0;
    goto LABEL_34;
  }
  uint64_t v21 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v26 = v37[4];
  uint64_t v24 = v37[6];
  uint64_t v25 = v37[5];
  uint64_t v7 = v37[8];
  uint64_t v23 = v37[7];
  uint64_t v8 = v37[9];
  uint64_t v9 = v37[10];
  uint64_t v10 = v37[11];
  uint64_t v11 = v37[12];
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  Swift::Int result = swift_bridgeObjectRetain();
  Swift::UInt v13 = 0;
  int64_t v14 = 0;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v16 = v15 | (v14 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v16, (uint64_t)&v29);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v16, (uint64_t)&v31 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v29, (uint64_t)&v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((void *)&v35 + 1))
      {
        swift_release();
LABEL_34:
        Hasher._combine(_:)(v13);
        return Hasher._finalize()();
      }
      v27[0] = v34;
      v27[1] = v35;
      uint64_t v28 = v36;
      *(void *)&long long v29 = v26;
      *((void *)&v29 + 1) = v25;
      *(void *)&long long v30 = v24;
      *((void *)&v30 + 1) = v23;
      *(void *)&long long v31 = v7;
      *((void *)&v31 + 1) = v8;
      *(void *)&long long v32 = v9;
      *((void *)&v32 + 1) = v10;
      uint64_t v33 = v11;
      AnyHashable.hash(into:)();
      long long v40 = v31;
      long long v41 = v32;
      uint64_t v42 = v33;
      long long v38 = v29;
      long long v39 = v30;
      v13 ^= Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v27);
      Swift::Int result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      if (v6) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v17 < v22)
      {
        unint64_t v18 = *(void *)(v21 + 8 * v17);
        if (v18) {
          goto LABEL_12;
        }
        int64_t v19 = v14 + 2;
        ++v14;
        if (v17 + 1 < v22)
        {
          unint64_t v18 = *(void *)(v21 + 8 * v19);
          if (v18) {
            goto LABEL_15;
          }
          int64_t v20 = v17 + 2;
          int64_t v14 = v17 + 1;
          if (v17 + 2 < v22)
          {
            unint64_t v18 = *(void *)(v21 + 8 * v20);
            if (v18) {
              goto LABEL_18;
            }
            int64_t v19 = v17 + 3;
            int64_t v14 = v17 + 2;
            if (v17 + 3 < v22)
            {
              unint64_t v18 = *(void *)(v21 + 8 * v19);
              if (v18) {
                goto LABEL_15;
              }
              int64_t v20 = v17 + 4;
              int64_t v14 = v17 + 3;
              if (v17 + 4 < v22)
              {
                unint64_t v18 = *(void *)(v21 + 8 * v20);
                if (v18)
                {
LABEL_18:
                  int64_t v17 = v20;
                  goto LABEL_12;
                }
                int64_t v19 = v17 + 5;
                int64_t v14 = v17 + 4;
                if (v17 + 5 < v22) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_30:
      unint64_t v6 = 0;
      uint64_t v33 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v19);
    if (v18)
    {
LABEL_15:
      int64_t v17 = v19;
LABEL_12:
      unint64_t v6 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
      int64_t v14 = v17;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v22)
    {
      int64_t v14 = v22 - 1;
      goto LABEL_30;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Notification()
{
  Hasher.init(_seed:)();
  Swift::String v1 = *(void **)v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  id v2 = v1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 40);
  if (!v3)
  {
    Swift::UInt v13 = 0;
    goto LABEL_30;
  }
  uint64_t v20 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v25 = v36[4];
  uint64_t v23 = v36[6];
  uint64_t v24 = v36[5];
  uint64_t v7 = v36[8];
  uint64_t v22 = v36[7];
  uint64_t v8 = v36[9];
  uint64_t v9 = v36[10];
  uint64_t v10 = v36[11];
  uint64_t v11 = v36[12];
  int64_t v21 = (unint64_t)(v4 + 63) >> 6;
  Swift::Int result = swift_bridgeObjectRetain();
  Swift::UInt v13 = 0;
  int64_t v14 = 0;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v16 = v15 | (v14 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v16, (uint64_t)&v28);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v16, (uint64_t)&v30 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v28, (uint64_t)&v33, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((void *)&v34 + 1))
      {
        swift_release();
LABEL_30:
        Hasher._combine(_:)(v13);
        return Hasher._finalize()();
      }
      v26[0] = v33;
      v26[1] = v34;
      uint64_t v27 = v35;
      *(void *)&long long v28 = v25;
      *((void *)&v28 + 1) = v24;
      *(void *)&long long v29 = v23;
      *((void *)&v29 + 1) = v22;
      *(void *)&long long v30 = v7;
      *((void *)&v30 + 1) = v8;
      *(void *)&long long v31 = v9;
      *((void *)&v31 + 1) = v10;
      uint64_t v32 = v11;
      AnyHashable.hash(into:)();
      long long v39 = v30;
      long long v40 = v31;
      uint64_t v41 = v32;
      long long v37 = v28;
      long long v38 = v29;
      v13 ^= Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v26);
      Swift::Int result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      if (v6) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v17 < v21)
      {
        unint64_t v18 = *(void *)(v20 + 8 * v17);
        if (v18) {
          goto LABEL_12;
        }
        int64_t v19 = v14 + 2;
        ++v14;
        if (v17 + 1 < v21)
        {
          unint64_t v18 = *(void *)(v20 + 8 * v19);
          if (v18) {
            goto LABEL_15;
          }
          int64_t v14 = v17 + 1;
          if (v17 + 2 < v21)
          {
            unint64_t v18 = *(void *)(v20 + 8 * (v17 + 2));
            if (v18)
            {
              v17 += 2;
              goto LABEL_12;
            }
            int64_t v19 = v17 + 3;
            int64_t v14 = v17 + 2;
            if (v17 + 3 < v21) {
              break;
            }
          }
        }
      }
LABEL_26:
      unint64_t v6 = 0;
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v19);
    if (v18)
    {
LABEL_15:
      int64_t v17 = v19;
LABEL_12:
      unint64_t v6 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
      int64_t v14 = v17;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v21)
    {
      int64_t v14 = v21 - 1;
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_12;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t Notification.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v1);
  uint64_t v38 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v37 = v9;
  *((void *)&v37 + 1) = v10;
  long long v34 = xmmword_182107E50;
  outlined init with take of Any(&v37, &v35);
  uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
  }
  void v11[2] = v13 + 1;
  int64_t v14 = &v11[6 * v13];
  long long v15 = v34;
  long long v16 = v36;
  void v14[3] = v35;
  uint64_t v14[4] = v16;
  _OWORD v14[2] = v15;
  outlined init with copy of Any?(v1 + 8, (uint64_t)&v34);
  if (!*((void *)&v35 + 1))
  {
    outlined destroy of Any?((uint64_t)&v34, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v22 = *(void *)(v1 + 40);
    if (!v22) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  outlined init with take of Any(&v34, &v37);
  long long v34 = xmmword_1821A4910;
  outlined init with copy of Any((uint64_t)&v37, (uint64_t)&v35);
  unint64_t v18 = v11[2];
  unint64_t v17 = v11[3];
  if (v18 >= v17 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v11);
  }
  void v11[2] = v18 + 1;
  int64_t v19 = &v11[6 * v18];
  long long v20 = v34;
  long long v21 = v36;
  v19[3] = v35;
  _OWORD v19[4] = v21;
  _OWORD v19[2] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  uint64_t v22 = *(void *)(v1 + 40);
  if (v22)
  {
LABEL_9:
    uint64_t v33 = v3;
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    *(void *)&long long v37 = v22;
    long long v34 = xmmword_1821A4920;
    outlined init with take of Any(&v37, &v35);
    unint64_t v24 = v11[2];
    unint64_t v23 = v11[3];
    swift_bridgeObjectRetain();
    if (v24 >= v23 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v11);
    }
    void v11[2] = v24 + 1;
    uint64_t v25 = &v11[6 * v24];
    long long v26 = v34;
    long long v27 = v36;
    void v25[3] = v35;
    v25[4] = v27;
    _OWORD v25[2] = v26;
    uint64_t v3 = v33;
  }
LABEL_12:
  outlined init with copy of Notification(v1, (uint64_t)&v34);
  *(void *)&long long v37 = v11;
  uint64_t v28 = *MEMORY[0x1E4FBC408];
  uint64_t v29 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v8, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v8, 0, 1, v29);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static Notification._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSNotification);
}

uint64_t static Notification._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Notification(void *a1, uint64_t a2)
{
  uint64_t result = specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NSNotification._toCustomAnyHashable()()
{
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_name);
  if (objc_msgSend(v1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, 32);
  }
  id v3 = objc_msgSend(v1, sel_userInfo);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }
  else
  {
    uint64_t v5 = 0;
  }
  memset(&v7[8], 0, 40);
  *(void *)uint64_t v7 = v2;
  outlined assign with take of Any?((uint64_t)v8, (uint64_t)&v7[8]);
  swift_bridgeObjectRelease();
  *(void *)&v7[40] = v5;
  _OWORD v8[2] = *(_OWORD *)v7;
  v8[3] = *(_OWORD *)&v7[16];
  void v8[4] = *(_OWORD *)&v7[32];

  lazy protocol witness table accessor for type Notification and conformance Notification();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotification()
{
  id v1 = *v0;
  NSNotification._toCustomAnyHashable()();
}

uint64_t specialized static Notification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)a1);
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)a2) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v10 = 0;
    if ((v9 & 1) == 0) {
      return v10 & 1;
    }
  }
  outlined init with copy of Any?(a1 + 8, (uint64_t)&v42);
  if (v43)
  {
    outlined init with take of Any(&v42, &v44);
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v40);
    if (!v41)
    {
      outlined destroy of Any?((uint64_t)&v40, (uint64_t *)&demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      char v10 = 0;
      return v10 & 1;
    }
    outlined init with take of Any(&v40, &v42);
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    __swift_project_boxed_opaque_existential_1(&v42, v43);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    if (v11 != v12) {
      goto LABEL_11;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v44);
    uint64_t v13 = v45;
    outlined destroy of Any?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
LABEL_11:
      char v10 = 0;
      return v10 & 1;
    }
  }
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a2 + 40);
  char v10 = (v14 | v15) == 0;
  if (v14 && v15)
  {
    long long v16 = *(void **)a1;
    outlined init with copy of Any?(a1 + 8, (uint64_t)&v44);
    uint64_t v17 = v45;
    if (v45)
    {
      unint64_t v18 = __swift_project_boxed_opaque_existential_1(&v44, v45);
      uint64_t v19 = *(void *)(v17 - 8);
      double v20 = MEMORY[0x1F4188790](v18);
      uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v19 + 16))(v22, v20);
      swift_bridgeObjectRetain();
      id v23 = v16;
      uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    }
    else
    {
      swift_bridgeObjectRetain();
      id v25 = v16;
      uint64_t v24 = 0;
    }
    id v26 = objc_msgSend(objc_allocWithZone((Class)NSNotification), sel_initWithName_object_userInfo_, v16, v24, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    long long v27 = *(void **)a2;
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v44);
    uint64_t v28 = *(void **)(a2 + 40);
    uint64_t v29 = v45;
    if (v45)
    {
      uint64_t v30 = __swift_project_boxed_opaque_existential_1(&v44, v45);
      uint64_t v31 = *(void *)(v29 - 8);
      double v32 = MEMORY[0x1F4188790](v30);
      long long v34 = (char *)&v40 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v31 + 16))(v34, v32);
      swift_bridgeObjectRetain();
      id v35 = v27;
      uint64_t v36 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      if (!v28)
      {
LABEL_22:
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        id v37 = objc_msgSend(objc_allocWithZone((Class)NSNotification), sel_initWithName_object_userInfo_, v27, v36, v28);
        swift_unknownObjectRelease();

        char v10 = static NSObject.== infix(_:_:)();
        return v10 & 1;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      id v39 = v27;
      uint64_t v36 = 0;
      if (!v28) {
        goto LABEL_22;
      }
    }
    uint64_t v28 = (void *)_NativeDictionary.bridged()();
    goto LABEL_22;
  }
  return v10 & 1;
}

uint64_t specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined destroy of Any?(a2, &demangling cache variable for type metadata for Notification?);
  id v4 = objc_msgSend(a1, sel_name);
  if (objc_msgSend(a1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  id v5 = objc_msgSend(a1, sel_userInfo);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5);
  }
  else
  {
    uint64_t v7 = 0;
  }
  memset(&v9[8], 0, 40);
  *(void *)char v9 = v4;
  outlined assign with take of Any?((uint64_t)v10, (uint64_t)&v9[8]);
  swift_bridgeObjectRelease();
  *(void *)&v9[40] = v7;
  v11[0] = *(_OWORD *)v9;
  v11[1] = *(_OWORD *)&v9[16];
  void v11[2] = *(_OWORD *)&v9[32];
  outlined init with take of LocalePreferences?((uint64_t)v11, a2, &demangling cache variable for type metadata for Notification?);
  return 1;
}

unint64_t lazy protocol witness table accessor for type Notification and conformance Notification()
{
  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Notification(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[2] = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[3] = lazy protocol witness table accessor for type Notification and conformance Notification();
  unint64_t result = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[4] = result;
  return result;
}

void Data._Representation.withInteriorPointerReference<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      __DataStorage.withInteriorPointerReference<A>(_:_:)((int)a3, a3 >> 32, a1);
      outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 16);
      uint64_t v9 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      __DataStorage.withInteriorPointerReference<A>(_:_:)(v8, v9, a1);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t v11 = a3;
      __int16 v12 = a4;
      char v13 = BYTE2(a4);
      char v14 = BYTE3(a4);
      char v15 = BYTE4(a4);
      char v16 = BYTE5(a4);
      id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v11, BYTE6(a4), 0);
LABEL_7:
      char v10 = v7;
      a1();

      break;
  }
}

void __DataStorage.withInteriorPointerReference<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 == a2)
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
LABEL_7:
    char v10 = v5;
    a3();

    return;
  }
  uint64_t v6 = *(void *)(v3 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v3 + 40);
    BOOL v8 = __OFSUB__(a1, v7);
    uint64_t v9 = a1 - v7;
    if (v8)
    {
      __break(1u);
    }
    else if (!__OFSUB__(a2, a1))
    {
      id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, v6 + v9, a2 - a1, 0);
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t Data.xpcCodableObject.getter(uint64_t a1, unint64_t a2)
{
  bytes[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 >= (int)a1)
      {
        uint64_t v5 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v5)
        {
          uint64_t v6 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          if (!__OFSUB__((int)a1, v6))
          {
            uint64_t v7 = (const void *)(v5 + (int)a1 - v6);
            if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v4) {
              size_t v8 = v4;
            }
            else {
              size_t v8 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            }
            goto LABEL_19;
          }
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v7 = 0;
        size_t v8 = 0;
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_23;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v11 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v11)
      {
        if (!__OFSUB__(v10, v9)) {
          goto LABEL_18;
        }
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
      }
      uint64_t v12 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v13 = __OFSUB__(v9, v12);
      uint64_t v14 = v9 - v12;
      if (v13) {
        goto LABEL_25;
      }
      BOOL v13 = __OFSUB__(v10, v9);
      int64_t v15 = v10 - v9;
      if (v13) {
        goto LABEL_23;
      }
      uint64_t v7 = (const void *)(v11 + v14);
      if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v15) {
        size_t v8 = v15;
      }
      else {
        size_t v8 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      }
LABEL_19:
      xpc_data_create(v7, v8);
      return XPCCodableObject.init(copying:)();
    case 3uLL:
      memset(bytes, 0, 14);
      size_t v3 = 0;
      goto LABEL_16;
    default:
      bytes[0] = a1;
      LOWORD(bytes[1]) = a2;
      BYTE2(bytes[1]) = BYTE2(a2);
      BYTE3(bytes[1]) = BYTE3(a2);
      unint64_t v2 = a2 >> 40;
      BYTE4(bytes[1]) = BYTE4(a2);
      size_t v3 = BYTE6(a2);
      BYTE5(bytes[1]) = v2;
LABEL_16:
      xpc_data_create(bytes, v3);
      return XPCCodableObject.init(copying:)();
  }
}

unsigned char *protocol witness for XPCCodableObjectRepresentable.init(from:) in conformance Data@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = specialized Data.init(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for XPCCodableObjectRepresentable.xpcCodableObject.getter in conformance Data()
{
  return Data.xpcCodableObject.getter(*(void *)v0, *(void *)(v0 + 8));
}

unsigned char *specialized Data.init(from:)(uint64_t a1)
{
  uint64_t v2 = XPCCodableObject.type.getter();
  if (v2 != XPC_TYPE_DATA.getter())
  {
    uint64_t v3 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    return 0;
  }
  uint64_t v5 = (void *)XPCCodableObject.copyUnderlyingXPCObject()();
  int64_t length = xpc_data_get_length(v5);
  if (length < 1)
  {
    uint64_t v10 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v7 = length;
  unint64_t result = xpc_data_get_bytes_ptr(v5);
  if (result)
  {
    uint64_t v4 = specialized Data.init(bytes:count:)(result, v7);
    swift_unknownObjectRelease();
    uint64_t v9 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
    return (unsigned char *)v4;
  }
  __break(1u);
  return result;
}

Swift::Int specialized static Data.validXPCObjectTypes.getter()
{
  Swift::UInt v0 = XPC_TYPE_DATA.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  uint64_t v2 = v1 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  Swift::Int result = Hasher._finalize()();
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v5 = result & ~v4;
  unint64_t v6 = v5 >> 6;
  uint64_t v7 = *(void *)(v1 + 56 + 8 * (v5 >> 6));
  uint64_t v8 = 1 << v5;
  uint64_t v9 = *(void *)(v1 + 48);
  if (((1 << v5) & v7) != 0)
  {
    if (*(void *)(v9 + 8 * v5) == v0) {
      return v1;
    }
    uint64_t v10 = ~v4;
    unint64_t v5 = (v5 + 1) & v10;
    unint64_t v6 = v5 >> 6;
    uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
    uint64_t v8 = 1 << v5;
    if ((v7 & (1 << v5)) == 0) {
      goto LABEL_10;
    }
    if (*(void *)(v9 + 8 * v5) == v0) {
      return v1;
    }
    unint64_t v5 = (v5 + 1) & v10;
    unint64_t v6 = v5 >> 6;
    uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
    uint64_t v8 = 1 << v5;
    if ((v7 & (1 << v5)) == 0) {
      goto LABEL_10;
    }
    if (*(void *)(v9 + 8 * v5) == v0) {
      return v1;
    }
    unint64_t v5 = (v5 + 1) & v10;
    unint64_t v6 = v5 >> 6;
    uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
    uint64_t v8 = 1 << v5;
    if ((v7 & (1 << v5)) != 0)
    {
      while (*(void *)(v9 + 8 * v5) != v0)
      {
        unint64_t v5 = (v5 + 1) & v10;
        unint64_t v6 = v5 >> 6;
        uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
        uint64_t v8 = 1 << v5;
        if ((v7 & (1 << v5)) == 0) {
          goto LABEL_10;
        }
      }
      return v1;
    }
  }
LABEL_10:
  *(void *)(v2 + 8 * v6) = v8 | v7;
  *(void *)(v9 + 8 * v5) = v0;
  uint64_t v11 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (!v12)
  {
    *(void *)(v1 + 16) = v13;
    return v1;
  }
  __break(1u);
  return result;
}

Swift::Int LocaleCache.State.IdentifierAndPrefs.hashValue.getter()
{
  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v54);
  Hasher.init(_seed:)();
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v35);
  Hasher._combine(_:)(1u);
  if (v35[0] == 2)
  {
    Swift::UInt8 v1 = 0;
  }
  else
  {
    Swift::UInt8 v1 = v35[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  uint64_t v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    uint64_t v7 = v35;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v2 + 16));
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v34);
    uint64_t v7 = v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    if (!v37) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v39;
    if (!v39) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = v40;
    if (!v40) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = v39;
  if (v39) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v9 = v41;
  uint64_t v8 = v42;
  uint64_t v11 = v43;
  uint64_t v10 = v44;
  BOOL v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v13 = v8;
    id v14 = v11;
    id v15 = v10;
    id v16 = v12;
    id v17 = v9;
    _CFObject.hash(into:)();
    if (v8) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v22 = v12;
    id v23 = v8;
    id v24 = v11;
    id v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v18 = v8;
      _CFObject.hash(into:)();

      if (v11) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v19 = v11;
    _CFObject.hash(into:)();

    if (v10) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v10) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v21 = 0;
LABEL_33:

  uint64_t v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47;
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  uint64_t v27 = v47;
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v51 == 2)
  {
    Swift::UInt8 v30 = 0;
  }
  else
  {
    Swift::UInt8 v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v31 = v32;
  }
  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v52);
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)v53);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v53) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)&v34);
  Hasher._combine(_:)(1u);
  if (v34 == 2)
  {
    Swift::UInt8 v3 = 0;
  }
  else
  {
    Swift::UInt8 v3 = v34 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v3);
  uint64_t v4 = v35;
  if (!v35)
  {
    Hasher._combine(_:)(0);
LABEL_16:
    outlined retain of LocalePreferences(&v34);
    if (!v36) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (!v5) {
    goto LABEL_16;
  }
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v6 = v4 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 += 16;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v37) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_17:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v7 = v38;
    if (!v38) {
      goto LABEL_13;
    }
LABEL_19:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
    uint64_t v8 = v39;
    if (!v39) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = v38;
  if (v38) {
    goto LABEL_19;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v8 = v39;
  if (!v39)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v10 = v40;
  uint64_t v9 = v41;
  BOOL v12 = v42;
  uint64_t v11 = v43;
  id v13 = v44;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v14 = v9;
    id v15 = v12;
    id v16 = v11;
    id v17 = v13;
    id v18 = v10;
    _CFObject.hash(into:)();
    if (v9) {
      goto LABEL_23;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v23 = v13;
    id v24 = v9;
    id v25 = v12;
    id v26 = v11;
    if (v9)
    {
LABEL_23:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v19 = v9;
      _CFObject.hash(into:)();

      if (v12) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }
  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v20 = v12;
    _CFObject.hash(into:)();

    if (v11) {
      goto LABEL_25;
    }
LABEL_30:
    Hasher._combine(_:)(0);
    if (v13) {
      goto LABEL_26;
    }
    goto LABEL_31;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v11) {
    goto LABEL_30;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  id v22 = 0;
LABEL_32:

  uint64_t v27 = v45;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = v46;
    if (v46) {
      goto LABEL_34;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  uint64_t v28 = v46;
  if (!v46) {
    goto LABEL_37;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v28);
  swift_bridgeObjectRelease();
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_39:
  if (v48 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v29 = v48 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v30 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v50 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v31 = v50 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  if (v51 == 2)
  {
    Swift::UInt8 v32 = 0;
  }
  else
  {
    Swift::UInt8 v33 = v51 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v32 = v33;
  }
  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocaleCache.State.IdentifierAndPrefs()
{
  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v52);
  Hasher.init(_seed:)();
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)v53);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v53) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)&v33);
  Hasher._combine(_:)(1u);
  if (v33 == 2)
  {
    Swift::UInt8 v1 = 0;
  }
  else
  {
    Swift::UInt8 v1 = v33 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  uint64_t v2 = v34;
  if (!v34)
  {
    Hasher._combine(_:)(0);
LABEL_16:
    outlined retain of LocalePreferences(&v33);
    if (!v35) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (!v3) {
    goto LABEL_16;
  }
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v35)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v36) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_17:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v37;
    if (!v37) {
      goto LABEL_13;
    }
LABEL_19:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v51, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = v38;
    if (!v38) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = v37;
  if (v37) {
    goto LABEL_19;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v6 = v38;
  if (!v38)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v51, v6);
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v8 = v39;
  uint64_t v7 = v40;
  uint64_t v10 = v41;
  uint64_t v9 = v42;
  uint64_t v11 = v43;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v12 = v7;
    id v13 = v10;
    id v14 = v9;
    id v15 = v11;
    id v16 = v8;
    _CFObject.hash(into:)();
    if (v7) {
      goto LABEL_23;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v21 = v11;
    id v22 = v7;
    id v23 = v10;
    id v24 = v9;
    if (v7)
    {
LABEL_23:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v17 = v7;
      _CFObject.hash(into:)();

      if (v10) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }
  Hasher._combine(_:)(0);
  if (v10)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v18 = v10;
    _CFObject.hash(into:)();

    if (v9) {
      goto LABEL_25;
    }
LABEL_30:
    Hasher._combine(_:)(0);
    if (v11) {
      goto LABEL_26;
    }
    goto LABEL_31;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v9) {
    goto LABEL_30;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v19 = v9;
  _CFObject.hash(into:)();

  if (v11)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v20 = v11;
    _CFObject.hash(into:)();

    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  id v20 = 0;
LABEL_32:

  uint64_t v25 = v44;
  if (v25)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v51, v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = v45;
    if (v45) {
      goto LABEL_34;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v46) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  uint64_t v26 = v45;
  if (!v45) {
    goto LABEL_37;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v51, v26);
  swift_bridgeObjectRelease();
  if (!v46) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_39:
  if (v47 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v27 = v47 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
  if (v48 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v28 = v48 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v49 == 2)
  {
    Swift::UInt8 v29 = 0;
  }
  else
  {
    Swift::UInt8 v29 = v49 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v29);
  if (v50 == 2)
  {
    Swift::UInt8 v30 = 0;
  }
  else
  {
    Swift::UInt8 v31 = v50 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v30 = v31;
  }
  Hasher._combine(_:)(v30);
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t closure #1 in LocaleCache.reset()(uint64_t result)
{
  *(unsigned char *)(result + 104) = 1;
  return result;
}

BOOL specialized static LocaleCache.State.IdentifierAndPrefs.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 2), (uint64_t)v94);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  outlined init with take of LocalePreferences?((uint64_t)(a2 + 2), (uint64_t)v95);
  BOOL v7 = v3 == v5 && v4 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v8 & 1) != 0))
  {
    outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v93);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v93) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)v91);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v91) == 1) {
        return 1;
      }
      goto LABEL_11;
    }
    outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v83);
    outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)v91);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v91) == 1)
    {
      long long v62 = v89;
      *(_OWORD *)uint64_t v63 = *(_OWORD *)v90;
      *(_OWORD *)&v63[12] = *(_OWORD *)&v90[12];
      long long v58 = v85;
      long long v59 = v86;
      long long v60 = v87;
      long long v61 = v88;
      long long v56 = v83;
      long long v57 = v84;
      outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v64);
      outlined retain of LocalePreferences(&v64);
      outlined retain of LocalePreferences(&v64);
      outlined release of LocalePreferences(&v56);
LABEL_11:
      outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v91);
      outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v92);
      outlined retain of LocalePreferences?((uint64_t)v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v91);
      return 0;
    }
    outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v64);
    char v10 = v83;
    uint64_t v11 = *((void *)&v83 + 1);
    long long v12 = v84;
    long long v13 = v85;
    long long v14 = v86;
    id v15 = (void *)v87;
    uint64_t v53 = (void *)v88;
    uint64_t v54 = (void *)*((void *)&v87 + 1);
    char v51 = (void *)v89;
    char v52 = (void *)*((void *)&v88 + 1);
    uint64_t v49 = *(void *)v90;
    uint64_t v50 = *((void *)&v89 + 1);
    uint64_t v47 = *(void *)&v90[8];
    uint64_t v48 = *(void *)&v90[16];
    int v45 = v90[25];
    int v46 = v90[24];
    int v43 = v90[27];
    int v44 = v90[26];
    if (v83 == 2)
    {
      if (v64 != 2)
      {
LABEL_22:
        outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v55);
        outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v56);
        outlined retain of LocalePreferences(&v56);
        id v16 = (long long *)v55;
LABEL_23:
        outlined retain of LocalePreferences(v16);
LABEL_52:
        LOBYTE(v20) = 0;
        goto LABEL_53;
      }
    }
    else if (v64 == 2 || ((((v83 & 1) == 0) ^ v64) & 1) == 0)
    {
      goto LABEL_22;
    }
    if (*((void *)&v83 + 1))
    {
      if (!v65 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v83 + 1), v65) & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (v65)
    {
      goto LABEL_50;
    }
    if (*((void *)&v12 + 1))
    {
      if (!*((void *)&v66 + 1) || v12 != v66 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (*((void *)&v66 + 1))
    {
      goto LABEL_50;
    }
    if (*((void *)&v13 + 1))
    {
      if (!*((void *)&v67 + 1) || v13 != v67 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (*((void *)&v67 + 1))
    {
      goto LABEL_50;
    }
    if ((void)v14)
    {
      if (!v68 || (specialized static Dictionary<>.== infix(_:_:)(v14, v68) & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (v68)
    {
      goto LABEL_50;
    }
    if (*((void *)&v14 + 1))
    {
      if (v69 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v14 + 1), v69) & 1) != 0)
      {
LABEL_45:
        if (v15)
        {
          if (v70)
          {
            uint64_t v39 = v71;
            Swift::UInt v27 = v73;
            Swift::UInt v28 = v72;
            uint64_t v26 = v74;
            uint64_t v34 = v70;
            type metadata accessor for CFDictionaryRef(0);
            outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            id v35 = v34;
            id v29 = v15;
            char v17 = static _CFObject.== infix(_:_:)();

            if ((v17 & 1) == 0) {
              goto LABEL_105;
            }
LABEL_59:
            if (v54)
            {
              LOBYTE(v20) = (_BYTE)v39;
              if (!v39) {
                goto LABEL_88;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v40 = v39;
              id v30 = v54;
              char v21 = static _CFObject.== infix(_:_:)();

              if ((v21 & 1) == 0) {
                goto LABEL_105;
              }
            }
            else if (v39)
            {
              goto LABEL_105;
            }
            if (v53)
            {
              if (!v28) {
                goto LABEL_105;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v36 = v28;
              id v31 = v53;
              char v22 = static _CFObject.== infix(_:_:)();

              if ((v22 & 1) == 0) {
                goto LABEL_105;
              }
            }
            else if (v28)
            {
              goto LABEL_105;
            }
            if (v52)
            {
              if (!v27) {
                goto LABEL_105;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v37 = v27;
              id v32 = v52;
              char v23 = static _CFObject.== infix(_:_:)();

              if ((v23 & 1) == 0) {
                goto LABEL_105;
              }
            }
            else if (v27)
            {
              goto LABEL_105;
            }
            if (v51)
            {
              if (!v26) {
                goto LABEL_105;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v38 = v26;
              id v33 = v51;
              char v24 = static _CFObject.== infix(_:_:)();

              if ((v24 & 1) == 0) {
                goto LABEL_105;
              }
            }
            else if (v26)
            {
              goto LABEL_105;
            }
            uint64_t v20 = v75;
            if (v50)
            {
              if (!v75) {
                goto LABEL_88;
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v41 = specialized static Dictionary<>.== infix(_:_:)(v50, v20);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v41 & 1) == 0) {
                goto LABEL_105;
              }
            }
            else if (v75)
            {
              goto LABEL_105;
            }
            uint64_t v20 = v76;
            if (!v49)
            {
              if (v76) {
                goto LABEL_105;
              }
LABEL_90:
              if (v48)
              {
                if (!v78 || (v47 != v77 || v48 != v78) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  goto LABEL_105;
                }
              }
              else if (v78)
              {
                goto LABEL_105;
              }
              if (v46 != 2)
              {
                if (v79 == 2 || ((v79 ^ v46) & 1) != 0) {
                  goto LABEL_105;
                }
LABEL_102:
                int v25 = v80;
                if (v45 == 2)
                {
                  outlined retain of LocalePreferences?((uint64_t)v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  if (v25 != 2) {
                    goto LABEL_52;
                  }
                }
                else
                {
                  outlined retain of LocalePreferences?((uint64_t)v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  if (v25 == 2 || ((v25 ^ v45) & 1) != 0) {
                    goto LABEL_52;
                  }
                }
                if (v44 == 2)
                {
                  if (v81 != 2) {
                    goto LABEL_52;
                  }
                }
                else
                {
                  LOBYTE(v20) = 0;
                  if (v81 == 2 || ((((v44 & 1) == 0) ^ v81) & 1) == 0) {
                    goto LABEL_53;
                  }
                }
                if (v43 == 2)
                {
                  if (v82 != 2) {
                    goto LABEL_52;
                  }
                }
                else if (v82 == 2 || ((((v43 & 1) == 0) ^ v82) & 1) == 0)
                {
                  goto LABEL_52;
                }
                LOBYTE(v20) = 1;
LABEL_53:
                LOBYTE(v56) = v10;
                *((void *)&v56 + 1) = v11;
                long long v57 = v12;
                long long v58 = v13;
                long long v59 = v14;
                *(void *)&long long v60 = v15;
                *((void *)&v60 + 1) = v54;
                *(void *)&long long v61 = v53;
                *((void *)&v61 + 1) = v52;
                *(void *)&long long v62 = v51;
                *((void *)&v62 + 1) = v50;
                *(void *)uint64_t v63 = v49;
                *(void *)&v63[8] = v47;
                *(void *)&v63[16] = v48;
                v63[24] = v46;
                v63[25] = v45;
                v63[26] = v44;
                v63[27] = v43;
                outlined release of LocalePreferences(&v56);
                outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                return (v20 & 1) != 0;
              }
              if (v79 == 2) {
                goto LABEL_102;
              }
LABEL_105:
              id v19 = outlined consume of LocalePreferences?;
              id v18 = v95;
              goto LABEL_51;
            }
            if (v76)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v42 = specialized static Dictionary<>.== infix(_:_:)(v49, v20);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v42 & 1) == 0) {
                goto LABEL_105;
              }
              goto LABEL_90;
            }
LABEL_88:
            outlined retain of LocalePreferences?((uint64_t)v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
            goto LABEL_53;
          }
        }
        else if (!v70)
        {
          uint64_t v39 = v71;
          Swift::UInt v27 = v73;
          Swift::UInt v28 = v72;
          uint64_t v26 = v74;
          outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          goto LABEL_59;
        }
        outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v56);
        outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        id v16 = &v56;
        goto LABEL_23;
      }
    }
    else if (!v69)
    {
      goto LABEL_45;
    }
LABEL_50:
    outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    id v18 = v94;
    id v19 = outlined copy of LocalePreferences?;
LABEL_51:
    outlined retain of LocalePreferences?((uint64_t)v18, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v19);
    goto LABEL_52;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocaleCache()
{
  return &type metadata for LocaleCache;
}

uint64_t destroy for LocaleCache.State(id *a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void **)(a2 + 48);
  uint64_t v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  char v8 = *(void **)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v7;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = v5;
  id v11 = v6;
  id v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  id v8 = v7;

  uint64_t v9 = *(void **)(a1 + 56);
  id v10 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v10;
  id v11 = v10;

  id v12 = *(void **)(a1 + 64);
  long long v13 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v13;
  id v14 = v13;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocaleCache.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocaleCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 24);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v6;
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    long long v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v8;
    long long v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v10;
    uint64_t v12 = *(void *)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 56);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    uint64_t v14 = *(void *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v14;
    id v16 = *(void **)(a2 + 80);
    char v17 = *(void **)(a2 + 88);
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v16;
    id v19 = *(void **)(a2 + 96);
    id v18 = *(void **)(a2 + 104);
    *(void *)(a1 + 88) = v17;
    *(void *)(a1 + 96) = v19;
    uint64_t v20 = *(void **)(a2 + 112);
    Swift::UInt v28 = v18;
    uint64_t v29 = *(void *)(a2 + 120);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v20;
    id v30 = v20;
    uint64_t v31 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v29;
    *(void *)(a1 + 128) = v31;
    uint64_t v21 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v21;
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = v16;
    id v23 = v17;
    id v24 = v19;
    id v25 = v28;
    id v26 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) == 1)
  {
    if (v6 == 1)
    {
      *uint64_t v4 = *v5;
      long long v7 = *(_OWORD *)(a2 + 32);
      long long v8 = *(_OWORD *)(a2 + 48);
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      long long v10 = *(_OWORD *)(a2 + 96);
      long long v11 = *(_OWORD *)(a2 + 112);
      long long v12 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 96) = v10;
    }
    else
    {
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      id v19 = *(void **)(a2 + 80);
      *(void *)(a1 + 80) = v19;
      uint64_t v20 = *(void **)(a2 + 88);
      *(void *)(a1 + 88) = v20;
      uint64_t v21 = *(void **)(a2 + 96);
      *(void *)(a1 + 96) = v21;
      id v22 = *(void **)(a2 + 104);
      *(void *)(a1 + 104) = v22;
      int v44 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v44;
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
      *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
      *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v23 = v19;
      id v24 = v20;
      id v25 = v21;
      id v26 = v22;
      id v27 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of LocalePreferences(a1 + 16);
    *uint64_t v4 = *v5;
    long long v13 = *(_OWORD *)(a2 + 80);
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v14;
    long long v17 = *(_OWORD *)(a2 + 112);
    long long v16 = *(_OWORD *)(a2 + 128);
    long long v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 96) = v18;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Swift::UInt v28 = *(void **)(a1 + 80);
    uint64_t v29 = *(void **)(a2 + 80);
    *(void *)(a1 + 80) = v29;
    id v30 = v29;

    uint64_t v31 = *(void **)(a1 + 88);
    id v32 = *(void **)(a2 + 88);
    *(void *)(a1 + 88) = v32;
    id v33 = v32;

    uint64_t v34 = *(void **)(a1 + 96);
    id v35 = *(void **)(a2 + 96);
    *(void *)(a1 + 96) = v35;
    id v36 = v35;

    id v37 = *(void **)(a1 + 104);
    id v38 = *(void **)(a2 + 104);
    *(void *)(a1 + 104) = v38;
    id v39 = v38;

    id v40 = *(void **)(a1 + 112);
    char v41 = *(void **)(a2 + 112);
    *(void *)(a1 + 112) = v41;
    id v42 = v41;

    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
    *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
    *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
  }
  return a1;
}

__n128 __swift_memcpy156_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24) != 1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (v5 != 1)
    {
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRelease();
      long long v12 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);

      long long v13 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);

      long long v14 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);

      long long v15 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);

      long long v16 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);

      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 144);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v17;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      return a1;
    }
    outlined destroy of LocalePreferences(a1 + 16);
  }
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 156)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocaleCache.State.IdentifierAndPrefs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 152) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 156) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 156) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t PredicateExpressions.Disjunction.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Disjunction.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t PredicateExpressions.Disjunction.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.Disjunction();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t PredicateExpressions.Disjunction.evaluate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  long long v6 = (uint64_t *)MEMORY[0x1F4188790]();
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v6;
  uint64_t v15 = *v6;
  (*(void (**)(char *__return_ptr, uint64_t *, void))(*(void *)(v10 + 40) + 16))((char *)&v16 + 1, &v15, *(void *)(v10 + 24));
  if (!v3)
  {
    int v12 = BYTE1(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a2);
    if (v12 == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = 1;
    }
    else
    {
      uint64_t v15 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*(void *)(a2 + 40) + 16))(&v16, &v15, *(void *)(a2 + 24));
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = v16;
    }
  }
  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Disjunction<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Disjunction.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t static PredicateExpressions.build_Disjunction<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.Disjunction();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t PredicateExpressions.Disjunction.description.getter()
{
  _StringGuts.grow(_:)(29);
  v0._unint64_t object = (void *)0x80000001823AEA00;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.Disjunction<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.Disjunction<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v33 = a3;
  uint64_t v29 = a5;
  uint64_t v28 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  id v32 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v13;
  v34[0] = v13;
  v34[1] = v14;
  _OWORD v34[2] = v15;
  uint64_t v35 = v16;
  uint64_t v17 = type metadata accessor for PredicateExpressions.Disjunction();
  uint64_t v27 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  id v19 = (char *)&v25 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v25 = v17;
  id v26 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  uint64_t v20 = v32;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v20, v36);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v22 = v25;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v21[*(int *)(v25 + 52)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  uint64_t v23 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v29, v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v21, v22);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Disjunction<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Disjunction<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Disjunction<A, B>(void *a1)
{
  return PredicateExpressions.Disjunction<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Disjunction(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Disjunction(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181D4B268);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          id v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

Swift::Bool __swiftcall _FileManagerImpl.isDeletableFile(atPath:)(Swift::String atPath)
{
  uint64_t v2 = v1;
  unint64_t object = atPath._object;
  uint64_t countAndFlagsBits = atPath._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t Path = String._deletingLastPathComponent()(countAndFlagsBits, (unint64_t)object);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = Path & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (void *)MEMORY[0x185309640](v2);
    if (!v9) {
      goto LABEL_21;
    }
    unsigned int v10 = v9;
    id v11 = objc_msgSend(v9, sel_currentDirectoryPath);

    uint64_t Path = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v7 = v12;
  }
  uint64_t v13 = (void *)MEMORY[0x185309640](v2);
  if (!v13) {
    goto LABEL_21;
  }
  size_t v14 = v13;
  unsigned __int8 v15 = objc_msgSend(v13, sel_isWritableFileAtPath_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  if (v15)
  {
    uint64_t v16 = MEMORY[0x185309640](v2);
    if (!v16) {
      goto LABEL_21;
    }
    int v17 = (void *)v16;
    v18._uint64_t countAndFlagsBits = Path;
    v18._unint64_t object = (void *)v7;
    NSFileManager._fileStat(_:)(&v30, v18);

    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)&v30, (uint64_t)v34, &demangling cache variable for type metadata for stat?);
    if (_sSo4statVSgWOg((uint64_t)v34) != 1)
    {
      int v19 = v35;
      int v20 = S_ISVTX.getter() & v19;
      outlined init with copy of _FileManagerImpl(v2, (uint64_t)v29);
      if (v20)
      {
        int v21 = (void *)MEMORY[0x185309640](v29);
        if (!v21) {
          goto LABEL_21;
        }
        unint64_t v22 = v21;
        unsigned __int8 v23 = objc_msgSend(v21, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

        swift_unknownObjectRelease();
        outlined destroy of _FileManagerImpl((uint64_t)v29);
        if (v23)
        {
          uint64_t v24 = MEMORY[0x185309640](v2);
          if (v24)
          {
            uint64_t v25 = (void *)v24;
            v26._uint64_t countAndFlagsBits = countAndFlagsBits;
            v26._unint64_t object = object;
            NSFileManager._fileStat(_:)(&v31, v26);

            outlined init with take of LocalePreferences?((uint64_t)&v31, (uint64_t)v32, &demangling cache variable for type metadata for stat?);
            if (_sSo4statVSgWOg((uint64_t)v32) != 1)
            {
              int v27 = v33;
              return v27 == getuid();
            }
            return 0;
          }
LABEL_21:
          Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      else
      {
        outlined destroy of _FileManagerImpl((uint64_t)v29);
      }
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t _sSo4statVSgWOg(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, char a5, char a6)
{
  getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(a1, a2, a3, a4, (uint64_t)v33);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v34, &demangling cache variable for type metadata for Result<stat, CocoaError>);
  outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for Result<stat, CocoaError>);
  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)v35) == 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)v32, &demangling cache variable for type metadata for Result<stat, CocoaError>);
    uint64_t v36 = *(void *)destructiveProjectEnumData for PredicateCodableError(v32, v11);
    lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
    return swift_willThrowTypedImpl();
  }
  outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)v32, &demangling cache variable for type metadata for Result<stat, CocoaError>);
  __uint32_t v14 = *(_DWORD *)(destructiveProjectEnumData for PredicateCodableError(v32, v13) + 116);
  unsigned int v15 = v14 & 0xFFFFFFFB;
  if (a5) {
    unsigned int v15 = v14 | 4;
  }
  if (a5 != 2) {
    __uint32_t v14 = v15;
  }
  unsigned int v16 = v14 & 0xFFFFFFFD;
  if (a6) {
    unsigned int v16 = v14 | 2;
  }
  if (a6 == 2) {
    __uint32_t v17 = v14;
  }
  else {
    __uint32_t v17 = v16;
  }
  uint64_t result = chflags(a2, v17);
  if (result)
  {
    int v18 = MEMORY[0x185301870]();
    uint64_t v19 = 4;
    switch(v18)
    {
      case 1:
      case 13:
        uint64_t v19 = 513;
        goto LABEL_22;
      case 2:
        goto LABEL_22;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_18;
      case 17:
        uint64_t v19 = 516;
        goto LABEL_22;
      case 28:
      case 69:
        uint64_t v19 = 640;
        goto LABEL_22;
      case 30:
        uint64_t v19 = 642;
        goto LABEL_22;
      case 63:
        uint64_t v19 = 514;
        goto LABEL_22;
      default:
        if (v18 == 102)
        {
          id v20 = 0;
          uint64_t v19 = 512;
LABEL_27:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v19, a3, a4, v20, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))v31, 0, 0);
          return swift_willThrow();
        }
LABEL_18:
        uint64_t v19 = 512;
LABEL_22:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v21 = (int)POSIXErrorCode.rawValue.getter();
          id v22 = objc_allocWithZone((Class)NSError);
          uint64_t v23 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v20 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, v21, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v24 = objc_msgSend(v20, sel_domain);
          id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          uint64_t v27 = v26;

          if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v27 == v28)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_27;
          }
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v29) {
            goto LABEL_27;
          }
          __break(1u);
        }
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        v31[0] = 0xD000000000000014;
        v31[1] = 0x80000001823A9780;
        v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181D4BF28);
    }
  }
  return result;
}

uint64_t closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(const char *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = chmod(a1, a2);
  if (!result) {
    return result;
  }
  int v8 = MEMORY[0x185301870]();
  int v4 = v8;
  uint64_t v9 = 4;
  switch(v8)
  {
    case 1:
    case 13:
      uint64_t v9 = 513;
      goto LABEL_12;
    case 2:
      goto LABEL_12;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_8;
    case 17:
      uint64_t v9 = 516;
      goto LABEL_12;
    case 28:
    case 69:
      uint64_t v9 = 640;
      goto LABEL_12;
    case 30:
      uint64_t v9 = 642;
      goto LABEL_12;
    case 63:
      uint64_t v9 = 514;
      goto LABEL_12;
    default:
      if (v8 != 102)
      {
LABEL_8:
        uint64_t v9 = 512;
LABEL_12:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v11 = (int)POSIXErrorCode.rawValue.getter();
          id v12 = objc_allocWithZone((Class)NSError);
          uint64_t v13 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v10 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, v11, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v14 = objc_msgSend(v10, sel_domain);
          id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          uint64_t v17 = v16;

          if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v17 != v18)
          {
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v20) {
              goto LABEL_20;
            }
            __break(1u);
          }
          swift_bridgeObjectRelease_n();
          goto LABEL_20;
        }
LABEL_23:
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        v22[0] = 0xD000000000000014;
        v22[1] = 0x80000001823A9780;
        int v23 = v4;
        v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181D4C384);
      }
      id v10 = 0;
      uint64_t v9 = 512;
LABEL_20:
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v9, a3, a4, v10, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))v22, 0, 0);
      return swift_willThrow();
  }
}

void specialized _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)(uint64_t a1)
{
  if (!*MEMORY[0x1E4F1CFD0])
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*MEMORY[0x1E4F1CFD0] != a1)
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
    char v3 = static NSObject.== infix(_:_:)();

    if ((v3 & 1) == 0)
    {
      if (*MEMORY[0x1E4F1CFC8])
      {
        if (*MEMORY[0x1E4F1CFC8] != a1)
        {
          id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();
        }
        return;
      }
LABEL_10:
      __break(1u);
    }
  }
}

unint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt32VSg_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6h77VSg_TG5038_ss11_StringGutsV11withCStringyxxSPys4a23VGKXEKlFxSRyAEGKXEfU_s6c75Q114_TG5062_s10Foundation16_FileManagerImplV24_userAccountNameToNumberys6f14O29SSFZAGSPys4E7VGXEfU_Tf3nnpf_nTf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  if (v3)
  {
    unsigned __int8 v4 = 0;
    uint64_t v5 = *(unsigned int *)(v3 + 16);
  }
  else
  {
    uint64_t v5 = 0;
    unsigned __int8 v4 = 1;
  }
  return v5 | ((unint64_t)v4 << 32);
}

uint64_t sub_181D4C6CC()
{
  int v1 = *(unsigned __int8 *)(v0 + 160);
  if (v1 != 255) {
    outlined consume of Result<stat, CocoaError>(*(id *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), v1 & 1);
  }

  return MEMORY[0x1F4186498](v0, 161, 7);
}

unint64_t lazy protocol witness table accessor for type CocoaError and conformance CocoaError()
{
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

uint64_t sub_181D4C798()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)()
{
  return closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(*(const char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t objectdestroy_19Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 50, 7);
}

uint64_t closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)partial apply()
{
  return closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(*(void *)(v0 + 16), *(const char **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48), *(unsigned char *)(v0 + 49));
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi0_(uint64_t result)
{
  *(unsigned char *)(result + 144) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

uint64_t PredicateExpressions.NotEqual.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.NotEqual();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.NotEqual(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.NotEqual(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181D4CE5CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          id v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays8DurationV10FoundationE16UnitsFormatStyleV4UnitVG_AL01_I0Os5NeverOTg504_ss8d3V10e3E16fgh35V13_getSkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (char *)(a1 + 32);
    do
    {
      char v6 = *v4++;
      char v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(unsigned char *)(result + v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)a2;
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v55 = *(_OWORD *)(a2 + 8);
  long long v56 = v4;
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v57 = *(_OWORD *)(a2 + 40);
  long long v58 = v5;
  long long v6 = v3[1];
  long long v7 = v3[3];
  long long v78 = v3[2];
  long long v79 = v7;
  long long v77 = v6;
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v48);
  uint64_t v46 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v49);
  outlined release of AttributedString.Runs(a2);
  uint64_t v69 = v46;
  uint64_t v70 = v9;
  uint64_t v71 = v11;
  uint64_t v72 = v13;
  uint64_t v73 = v14;
  uint64_t v74 = v16;
  uint64_t v75 = v18;
  uint64_t v76 = v20;
  long long v21 = v3[2];
  long long v66 = v3[1];
  long long v67 = v21;
  long long v68 = v3[3];
  v80[1] = v21;
  void v80[2] = v68;
  v80[0] = v66;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v80, (uint64_t)v81);
  outlined retain of Locale((uint64_t)v81);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  outlined release of AttributedString.Runs(a2);
  long long v22 = v47[2];
  long long v63 = v47[1];
  long long v64 = v22;
  long long v65 = v47[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v51);
  char v42 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)v52);
  BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v45 = BigString.Index.utf8Offset.getter();
  BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v44 = BigString.Index.utf8Offset.getter();
  uint64_t v41 = a2;
  outlined retain of AttributedString.Runs(a2);
  uint64_t v43 = BigString.Index.utf8Offset.getter();
  uint64_t v23 = BigString.Index.utf8Offset.getter();
  if (v42)
  {
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v43, v23, (uint64_t)v3, v45, v44);
    uint64_t v24 = BigString.Index.utf8Offset.getter();
    uint64_t v25 = BigString.Index.utf8Offset.getter();
    uint64_t v26 = v24;
    char v27 = 0;
LABEL_7:
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v26, v25, v27, 0);
    outlined release of Locale((uint64_t)v50);
    return outlined release of AttributedString.Runs(v41);
  }
  uint64_t v28 = v23;
  uint64_t v29 = BigString.Index.utf8Offset.getter();
  uint64_t v30 = BigString.Index.utf8Offset.getter();
  uint64_t v31 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v29, v30);
  uint64_t v33 = v32;
  long long v34 = v47[2];
  v61[0] = v47[1];
  v61[1] = v34;
  long long v62 = v47[3];
  v82[0] = v61[0];
  v82[1] = v34;
  uint64_t v82[2] = v62;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v82, (uint64_t)v83);
  outlined retain of Locale((uint64_t)v83);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v61);
  uint64_t v35 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v53);
  outlined retain of Locale((uint64_t)v50);
  uint64_t v36 = (void (*)(long long *, void))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v36(v84, 0);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v43, v28, (uint64_t)v3, v45, v44);
  long long v37 = v47[2];
  v59[0] = v47[1];
  v59[1] = v37;
  long long v60 = v47[3];
  v84[0] = v59[0];
  v84[1] = v37;
  _OWORD v84[2] = v60;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v84, (uint64_t)v85);
  outlined retain of Locale((uint64_t)v85);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v59);
  uint64_t v38 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v54);
  uint64_t v40 = v38 - v35;
  if (__OFSUB__(v38, v35))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v25 = v33 + v40;
  if (__OFADD__(v33, v40))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v25 >= v31)
  {
    uint64_t v26 = v31;
    char v27 = 1;
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v9 = result;
  unint64_t v6 = a2 >> 14;
  if (a2 >> 14 < a3 >> 14)
  {
    unint64_t v7 = a6 >> 14;
    if (a6 >> 14 >= result >> 14)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        Substring.UnicodeScalarView.formIndex(before:)();
        uint64_t result = v9;
        if (v6 >= a3 >> 14) {
          break;
        }
        if (v7 >= v9 >> 14) {
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  unint64_t v11 = a7;
  unint64_t v16 = result;
  if (a6)
  {
    unint64_t v50 = a8;
    unint64_t v52 = a2;
    unint64_t v17 = a8;
    unint64_t v38 = result >> 14;
    unint64_t v47 = a2 >> 14;
    if (result >> 14 >= a2 >> 14)
    {
LABEL_15:
      unint64_t v44 = a2;
      if (a5) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = v11;
      }
      goto LABEL_21;
    }
    unint64_t v18 = a7 >> 14;
    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        uint64_t result = Substring.UnicodeScalarView.formIndex(before:)();
        unint64_t v17 = v50;
        if (v38 >= v52 >> 14) {
          break;
        }
        if (v18 >= v50 >> 14) {
          return 0;
        }
      }
      unint64_t v11 = a7;
      goto LABEL_15;
    }
    return 0;
  }
  if (a5)
  {
    unint64_t v44 = a2;
    unint64_t v47 = a2 >> 14;
    unint64_t v38 = result >> 14;
    unint64_t v19 = a7;
  }
  else
  {
    unint64_t v50 = a8;
    unint64_t v52 = a2;
    unint64_t v19 = a8;
    unint64_t v38 = result >> 14;
    unint64_t v47 = a2 >> 14;
    if (result >> 14 < a2 >> 14)
    {
      unint64_t v20 = a7 >> 14;
      if (a7 >> 14 >= a8 >> 14) {
        return 0;
      }
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        uint64_t result = Substring.UnicodeScalarView.formIndex(before:)();
        unint64_t v19 = v50;
        if (v38 >= v52 >> 14) {
          break;
        }
        if (v20 >= v50 >> 14) {
          return 0;
        }
      }
      unint64_t v11 = a7;
    }
    unint64_t v44 = a2;
  }
  unint64_t v17 = v11;
LABEL_21:
  unint64_t v37 = v19 >> 14;
  unint64_t v45 = a8 >> 14;
  unint64_t v46 = v16;
  uint64_t v21 = HIBYTE(a10) & 0xF;
  uint64_t v22 = (a9 >> 59) & 1;
  if ((a10 & 0x1000000000000000) == 0) {
    LOBYTE(v22) = 1;
  }
  if ((a10 & 0x2000000000000000) == 0) {
    uint64_t v21 = a9 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v43 = v21;
  uint64_t v49 = 4 << v22;
  uint64_t v23 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v23) = 1;
  }
  uint64_t v48 = 4 << v23;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v24 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v24 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v42 = v24;
  while (1)
  {
    unint64_t v39 = v17 >> 14;
    unint64_t v40 = v17;
    unint64_t v25 = v38;
    if (v38 < v47)
    {
      unint64_t v25 = v38;
      if (v39 < v45)
      {
        unint64_t v26 = v46;
        unint64_t v25 = v38;
        while (1)
        {
          _StringGuts.validateScalarIndex(_:in:)(v17, v11, a8, a9, a10);
          if ((a10 & 0x1000000000000000) != 0)
          {
            int v27 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((a10 & 0x2000000000000000) != 0)
            {
              unint64_t v50 = a9;
              uint64_t v51 = a10 & 0xFFFFFFFFFFFFFFLL;
            }
            else if ((a9 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            int v27 = _decodeScalar(_:startingAt:)();
          }
          int v28 = v27;
          _StringGuts.validateScalarIndex(_:in:)(v26, v46, v44, a3, a4);
          if ((a4 & 0x1000000000000000) != 0)
          {
            uint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            if (v28 != result) {
              goto LABEL_89;
            }
          }
          else
          {
            if ((a4 & 0x2000000000000000) != 0)
            {
              unint64_t v50 = a3;
              uint64_t v51 = a4 & 0xFFFFFFFFFFFFFFLL;
            }
            else if ((a3 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            uint64_t result = _decodeScalar(_:startingAt:)();
            unint64_t v11 = a7;
            if (v28 != result) {
              goto LABEL_89;
            }
          }
          if (v17 & 0xC) != v49 && (v17) {
            break;
          }
          if ((v17 & 0xC) == v49)
          {
            uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v17, a9, a10);
            unint64_t v17 = result;
          }
          if (v43 <= v17 >> 16) {
            goto LABEL_94;
          }
          if (v17) {
            goto LABEL_57;
          }
          uint64_t result = _StringGuts.scalarAlignSlow(_:)(v17, a9, a10);
          unint64_t v17 = v17 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((a10 & 0x1000000000000000) != 0)
          {
LABEL_67:
            uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
            unint64_t v17 = result;
            goto LABEL_68;
          }
LABEL_58:
          unint64_t v29 = v17 >> 16;
          if ((a10 & 0x2000000000000000) != 0)
          {
            unint64_t v50 = a9;
            uint64_t v51 = a10 & 0xFFFFFFFFFFFFFFLL;
            int v30 = *((unsigned __int8 *)&v50 + v29);
          }
          else
          {
            uint64_t result = (a10 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a9 & 0x1000000000000000) == 0) {
              uint64_t result = _StringObject.sharedUTF8.getter();
            }
            int v30 = *(unsigned __int8 *)(result + v29);
          }
          int v31 = (char)v30;
          unsigned int v32 = __clz(v30 ^ 0xFF) - 24;
          if (v31 >= 0) {
            LOBYTE(v32) = 1;
          }
          unint64_t v17 = ((v29 + v32) << 16) | 5;
LABEL_68:
          if (v26 & 0xC) != v48 && (v26)
          {
            if (v42 <= v26 >> 16) {
              goto LABEL_95;
            }
LABEL_76:
            if ((a4 & 0x1000000000000000) == 0) {
              goto LABEL_77;
            }
            goto LABEL_86;
          }
          if ((v26 & 0xC) == v48)
          {
            uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v26, a3, a4);
            unint64_t v26 = result;
          }
          if (v42 <= v26 >> 16) {
            goto LABEL_96;
          }
          if (v26) {
            goto LABEL_76;
          }
          uint64_t result = _StringGuts.scalarAlignSlow(_:)(v26, a3, a4);
          unint64_t v26 = v26 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((a4 & 0x1000000000000000) == 0)
          {
LABEL_77:
            unint64_t v33 = v26 >> 16;
            if ((a4 & 0x2000000000000000) != 0)
            {
              unint64_t v50 = a3;
              uint64_t v51 = a4 & 0xFFFFFFFFFFFFFFLL;
              int v34 = *((unsigned __int8 *)&v50 + v33);
            }
            else
            {
              uint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
              if ((a3 & 0x1000000000000000) == 0) {
                uint64_t result = _StringObject.sharedUTF8.getter();
              }
              int v34 = *(unsigned __int8 *)(result + v33);
            }
            int v35 = (char)v34;
            unsigned int v36 = __clz(v34 ^ 0xFF) - 24;
            if (v35 >= 0) {
              LOBYTE(v36) = 1;
            }
            unint64_t v26 = ((v33 + v36) << 16) | 5;
            goto LABEL_87;
          }
LABEL_86:
          uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
          unint64_t v26 = result;
LABEL_87:
          unint64_t v25 = v26 >> 14;
          if (v26 >> 14 >= v47 || v17 >> 14 >= v45) {
            goto LABEL_89;
          }
        }
        if (v43 <= v17 >> 16)
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
          return result;
        }
LABEL_57:
        if ((a10 & 0x1000000000000000) != 0) {
          goto LABEL_67;
        }
        goto LABEL_58;
      }
    }
LABEL_89:
    if (v25 == v47) {
      break;
    }
    if (v39 == v37) {
      return 0;
    }
    uint64_t result = Substring.UnicodeScalarView.index(_:offsetBy:)();
    unint64_t v17 = result;
  }
  if (v39 > v17 >> 14) {
    goto LABEL_97;
  }
  return v40;
}