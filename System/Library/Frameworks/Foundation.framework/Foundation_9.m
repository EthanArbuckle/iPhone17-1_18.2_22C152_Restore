void *specialized _copySequenceToContiguousArray<A>(_:)()
{
  uint64_t started;
  uint64_t v1;
  void *v2;
  _UNKNOWN **v3;
  char **v4;
  char **v5;
  uint64_t isStackAllocationSafe;
  double v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  char **v21;
  _UNKNOWN **v22;
  int64_t v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const void *v31;
  BOOL v32;
  void *result;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37[1040];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E4F143B8];
  started = sysdir_start_search_path_enumeration_private();
  v1 = 0;
  v38 = (void *)MEMORY[0x1E4FBC860];
  v2 = (void *)(MEMORY[0x1E4FBC860] + 32);
  v3 = &off_1E51F3000;
  v4 = &selRef_changeFileAttributes_atPath_;
  v5 = &selRef_sendSynchronousRequest_returningResponse_error_;
  while (1)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (isStackAllocationSafe)
    {
      v7 = MEMORY[0x1F4188790](isStackAllocationSafe);
      v8 = MEMORY[0x185309710](started, v37, v7);
      if (!v8) {
        goto LABEL_24;
      }
      started = v8;
      v9 = [self v4[254]];
      v10 = objc_msgSend(v9, v5[456], v37, strlen(v37));

      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      if (v1) {
        goto LABEL_20;
      }
      goto LABEL_8;
    }
    v14 = (const char *)swift_slowAlloc();
    v15 = MEMORY[0x185309710](started, v14);
    if (!v15) {
      break;
    }
    started = v15;
    v16 = [self v4[254]];
    v17 = objc_msgSend(v16, v5[456], v14, strlen(v14));

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v13 = v18;

    MEMORY[0x185309510](v14, -1, -1);
    if (v1) {
      goto LABEL_20;
    }
LABEL_8:
    v19 = v38;
    v20 = v38[3];
    if ((uint64_t)((v20 >> 1) + 0x4000000000000000) < 0) {
      goto LABEL_29;
    }
    v21 = v4;
    v22 = v3;
    v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
    if (v23 <= 1) {
      v24 = 1;
    }
    else {
      v24 = v23;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v25 = (void *)swift_allocObject();
    v26 = _swift_stdlib_malloc_size(v25);
    v27 = v26 - 32;
    if (v26 < 32) {
      v27 = v26 - 17;
    }
    v28 = v27 >> 4;
    v25[2] = v24;
    v25[3] = 2 * (v27 >> 4);
    v29 = (unint64_t)(v25 + 4);
    v30 = v19[3] >> 1;
    if (v19[2])
    {
      v31 = v19 + 4;
      if (v25 != v19 || v29 >= (unint64_t)v31 + 16 * v30) {
        memmove(v25 + 4, v31, 16 * v30);
      }
      v19[2] = 0;
    }
    v2 = (void *)(v29 + 16 * v30);
    v1 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
    swift_release();
    v38 = v25;
    v3 = v22;
    v4 = v21;
    v5 = &selRef_sendSynchronousRequest_returningResponse_error_;
LABEL_20:
    v32 = __OFSUB__(v1--, 1);
    if (v32)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    *v2 = v11;
    v2[1] = v13;
    v2 += 2;
  }
  MEMORY[0x185309510](v14, -1, -1);
LABEL_24:
  result = v38;
  v34 = v38[3];
  if (v34 >= 2)
  {
    v35 = v34 >> 1;
    v32 = __OFSUB__(v35, v1);
    v36 = v35 - v1;
    if (v32) {
      goto LABEL_30;
    }
    v38[2] = v36;
  }
  return result;
}

void *specialized _copySequenceToContiguousArray<A>(_:)(const char *a1, int a2)
{
  v44[13] = *(char **)MEMORY[0x1E4F143B8];
  type metadata accessor for _FTSSequence.Iterator();
  uint64_t inited = swift_initStackObject();
  *(_DWORD *)(inited + 56) = 0;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(inited + 64) = MEMORY[0x1E4FBC860];
  *(void *)(inited + 72) = v5;
  *(unsigned char *)(inited + 80) = 0;
  *(void *)(inited + 48) = a1;
  memset(&v43, 0, 28);
  memset(&v43.st_atimespec, 0, 112);
  if (lstat(a1, &v43) || (v44[0] = (char *)a1, v44[1] = 0, (v10 = fts_open(v44, a2, 0)) == 0))
  {
    unsigned int v6 = MEMORY[0x185301870]();
    uint64_t v8 = String.init(cString:)();
    char v9 = 1;
    v10 = (FTS *)v6;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    char v9 = 0;
  }
  *(void *)(inited + 16) = v10;
  *(void *)(inited + 24) = v8;
  *(void *)(inited + 32) = v7;
  *(unsigned char *)(inited + 40) = v9;
  uint64_t v11 = _FTSSequence.Iterator.next()();
  v15 = (void *)MEMORY[0x1E4FBC860];
  if (v14 != -1)
  {
    uint64_t v16 = v11;
    uint64_t v17 = v12;
    uint64_t v18 = v13;
    char v19 = v14;
    uint64_t v20 = 0;
    uint64_t v21 = MEMORY[0x1E4FBC860] + 32;
    uint64_t v42 = inited;
    while (1)
    {
      if (!v20)
      {
        unint64_t v22 = v15[3];
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_35;
        }
        int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_FTSSequence.Element>);
        v25 = (void *)swift_allocObject();
        int64_t v26 = _swift_stdlib_malloc_size(v25);
        uint64_t v27 = v26 - 32;
        if (v26 < 32) {
          uint64_t v27 = v26 - 1;
        }
        uint64_t v28 = v27 >> 5;
        v25[2] = v24;
        v25[3] = 2 * (v27 >> 5);
        unint64_t v29 = (unint64_t)(v25 + 4);
        uint64_t v30 = v15[3] >> 1;
        size_t v31 = 32 * v30;
        if (v15[2])
        {
          if (v25 != v15 || v29 >= (unint64_t)&v15[v31 / 8 + 4]) {
            memmove(v25 + 4, v15 + 4, v31);
          }
          v15[2] = 0;
        }
        uint64_t v21 = v29 + v31;
        uint64_t v20 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        v15 = v25;
        uint64_t inited = v42;
      }
      BOOL v33 = __OFSUB__(v20--, 1);
      if (v33) {
        break;
      }
      *(void *)uint64_t v21 = v16;
      *(void *)(v21 + 8) = v17;
      *(void *)(v21 + 16) = v18;
      *(unsigned char *)(v21 + 24) = v19 & 1;
      v21 += 32;
      uint64_t v16 = _FTSSequence.Iterator.next()();
      uint64_t v17 = v34;
      uint64_t v18 = v35;
      char v19 = v36;
      if (v36 == -1) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  uint64_t v20 = 0;
LABEL_27:
  swift_setDeallocating();
  v37 = *(FTS **)(inited + 16);
  if (*(unsigned char *)(inited + 40)) {
    outlined consume of _FTSSequence.Iterator.State((uint64_t)v37, *(void *)(inited + 24), *(void *)(inited + 32), *(unsigned char *)(inited + 40));
  }
  else {
    fts_close(v37);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v38 = v15[3];
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    BOOL v33 = __OFSUB__(v39, v20);
    uint64_t v40 = v39 - v20;
    if (v33) {
      goto LABEL_36;
    }
    v15[2] = v40;
  }
  return v15;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  v4 = __dst;
  unsigned int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v24 = __src;
  int64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[v13];
      unint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (double *)(a3 - 8);
        while (1)
        {
          uint64_t v18 = v17 + 1;
          char v19 = v6 - 1;
          double v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            unint64_t v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *uint64_t v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *uint64_t v17 = v20;
            }
            uint64_t v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    char v14 = &v4[v10];
    unint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *uint64_t v7 = *v4;
          }
          int64_t v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *uint64_t v7 = *v6;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        unsigned int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  int64_t v4;
  char *result;
  uint64_t vars8;

  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -56)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    unsigned int v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
    {
      return (char *)memmove(result, v3, 56 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  uint64_t vars8;

  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -48)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    unsigned int v6 = 48 * (v4 / 48);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    unsigned int v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 3;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -4)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
    {
      return (char *)memmove(result, v3, 4 * v7);
    }
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  void (*v13)(void *__return_ptr, uint64_t *, long long *, uint64_t, uint64_t);
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v34;
  long long v35;
  long long v36;
  void v37[36];
  void v38[36];
  void __dst[36];
  uint64_t v40;
  void __src[37];
  uint64_t v42;

  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v5 = 0;
  v32 = result + 32;
  unint64_t v29 = (unsigned __int8 *)(a3 + 40);
  uint64_t v30 = MEMORY[0x1E4FBC860];
  size_t v31 = *(void *)(result + 16);
  do
  {
    if (v5 <= v3) {
      unint64_t v6 = v3;
    }
    else {
      unint64_t v6 = v5;
    }
    uint64_t v34 = v6;
    while (1)
    {
      if (v5 == v34)
      {
        __break(1u);
        return result;
      }
      double v7 = *(double *)(v32 + 8 * v5);
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      uint64_t v40 = 4;
      if (v7 <= 1.59271755e13) {
        double v10 = v7;
      }
      else {
        double v10 = 1.59271755e13;
      }
      double v11 = fmax(v10, -2.11845067e11);
      uint64_t ObjectType = swift_getObjectType();
      *(double *)unint64_t v38 = v11;
      uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t *, long long *, uint64_t, uint64_t))(v9 + 192);
      swift_unknownObjectRetain();
      v13(__src, &v40, (long long *)v38, ObjectType, v9);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      swift_unknownObjectRelease();
      if (LOBYTE(__dst[9])) {
        char v14 = 0;
      }
      else {
        char v14 = __dst[8];
      }
      v15 = qword_1ECA2F510;
      v37[0] = qword_1ECA2F510;
      *(double *)&char v36 = v11;
      v13(v38, v37, &v36, ObjectType, v9);
      if ((v15 & 0x4000) != 0)
      {
        v38[0] = v8;
        v38[1] = v9;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v16 = v38[2];
        if (v38[2])
        {
          uint64_t v17 = v38[3];
          v37[0] = v38[2];
          v37[1] = v38[3];
          uint64_t v18 = swift_getObjectType();
          char v19 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v9 + 48);
          swift_unknownObjectRetain();
          v19(&v36, v18, v9);
          uint64_t v35 = v36;
          LOBYTE(v19) = specialized static TimeZone.== infix(_:_:)((uint64_t)v37, (uint64_t)&v35);
          swift_unknownObjectRelease();
          if (v19)
          {
            swift_unknownObjectRelease();
          }
          else
          {
            v37[0] = 0;
            v37[1] = 0;
            *(void *)&char v36 = v16;
            *((void *)&v36 + 1) = v17;
            double v20 = (*(uint64_t (**)(void *, long long *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v9 + 112))(v37, &v36, 0, 1, 0, 1, v18, v9);
            unint64_t v22 = v21;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v38[0] = v20;
            v38[1] = v22;
          }
        }
      }
      ++v5;
      memcpy(v37, v38, 0x11AuLL);
      uint64_t result = outlined release of DateComponents((uint64_t)v37);
      int64_t v23 = *(void *)(a3 + 16);
      if (v23) {
        break;
      }
LABEL_7:
      if (v5 == v31) {
        return v30;
      }
    }
    uint64_t v24 = v29;
    while (1)
    {
      v25 = *((void *)v24 - 1) != v14 || BYTE1(v37[35]) == 2;
      if (!v25 && ((((v37[35] & 0x100) == 0) ^ *v24) & 1) != 0) {
        break;
      }
      v24 += 16;
      if (!--v23) {
        goto LABEL_7;
      }
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    int64_t v26 = v30;
    uint64_t v42 = v30;
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
      int64_t v26 = v42;
    }
    uint64_t v28 = *(void *)(v26 + 16);
    uint64_t v27 = *(void *)(v26 + 24);
    if (v28 >= v27 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      int64_t v26 = v42;
    }
    *(void *)(v26 + 16) = v28 + 1;
    uint64_t v30 = v26;
    *(double *)(v26 + 8 * v28 + 32) = v7;
    unint64_t v3 = v31;
  }
  while (v5 != v31);
  return v30;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  double v7 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 8 * v6 + 32);
    closure #2 in Calendar.RecurrenceRule._expandWeeks(dates:anchor:)((double *)&v24, a2, a3, &v23);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    uint64_t v8 = v23;
    uint64_t v9 = *(void *)(v23 + 16);
    int64_t v10 = v7[2];
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v11 <= v7[3] >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v10 <= v11) {
        int64_t v13 = v10 + v9;
      }
      else {
        int64_t v13 = v10;
      }
      double v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v13, 1, v7);
      if (*(void *)(v8 + 16))
      {
LABEL_15:
        uint64_t v14 = v7[2];
        if ((v7[3] >> 1) - v14 < v9) {
          goto LABEL_30;
        }
        v15 = &v7[v14 + 4];
        if (v8 + 32 < (unint64_t)&v15[v9] && (unint64_t)v15 < v8 + 32 + 8 * v9) {
          goto LABEL_32;
        }
        memcpy(v15, (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          uint64_t v17 = v7[2];
          BOOL v18 = __OFADD__(v17, v9);
          uint64_t v19 = v17 + v9;
          if (v18) {
            goto LABEL_31;
          }
          v7[2] = v19;
        }
        goto LABEL_4;
      }
    }
    if (v9) {
      goto LABEL_29;
    }
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease();
    if (v4 == v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule((uint64_t)a2);
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = MEMORY[0x1E4FBC860];
    while (v8 < *(void *)(v4 + 16))
    {
      uint64_t v12 = *(void *)(v4 + 8 * v8 + 32);
      uint64_t v13 = v12;
      uint64_t result = a3(&v13, a2);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if (result)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = v9;
        if ((result & 1) == 0)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
          uint64_t v9 = v14;
        }
        unint64_t v11 = *(void *)(v9 + 16);
        unint64_t v10 = *(void *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v9 = v14;
        }
        *(void *)(v9 + 16) = v11 + 1;
        *(void *)(v9 + 8 * v11 + 32) = v12;
      }
      if (v5 == ++v8) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_14:
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t a2, long long *a3)
{
  Swift::Int v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = MEMORY[0x1E4FBC860];
    while (v8 < *(void *)(v4 + 16))
    {
      uint64_t v12 = *(void *)(v4 + 8 * v8 + 32);
      uint64_t v13 = v12;
      uint64_t result = closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)((double *)&v13, a2, a3);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if (result)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = v9;
        if ((result & 1) == 0)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
          uint64_t v9 = v14;
        }
        unint64_t v11 = *(void *)(v9 + 16);
        unint64_t v10 = *(void *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v9 = v14;
        }
        *(void *)(v9 + 16) = v11 + 1;
        *(void *)(v9 + 8 * v11 + 32) = v12;
      }
      if (v5 == ++v8) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_14:
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t *a2, unsigned __int8 a3, uint64_t a4)
{
  void (*v16)(void *__return_ptr, void *, double *, uint64_t, uint64_t);
  double v17;
  double v18;
  uint64_t v19;
  void (*v20)(double *__return_ptr, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  long long v44;
  double v45[3];
  void __dst[36];
  void __src[37];
  uint64_t v48;

  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v6 = 0;
  v41 = a1 + 32;
  unint64_t v39 = (char)a3;
  uint64_t v40 = a3;
  v37 = MEMORY[0x1E4FBC860];
  unint64_t v38 = a3;
LABEL_3:
  if (v6 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v6;
  }
  stat v43 = v7;
  while (2)
  {
    if (v6 == v43) {
      goto LABEL_54;
    }
    unint64_t v8 = v4;
    int v9 = a3;
    double v10 = *(double *)(v41 + 8 * v6);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    __dst[0] = qword_18218CA38[v39];
    if (v10 <= 1.59271755e13) {
      double v13 = v10;
    }
    else {
      double v13 = 1.59271755e13;
    }
    double v14 = fmax(v13, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    v45[0] = v14;
    uint64_t v16 = *(void (**)(void *__return_ptr, void *, double *, uint64_t, uint64_t))(v12 + 192);
    swift_unknownObjectRetain();
    v16(__src, __dst, v45, ObjectType, v12);
    if (v9 == 14)
    {
      __src[0] = v11;
      __src[1] = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v17 = *(double *)&__src[2];
      if (__src[2])
      {
        BOOL v18 = *(double *)&__src[3];
        __dst[0] = __src[2];
        __dst[1] = __src[3];
        uint64_t v19 = swift_getObjectType();
        double v20 = *(void (**)(double *__return_ptr, uint64_t, uint64_t))(v12 + 48);
        swift_unknownObjectRetain();
        v20(v45, v19, v12);
        v44 = *(_OWORD *)v45;
        LOBYTE(v20) = specialized static TimeZone.== infix(_:_:)((uint64_t)__dst, (uint64_t)&v44);
        swift_unknownObjectRelease();
        if (v20)
        {
          swift_unknownObjectRelease();
        }
        else
        {
          __dst[0] = 0;
          __dst[1] = 0;
          v45[0] = v17;
          v45[1] = v18;
          uint64_t v21 = (*(uint64_t (**)(void *, double *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v12 + 112))(__dst, v45, 0, 1, 0, 1, v19, v12);
          uint64_t v23 = v22;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          __src[0] = v21;
          __src[1] = v23;
        }
      }
    }
    ++v6;
    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    swift_unknownObjectRelease();
    uint64_t v24 = 0;
    int64_t v26 = &__dst[5];
    v25 = &__dst[4];
    switch(v40)
    {
      case 1:
        int64_t v26 = &__dst[7];
        v25 = &__dst[6];
        goto LABEL_34;
      case 2:
        int64_t v26 = &__dst[9];
        v25 = &__dst[8];
        goto LABEL_34;
      case 3:
        int64_t v26 = &__dst[11];
        v25 = &__dst[10];
        goto LABEL_34;
      case 4:
        int64_t v26 = &__dst[15];
        v25 = &__dst[14];
        goto LABEL_34;
      case 5:
        int64_t v26 = &__dst[17];
        v25 = &__dst[16];
        goto LABEL_34;
      case 6:
        int64_t v26 = &__dst[19];
        v25 = &__dst[18];
        goto LABEL_34;
      case 7:
        int64_t v26 = &__dst[23];
        v25 = &__dst[22];
        goto LABEL_34;
      case 8:
        int64_t v26 = &__dst[25];
        v25 = &__dst[24];
        goto LABEL_34;
      case 9:
        int64_t v26 = &__dst[27];
        v25 = &__dst[26];
        goto LABEL_34;
      case 10:
        int64_t v26 = &__dst[31];
        v25 = &__dst[30];
        goto LABEL_34;
      case 11:
        int64_t v26 = &__dst[33];
        v25 = &__dst[32];
        goto LABEL_34;
      case 12:
        int64_t v26 = &__dst[35];
        v25 = &__dst[34];
        goto LABEL_34;
      case 13:
        int64_t v26 = &__dst[21];
        v25 = &__dst[20];
        goto LABEL_34;
      case 14:
      case 15:
      case 16:
        uint64_t v27 = *(void *)(a4 + 16);
        if (!v27) {
          goto LABEL_7;
        }
        goto LABEL_38;
      case 17:
        int64_t v26 = &__dst[13];
        v25 = &__dst[12];
        goto LABEL_34;
      default:
LABEL_34:
        uint64_t v28 = *v25;
        if (*(unsigned char *)v26) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v28;
        }
        uint64_t v27 = *(void *)(a4 + 16);
        if (!v27) {
          goto LABEL_7;
        }
LABEL_38:
        if (*(void *)(a4 + 32) == v24) {
          goto LABEL_45;
        }
        if (v27 == 1) {
          goto LABEL_7;
        }
        unint64_t v29 = 5;
        break;
    }
    do
    {
      uint64_t v30 = v29 - 3;
      if (__OFADD__(v29 - 4, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        JUMPOUT(0x181C51544);
      }
      if (*(void *)(a4 + 8 * v29) == v24)
      {
LABEL_45:
        size_t v31 = v37;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v48 = v37;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1);
          size_t v31 = v48;
        }
        a3 = v38;
        unint64_t v4 = v8;
        uint64_t v34 = *(void *)(v31 + 16);
        BOOL v33 = *(void *)(v31 + 24);
        uint64_t v35 = v31;
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          unint64_t v4 = v8;
          a3 = v38;
          uint64_t v35 = v48;
        }
        *(void *)(v35 + 16) = v34 + 1;
        v37 = v35;
        *(double *)(v35 + 8 * v34 + 32) = v10;
        if (v6 == v4) {
          return v37;
        }
        goto LABEL_3;
      }
      ++v29;
    }
    while (v30 != v27);
LABEL_7:
    unint64_t v4 = v8;
    a3 = v38;
    if (v6 != v8) {
      continue;
    }
    return v37;
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, double *a2)
{
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = result + 32;
  uint64_t v6 = MEMORY[0x1E4FBC860];
LABEL_2:
  if (v3 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  while (1)
  {
    if (v4 == v3) {
      return v6;
    }
    if (v7 == v3) {
      break;
    }
    double v8 = *(double *)(v5 + 8 * v3++);
    if (v8 >= *a2)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      }
      unint64_t v10 = *(void *)(v6 + 16);
      unint64_t v9 = *(void *)(v6 + 24);
      if (v10 >= v9 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v6 + 16) = v10 + 1;
      *(double *)(v6 + 8 * v10 + 32) = v8;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  double v8 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v26 = *(void *)(a1 + 8 * v7 + 32);
    closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((double *)&v26, a2, a3, a4, &v25);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
    uint64_t v9 = v25;
    uint64_t v10 = *(void *)(v25 + 16);
    int64_t v11 = v8[2];
    int64_t v12 = v11 + v10;
    if (__OFADD__(v11, v10)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= v8[3] >> 1)
    {
      if (*(void *)(v9 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= v12) {
        int64_t v14 = v11 + v10;
      }
      else {
        int64_t v14 = v11;
      }
      double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v14, 1, v8);
      if (*(void *)(v9 + 16))
      {
LABEL_15:
        uint64_t v15 = v8[2];
        if ((v8[3] >> 1) - v15 < v10) {
          goto LABEL_30;
        }
        uint64_t v16 = &v8[v15 + 4];
        if (v9 + 32 < (unint64_t)&v16[v10] && (unint64_t)v16 < v9 + 32 + 8 * v10) {
          goto LABEL_32;
        }
        memcpy(v16, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          uint64_t v18 = v8[2];
          BOOL v19 = __OFADD__(v18, v10);
          uint64_t v20 = v18 + v10;
          if (v19) {
            goto LABEL_31;
          }
          v8[2] = v20;
        }
        goto LABEL_4;
      }
    }
    if (v10) {
      goto LABEL_29;
    }
LABEL_4:
    ++v7;
    swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a2);
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  double v8 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    *(Foundation::Date *)&v26._time = *(Foundation::Date *)(a1 + 8 * v7 + 32);
    closure #2 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)(&v26._time, a2, a3, a4, &v25, v26);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
    uint64_t v9 = v25;
    uint64_t v10 = *(void *)(v25 + 16);
    int64_t v11 = v8[2];
    int64_t v12 = v11 + v10;
    if (__OFADD__(v11, v10)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= v8[3] >> 1)
    {
      if (*(void *)(v9 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= v12) {
        int64_t v14 = v11 + v10;
      }
      else {
        int64_t v14 = v11;
      }
      double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v14, 1, v8);
      if (*(void *)(v9 + 16))
      {
LABEL_15:
        uint64_t v15 = v8[2];
        if ((v8[3] >> 1) - v15 < v10) {
          goto LABEL_30;
        }
        uint64_t v16 = &v8[v15 + 4];
        if (v9 + 32 < (unint64_t)&v16[v10] && (unint64_t)v16 < v9 + 32 + 8 * v10) {
          goto LABEL_32;
        }
        memcpy(v16, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          uint64_t v18 = v8[2];
          BOOL v19 = __OFADD__(v18, v10);
          uint64_t v20 = v18 + v10;
          if (v19) {
            goto LABEL_31;
          }
          v8[2] = v20;
        }
        goto LABEL_4;
      }
    }
    if (v10) {
      goto LABEL_29;
    }
LABEL_4:
    ++v7;
    swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule((uint64_t)a2);
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of Calendar.RecurrenceRule(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Calendar.RecurrenceRule(uint64_t a1)
{
  return a1;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 8 * v6 + 32);
    closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)((double *)&v24, a2, a3, &v23);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    uint64_t v8 = v23;
    uint64_t v9 = *(void *)(v23 + 16);
    int64_t v10 = v7[2];
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v11 <= v7[3] >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v10 <= v11) {
        int64_t v13 = v10 + v9;
      }
      else {
        int64_t v13 = v10;
      }
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v13, 1, v7);
      if (*(void *)(v8 + 16))
      {
LABEL_15:
        uint64_t v14 = v7[2];
        if ((v7[3] >> 1) - v14 < v9) {
          goto LABEL_30;
        }
        uint64_t v15 = &v7[v14 + 4];
        if (v8 + 32 < (unint64_t)&v15[v9] && (unint64_t)v15 < v8 + 32 + 8 * v9) {
          goto LABEL_32;
        }
        memcpy(v15, (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          uint64_t v17 = v7[2];
          BOOL v18 = __OFADD__(v17, v9);
          uint64_t v19 = v17 + v9;
          if (v18) {
            goto LABEL_31;
          }
          v7[2] = v19;
        }
        goto LABEL_4;
      }
    }
    if (v9) {
      goto LABEL_29;
    }
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease();
    if (v4 == v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a2);
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    closure #2 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(a2, a3, &v25, a4, a5);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v11;
    }
    uint64_t v12 = v25;
    uint64_t v13 = *(void *)(v25 + 16);
    int64_t v14 = v11[2];
    int64_t v15 = v14 + v13;
    if (__OFADD__(v14, v13)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v15 <= v11[3] >> 1)
    {
      if (*(void *)(v12 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v14 <= v15) {
        int64_t v17 = v14 + v13;
      }
      else {
        int64_t v17 = v14;
      }
      int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v17, 1, v11);
      if (*(void *)(v12 + 16))
      {
LABEL_15:
        uint64_t v18 = v11[2];
        if ((v11[3] >> 1) - v18 < v13) {
          goto LABEL_30;
        }
        uint64_t v19 = &v11[v18 + 4];
        if (v12 + 32 < (unint64_t)&v19[v13] && (unint64_t)v19 < v12 + 32 + 8 * v13) {
          goto LABEL_32;
        }
        memcpy(v19, (const void *)(v12 + 32), 8 * v13);
        if (v13)
        {
          uint64_t v21 = v11[2];
          BOOL v22 = __OFADD__(v21, v13);
          uint64_t v23 = v21 + v13;
          if (v22) {
            goto LABEL_31;
          }
          v11[2] = v23;
        }
        goto LABEL_4;
      }
    }
    if (v13) {
      goto LABEL_29;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v11;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a3);
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, long long *a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = *(void *)(a2 + 272);
  int v62 = *(unsigned __int8 *)(a2 + 280);
  uint64_t v50 = *(void *)(a2 + 256);
  int v61 = *(unsigned __int8 *)(a2 + 264);
  uint64_t v49 = *(void *)(a2 + 240);
  char v48 = *(unsigned char *)(a2 + 248);
  uint64_t v47 = *(void *)(a2 + 224);
  char v46 = *(unsigned char *)(a2 + 232);
  uint64_t v45 = *(void *)(a2 + 208);
  char v44 = *(unsigned char *)(a2 + 216);
  uint64_t v43 = *(void *)(a2 + 192);
  char v42 = *(unsigned char *)(a2 + 200);
  uint64_t v41 = *(void *)(a2 + 176);
  char v40 = *(unsigned char *)(a2 + 184);
  uint64_t v39 = *(void *)(a2 + 160);
  char v38 = *(unsigned char *)(a2 + 168);
  uint64_t v37 = *(void *)(a2 + 144);
  char v36 = *(unsigned char *)(a2 + 152);
  uint64_t v35 = *(void *)(a2 + 128);
  char v34 = *(unsigned char *)(a2 + 136);
  uint64_t v33 = *(void *)(a2 + 112);
  char v32 = *(unsigned char *)(a2 + 120);
  uint64_t v31 = *(void *)(a2 + 96);
  char v30 = *(unsigned char *)(a2 + 104);
  uint64_t v29 = *(void *)(a2 + 80);
  char v28 = *(unsigned char *)(a2 + 88);
  uint64_t v27 = *(void *)(a2 + 48);
  long long v60 = *a3;
  char v25 = *(unsigned char *)(a2 + 56);
  char v26 = *((unsigned char *)a3 + 16);
  uint64_t v24 = *(void *)(a2 + 32);
  char v23 = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)a2;
  uint64_t v9 = (unsigned char *)(swift_bridgeObjectRetain() + 40);
  uint64_t v10 = v4 - 1;
  int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v19 = v7;
  while (1)
  {
    uint64_t v12 = *((void *)v9 - 1);
    BOOL v13 = v12 == 0x7FFFFFFFFFFFFFFFLL;
    if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v12 = 0;
    }
    __src[8] = v12;
    char v14 = v13;
    LOBYTE(__src[9]) = v14;
    BYTE1(__src[35]) = *v9;
    __src[0] = v20;
    __src[1] = v8;
    __src[2] = v22;
    __src[3] = v21;
    __src[4] = v24;
    LOBYTE(__src[5]) = v23;
    __src[6] = v27;
    LOBYTE(__src[7]) = v25;
    __src[10] = v29;
    LOBYTE(__src[11]) = v28;
    __src[12] = v31;
    LOBYTE(__src[13]) = v30;
    __src[14] = v33;
    LOBYTE(__src[15]) = v32;
    __src[16] = v35;
    LOBYTE(__src[17]) = v34;
    __src[18] = v37;
    LOBYTE(__src[19]) = v36;
    __src[20] = v39;
    LOBYTE(__src[21]) = v38;
    __src[22] = v41;
    LOBYTE(__src[23]) = v40;
    __src[24] = v43;
    LOBYTE(__src[25]) = v42;
    __src[26] = v45;
    LOBYTE(__src[27]) = v44;
    __src[28] = v47;
    LOBYTE(__src[29]) = v46;
    __src[30] = v49;
    LOBYTE(__src[31]) = v48;
    __src[32] = v50;
    LOBYTE(__src[33]) = v61;
    __src[34] = v7;
    LOBYTE(__src[35]) = v62;
    uint64_t v57 = 0;
    char v58 = 1;
    long long v56 = v60;
    double v55 = a4;
    memcpy(__dst, __src, 0x11AuLL);
    char v53 = v26;
    char v52 = 0;
    char v51 = 0;
    outlined retain of DateComponents(a2);
    specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v55, __dst, &v53, &v52, &v51, &v56, &v57);
    outlined release of DateComponents((uint64_t)__src);
    if ((v58 & 1) == 0)
    {
      uint64_t v15 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      if (v17 >= v16 >> 1) {
        int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v11);
      }
      v11[2] = v17 + 1;
      v11[v17 + 4] = v15;
      uint64_t v7 = v19;
    }
    if (!v10) {
      break;
    }
    v9 += 16;
    --v10;
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t outlined release of Calendar.DatesByMatching.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t sub_181C523B8()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_181C523C8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined release of Calendar.DatesByRecurring(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Range<Date>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Calendar.DatesByRecurring(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Calendar.DatesByRecurring.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t destroy for Calendar.DatesByRecurring.Iterator()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  uint64_t v28 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v28;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  long long v8 = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v8;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  uint64_t v9 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v9;
  uint64_t v10 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v10;
  uint64_t v11 = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 296) = v11;
  uint64_t v12 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v12;
  uint64_t v13 = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 328) = v13;
  uint64_t v14 = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = v14;
  uint64_t v15 = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = v15;
  uint64_t v16 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v16;
  uint64_t v17 = *(void *)(a2 + 392);
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(void *)(a1 + 392) = v17;
  uint64_t v18 = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 408) = v18;
  uint64_t v19 = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 424) = v19;
  uint64_t v20 = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = v20;
  uint64_t v21 = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  *(void *)(a1 + 456) = v21;
  uint64_t v22 = *(void *)(a2 + 472);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(void *)(a1 + 472) = v22;
  uint64_t v23 = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(void *)(a1 + 488) = v23;
  uint64_t v24 = *(void *)(a2 + 504);
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  *(void *)(a1 + 504) = v24;
  uint64_t v25 = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(void *)(a1 + 520) = v25;
  uint64_t v26 = *(void *)(a2 + 536);
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  *(void *)(a1 + 536) = v26;
  *(unsigned char *)(a1 + 545) = *(unsigned char *)(a2 + 545);
  *(unsigned char *)(a1 + 546) = *(unsigned char *)(a2 + 546);
  *(unsigned char *)(a1 + 547) = *(unsigned char *)(a2 + 547);
  *(unsigned char *)(a1 + 548) = *(unsigned char *)(a2 + 548);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(unsigned char *)(a1 + 560) = *(unsigned char *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 547);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v7;
  uint64_t v8 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  *(unsigned char *)(a1 + 179) = *(unsigned char *)(a2 + 179);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(unsigned char *)(a1 + 181) = *(unsigned char *)(a2 + 181);
  *(unsigned char *)(a1 + 182) = *(unsigned char *)(a2 + 182);
  *(unsigned char *)(a1 + 183) = *(unsigned char *)(a2 + 183);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v9 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  long long v10 = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v11 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 256) = v11;
  uint64_t v12 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 272) = v12;
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 288) = v13;
  uint64_t v14 = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 296) = v14;
  uint64_t v15 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v15;
  uint64_t v16 = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 328) = v16;
  uint64_t v17 = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = v17;
  uint64_t v18 = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = v18;
  uint64_t v19 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v19;
  uint64_t v20 = *(void *)(a2 + 392);
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(void *)(a1 + 392) = v20;
  uint64_t v21 = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 408) = v21;
  uint64_t v22 = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 424) = v22;
  uint64_t v23 = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = v23;
  uint64_t v24 = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  *(void *)(a1 + 456) = v24;
  uint64_t v25 = *(void *)(a2 + 472);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(void *)(a1 + 472) = v25;
  uint64_t v26 = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(void *)(a1 + 488) = v26;
  uint64_t v27 = *(void *)(a2 + 504);
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  *(void *)(a1 + 504) = v27;
  uint64_t v28 = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(void *)(a1 + 520) = v28;
  uint64_t v29 = *(void *)(a2 + 536);
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  *(void *)(a1 + 536) = v29;
  *(unsigned char *)(a1 + 545) = *(unsigned char *)(a2 + 545);
  *(unsigned char *)(a1 + 546) = *(unsigned char *)(a2 + 546);
  *(unsigned char *)(a1 + 547) = *(unsigned char *)(a2 + 547);
  *(unsigned char *)(a1 + 548) = v4[1];
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(unsigned char *)(a1 + 560) = v4[13];
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(unsigned char *)(a1 + 576) = v4[29];
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy608_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x260uLL);
}

uint64_t assignWithTake for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 547);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_unknownObjectRelease();
  uint64_t v9 = *(void *)(a2 + 264);
  uint64_t v10 = *(void *)(a2 + 272);
  *(void *)(a1 + 256) = v8;
  *(void *)(a1 + 264) = v9;
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(a2 + 280);
  uint64_t v12 = *(void *)(a2 + 288);
  *(void *)(a1 + 272) = v10;
  *(void *)(a1 + 280) = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = v12;
  *(void *)(a1 + 296) = v13;
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  uint64_t v14 = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = v14;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  uint64_t v15 = *(void *)(a2 + 504);
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  *(void *)(a1 + 504) = v15;
  uint64_t v16 = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(void *)(a1 + 520) = v16;
  uint64_t v17 = *(void *)(a2 + 536);
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  *(void *)(a1 + 536) = v17;
  *(unsigned char *)(a1 + 545) = *(unsigned char *)(a2 + 545);
  *(unsigned char *)(a1 + 546) = *(unsigned char *)(a2 + 546);
  *(unsigned char *)(a1 + 547) = *(unsigned char *)(a2 + 547);
  *(unsigned char *)(a1 + 548) = v4[1];
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(unsigned char *)(a1 + 560) = v4[13];
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(unsigned char *)(a1 + 576) = v4[29];
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByRecurring.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 608)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByRecurring.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 600) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 608) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 608) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByRecurring.Iterator()
{
  return &type metadata for Calendar.DatesByRecurring.Iterator;
}

unsigned char *storeEnumTagSinglePayload for ComponentAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C532E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentAction()
{
  return &type metadata for ComponentAction;
}

unint64_t lazy protocol witness table accessor for type ComponentAction and conformance ComponentAction()
{
  unint64_t result = lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction;
  if (!lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction);
  }
  return result;
}

uint64_t PredicateExpressions.Conditional.test.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Conditional.trueBranch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.Conditional.falseBranch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

uint64_t PredicateExpressions.Conditional.init(test:trueBranch:falseBranch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for PredicateExpressions.Conditional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 72), a3, a6);
}

void *PredicateExpressions.Conditional.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *a1;
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t *, void))(a2[5] + 16))(&v7, &v6, a2[2]);
  if (!v2)
  {
    uint64_t v6 = v4;
    if (v7 == 1) {
      return (void *)(*(uint64_t (**)(uint64_t *, void))(a2[6] + 16))(&v6, a2[3]);
    }
    else {
      return (void *)(*(uint64_t (**)(uint64_t *, void))(a2[7] + 16))(&v6, a2[4]);
    }
  }
  return result;
}

void *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Conditional<A, B, C>(uint64_t *a1, void *a2)
{
  return PredicateExpressions.Conditional.evaluate(_:)(a1, a2);
}

uint64_t static PredicateExpressions.build_Conditional<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for PredicateExpressions.Conditional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(a7 + *(int *)(v12 + 72), a3, a6);
}

uint64_t PredicateExpressions.Conditional.description.getter()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x80000001823AD4A0;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x724265757274202CLL;
  v1._object = (void *)0xEE00203A68636E61;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x4265736C6166202CLL;
  v2._object = (void *)0xEF203A68636E6172;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t PredicateExpressions.Conditional<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.Conditional<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v44 = a5;
  uint64_t v38 = a6;
  uint64_t v37 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v12);
  char v40 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v43 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45[0] = v17;
  v45[1] = v18;
  v45[2] = v19;
  uint64_t v46 = v20;
  uint64_t v47 = v21;
  uint64_t v48 = v22;
  uint64_t v23 = type metadata accessor for PredicateExpressions.Conditional();
  uint64_t v36 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v34 - v24;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v26 = (uint64_t)v49;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v26) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v34 = a4;
  uint64_t v35 = v25;
  uint64_t v49 = a1;
  uint64_t v27 = v42;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v45, v46);
  uint64_t v28 = v43;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v44 = a2;
  v29(v35, v28, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v45, v46);
  char v30 = v40;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v35[*(int *)(v23 + 68)], v30, a3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v45, v46);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v31 = v35;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v35[*(int *)(v23 + 72)], v39, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  uint64_t v32 = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v38, v31, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v31, v23);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Conditional<A, B, C>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Conditional<>.init(from:)(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Conditional<A, B, C>(void *a1)
{
  return PredicateExpressions.Conditional<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Conditional(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Conditional(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x181C545C0);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t static NSTextCheckingType.allSystemTypes.getter()
{
  return 0xFFFFFFFFLL;
}

unint64_t static NSTextCheckingType.allCustomTypes.getter()
{
  return 0xFFFFFFFF00000000;
}

uint64_t static NSTextCheckingType.allTypes.getter()
{
  return -1;
}

Swift::Void __swiftcall NSDecimal.add(_:)(NSDecimal *a1)
{
  specialized static NSDecimal.+= infix(_:_:)(v3, (unint64_t)a1, v1, v2);
}

Swift::Void __swiftcall NSDecimal.subtract(_:)(NSDecimal *a1)
{
  __int16 v4 = v2;
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  __int16 v132 = *((_WORD *)v3 + 2);
  unint64_t v5 = (unint64_t)a1 >> 32;
  unint64_t v6 = (unint64_t)a1 >> 48;
  __int16 v115 = *((_WORD *)v3 + 3);
  int v7 = (int)a1;
  unint64_t v8 = v1 >> 16;
  int v118 = *v3;
  __int16 v120 = *((_WORD *)v3 + 4);
  unint64_t v9 = HIDWORD(v1);
  unint64_t v10 = HIWORD(v1);
  __int16 v130 = *((_WORD *)v3 + 5);
  LOWORD(v11) = v1;
  unsigned int v12 = HIWORD(v2);
  __int16 v128 = *((_WORD *)v3 + 6);
  __int16 v126 = *((_WORD *)v3 + 7);
  __int16 v124 = *((_WORD *)v3 + 8);
  __int16 v122 = *((_WORD *)v3 + 9);
  int v143 = (int)a1;
  LOWORD(v144) = WORD2(a1);
  WORD1(v144) = HIWORD(a1);
  HIDWORD(v144) = v1;
  LOWORD(v145) = WORD2(v1);
  WORD1(v145) = HIWORD(v1);
  HIDWORD(v145) = v2;
  *(void *)&long long v141 = a1;
  *((void *)&v141 + 1) = v1;
  unsigned int v142 = v2;
  if (_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v7;
    WORD2(v141) = v5;
    WORD3(v141) = v6;
    WORD4(v141) = v11;
    WORD5(v141) = v8;
    WORD6(v141) = v9;
    HIWORD(v141) = v10;
    LOWORD(v142) = v4;
    HIWORD(v142) = v12;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v141);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v143);
    int v7 = v143;
    LOWORD(v5) = v144;
    LOWORD(v6) = WORD1(v144);
    LOWORD(v11) = WORD2(v144);
    LOWORD(v8) = HIWORD(v144);
    LOWORD(v9) = v145;
    LOWORD(v10) = WORD1(v145);
    __int16 v4 = WORD2(v145);
    LOWORD(v14) = HIWORD(v145);
  }
  else
  {
    LOWORD(v14) = v12;
  }
  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  LOWORD(v15) = v115;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v118;
    WORD2(v141) = v132;
    WORD3(v141) = v115;
    WORD4(v141) = v120;
    WORD5(v141) = v130;
    WORD6(v141) = v128;
    HIWORD(v141) = v126;
    LOWORD(v142) = v124;
    HIWORD(v142) = v122;
    if (_So9NSDecimala__isNegative_getter(&v141)) {
      goto LABEL_20;
    }
  }
  LODWORD(v141) = v7;
  WORD2(v141) = v5;
  WORD3(v141) = v6;
  WORD4(v141) = v11;
  WORD5(v141) = v8;
  WORD6(v141) = v9;
  HIWORD(v141) = v10;
  LOWORD(v142) = v4;
  HIWORD(v142) = v14;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v7;
    WORD2(v141) = v5;
    WORD3(v141) = v6;
    WORD4(v141) = v11;
    WORD5(v141) = v8;
    WORD6(v141) = v9;
    HIWORD(v141) = v10;
    LOWORD(v142) = v4;
    HIWORD(v142) = v14;
    if (_So9NSDecimala__isNegative_getter(&v141)) {
      goto LABEL_20;
    }
  }
  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LOWORD(v15) = v6;
    LOWORD(v6) = v8;
    uint64_t v39 = v114;
    LODWORD(v8) = v7;
    LOWORD(v7) = v4;
    goto LABEL_25;
  }
  LODWORD(v141) = v7;
  WORD2(v141) = v5;
  WORD3(v141) = v6;
  WORD4(v141) = v11;
  WORD5(v141) = v8;
  WORD6(v141) = v9;
  HIWORD(v141) = v10;
  LOWORD(v142) = v4;
  HIWORD(v142) = v14;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v8) = v118;
    LOWORD(v11) = v120;
    LOWORD(v7) = v124;
    LOWORD(v14) = v122;
    LOWORD(v6) = v130;
    LOWORD(v5) = v132;
    uint64_t v39 = v114;
    LOWORD(v10) = v126;
    LOWORD(v9) = v128;
    goto LABEL_25;
  }
  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  LODWORD(v139) = v7;
  WORD2(v139) = v5;
  WORD3(v139) = v6;
  WORD4(v139) = v11;
  WORD5(v139) = v8;
  WORD6(v139) = v9;
  HIWORD(v139) = v10;
  LOWORD(v140) = v4;
  HIWORD(v140) = v14;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v141, (uint64_t)&v139);
  uint64_t v125 = WORD5(v141);
  uint64_t v127 = v141;
  long long v137 = v141;
  uint64_t v116 = WORD2(v141);
  uint64_t v131 = WORD4(v141);
  uint64_t v133 = WORD3(v141);
  uint64_t v121 = HIWORD(v141);
  uint64_t v123 = WORD6(v141);
  int v119 = (unsigned __int16)v142;
  unsigned int v138 = v142;
  int v129 = HIWORD(v142);
  int v16 = _So9NSDecimala__length_getter(&v137);
  unint64_t v8 = v139;
  unint64_t v5 = WORD2(v139);
  uint64_t v15 = WORD3(v139);
  uint64_t v11 = WORD4(v139);
  unint64_t v6 = WORD5(v139);
  unint64_t v9 = WORD6(v139);
  unint64_t v10 = HIWORD(v139);
  int v7 = (unsigned __int16)v140;
  int v14 = HIWORD(v140);
  if (!v16) {
    goto LABEL_22;
  }
  long long v137 = v139;
  unsigned int v138 = v140;
  if (!_So9NSDecimala__length_getter(&v137))
  {
    LOWORD(v6) = v125;
    LODWORD(v8) = v127;
    LOWORD(v5) = v116;
    LOWORD(v11) = v131;
    LOWORD(v15) = v133;
    LOWORD(v10) = v121;
    LOWORD(v9) = v123;
    LOWORD(v7) = v119;
    LOWORD(v14) = v129;
    goto LABEL_22;
  }
  LODWORD(v137) = v127;
  WORD2(v137) = v116;
  WORD3(v137) = v133;
  WORD4(v137) = v131;
  WORD5(v137) = v125;
  WORD6(v137) = v123;
  HIWORD(v137) = v121;
  LOWORD(v138) = v119;
  HIWORD(v138) = v129;
  LODWORD(v135) = v127;
  WORD2(v135) = v116;
  *(_DWORD *)((char *)&v135 + 6) = __PAIR32__(v131, v133);
  WORD5(v135) = v125;
  HIDWORD(v135) = __PAIR32__(v121, v123);
  LOWORD(v136) = v119;
  HIWORD(v136) = v129;
  int v113 = _So9NSDecimala__isNegative_getter(&v135);
  LODWORD(v135) = v8;
  WORD2(v135) = v5;
  WORD3(v135) = v15;
  WORD4(v135) = v11;
  WORD5(v135) = v6;
  WORD6(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  HIWORD(v136) = v14;
  if (v113 == _So9NSDecimala__isNegative_getter(&v135))
  {
    LODWORD(v135) = v127;
    WORD2(v135) = v116;
    WORD3(v135) = v133;
    WORD4(v135) = v131;
    WORD5(v135) = v125;
    WORD6(v135) = v123;
    HIWORD(v135) = v121;
    LOWORD(v136) = v119;
    HIWORD(v136) = v129;
    uint64_t v17 = _So9NSDecimala__isNegative_getter(&v135);
    _So9NSDecimala__isNegative_setter(v17, &v137);
    NSDecimal.asVariableLengthInteger()(v127 | (v116 << 32) | (v133 << 48), v131 | (v125 << 16) | (v123 << 32) | (v121 << 48), v119 | (v129 << 16));
    uint64_t v19 = v18;
    NSDecimal.asVariableLengthInteger()(v8 | (v5 << 32) | (v15 << 48), v11 | (v6 << 16) | (v9 << 32) | (v10 << 48), v7 | (v14 << 16));
    uint64_t v22 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v19, v20, 9, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v23 = *(void *)(v22 + 16);
    if (v23 <= 8)
    {
      v25._rawValue = (void *)v22;
LABEL_31:
      _So9NSDecimala__length_setter(v23, &v137);
      NSDecimal.copyVariableLengthInteger(_:)(v25);
      uint64_t v37 = v45;
      swift_bridgeObjectRelease();
      if (v45) {
        goto LABEL_21;
      }
      goto LABEL_149;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v22, 0);
    v25._rawValue = v24;
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    int v28 = v137;
    __int16 v29 = WORD2(v137);
    __int16 v30 = WORD3(v137);
    __int16 v31 = WORD4(v137);
    __int16 v32 = WORD5(v137);
    __int16 v33 = WORD6(v137);
    __int16 v34 = HIWORD(v137);
    __int16 v35 = v138;
    long long v135 = v137;
    unsigned int v136 = v138;
    __int16 v134 = HIWORD(v138);
    int v36 = _So9NSDecimala__exponent_getter((char *)&v135);
    if (v27 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v27 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v36, v27))
        {
          if (v36 + (int)v27 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v37 = (void *)swift_allocError();
            *uint64_t v38 = 0;
            swift_willThrow();
            goto LABEL_21;
          }
          LODWORD(v135) = v28;
          WORD2(v135) = v29;
          WORD3(v135) = v30;
          WORD4(v135) = v31;
          WORD5(v135) = v32;
          WORD6(v135) = v33;
          HIWORD(v135) = v34;
          LOWORD(v136) = v35;
          HIWORD(v136) = v134;
          int v83 = _So9NSDecimala__exponent_getter((char *)&v135);
          BOOL v84 = __OFADD__(v83, v27);
          uint64_t v85 = (v83 + v27);
          if (!v84)
          {
            _So9NSDecimala__exponent_setter(v85, &v137);
            unint64_t v23 = *((void *)v25._rawValue + 2);
            if (HIDWORD(v23)) {
              goto LABEL_163;
            }
            goto LABEL_31;
          }
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          goto LABEL_163;
        }
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  unint64_t v110 = v131 | (v125 << 16) | (v123 << 32) | (v121 << 48);
  unint64_t v111 = v127 | (v116 << 32) | (v133 << 48);
  unsigned int v109 = v119 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v111, v110, v109);
  uint64_t v41 = v40;
  unint64_t v107 = v11 | (v6 << 16) | (v9 << 32) | (v10 << 48);
  unint64_t v108 = v8 | (v5 << 32) | (v15 << 48);
  unsigned int v106 = v7 | (v14 << 16);
  NSDecimal.asVariableLengthInteger()(v108, v107, v106);
  uint64_t v112 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = v112;
  __int16 v44 = v133;
  if (v112 == -1)
  {
    __int16 v117 = v15;
    NSDecimal.asVariableLengthInteger()(v108, v107, v106);
    uint64_t v47 = v46;
    NSDecimal.asVariableLengthInteger()(v111, v110, v109);
    uint64_t v49 = v48;
    uint64_t v50 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v52 = v49;
    *(void *)(v50 + 32) = 0;
    char v53 = (_WORD *)(v50 + 32);
    *(void *)(v50 + 16) = 8;
    v54 = (unint64_t *)v50;
    *(void *)(v50 + 40) = 0;
    unint64_t v55 = *(void *)(v47 + 16);
    unint64_t v56 = *(void *)(v52 + 16);
    if (v56 >= v55) {
      uint64_t v57 = *(void *)(v47 + 16);
    }
    else {
      uint64_t v57 = *(void *)(v52 + 16);
    }
    __int16 v105 = v7;
    if (!v57)
    {
      if (!v55)
      {
        __int16 v62 = v117;
        if (v56)
        {
          unint64_t v61 = 0;
          LODWORD(v60) = 1;
          goto LABEL_91;
        }
        uint64_t v86 = 8;
        goto LABEL_100;
      }
      unint64_t v61 = 0;
      __int16 v62 = v117;
      goto LABEL_83;
    }
    uint64_t v58 = v47 + 32;
    unsigned int v59 = (*(unsigned __int16 *)(v47 + 32) | 0x10000) - *(unsigned __int16 *)(v52 + 32);
    LODWORD(v60) = HIWORD(v59);
    *char v53 = *(_WORD *)(v47 + 32) - *(_WORD *)(v52 + 32);
    unint64_t v61 = v57 - 1;
    if (!v61)
    {
      unint64_t v61 = 1;
      goto LABEL_56;
    }
    unsigned int v59 = v60 + *(unsigned __int16 *)(v47 + 34) - *(unsigned __int16 *)(v52 + 34) + 0xFFFF;
    LODWORD(v60) = HIWORD(v59);
    *(_WORD *)(v50 + 34) = v59;
    __int16 v62 = v117;
    if (v61 == 1)
    {
      unint64_t v61 = 2;
    }
    else
    {
      unsigned int v51 = *(unsigned __int16 *)(v52 + 36);
      unsigned int v59 = v60 + *(unsigned __int16 *)(v47 + 36) - v51 + 0xFFFF;
      LODWORD(v60) = HIWORD(v59);
      *(_WORD *)(v50 + 36) = v59;
      if (v61 == 2)
      {
        unint64_t v61 = 3;
      }
      else
      {
        unsigned int v59 = v60 + *(unsigned __int16 *)(v47 + 38) - *(unsigned __int16 *)(v52 + 38) + 0xFFFF;
        LODWORD(v60) = HIWORD(v59);
        *(_WORD *)(v50 + 38) = v59;
        if (v61 == 3)
        {
          unint64_t v61 = 4;
        }
        else
        {
          unsigned int v51 = *(unsigned __int16 *)(v52 + 40);
          unsigned int v59 = v60 + *(unsigned __int16 *)(v47 + 40) - v51 + 0xFFFF;
          LODWORD(v60) = HIWORD(v59);
          *(_WORD *)(v50 + 40) = v59;
          if (v61 == 4)
          {
            unint64_t v61 = 5;
          }
          else
          {
            unsigned int v59 = v60 + *(unsigned __int16 *)(v47 + 42) - *(unsigned __int16 *)(v52 + 42) + 0xFFFF;
            LODWORD(v60) = HIWORD(v59);
            *(_WORD *)(v50 + 42) = v59;
            if (v61 != 5)
            {
              unsigned int v51 = *(unsigned __int16 *)(v52 + 44);
              unsigned int v59 = v60 + *(unsigned __int16 *)(v47 + 44) - v51 + 0xFFFF;
              LODWORD(v60) = HIWORD(v59);
              *(_WORD *)(v50 + 44) = v59;
              if (v61 != 6) {
                goto LABEL_114;
              }
              unint64_t v61 = 7;
              goto LABEL_56;
            }
            unint64_t v61 = 6;
          }
        }
      }
    }
    while (1)
    {
      if (v61 >= v55) {
        goto LABEL_90;
      }
      if (!HIWORD(v59)) {
        break;
      }
LABEL_83:
      uint64_t v58 = v47 + 32;
      if (v61 <= v55) {
        unint64_t v60 = v55;
      }
      else {
        unint64_t v60 = v61;
      }
      while (v60 != v61)
      {
        if (v61 >= *(void *)(v50 + 16)) {
          goto LABEL_113;
        }
        v53[v61] = *(_WORD *)(v58 + 2 * v61);
        if ((uint64_t)++v61 >= (uint64_t)v55)
        {
          LODWORD(v60) = 1;
LABEL_90:
          if ((uint64_t)v61 < (uint64_t)v56)
          {
            while (1)
            {
LABEL_91:
              if (v61 >= v56) {
                goto LABEL_158;
              }
              unint64_t v55 = *(void *)(v50 + 16);
              if (v61 < v55) {
                break;
              }
LABEL_96:
              __break(1u);
LABEL_97:
              LODWORD(v60) = HIWORD(v51);
              unint64_t v61 = v55;
              if ((uint64_t)v55 >= (uint64_t)v56) {
                goto LABEL_98;
              }
            }
            unsigned int v89 = v60 + (*(unsigned __int16 *)(v52 + 32 + 2 * v61) ^ 0xFFFF);
            --v56;
            unint64_t v55 = v52 + 34;
            while (1)
            {
              LODWORD(v60) = HIWORD(v89);
              v53[v61] = v89;
              if (v56 == v61) {
                break;
              }
              unsigned int v89 = v60 + (*(unsigned __int16 *)(v55 + 2 * v61++) ^ 0xFFFF);
              if (v61 >= *(void *)(v50 + 16)) {
                goto LABEL_96;
              }
            }
          }
LABEL_98:
          if (!v60) {
            goto LABEL_105;
          }
          uint64_t v86 = *(void *)(v50 + 16);
          if (v86)
          {
LABEL_100:
            if (!v53[v86 - 1])
            {
              do
              {
                *(void *)(v50 + 16) = v86 - 1;
                if (v86 == 1) {
                  break;
                }
              }
              while (!*(unsigned __int16 *)(v50 + 28 + 2 * v86--));
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v91 = v54[2];
          if (!HIDWORD(v91))
          {
            _So9NSDecimala__length_setter(v91, &v137);
            LODWORD(v135) = v8;
            WORD2(v135) = v5;
            WORD3(v135) = v62;
            WORD4(v135) = v11;
            WORD5(v135) = v6;
            WORD6(v135) = v9;
            HIWORD(v135) = v10;
            LOWORD(v136) = v105;
            HIWORD(v136) = v14;
            uint64_t v92 = _So9NSDecimala__isNegative_getter(&v135);
            _So9NSDecimala__isNegative_setter(v92, &v137);
            v93._rawValue = v54;
            goto LABEL_146;
          }
LABEL_163:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_164:
          uint64_t v104 = v43;
          type metadata accessor for NSComparisonResult(0);
          *(void *)&long long v135 = v104;
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
          __break(1u);
          return;
        }
      }
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      int v95 = v60 + *(unsigned __int16 *)(v47 + 46) - *(unsigned __int16 *)(v52 + 46);
      unsigned int v59 = v95 + 0xFFFF;
      *(_WORD *)(v50 + 46) = v95 - 1;
      if (v61 != 7) {
        goto LABEL_161;
      }
      unsigned int v51 = v47;
      LODWORD(v60) = HIWORD(v59);
      unint64_t v61 = 8;
LABEL_56:
      __int16 v62 = v117;
    }
    while (v61 < *(void *)(v50 + 16))
    {
      int v88 = *(unsigned __int16 *)(v58 + 2 * v61);
      unsigned int v51 = v88 + 0xFFFF;
      v53[v61] = v88 - 1;
      if (v55 - 1 == v61) {
        goto LABEL_97;
      }
      ++v61;
      if (v88) {
        goto LABEL_83;
      }
    }
    goto LABEL_153;
  }
  if (!v112)
  {
    LODWORD(v8) = 0;
    LOWORD(v5) = 0;
    LOWORD(v15) = 0;
    LOWORD(v11) = 0;
    LOWORD(v6) = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v7) = 0;
    LOWORD(v14) = 0;
    goto LABEL_22;
  }
  if (v112 != 1) {
    goto LABEL_164;
  }
  NSDecimal.asVariableLengthInteger()(v111, v110, v109);
  uint64_t v64 = v63;
  NSDecimal.asVariableLengthInteger()(v108, v107, v106);
  uint64_t v66 = v65;
  uint64_t v67 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v69 = (unint64_t *)v67;
  *(void *)(v67 + 32) = 0;
  v70 = (_WORD *)(v67 + 32);
  *(void *)(v67 + 16) = 8;
  *(void *)(v67 + 40) = 0;
  unint64_t v71 = *(void *)(v64 + 16);
  unint64_t v72 = *(void *)(v66 + 16);
  if (v72 >= v71) {
    uint64_t v73 = *(void *)(v64 + 16);
  }
  else {
    uint64_t v73 = *(void *)(v66 + 16);
  }
  __int16 v74 = v131;
  __int16 v75 = v129;
  __int16 v77 = v125;
  int v76 = v127;
  if (v73)
  {
    unsigned int v78 = (*(unsigned __int16 *)(v64 + 32) | 0x10000) - *(unsigned __int16 *)(v66 + 32);
    int v79 = HIWORD(v78);
    _WORD *v70 = *(_WORD *)(v64 + 32) - *(_WORD *)(v66 + 32);
    uint64_t v80 = v73 - 1;
    __int16 v81 = v116;
    if (v80)
    {
      unsigned int v78 = v79 + *(unsigned __int16 *)(v64 + 34) - *(unsigned __int16 *)(v66 + 34) + 0xFFFF;
      int v79 = HIWORD(v78);
      *(_WORD *)(v67 + 34) = v78;
      if (v80 == 1)
      {
        unint64_t v82 = 2;
      }
      else
      {
        unsigned int v68 = *(unsigned __int16 *)(v66 + 36);
        unsigned int v78 = v79 + *(unsigned __int16 *)(v64 + 36) - v68 + 0xFFFF;
        int v79 = HIWORD(v78);
        *(_WORD *)(v67 + 36) = v78;
        if (v80 == 2)
        {
          unint64_t v82 = 3;
        }
        else
        {
          unsigned int v78 = v79 + *(unsigned __int16 *)(v64 + 38) - *(unsigned __int16 *)(v66 + 38) + 0xFFFF;
          int v79 = HIWORD(v78);
          *(_WORD *)(v67 + 38) = v78;
          if (v80 == 3)
          {
            unint64_t v82 = 4;
          }
          else
          {
            unsigned int v68 = *(unsigned __int16 *)(v66 + 40);
            unsigned int v78 = v79 + *(unsigned __int16 *)(v64 + 40) - v68 + 0xFFFF;
            int v79 = HIWORD(v78);
            *(_WORD *)(v67 + 40) = v78;
            if (v80 == 4)
            {
              unint64_t v82 = 5;
            }
            else
            {
              unsigned int v78 = v79 + *(unsigned __int16 *)(v64 + 42) - *(unsigned __int16 *)(v66 + 42) + 0xFFFF;
              int v79 = HIWORD(v78);
              *(_WORD *)(v67 + 42) = v78;
              if (v80 == 5)
              {
                unint64_t v82 = 6;
              }
              else
              {
                unsigned int v78 = v79 + *(unsigned __int16 *)(v64 + 44) - *(unsigned __int16 *)(v66 + 44) + 0xFFFF;
                int v79 = HIWORD(v78);
                unsigned int v68 = v67;
                *(_WORD *)(v67 + 44) = v78;
                if (v80 == 6)
                {
                  unint64_t v82 = 7;
                }
                else
                {
                  int v96 = v79 + *(unsigned __int16 *)(v64 + 46) - *(unsigned __int16 *)(v66 + 46);
                  unsigned int v78 = v96 + 0xFFFF;
                  *(_WORD *)(v67 + 46) = v96 - 1;
                  if (v80 != 7) {
                    goto LABEL_162;
                  }
                  int v79 = HIWORD(v78);
                  unint64_t v82 = 8;
                }
                v69 = (unint64_t *)v67;
                __int16 v81 = v116;
                __int16 v74 = v131;
                __int16 v44 = v133;
                __int16 v75 = v129;
                __int16 v77 = v125;
                int v76 = v127;
              }
            }
          }
        }
      }
    }
    else
    {
      unint64_t v82 = 1;
    }
    if (v82 >= v71) {
      goto LABEL_131;
    }
    if (!HIWORD(v78))
    {
      while (v82 < v69[2])
      {
        int v97 = *(unsigned __int16 *)(v64 + 32 + 2 * v82);
        unsigned int v68 = v97 + 0xFFFF;
        v70[v82] = v97 - 1;
        if (v71 - 1 == v82) {
          goto LABEL_138;
        }
        ++v82;
        if (v97) {
          goto LABEL_124;
        }
      }
      goto LABEL_154;
    }
  }
  else
  {
    __int16 v81 = v116;
    if (!v71)
    {
      if (v72)
      {
        unint64_t v82 = 0;
        int v79 = 1;
        goto LABEL_132;
      }
      uint64_t v87 = 8;
LABEL_141:
      if (!v70[v87 - 1])
      {
        do
        {
          v69[2] = v87 - 1;
          if (v87 == 1) {
            break;
          }
        }
        while (!*((unsigned __int16 *)v69 + v87-- + 14));
      }
LABEL_144:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v101 = v69[2];
      if (HIDWORD(v101)) {
        goto LABEL_163;
      }
      _So9NSDecimala__length_setter(v101, &v137);
      LODWORD(v135) = v76;
      WORD2(v135) = v81;
      WORD3(v135) = v44;
      WORD4(v135) = v74;
      WORD5(v135) = v77;
      WORD6(v135) = v123;
      HIWORD(v135) = v121;
      LOWORD(v136) = v119;
      HIWORD(v136) = v75;
      uint64_t v102 = _So9NSDecimala__isNegative_getter(&v135);
      _So9NSDecimala__isNegative_setter(v102, &v137);
      v93._rawValue = v69;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v93);
      if (v103)
      {
        uint64_t v37 = v103;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      swift_bridgeObjectRelease();
LABEL_149:
      _So9NSDecimala__isCompact_setter(&v137);
      NSDecimal.compact()();
      LODWORD(v8) = v137;
      LOWORD(v5) = WORD2(v137);
      LOWORD(v15) = WORD3(v137);
      LOWORD(v11) = WORD4(v137);
      LOWORD(v6) = WORD5(v137);
      LOWORD(v9) = WORD6(v137);
      LOWORD(v10) = HIWORD(v137);
      LOWORD(v7) = v138;
      LOWORD(v14) = HIWORD(v138);
      goto LABEL_22;
    }
    unint64_t v82 = 0;
  }
LABEL_124:
  if (v82 <= v71) {
    unint64_t v98 = v71;
  }
  else {
    unint64_t v98 = v82;
  }
  do
  {
    if (v98 == v82)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (v82 >= v69[2]) {
      goto LABEL_152;
    }
    v70[v82] = *(_WORD *)(v64 + 32 + 2 * v82);
    ++v82;
  }
  while ((uint64_t)v82 < (uint64_t)v71);
  int v79 = 1;
LABEL_131:
  if ((uint64_t)v82 < (uint64_t)v72)
  {
    while (1)
    {
LABEL_132:
      if (v82 >= v72) {
        goto LABEL_159;
      }
      unint64_t v71 = v69[2];
      if (v82 < v71) {
        break;
      }
LABEL_137:
      __break(1u);
LABEL_138:
      int v79 = HIWORD(v68);
      unint64_t v82 = v71;
      if ((uint64_t)v71 >= (uint64_t)v72) {
        goto LABEL_139;
      }
    }
    unsigned int v99 = v79 + (*(unsigned __int16 *)(v66 + 32 + 2 * v82) ^ 0xFFFF);
    --v72;
    unint64_t v71 = v66 + 34;
    while (1)
    {
      int v79 = HIWORD(v99);
      v70[v82] = v99;
      if (v72 == v82) {
        break;
      }
      unsigned int v99 = v79 + (*(unsigned __int16 *)(v71 + 2 * v82++) ^ 0xFFFF);
      if (v82 >= v69[2]) {
        goto LABEL_137;
      }
    }
  }
LABEL_139:
  if (v79)
  {
    uint64_t v87 = v69[2];
    if (v87) {
      goto LABEL_141;
    }
    goto LABEL_144;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v37 = (void *)swift_allocError();
  unsigned char *v94 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  _So9NSDecimala__exponent_setter(0, &v143);
  _So9NSDecimala__length_setter(0, &v143);
  _So9NSDecimala__isNegative_setter(1, &v143);
  _So9NSDecimala__isCompact_setter(&v143);
  _So9NSDecimala__reserved_setter(&v143);

  LODWORD(v8) = v143;
  LOWORD(v5) = v144;
  LOWORD(v15) = WORD1(v144);
  LOWORD(v11) = WORD2(v144);
  LOWORD(v6) = HIWORD(v144);
  LOWORD(v9) = v145;
  LOWORD(v10) = WORD1(v145);
  LOWORD(v7) = WORD2(v145);
  LOWORD(v14) = HIWORD(v145);
LABEL_22:
  uint64_t v39 = v114;
LABEL_25:
  *(_DWORD *)uint64_t v39 = v8;
  *(_WORD *)(v39 + 4) = v5;
  *(_WORD *)(v39 + 6) = v15;
  *(_WORD *)(v39 + 8) = v11;
  *(_WORD *)(v39 + 10) = v6;
  *(_WORD *)(v39 + 12) = v9;
  *(_WORD *)(v39 + 14) = v10;
  *(_WORD *)(v39 + 16) = v7;
  *(_WORD *)(v39 + 18) = v14;
}

Swift::Void __swiftcall NSDecimal.multiply(by:)(NSDecimal *by)
{
  specialized static NSDecimal.*= infix(_:_:)(v3, (unint64_t)by, v1, v2);
}

Swift::Void __swiftcall NSDecimal.divide(by:)(NSDecimal *by)
{
  *(void *)uint64_t v3 = specialized NSDecimal._divide(by:roundingMode:)((unint64_t)by, v1, v2, *(void *)v3, *(void *)(v3 + 8), *(_DWORD *)(v3 + 16));
  *(_WORD *)(v3 + 8) = v4;
  *(_WORD *)(v3 + 10) = v5;
  *(_WORD *)(v3 + 12) = v6;
  *(_WORD *)(v3 + 14) = v7;
  *(_WORD *)(v3 + 16) = v8;
  *(_WORD *)(v3 + 18) = v9;
}

void __swiftcall NSDecimal._bridgeToObjectiveC()(NSDecimalNumber *__return_ptr retstr)
{
  uint64_t v4 = v1;
  uint64_t v5 = v2;
  int v6 = v3;
  objc_msgSend(objc_allocWithZone((Class)NSDecimalNumber), sel_initWithDecimal_, &v4);
}

id static NSDecimal._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_decimalValue);
  int v4 = v8;
  uint64_t v5 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 20) = 0;
  return result;
}

uint64_t static NSDecimal._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_decimalValue);
  int v3 = v8;
  uint64_t v4 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 20) = 0;
  return 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSDecimal()
{
  int v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSDecimalNumber);
  int v4 = v1;
  long long v5 = *(_OWORD *)(v0 + 1);
  return objc_msgSend(v2, sel_initWithDecimal_, &v4);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSDecimal(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_decimalValue);
  int v4 = v8;
  uint64_t v5 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 20) = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSDecimal(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_decimalValue);
  int v3 = v8;
  uint64_t v4 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 20) = 0;
  return 1;
}

unint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSDecimal@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized static NSDecimal._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = v4;
  *(_WORD *)(a2 + 10) = v5;
  *(_WORD *)(a2 + 12) = v6;
  *(_WORD *)(a2 + 14) = v7;
  *(_WORD *)(a2 + 16) = v8;
  *(_WORD *)(a2 + 18) = v9;
  return result;
}

void __swiftcall pow(_:_:)(NSDecimal *__return_ptr retstr, NSDecimal *a2, Swift::Int a3)
{
  NSDecimal._power(exponent:roundingMode:)((NSDecimal *)a3, v3, NSRoundPlain);
  if (v4)
  {

    uint64_t v6 = 0;
    uint64_t v7 = 0;
    _So9NSDecimala__exponent_setter(0, &v5);
    _So9NSDecimala__length_setter(0, &v5);
    _So9NSDecimala__isNegative_setter(1, &v5);
    _So9NSDecimala__isCompact_setter(&v5);
    _So9NSDecimala__reserved_setter(&v5);
  }
}

uint64_t __NSDecimalPower(_:_:_:_:)(uint64_t a1, int a2, Swift::Int exponent, NSDecimal *retstr)
{
  NSDecimal._power(exponent:roundingMode:)(retstr, exponent, (NSRoundingMode)retstr);
  if (v8)
  {
    *(void *)uint64_t v13 = v8;
    id v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast()) {
      uint64_t v10 = qword_18218CCE0[v14];
    }
    else {
      uint64_t v10 = 0;
    }
    *(_OWORD *)&v13[4] = 0uLL;
    _So9NSDecimala__exponent_setter(0, v13);
    _So9NSDecimala__length_setter(0, v13);
    _So9NSDecimala__isNegative_setter(1, v13);
    _So9NSDecimala__isCompact_setter(v13);
    _So9NSDecimala__reserved_setter(v13);
    long long v11 = *(_OWORD *)&v13[4];
    *(_DWORD *)a1 = *(_DWORD *)v13;
    *(_OWORD *)(a1 + 4) = v11;
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
  }
  return v10;
}

void _NSDecimalRound(uint64_t a1, int a2, Swift::Int scale, NSDecimal *retstr)
{
  NSDecimal._round(scale:roundingMode:)(retstr, scale, (NSRoundingMode)retstr);
  if (v8)
  {
  }
  else
  {
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
  }
}

uint64_t __NSDecimalString(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Any?(a2, (uint64_t)&v62);
  if (!v64)
  {
    outlined destroy of Any?((uint64_t)&v62);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    uint64_t v10 = (void *)0xE100000000000000;
    uint64_t v7 = 46;
    goto LABEL_8;
  }
  uint64_t v4 = *((void *)&v65[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 224);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, v4);
  id v9 = v8;
  swift_unknownObjectRelease_n();
  if (v9)
  {
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v7 = 46;
    uint64_t v10 = (void *)0xE100000000000000;
  }
LABEL_8:
  outlined init with copy of Any?(a2, (uint64_t)&v62);
  if (v64)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v54 = v7;
      goto LABEL_29;
    }
    uint64_t v11 = *(void *)&v65[0];
    *(void *)&v65[0] = 0xD000000000000012;
    *((void *)&v65[0] + 1) = 0x80000001823AD4C0;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v11 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v62), (v13 & 1) != 0)) {
      outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v12, (uint64_t)v65);
    }
    else {
      memset(v65, 0, sizeof(v65));
    }
    outlined destroy of AnyHashable((uint64_t)&v62);
    if (*((void *)&v65[1] + 1))
    {
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = (void *)*((void *)&v66 + 1);
        uint64_t v7 = v66;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v65);
    }
    *(void *)&long long v66 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C418]);
    *((void *)&v66 + 1) = v15;
    AnyHashable.init<A>(_:)();
    uint64_t v54 = v7;
    if (*(void *)(v11 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v62), (v17 & 1) != 0)) {
      outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v16, (uint64_t)v65);
    }
    else {
      memset(v65, 0, sizeof(v65));
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v62);
    if (*((void *)&v65[1] + 1))
    {
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = (void *)*((void *)&v66 + 1);
        uint64_t v54 = v66;
      }
      goto LABEL_29;
    }
    char v14 = (unsigned int *)v65;
  }
  else
  {
    uint64_t v54 = v7;
    char v14 = &v62;
  }
  outlined destroy of Any?((uint64_t)v14);
LABEL_29:
  LODWORD(v18) = *(_DWORD *)a1;
  __int16 v19 = *(_WORD *)(a1 + 4);
  __int16 v20 = *(_WORD *)(a1 + 6);
  LOWORD(v21) = *(_WORD *)(a1 + 8);
  __int16 v22 = *(_WORD *)(a1 + 10);
  __int16 v23 = *(_WORD *)(a1 + 12);
  LOWORD(v24) = *(_WORD *)(a1 + 14);
  LOWORD(v25) = *(_WORD *)(a1 + 16);
  LOWORD(a1) = *(_WORD *)(a1 + 18);
  unsigned int v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  if (!_So9NSDecimala__length_getter(&v62))
  {
    unsigned int v62 = v18;
    LOWORD(v63) = v19;
    WORD1(v63) = v20;
    WORD2(v63) = v21;
    WORD3(v63) = v22;
    WORD4(v63) = v23;
    WORD5(v63) = v24;
    WORD6(v63) = v25;
    HIWORD(v63) = a1;
    if (_So9NSDecimala__isNegative_getter(&v62))
    {
      swift_bridgeObjectRelease();
      return 5136718;
    }
  }
  unsigned int v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  if (!_So9NSDecimala__length_getter(&v62))
  {
    swift_bridgeObjectRelease();
    return 48;
  }
  char v53 = v10;
  *(void *)&long long v66 = 0;
  *((void *)&v66 + 1) = 0xE000000000000000;
  unsigned int v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  LODWORD(v65[0]) = v18;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if ((int)_So9NSDecimala__exponent_getter((char *)v65) >= 1)
  {
    do
    {
      v26._countAndFlagsBits = 48;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      LODWORD(v65[0]) = v18;
      WORD2(v65[0]) = v19;
      WORD3(v65[0]) = v20;
      WORD4(v65[0]) = v21;
      WORD5(v65[0]) = v22;
      WORD6(v65[0]) = v23;
      HIWORD(v65[0]) = v24;
      LOWORD(v65[1]) = v25;
      WORD1(v65[1]) = a1;
      int v27 = _So9NSDecimala__exponent_getter((char *)v65);
      _So9NSDecimala__exponent_setter((v27 - 1), &v62);
      LODWORD(v18) = v62;
      __int16 v19 = v63;
      __int16 v20 = WORD1(v63);
      LOWORD(v21) = WORD2(v63);
      __int16 v22 = WORD3(v63);
      __int16 v23 = WORD4(v63);
      LOWORD(v24) = WORD5(v63);
      LOWORD(v25) = WORD6(v63);
      LOWORD(a1) = HIWORD(v63);
      *(void *)&v65[0] = __PAIR64__(v63, v62);
      *((void *)&v65[0] + 1) = *(void *)((char *)&v63 + 4);
      LODWORD(v65[1]) = HIDWORD(v63);
    }
    while ((int)_So9NSDecimala__exponent_getter((char *)v65) > 0);
  }
  LODWORD(v65[0]) = v18;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if (!_So9NSDecimala__exponent_getter((char *)v65))
  {
    _So9NSDecimala__exponent_setter(1, &v62);
    LODWORD(v18) = v62;
    __int16 v19 = v63;
    __int16 v20 = WORD1(v63);
    LOWORD(v21) = WORD2(v63);
    __int16 v22 = WORD3(v63);
    __int16 v23 = WORD4(v63);
    LOWORD(v24) = WORD5(v63);
    LOWORD(v25) = WORD6(v63);
    LOWORD(a1) = HIWORD(v63);
  }
  LODWORD(v65[0]) = v18;
  __int16 v59 = v19;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if (!_So9NSDecimala__length_getter(v65))
  {
LABEL_57:
    __int16 v28 = v59;
LABEL_58:
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v28;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    __int16 v42 = v28;
    int v43 = _So9NSDecimala__exponent_getter((char *)v65);
    __int16 v44 = v42;
    if (v43 <= 0)
    {
      LODWORD(v65[0]) = v18;
      WORD2(v65[0]) = v42;
      WORD3(v65[0]) = v20;
      WORD4(v65[0]) = v21;
      WORD5(v65[0]) = v22;
      WORD6(v65[0]) = v23;
      HIWORD(v65[0]) = v24;
      LOWORD(v65[1]) = v25;
      WORD1(v65[1]) = a1;
      for (int i = v18; _So9NSDecimala__exponent_getter((char *)v65); LODWORD(v65[1]) = HIDWORD(v63))
      {
        v46._countAndFlagsBits = 48;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        LODWORD(v65[0]) = i;
        WORD2(v65[0]) = v42;
        WORD3(v65[0]) = v20;
        WORD4(v65[0]) = v21;
        WORD5(v65[0]) = v22;
        WORD6(v65[0]) = v23;
        HIWORD(v65[0]) = v24;
        LOWORD(v65[1]) = v25;
        WORD1(v65[1]) = a1;
        int v47 = _So9NSDecimala__exponent_getter((char *)v65);
        _So9NSDecimala__exponent_setter((v47 + 1), &v62);
        int i = v62;
        __int16 v42 = v63;
        __int16 v20 = WORD1(v63);
        LOWORD(v21) = WORD2(v63);
        __int16 v22 = WORD3(v63);
        __int16 v23 = WORD4(v63);
        LOWORD(v24) = WORD5(v63);
        LOWORD(v25) = WORD6(v63);
        LOWORD(a1) = HIWORD(v63);
        *(void *)&v65[0] = __PAIR64__(v63, v62);
        *((void *)&v65[0] + 1) = *(void *)((char *)&v63 + 4);
      }
      v48._object = v53;
      v48._countAndFlagsBits = v54;
      String.append(_:)(v48);
      v49._countAndFlagsBits = 48;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      LODWORD(v18) = i;
      __int16 v44 = v42;
    }
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v44;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    if (_So9NSDecimala__isNegative_getter(v65))
    {
      v50._countAndFlagsBits = 45;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
    }
    v65[0] = v66;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    uint64_t v41 = String.init<A>(_:)();
    swift_bridgeObjectRelease();
    return v41;
  }
  __int16 v28 = v19;
  while (1)
  {
    __int16 v60 = v28;
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v28;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    if (!_So9NSDecimala__exponent_getter((char *)v65))
    {
      v29._object = v10;
      v29._countAndFlagsBits = v54;
      String.append(_:)(v29);
    }
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v60;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    int v30 = _So9NSDecimala__exponent_getter((char *)v65);
    _So9NSDecimala__exponent_setter((v30 + 1), &v62);
    unsigned int v31 = v62;
    __int16 v20 = WORD1(v63);
    __int16 v23 = WORD5(v63);
    __int16 v59 = v63;
    __int16 v57 = WORD3(v63);
    __int16 v58 = WORD2(v63);
    __int16 v56 = WORD4(v63);
    __int16 v22 = HIWORD(v63);
    __int16 v55 = WORD6(v63);
    NSDecimal.asVariableLengthInteger()(v62 | ((unint64_t)(unsigned __int16)v63 << 32) | ((unint64_t)WORD1(v63) << 48), WORD2(v63) | ((unint64_t)WORD3(v63) << 16) | ((unint64_t)WORD4(v63) << 32) | ((unint64_t)WORD5(v63) << 48), WORD6(v63) | (HIWORD(v63) << 16));
    unint64_t v18 = v32;
    uint64_t v21 = *(void *)(v32 + 16);
    if (!v21)
    {
      unsigned int v25 = 0;
      a1 = MEMORY[0x1E4FBC860];
      uint64_t v36 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v36) {
        goto LABEL_50;
      }
LABEL_47:
      if (!*(_WORD *)(a1 + 2 * v36 + 30))
      {
        do
        {
          *(void *)(a1 + 16) = v36 - 1;
          if (v36 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(a1 + 28 + 2 * v36--));
      }
      goto LABEL_50;
    }
    unsigned int v52 = v31;
    a1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v24 = a1 + 30;
    *(void *)(a1 + 16) = v21;
    bzero((void *)(a1 + 32), 2 * v21);
    unsigned int v33 = *(unsigned __int16 *)(2 * v21 + v18 + 30);
    unsigned int v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v24 + 2 * v21) = v34;
      unsigned int v25 = v33 % 0xA;
      if (v21 == 1) {
        break;
      }
      unsigned int v33 = *(unsigned __int16 *)(v18 + 28 + 2 * v21) | (v25 << 16);
      unsigned int v34 = v33 / 0xA;
      unint64_t v35 = v21 - 2;
      --v21;
      if (v35 >= *(void *)(a1 + 16))
      {
        __break(1u);
        goto LABEL_57;
      }
    }
    unsigned int v31 = v52;
    uint64_t v36 = *(void *)(a1 + 16);
    if (v36) {
      goto LABEL_47;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    LODWORD(v65[0]) = v31;
    WORD2(v65[0]) = v59;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v58;
    WORD5(v65[0]) = v57;
    WORD6(v65[0]) = v56;
    HIWORD(v65[0]) = v23;
    LOWORD(v65[1]) = v55;
    WORD1(v65[1]) = v22;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)a1);
    if (v38) {
      break;
    }
    unint64_t v18 = *(void *)(a1 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v18)) {
      goto LABEL_67;
    }
    _So9NSDecimala__length_setter(v18, v65);
    unsigned int v62 = v65[0];
    long long v63 = *(_OWORD *)((char *)v65 + 4);
    *(void *)&v65[0] = v25 | 0x30;
    v39._countAndFlagsBits = MEMORY[0x185302020](v65, 1);
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    LODWORD(v18) = v62;
    __int16 v61 = v63;
    __int16 v20 = WORD1(v63);
    LOWORD(v21) = WORD2(v63);
    __int16 v22 = WORD3(v63);
    __int16 v23 = WORD4(v63);
    LOWORD(v24) = WORD5(v63);
    LOWORD(v25) = WORD6(v63);
    LOWORD(a1) = HIWORD(v63);
    *(void *)&v65[0] = __PAIR64__(v63, v62);
    *((void *)&v65[0] + 1) = *(void *)((char *)&v63 + 4);
    LODWORD(v65[1]) = HIDWORD(v63);
    int v40 = _So9NSDecimala__length_getter(v65);
    __int16 v28 = v61;
    if (!v40) {
      goto LABEL_58;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_67:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id _NSDecimalString(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  __NSDecimalString(_:_:)(a1, (uint64_t)v5);
  outlined destroy of Any?((uint64_t)v5);
  Swift::Int v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t NSDecimalAdd(_:_:_:_:)(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  v161[3] = *MEMORY[0x1E4F143B8];
  __int16 v4 = *((_WORD *)a2 + 2);
  __int16 v5 = *((_WORD *)a2 + 3);
  __int16 v6 = *((_WORD *)a2 + 4);
  __int16 v7 = *((_WORD *)a2 + 5);
  __int16 v8 = *((_WORD *)a2 + 6);
  __int16 v9 = *((_WORD *)a2 + 7);
  __int16 v10 = *((_WORD *)a2 + 8);
  int v11 = *a3;
  __int16 v12 = *((_WORD *)a3 + 2);
  __int16 v13 = *((_WORD *)a3 + 3);
  __int16 v14 = *((_WORD *)a3 + 4);
  __int16 v15 = *((_WORD *)a3 + 5);
  __int16 v16 = *((_WORD *)a3 + 6);
  __int16 v17 = *((_WORD *)a3 + 7);
  __int16 v18 = *((_WORD *)a3 + 8);
  __int16 v19 = *((_WORD *)a3 + 9);
  int v146 = *a2;
  __int16 v149 = *((_WORD *)a2 + 9);
  LODWORD(v161[0]) = *a2;
  __int16 v144 = v4;
  WORD2(v161[0]) = v4;
  __int16 v142 = v5;
  HIWORD(v161[0]) = v5;
  __int16 v140 = v6;
  LOWORD(v161[1]) = v6;
  __int16 v138 = v7;
  WORD1(v161[1]) = v7;
  __int16 v136 = v8;
  WORD2(v161[1]) = v8;
  __int16 v134 = v9;
  HIWORD(v161[1]) = v9;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v146;
    WORD2(v161[0]) = v144;
    HIWORD(v161[0]) = v142;
    LOWORD(v161[1]) = v140;
    WORD1(v161[1]) = v138;
    WORD2(v161[1]) = v136;
    HIWORD(v161[1]) = v134;
    LOWORD(v161[2]) = v10;
    WORD1(v161[2]) = v149;
    if (_So9NSDecimala__isNegative_getter(v161)) {
      goto LABEL_17;
    }
  }
  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v11;
    WORD2(v161[0]) = v12;
    HIWORD(v161[0]) = v13;
    LOWORD(v161[1]) = v14;
    WORD1(v161[1]) = v15;
    WORD2(v161[1]) = v16;
    HIWORD(v161[1]) = v17;
    LOWORD(v161[2]) = v18;
    WORD1(v161[2]) = v19;
    if (_So9NSDecimala__isNegative_getter(v161)) {
      goto LABEL_17;
    }
  }
  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    uint64_t v60 = 0;
    *(_DWORD *)a1 = v11;
    *(_WORD *)(a1 + 4) = v12;
    *(_WORD *)(a1 + 6) = v13;
    *(_WORD *)(a1 + 8) = v14;
    *(_WORD *)(a1 + 10) = v15;
    *(_WORD *)(a1 + 12) = v16;
    *(_WORD *)(a1 + 14) = v17;
    *(_WORD *)(a1 + 16) = v18;
    *(_WORD *)(a1 + 18) = v19;
    return v60;
  }
  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    *(_DWORD *)a1 = v146;
    *(_WORD *)(a1 + 4) = v144;
    *(_WORD *)(a1 + 6) = v142;
    *(_WORD *)(a1 + 8) = v140;
    *(_WORD *)(a1 + 10) = v138;
    *(_WORD *)(a1 + 12) = v136;
    *(_WORD *)(a1 + 14) = v134;
    *(_WORD *)(a1 + 16) = v10;
    uint64_t v60 = 0;
    *(_WORD *)(a1 + 18) = v149;
    return v60;
  }
  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  LODWORD(v158) = v11;
  WORD2(v158) = v12;
  HIWORD(v158) = v13;
  LOWORD(v159) = v14;
  WORD1(v159) = v15;
  WORD2(v159) = v16;
  HIWORD(v159) = v17;
  LOWORD(v160) = v18;
  HIWORD(v160) = v19;
  char v20 = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)v161, (uint64_t)&v158);
  uint64_t v21 = LODWORD(v161[0]);
  uint64_t v22 = LOWORD(v161[1]);
  uint64_t v23 = WORD1(v161[1]);
  uint64_t v24 = WORD2(v161[1]);
  int v25 = WORD1(v161[2]);
  unint64_t v155 = v161[0];
  uint64_t v143 = HIWORD(v161[0]);
  uint64_t v145 = WORD2(v161[0]);
  uint64_t v156 = v161[1];
  uint64_t v150 = HIWORD(v161[1]);
  int v147 = LOWORD(v161[2]);
  int v157 = v161[2];
  int v26 = _So9NSDecimala__length_getter(&v155);
  int v27 = v158;
  __int16 v28 = WORD2(v158);
  __int16 v29 = HIWORD(v158);
  __int16 v30 = v159;
  __int16 v31 = WORD1(v159);
  uint64_t v32 = WORD2(v159);
  uint64_t v33 = HIWORD(v159);
  __int16 v34 = v160;
  __int16 v35 = HIWORD(v160);
  if (!v26) {
    goto LABEL_147;
  }
  __int16 v127 = v25;
  unint64_t v155 = v158;
  uint64_t v156 = v159;
  int v157 = v160;
  int v129 = HIWORD(v160);
  int v130 = (unsigned __int16)v160;
  uint64_t v128 = v158;
  uint64_t v139 = HIWORD(v158);
  uint64_t v141 = WORD2(v158);
  uint64_t v135 = WORD1(v159);
  uint64_t v137 = (unsigned __int16)v159;
  if (!_So9NSDecimala__length_getter(&v155))
  {
    int v27 = v21;
    __int16 v28 = v145;
    __int16 v29 = v143;
    __int16 v30 = v22;
    __int16 v31 = v23;
    LOWORD(v32) = v24;
    LOWORD(v33) = v150;
    __int16 v34 = v147;
    __int16 v35 = v25;
LABEL_147:
    uint64_t v70 = a1;
    goto LABEL_148;
  }
  char v124 = v20;
  LODWORD(v155) = v21;
  WORD2(v155) = v145;
  HIWORD(v155) = v143;
  LOWORD(v156) = v22;
  WORD1(v156) = v23;
  WORD2(v156) = v24;
  HIWORD(v156) = v150;
  LOWORD(v157) = v147;
  HIWORD(v157) = v25;
  unint64_t v152 = __PAIR64__(__PAIR32__(v143, v145), v21);
  LOWORD(v153) = v22;
  WORD1(v153) = v23;
  __int16 v125 = v24;
  WORD2(v153) = v24;
  HIWORD(v153) = v150;
  LOWORD(v154) = v147;
  HIWORD(v154) = v25;
  uint64_t v36 = v33;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v152);
  LODWORD(v152) = v128;
  WORD2(v152) = v141;
  HIWORD(v152) = v139;
  LOWORD(v153) = v137;
  WORD1(v153) = v135;
  WORD2(v153) = v32;
  HIWORD(v153) = v36;
  LOWORD(v154) = v130;
  HIWORD(v154) = v129;
  uint64_t v126 = v32;
  if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v152))
  {
    LODWORD(v152) = v21;
    WORD2(v152) = v145;
    HIWORD(v152) = v143;
    LOWORD(v153) = v22;
    WORD1(v153) = v23;
    WORD2(v153) = v24;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v25;
    uint64_t v38 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v38, &v155);
    NSDecimal.asVariableLengthInteger()(v21 | (v145 << 32) | (v143 << 48), v22 | (v23 << 16) | (v24 << 32) | (v150 << 48), v147 | (v25 << 16));
    uint64_t v40 = v39;
    NSDecimal.asVariableLengthInteger()(v128 | (v141 << 32) | (v139 << 48), v137 | (v135 << 16) | (v126 << 32) | (v36 << 48), v130 | (v129 << 16));
    uint64_t v43 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v40, v41, 9, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v44 = *(void *)(v43 + 16);
    if (v44 <= 8)
    {
      v46._rawValue = (void *)v43;
LABEL_29:
      _So9NSDecimala__length_setter(v44, &v155);
LABEL_144:
      NSDecimal.copyVariableLengthInteger(_:)(v46);
      if (v117)
      {
        __int16 v57 = v117;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v155);
      NSDecimal.compact()();
      int v27 = v155;
      __int16 v28 = WORD2(v155);
      __int16 v29 = HIWORD(v155);
      __int16 v30 = v156;
      __int16 v31 = WORD1(v156);
      LOWORD(v32) = WORD2(v156);
      LOWORD(v33) = HIWORD(v156);
      __int16 v34 = v157;
      __int16 v35 = HIWORD(v157);
      goto LABEL_147;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v43, a4);
    v46._rawValue = v45;
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    int v49 = v155;
    __int16 v50 = WORD2(v155);
    __int16 v51 = HIWORD(v155);
    __int16 v52 = v156;
    __int16 v53 = WORD1(v156);
    __int16 v54 = WORD2(v156);
    __int16 v55 = HIWORD(v156);
    unint64_t v152 = v155;
    uint64_t v153 = v156;
    __int16 v148 = HIWORD(v157);
    __int16 v151 = v157;
    int v154 = v157;
    int v56 = _So9NSDecimala__exponent_getter((char *)&v152);
    if (v48 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v48 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v56, v48))
        {
          if (v56 + (int)v48 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_17:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            __int16 v57 = (void *)swift_allocError();
            *__int16 v58 = 0;
            swift_willThrow();
            goto LABEL_18;
          }
          LODWORD(v152) = v49;
          WORD2(v152) = v50;
          HIWORD(v152) = v51;
          LOWORD(v153) = v52;
          WORD1(v153) = v53;
          WORD2(v153) = v54;
          HIWORD(v153) = v55;
          LOWORD(v154) = v151;
          HIWORD(v154) = v148;
          int v100 = _So9NSDecimala__exponent_getter((char *)&v152);
          BOOL v101 = __OFADD__(v100, v48);
          uint64_t v102 = (v100 + v48);
          if (!v101)
          {
            _So9NSDecimala__exponent_setter(v102, &v155);
            unint64_t v44 = *((void *)v46._rawValue + 2);
            char v20 = v124;
            if (HIDWORD(v44)) {
              goto LABEL_163;
            }
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_161;
        }
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  __int16 v120 = v23;
  int v121 = v21;
  LOWORD(v123) = v22;
  unint64_t v62 = v22 | (v23 << 16) | (v24 << 32) | (v150 << 48);
  unint64_t v132 = v21 | (v145 << 32) | (v143 << 48);
  unsigned int v122 = v147 | (v25 << 16);
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  uint64_t v64 = v63;
  unint64_t v65 = v128 | (v141 << 32) | (v139 << 48);
  uint64_t v66 = v36;
  unint64_t v67 = v137 | (v135 << 16) | (v32 << 32) | (v36 << 48);
  unsigned int v68 = v130 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  uint64_t v48 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v64, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48 == -1)
  {
    uint64_t v123 = v66;
    uint64_t v48 = v141;
    char v71 = v124;
    NSDecimal.asVariableLengthInteger()(v65, v67, v68);
    uint64_t v73 = v72;
    NSDecimal.asVariableLengthInteger()(v132, v62, v122);
    uint64_t v75 = v74;
    uint64_t v76 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v46._rawValue = (void *)v76;
    *(void *)(v76 + 32) = 0;
    unsigned int v78 = (_WORD *)(v76 + 32);
    *(void *)(v76 + 16) = 8;
    *(void *)(v76 + 40) = 0;
    unint64_t v79 = *(void *)(v73 + 16);
    unint64_t v80 = *(void *)(v75 + 16);
    if (v80 >= v79) {
      uint64_t v81 = *(void *)(v73 + 16);
    }
    else {
      uint64_t v81 = *(void *)(v75 + 16);
    }
    if (v81)
    {
      unsigned int v82 = (*(unsigned __int16 *)(v73 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
      int v83 = HIWORD(v82);
      *unsigned int v78 = *(_WORD *)(v73 + 32) - *(_WORD *)(v75 + 32);
      uint64_t v84 = v81 - 1;
      int v85 = v128;
      __int16 v86 = v141;
      if (v84)
      {
        unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
        int v83 = HIWORD(v82);
        *(_WORD *)(v76 + 34) = v82;
        char v20 = v124;
        if (v84 == 1)
        {
          unint64_t v87 = 2;
        }
        else
        {
          unsigned int v77 = *(unsigned __int16 *)(v75 + 36);
          unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 36) - v77 + 0xFFFF;
          int v83 = HIWORD(v82);
          *(_WORD *)(v76 + 36) = v82;
          if (v84 == 2)
          {
            unint64_t v87 = 3;
          }
          else
          {
            unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
            int v83 = HIWORD(v82);
            *(_WORD *)(v76 + 38) = v82;
            if (v84 == 3)
            {
              unint64_t v87 = 4;
            }
            else
            {
              unsigned int v77 = *(unsigned __int16 *)(v75 + 40);
              unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 40) - v77 + 0xFFFF;
              int v83 = HIWORD(v82);
              *(_WORD *)(v76 + 40) = v82;
              if (v84 == 4)
              {
                unint64_t v87 = 5;
              }
              else
              {
                unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
                int v83 = HIWORD(v82);
                *(_WORD *)(v76 + 42) = v82;
                if (v84 == 5)
                {
                  unint64_t v87 = 6;
                }
                else
                {
                  unsigned int v77 = *(unsigned __int16 *)(v75 + 44);
                  unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 44) - v77 + 0xFFFF;
                  int v83 = HIWORD(v82);
                  *(_WORD *)(v76 + 44) = v82;
                  if (v84 == 6)
                  {
                    unint64_t v87 = 7;
                  }
                  else
                  {
                    int v105 = v83 + *(unsigned __int16 *)(v73 + 46) - *(unsigned __int16 *)(v75 + 46);
                    unsigned int v82 = v105 + 0xFFFF;
                    *(_WORD *)(v76 + 46) = v105 - 1;
                    if (v84 != 7)
                    {
LABEL_161:
                      __break(1u);
                      goto LABEL_162;
                    }
                    int v83 = HIWORD(v82);
                    unint64_t v87 = 8;
                  }
                  char v20 = v124;
                  int v85 = v128;
                  __int16 v86 = v141;
                }
              }
            }
          }
        }
      }
      else
      {
        unint64_t v87 = 1;
        char v20 = v124;
      }
      uint64_t v48 = v123;
      if (v87 >= v79) {
        goto LABEL_95;
      }
      if (!HIWORD(v82))
      {
        while (v87 < *(void *)(v76 + 16))
        {
          int v106 = *(unsigned __int16 *)(v73 + 32 + 2 * v87);
          unsigned int v77 = v106 + 0xFFFF;
          v78[v87] = v106 - 1;
          if (v79 - 1 == v87) {
            goto LABEL_102;
          }
          ++v87;
          if (v106) {
            goto LABEL_88;
          }
        }
        goto LABEL_153;
      }
    }
    else
    {
      int v85 = v128;
      __int16 v86 = v141;
      if (!v79)
      {
        char v20 = v124;
        if (v80)
        {
          unint64_t v87 = 0;
          int v83 = 1;
          uint64_t v48 = v123;
          goto LABEL_96;
        }
        uint64_t v103 = 8;
        uint64_t v48 = v123;
        goto LABEL_105;
      }
      unint64_t v87 = 0;
      char v20 = v124;
      uint64_t v48 = v123;
    }
LABEL_88:
    uint64_t v92 = v73 + 32;
    if (v87 <= v79) {
      unint64_t v94 = v79;
    }
    else {
      unint64_t v94 = v87;
    }
    while (v94 != v87)
    {
      if (v87 >= *(void *)(v76 + 16)) {
        goto LABEL_112;
      }
      v78[v87] = *(_WORD *)(v92 + 2 * v87);
      if ((uint64_t)++v87 >= (uint64_t)v79)
      {
        int v83 = 1;
LABEL_95:
        if ((uint64_t)v87 < (uint64_t)v80)
        {
          while (1)
          {
LABEL_96:
            if (v87 >= v80) {
              goto LABEL_158;
            }
            unint64_t v79 = *(void *)(v76 + 16);
            if (v87 < v79) {
              break;
            }
LABEL_101:
            __break(1u);
LABEL_102:
            int v83 = HIWORD(v77);
            unint64_t v87 = v79;
            if ((uint64_t)v79 >= (uint64_t)v80) {
              goto LABEL_103;
            }
          }
          unsigned int v107 = v83 + (*(unsigned __int16 *)(v75 + 32 + 2 * v87) ^ 0xFFFF);
          --v80;
          unint64_t v79 = v75 + 34;
          while (1)
          {
            int v83 = HIWORD(v107);
            v78[v87] = v107;
            if (v80 == v87) {
              break;
            }
            unsigned int v107 = v83 + (*(unsigned __int16 *)(v79 + 2 * v87++) ^ 0xFFFF);
            if (v87 >= *(void *)(v76 + 16)) {
              goto LABEL_101;
            }
          }
        }
LABEL_103:
        if (!v83) {
          goto LABEL_150;
        }
        uint64_t v103 = *(void *)(v76 + 16);
        if (v103)
        {
LABEL_105:
          if (!v78[v103 - 1])
          {
            do
            {
              *(void *)(v76 + 16) = v103 - 1;
              if (v103 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v76 + 28 + 2 * v103--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v109 = *((void *)v46._rawValue + 2);
        if (!HIDWORD(v109))
        {
          _So9NSDecimala__length_setter(v109, &v155);
          LODWORD(v152) = v85;
          WORD2(v152) = v86;
          HIWORD(v152) = v139;
          LOWORD(v153) = v137;
          WORD1(v153) = v135;
          WORD2(v153) = v126;
          HIWORD(v153) = v48;
          LOWORD(v154) = v130;
          HIWORD(v154) = v129;
          goto LABEL_143;
        }
LABEL_163:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_164:
        type metadata accessor for NSComparisonResult(0);
        unint64_t v152 = v48;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  if (!v48)
  {
    int v27 = 0;
    __int16 v28 = 0;
    __int16 v29 = 0;
    __int16 v30 = 0;
    __int16 v31 = 0;
    LOWORD(v32) = 0;
    LOWORD(v33) = 0;
    __int16 v34 = 0;
    __int16 v35 = 0;
    uint64_t v70 = a1;
    char v20 = v124;
LABEL_148:
    *(_DWORD *)uint64_t v70 = v27;
    *(_WORD *)(v70 + 4) = v28;
    *(_WORD *)(v70 + 6) = v29;
    *(_WORD *)(v70 + 8) = v30;
    *(_WORD *)(v70 + 10) = v31;
    *(_WORD *)(v70 + 12) = v32;
    *(_WORD *)(v70 + 14) = v33;
    *(_WORD *)(v70 + 16) = v34;
    uint64_t v60 = v20 & 1;
    *(_WORD *)(v70 + 18) = v35;
    return v60;
  }
  char v71 = v124;
  if (v48 != 1) {
    goto LABEL_164;
  }
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  uint64_t v48 = v88;
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  uint64_t v75 = v89;
  uint64_t v90 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v46._rawValue = (void *)v90;
  *(void *)(v90 + 32) = 0;
  unsigned int v78 = (_WORD *)(v90 + 32);
  *(void *)(v90 + 16) = 8;
  *(void *)(v90 + 40) = 0;
  unint64_t v79 = *(void *)(v48 + 16);
  unint64_t v80 = *(void *)(v75 + 16);
  if (v80 >= v79) {
    uint64_t v91 = *(void *)(v48 + 16);
  }
  else {
    uint64_t v91 = *(void *)(v75 + 16);
  }
  if (v91)
  {
    uint64_t v92 = v48 + 32;
    unsigned int v93 = (*(unsigned __int16 *)(v48 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
    LODWORD(v94) = HIWORD(v93);
    *unsigned int v78 = *(_WORD *)(v48 + 32) - *(_WORD *)(v75 + 32);
    unint64_t v87 = v91 - 1;
    __int16 v95 = v123;
    __int16 v96 = v127;
    int v97 = v121;
    if (!v87)
    {
      unint64_t v98 = 1;
      char v20 = v124;
      goto LABEL_116;
    }
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 34) = v93;
    char v20 = v124;
    if (v87 == 1)
    {
      unint64_t v98 = 2;
      goto LABEL_116;
    }
    unsigned int v77 = *(unsigned __int16 *)(v75 + 36);
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 36) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 36) = v93;
    if (v87 == 2)
    {
      unint64_t v98 = 3;
      goto LABEL_116;
    }
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 38) = v93;
    if (v87 == 3)
    {
      unint64_t v98 = 4;
      goto LABEL_116;
    }
    unsigned int v77 = *(unsigned __int16 *)(v75 + 40);
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 40) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 40) = v93;
    if (v87 == 4)
    {
      unint64_t v98 = 5;
      goto LABEL_116;
    }
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 42) = v93;
    if (v87 == 5)
    {
      unint64_t v98 = 6;
      goto LABEL_116;
    }
    unsigned int v77 = *(unsigned __int16 *)(v75 + 44);
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 44) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 44) = v93;
    if (v87 == 6)
    {
      unint64_t v98 = 7;
LABEL_115:
      char v20 = v71;
      __int16 v95 = v123;
      __int16 v96 = v127;
      int v97 = v121;
LABEL_116:
      __int16 v99 = v145;
      if (v98 >= v79) {
        goto LABEL_128;
      }
      if (!HIWORD(v93))
      {
        while (v98 < *((void *)v46._rawValue + 2))
        {
          int v111 = *(unsigned __int16 *)(v92 + 2 * v98);
          unsigned int v77 = v111 + 0xFFFF;
          v78[v98] = v111 - 1;
          if (v79 - 1 == v98) {
            goto LABEL_135;
          }
          ++v98;
          if (v111) {
            goto LABEL_121;
          }
        }
        goto LABEL_154;
      }
      goto LABEL_121;
    }
LABEL_113:
    int v110 = v94 + *(unsigned __int16 *)(v48 + 46) - *(unsigned __int16 *)(v75 + 46);
    unsigned int v93 = v110 + 0xFFFF;
    *((_WORD *)v46._rawValue + 23) = v110 - 1;
    if (v87 != 7)
    {
LABEL_162:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_163;
    }
    LODWORD(v94) = HIWORD(v93);
    unint64_t v98 = 8;
    goto LABEL_115;
  }
  __int16 v95 = v123;
  __int16 v96 = v127;
  int v97 = v121;
  if (!v79)
  {
    char v20 = v124;
    if (v80)
    {
      unint64_t v98 = 0;
      LODWORD(v94) = 1;
      __int16 v99 = v145;
      goto LABEL_129;
    }
    uint64_t v104 = 8;
    __int16 v99 = v145;
LABEL_138:
    if (!v78[v104 - 1])
    {
      do
      {
        *((void *)v46._rawValue + 2) = v104 - 1;
        if (v104 == 1) {
          break;
        }
      }
      while (!*((unsigned __int16 *)v46._rawValue + v104-- + 14));
    }
LABEL_141:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v115 = *((void *)v46._rawValue + 2);
    if (HIDWORD(v115)) {
      goto LABEL_163;
    }
    _So9NSDecimala__length_setter(v115, &v155);
    LODWORD(v152) = v97;
    WORD2(v152) = v99;
    HIWORD(v152) = v143;
    LOWORD(v153) = v95;
    WORD1(v153) = v120;
    WORD2(v153) = v125;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v96;
LABEL_143:
    uint64_t v116 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v116, &v155);
    goto LABEL_144;
  }
  unint64_t v98 = 0;
  char v20 = v124;
  __int16 v99 = v145;
LABEL_121:
  if (v98 <= v79) {
    unint64_t v112 = v79;
  }
  else {
    unint64_t v112 = v98;
  }
  do
  {
    if (v112 == v98)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (v98 >= *((void *)v46._rawValue + 2)) {
      goto LABEL_152;
    }
    v78[v98] = *(_WORD *)(v48 + 32 + 2 * v98);
    ++v98;
  }
  while ((uint64_t)v98 < (uint64_t)v79);
  LODWORD(v94) = 1;
LABEL_128:
  if ((uint64_t)v98 < (uint64_t)v80)
  {
    while (1)
    {
LABEL_129:
      if (v98 >= v80) {
        goto LABEL_159;
      }
      unint64_t v79 = *((void *)v46._rawValue + 2);
      if (v98 < v79) {
        break;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      LODWORD(v94) = HIWORD(v77);
      unint64_t v98 = v79;
      if ((uint64_t)v79 >= (uint64_t)v80) {
        goto LABEL_136;
      }
    }
    unsigned int v113 = v94 + (*(unsigned __int16 *)(v75 + 32 + 2 * v98) ^ 0xFFFF);
    --v80;
    unint64_t v79 = v75 + 34;
    while (1)
    {
      LODWORD(v94) = HIWORD(v113);
      v78[v98] = v113;
      if (v80 == v98) {
        break;
      }
      unsigned int v113 = v94 + (*(unsigned __int16 *)(v79 + 2 * v98++) ^ 0xFFFF);
      if (v98 >= *((void *)v46._rawValue + 2)) {
        goto LABEL_134;
      }
    }
  }
LABEL_136:
  if (v94)
  {
    uint64_t v104 = *((void *)v46._rawValue + 2);
    if (v104) {
      goto LABEL_138;
    }
    goto LABEL_141;
  }
LABEL_150:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  __int16 v57 = (void *)swift_allocError();
  *int v119 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  v161[0] = v57;
  id v59 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast()) {
    uint64_t v60 = qword_18218CCE0[(char)v158];
  }
  else {
    uint64_t v60 = 0;
  }
  *(_OWORD *)((char *)v161 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v161);
  _So9NSDecimala__length_setter(0, v161);
  _So9NSDecimala__isNegative_setter(1, v161);
  _So9NSDecimala__isCompact_setter(v161);
  _So9NSDecimala__reserved_setter(v161);
  long long v61 = *(_OWORD *)((char *)v161 + 4);
  *(_DWORD *)a1 = v161[0];
  *(_OWORD *)(a1 + 4) = v61;

  return v60;
}

uint64_t NSDecimalSubtract(_:_:_:_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v152[3] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  __int16 v112 = *((_WORD *)a2 + 2);
  __int16 v114 = *((_WORD *)a2 + 3);
  unsigned __int16 v116 = *((_WORD *)a2 + 4);
  __int16 v118 = *((_WORD *)a2 + 5);
  __int16 v120 = *((_WORD *)a2 + 6);
  unsigned __int16 v122 = *((_WORD *)a2 + 8);
  unsigned __int16 v124 = *((_WORD *)a2 + 7);
  unsigned __int16 v126 = *((_WORD *)a2 + 9);
  LODWORD(v5) = *(_DWORD *)a3;
  LOWORD(v6) = *(_WORD *)(a3 + 4);
  LOWORD(v7) = *(_WORD *)(a3 + 6);
  unsigned __int16 v8 = *(_WORD *)(a3 + 8);
  LOWORD(v9) = *(_WORD *)(a3 + 10);
  LOWORD(v10) = *(_WORD *)(a3 + 12);
  LOWORD(v11) = *(_WORD *)(a3 + 14);
  LOWORD(v12) = *(_WORD *)(a3 + 16);
  unsigned __int16 v13 = *(_WORD *)(a3 + 18);
  LODWORD(v152[0]) = v5;
  WORD2(v152[0]) = v6;
  HIWORD(v152[0]) = v7;
  LOWORD(v152[1]) = v8;
  WORD1(v152[1]) = v9;
  WORD2(v152[1]) = v10;
  HIWORD(v152[1]) = v11;
  LOWORD(v152[2]) = v12;
  WORD1(v152[2]) = v13;
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v146);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v152);
    LODWORD(v5) = v152[0];
    LOWORD(v6) = WORD2(v152[0]);
    LOWORD(v7) = HIWORD(v152[0]);
    unsigned __int16 v8 = v152[1];
    LOWORD(v9) = WORD1(v152[1]);
    LOWORD(v10) = WORD2(v152[1]);
    LOWORD(v11) = HIWORD(v152[1]);
    LOWORD(v12) = v152[2];
    unsigned __int16 v13 = WORD1(v152[2]);
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v4;
    WORD2(v146) = v112;
    HIWORD(v146) = v114;
    unsigned __int16 v147 = v116;
    LOWORD(v148) = v118;
    HIWORD(v148) = v120;
    unsigned __int16 v149 = v124;
    unsigned __int16 v150 = v122;
    unsigned __int16 v151 = v126;
    if (_So9NSDecimala__isNegative_getter(&v146)) {
      goto LABEL_19;
    }
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
    if (_So9NSDecimala__isNegative_getter(&v146)) {
      goto LABEL_19;
    }
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    uint64_t v45 = a1;
    unsigned __int16 v18 = v8;
    unsigned __int16 v19 = v13;
LABEL_27:
    uint64_t v43 = 0;
    *(_DWORD *)uint64_t v45 = v5;
    *(_WORD *)(v45 + 4) = v6;
    *(_WORD *)(v45 + 6) = v7;
    *(_WORD *)(v45 + 8) = v18;
    *(_WORD *)(v45 + 10) = v9;
    *(_WORD *)(v45 + 12) = v10;
    *(_WORD *)(v45 + 14) = v11;
    *(_WORD *)(v45 + 16) = v12;
    *(_WORD *)(v45 + 18) = v19;
    return v43;
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v5) = v4;
    LOWORD(v6) = v112;
    LOWORD(v7) = v114;
    unsigned __int16 v18 = v116;
    LOWORD(v9) = v118;
    LOWORD(v10) = v120;
    LOWORD(v12) = v122;
    LOWORD(v11) = v124;
    unsigned __int16 v19 = v126;
    goto LABEL_26;
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  LODWORD(v140) = v5;
  WORD2(v140) = v6;
  HIWORD(v140) = v7;
  unsigned __int16 v141 = v8;
  LOWORD(v142) = v9;
  HIWORD(v142) = v10;
  unsigned __int16 v143 = v11;
  unsigned __int16 v144 = v12;
  unsigned __int16 v145 = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v146, (uint64_t)&v140);
  uint64_t v15 = WORD2(v146);
  uint64_t v16 = HIWORD(v148);
  uint64_t v113 = v146;
  uint64_t v134 = v146;
  uint64_t v125 = v147;
  uint64_t v127 = HIWORD(v146);
  unsigned __int16 v135 = v147;
  uint64_t v119 = v149;
  uint64_t v121 = (unsigned __int16)v148;
  unsigned int v136 = v148;
  unsigned __int16 v137 = v149;
  int v117 = v150;
  unsigned __int16 v138 = v150;
  int v123 = v151;
  unsigned __int16 v139 = v151;
  int v17 = _So9NSDecimala__length_getter(&v134);
  uint64_t v5 = v140;
  uint64_t v6 = WORD2(v140);
  uint64_t v7 = HIWORD(v140);
  unsigned __int16 v18 = v141;
  uint64_t v9 = (unsigned __int16)v142;
  uint64_t v10 = HIWORD(v142);
  uint64_t v11 = v143;
  int v12 = v144;
  unsigned __int16 v19 = v145;
  if (!v17)
  {
LABEL_26:
    uint64_t v45 = a1;
    goto LABEL_27;
  }
  __int16 v115 = v16;
  uint64_t v134 = v140;
  unsigned __int16 v135 = v141;
  unsigned int v136 = v142;
  unsigned __int16 v137 = v143;
  unsigned __int16 v138 = v144;
  unsigned __int16 v139 = v145;
  int v108 = v145;
  uint64_t v107 = v141;
  if (!_So9NSDecimala__length_getter(&v134))
  {
    LODWORD(v5) = v113;
    LOWORD(v10) = v16;
    LOWORD(v6) = v15;
    LOWORD(v7) = v127;
    unsigned __int16 v18 = v125;
    LOWORD(v11) = v119;
    LOWORD(v9) = v121;
    LOWORD(v12) = v117;
    unsigned __int16 v19 = v123;
    goto LABEL_26;
  }
  LODWORD(v134) = v113;
  WORD2(v134) = v15;
  HIWORD(v134) = v127;
  unsigned __int16 v135 = v125;
  LOWORD(v136) = v121;
  HIWORD(v136) = v16;
  unsigned __int16 v137 = v119;
  unsigned __int16 v138 = v117;
  unsigned __int16 v139 = v123;
  *(_DWORD *)int v129 = v113;
  *(_WORD *)&v129[4] = v15;
  *(_DWORD *)&v129[6] = __PAIR32__(v125, v127);
  unsigned int v130 = __PAIR32__(v16, v121);
  unsigned __int16 v131 = v119;
  unsigned __int16 v132 = v117;
  unsigned __int16 v133 = v123;
  int v104 = _So9NSDecimala__isNegative_getter(v129);
  *(_DWORD *)int v129 = v5;
  __int16 v106 = v6;
  *(_WORD *)&v129[4] = v6;
  *(_WORD *)&v129[6] = v7;
  *(_WORD *)&v129[8] = v107;
  LOWORD(v130) = v9;
  HIWORD(v130) = v10;
  unsigned __int16 v131 = v11;
  unsigned __int16 v132 = v12;
  unsigned __int16 v133 = v108;
  if (v104 == _So9NSDecimala__isNegative_getter(v129))
  {
    *(_DWORD *)int v129 = v113;
    *(_WORD *)&v129[4] = v15;
    *(_WORD *)&v129[6] = v127;
    *(_WORD *)&v129[8] = v125;
    LOWORD(v130) = v121;
    HIWORD(v130) = v16;
    unsigned __int16 v131 = v119;
    unsigned __int16 v132 = v117;
    unsigned __int16 v133 = v123;
    uint64_t v20 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v20, &v134);
    NSDecimal.asVariableLengthInteger()(v113 | (v15 << 32) | (v127 << 48), v125 | (v121 << 16) | (v16 << 32) | (v119 << 48), v117 | (v123 << 16));
    uint64_t v22 = v21;
    NSDecimal.asVariableLengthInteger()(v5 | (v6 << 32) | (v7 << 48), v107 | (v9 << 16) | (v10 << 32) | (v11 << 48), v12 | (v108 << 16));
    uint64_t v25 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v22, v23, 9, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = *(void *)(v25 + 16);
    if (v26 <= 8)
    {
LABEL_54:
      _So9NSDecimala__length_setter(v26, &v134);
      v82._rawValue = (void *)v25;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v82);
      if (v98)
      {
        uint64_t v40 = v98;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v134);
      NSDecimal.compact()();
      LODWORD(v5) = v134;
      LOWORD(v6) = WORD2(v134);
      LOWORD(v7) = HIWORD(v134);
      unsigned __int16 v18 = v135;
      LOWORD(v9) = v136;
      LOWORD(v10) = HIWORD(v136);
      LOWORD(v11) = v137;
      LOWORD(v12) = v138;
      unsigned __int16 v19 = v139;
      goto LABEL_26;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v25, a4);
    uint64_t v28 = v27;
    uint64_t v128 = v29;
    swift_bridgeObjectRelease();
    int v30 = v134;
    __int16 v31 = WORD2(v134);
    __int16 v32 = HIWORD(v134);
    unsigned __int16 v33 = v135;
    __int16 v34 = v136;
    __int16 v35 = HIWORD(v136);
    unsigned __int16 v36 = v137;
    unsigned __int16 v37 = v138;
    unsigned __int16 v38 = v139;
    *(void *)int v129 = v134;
    *(_WORD *)&v129[8] = v135;
    unsigned int v130 = v136;
    unsigned __int16 v131 = v137;
    unsigned __int16 v132 = v138;
    unsigned __int16 v133 = v139;
    int v39 = _So9NSDecimala__exponent_getter(v129);
    if (v28 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v28 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v39, v28))
        {
          if (v39 + (int)v28 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_19:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v40 = (void *)swift_allocError();
            *uint64_t v41 = 0;
            swift_willThrow();
            goto LABEL_20;
          }
          *(_DWORD *)int v129 = v30;
          *(_WORD *)&v129[4] = v31;
          *(_WORD *)&v129[6] = v32;
          *(_WORD *)&v129[8] = v33;
          LOWORD(v130) = v34;
          HIWORD(v130) = v35;
          unsigned __int16 v131 = v36;
          unsigned __int16 v132 = v37;
          unsigned __int16 v133 = v38;
          int v79 = _So9NSDecimala__exponent_getter(v129);
          BOOL v80 = __OFADD__(v79, v28);
          uint64_t v81 = (v79 + v28);
          if (!v80)
          {
            _So9NSDecimala__exponent_setter(v81, &v134);
            uint64_t v25 = v128;
            unint64_t v26 = *(void *)(v128 + 16);
            if (HIDWORD(v26)) {
              goto LABEL_162;
            }
            goto LABEL_54;
          }
          __break(1u);
          goto LABEL_160;
        }
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  __int16 v99 = v15;
  unint64_t v110 = v113 | (v15 << 32) | (v127 << 48);
  unint64_t v105 = v125 | (v121 << 16) | (v16 << 32) | (v119 << 48);
  unsigned int v103 = v117 | (v123 << 16);
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  uint64_t v48 = v47;
  unint64_t v101 = v107 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  unint64_t v102 = v5 | (v6 << 32) | (v7 << 48);
  unsigned int v100 = v12 | (v108 << 16);
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v50 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v48, v49);
  swift_bridgeObjectRelease();
  uint64_t v28 = v50;
  swift_bridgeObjectRelease();
  __int16 v51 = v115;
  if (v50 == -1)
  {
    LOWORD(v125) = v12;
    LOWORD(v127) = v11;
    NSDecimal.asVariableLengthInteger()(v102, v101, v100);
    uint64_t v53 = v52;
    NSDecimal.asVariableLengthInteger()(v110, v105, v103);
    uint64_t v28 = v54;
    uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v57 = v55;
    *(void *)(v55 + 32) = 0;
    __int16 v58 = (_WORD *)(v55 + 32);
    *(void *)(v55 + 16) = 8;
    *(void *)(v55 + 40) = 0;
    unint64_t v59 = *(void *)(v53 + 16);
    unint64_t v60 = *(void *)(v28 + 16);
    if (v60 >= v59) {
      uint64_t v61 = *(void *)(v53 + 16);
    }
    else {
      uint64_t v61 = *(void *)(v28 + 16);
    }
    if (v61)
    {
      unsigned int v62 = (*(unsigned __int16 *)(v53 + 32) | 0x10000) - *(unsigned __int16 *)(v28 + 32);
      int v63 = HIWORD(v62);
      *__int16 v58 = *(_WORD *)(v53 + 32) - *(_WORD *)(v28 + 32);
      uint64_t v64 = v61 - 1;
      if (v64)
      {
        unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 34) - *(unsigned __int16 *)(v28 + 34) + 0xFFFF;
        int v63 = HIWORD(v62);
        *(_WORD *)(v55 + 34) = v62;
        if (v64 == 1)
        {
          unint64_t v65 = 2;
        }
        else
        {
          unsigned int v56 = *(unsigned __int16 *)(v28 + 36);
          unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 36) - v56 + 0xFFFF;
          int v63 = HIWORD(v62);
          *(_WORD *)(v55 + 36) = v62;
          if (v64 == 2)
          {
            unint64_t v65 = 3;
          }
          else
          {
            unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 38) - *(unsigned __int16 *)(v28 + 38) + 0xFFFF;
            int v63 = HIWORD(v62);
            *(_WORD *)(v55 + 38) = v62;
            if (v64 == 3)
            {
              unint64_t v65 = 4;
            }
            else
            {
              unsigned int v56 = *(unsigned __int16 *)(v28 + 40);
              unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 40) - v56 + 0xFFFF;
              int v63 = HIWORD(v62);
              *(_WORD *)(v55 + 40) = v62;
              if (v64 == 4)
              {
                unint64_t v65 = 5;
              }
              else
              {
                unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 42) - *(unsigned __int16 *)(v28 + 42) + 0xFFFF;
                int v63 = HIWORD(v62);
                *(_WORD *)(v55 + 42) = v62;
                if (v64 == 5)
                {
                  unint64_t v65 = 6;
                }
                else
                {
                  unsigned int v56 = *(unsigned __int16 *)(v28 + 44);
                  unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 44) - v56 + 0xFFFF;
                  int v63 = HIWORD(v62);
                  *(_WORD *)(v55 + 44) = v62;
                  if (v64 == 6)
                  {
                    unint64_t v65 = 7;
                  }
                  else
                  {
                    int v85 = v63 + *(unsigned __int16 *)(v53 + 46) - *(unsigned __int16 *)(v28 + 46);
                    unsigned int v62 = v85 + 0xFFFF;
                    *(_WORD *)(v55 + 46) = v85 - 1;
                    if (v64 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }
                    unsigned int v56 = v53;
                    int v63 = HIWORD(v62);
                    unint64_t v65 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        unint64_t v65 = 1;
      }
      if (v65 >= v59) {
        goto LABEL_97;
      }
      if (!HIWORD(v62))
      {
        while (v65 < *(void *)(v55 + 16))
        {
          int v86 = *(unsigned __int16 *)(v53 + 32 + 2 * v65);
          unsigned int v56 = v86 + 0xFFFF;
          v58[v65] = v86 - 1;
          if (v59 - 1 == v65) {
            goto LABEL_104;
          }
          ++v65;
          if (v86) {
            goto LABEL_90;
          }
        }
        goto LABEL_152;
      }
    }
    else
    {
      if (!v59)
      {
        if (v60)
        {
          unint64_t v65 = 0;
          int v63 = 1;
          goto LABEL_98;
        }
        uint64_t v83 = 8;
        goto LABEL_107;
      }
      unint64_t v65 = 0;
    }
LABEL_90:
    uint64_t v74 = v53 + 32;
    if (v65 <= v59) {
      unint64_t v76 = v59;
    }
    else {
      unint64_t v76 = v65;
    }
    while (v76 != v65)
    {
      if (v65 >= *(void *)(v55 + 16)) {
        goto LABEL_114;
      }
      v58[v65] = *(_WORD *)(v74 + 2 * v65);
      if ((uint64_t)++v65 >= (uint64_t)v59)
      {
        int v63 = 1;
LABEL_97:
        if ((uint64_t)v65 < (uint64_t)v60)
        {
          while (1)
          {
LABEL_98:
            if (v65 >= v60) {
              goto LABEL_157;
            }
            unint64_t v59 = *(void *)(v55 + 16);
            if (v65 < v59) {
              break;
            }
LABEL_103:
            __break(1u);
LABEL_104:
            int v63 = HIWORD(v56);
            unint64_t v65 = v59;
            if ((uint64_t)v59 >= (uint64_t)v60) {
              goto LABEL_105;
            }
          }
          unsigned int v87 = v63 + (*(unsigned __int16 *)(v28 + 32 + 2 * v65) ^ 0xFFFF);
          --v60;
          unint64_t v59 = v28 + 34;
          while (1)
          {
            int v63 = HIWORD(v87);
            v58[v65] = v87;
            if (v60 == v65) {
              break;
            }
            unsigned int v87 = v63 + (*(unsigned __int16 *)(v59 + 2 * v65++) ^ 0xFFFF);
            if (v65 >= *(void *)(v55 + 16)) {
              goto LABEL_103;
            }
          }
        }
LABEL_105:
        if (!v63) {
          goto LABEL_112;
        }
        uint64_t v83 = *(void *)(v55 + 16);
        if (v83)
        {
LABEL_107:
          if (!v58[v83 - 1])
          {
            do
            {
              *(void *)(v55 + 16) = v83 - 1;
              if (v83 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v55 + 28 + 2 * v83--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v89 = *(void *)(v57 + 16);
        if (!HIDWORD(v89))
        {
          _So9NSDecimala__length_setter(v89, &v134);
          *(_DWORD *)int v129 = v5;
          *(_WORD *)&v129[4] = v106;
          *(_WORD *)&v129[6] = v7;
          *(_WORD *)&v129[8] = v107;
          LOWORD(v130) = v9;
          HIWORD(v130) = v10;
          unsigned __int16 v131 = v127;
          unsigned __int16 v132 = v125;
          unsigned __int16 v133 = v108;
          goto LABEL_145;
        }
LABEL_162:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0);
        *(void *)int v129 = v28;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (!v50)
  {
    LODWORD(v5) = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    unsigned __int16 v18 = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v12) = 0;
    unsigned __int16 v19 = 0;
    goto LABEL_26;
  }
  if (v50 != 1) {
    goto LABEL_163;
  }
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  uint64_t v28 = v66;
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v7 = v67;
  uint64_t v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  uint64_t v57 = v68;
  *(void *)(v68 + 32) = 0;
  __int16 v58 = (_WORD *)(v68 + 32);
  *(void *)(v68 + 16) = 8;
  *(void *)(v68 + 40) = 0;
  unint64_t v59 = *(void *)(v28 + 16);
  unint64_t v60 = *(void *)(v7 + 16);
  if (v60 >= v59) {
    uint64_t v69 = *(void *)(v28 + 16);
  }
  else {
    uint64_t v69 = *(void *)(v7 + 16);
  }
  __int16 v70 = v125;
  unsigned __int16 v71 = v123;
  int v72 = v113;
  __int16 v73 = v121;
  if (v69)
  {
    uint64_t v74 = v28 + 32;
    unsigned int v75 = (*(unsigned __int16 *)(v28 + 32) | 0x10000) - *(unsigned __int16 *)(v7 + 32);
    LODWORD(v76) = HIWORD(v75);
    *__int16 v58 = *(_WORD *)(v28 + 32) - *(_WORD *)(v7 + 32);
    unint64_t v65 = v69 - 1;
    __int16 v77 = v127;
    if (!v65)
    {
      unint64_t v78 = 1;
      goto LABEL_118;
    }
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 34) - *(unsigned __int16 *)(v7 + 34) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 34) = v75;
    if (v65 == 1)
    {
      unint64_t v78 = 2;
      goto LABEL_118;
    }
    unsigned int v56 = *(unsigned __int16 *)(v7 + 36);
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 36) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 36) = v75;
    if (v65 == 2)
    {
      unint64_t v78 = 3;
      goto LABEL_118;
    }
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 38) - *(unsigned __int16 *)(v7 + 38) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 38) = v75;
    if (v65 == 3)
    {
      unint64_t v78 = 4;
      goto LABEL_118;
    }
    unsigned int v56 = *(unsigned __int16 *)(v7 + 40);
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 40) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 40) = v75;
    if (v65 == 4)
    {
      unint64_t v78 = 5;
      goto LABEL_118;
    }
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 42) - *(unsigned __int16 *)(v7 + 42) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 42) = v75;
    if (v65 == 5)
    {
      unint64_t v78 = 6;
      goto LABEL_118;
    }
    unsigned int v56 = *(unsigned __int16 *)(v7 + 44);
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 44) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 44) = v75;
    if (v65 == 6)
    {
      unint64_t v78 = 7;
LABEL_117:
      __int16 v70 = v125;
      __int16 v77 = v127;
      unsigned __int16 v71 = v123;
      int v72 = v113;
      __int16 v51 = v115;
      __int16 v73 = v121;
LABEL_118:
      if (v78 >= v59) {
        goto LABEL_130;
      }
      if (!HIWORD(v75))
      {
        while (v78 < *(void *)(v57 + 16))
        {
          int v92 = *(unsigned __int16 *)(v74 + 2 * v78);
          unsigned int v56 = v92 + 0xFFFF;
          v58[v78] = v92 - 1;
          if (v59 - 1 == v78) {
            goto LABEL_137;
          }
          ++v78;
          if (v92) {
            goto LABEL_123;
          }
        }
        goto LABEL_153;
      }
      goto LABEL_123;
    }
LABEL_115:
    int v91 = v76 + *(unsigned __int16 *)(v28 + 46) - *(unsigned __int16 *)(v7 + 46);
    unsigned int v75 = v91 + 0xFFFF;
    *(_WORD *)(v57 + 46) = v91 - 1;
    if (v65 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }
    LODWORD(v76) = HIWORD(v75);
    unint64_t v78 = 8;
    goto LABEL_117;
  }
  __int16 v77 = v127;
  if (!v59)
  {
    if (v60)
    {
      unint64_t v78 = 0;
      LODWORD(v76) = 1;
      goto LABEL_131;
    }
    uint64_t v84 = 8;
LABEL_140:
    if (!v58[v84 - 1])
    {
      do
      {
        *(void *)(v57 + 16) = v84 - 1;
        if (v84 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v84--));
    }
LABEL_143:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v96 = *(void *)(v57 + 16);
    if (HIDWORD(v96)) {
      goto LABEL_162;
    }
    _So9NSDecimala__length_setter(v96, &v134);
    *(_DWORD *)int v129 = v72;
    *(_WORD *)&v129[4] = v99;
    *(_WORD *)&v129[6] = v77;
    *(_WORD *)&v129[8] = v70;
    LOWORD(v130) = v73;
    HIWORD(v130) = v51;
    unsigned __int16 v131 = v119;
    unsigned __int16 v132 = v117;
    unsigned __int16 v133 = v71;
LABEL_145:
    uint64_t v97 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v97, &v134);
    v82._rawValue = (void *)v57;
    goto LABEL_146;
  }
  unint64_t v78 = 0;
LABEL_123:
  if (v78 <= v59) {
    unint64_t v93 = v59;
  }
  else {
    unint64_t v93 = v78;
  }
  do
  {
    if (v93 == v78)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if (v78 >= *(void *)(v57 + 16)) {
      goto LABEL_151;
    }
    v58[v78] = *(_WORD *)(v28 + 32 + 2 * v78);
    ++v78;
  }
  while ((uint64_t)v78 < (uint64_t)v59);
  LODWORD(v76) = 1;
LABEL_130:
  if ((uint64_t)v78 < (uint64_t)v60)
  {
    while (1)
    {
LABEL_131:
      if (v78 >= v60) {
        goto LABEL_158;
      }
      unint64_t v59 = *(void *)(v57 + 16);
      if (v78 < v59) {
        break;
      }
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v76) = HIWORD(v56);
      unint64_t v78 = v59;
      if ((uint64_t)v59 >= (uint64_t)v60) {
        goto LABEL_138;
      }
    }
    unsigned int v94 = v76 + (*(unsigned __int16 *)(v7 + 32 + 2 * v78) ^ 0xFFFF);
    --v60;
    unint64_t v59 = v7 + 34;
    while (1)
    {
      LODWORD(v76) = HIWORD(v94);
      v58[v78] = v94;
      if (v60 == v78) {
        break;
      }
      unsigned int v94 = v76 + (*(unsigned __int16 *)(v59 + 2 * v78++) ^ 0xFFFF);
      if (v78 >= *(void *)(v57 + 16)) {
        goto LABEL_136;
      }
    }
  }
LABEL_138:
  if (v76)
  {
    uint64_t v84 = *(void *)(v57 + 16);
    if (v84) {
      goto LABEL_140;
    }
    goto LABEL_143;
  }
LABEL_112:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v40 = (void *)swift_allocError();
  *uint64_t v90 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  v152[0] = v40;
  id v42 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast()) {
    uint64_t v43 = qword_18218CCE0[(char)v146];
  }
  else {
    uint64_t v43 = 0;
  }
  *(_OWORD *)((char *)v152 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v152);
  _So9NSDecimala__length_setter(0, v152);
  _So9NSDecimala__isNegative_setter(1, v152);
  _So9NSDecimala__isCompact_setter(v152);
  _So9NSDecimala__reserved_setter(v152);
  long long v44 = *(_OWORD *)((char *)v152 + 4);
  *(_DWORD *)a1 = v152[0];
  *(_OWORD *)(a1 + 4) = v44;

  return v43;
}

unint64_t specialized static NSDecimal._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, sel_decimalValue);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    _So9NSDecimala__exponent_setter(0, &v2);
    _So9NSDecimala__length_setter(0, &v2);
    _So9NSDecimala__isNegative_setter(0, &v2);
    _So9NSDecimala__isCompact_setter(&v2);
    _So9NSDecimala__reserved_setter(&v2);
  }
  return v2 | ((unint64_t)(unsigned __int16)v3 << 32) | ((unint64_t)WORD1(v3) << 48);
}

uint64_t specialized __NSDecimalMultiplyByPowerOf10(_:_:_:_:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(void *)a1 = specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)(a3, *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return 0;
}

uint64_t specialized __NSDecimalNormalize(_:_:_:)(uint64_t a1, int *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v8[0] = *(_DWORD *)a1;
  *(_OWORD *)&v8[1] = *(_OWORD *)(a1 + 4);
  int v6 = *a2;
  long long v7 = *(_OWORD *)(a2 + 1);
  char v4 = specialized static NSDecimal._normalize(a:b:roundingMode:)(v8, (uint64_t)&v6);
  *(_DWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 4) = *(_OWORD *)&v8[1];
  *a2 = v6;
  *(_OWORD *)(a2 + 1) = v7;
  return v4 & 1;
}

uint64_t closure #1 in _ProcessInfo.processName.setter(void *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t _ProcessInfo.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

void *assignWithCopy for _ProcessInfo.State(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ProcessInfo.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ProcessInfo.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

id closure #1 in _ProcessInfo.hostName.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    *a2 = *a1;
    a2[1] = v4;
    return (id)swift_bridgeObjectRetain();
  }
  id result = (id)_getCurrentNSHostName();
  if (result)
  {
    int v6 = result;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v9 = v8;

    *a1 = v7;
    a1[1] = v9;
    *a2 = v7;
    a2[1] = v9;
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t specialized _ProcessInfo.activeProcessorCount.getter()
{
  return specialized _ProcessInfo.processorCount.getter(COERCE_DOUBLE(0x1900000006));
}

uint64_t ICUNumberFormatterBase.__deallocating_deinit()
{
  unumf_close();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUNumberFormatterBase()
{
  return self;
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = unumf_openResult();
  if (!v8) {
LABEL_14:
  }
    __break(1u);
  *(void *)(v4 + 16) = v8;
  v17[0] = a2;
  v17[1] = a3;
  int v18 = a4;
  memset(v19, 0, sizeof(v19));
  uint64_t v9 = __NSDecimalString(_:_:)((uint64_t)v17, (uint64_t)v19);
  uint64_t v11 = v10;
  outlined destroy of Any?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if ((v11 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = static String._copying(_:)();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v11 = v14;
    if ((v14 & 0x2000000000000000) == 0)
    {
LABEL_4:
      if ((v9 & 0x1000000000000000) != 0)
      {
        uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        _StringObject.sharedUTF8.getter();
        if (v16 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
        uint64_t v12 = v16;
      }
      if (v12 <= 0x7FFFFFFF) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
  else if ((v11 & 0x2000000000000000) == 0)
  {
    goto LABEL_4;
  }
  *(void *)&v19[0] = v9;
  *((void *)&v19[0] + 1) = v11 & 0xFFFFFFFFFFFFFFLL;
LABEL_10:
  unumf_formatDecimal();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = unumf_openResult();
  if (!v6) {
LABEL_13:
  }
    __break(1u);
  *(void *)(v3 + 16) = v6;
  if ((a3 & 0x1000000000000000) != 0)
  {
    a2 = static String._copying(_:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 0x2000000000000000) == 0)
    {
LABEL_4:
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        _StringObject.sharedUTF8.getter();
        if (v11 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
        uint64_t v7 = v11;
      }
      if (v7 <= 0x7FFFFFFF) {
        goto LABEL_9;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x2000000000000000) == 0)
  {
    goto LABEL_4;
  }
LABEL_9:
  unumf_formatDecimal();
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUNumberFormatter.Signature()
{
  return ICUNumberFormatter.Signature.hashValue.getter(type metadata accessor for ICUNumberFormatter.Signature);
}

void protocol witness for Hashable.hash(into:) in conformance ICUNumberFormatter.Signature(uint64_t a1)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)(a1, a2, type metadata accessor for ICUNumberFormatter.Signature);
}

void ICUCurrencyNumberFormatter.Signature.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v11 = *(void *)v1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  unint64_t v15 = *(unsigned int *)(v1 + 74);
  if (*(_DWORD *)(v1 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    unsigned int v16 = BYTE3(v15) & 1;
  }
  Hasher._combine(_:)(v16);
  int v17 = *(unsigned __int8 *)(v1 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  unsigned __int16 v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v1 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v20 = v1 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if (v21)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0;
      }
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v19[11]));
  Swift::UInt v24 = *(unsigned __int8 *)(v1 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  uint64_t v25 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v2 + *(int *)(v25 + 28), (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v60, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60 == 2)
  {
    Swift::UInt8 v26 = 0;
  }
  else
  {
    Swift::UInt8 v26 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v26);
  uint64_t v27 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v60);
    __int16 v32 = &v60;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v27 + 16));
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    __int16 v32 = (uint64_t *)v59;
LABEL_46:
    outlined retain of LocalePreferences(v32);
    if (!v62) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16;
    --v28;
  }
  while (v28);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v63) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = v65;
    if (!v65) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v64;
  if (v64) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  uint64_t v31 = v65;
  if (!v65)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v31);
  swift_bridgeObjectRelease();
LABEL_51:
  __int16 v34 = v66;
  unsigned __int16 v33 = v67;
  unsigned __int16 v36 = v68;
  __int16 v35 = v69;
  unsigned __int16 v37 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v38 = v33;
    id v39 = v36;
    id v40 = v35;
    id v41 = v37;
    id v42 = v34;
    _CFObject.hash(into:)();
    if (v33) {
      goto LABEL_53;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v47 = v37;
    id v48 = v33;
    id v49 = v36;
    id v50 = v35;
    if (v33)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v43 = v33;
      _CFObject.hash(into:)();

      if (v36) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v44 = v36;
    _CFObject.hash(into:)();

    if (v35) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v37) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v35) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  id v46 = 0;
LABEL_62:

  uint64_t v51 = v71;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v51);
    swift_bridgeObjectRelease();
    uint64_t v52 = v72;
    if (v72) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v73) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  uint64_t v52 = v72;
  if (!v72) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v52);
  swift_bridgeObjectRelease();
  if (!v73) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v76 == 2)
  {
    Swift::UInt8 v55 = 0;
  }
  else
  {
    Swift::UInt8 v55 = v76 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v77 == 2)
  {
    Swift::UInt8 v56 = 0;
  }
  else
  {
    Swift::UInt8 v57 = v77 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int ICUCurrencyNumberFormatter.Signature.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v58[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v58[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v9 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v10 = v9;
    }
    else {
      Swift::UInt64 v10 = 0;
    }
    Hasher._combine(_:)(v10);
  }
  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v11 = *(unsigned __int8 *)(v0 + 73);
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v12 = v11 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
  unint64_t v13 = *(unsigned int *)(v0 + 74);
  if (*(_DWORD *)(v0 + 74) == 2)
  {
    LOBYTE(v14) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v13) & 1);
    unsigned int v14 = BYTE3(v13) & 1;
  }
  Hasher._combine(_:)(v14);
  int v15 = *(unsigned __int8 *)(v0 + 78);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v16 = v15 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
  int v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v0 + v17[9], (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v18 = v0 + v17[10];
  int v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v20 = *(void *)v18;
    Hasher._combine(_:)(1u);
    if (v19)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v21 = v20;
      }
      else {
        Swift::UInt64 v21 = 0;
      }
      Hasher._combine(_:)(v21);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v20);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + v17[11]));
  Swift::UInt v22 = *(unsigned __int8 *)(v0 + v17[12]);
  if (v22 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
  }
  uint64_t v23 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + *(int *)(v23 + 28), (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v59, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    Swift::UInt8 v24 = 0;
  }
  else
  {
    Swift::UInt8 v24 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v24);
  uint64_t v25 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v59);
    uint64_t v30 = &v59;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v25 + 16));
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v30 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v30);
    if (!v61) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v27 = v25 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v27 += 16;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v28 = v63;
    if (!v63) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v64;
    if (!v64) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = v63;
  if (v63) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  uint64_t v29 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
  swift_bridgeObjectRelease();
LABEL_51:
  __int16 v32 = v65;
  uint64_t v31 = v66;
  __int16 v34 = v67;
  unsigned __int16 v33 = v68;
  __int16 v35 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v36 = v31;
    id v37 = v34;
    id v38 = v33;
    id v39 = v35;
    id v40 = v32;
    _CFObject.hash(into:)();
    if (v31) {
      goto LABEL_53;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v45 = v35;
    id v46 = v31;
    id v47 = v34;
    id v48 = v33;
    if (v31)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v41 = v31;
      _CFObject.hash(into:)();

      if (v34) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v42 = v34;
    _CFObject.hash(into:)();

    if (v33) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v35) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v33) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  id v44 = 0;
LABEL_62:

  uint64_t v49 = v70;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v49);
    swift_bridgeObjectRelease();
    uint64_t v50 = v71;
    if (v71) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  uint64_t v50 = v71;
  if (!v71) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v51 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v52 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v75 == 2)
  {
    Swift::UInt8 v53 = 0;
  }
  else
  {
    Swift::UInt8 v53 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v53);
  if (v76 == 2)
  {
    Swift::UInt8 v54 = 0;
  }
  else
  {
    Swift::UInt8 v55 = v76 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v54 = v55;
  }
  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  Swift::UInt64 v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)();
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v11 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v2 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v2 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  unint64_t v15 = *(unsigned int *)(v2 + 74);
  if (*(_DWORD *)(v2 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    unsigned int v16 = BYTE3(v15) & 1;
  }
  Hasher._combine(_:)(v16);
  int v17 = *(unsigned __int8 *)(v2 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  int v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v2 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v20 = v2 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if (v21)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0;
      }
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v19[11]));
  Swift::UInt v24 = *(unsigned __int8 *)(v2 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v2 + *(int *)(a2 + 28), (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v59, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    Swift::UInt8 v25 = 0;
  }
  else
  {
    Swift::UInt8 v25 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v25);
  uint64_t v26 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = &v59;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v26 + 16));
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v31 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v31);
    outlined retain of LocalePreferences(&v59);
    if (!v61) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v29 = v63;
    if (!v63) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v63;
  if (v63) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  uint64_t v30 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v30);
  swift_bridgeObjectRelease();
LABEL_51:
  unsigned __int16 v33 = v65;
  __int16 v32 = v66;
  __int16 v35 = v67;
  __int16 v34 = v68;
  id v36 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v37 = v32;
    id v38 = v35;
    id v39 = v34;
    id v40 = v36;
    id v41 = v33;
    _CFObject.hash(into:)();
    if (v32) {
      goto LABEL_53;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v46 = v36;
    id v47 = v32;
    id v48 = v35;
    id v49 = v34;
    if (v32)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v42 = v32;
      _CFObject.hash(into:)();

      if (v35) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v43 = v35;
    _CFObject.hash(into:)();

    if (v34) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v36) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v34) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  id v45 = 0;
LABEL_62:

  uint64_t v50 = v70;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
    swift_bridgeObjectRelease();
    uint64_t v51 = v71;
    if (v71) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  uint64_t v51 = v71;
  if (!v71) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v51);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    Swift::UInt8 v54 = 0;
  }
  else
  {
    Swift::UInt8 v54 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v54);
  if (v76 == 2)
  {
    Swift::UInt8 v55 = 0;
  }
  else
  {
    Swift::UInt8 v56 = v76 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v55 = v56;
  }
  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t static ICUCurrencyNumberFormatter.create<A>(for:)(void *a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_unfair_lock_s *v73;
  uint64_t v74;
  void v75[19];
  void *v76;
  void v77[18];
  unsigned char v78[152];

  uint64_t v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  uint64_t v69 = *((void *)v2 - 1);
  MEMORY[0x1F4188790](v2);
  uint64_t v70 = (uint64_t)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v64 - v5;
  char v73 = (os_unfair_lock_s *)((char *)a1 + *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40));
  uint64_t v7 = a1[3];
  char v74 = a1[2];
  uint64_t v72 = v7;
  uint64_t v8 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt64 v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v11 = v10(ObjectType, v8);
  uint64_t v13 = v12;
  swift_unknownObjectRelease();
  Swift::UInt v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v14(v77, ObjectType, v8);
  unint64_t v15 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUPercentNumberFormatter.Signature((uint64_t)v73, (uint64_t)v6, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  unsigned int v16 = (uint64_t *)&v6[v2[5]];
  int v17 = v72;
  *unsigned int v16 = v74;
  v16[1] = v17;
  Swift::UInt v18 = (uint64_t *)&v6[v2[6]];
  *Swift::UInt v18 = v11;
  v18[1] = v13;
  uint64_t v72 = (uint64_t)v2;
  int v19 = (uint64_t)&v6[v2[7]];
  uint64_t v20 = outlined init with take of LocalePreferences?((uint64_t)v78, v19, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v20 = swift_once();
  }
  int v21 = qword_1E8ED9480;
  char v74 = static ICUCurrencyNumberFormatter.cache;
  MEMORY[0x1F4188790](v20);
  *(&v64 - 2) = (uint64_t)v6;
  Swift::UInt v22 = (void *)(v21 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 24));
  closure #1 in FormatterCache.formatter(for:creator:)specialized partial apply(v21 + 16, (uint64_t *)&v76);
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 24));
  swift_release();
  Swift::UInt64 v23 = v76;
  if (v76 != (void *)1) {
    goto LABEL_53;
  }
  Swift::UInt v24 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v15);
  uint64_t v26 = v25;
  char v73 = (os_unfair_lock_s *)(v21 + 24);
  uint64_t v27 = *v18;
  uint64_t v28 = v18[1];
  outlined init with take of LocalePreferences?(v19, (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t v29 = v28;
  uint64_t v30 = v73;
  Swift::UInt64 v23 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v24, v26, v27, v29, (uint64_t)v75);
  swift_retain();
  os_unfair_lock_lock(v30);
  uint64_t v31 = *(void *)(*(void *)(v21 + 16) + 16);
  uint64_t v71 = *(void *)(v21 + 16);
  if (v74 >= v31) {
    swift_bridgeObjectRetain();
  }
  else {
    *Swift::UInt v22 = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v75[0] = *v22;
  unsigned __int16 v33 = v75[0];
  *Swift::UInt v22 = 0x8000000000000000;
  __int16 v35 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
  id v36 = *(void *)(v33 + 16);
  id v37 = (v34 & 1) == 0;
  id v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v22) = v34;
    if (*(void *)(v33 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      id v39 = v75[0];
      id v40 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v22 & 1) != (v41 & 1)) {
        goto LABEL_56;
      }
      __int16 v35 = v40;
      if ((v22 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      id v42 = *(void *)(v39 + 56);
      id v43 = 8 * v35;
      swift_release();
      *(void *)(v42 + v43) = v23;
LABEL_52:
      *(void *)(v21 + 16) = v39;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v30);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v76);
LABEL_53:
      swift_release();
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(v15, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v23;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      id v39 = v33;
      if (v34) {
        goto LABEL_14;
      }
LABEL_51:
      uint64_t v61 = v70;
      uint64_t v62 = v35;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v15, v70, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v62, v61, (uint64_t)v23, (void *)v39);
      goto LABEL_52;
    }
  }
  uint64_t v65 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  id v44 = static _DictionaryStorage.copy(original:)();
  id v39 = v44;
  if (!*(void *)(v33 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    __int16 v35 = v65;
    if (v22) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  uint64_t v66 = v15;
  id v45 = (char *)(v44 + 64);
  id v46 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v68 = (char *)(v33 + 64);
  id v47 = (unint64_t)(v46 + 63) >> 6;
  if (v39 != v33 || v45 >= &v68[8 * v47]) {
    memmove(v45, v68, 8 * v47);
  }
  id v48 = 0;
  *(void *)(v39 + 16) = *(void *)(v33 + 16);
  id v49 = 1 << *(unsigned char *)(v33 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  uint64_t v51 = v50 & *(void *)(v33 + 64);
  uint64_t v67 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    uint64_t v30 = v73;
    if (v51)
    {
      uint64_t v72 = (v51 - 1) & v51;
      char v74 = v48;
      Swift::UInt v52 = __clz(__rbit64(v51)) | (v48 << 6);
      goto LABEL_24;
    }
    Swift::UInt8 v57 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v15 = v66;
    if (v57 >= v67) {
      goto LABEL_50;
    }
    __int16 v58 = *(void *)&v68[8 * v57];
    uint64_t v59 = v48 + 1;
    if (!v58)
    {
      uint64_t v59 = v48 + 2;
      if (v48 + 2 >= v67) {
        goto LABEL_50;
      }
      __int16 v58 = *(void *)&v68[8 * v59];
      if (!v58)
      {
        uint64_t v59 = v48 + 3;
        if (v48 + 3 >= v67) {
          goto LABEL_50;
        }
        __int16 v58 = *(void *)&v68[8 * v59];
        if (!v58)
        {
          uint64_t v59 = v48 + 4;
          if (v48 + 4 >= v67) {
            goto LABEL_50;
          }
          __int16 v58 = *(void *)&v68[8 * v59];
          if (!v58)
          {
            uint64_t v59 = v48 + 5;
            if (v48 + 5 >= v67) {
              goto LABEL_50;
            }
            __int16 v58 = *(void *)&v68[8 * v59];
            if (!v58)
            {
              uint64_t v59 = v48 + 6;
              if (v48 + 6 >= v67) {
                goto LABEL_50;
              }
              __int16 v58 = *(void *)&v68[8 * v59];
              if (!v58)
              {
                uint64_t v59 = v48 + 7;
                if (v48 + 7 >= v67) {
                  goto LABEL_50;
                }
                __int16 v58 = *(void *)&v68[8 * v59];
                if (!v58)
                {
                  uint64_t v59 = v48 + 8;
                  if (v48 + 8 >= v67) {
                    goto LABEL_50;
                  }
                  __int16 v58 = *(void *)&v68[8 * v59];
                  if (!v58) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    uint64_t v72 = (v58 - 1) & v58;
    char v74 = v59;
    Swift::UInt v52 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_24:
    Swift::UInt v53 = v70;
    Swift::UInt8 v54 = *(void *)(v69 + 72) * v52;
    outlined init with copy of ICUPercentNumberFormatter.Signature(*(void *)(v33 + 48) + v54, v70, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    Swift::UInt8 v55 = 8 * v52;
    Swift::UInt8 v56 = *(void *)(*(void *)(v33 + 56) + 8 * v52);
    outlined init with take of ICUPercentNumberFormatter.Signature(v53, *(void *)(v39 + 48) + v54, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v39 + 56) + v55) = v56;
    swift_retain();
    id v48 = v74;
    uint64_t v51 = v72;
  }
  uint64_t v60 = v48 + 9;
  if (v48 + 9 >= v67) {
    goto LABEL_50;
  }
  __int16 v58 = *(void *)&v68[8 * v60];
  if (v58)
  {
    uint64_t v59 = v48 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v59 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      break;
    }
    unint64_t v15 = v66;
    uint64_t v30 = v73;
    if (v59 >= v67) {
      goto LABEL_50;
    }
    __int16 v58 = *(void *)&v68[8 * v59];
    ++v60;
    if (v58) {
      goto LABEL_49;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_unfair_lock_s *v73;
  uint64_t v74;
  void v75[19];
  void *v76;
  void v77[18];
  unsigned char v78[152];

  uint64_t v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  uint64_t v69 = *((void *)v2 - 1);
  MEMORY[0x1F4188790](v2);
  uint64_t v70 = (uint64_t)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v64 - v5;
  char v73 = (os_unfair_lock_s *)((char *)a1 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40));
  uint64_t v7 = a1[3];
  char v74 = a1[2];
  uint64_t v72 = v7;
  uint64_t v8 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt64 v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v11 = v10(ObjectType, v8);
  uint64_t v13 = v12;
  swift_unknownObjectRelease();
  Swift::UInt v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v14(v77, ObjectType, v8);
  unint64_t v15 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUPercentNumberFormatter.Signature((uint64_t)v73, (uint64_t)v6, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  unsigned int v16 = (uint64_t *)&v6[v2[5]];
  int v17 = v72;
  *unsigned int v16 = v74;
  v16[1] = v17;
  Swift::UInt v18 = (uint64_t *)&v6[v2[6]];
  *Swift::UInt v18 = v11;
  v18[1] = v13;
  uint64_t v72 = (uint64_t)v2;
  int v19 = (uint64_t)&v6[v2[7]];
  uint64_t v20 = outlined init with take of LocalePreferences?((uint64_t)v78, v19, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v20 = swift_once();
  }
  int v21 = qword_1E8ED9480;
  char v74 = static ICUCurrencyNumberFormatter.cache;
  MEMORY[0x1F4188790](v20);
  *(&v64 - 2) = (uint64_t)v6;
  Swift::UInt v22 = (void *)(v21 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 24));
  closure #1 in FormatterCache.formatter(for:creator:)specialized partial apply(v21 + 16, (uint64_t *)&v76);
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 24));
  swift_release();
  Swift::UInt64 v23 = v76;
  if (v76 != (void *)1) {
    goto LABEL_53;
  }
  Swift::UInt v24 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v15);
  uint64_t v26 = v25;
  char v73 = (os_unfair_lock_s *)(v21 + 24);
  uint64_t v27 = *v18;
  uint64_t v28 = v18[1];
  outlined init with take of LocalePreferences?(v19, (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t v29 = v28;
  uint64_t v30 = v73;
  Swift::UInt64 v23 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v24, v26, v27, v29, (uint64_t)v75);
  swift_retain();
  os_unfair_lock_lock(v30);
  uint64_t v31 = *(void *)(*(void *)(v21 + 16) + 16);
  uint64_t v71 = *(void *)(v21 + 16);
  if (v74 >= v31) {
    swift_bridgeObjectRetain();
  }
  else {
    *Swift::UInt v22 = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v75[0] = *v22;
  unsigned __int16 v33 = v75[0];
  *Swift::UInt v22 = 0x8000000000000000;
  __int16 v35 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
  id v36 = *(void *)(v33 + 16);
  id v37 = (v34 & 1) == 0;
  id v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v22) = v34;
    if (*(void *)(v33 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      id v39 = v75[0];
      id v40 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v22 & 1) != (v41 & 1)) {
        goto LABEL_56;
      }
      __int16 v35 = v40;
      if ((v22 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      id v42 = *(void *)(v39 + 56);
      id v43 = 8 * v35;
      swift_release();
      *(void *)(v42 + v43) = v23;
LABEL_52:
      *(void *)(v21 + 16) = v39;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v30);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v76);
LABEL_53:
      swift_release();
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(v15, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v23;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      id v39 = v33;
      if (v34) {
        goto LABEL_14;
      }
LABEL_51:
      uint64_t v61 = v70;
      uint64_t v62 = v35;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v15, v70, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v62, v61, (uint64_t)v23, (void *)v39);
      goto LABEL_52;
    }
  }
  uint64_t v65 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  id v44 = static _DictionaryStorage.copy(original:)();
  id v39 = v44;
  if (!*(void *)(v33 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    __int16 v35 = v65;
    if (v22) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  uint64_t v66 = v15;
  id v45 = (char *)(v44 + 64);
  id v46 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v68 = (char *)(v33 + 64);
  id v47 = (unint64_t)(v46 + 63) >> 6;
  if (v39 != v33 || v45 >= &v68[8 * v47]) {
    memmove(v45, v68, 8 * v47);
  }
  id v48 = 0;
  *(void *)(v39 + 16) = *(void *)(v33 + 16);
  id v49 = 1 << *(unsigned char *)(v33 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  uint64_t v51 = v50 & *(void *)(v33 + 64);
  uint64_t v67 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    uint64_t v30 = v73;
    if (v51)
    {
      uint64_t v72 = (v51 - 1) & v51;
      char v74 = v48;
      Swift::UInt v52 = __clz(__rbit64(v51)) | (v48 << 6);
      goto LABEL_24;
    }
    Swift::UInt8 v57 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v15 = v66;
    if (v57 >= v67) {
      goto LABEL_50;
    }
    __int16 v58 = *(void *)&v68[8 * v57];
    uint64_t v59 = v48 + 1;
    if (!v58)
    {
      uint64_t v59 = v48 + 2;
      if (v48 + 2 >= v67) {
        goto LABEL_50;
      }
      __int16 v58 = *(void *)&v68[8 * v59];
      if (!v58)
      {
        uint64_t v59 = v48 + 3;
        if (v48 + 3 >= v67) {
          goto LABEL_50;
        }
        __int16 v58 = *(void *)&v68[8 * v59];
        if (!v58)
        {
          uint64_t v59 = v48 + 4;
          if (v48 + 4 >= v67) {
            goto LABEL_50;
          }
          __int16 v58 = *(void *)&v68[8 * v59];
          if (!v58)
          {
            uint64_t v59 = v48 + 5;
            if (v48 + 5 >= v67) {
              goto LABEL_50;
            }
            __int16 v58 = *(void *)&v68[8 * v59];
            if (!v58)
            {
              uint64_t v59 = v48 + 6;
              if (v48 + 6 >= v67) {
                goto LABEL_50;
              }
              __int16 v58 = *(void *)&v68[8 * v59];
              if (!v58)
              {
                uint64_t v59 = v48 + 7;
                if (v48 + 7 >= v67) {
                  goto LABEL_50;
                }
                __int16 v58 = *(void *)&v68[8 * v59];
                if (!v58)
                {
                  uint64_t v59 = v48 + 8;
                  if (v48 + 8 >= v67) {
                    goto LABEL_50;
                  }
                  __int16 v58 = *(void *)&v68[8 * v59];
                  if (!v58) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    uint64_t v72 = (v58 - 1) & v58;
    char v74 = v59;
    Swift::UInt v52 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_24:
    Swift::UInt v53 = v70;
    Swift::UInt8 v54 = *(void *)(v69 + 72) * v52;
    outlined init with copy of ICUPercentNumberFormatter.Signature(*(void *)(v33 + 48) + v54, v70, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    Swift::UInt8 v55 = 8 * v52;
    Swift::UInt8 v56 = *(void *)(*(void *)(v33 + 56) + 8 * v52);
    outlined init with take of ICUPercentNumberFormatter.Signature(v53, *(void *)(v39 + 48) + v54, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v39 + 56) + v55) = v56;
    swift_retain();
    id v48 = v74;
    uint64_t v51 = v72;
  }
  uint64_t v60 = v48 + 9;
  if (v48 + 9 >= v67) {
    goto LABEL_50;
  }
  __int16 v58 = *(void *)&v68[8 * v60];
  if (v58)
  {
    uint64_t v59 = v48 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v59 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      break;
    }
    unint64_t v15 = v66;
    uint64_t v30 = v73;
    if (v59 >= v67) {
      goto LABEL_50;
    }
    __int16 v58 = *(void *)&v68[8 * v59];
    ++v60;
    if (v58) {
      goto LABEL_49;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ICUCurrencyNumberFormatter()
{
  return self;
}

void ICUNumberFormatter.Signature.hash(into:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v59 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v60[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v12 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v13 = v12;
    }
    else {
      Swift::UInt64 v13 = 0;
    }
    Hasher._combine(_:)(v13);
  }
  outlined init with take of LocalePreferences?(v2 + 16, (uint64_t)v81, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v14 = *(unsigned __int8 *)(v2 + 73);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  int v16 = *(unsigned __int16 *)(v2 + 74);
  unsigned int v17 = v16 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17 & 1);
    Hasher._combine(_:)((v17 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v17) & 1);
  }
  int v18 = *(unsigned __int8 *)(v2 + 77);
  if (v18 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v19 = v18 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }
  uint64_t v20 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v2 + v20[9], (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v21 = v2 + v20[10];
  int v22 = *(unsigned __int8 *)(v21 + 8);
  if (v22 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v23 = *(void *)v21;
    Hasher._combine(_:)(1u);
    if (v22)
    {
      Hasher._combine(_:)(1uLL);
      if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v24 = v23;
      }
      else {
        Swift::UInt64 v24 = 0;
      }
      Hasher._combine(_:)(v24);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v23);
    }
  }
  Swift::UInt v25 = *(unsigned __int8 *)(v2 + v20[11]);
  if (v25 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
  }
  uint64_t v26 = v59(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v3 + *(int *)(v26 + 24), (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v80) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v61, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v61 == 2)
  {
    Swift::UInt8 v27 = 0;
  }
  else
  {
    Swift::UInt8 v27 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v27);
  uint64_t v28 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v61);
    unsigned __int16 v33 = &v61;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v28 + 16));
  uint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v60, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    unsigned __int16 v33 = (uint64_t *)v60;
LABEL_46:
    outlined retain of LocalePreferences(v33);
    if (!v63) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v30 = v28 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v30 += 16;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v64) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v31 = v65;
    if (!v65) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v31);
    swift_bridgeObjectRelease();
    uint64_t v32 = v66;
    if (!v66) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = v65;
  if (v65) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  uint64_t v32 = v66;
  if (!v66)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v32);
  swift_bridgeObjectRelease();
LABEL_51:
  __int16 v35 = v67;
  __int16 v34 = v68;
  id v37 = v69;
  id v36 = v70;
  id v38 = v71;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v39 = v34;
    id v40 = v37;
    id v41 = v36;
    id v42 = v38;
    id v43 = v35;
    _CFObject.hash(into:)();
    if (v34) {
      goto LABEL_53;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v48 = v38;
    id v49 = v34;
    id v50 = v37;
    id v51 = v36;
    if (v34)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v44 = v34;
      _CFObject.hash(into:)();

      if (v37) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v37)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v45 = v37;
    _CFObject.hash(into:)();

    if (v36) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v38) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v36) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v46 = v36;
  _CFObject.hash(into:)();

  if (v38)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v47 = v38;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  id v47 = 0;
LABEL_62:

  uint64_t v52 = v72;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v52);
    swift_bridgeObjectRelease();
    uint64_t v53 = v73;
    if (v73) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v74) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  uint64_t v53 = v73;
  if (!v73) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v53);
  swift_bridgeObjectRelease();
  if (!v74) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v55 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v55);
  }
  if (v77 == 2)
  {
    Swift::UInt8 v56 = 0;
  }
  else
  {
    Swift::UInt8 v56 = v77 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v56);
  if (v78 == 2)
  {
    Swift::UInt8 v57 = 0;
  }
  else
  {
    Swift::UInt8 v58 = v78 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v57 = v58;
  }
  Hasher._combine(_:)(v57);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int ICUNumberFormatter.Signature.hashValue.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)();
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v11 = *(void *)v1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v81, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  int v15 = *(unsigned __int16 *)(v1 + 74);
  unsigned int v16 = v15 | (*(unsigned __int8 *)(v1 + 76) << 16);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16 & 1);
    Hasher._combine(_:)((v16 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v16) & 1);
  }
  int v17 = *(unsigned __int8 *)(v1 + 77);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  Swift::UInt v19 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v1 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v20 = v1 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if (v21)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0;
      }
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Swift::UInt v24 = *(unsigned __int8 *)(v1 + v19[11]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  uint64_t v25 = a1(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v3 + *(int *)(v25 + 24), (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v60, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60 == 2)
  {
    Swift::UInt8 v26 = 0;
  }
  else
  {
    Swift::UInt8 v26 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v26);
  uint64_t v27 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v60);
    uint64_t v32 = &v60;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v27 + 16));
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v32 = (uint64_t *)v59;
LABEL_46:
    outlined retain of LocalePreferences(v32);
    if (!v62) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16;
    --v28;
  }
  while (v28);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v63) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = v65;
    if (!v65) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v64;
  if (v64) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  uint64_t v31 = v65;
  if (!v65)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v31);
  swift_bridgeObjectRelease();
LABEL_51:
  __int16 v34 = v66;
  unsigned __int16 v33 = v67;
  id v36 = v68;
  __int16 v35 = v69;
  id v37 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v38 = v33;
    id v39 = v36;
    id v40 = v35;
    id v41 = v37;
    id v42 = v34;
    _CFObject.hash(into:)();
    if (v33) {
      goto LABEL_53;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v47 = v37;
    id v48 = v33;
    id v49 = v36;
    id v50 = v35;
    if (v33)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v43 = v33;
      _CFObject.hash(into:)();

      if (v36) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v44 = v36;
    _CFObject.hash(into:)();

    if (v35) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v37) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v35) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  id v46 = 0;
LABEL_62:

  uint64_t v51 = v71;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v51);
    swift_bridgeObjectRelease();
    uint64_t v52 = v72;
    if (v72) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v73) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  uint64_t v52 = v72;
  if (!v72) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v52);
  swift_bridgeObjectRelease();
  if (!v73) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v76 == 2)
  {
    Swift::UInt8 v55 = 0;
  }
  else
  {
    Swift::UInt8 v55 = v76 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v77 == 2)
  {
    Swift::UInt8 v56 = 0;
  }
  else
  {
    Swift::UInt8 v57 = v77 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUPercentNumberFormatter.Signature()
{
  return ICUNumberFormatter.Signature.hashValue.getter(type metadata accessor for ICUPercentNumberFormatter.Signature);
}

void protocol witness for Hashable.hash(into:) in conformance ICUPercentNumberFormatter.Signature(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)();
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v11 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v2 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v2 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  int v15 = *(unsigned __int16 *)(v2 + 74);
  unsigned int v16 = v15 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16 & 1);
    Hasher._combine(_:)((v16 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v16) & 1);
  }
  int v17 = *(unsigned __int8 *)(v2 + 77);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  Swift::UInt v19 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v2 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v20 = v2 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if (v21)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0;
      }
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Swift::UInt v24 = *(unsigned __int8 *)(v2 + v19[11]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v2 + *(int *)(a2 + 24), (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v59, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    Swift::UInt8 v25 = 0;
  }
  else
  {
    Swift::UInt8 v25 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v25);
  uint64_t v26 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = &v59;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v26 + 16));
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v31 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v31);
    outlined retain of LocalePreferences(&v59);
    if (!v61) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v29 = v63;
    if (!v63) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v63;
  if (v63) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  uint64_t v30 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v30);
  swift_bridgeObjectRelease();
LABEL_51:
  unsigned __int16 v33 = v65;
  uint64_t v32 = v66;
  __int16 v35 = v67;
  __int16 v34 = v68;
  id v36 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v37 = v32;
    id v38 = v35;
    id v39 = v34;
    id v40 = v36;
    id v41 = v33;
    _CFObject.hash(into:)();
    if (v32) {
      goto LABEL_53;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v46 = v36;
    id v47 = v32;
    id v48 = v35;
    id v49 = v34;
    if (v32)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v42 = v32;
      _CFObject.hash(into:)();

      if (v35) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v43 = v35;
    _CFObject.hash(into:)();

    if (v34) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v36) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v34) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  id v45 = 0;
LABEL_62:

  uint64_t v50 = v70;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
    swift_bridgeObjectRelease();
    uint64_t v51 = v71;
    if (v71) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  uint64_t v51 = v71;
  if (!v71) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v51);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    Swift::UInt8 v54 = 0;
  }
  else
  {
    Swift::UInt8 v54 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v54);
  if (v76 == 2)
  {
    Swift::UInt8 v55 = 0;
  }
  else
  {
    Swift::UInt8 v56 = v76 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v55 = v56;
  }
  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUPercentNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)(a1, a2, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

uint64_t static ICUPercentNumberFormatter._create(with:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  uint64_t v49 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v50 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  uint64_t v6 = static ICUPercentNumberFormatter.cache;
  uint64_t v5 = *(void *)algn_1E8ED35C8;
  MEMORY[0x1F4188790](v3);
  *(&v41 - 2) = a1;
  uint64_t v7 = (uint64_t *)(v5 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v5 + 16, &v53);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  swift_release();
  uint64_t v8 = v53;
  if (v53 != 1) {
    goto LABEL_51;
  }
  closure #1 in static ICUPercentNumberFormatter._create(with:)(a1, &v52);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  if (v6 >= *(void *)(*(void *)(v5 + 16) + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v7 = MEMORY[0x1E4FBC868];
  }
  uint64_t v8 = v52;
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *v7;
  uint64_t v10 = v51;
  *uint64_t v7 = 0x8000000000000000;
  uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v7) = v11;
    if (*(void *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v7 & 1) != (v18 & 1)) {
        goto LABEL_54;
      }
      uint64_t v12 = v17;
      if ((v7 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_14:
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v20 = 8 * v12;
      swift_release();
      *(void *)(v19 + v20) = v8;
LABEL_50:
      *(void *)(v5 + 16) = v16;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_51:
      swift_release();
      return v8;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v10;
      if (v11) {
        goto LABEL_14;
      }
LABEL_49:
      uint64_t v37 = a1;
      uint64_t v38 = v50;
      unint64_t v39 = v12;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v37, v50, type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v39, v38, v8, (void *)v16);
      goto LABEL_50;
    }
  }
  uint64_t v42 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v10 + 16))
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v12 = v42;
    if (v7) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
  Swift::UInt v22 = (char *)(v21 + 64);
  uint64_t v23 = 1 << *(unsigned char *)(v16 + 32);
  id v44 = (char *)(v10 + 64);
  unint64_t v24 = (unint64_t)(v23 + 63) >> 6;
  if (v16 != v10 || v22 >= &v44[8 * v24]) {
    memmove(v22, v44, 8 * v24);
  }
  int64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v10 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v10 + 64);
  int64_t v43 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v29 = v50;
  while (1)
  {
    if (v28)
    {
      uint64_t v47 = (v28 - 1) & v28;
      int64_t v48 = v25;
      unint64_t v30 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_24;
    }
    int64_t v33 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v33 >= v43) {
      goto LABEL_48;
    }
    unint64_t v34 = *(void *)&v44[8 * v33];
    int64_t v35 = v25 + 1;
    if (!v34)
    {
      int64_t v35 = v25 + 2;
      if (v25 + 2 >= v43) {
        goto LABEL_48;
      }
      unint64_t v34 = *(void *)&v44[8 * v35];
      if (!v34)
      {
        int64_t v35 = v25 + 3;
        if (v25 + 3 >= v43) {
          goto LABEL_48;
        }
        unint64_t v34 = *(void *)&v44[8 * v35];
        if (!v34)
        {
          int64_t v35 = v25 + 4;
          if (v25 + 4 >= v43) {
            goto LABEL_48;
          }
          unint64_t v34 = *(void *)&v44[8 * v35];
          if (!v34)
          {
            int64_t v35 = v25 + 5;
            if (v25 + 5 >= v43) {
              goto LABEL_48;
            }
            unint64_t v34 = *(void *)&v44[8 * v35];
            if (!v34)
            {
              int64_t v35 = v25 + 6;
              if (v25 + 6 >= v43) {
                goto LABEL_48;
              }
              unint64_t v34 = *(void *)&v44[8 * v35];
              if (!v34)
              {
                int64_t v35 = v25 + 7;
                if (v25 + 7 >= v43) {
                  goto LABEL_48;
                }
                unint64_t v34 = *(void *)&v44[8 * v35];
                if (!v34) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_47:
    uint64_t v47 = (v34 - 1) & v34;
    int64_t v48 = v35;
    unint64_t v30 = __clz(__rbit64(v34)) + (v35 << 6);
LABEL_24:
    uint64_t v31 = *(void *)(v10 + 48);
    unint64_t v46 = *(void *)(v49 + 72) * v30;
    outlined init with copy of ICUPercentNumberFormatter.Signature(v31 + v46, v29, type metadata accessor for ICUPercentNumberFormatter.Signature);
    uint64_t v32 = 8 * v30;
    uint64_t v45 = *(void *)(*(void *)(v10 + 56) + v32);
    outlined init with take of ICUPercentNumberFormatter.Signature(v29, *(void *)(v16 + 48) + v46, type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(void *)(*(void *)(v16 + 56) + v32) = v45;
    swift_retain();
    unint64_t v28 = v47;
    int64_t v25 = v48;
  }
  uint64_t v36 = v25 + 8;
  if (v25 + 8 >= v43) {
    goto LABEL_48;
  }
  unint64_t v34 = *(void *)&v44[8 * v36];
  if (v34)
  {
    int64_t v35 = v25 + 8;
    goto LABEL_47;
  }
  while (1)
  {
    int64_t v35 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v35 >= v43) {
      goto LABEL_48;
    }
    unint64_t v34 = *(void *)&v44[8 * v35];
    ++v36;
    if (v34) {
      goto LABEL_47;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static ICUPercentNumberFormatter.create(for:)(uint64_t a1)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  int64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[18];
  unsigned char v67[152];

  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  uint64_t v59 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v60 = (uint64_t)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v63 = (char *)&v54 - v5;
  uint64_t v62 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 472);
  swift_unknownObjectRetain();
  uint64_t v9 = v8(ObjectType, v6);
  uint64_t v11 = v10;
  swift_unknownObjectRelease();
  uint64_t v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v12(v66, ObjectType, v6);
  uint64_t v13 = (uint64_t)v63;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUPercentNumberFormatter.Signature(v62, v13, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  BOOL v14 = (uint64_t *)(v13 + *(int *)(v2 + 20));
  *BOOL v14 = v9;
  v14[1] = v11;
  uint64_t v62 = v2;
  uint64_t v15 = outlined init with take of LocalePreferences?((uint64_t)v67, v13 + *(int *)(v2 + 24), &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v15 = swift_once();
  }
  uint64_t v16 = static ICUPercentNumberFormatter.cache;
  uint64_t v17 = *(void *)algn_1E8ED35C8;
  MEMORY[0x1F4188790](v15);
  *(&v54 - 2) = v13;
  char v18 = (uint64_t *)(v17 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v17 + 16, v66);
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
  swift_release();
  uint64_t v19 = v66[0];
  if (v66[0] != 1) {
    goto LABEL_53;
  }
  closure #1 in static ICUPercentNumberFormatter._create(with:)(v13, &v65);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  uint64_t v20 = *(void *)(*(void *)(v17 + 16) + 16);
  uint64_t v61 = *(void *)(v17 + 16);
  if (v16 >= v20) {
    swift_bridgeObjectRetain();
  }
  else {
    *char v18 = MEMORY[0x1E4FBC868];
  }
  uint64_t v19 = v65;
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v18;
  Swift::UInt v22 = v64;
  *char v18 = 0x8000000000000000;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  int64_t v25 = *(void *)(v22 + 16);
  uint64_t v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v18) = v23;
    if (*(void *)(v22 + 24) < v27)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = v64;
      uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v18 & 1) != (v30 & 1)) {
        goto LABEL_56;
      }
      unint64_t v24 = v29;
      uint64_t v31 = (os_unfair_lock_s *)(v17 + 24);
      if ((v18 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v32 = *(void *)(v28 + 56);
      int64_t v33 = 8 * v24;
      swift_release();
      *(void *)(v32 + v33) = v19;
LABEL_52:
      *(void *)(v17 + 16) = v28;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v31);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_53:
      swift_release();
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(v13, type metadata accessor for ICUPercentNumberFormatter.Signature);
      return v19;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t v28 = v22;
      uint64_t v31 = (os_unfair_lock_s *)(v17 + 24);
      if (v23) {
        goto LABEL_14;
      }
LABEL_51:
      uint64_t v51 = v60;
      uint64_t v52 = v24;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v13, v60, type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v52, v51, v19, (void *)v28);
      goto LABEL_52;
    }
  }
  Swift::UInt8 v54 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  unint64_t v34 = static _DictionaryStorage.copy(original:)();
  unint64_t v28 = v34;
  if (!*(void *)(v22 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v31 = (os_unfair_lock_s *)(v17 + 24);
    unint64_t v24 = v54;
    if (v18) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  int64_t v35 = (char *)(v34 + 64);
  uint64_t v36 = 1 << *(unsigned char *)(v28 + 32);
  Swift::UInt8 v56 = (char *)(v22 + 64);
  uint64_t v37 = (unint64_t)(v36 + 63) >> 6;
  if (v28 != v22 || v35 >= &v56[8 * v37]) {
    memmove(v35, v56, 8 * v37);
  }
  uint64_t v38 = 0;
  *(void *)(v28 + 16) = *(void *)(v22 + 16);
  unint64_t v39 = 1 << *(unsigned char *)(v22 + 32);
  id v40 = -1;
  if (v39 < 64) {
    id v40 = ~(-1 << v39);
  }
  uint64_t v41 = v40 & *(void *)(v22 + 64);
  Swift::UInt8 v55 = (unint64_t)(v39 + 63) >> 6;
  uint64_t v42 = v60;
  while (1)
  {
    uint64_t v13 = (uint64_t)v63;
    if (v41)
    {
      Swift::UInt8 v58 = (v41 - 1) & v41;
      uint64_t v62 = v38;
      int64_t v43 = __clz(__rbit64(v41)) | (v38 << 6);
      goto LABEL_24;
    }
    uint64_t v47 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v47 >= v55) {
      goto LABEL_50;
    }
    int64_t v48 = *(void *)&v56[8 * v47];
    uint64_t v49 = v38 + 1;
    if (!v48)
    {
      uint64_t v49 = v38 + 2;
      if (v38 + 2 >= v55) {
        goto LABEL_50;
      }
      int64_t v48 = *(void *)&v56[8 * v49];
      if (!v48)
      {
        uint64_t v49 = v38 + 3;
        if (v38 + 3 >= v55) {
          goto LABEL_50;
        }
        int64_t v48 = *(void *)&v56[8 * v49];
        if (!v48)
        {
          uint64_t v49 = v38 + 4;
          if (v38 + 4 >= v55) {
            goto LABEL_50;
          }
          int64_t v48 = *(void *)&v56[8 * v49];
          if (!v48)
          {
            uint64_t v49 = v38 + 5;
            if (v38 + 5 >= v55) {
              goto LABEL_50;
            }
            int64_t v48 = *(void *)&v56[8 * v49];
            if (!v48)
            {
              uint64_t v49 = v38 + 6;
              if (v38 + 6 >= v55) {
                goto LABEL_50;
              }
              int64_t v48 = *(void *)&v56[8 * v49];
              if (!v48)
              {
                uint64_t v49 = v38 + 7;
                if (v38 + 7 >= v55) {
                  goto LABEL_50;
                }
                int64_t v48 = *(void *)&v56[8 * v49];
                if (!v48)
                {
                  uint64_t v49 = v38 + 8;
                  if (v38 + 8 >= v55) {
                    goto LABEL_50;
                  }
                  int64_t v48 = *(void *)&v56[8 * v49];
                  if (!v48) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    Swift::UInt8 v58 = (v48 - 1) & v48;
    uint64_t v62 = v49;
    int64_t v43 = __clz(__rbit64(v48)) + (v49 << 6);
LABEL_24:
    id v44 = *(void *)(v22 + 48);
    Swift::UInt8 v57 = *(void *)(v59 + 72) * v43;
    outlined init with copy of ICUPercentNumberFormatter.Signature(v44 + v57, v42, type metadata accessor for ICUPercentNumberFormatter.Signature);
    uint64_t v45 = 8 * v43;
    unint64_t v46 = *(void *)(*(void *)(v22 + 56) + 8 * v43);
    outlined init with take of ICUPercentNumberFormatter.Signature(v42, *(void *)(v28 + 48) + v57, type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(void *)(*(void *)(v28 + 56) + v45) = v46;
    swift_retain();
    uint64_t v38 = v62;
    uint64_t v41 = v58;
  }
  uint64_t v50 = v38 + 9;
  if (v38 + 9 >= v55) {
    goto LABEL_50;
  }
  int64_t v48 = *(void *)&v56[8 * v50];
  if (v48)
  {
    uint64_t v49 = v38 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v49 = v50 + 1;
    if (__OFADD__(v50, 1)) {
      break;
    }
    uint64_t v13 = (uint64_t)v63;
    if (v49 >= v55) {
      goto LABEL_50;
    }
    int64_t v48 = *(void *)&v56[8 * v49];
    ++v50;
    if (v48) {
      goto LABEL_49;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t ICUNumberFormatter.attributedFormat(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v4 = a3;
  unint64_t v5 = a2;
  unint64_t v6 = a1;
  uint64_t v8 = ICUNumberFormatterBase.attributedFormatPositions(_:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
  if (!v9)
  {
    switch(BYTE4(v4))
    {
      case 1:
        Double.description.getter();
        goto LABEL_52;
      case 2:
        unint64_t v98 = a4;
        *(void *)uint64_t v128 = v6;
        unint64_t v66 = HIDWORD(v6);
        unint64_t v67 = HIWORD(v6);
        unint64_t v68 = v5 >> 16;
        *(void *)&v128[8] = v5;
        unint64_t v69 = HIDWORD(v5);
        unint64_t v70 = HIWORD(v5);
        unint64_t v71 = v4 >> 16;
        *(_DWORD *)&v128[16] = v4;
        if (_So9NSDecimala__length_getter(v128)
          || (*(void *)uint64_t v128 = v6,
              *(void *)&v128[8] = v5,
              *(_DWORD *)&v128[16] = v4,
              !_So9NSDecimala__isNegative_getter(v128)))
        {
          *(void *)uint64_t v128 = v6;
          *(void *)&v128[8] = v5;
          *(_DWORD *)&v128[16] = v4;
          if (_So9NSDecimala__length_getter(v128))
          {
            *(void *)&long long v132 = 0;
            *((void *)&v132 + 1) = 0xE000000000000000;
            *(void *)uint64_t v128 = v6;
            *(void *)&v128[8] = v5;
            *(_DWORD *)&v128[16] = v4;
            *(void *)unsigned __int16 v116 = v6;
            *(void *)&v116[8] = v5;
            *(_DWORD *)&v116[16] = v4;
            if ((int)_So9NSDecimala__exponent_getter(v116) >= 1)
            {
              do
              {
                v72._countAndFlagsBits = 48;
                v72._object = (void *)0xE100000000000000;
                String.append(_:)(v72);
                *(_DWORD *)unsigned __int16 v116 = v6;
                *(_WORD *)&v116[4] = v66;
                *(_WORD *)&v116[6] = v67;
                *(_WORD *)&v116[8] = v5;
                *(_WORD *)&v116[10] = v68;
                *(_WORD *)&v116[12] = v69;
                *(_WORD *)&v116[14] = v70;
                *(_WORD *)&v116[16] = v4;
                *(_WORD *)&v116[18] = v71;
                int v73 = _So9NSDecimala__exponent_getter(v116);
                _So9NSDecimala__exponent_setter((v73 - 1), v128);
                LODWORD(v6) = *(_DWORD *)v128;
                LOWORD(v66) = *(_WORD *)&v128[4];
                LOWORD(v67) = *(_WORD *)&v128[6];
                LOWORD(v5) = *(_WORD *)&v128[8];
                LOWORD(v68) = *(_WORD *)&v128[10];
                LOWORD(v69) = *(_WORD *)&v128[12];
                LOWORD(v70) = *(_WORD *)&v128[14];
                LOWORD(v4) = *(_WORD *)&v128[16];
                LOWORD(v71) = *(_WORD *)&v128[18];
                *(_OWORD *)unsigned __int16 v116 = *(_OWORD *)v128;
                *(_DWORD *)&v116[16] = *(_DWORD *)&v128[16];
              }
              while ((int)_So9NSDecimala__exponent_getter(v116) > 0);
            }
            *(_DWORD *)unsigned __int16 v116 = v6;
            *(_WORD *)&v116[4] = v66;
            *(_WORD *)&v116[6] = v67;
            *(_WORD *)&v116[8] = v5;
            *(_WORD *)&v116[10] = v68;
            *(_WORD *)&v116[12] = v69;
            *(_WORD *)&v116[14] = v70;
            *(_WORD *)&v116[16] = v4;
            *(_WORD *)&v116[18] = v71;
            if (!_So9NSDecimala__exponent_getter(v116))
            {
              _So9NSDecimala__exponent_setter(1, v128);
              LODWORD(v6) = *(_DWORD *)v128;
              LOWORD(v66) = *(_WORD *)&v128[4];
              LOWORD(v67) = *(_WORD *)&v128[6];
              LOWORD(v5) = *(_WORD *)&v128[8];
              LOWORD(v68) = *(_WORD *)&v128[10];
              LOWORD(v69) = *(_WORD *)&v128[12];
              LOWORD(v70) = *(_WORD *)&v128[14];
              LOWORD(v4) = *(_WORD *)&v128[16];
              LOWORD(v71) = *(_WORD *)&v128[18];
            }
            *(_DWORD *)unsigned __int16 v116 = v6;
            __int16 v111 = v66;
            *(_WORD *)&v116[4] = v66;
            LOWORD(v74) = v67;
            *(_WORD *)&v116[6] = v67;
            *(_WORD *)&v116[8] = v5;
            *(_WORD *)&v116[10] = v68;
            *(_WORD *)&v116[12] = v69;
            *(_WORD *)&v116[14] = v70;
            *(_WORD *)&v116[16] = v4;
            *(_WORD *)&v116[18] = v71;
            if (_So9NSDecimala__length_getter(v116))
            {
              __int16 v75 = v67;
              __int16 v76 = v66;
              while (1)
              {
                __int16 v112 = v75;
                *(_DWORD *)unsigned __int16 v116 = v6;
                *(_WORD *)&v116[4] = v76;
                *(_WORD *)&v116[6] = v75;
                *(_WORD *)&v116[8] = v5;
                *(_WORD *)&v116[10] = v68;
                *(_WORD *)&v116[12] = v69;
                *(_WORD *)&v116[14] = v70;
                *(_WORD *)&v116[16] = v4;
                *(_WORD *)&v116[18] = v71;
                if (!_So9NSDecimala__exponent_getter(v116))
                {
                  v77._countAndFlagsBits = 46;
                  v77._object = (void *)0xE100000000000000;
                  String.append(_:)(v77);
                }
                *(_DWORD *)unsigned __int16 v116 = v6;
                *(_WORD *)&v116[4] = v76;
                *(_WORD *)&v116[6] = v112;
                *(_WORD *)&v116[8] = v5;
                *(_WORD *)&v116[10] = v68;
                *(_WORD *)&v116[12] = v69;
                *(_WORD *)&v116[14] = v70;
                *(_WORD *)&v116[16] = v4;
                *(_WORD *)&v116[18] = v71;
                int v78 = _So9NSDecimala__exponent_getter(v116);
                _So9NSDecimala__exponent_setter((v78 + 1), v128);
                int v79 = *(_DWORD *)v128;
                LOWORD(v68) = *(_WORD *)&v128[6];
                LOWORD(v71) = *(_WORD *)&v128[14];
                __int16 v111 = *(_WORD *)&v128[8];
                __int16 v113 = *(_WORD *)&v128[4];
                __int16 v106 = *(_WORD *)&v128[12];
                __int16 v108 = *(_WORD *)&v128[10];
                LOWORD(v69) = *(_WORD *)&v128[18];
                __int16 v104 = *(_WORD *)&v128[16];
                NSDecimal.asVariableLengthInteger()(*(unsigned int *)v128 | ((unint64_t)*(unsigned __int16 *)&v128[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v128[6] << 48), *(unsigned __int16 *)&v128[8] | ((unint64_t)*(unsigned __int16 *)&v128[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v128[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v128[14] << 48), *(unsigned __int16 *)&v128[16] | (*(unsigned __int16 *)&v128[18] << 16));
                uint64_t v74 = v80;
                unint64_t v5 = *(void *)(v80 + 16);
                if (v5)
                {
                  int v103 = v79;
                  unint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                  unint64_t v70 = v6 + 30;
                  *(void *)(v6 + 16) = v5;
                  bzero((void *)(v6 + 32), 2 * v5);
                  unsigned int v81 = *(unsigned __int16 *)(2 * v5 + v74 + 30);
                  unsigned int v82 = v81 / 0xA;
                  while (1)
                  {
                    *(_WORD *)(v70 + 2 * v5) = v82;
                    LODWORD(v4) = v81 % 0xA;
                    if (v5 == 1) {
                      break;
                    }
                    unsigned int v81 = *(unsigned __int16 *)(v74 + 28 + 2 * v5) | (v4 << 16);
                    unsigned int v82 = v81 / 0xA;
                    unint64_t v83 = v5 - 2;
                    --v5;
                    if (v83 >= *(void *)(v6 + 16))
                    {
                      __break(1u);
                      goto LABEL_57;
                    }
                  }
                  int v79 = v103;
                }
                else
                {
                  LODWORD(v4) = 0;
                  unint64_t v6 = MEMORY[0x1E4FBC860];
                }
                uint64_t v84 = *(void *)(v6 + 16);
                if (v84 && !*(_WORD *)(v6 + 2 * v84 + 30))
                {
                  do
                  {
                    *(void *)(v6 + 16) = v84 - 1;
                    if (v84 == 1) {
                      break;
                    }
                  }
                  while (!*(unsigned __int16 *)(v6 + 28 + 2 * v84--));
                }
                swift_bridgeObjectRelease();
                *(_DWORD *)unsigned __int16 v116 = v79;
                *(_WORD *)&v116[4] = v113;
                *(_WORD *)&v116[6] = v68;
                *(_WORD *)&v116[8] = v111;
                *(_WORD *)&v116[10] = v108;
                *(_WORD *)&v116[12] = v106;
                *(_WORD *)&v116[14] = v71;
                *(_WORD *)&v116[16] = v104;
                *(_WORD *)&v116[18] = v69;
                NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v6);
                if (v86) {
                  break;
                }
                unint64_t v87 = *(void *)(v6 + 16);
                swift_bridgeObjectRelease();
                if (HIDWORD(v87)) {
                  goto LABEL_71;
                }
                _So9NSDecimala__length_setter(v87, v116);
                *(_DWORD *)uint64_t v128 = *(_DWORD *)v116;
                *(_OWORD *)&v128[4] = *(_OWORD *)&v116[4];
                *(void *)unsigned __int16 v116 = v4 | 0x30;
                v88._countAndFlagsBits = MEMORY[0x185302020](v116, 1);
                String.append(_:)(v88);
                swift_bridgeObjectRelease();
                LODWORD(v6) = *(_DWORD *)v128;
                __int16 v76 = *(_WORD *)&v128[4];
                __int16 v114 = *(_WORD *)&v128[6];
                LOWORD(v5) = *(_WORD *)&v128[8];
                LOWORD(v68) = *(_WORD *)&v128[10];
                LOWORD(v69) = *(_WORD *)&v128[12];
                LOWORD(v70) = *(_WORD *)&v128[14];
                LOWORD(v4) = *(_WORD *)&v128[16];
                LOWORD(v71) = *(_WORD *)&v128[18];
                *(_OWORD *)unsigned __int16 v116 = *(_OWORD *)v128;
                *(_DWORD *)&v116[16] = *(_DWORD *)&v128[16];
                int v89 = _So9NSDecimala__length_getter(v116);
                __int16 v75 = v114;
                if (!v89) {
                  goto LABEL_58;
                }
              }
LABEL_70:
              swift_bridgeObjectRelease();
              swift_unexpectedError();
              __break(1u);
LABEL_71:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181C609B0);
            }
LABEL_57:
            __int16 v75 = v74;
            __int16 v76 = v111;
LABEL_58:
            *(_DWORD *)unsigned __int16 v116 = v6;
            *(_WORD *)&v116[4] = v76;
            *(_WORD *)&v116[6] = v75;
            *(_WORD *)&v116[8] = v5;
            *(_WORD *)&v116[10] = v68;
            *(_WORD *)&v116[12] = v69;
            *(_WORD *)&v116[14] = v70;
            *(_WORD *)&v116[16] = v4;
            *(_WORD *)&v116[18] = v71;
            __int16 v90 = v75;
            __int16 v91 = v76;
            if ((int)_So9NSDecimala__exponent_getter(v116) <= 0)
            {
              while (1)
              {
                *(_DWORD *)unsigned __int16 v116 = v6;
                *(_WORD *)&v116[4] = v91;
                *(_WORD *)&v116[6] = v90;
                *(_WORD *)&v116[8] = v5;
                *(_WORD *)&v116[10] = v68;
                *(_WORD *)&v116[12] = v69;
                *(_WORD *)&v116[14] = v70;
                *(_WORD *)&v116[16] = v4;
                *(_WORD *)&v116[18] = v71;
                if (!_So9NSDecimala__exponent_getter(v116)) {
                  break;
                }
                v92._countAndFlagsBits = 48;
                v92._object = (void *)0xE100000000000000;
                String.append(_:)(v92);
                *(_DWORD *)unsigned __int16 v116 = v6;
                *(_WORD *)&v116[4] = v91;
                *(_WORD *)&v116[6] = v90;
                *(_WORD *)&v116[8] = v5;
                *(_WORD *)&v116[10] = v68;
                *(_WORD *)&v116[12] = v69;
                *(_WORD *)&v116[14] = v70;
                *(_WORD *)&v116[16] = v4;
                *(_WORD *)&v116[18] = v71;
                int v93 = _So9NSDecimala__exponent_getter(v116);
                _So9NSDecimala__exponent_setter((v93 + 1), v128);
                LODWORD(v6) = *(_DWORD *)v128;
                __int16 v91 = *(_WORD *)&v128[4];
                __int16 v90 = *(_WORD *)&v128[6];
                LOWORD(v5) = *(_WORD *)&v128[8];
                LOWORD(v68) = *(_WORD *)&v128[10];
                LOWORD(v69) = *(_WORD *)&v128[12];
                LOWORD(v70) = *(_WORD *)&v128[14];
                LOWORD(v4) = *(_WORD *)&v128[16];
                LOWORD(v71) = *(_WORD *)&v128[18];
              }
              v94._countAndFlagsBits = 46;
              v94._object = (void *)0xE100000000000000;
              String.append(_:)(v94);
              v95._countAndFlagsBits = 48;
              v95._object = (void *)0xE100000000000000;
              String.append(_:)(v95);
            }
            *(_DWORD *)unsigned __int16 v116 = v6;
            *(_WORD *)&v116[4] = v91;
            *(_WORD *)&v116[6] = v90;
            *(_WORD *)&v116[8] = v5;
            *(_WORD *)&v116[10] = v68;
            *(_WORD *)&v116[12] = v69;
            *(_WORD *)&v116[14] = v70;
            *(_WORD *)&v116[16] = v4;
            *(_WORD *)&v116[18] = v71;
            if (_So9NSDecimala__isNegative_getter(v116))
            {
              v96._countAndFlagsBits = 45;
              v96._object = (void *)0xE100000000000000;
              String.append(_:)(v96);
            }
            *(_OWORD *)unsigned __int16 v116 = v132;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
            lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
            String.init<A>(_:)();
            a4 = v98;
          }
          else
          {
            a4 = v98;
          }
        }
        else
        {
          a4 = v98;
        }
LABEL_52:
        BigString.init(_:)();
        uint64_t result = AttributedString.init(_:attributes:)(v128, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v116);
        uint64_t v14 = *(void *)v116;
        goto LABEL_53;
      case 3:
        swift_bridgeObjectRetain();
        goto LABEL_52;
      default:
        *(void *)uint64_t v128 = v6;
        dispatch thunk of CustomStringConvertible.description.getter();
        goto LABEL_52;
    }
  }
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v126, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v128);
  uint64_t v14 = *(void *)v128;
  uint64_t v15 = *(void *)(v13 + 16);
  if (!v15) {
    goto LABEL_22;
  }
  uint64_t v97 = a4;
  swift_bridgeObjectRetain();
  uint64_t v102 = v12;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = v13 + 48;
  uint64_t v101 = v11;
  do
  {
    uint64_t v110 = v15;
    int v17 = *(_DWORD *)(v16 - 16);
    *(void *)unsigned __int16 v116 = v11;
    *(void *)&v116[8] = v12;
    swift_bridgeObjectRetain();
    unint64_t v18 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)unsigned __int16 v116 = v11;
    *(void *)&v116[8] = v12;
    swift_bridgeObjectRetain();
    unint64_t v19 = String.Index.init<A>(utf16Offset:in:)();
    if (v19 >> 14 < v18 >> 14)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_70;
    }
    unint64_t v20 = v19;
    uint64_t v109 = v16;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v18, v20, (_OWORD *)v14, (uint64_t *)v116);
    uint64_t v21 = v117;
    if (v117 == 2) {
      goto LABEL_68;
    }
    uint64_t v23 = *(void *)&v116[8];
    uint64_t v22 = *(void *)v116;
    uint64_t v24 = *(void *)&v116[16];
    uint64_t v25 = v120;
    uint64_t v105 = v118;
    uint64_t v107 = v119;
    uint64_t v26 = v121;
    long long v125 = MEMORY[0x1E4FBC868];
    char v27 = 0;
    char v28 = 2;
    switch(v17)
    {
      case 0:
        goto LABEL_8;
      case 1:
        char v27 = 1;
LABEL_8:
        specialized AttributeContainer.subscript.setter(v27);
        break;
      case 2:
        goto LABEL_13;
      case 6:
        char v28 = 0;
        goto LABEL_13;
      case 7:
        char v28 = 3;
        goto LABEL_13;
      case 8:
        char v28 = 4;
        goto LABEL_13;
      case 10:
        char v28 = 1;
LABEL_13:
        specialized AttributeContainer.subscript.setter(v28);
        break;
      default:
        break;
    }
    long long v124 = v125;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v29 = *(_OWORD *)(v14 + 32);
      v144[0] = *(_OWORD *)(v14 + 16);
      v144[1] = v29;
      v144[2] = *(_OWORD *)(v14 + 48);
      uint64_t v99 = v25;
      uint64_t v100 = v26;
      uint64_t v30 = *(void *)(v14 + 64);
      uint64_t v31 = *(void *)(v14 + 72);
      uint64_t v33 = *(void *)(v14 + 80);
      uint64_t v32 = *(void *)(v14 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      uint64_t v34 = v23;
      uint64_t v35 = v22;
      outlined retain of Locale((uint64_t)v144);
      swift_unknownObjectRetain();
      uint64_t v36 = v31;
      uint64_t v37 = v33;
      uint64_t v25 = v99;
      uint64_t v26 = v100;
      uint64_t v38 = AttributedString.Guts.init(string:runs:)(v144, v30, v36, v37, v32);
      swift_release();
      uint64_t v14 = v38;
      uint64_t v22 = v35;
      uint64_t v23 = v34;
    }
    long long v39 = *(_OWORD *)(v14 + 32);
    v143[0] = *(_OWORD *)(v14 + 16);
    v143[1] = v39;
    v143[2] = *(_OWORD *)(v14 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v143);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v143);
    long long v40 = *(_OWORD *)(v14 + 16);
    long long v41 = *(_OWORD *)(v14 + 48);
    v142[1] = *(_OWORD *)(v14 + 32);
    v142[2] = v41;
    v142[0] = v40;
    long long v42 = *(_OWORD *)(v14 + 16);
    v145[1] = *(_OWORD *)(v14 + 32);
    v145[2] = v41;
    v145[0] = v42;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v145, (uint64_t)v146);
    outlined retain of Locale((uint64_t)v146);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v142);
    swift_release();
    *(void *)&long long v132 = v22;
    *((void *)&v132 + 1) = v23;
    uint64_t v133 = v24;
    uint64_t v134 = v21;
    uint64_t v135 = v105;
    uint64_t v136 = v107;
    uint64_t v137 = v25;
    uint64_t v138 = v26;
    long long v43 = *(_OWORD *)(v14 + 16);
    long long v44 = *(_OWORD *)(v14 + 48);
    long long v140 = *(_OWORD *)(v14 + 32);
    long long v141 = v44;
    long long v139 = v43;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v127);
    uint64_t v45 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v52 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    outlined release of Locale((uint64_t)v128);
    swift_release();
    *(void *)unsigned __int16 v116 = v14;
    *(void *)&v116[8] = v45;
    *(void *)&v116[16] = v47;
    uint64_t v117 = v49;
    uint64_t v118 = v51;
    uint64_t v119 = v52;
    uint64_t v120 = v54;
    uint64_t v121 = v56;
    uint64_t v122 = v58;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v59 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v60 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v60);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v59, &v115);
    os_unfair_lock_unlock(v60);
    swift_release();
    uint64_t v61 = v115;
    uint64_t v123 = v115;
    BigString.init()();
    uint64_t v115 = 0;
    MEMORY[0x185309530](&v115, 8);
    uint64_t v62 = v115;
    type metadata accessor for AttributedString.Guts();
    uint64_t v63 = swift_allocObject();
    uint64_t v11 = v101;
    uint64_t v12 = v102;
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_67;
    }
    long long v64 = v130;
    *(_OWORD *)(v63 + 16) = v129;
    *(_OWORD *)(v63 + 32) = v64;
    *(_OWORD *)(v63 + 48) = v131;
    *(void *)(v63 + 64) = 0;
    *(void *)(v63 + 72) = 0;
    *(void *)(v63 + 80) = 0;
    *(void *)(v63 + 88) = v62;
    swift_release();
    LOBYTE(v115) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v124, (char *)&v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v123 != v61) {
      goto LABEL_69;
    }
    uint64_t v16 = v109 + 24;
    uint64_t v14 = *(void *)v116;
    swift_release();
    uint64_t v15 = v110 - 1;
  }
  while (v110 != 1);
  swift_bridgeObjectRelease();
  a4 = v97;
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_53:
  *a4 = v14;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUByteCountNumberFormatter.Signature()
{
  return ICUByteCountNumberFormatter.Signature.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUByteCountNumberFormatter.Signature(uint64_t *a1, uint64_t *a2)
{
  return specialized static ICUByteCountNumberFormatter.Signature.== infix(_:_:)(a1, a2);
}

uint64_t ICUByteCountNumberFormatter.attributedFormat(_:unit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = ICUNumberFormatterBase.attributedFormatPositions(_:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
  if (!v9)
  {
    switch(BYTE4(v5))
    {
      case 1:
        Double.description.getter();
        goto LABEL_54;
      case 2:
        *(void *)long long v125 = v7;
        unint64_t v62 = HIDWORD(v7);
        unint64_t v63 = HIWORD(v7);
        unint64_t v64 = v6 >> 16;
        *(void *)&v125[8] = v6;
        unint64_t v65 = HIDWORD(v6);
        unint64_t v66 = HIWORD(v6);
        unint64_t v67 = v5 >> 16;
        *(_DWORD *)&v125[16] = v5;
        if (!_So9NSDecimala__length_getter(v125))
        {
          *(void *)long long v125 = v7;
          *(void *)&v125[8] = v6;
          *(_DWORD *)&v125[16] = v5;
          if (_So9NSDecimala__isNegative_getter(v125)) {
            goto LABEL_54;
          }
        }
        *(void *)long long v125 = v7;
        *(void *)&v125[8] = v6;
        *(_DWORD *)&v125[16] = v5;
        if (!_So9NSDecimala__length_getter(v125)) {
          goto LABEL_54;
        }
        *(void *)&long long v129 = 0;
        *((void *)&v129 + 1) = 0xE000000000000000;
        *(void *)long long v125 = v7;
        *(void *)&v125[8] = v6;
        *(_DWORD *)&v125[16] = v5;
        *(void *)__int16 v113 = v7;
        *(void *)&v113[8] = v6;
        *(_DWORD *)&v113[16] = v5;
        if ((int)_So9NSDecimala__exponent_getter(v113) >= 1)
        {
          do
          {
            v68._countAndFlagsBits = 48;
            v68._object = (void *)0xE100000000000000;
            String.append(_:)(v68);
            *(_DWORD *)__int16 v113 = v7;
            *(_WORD *)&v113[4] = v62;
            *(_WORD *)&v113[6] = v63;
            *(_WORD *)&v113[8] = v6;
            *(_WORD *)&v113[10] = v64;
            *(_WORD *)&v113[12] = v65;
            *(_WORD *)&v113[14] = v66;
            *(_WORD *)&v113[16] = v5;
            *(_WORD *)&v113[18] = v67;
            int v69 = _So9NSDecimala__exponent_getter(v113);
            _So9NSDecimala__exponent_setter((v69 - 1), v125);
            LODWORD(v7) = *(_DWORD *)v125;
            LOWORD(v62) = *(_WORD *)&v125[4];
            LOWORD(v63) = *(_WORD *)&v125[6];
            LOWORD(v6) = *(_WORD *)&v125[8];
            LOWORD(v64) = *(_WORD *)&v125[10];
            LOWORD(v65) = *(_WORD *)&v125[12];
            LOWORD(v66) = *(_WORD *)&v125[14];
            LOWORD(v5) = *(_WORD *)&v125[16];
            LOWORD(v67) = *(_WORD *)&v125[18];
            *(_OWORD *)__int16 v113 = *(_OWORD *)v125;
            *(_DWORD *)&v113[16] = *(_DWORD *)&v125[16];
          }
          while ((int)_So9NSDecimala__exponent_getter(v113) > 0);
        }
        *(_DWORD *)__int16 v113 = v7;
        *(_WORD *)&v113[4] = v62;
        *(_WORD *)&v113[6] = v63;
        *(_WORD *)&v113[8] = v6;
        *(_WORD *)&v113[10] = v64;
        *(_WORD *)&v113[12] = v65;
        *(_WORD *)&v113[14] = v66;
        *(_WORD *)&v113[16] = v5;
        *(_WORD *)&v113[18] = v67;
        if (!_So9NSDecimala__exponent_getter(v113))
        {
          _So9NSDecimala__exponent_setter(1, v125);
          LODWORD(v7) = *(_DWORD *)v125;
          LOWORD(v62) = *(_WORD *)&v125[4];
          LOWORD(v63) = *(_WORD *)&v125[6];
          LOWORD(v6) = *(_WORD *)&v125[8];
          LOWORD(v64) = *(_WORD *)&v125[10];
          LOWORD(v65) = *(_WORD *)&v125[12];
          LOWORD(v66) = *(_WORD *)&v125[14];
          LOWORD(v5) = *(_WORD *)&v125[16];
          LOWORD(v67) = *(_WORD *)&v125[18];
        }
        *(_DWORD *)__int16 v113 = v7;
        __int16 v107 = v62;
        *(_WORD *)&v113[4] = v62;
        LOWORD(v70) = v63;
        *(_WORD *)&v113[6] = v63;
        *(_WORD *)&v113[8] = v6;
        *(_WORD *)&v113[10] = v64;
        *(_WORD *)&v113[12] = v65;
        *(_WORD *)&v113[14] = v66;
        *(_WORD *)&v113[16] = v5;
        *(_WORD *)&v113[18] = v67;
        if (!_So9NSDecimala__length_getter(v113)) {
          goto LABEL_59;
        }
        __int16 v71 = v63;
        __int16 v72 = v62;
        break;
      case 3:
        swift_bridgeObjectRetain();
        goto LABEL_54;
      default:
        *(void *)long long v125 = v7;
        dispatch thunk of CustomStringConvertible.description.getter();
        goto LABEL_54;
    }
    while (1)
    {
      __int16 v109 = v71;
      *(_DWORD *)__int16 v113 = v7;
      *(_WORD *)&v113[4] = v72;
      *(_WORD *)&v113[6] = v71;
      *(_WORD *)&v113[8] = v6;
      *(_WORD *)&v113[10] = v64;
      *(_WORD *)&v113[12] = v65;
      *(_WORD *)&v113[14] = v66;
      *(_WORD *)&v113[16] = v5;
      *(_WORD *)&v113[18] = v67;
      if (!_So9NSDecimala__exponent_getter(v113))
      {
        v73._countAndFlagsBits = 46;
        v73._object = (void *)0xE100000000000000;
        String.append(_:)(v73);
      }
      *(_DWORD *)__int16 v113 = v7;
      *(_WORD *)&v113[4] = v72;
      *(_WORD *)&v113[6] = v109;
      *(_WORD *)&v113[8] = v6;
      *(_WORD *)&v113[10] = v64;
      *(_WORD *)&v113[12] = v65;
      *(_WORD *)&v113[14] = v66;
      *(_WORD *)&v113[16] = v5;
      *(_WORD *)&v113[18] = v67;
      int v74 = _So9NSDecimala__exponent_getter(v113);
      _So9NSDecimala__exponent_setter((v74 + 1), v125);
      int v75 = *(_DWORD *)v125;
      LOWORD(v64) = *(_WORD *)&v125[6];
      LOWORD(v67) = *(_WORD *)&v125[14];
      __int16 v107 = *(_WORD *)&v125[8];
      __int16 v110 = *(_WORD *)&v125[4];
      __int16 v102 = *(_WORD *)&v125[12];
      __int16 v104 = *(_WORD *)&v125[10];
      LOWORD(v65) = *(_WORD *)&v125[18];
      __int16 v100 = *(_WORD *)&v125[16];
      NSDecimal.asVariableLengthInteger()(*(unsigned int *)v125 | ((unint64_t)*(unsigned __int16 *)&v125[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v125[6] << 48), *(unsigned __int16 *)&v125[8] | ((unint64_t)*(unsigned __int16 *)&v125[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v125[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v125[14] << 48), *(unsigned __int16 *)&v125[16] | (*(unsigned __int16 *)&v125[18] << 16));
      uint64_t v70 = v76;
      unint64_t v6 = *(void *)(v76 + 16);
      if (v6)
      {
        int v98 = v75;
        unint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        unint64_t v66 = v7 + 30;
        *(void *)(v7 + 16) = v6;
        bzero((void *)(v7 + 32), 2 * v6);
        unsigned int v77 = *(unsigned __int16 *)(2 * v6 + v70 + 30);
        unsigned int v78 = v77 / 0xA;
        while (1)
        {
          *(_WORD *)(v66 + 2 * v6) = v78;
          LODWORD(v5) = v77 % 0xA;
          if (v6 == 1) {
            break;
          }
          unsigned int v77 = *(unsigned __int16 *)(v70 + 28 + 2 * v6) | (v5 << 16);
          unsigned int v78 = v77 / 0xA;
          unint64_t v79 = v6 - 2;
          --v6;
          if (v79 >= *(void *)(v7 + 16))
          {
            __break(1u);
LABEL_59:
            __int16 v71 = v70;
            __int16 v72 = v107;
            goto LABEL_60;
          }
        }
        int v75 = v98;
      }
      else
      {
        LODWORD(v5) = 0;
        unint64_t v7 = MEMORY[0x1E4FBC860];
      }
      uint64_t v80 = *(void *)(v7 + 16);
      if (v80 && !*(_WORD *)(v7 + 2 * v80 + 30))
      {
        do
        {
          *(void *)(v7 + 16) = v80 - 1;
          if (v80 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v7 + 28 + 2 * v80--));
      }
      swift_bridgeObjectRelease();
      *(_DWORD *)__int16 v113 = v75;
      *(_WORD *)&v113[4] = v110;
      *(_WORD *)&v113[6] = v64;
      *(_WORD *)&v113[8] = v107;
      *(_WORD *)&v113[10] = v104;
      *(_WORD *)&v113[12] = v102;
      *(_WORD *)&v113[14] = v67;
      *(_WORD *)&v113[16] = v100;
      *(_WORD *)&v113[18] = v65;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v7);
      if (v82) {
        break;
      }
      unint64_t v83 = *(void *)(v7 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v83)) {
        goto LABEL_73;
      }
      _So9NSDecimala__length_setter(v83, v113);
      *(_DWORD *)long long v125 = *(_DWORD *)v113;
      *(_OWORD *)&v125[4] = *(_OWORD *)&v113[4];
      *(void *)__int16 v113 = v5 | 0x30;
      v84._countAndFlagsBits = MEMORY[0x185302020](v113, 1);
      String.append(_:)(v84);
      swift_bridgeObjectRelease();
      LODWORD(v7) = *(_DWORD *)v125;
      __int16 v72 = *(_WORD *)&v125[4];
      __int16 v111 = *(_WORD *)&v125[6];
      LOWORD(v6) = *(_WORD *)&v125[8];
      LOWORD(v64) = *(_WORD *)&v125[10];
      LOWORD(v65) = *(_WORD *)&v125[12];
      LOWORD(v66) = *(_WORD *)&v125[14];
      LOWORD(v5) = *(_WORD *)&v125[16];
      LOWORD(v67) = *(_WORD *)&v125[18];
      *(_OWORD *)__int16 v113 = *(_OWORD *)v125;
      *(_DWORD *)&v113[16] = *(_DWORD *)&v125[16];
      int v85 = _So9NSDecimala__length_getter(v113);
      __int16 v71 = v111;
      if (!v85)
      {
LABEL_60:
        *(_DWORD *)__int16 v113 = v7;
        *(_WORD *)&v113[4] = v72;
        *(_WORD *)&v113[6] = v71;
        *(_WORD *)&v113[8] = v6;
        *(_WORD *)&v113[10] = v64;
        *(_WORD *)&v113[12] = v65;
        *(_WORD *)&v113[14] = v66;
        *(_WORD *)&v113[16] = v5;
        *(_WORD *)&v113[18] = v67;
        __int16 v86 = v71;
        __int16 v87 = v72;
        if ((int)_So9NSDecimala__exponent_getter(v113) <= 0)
        {
          while (1)
          {
            *(_DWORD *)__int16 v113 = v7;
            *(_WORD *)&v113[4] = v87;
            *(_WORD *)&v113[6] = v86;
            *(_WORD *)&v113[8] = v6;
            *(_WORD *)&v113[10] = v64;
            *(_WORD *)&v113[12] = v65;
            *(_WORD *)&v113[14] = v66;
            *(_WORD *)&v113[16] = v5;
            *(_WORD *)&v113[18] = v67;
            if (!_So9NSDecimala__exponent_getter(v113)) {
              break;
            }
            v88._countAndFlagsBits = 48;
            v88._object = (void *)0xE100000000000000;
            String.append(_:)(v88);
            *(_DWORD *)__int16 v113 = v7;
            *(_WORD *)&v113[4] = v87;
            *(_WORD *)&v113[6] = v86;
            *(_WORD *)&v113[8] = v6;
            *(_WORD *)&v113[10] = v64;
            *(_WORD *)&v113[12] = v65;
            *(_WORD *)&v113[14] = v66;
            *(_WORD *)&v113[16] = v5;
            *(_WORD *)&v113[18] = v67;
            int v89 = _So9NSDecimala__exponent_getter(v113);
            _So9NSDecimala__exponent_setter((v89 + 1), v125);
            LODWORD(v7) = *(_DWORD *)v125;
            __int16 v87 = *(_WORD *)&v125[4];
            __int16 v86 = *(_WORD *)&v125[6];
            LOWORD(v6) = *(_WORD *)&v125[8];
            LOWORD(v64) = *(_WORD *)&v125[10];
            LOWORD(v65) = *(_WORD *)&v125[12];
            LOWORD(v66) = *(_WORD *)&v125[14];
            LOWORD(v5) = *(_WORD *)&v125[16];
            LOWORD(v67) = *(_WORD *)&v125[18];
          }
          v90._countAndFlagsBits = 46;
          v90._object = (void *)0xE100000000000000;
          String.append(_:)(v90);
          v91._countAndFlagsBits = 48;
          v91._object = (void *)0xE100000000000000;
          String.append(_:)(v91);
        }
        *(_DWORD *)__int16 v113 = v7;
        *(_WORD *)&v113[4] = v87;
        *(_WORD *)&v113[6] = v86;
        *(_WORD *)&v113[8] = v6;
        *(_WORD *)&v113[10] = v64;
        *(_WORD *)&v113[12] = v65;
        *(_WORD *)&v113[14] = v66;
        *(_WORD *)&v113[16] = v5;
        *(_WORD *)&v113[18] = v67;
        if (_So9NSDecimala__isNegative_getter(v113))
        {
          v92._countAndFlagsBits = 45;
          v92._object = (void *)0xE100000000000000;
          String.append(_:)(v92);
        }
        *(_OWORD *)__int16 v113 = v129;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
        String.init<A>(_:)();
LABEL_54:
        BigString.init(_:)();
        uint64_t result = AttributedString.init(_:attributes:)(v125, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v113);
        uint64_t v14 = *(void *)v113;
        goto LABEL_55;
      }
    }
LABEL_72:
    swift_bridgeObjectRelease();
    swift_unexpectedError();
    __break(1u);
LABEL_73:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181C617D8);
  }
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v123, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v125);
  uint64_t v14 = *(void *)v125;
  uint64_t v15 = *(void *)(v13 + 16);
  if (!v15) {
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v97 = v11;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = 0;
  uint64_t v17 = v13 + 48;
  uint64_t v96 = v12;
  do
  {
    uint64_t v108 = v16;
    uint64_t v18 = *(unsigned int *)(v17 - 16);
    *(void *)__int16 v113 = v11;
    *(void *)&v113[8] = v12;
    swift_bridgeObjectRetain();
    unint64_t v19 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)__int16 v113 = v11;
    *(void *)&v113[8] = v12;
    swift_bridgeObjectRetain();
    unint64_t v20 = String.Index.init<A>(utf16Offset:in:)();
    if (v20 >> 14 < v19 >> 14)
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_72;
    }
    unint64_t v21 = v20;
    uint64_t v106 = v17;
    uint64_t v101 = v15;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v19, v21, (_OWORD *)v14, (uint64_t *)v113);
    uint64_t v22 = v114;
    if (v114 == 2) {
      goto LABEL_70;
    }
    long long v23 = *(_OWORD *)v113;
    uint64_t v24 = *(void *)&v113[16];
    uint64_t v25 = v117;
    uint64_t v103 = v115;
    uint64_t v105 = v116;
    uint64_t v26 = v118;
    long long v122 = MEMORY[0x1E4FBC868];
    char v27 = 0;
    char v28 = 2;
    switch((int)v18)
    {
      case 0:
        goto LABEL_8;
      case 1:
        char v27 = 1;
LABEL_8:
        specialized AttributeContainer.subscript.setter(v27);
        break;
      case 2:
        goto LABEL_13;
      case 6:
        char v28 = 0;
        goto LABEL_13;
      case 7:
        char v28 = 3;
        goto LABEL_13;
      case 8:
        char v28 = 4;
        goto LABEL_13;
      case 10:
        char v28 = 1;
LABEL_13:
        specialized AttributeContainer.subscript.setter(v28);
        break;
      default:
        break;
    }
    AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(unumberFormatField:unit:)(v18, a4, v113);
    if (v113[0] != 12) {
      specialized AttributeContainer.subscript.setter(v113[0]);
    }
    long long v121 = v122;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v29 = *(_OWORD *)(v14 + 32);
      v141[0] = *(_OWORD *)(v14 + 16);
      v141[1] = v29;
      v141[2] = *(_OWORD *)(v14 + 48);
      uint64_t v30 = *(void *)(v14 + 64);
      uint64_t v94 = *(void *)(v14 + 72);
      uint64_t v95 = v26;
      uint64_t v31 = *(void *)(v14 + 80);
      uint64_t v32 = *(void *)(v14 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v141);
      swift_unknownObjectRetain();
      uint64_t v33 = v31;
      uint64_t v26 = v95;
      uint64_t v34 = AttributedString.Guts.init(string:runs:)(v141, v30, v94, v33, v32);
      swift_release();
      uint64_t v14 = v34;
    }
    long long v35 = *(_OWORD *)(v14 + 32);
    v140[0] = *(_OWORD *)(v14 + 16);
    v140[1] = v35;
    v140[2] = *(_OWORD *)(v14 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v140);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v140);
    long long v36 = *(_OWORD *)(v14 + 16);
    long long v37 = *(_OWORD *)(v14 + 48);
    v139[1] = *(_OWORD *)(v14 + 32);
    v139[2] = v37;
    v139[0] = v36;
    long long v38 = *(_OWORD *)(v14 + 16);
    v142[1] = *(_OWORD *)(v14 + 32);
    v142[2] = v37;
    v142[0] = v38;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v142, (uint64_t)v143);
    outlined retain of Locale((uint64_t)v143);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v139);
    swift_release();
    long long v129 = v23;
    uint64_t v130 = v24;
    uint64_t v131 = v22;
    uint64_t v132 = v103;
    uint64_t v133 = v105;
    uint64_t v134 = v25;
    uint64_t v135 = v26;
    long long v39 = *(_OWORD *)(v14 + 16);
    long long v40 = *(_OWORD *)(v14 + 48);
    long long v137 = *(_OWORD *)(v14 + 32);
    long long v138 = v40;
    long long v136 = v39;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v124);
    uint64_t v41 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v48 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    outlined release of Locale((uint64_t)v125);
    swift_release();
    *(void *)__int16 v113 = v14;
    *(void *)&v113[8] = v41;
    *(void *)&v113[16] = v43;
    uint64_t v114 = v45;
    uint64_t v115 = v47;
    uint64_t v116 = v48;
    uint64_t v117 = v50;
    uint64_t v118 = v52;
    uint64_t v119 = v54;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v55 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v56 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v56);
    uint64_t v16 = v108;
    closure #1 in static AttributedString._nextModifyIdentity.getter(v55, &v112);
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t v57 = v112;
    uint64_t v120 = v112;
    BigString.init()();
    uint64_t v112 = 0;
    MEMORY[0x185309530](&v112, 8);
    uint64_t v58 = v112;
    type metadata accessor for AttributedString.Guts();
    uint64_t v59 = swift_allocObject();
    uint64_t v11 = v97;
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_69;
    }
    long long v60 = v127;
    *(_OWORD *)(v59 + 16) = v126;
    *(_OWORD *)(v59 + 32) = v60;
    *(_OWORD *)(v59 + 48) = v128;
    *(void *)(v59 + 64) = 0;
    *(void *)(v59 + 72) = 0;
    *(void *)(v59 + 80) = 0;
    *(void *)(v59 + 88) = v58;
    swift_release();
    LOBYTE(v112) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v121, (char *)&v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v120 != v57) {
      goto LABEL_71;
    }
    uint64_t v17 = v106 + 24;
    uint64_t v14 = *(void *)v113;
    swift_release();
    uint64_t v15 = v101 - 1;
    uint64_t v12 = v96;
  }
  while (v101 != 1);
  swift_bridgeObjectRelease();
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_55:
  *a5 = v14;
  return result;
}

uint64_t type metadata accessor for ICUByteCountNumberFormatter()
{
  return self;
}

void ICUByteCountNumberFormatter.Signature.hash(into:)(uint64_t a1)
{
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)&v36, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v36 == 2)
  {
    Swift::UInt8 v3 = 0;
  }
  else
  {
    Swift::UInt8 v3 = v36 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v3);
  uint64_t v4 = v37;
  if (!v37)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v36);
    uint64_t v9 = &v36;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v4 + 16));
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v35, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v9 = (uint64_t *)v35;
LABEL_17:
    outlined retain of LocalePreferences(v9);
    if (!v38) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v6 = v4 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 += 16;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v39) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v7 = v40;
    if (!v40) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
    uint64_t v8 = v41;
    if (!v41) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = v40;
  if (v40) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v8 = v41;
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v11 = v42;
  uint64_t v10 = v43;
  uint64_t v13 = v44;
  uint64_t v12 = v45;
  uint64_t v14 = v46;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v15 = v10;
    id v16 = v13;
    id v17 = v12;
    id v18 = v14;
    id v19 = v11;
    _CFObject.hash(into:)();
    if (v10) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v24 = v14;
    id v25 = v10;
    id v26 = v13;
    id v27 = v12;
    if (v10)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v20 = v10;
      _CFObject.hash(into:)();

      if (v13) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v13)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v21 = v13;
    _CFObject.hash(into:)();

    if (v12) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v14) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v12) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v22 = v12;
  _CFObject.hash(into:)();

  if (v14)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v23 = v14;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v23 = 0;
LABEL_33:

  uint64_t v28 = v47;
  if (v28)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v48;
    if (v48) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v49) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  uint64_t v29 = v48;
  if (!v48) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v29);
  swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v30 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v31 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v31);
  }
  if (v52 == 2)
  {
    Swift::UInt8 v32 = 0;
  }
  else
  {
    Swift::UInt8 v32 = v52 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v32);
  if (v53 == 2)
  {
    Swift::UInt8 v33 = 0;
  }
  else
  {
    Swift::UInt8 v34 = v53 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v33 = v34;
  }
  Hasher._combine(_:)(v33);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int ICUByteCountNumberFormatter.Signature.hashValue.getter()
{
  outlined init with take of LocalePreferences?(v0 + 32, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)&v35, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v35 == 2)
  {
    Swift::UInt8 v1 = 0;
  }
  else
  {
    Swift::UInt8 v1 = v35 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  uint64_t v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v35);
    uint64_t v7 = &v35;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v2 + 16));
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v34, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v7 = (uint64_t *)v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    if (!v37) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v39;
    if (!v39) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = v40;
    if (!v40) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = v39;
  if (v39) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v9 = v41;
  uint64_t v8 = v42;
  uint64_t v11 = v43;
  uint64_t v10 = v44;
  uint64_t v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v13 = v8;
    id v14 = v11;
    id v15 = v10;
    id v16 = v12;
    id v17 = v9;
    _CFObject.hash(into:)();
    if (v8) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v22 = v12;
    id v23 = v8;
    id v24 = v11;
    id v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v18 = v8;
      _CFObject.hash(into:)();

      if (v11) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v19 = v11;
    _CFObject.hash(into:)();

    if (v10) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v10) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v21 = 0;
LABEL_33:

  uint64_t v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47;
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  uint64_t v27 = v47;
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v51 == 2)
  {
    Swift::UInt8 v30 = 0;
  }
  else
  {
    Swift::UInt8 v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v31 = v32;
  }
  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUByteCountNumberFormatter.Signature()
{
  outlined init with take of LocalePreferences?(v0 + 32, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)&v35, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v35 == 2)
  {
    Swift::UInt8 v1 = 0;
  }
  else
  {
    Swift::UInt8 v1 = v35 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  uint64_t v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    uint64_t v7 = &v35;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (!v3)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v34, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v7 = (uint64_t *)v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    outlined retain of LocalePreferences(&v35);
    if (!v37) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v39;
    if (!v39) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = v40;
    if (!v40) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = v39;
  if (v39) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v9 = v41;
  uint64_t v8 = v42;
  uint64_t v11 = v43;
  uint64_t v10 = v44;
  uint64_t v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v13 = v8;
    id v14 = v11;
    id v15 = v10;
    id v16 = v12;
    id v17 = v9;
    _CFObject.hash(into:)();
    if (v8) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v22 = v12;
    id v23 = v8;
    id v24 = v11;
    id v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v18 = v8;
      _CFObject.hash(into:)();

      if (v11) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v19 = v11;
    _CFObject.hash(into:)();

    if (v10) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v10) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v21 = 0;
LABEL_33:

  uint64_t v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47;
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  uint64_t v27 = v47;
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v51 == 2)
  {
    Swift::UInt8 v30 = 0;
  }
  else
  {
    Swift::UInt8 v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v31 = v32;
  }
  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t ICUMeasurementNumberFormatter.Usage.rawValue.getter(char a1)
{
  uint64_t result = 0x746C7561666564;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F73726570;
      break;
    case 2:
      uint64_t result = 1685024614;
      break;
    case 3:
      uint64_t result = 0x682D6E6F73726570;
      break;
    case 4:
      uint64_t result = 1684107122;
      break;
    case 5:
      uint64_t result = 0x656C2D6C61636F66;
      break;
    case 6:
      unsigned int v3 = 1852399986;
      goto LABEL_9;
    case 7:
      unsigned int v3 = 2003791475;
LABEL_9:
      uint64_t result = v3 | 0x6C6C616600000000;
      break;
    case 8:
      uint64_t result = 0x79746C6269736976;
      break;
    case 9:
      uint64_t result = 0x6372746D6F726162;
      break;
    case 10:
      uint64_t result = 1684957559;
      break;
    case 11:
      uint64_t result = 0x72656874616577;
      break;
    case 12:
      uint64_t result = 0x6469756C66;
      break;
    case 13:
      uint64_t result = 0x6469766F72507361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined destroy of LocalePreferences(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181C631B8);
}

uint64_t sub_181C631B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181C631E4);
}

uint64_t sub_181C631E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t type metadata accessor for ICUCurrencyNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICUCurrencyNumberFormatter.Signature);
}

BOOL specialized static ICUByteCountNumberFormatter.Signature.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 4), (uint64_t)v110, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = (uint64_t)(a2 + 4);
  uint64_t v11 = a2[2];
  uint64_t v10 = a2[3];
  outlined init with take of LocalePreferences?(v9, (uint64_t)v111, &demangling cache variable for type metadata for LocalePreferences?);
  BOOL v12 = v3 == v7 && v4 == v8;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    BOOL v15 = v5 == v11 && v6 == v10;
    if (v15 || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v16 & 1) != 0))
    {
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v109, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v109) == 1)
      {
        outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
        if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1) {
          return 1;
        }
        goto LABEL_16;
      }
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v99, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
      {
        v61[6] = v105;
        v62[0] = *(_OWORD *)v106;
        *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)&v106[12];
        v61[2] = v101;
        v61[3] = v102;
        v61[4] = v103;
        v61[5] = v104;
        v61[0] = v99;
        v61[1] = v100;
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v80, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences(&v80);
        outlined retain of LocalePreferences(v63);
        outlined release of LocalePreferences(v61);
LABEL_16:
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)&v108, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v107);
        return 0;
      }
      outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)&v80, &demangling cache variable for type metadata for LocalePreferences?);
      char v17 = v99;
      uint64_t v18 = *((void *)&v99 + 1);
      long long v19 = v100;
      long long v20 = v101;
      long long v21 = v102;
      id v22 = (void *)v103;
      uint64_t v59 = (void *)v104;
      long long v60 = (void *)*((void *)&v103 + 1);
      uint64_t v57 = (void *)v105;
      uint64_t v58 = (void *)*((void *)&v104 + 1);
      uint64_t v55 = *(void *)v106;
      uint64_t v56 = *((void *)&v105 + 1);
      uint64_t v53 = *(void *)&v106[8];
      uint64_t v54 = *(void *)&v106[16];
      int v51 = v106[25];
      int v52 = v106[24];
      int v49 = v106[27];
      int v50 = v106[26];
      if (v99 == 2)
      {
        if (v80 != 2) {
          goto LABEL_56;
        }
      }
      else if (v80 == 2 || ((((v99 & 1) == 0) ^ v80) & 1) == 0)
      {
        goto LABEL_56;
      }
      if (*((void *)&v99 + 1))
      {
        if (!v81 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v99 + 1), v81) & 1) == 0) {
          goto LABEL_53;
        }
      }
      else if (v81)
      {
        goto LABEL_53;
      }
      if (*((void *)&v19 + 1))
      {
        if (!*((void *)&v82 + 1) || v19 != v82 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_53;
        }
      }
      else if (*((void *)&v82 + 1))
      {
        goto LABEL_53;
      }
      if (*((void *)&v20 + 1))
      {
        if (!*((void *)&v83 + 1) || v20 != v83 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_53;
        }
      }
      else if (*((void *)&v83 + 1))
      {
        goto LABEL_53;
      }
      if ((void)v21)
      {
        if (!v84 || (specialized static Dictionary<>.== infix(_:_:)(v21, v84) & 1) == 0) {
          goto LABEL_53;
        }
      }
      else if (v84)
      {
        goto LABEL_53;
      }
      if (*((void *)&v21 + 1))
      {
        if (v85 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v21 + 1), v85) & 1) != 0)
        {
LABEL_48:
          uint64_t v40 = v89;
          uint64_t v43 = v88;
          uint64_t v38 = v90;
          uint64_t v45 = v87;
          if (v22)
          {
            uint64_t v35 = v86;
            if (v86)
            {
              type metadata accessor for CFDictionaryRef(0);
              outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v36 = v35;
              id v32 = v22;
              char v23 = static _CFObject.== infix(_:_:)();

              if ((v23 & 1) == 0) {
                goto LABEL_108;
              }
LABEL_62:
              if (v60)
              {
                LOBYTE(v26) = (_BYTE)v45;
                if (!v45) {
                  goto LABEL_91;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v46 = v45;
                id v33 = v60;
                char v27 = static _CFObject.== infix(_:_:)();

                if ((v27 & 1) == 0) {
                  goto LABEL_108;
                }
              }
              else if (v45)
              {
                goto LABEL_108;
              }
              if (v59)
              {
                if (!v43) {
                  goto LABEL_108;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v44 = v43;
                id v34 = v59;
                char v28 = static _CFObject.== infix(_:_:)();

                if ((v28 & 1) == 0) {
                  goto LABEL_108;
                }
              }
              else if (v43)
              {
                goto LABEL_108;
              }
              if (v58)
              {
                if (!v40) {
                  goto LABEL_108;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v41 = v40;
                id v37 = v58;
                char v29 = static _CFObject.== infix(_:_:)();

                if ((v29 & 1) == 0) {
                  goto LABEL_108;
                }
              }
              else if (v40)
              {
                goto LABEL_108;
              }
              if (v57)
              {
                if (!v38) {
                  goto LABEL_108;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v42 = v38;
                id v39 = v57;
                char v30 = static _CFObject.== infix(_:_:)();

                if ((v30 & 1) == 0) {
                  goto LABEL_108;
                }
              }
              else if (v38)
              {
                goto LABEL_108;
              }
              uint64_t v26 = v91;
              if (v56)
              {
                if (!v91) {
                  goto LABEL_91;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v47 = specialized static Dictionary<>.== infix(_:_:)(v56, v26);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v47 & 1) == 0) {
                  goto LABEL_108;
                }
              }
              else if (v91)
              {
                goto LABEL_108;
              }
              uint64_t v26 = v92;
              if (!v55)
              {
                if (v92) {
                  goto LABEL_108;
                }
LABEL_93:
                if (v54)
                {
                  if (!v94 || (v53 != v93 || v54 != v94) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_108;
                  }
                }
                else if (v94)
                {
                  goto LABEL_108;
                }
                if (v52 != 2)
                {
                  if (v95 == 2 || ((v95 ^ v52) & 1) != 0) {
                    goto LABEL_108;
                  }
LABEL_105:
                  int v31 = v96;
                  if (v51 == 2)
                  {
                    outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    if (v31 != 2) {
                      goto LABEL_57;
                    }
                  }
                  else
                  {
                    outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    if (v31 == 2 || ((v31 ^ v51) & 1) != 0) {
                      goto LABEL_57;
                    }
                  }
                  if (v50 == 2)
                  {
                    if (v97 != 2) {
                      goto LABEL_57;
                    }
                  }
                  else
                  {
                    LOBYTE(v26) = 0;
                    if (v97 == 2 || ((((v50 & 1) == 0) ^ v97) & 1) == 0) {
                      goto LABEL_58;
                    }
                  }
                  if (v49 == 2)
                  {
                    if (v98 != 2) {
                      goto LABEL_57;
                    }
                  }
                  else if (v98 == 2 || ((((v49 & 1) == 0) ^ v98) & 1) == 0)
                  {
                    goto LABEL_57;
                  }
                  LOBYTE(v26) = 1;
LABEL_58:
                  LOBYTE(v63[0]) = v17;
                  v63[1] = v18;
                  long long v64 = v19;
                  long long v65 = v20;
                  long long v66 = v21;
                  unint64_t v67 = v22;
                  Swift::String v68 = v60;
                  int v69 = v59;
                  uint64_t v70 = v58;
                  __int16 v71 = v57;
                  uint64_t v72 = v56;
                  uint64_t v73 = v55;
                  uint64_t v74 = v53;
                  uint64_t v75 = v54;
                  char v76 = v52;
                  char v77 = v51;
                  char v78 = v50;
                  char v79 = v49;
                  outlined release of LocalePreferences(v63);
                  outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return (v26 & 1) != 0;
                }
                if (v95 == 2) {
                  goto LABEL_105;
                }
LABEL_108:
                id v25 = outlined consume of LocalePreferences?;
                id v24 = v111;
                goto LABEL_54;
              }
              if (v92)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v48 = specialized static Dictionary<>.== infix(_:_:)(v55, v26);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v48 & 1) == 0) {
                  goto LABEL_108;
                }
                goto LABEL_93;
              }
LABEL_91:
              outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              goto LABEL_58;
            }
          }
          else if (!v86)
          {
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            goto LABEL_62;
          }
LABEL_56:
          outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences(v63);
          goto LABEL_57;
        }
      }
      else if (!v85)
      {
        goto LABEL_48;
      }
LABEL_53:
      outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      id v24 = v110;
      id v25 = outlined copy of LocalePreferences?;
LABEL_54:
      outlined retain of LocalePreferences?((uint64_t)v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v25);
LABEL_57:
      LOBYTE(v26) = 0;
      goto LABEL_58;
    }
  }
  return result;
}

BOOL specialized static ICUCurrencyNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    uint64_t v12 = v4[6];
    uint64_t v13 = *(void *)(a1 + v12);
    uint64_t v14 = *(void *)(a1 + v12 + 8);
    BOOL v15 = (void *)(a2 + v12);
    BOOL v16 = v13 == *v15 && v14 == v15[1];
    if (v16 || (char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v17 & 1) != 0))
    {
      outlined init with take of LocalePreferences?(a1 + v4[7], (uint64_t)v110, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?(a2 + v4[7], (uint64_t)v111, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v112, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v112) == 1)
      {
        outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)v108, &demangling cache variable for type metadata for LocalePreferences?);
        if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v108) == 1) {
          return 1;
        }
        goto LABEL_17;
      }
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v100, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)v108, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v108) == 1)
      {
        v62[6] = v106;
        v63[0] = *(_OWORD *)v107;
        *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)&v107[12];
        _OWORD v62[2] = v102;
        v62[3] = v103;
        v62[4] = v104;
        v62[5] = v105;
        v62[0] = v100;
        v62[1] = v101;
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v81, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences(&v81);
        outlined retain of LocalePreferences(v64);
        outlined release of LocalePreferences(v62);
LABEL_17:
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v108, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)&v109, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v108);
        return 0;
      }
      outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)&v81, &demangling cache variable for type metadata for LocalePreferences?);
      char v18 = v100;
      uint64_t v19 = *((void *)&v100 + 1);
      long long v20 = v101;
      long long v21 = v102;
      long long v22 = v103;
      char v23 = (void *)v104;
      long long v60 = (void *)v105;
      uint64_t v61 = (void *)*((void *)&v104 + 1);
      uint64_t v58 = (void *)v106;
      uint64_t v59 = (void *)*((void *)&v105 + 1);
      uint64_t v56 = *(void *)v107;
      uint64_t v57 = *((void *)&v106 + 1);
      uint64_t v54 = *(void *)&v107[8];
      uint64_t v55 = *(void *)&v107[16];
      int v52 = v107[25];
      int v53 = v107[24];
      int v50 = v107[27];
      int v51 = v107[26];
      if (v100 == 2)
      {
        if (v81 != 2) {
          goto LABEL_58;
        }
      }
      else if (v81 == 2 || ((((v100 & 1) == 0) ^ v81) & 1) == 0)
      {
        goto LABEL_58;
      }
      if (*((void *)&v100 + 1))
      {
        if (!v82 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v100 + 1), v82) & 1) == 0) {
          goto LABEL_55;
        }
      }
      else if (v82)
      {
        goto LABEL_55;
      }
      if (*((void *)&v20 + 1))
      {
        if (!*((void *)&v83 + 1) || v20 != v83 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_55;
        }
      }
      else if (*((void *)&v83 + 1))
      {
        goto LABEL_55;
      }
      if (*((void *)&v21 + 1))
      {
        if (!*((void *)&v84 + 1) || v21 != v84 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_55;
        }
      }
      else if (*((void *)&v84 + 1))
      {
        goto LABEL_55;
      }
      if ((void)v22)
      {
        if (!v85 || (specialized static Dictionary<>.== infix(_:_:)(v22, v85) & 1) == 0) {
          goto LABEL_55;
        }
      }
      else if (v85)
      {
        goto LABEL_55;
      }
      if (*((void *)&v22 + 1))
      {
        if (v86 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v22 + 1), v86) & 1) != 0)
        {
LABEL_50:
          id v44 = v89;
          id v46 = v88;
          id v39 = v91;
          id v41 = v90;
          if (v23)
          {
            id v36 = v87;
            if (v87)
            {
              type metadata accessor for CFDictionaryRef(0);
              outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v37 = v36;
              id v33 = v23;
              char v24 = static _CFObject.== infix(_:_:)();

              if ((v24 & 1) == 0) {
                goto LABEL_109;
              }
LABEL_63:
              if (v61)
              {
                if (!v46) {
                  goto LABEL_109;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v47 = v46;
                id v34 = v61;
                char v28 = static _CFObject.== infix(_:_:)();

                if ((v28 & 1) == 0) {
                  goto LABEL_109;
                }
              }
              else if (v46)
              {
                goto LABEL_109;
              }
              if (v60)
              {
                if (!v44) {
                  goto LABEL_109;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v45 = v44;
                id v35 = v60;
                char v29 = static _CFObject.== infix(_:_:)();

                if ((v29 & 1) == 0) {
                  goto LABEL_109;
                }
              }
              else if (v44)
              {
                goto LABEL_109;
              }
              if (v59)
              {
                if (!v41) {
                  goto LABEL_109;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v42 = v41;
                id v38 = v59;
                char v30 = static _CFObject.== infix(_:_:)();

                if ((v30 & 1) == 0) {
                  goto LABEL_109;
                }
              }
              else if (v41)
              {
                goto LABEL_109;
              }
              if (v58)
              {
                if (!v39) {
                  goto LABEL_109;
                }
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                id v43 = v39;
                id v40 = v58;
                char v31 = static _CFObject.== infix(_:_:)();

                if ((v31 & 1) == 0) {
                  goto LABEL_109;
                }
              }
              else if (v39)
              {
                goto LABEL_109;
              }
              uint64_t v27 = v92;
              if (v57)
              {
                if (!v92) {
                  goto LABEL_92;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v48 = specialized static Dictionary<>.== infix(_:_:)(v57, v27);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v48 & 1) == 0) {
                  goto LABEL_109;
                }
              }
              else if (v92)
              {
                goto LABEL_109;
              }
              uint64_t v27 = v93;
              if (!v56)
              {
                if (v93) {
                  goto LABEL_109;
                }
LABEL_94:
                if (v55)
                {
                  if (!v95 || (v54 != v94 || v55 != v95) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_109;
                  }
                }
                else if (v95)
                {
                  goto LABEL_109;
                }
                if (v53 != 2)
                {
                  if (v96 == 2 || ((v96 ^ v53) & 1) != 0) {
                    goto LABEL_109;
                  }
LABEL_106:
                  int v32 = v97;
                  if (v52 == 2)
                  {
                    outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    if (v32 != 2) {
                      goto LABEL_59;
                    }
                  }
                  else
                  {
                    outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    if (v32 == 2 || ((v32 ^ v52) & 1) != 0) {
                      goto LABEL_59;
                    }
                  }
                  if (v51 == 2)
                  {
                    if (v98 != 2) {
                      goto LABEL_59;
                    }
                  }
                  else
                  {
                    LOBYTE(v27) = 0;
                    if (v98 == 2 || ((((v51 & 1) == 0) ^ v98) & 1) == 0) {
                      goto LABEL_60;
                    }
                  }
                  if (v50 == 2)
                  {
                    if (v99 != 2) {
                      goto LABEL_59;
                    }
                  }
                  else if (v99 == 2 || ((((v50 & 1) == 0) ^ v99) & 1) == 0)
                  {
                    goto LABEL_59;
                  }
                  LOBYTE(v27) = 1;
LABEL_60:
                  LOBYTE(v64[0]) = v18;
                  v64[1] = v19;
                  long long v65 = v20;
                  long long v66 = v21;
                  long long v67 = v22;
                  Swift::String v68 = v23;
                  int v69 = v61;
                  uint64_t v70 = v60;
                  __int16 v71 = v59;
                  uint64_t v72 = v58;
                  uint64_t v73 = v57;
                  uint64_t v74 = v56;
                  uint64_t v75 = v54;
                  uint64_t v76 = v55;
                  char v77 = v53;
                  char v78 = v52;
                  char v79 = v51;
                  char v80 = v50;
                  outlined release of LocalePreferences(v64);
                  outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return (v27 & 1) != 0;
                }
                if (v96 == 2) {
                  goto LABEL_106;
                }
LABEL_109:
                uint64_t v26 = outlined consume of LocalePreferences?;
                id v25 = v111;
                goto LABEL_56;
              }
              if (v93)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v49 = specialized static Dictionary<>.== infix(_:_:)(v56, v27);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v49 & 1) == 0) {
                  goto LABEL_109;
                }
                goto LABEL_94;
              }
LABEL_92:
              outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              goto LABEL_60;
            }
          }
          else if (!v87)
          {
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            goto LABEL_63;
          }
LABEL_58:
          outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences(v64);
          goto LABEL_59;
        }
      }
      else if (!v86)
      {
        goto LABEL_50;
      }
LABEL_55:
      outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      id v25 = v110;
      uint64_t v26 = outlined copy of LocalePreferences?;
LABEL_56:
      outlined retain of LocalePreferences?((uint64_t)v25, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v26);
LABEL_59:
      LOBYTE(v27) = 0;
      goto LABEL_60;
    }
  }
  return result;
}

BOOL specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if ((static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v6 = a3(0);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  uint64_t v9 = *(void *)(a1 + v7 + 8);
  char v10 = (void *)(a2 + v7);
  BOOL v11 = v8 == *v10 && v9 == v10[1];
  if (v11 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    outlined init with take of LocalePreferences?(a1 + *(int *)(v6 + 24), (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?(a2 + *(int *)(v6 + 24), (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v108, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v108) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)v104, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v104) == 1) {
        return 1;
      }
      goto LABEL_12;
    }
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v96, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)v104, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v104) == 1)
    {
      v58[6] = v102;
      v59[0] = *(_OWORD *)v103;
      *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)&v103[12];
      v58[2] = v98;
      v58[3] = v99;
      v58[4] = v100;
      v58[5] = v101;
      v58[0] = v96;
      v58[1] = v97;
      outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v60, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v77, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(&v77);
      outlined retain of LocalePreferences(v60);
      outlined release of LocalePreferences(v58);
LABEL_12:
      outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v104, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)&v105, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v104);
      return 0;
    }
    outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)&v77, &demangling cache variable for type metadata for LocalePreferences?);
    char v14 = v96;
    uint64_t v15 = *((void *)&v96 + 1);
    long long v16 = v97;
    long long v17 = v98;
    long long v18 = v99;
    uint64_t v19 = (void *)v100;
    uint64_t v56 = (void *)v101;
    uint64_t v57 = (void *)*((void *)&v100 + 1);
    uint64_t v54 = (void *)v102;
    uint64_t v55 = (void *)*((void *)&v101 + 1);
    uint64_t v52 = *(void *)v103;
    uint64_t v53 = *((void *)&v102 + 1);
    uint64_t v50 = *(void *)&v103[8];
    uint64_t v51 = *(void *)&v103[16];
    int v48 = v103[25];
    int v49 = v103[24];
    int v46 = v103[27];
    int v47 = v103[26];
    if (v96 == 2)
    {
      if (v77 != 2) {
        goto LABEL_53;
      }
    }
    else if (v77 == 2 || ((((v96 & 1) == 0) ^ v77) & 1) == 0)
    {
      goto LABEL_53;
    }
    if (*((void *)&v96 + 1))
    {
      if (!v78 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v96 + 1), v78) & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (v78)
    {
      goto LABEL_50;
    }
    if (*((void *)&v16 + 1))
    {
      if (!*((void *)&v79 + 1) || v16 != v79 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (*((void *)&v79 + 1))
    {
      goto LABEL_50;
    }
    if (*((void *)&v17 + 1))
    {
      if (!*((void *)&v80 + 1) || v17 != v80 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (*((void *)&v80 + 1))
    {
      goto LABEL_50;
    }
    if ((void)v18)
    {
      if (!v81 || (specialized static Dictionary<>.== infix(_:_:)(v18, v81) & 1) == 0) {
        goto LABEL_50;
      }
    }
    else if (v81)
    {
      goto LABEL_50;
    }
    if (*((void *)&v18 + 1))
    {
      if (v82 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v18 + 1), v82) & 1) != 0)
      {
LABEL_45:
        id v40 = v85;
        id v42 = v84;
        id v35 = v87;
        id v37 = v86;
        if (v19)
        {
          int v32 = v83;
          if (v83)
          {
            type metadata accessor for CFDictionaryRef(0);
            outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            id v33 = v32;
            id v29 = v19;
            char v20 = static _CFObject.== infix(_:_:)();

            if ((v20 & 1) == 0) {
              goto LABEL_104;
            }
LABEL_58:
            if (v57)
            {
              if (!v42) {
                goto LABEL_104;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v43 = v42;
              id v30 = v57;
              char v24 = static _CFObject.== infix(_:_:)();

              if ((v24 & 1) == 0) {
                goto LABEL_104;
              }
            }
            else if (v42)
            {
              goto LABEL_104;
            }
            if (v56)
            {
              if (!v40) {
                goto LABEL_104;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v41 = v40;
              id v31 = v56;
              char v25 = static _CFObject.== infix(_:_:)();

              if ((v25 & 1) == 0) {
                goto LABEL_104;
              }
            }
            else if (v40)
            {
              goto LABEL_104;
            }
            if (v55)
            {
              if (!v37) {
                goto LABEL_104;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v38 = v37;
              id v34 = v55;
              char v26 = static _CFObject.== infix(_:_:)();

              if ((v26 & 1) == 0) {
                goto LABEL_104;
              }
            }
            else if (v37)
            {
              goto LABEL_104;
            }
            if (v54)
            {
              if (!v35) {
                goto LABEL_104;
              }
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              id v39 = v35;
              id v36 = v54;
              char v27 = static _CFObject.== infix(_:_:)();

              if ((v27 & 1) == 0) {
                goto LABEL_104;
              }
            }
            else if (v35)
            {
              goto LABEL_104;
            }
            uint64_t v23 = v88;
            if (v53)
            {
              if (!v88) {
                goto LABEL_87;
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v44 = specialized static Dictionary<>.== infix(_:_:)(v53, v23);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v44 & 1) == 0) {
                goto LABEL_104;
              }
            }
            else if (v88)
            {
              goto LABEL_104;
            }
            uint64_t v23 = v89;
            if (!v52)
            {
              if (v89) {
                goto LABEL_104;
              }
LABEL_89:
              if (v51)
              {
                if (!v91 || (v50 != v90 || v51 != v91) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  goto LABEL_104;
                }
              }
              else if (v91)
              {
                goto LABEL_104;
              }
              if (v49 != 2)
              {
                if (v92 == 2 || ((v92 ^ v49) & 1) != 0) {
                  goto LABEL_104;
                }
LABEL_101:
                int v28 = v93;
                if (v48 == 2)
                {
                  outlined retain of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  if (v28 != 2) {
                    goto LABEL_54;
                  }
                }
                else
                {
                  outlined retain of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  if (v28 == 2 || ((v28 ^ v48) & 1) != 0) {
                    goto LABEL_54;
                  }
                }
                if (v47 == 2)
                {
                  if (v94 != 2) {
                    goto LABEL_54;
                  }
                }
                else
                {
                  LOBYTE(v23) = 0;
                  if (v94 == 2 || ((((v47 & 1) == 0) ^ v94) & 1) == 0) {
                    goto LABEL_55;
                  }
                }
                if (v46 == 2)
                {
                  if (v95 != 2) {
                    goto LABEL_54;
                  }
                }
                else if (v95 == 2 || ((((v46 & 1) == 0) ^ v95) & 1) == 0)
                {
                  goto LABEL_54;
                }
                LOBYTE(v23) = 1;
LABEL_55:
                LOBYTE(v60[0]) = v14;
                v60[1] = v15;
                long long v61 = v16;
                long long v62 = v17;
                long long v63 = v18;
                long long v64 = v19;
                long long v65 = v57;
                long long v66 = v56;
                long long v67 = v55;
                Swift::String v68 = v54;
                uint64_t v69 = v53;
                uint64_t v70 = v52;
                uint64_t v71 = v50;
                uint64_t v72 = v51;
                char v73 = v49;
                char v74 = v48;
                char v75 = v47;
                char v76 = v46;
                outlined release of LocalePreferences(v60);
                outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                return (v23 & 1) != 0;
              }
              if (v92 == 2) {
                goto LABEL_101;
              }
LABEL_104:
              long long v22 = outlined consume of LocalePreferences?;
              long long v21 = v107;
              goto LABEL_51;
            }
            if (v89)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v45 = specialized static Dictionary<>.== infix(_:_:)(v52, v23);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v45 & 1) == 0) {
                goto LABEL_104;
              }
              goto LABEL_89;
            }
LABEL_87:
            outlined retain of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
            goto LABEL_55;
          }
        }
        else if (!v83)
        {
          outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          goto LABEL_58;
        }
LABEL_53:
        outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v60, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences(v60);
        goto LABEL_54;
      }
    }
    else if (!v82)
    {
      goto LABEL_45;
    }
LABEL_50:
    outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    long long v21 = v106;
    long long v22 = outlined copy of LocalePreferences?;
LABEL_51:
    outlined retain of LocalePreferences?((uint64_t)v21, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v22);
LABEL_54:
    LOBYTE(v23) = 0;
    goto LABEL_55;
  }
  return result;
}

uint64_t specialized static ICUCurrencyNumberFormatter.skeleton(for:)(uint64_t a1)
{
  Swift::UInt8 v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ICUCurrencyNumberFormatter.Signature(0) + 20));
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = CurrencyFormatStyleConfiguration.Collection.skeleton.getter();
  uint64_t v7 = v6;
  if (String.count.getter() >= 1)
  {
    v8._countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
  }
  swift_bridgeObjectRelease();
  return 0x79636E6572727563;
}

uint64_t specialized static ICUCurrencyNumberFormatter.create(for:)(void *a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  os_unfair_lock_s **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  os_unfair_lock_s *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  char *v75;
  void v76[19];
  void *v77;
  void v78[18];
  unsigned char v79[152];

  uint64_t v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  uint64_t v70 = *((void *)v2 - 1);
  MEMORY[0x1F4188790](v2);
  uint64_t v71 = (uint64_t)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v75 = (char *)&v65 - v5;
  char v73 = (uint64_t)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v6 = a1[3];
  char v74 = (os_unfair_lock_s *)a1[2];
  uint64_t v72 = v6;
  uint64_t v7 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  Swift::String v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v13(v78, ObjectType, v7);
  char v14 = (uint64_t)v75;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUPercentNumberFormatter.Signature(v73, v14, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v15 = (os_unfair_lock_s **)(v14 + v2[5]);
  long long v16 = v72;
  void *v15 = v74;
  v15[1] = (os_unfair_lock_s *)v16;
  long long v17 = (uint64_t *)(v14 + v2[6]);
  *long long v17 = v10;
  v17[1] = v12;
  uint64_t v72 = (uint64_t)v2;
  long long v18 = v14 + v2[7];
  uint64_t v19 = outlined init with take of LocalePreferences?((uint64_t)v79, v18, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v19 = swift_once();
  }
  char v20 = (os_unfair_lock_s *)qword_1E8ED9480;
  char v73 = static ICUCurrencyNumberFormatter.cache;
  MEMORY[0x1F4188790](v19);
  *(&v65 - 2) = v14;
  long long v21 = v20 + 4;
  long long v22 = v20 + 6;
  swift_retain_n();
  os_unfair_lock_lock(v20 + 6);
  _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA017ICUCurrencyNumberB0C9Signature33_1C58B5D80AA37B9371410D3343C91B53LLV_AJSgTG5TA_0((uint64_t)&v20[4], (uint64_t *)&v77);
  os_unfair_lock_unlock(v20 + 6);
  swift_release();
  uint64_t v23 = v77;
  if (v77 != (void *)1) {
    goto LABEL_53;
  }
  char v24 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v14);
  char v26 = v25;
  char v74 = v20;
  char v27 = *v17;
  int v28 = v17[1];
  outlined init with take of LocalePreferences?(v18, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  id v29 = v27;
  id v30 = v74;
  uint64_t v23 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v24, v26, v29, v28, (uint64_t)v76);
  swift_retain();
  os_unfair_lock_lock(v22);
  id v31 = v22;
  if (v73 >= *(void *)(*(void *)&v30[4]._os_unfair_lock_opaque + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)&v21->_os_unfair_lock_opaque = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76[0] = *(void *)&v21->_os_unfair_lock_opaque;
  id v33 = v76[0];
  *(void *)&v21->_os_unfair_lock_opaque = 0x8000000000000000;
  id v35 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  id v36 = *(void *)(v33 + 16);
  id v37 = (v34 & 1) == 0;
  id v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v21) = v34;
    if (*(void *)(v33 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      id v39 = v76[0];
      id v40 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v21 & 1) != (v41 & 1)) {
        goto LABEL_56;
      }
      id v35 = v40;
      id v42 = v74;
      if ((v21 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      id v43 = *(void *)(v39 + 56);
      char v44 = 8 * v35;
      swift_release();
      *(void *)(v43 + v44) = v23;
LABEL_52:
      *(void *)&v42[4]._os_unfair_lock_opaque = v39;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v31);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v77);
LABEL_53:
      swift_release();
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(v14, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v23;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      id v39 = v33;
      id v42 = v74;
      if (v34) {
        goto LABEL_14;
      }
LABEL_51:
      long long v62 = v71;
      long long v63 = v35;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v14, v71, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v63, v62, (uint64_t)v23, (void *)v39);
      goto LABEL_52;
    }
  }
  long long v66 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  char v45 = static _DictionaryStorage.copy(original:)();
  id v39 = v45;
  id v42 = v74;
  if (!*(void *)(v33 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    id v35 = v66;
    if (v21) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  int v46 = (char *)(v45 + 64);
  int v47 = 1 << *(unsigned char *)(v39 + 32);
  Swift::String v68 = (char *)(v33 + 64);
  uint64_t v69 = v22;
  int v48 = (unint64_t)(v47 + 63) >> 6;
  if (v39 != v33 || v46 >= &v68[8 * v48]) {
    memmove(v46, v68, 8 * v48);
  }
  int v49 = 0;
  *(void *)(v39 + 16) = *(void *)(v33 + 16);
  uint64_t v50 = 1 << *(unsigned char *)(v33 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  uint64_t v52 = v51 & *(void *)(v33 + 64);
  long long v67 = (unint64_t)(v50 + 63) >> 6;
  while (1)
  {
    id v31 = v69;
    id v42 = v74;
    if (v52)
    {
      uint64_t v72 = (v52 - 1) & v52;
      char v73 = v49;
      uint64_t v53 = __clz(__rbit64(v52)) | (v49 << 6);
      goto LABEL_24;
    }
    uint64_t v58 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    char v14 = (uint64_t)v75;
    if (v58 >= v67) {
      goto LABEL_50;
    }
    uint64_t v59 = *(void *)&v68[8 * v58];
    long long v60 = v49 + 1;
    if (!v59)
    {
      long long v60 = v49 + 2;
      if (v49 + 2 >= v67) {
        goto LABEL_50;
      }
      uint64_t v59 = *(void *)&v68[8 * v60];
      if (!v59)
      {
        long long v60 = v49 + 3;
        if (v49 + 3 >= v67) {
          goto LABEL_50;
        }
        uint64_t v59 = *(void *)&v68[8 * v60];
        if (!v59)
        {
          long long v60 = v49 + 4;
          if (v49 + 4 >= v67) {
            goto LABEL_50;
          }
          uint64_t v59 = *(void *)&v68[8 * v60];
          if (!v59)
          {
            long long v60 = v49 + 5;
            if (v49 + 5 >= v67) {
              goto LABEL_50;
            }
            uint64_t v59 = *(void *)&v68[8 * v60];
            if (!v59)
            {
              long long v60 = v49 + 6;
              if (v49 + 6 >= v67) {
                goto LABEL_50;
              }
              uint64_t v59 = *(void *)&v68[8 * v60];
              if (!v59)
              {
                long long v60 = v49 + 7;
                if (v49 + 7 >= v67) {
                  goto LABEL_50;
                }
                uint64_t v59 = *(void *)&v68[8 * v60];
                if (!v59)
                {
                  long long v60 = v49 + 8;
                  if (v49 + 8 >= v67) {
                    goto LABEL_50;
                  }
                  uint64_t v59 = *(void *)&v68[8 * v60];
                  if (!v59) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    uint64_t v72 = (v59 - 1) & v59;
    char v73 = v60;
    uint64_t v53 = __clz(__rbit64(v59)) + (v60 << 6);
LABEL_24:
    uint64_t v54 = v71;
    uint64_t v55 = *(void *)(v70 + 72) * v53;
    outlined init with copy of ICUPercentNumberFormatter.Signature(*(void *)(v33 + 48) + v55, v71, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    uint64_t v56 = 8 * v53;
    uint64_t v57 = *(void *)(*(void *)(v33 + 56) + 8 * v53);
    outlined init with take of ICUPercentNumberFormatter.Signature(v54, *(void *)(v39 + 48) + v55, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v39 + 56) + v56) = v57;
    swift_retain();
    uint64_t v52 = v72;
    int v49 = v73;
  }
  long long v61 = v49 + 9;
  if (v49 + 9 >= v67) {
    goto LABEL_50;
  }
  uint64_t v59 = *(void *)&v68[8 * v61];
  if (v59)
  {
    long long v60 = v49 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    long long v60 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    id v42 = v74;
    char v14 = (uint64_t)v75;
    id v31 = v69;
    if (v60 >= v67) {
      goto LABEL_50;
    }
    uint64_t v59 = *(void *)&v68[8 * v60];
    ++v61;
    if (v59) {
      goto LABEL_49;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  BOOL result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA017ICUCurrencyNumberB0C9Signature33_1C58B5D80AA37B9371410D3343C91B53LLV_AJSgTG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16), a2);
}

__n128 __swift_memcpy172_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 156) = *(long long *)((char *)a2 + 156);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

ValueMetadata *type metadata accessor for ICUNumberFormatterBase.AttributePosition()
{
  return &type metadata for ICUNumberFormatterBase.AttributePosition;
}

uint64_t initializeWithCopy for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    long long v9 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t v12 = *(void *)(a2 + 56);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v11;
    uint64_t v13 = *(void *)(a2 + 64);
    uint64_t v14 = *(void *)(a2 + 72);
    *(void *)(a1 + 56) = v12;
    *(void *)(a1 + 64) = v13;
    uint64_t v15 = *(void *)(a2 + 80);
    uint64_t v16 = *(void *)(a2 + 88);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    long long v17 = *(void **)(a2 + 96);
    long long v18 = *(void **)(a2 + 104);
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    char v20 = *(void **)(a2 + 112);
    uint64_t v19 = *(void **)(a2 + 120);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v20;
    long long v21 = *(void **)(a2 + 128);
    id v29 = v19;
    uint64_t v30 = *(void *)(a2 + 136);
    *(void *)(a1 + 120) = v19;
    *(void *)(a1 + 128) = v21;
    id v31 = v21;
    uint64_t v32 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = v30;
    *(void *)(a1 + 144) = v32;
    uint64_t v22 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v22;
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v23 = v17;
    id v24 = v18;
    id v25 = v20;
    id v26 = v29;
    id v27 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) == 1)
  {
    if (v6 == 1)
    {
      _OWORD *v4 = *v5;
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v8 = *(_OWORD *)(a2 + 64);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      long long v10 = *(_OWORD *)(a2 + 112);
      long long v11 = *(_OWORD *)(a2 + 128);
      long long v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 112) = v10;
    }
    else
    {
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      uint64_t v19 = *(void **)(a2 + 96);
      *(void *)(a1 + 96) = v19;
      char v20 = *(void **)(a2 + 104);
      *(void *)(a1 + 104) = v20;
      long long v21 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v21;
      uint64_t v22 = *(void **)(a2 + 120);
      *(void *)(a1 + 120) = v22;
      char v44 = *(void **)(a2 + 128);
      *(void *)(a1 + 128) = v44;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
      *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
      *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v23 = v19;
      id v24 = v20;
      id v25 = v21;
      id v26 = v22;
      id v27 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of LocalePreferences(a1 + 32);
    _OWORD *v4 = *v5;
    long long v13 = *(_OWORD *)(a2 + 96);
    long long v15 = *(_OWORD *)(a2 + 48);
    long long v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v14;
    long long v17 = *(_OWORD *)(a2 + 128);
    long long v16 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
    *(_OWORD *)(a1 + 128) = v17;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 112) = v18;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int v28 = *(void **)(a1 + 96);
    id v29 = *(void **)(a2 + 96);
    *(void *)(a1 + 96) = v29;
    id v30 = v29;

    id v31 = *(void **)(a1 + 104);
    uint64_t v32 = *(void **)(a2 + 104);
    *(void *)(a1 + 104) = v32;
    id v33 = v32;

    id v34 = *(void **)(a1 + 112);
    id v35 = *(void **)(a2 + 112);
    *(void *)(a1 + 112) = v35;
    id v36 = v35;

    id v37 = *(void **)(a1 + 120);
    id v38 = *(void **)(a2 + 120);
    *(void *)(a1 + 120) = v38;
    id v39 = v38;

    id v40 = *(void **)(a1 + 128);
    id v41 = *(void **)(a2 + 128);
    *(void *)(a1 + 128) = v41;
    id v42 = v41;

    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
    *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
    *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  }
  return a1;
}

uint64_t assignWithTake for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40) != 1)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6 != 1)
    {
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v12;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRelease();
      long long v13 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);

      long long v14 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);

      long long v15 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);

      long long v16 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);

      long long v17 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);

      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v18;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
      return a1;
    }
    outlined destroy of LocalePreferences(a1 + 32);
  }
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUMeasurementNumberFormatter.Signature(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 172)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUMeasurementNumberFormatter.Signature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 172) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 172) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ICUByteCountNumberFormatter.Signature()
{
  return &unk_1ECA41A78;
}

void *initializeBufferWithCopyOfBuffer for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
    *(unsigned char *)(a1 + 78) = *((unsigned char *)a2 + 78);
    long long v8 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v9 = v8[9];
    long long v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v16 = v8[10];
    long long v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    *(void *)long long v17 = *(void *)v18;
    v17[8] = *(unsigned char *)(v18 + 8);
    *((unsigned char *)v4 + v8[11]) = *((unsigned char *)a2 + v8[11]);
    *((unsigned char *)v4 + v8[12]) = *((unsigned char *)a2 + v8[12]);
    uint64_t v19 = a3[5];
    uint64_t v20 = a3[6];
    long long v21 = (void *)((char *)v4 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *long long v21 = *v22;
    v21[1] = v23;
    id v24 = (void *)((char *)v4 + v20);
    id v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *id v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = a3[7];
    int v28 = (char *)v4 + v27;
    id v29 = (char *)a2 + v27;
    uint64_t v30 = *(uint64_t *)((char *)a2 + v27 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30 == 1)
    {
      long long v31 = *((_OWORD *)v29 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
      *((_OWORD *)v28 + 7) = v31;
      *(_OWORD *)(v28 + 124) = *(_OWORD *)(v29 + 124);
      long long v32 = *((_OWORD *)v29 + 3);
      *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
      *((_OWORD *)v28 + 3) = v32;
      long long v33 = *((_OWORD *)v29 + 5);
      *((_OWORD *)v28 + 4) = *((_OWORD *)v29 + 4);
      *((_OWORD *)v28 + 5) = v33;
      long long v34 = *((_OWORD *)v29 + 1);
      *(_OWORD *)int v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v34;
    }
    else
    {
      *int v28 = *v29;
      uint64_t v35 = *((void *)v29 + 2);
      uint64_t v36 = *((void *)v29 + 3);
      *((void *)v28 + 1) = v30;
      *((void *)v28 + 2) = v35;
      uint64_t v37 = *((void *)v29 + 4);
      uint64_t v38 = *((void *)v29 + 5);
      *((void *)v28 + 3) = v36;
      *((void *)v28 + 4) = v37;
      uint64_t v39 = *((void *)v29 + 6);
      uint64_t v40 = *((void *)v29 + 7);
      *((void *)v28 + 5) = v38;
      *((void *)v28 + 6) = v39;
      id v42 = (void *)*((void *)v29 + 8);
      id v41 = (void *)*((void *)v29 + 9);
      *((void *)v28 + 7) = v40;
      *((void *)v28 + 8) = v42;
      uint64_t v53 = (void *)*((void *)v29 + 10);
      uint64_t v54 = (void *)*((void *)v29 + 11);
      *((void *)v28 + 9) = v41;
      *((void *)v28 + 10) = v53;
      uint64_t v43 = *((void *)v29 + 13);
      uint64_t v55 = (void *)*((void *)v29 + 12);
      *((void *)v28 + 11) = v54;
      *((void *)v28 + 12) = v55;
      uint64_t v44 = *((void *)v29 + 15);
      uint64_t v45 = *((void *)v29 + 14);
      *((void *)v28 + 13) = v43;
      *((void *)v28 + 14) = v45;
      uint64_t v46 = *((void *)v29 + 16);
      *((void *)v28 + 15) = v44;
      *((void *)v28 + 16) = v46;
      *((_DWORD *)v28 + 34) = *((_DWORD *)v29 + 34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v47 = v42;
      id v48 = v41;
      id v49 = v53;
      id v50 = v54;
      id v51 = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t destroy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0) + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t result = *(void *)(v7 + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v8 = v7[9];
  uint64_t v9 = (void *)(a1 + v8);
  long long v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v7[11]) = *(unsigned char *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  uint64_t v17 = a3[5];
  uint64_t v18 = a3[6];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[7];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = *(void *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28 == 1)
  {
    long long v29 = *(_OWORD *)(v27 + 112);
    *(_OWORD *)(v26 + 96) = *(_OWORD *)(v27 + 96);
    *(_OWORD *)(v26 + 112) = v29;
    *(_OWORD *)(v26 + 124) = *(_OWORD *)(v27 + 124);
    long long v30 = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v26 + 48) = v30;
    long long v31 = *(_OWORD *)(v27 + 80);
    *(_OWORD *)(v26 + 64) = *(_OWORD *)(v27 + 64);
    *(_OWORD *)(v26 + 80) = v31;
    long long v32 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v32;
  }
  else
  {
    *(unsigned char *)uint64_t v26 = *(unsigned char *)v27;
    uint64_t v33 = *(void *)(v27 + 16);
    uint64_t v34 = *(void *)(v27 + 24);
    *(void *)(v26 + 8) = v28;
    *(void *)(v26 + 16) = v33;
    uint64_t v35 = *(void *)(v27 + 32);
    uint64_t v36 = *(void *)(v27 + 40);
    *(void *)(v26 + 24) = v34;
    *(void *)(v26 + 32) = v35;
    uint64_t v37 = *(void *)(v27 + 48);
    uint64_t v38 = *(void *)(v27 + 56);
    *(void *)(v26 + 40) = v36;
    *(void *)(v26 + 48) = v37;
    uint64_t v40 = *(void **)(v27 + 64);
    uint64_t v39 = *(void **)(v27 + 72);
    *(void *)(v26 + 56) = v38;
    *(void *)(v26 + 64) = v40;
    id v51 = *(void **)(v27 + 80);
    uint64_t v52 = *(void **)(v27 + 88);
    *(void *)(v26 + 72) = v39;
    *(void *)(v26 + 80) = v51;
    uint64_t v41 = *(void *)(v27 + 104);
    uint64_t v53 = *(void **)(v27 + 96);
    *(void *)(v26 + 88) = v52;
    *(void *)(v26 + 96) = v53;
    uint64_t v42 = *(void *)(v27 + 120);
    uint64_t v43 = *(void *)(v27 + 112);
    *(void *)(v26 + 104) = v41;
    *(void *)(v26 + 112) = v43;
    uint64_t v44 = *(void *)(v27 + 128);
    *(void *)(v26 + 120) = v42;
    *(void *)(v26 + 128) = v44;
    *(_DWORD *)(v26 + 136) = *(_DWORD *)(v27 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v45 = v40;
    id v46 = v39;
    id v47 = v51;
    id v48 = v52;
    id v49 = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v5;
  long long v6 = *((_OWORD *)a2 + 1);
  long long v7 = *((_OWORD *)a2 + 2);
  long long v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
  *(unsigned char *)(a1 + 78) = *((unsigned char *)a2 + 78);
  uint64_t v9 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = v9[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  *(unsigned char *)(a1 + v9[11]) = *((unsigned char *)a2 + v9[11]);
  *(unsigned char *)(a1 + v9[12]) = *((unsigned char *)a2 + v9[12]);
  uint64_t v23 = a3[5];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[6];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)((char *)a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[7];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (uint64_t)a2 + v29;
  uint64_t v32 = *(void *)(a1 + v29 + 8);
  uint64_t v33 = *(void *)(v31 + 8);
  if (v32 == 1)
  {
    if (v33 == 1)
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      long long v34 = *(_OWORD *)(v31 + 16);
      long long v35 = *(_OWORD *)(v31 + 32);
      long long v36 = *(_OWORD *)(v31 + 64);
      *(_OWORD *)(v30 + 48) = *(_OWORD *)(v31 + 48);
      *(_OWORD *)(v30 + 64) = v36;
      *(_OWORD *)(v30 + 16) = v34;
      *(_OWORD *)(v30 + 32) = v35;
      long long v37 = *(_OWORD *)(v31 + 80);
      long long v38 = *(_OWORD *)(v31 + 96);
      long long v39 = *(_OWORD *)(v31 + 112);
      *(_OWORD *)(v30 + 124) = *(_OWORD *)(v31 + 124);
      *(_OWORD *)(v30 + 96) = v38;
      *(_OWORD *)(v30 + 112) = v39;
      *(_OWORD *)(v30 + 80) = v37;
    }
    else
    {
      *(unsigned char *)uint64_t v30 = *(unsigned char *)v31;
      *(void *)(v30 + 8) = *(void *)(v31 + 8);
      *(void *)(v30 + 16) = *(void *)(v31 + 16);
      *(void *)(v30 + 24) = *(void *)(v31 + 24);
      *(void *)(v30 + 32) = *(void *)(v31 + 32);
      *(void *)(v30 + 40) = *(void *)(v31 + 40);
      *(void *)(v30 + 48) = *(void *)(v31 + 48);
      *(void *)(v30 + 56) = *(void *)(v31 + 56);
      id v46 = *(void **)(v31 + 64);
      *(void *)(v30 + 64) = v46;
      id v47 = *(void **)(v31 + 72);
      *(void *)(v30 + 72) = v47;
      id v48 = *(void **)(v31 + 80);
      *(void *)(v30 + 80) = v48;
      uint64_t v70 = *(void **)(v31 + 88);
      *(void *)(v30 + 88) = v70;
      uint64_t v71 = *(void **)(v31 + 96);
      *(void *)(v30 + 96) = v71;
      *(void *)(v30 + 104) = *(void *)(v31 + 104);
      *(void *)(v30 + 112) = *(void *)(v31 + 112);
      *(void *)(v30 + 120) = *(void *)(v31 + 120);
      *(void *)(v30 + 128) = *(void *)(v31 + 128);
      *(unsigned char *)(v30 + 136) = *(unsigned char *)(v31 + 136);
      *(unsigned char *)(v30 + 137) = *(unsigned char *)(v31 + 137);
      *(unsigned char *)(v30 + 138) = *(unsigned char *)(v31 + 138);
      *(unsigned char *)(v30 + 139) = *(unsigned char *)(v31 + 139);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v49 = v46;
      id v50 = v47;
      id v51 = v48;
      id v52 = v70;
      id v53 = v71;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v33 == 1)
  {
    outlined destroy of LocalePreferences(v30);
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    long long v40 = *(_OWORD *)(v31 + 64);
    long long v42 = *(_OWORD *)(v31 + 16);
    long long v41 = *(_OWORD *)(v31 + 32);
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 64) = v40;
    *(_OWORD *)(v30 + 16) = v42;
    *(_OWORD *)(v30 + 32) = v41;
    long long v44 = *(_OWORD *)(v31 + 96);
    long long v43 = *(_OWORD *)(v31 + 112);
    long long v45 = *(_OWORD *)(v31 + 80);
    *(_OWORD *)(v30 + 124) = *(_OWORD *)(v31 + 124);
    *(_OWORD *)(v30 + 96) = v44;
    *(_OWORD *)(v30 + 112) = v43;
    *(_OWORD *)(v30 + 80) = v45;
  }
  else
  {
    *(unsigned char *)uint64_t v30 = *(unsigned char *)v31;
    *(void *)(v30 + 8) = *(void *)(v31 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v30 + 16) = *(void *)(v31 + 16);
    *(void *)(v30 + 24) = *(void *)(v31 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v30 + 32) = *(void *)(v31 + 32);
    *(void *)(v30 + 40) = *(void *)(v31 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v30 + 48) = *(void *)(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v30 + 56) = *(void *)(v31 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void **)(v30 + 64);
    uint64_t v55 = *(void **)(v31 + 64);
    *(void *)(v30 + 64) = v55;
    id v56 = v55;

    uint64_t v57 = *(void **)(v30 + 72);
    uint64_t v58 = *(void **)(v31 + 72);
    *(void *)(v30 + 72) = v58;
    id v59 = v58;

    long long v60 = *(void **)(v30 + 80);
    long long v61 = *(void **)(v31 + 80);
    *(void *)(v30 + 80) = v61;
    id v62 = v61;

    long long v63 = *(void **)(v30 + 88);
    long long v64 = *(void **)(v31 + 88);
    *(void *)(v30 + 88) = v64;
    id v65 = v64;

    long long v66 = *(void **)(v30 + 96);
    long long v67 = *(void **)(v31 + 96);
    *(void *)(v30 + 96) = v67;
    id v68 = v67;

    *(void *)(v30 + 104) = *(void *)(v31 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v30 + 112) = *(void *)(v31 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v30 + 120) = *(void *)(v31 + 120);
    *(void *)(v30 + 128) = *(void *)(v31 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v30 + 136) = *(unsigned char *)(v31 + 136);
    *(unsigned char *)(v30 + 137) = *(unsigned char *)(v31 + 137);
    *(unsigned char *)(v30 + 138) = *(unsigned char *)(v31 + 138);
    *(unsigned char *)(v30 + 139) = *(unsigned char *)(v31 + 139);
  }
  return a1;
}

uint64_t initializeWithTake for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  long long v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v8 = v7[9];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v7[11]) = *(unsigned char *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  uint64_t v17 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  uint64_t v20 = (_OWORD *)(a2 + v18);
  long long v21 = v20[7];
  v19[6] = v20[6];
  v19[7] = v21;
  *(_OWORD *)((char *)v19 + 124) = *(_OWORD *)((char *)v20 + 124);
  long long v22 = v20[3];
  _OWORD v19[2] = v20[2];
  v19[3] = v22;
  long long v23 = v20[5];
  v19[4] = v20[4];
  v19[5] = v23;
  long long v24 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v24;
  return a1;
}

uint64_t assignWithTake for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  long long v6 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v7 = v6[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(unsigned char *)(a1 + v6[11]) = *(unsigned char *)(a2 + v6[11]);
  *(unsigned char *)(a1 + v6[12]) = *(unsigned char *)(a2 + v6[12]);
  uint64_t v19 = a3[5];
  uint64_t v20 = (void *)(a1 + v19);
  long long v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[7];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  if (*(void *)(a1 + v29 + 8) != 1)
  {
    uint64_t v32 = *(void *)(v31 + 8);
    if (v32 != 1)
    {
      *(unsigned char *)uint64_t v30 = *(unsigned char *)v31;
      *(void *)(v30 + 8) = v32;
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void *)(v31 + 24);
      *(void *)(v30 + 16) = *(void *)(v31 + 16);
      *(void *)(v30 + 24) = v37;
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void *)(v31 + 40);
      *(void *)(v30 + 32) = *(void *)(v31 + 32);
      *(void *)(v30 + 40) = v38;
      swift_bridgeObjectRelease();
      *(void *)(v30 + 48) = *(void *)(v31 + 48);
      swift_bridgeObjectRelease();
      *(void *)(v30 + 56) = *(void *)(v31 + 56);
      swift_bridgeObjectRelease();
      long long v39 = *(void **)(v30 + 64);
      *(void *)(v30 + 64) = *(void *)(v31 + 64);

      long long v40 = *(void **)(v30 + 72);
      *(void *)(v30 + 72) = *(void *)(v31 + 72);

      long long v41 = *(void **)(v30 + 80);
      *(void *)(v30 + 80) = *(void *)(v31 + 80);

      long long v42 = *(void **)(v30 + 88);
      *(void *)(v30 + 88) = *(void *)(v31 + 88);

      long long v43 = *(void **)(v30 + 96);
      *(void *)(v30 + 96) = *(void *)(v31 + 96);

      *(void *)(v30 + 104) = *(void *)(v31 + 104);
      swift_bridgeObjectRelease();
      *(void *)(v30 + 112) = *(void *)(v31 + 112);
      swift_bridgeObjectRelease();
      uint64_t v44 = *(void *)(v31 + 128);
      *(void *)(v30 + 120) = *(void *)(v31 + 120);
      *(void *)(v30 + 128) = v44;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v30 + 136) = *(_DWORD *)(v31 + 136);
      return a1;
    }
    outlined destroy of LocalePreferences(v30);
  }
  long long v33 = *(_OWORD *)(v31 + 112);
  *(_OWORD *)(v30 + 96) = *(_OWORD *)(v31 + 96);
  *(_OWORD *)(v30 + 112) = v33;
  *(_OWORD *)(v30 + 124) = *(_OWORD *)(v31 + 124);
  long long v34 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v34;
  long long v35 = *(_OWORD *)(v31 + 80);
  *(_OWORD *)(v30 + 64) = *(_OWORD *)(v31 + 64);
  *(_OWORD *)(v30 + 80) = v35;
  long long v36 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181C67514);
}

uint64_t sub_181C67514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181C67540);
}

uint64_t sub_181C67540(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t type metadata completion function for ICUCurrencyNumberFormatter.Signature()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ICUNumberFormatter.Signature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
    *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
    *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
    *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
    uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v9 = v8[9];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v16 = v8[10];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = *(unsigned char *)(v18 + 8);
    *((unsigned char *)v4 + v8[11]) = *((unsigned char *)a2 + v8[11]);
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = *(int *)(a3 + 24);
    long long v21 = (void *)((char *)v4 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *long long v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (char *)v4 + v20;
    uint64_t v25 = (char *)a2 + v20;
    uint64_t v26 = *(uint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain();
    if (v26 == 1)
    {
      long long v27 = *((_OWORD *)v25 + 7);
      *((_OWORD *)v24 + 6) = *((_OWORD *)v25 + 6);
      *((_OWORD *)v24 + 7) = v27;
      *(_OWORD *)(v24 + 124) = *(_OWORD *)(v25 + 124);
      long long v28 = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = v28;
      long long v29 = *((_OWORD *)v25 + 5);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
      *((_OWORD *)v24 + 5) = v29;
      long long v30 = *((_OWORD *)v25 + 1);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v30;
    }
    else
    {
      *uint64_t v24 = *v25;
      uint64_t v31 = *((void *)v25 + 2);
      uint64_t v32 = *((void *)v25 + 3);
      *((void *)v24 + 1) = v26;
      *((void *)v24 + 2) = v31;
      uint64_t v33 = *((void *)v25 + 4);
      uint64_t v34 = *((void *)v25 + 5);
      *((void *)v24 + 3) = v32;
      *((void *)v24 + 4) = v33;
      uint64_t v35 = *((void *)v25 + 6);
      uint64_t v36 = *((void *)v25 + 7);
      *((void *)v24 + 5) = v34;
      *((void *)v24 + 6) = v35;
      uint64_t v38 = (void *)*((void *)v25 + 8);
      uint64_t v37 = (void *)*((void *)v25 + 9);
      *((void *)v24 + 7) = v36;
      *((void *)v24 + 8) = v38;
      id v49 = (void *)*((void *)v25 + 10);
      id v50 = (void *)*((void *)v25 + 11);
      *((void *)v24 + 9) = v37;
      *((void *)v24 + 10) = v49;
      uint64_t v39 = *((void *)v25 + 13);
      id v51 = (void *)*((void *)v25 + 12);
      *((void *)v24 + 11) = v50;
      *((void *)v24 + 12) = v51;
      uint64_t v40 = *((void *)v25 + 15);
      uint64_t v41 = *((void *)v25 + 14);
      *((void *)v24 + 13) = v39;
      *((void *)v24 + 14) = v41;
      uint64_t v42 = *((void *)v25 + 16);
      *((void *)v24 + 15) = v40;
      *((void *)v24 + 16) = v42;
      *((_DWORD *)v24 + 34) = *((_DWORD *)v25 + 34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v43 = v38;
      id v44 = v37;
      id v45 = v49;
      id v46 = v50;
      id v47 = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t assignWithCopy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v5;
  long long v6 = *((_OWORD *)a2 + 1);
  long long v7 = *((_OWORD *)a2 + 2);
  long long v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  LOWORD(v5) = *((_WORD *)a2 + 37);
  *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
  *(_WORD *)(a1 + 74) = v5;
  *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = v9[10];
  uint64_t v20 = a1 + v19;
  long long v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  *(unsigned char *)(a1 + v9[11]) = *((unsigned char *)a2 + v9[11]);
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = (uint64_t)a2 + v26;
  uint64_t v29 = *(void *)(a1 + v26 + 8);
  uint64_t v30 = *(void *)(v28 + 8);
  if (v29 == 1)
  {
    if (v30 == 1)
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      long long v31 = *(_OWORD *)(v28 + 16);
      long long v32 = *(_OWORD *)(v28 + 32);
      long long v33 = *(_OWORD *)(v28 + 64);
      *(_OWORD *)(v27 + 48) = *(_OWORD *)(v28 + 48);
      *(_OWORD *)(v27 + 64) = v33;
      *(_OWORD *)(v27 + 16) = v31;
      *(_OWORD *)(v27 + 32) = v32;
      long long v34 = *(_OWORD *)(v28 + 80);
      long long v35 = *(_OWORD *)(v28 + 96);
      long long v36 = *(_OWORD *)(v28 + 112);
      *(_OWORD *)(v27 + 124) = *(_OWORD *)(v28 + 124);
      *(_OWORD *)(v27 + 96) = v35;
      *(_OWORD *)(v27 + 112) = v36;
      *(_OWORD *)(v27 + 80) = v34;
    }
    else
    {
      *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
      *(void *)(v27 + 8) = *(void *)(v28 + 8);
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      *(void *)(v27 + 24) = *(void *)(v28 + 24);
      *(void *)(v27 + 32) = *(void *)(v28 + 32);
      *(void *)(v27 + 40) = *(void *)(v28 + 40);
      *(void *)(v27 + 48) = *(void *)(v28 + 48);
      *(void *)(v27 + 56) = *(void *)(v28 + 56);
      id v43 = *(void **)(v28 + 64);
      *(void *)(v27 + 64) = v43;
      id v44 = *(void **)(v28 + 72);
      *(void *)(v27 + 72) = v44;
      id v45 = *(void **)(v28 + 80);
      *(void *)(v27 + 80) = v45;
      long long v67 = *(void **)(v28 + 88);
      *(void *)(v27 + 88) = v67;
      id v68 = *(void **)(v28 + 96);
      *(void *)(v27 + 96) = v68;
      *(void *)(v27 + 104) = *(void *)(v28 + 104);
      *(void *)(v27 + 112) = *(void *)(v28 + 112);
      *(void *)(v27 + 120) = *(void *)(v28 + 120);
      *(void *)(v27 + 128) = *(void *)(v28 + 128);
      *(unsigned char *)(v27 + 136) = *(unsigned char *)(v28 + 136);
      *(unsigned char *)(v27 + 137) = *(unsigned char *)(v28 + 137);
      *(unsigned char *)(v27 + 138) = *(unsigned char *)(v28 + 138);
      *(unsigned char *)(v27 + 139) = *(unsigned char *)(v28 + 139);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v46 = v43;
      id v47 = v44;
      id v48 = v45;
      id v49 = v67;
      id v50 = v68;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v30 == 1)
  {
    outlined destroy of LocalePreferences(v27);
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    long long v37 = *(_OWORD *)(v28 + 64);
    long long v39 = *(_OWORD *)(v28 + 16);
    long long v38 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(v27 + 48) = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(v27 + 64) = v37;
    *(_OWORD *)(v27 + 16) = v39;
    *(_OWORD *)(v27 + 32) = v38;
    long long v41 = *(_OWORD *)(v28 + 96);
    long long v40 = *(_OWORD *)(v28 + 112);
    long long v42 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(v27 + 124) = *(_OWORD *)(v28 + 124);
    *(_OWORD *)(v27 + 96) = v41;
    *(_OWORD *)(v27 + 112) = v40;
    *(_OWORD *)(v27 + 80) = v42;
  }
  else
  {
    *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
    *(void *)(v27 + 8) = *(void *)(v28 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v27 + 16) = *(void *)(v28 + 16);
    *(void *)(v27 + 24) = *(void *)(v28 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v27 + 32) = *(void *)(v28 + 32);
    *(void *)(v27 + 40) = *(void *)(v28 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v27 + 48) = *(void *)(v28 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v27 + 56) = *(void *)(v28 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v51 = *(void **)(v27 + 64);
    id v52 = *(void **)(v28 + 64);
    *(void *)(v27 + 64) = v52;
    id v53 = v52;

    uint64_t v54 = *(void **)(v27 + 72);
    uint64_t v55 = *(void **)(v28 + 72);
    *(void *)(v27 + 72) = v55;
    id v56 = v55;

    uint64_t v57 = *(void **)(v27 + 80);
    uint64_t v58 = *(void **)(v28 + 80);
    *(void *)(v27 + 80) = v58;
    id v59 = v58;

    long long v60 = *(void **)(v27 + 88);
    long long v61 = *(void **)(v28 + 88);
    *(void *)(v27 + 88) = v61;
    id v62 = v61;

    long long v63 = *(void **)(v27 + 96);
    long long v64 = *(void **)(v28 + 96);
    *(void *)(v27 + 96) = v64;
    id v65 = v64;

    *(void *)(v27 + 104) = *(void *)(v28 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v27 + 112) = *(void *)(v28 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v27 + 120) = *(void *)(v28 + 120);
    *(void *)(v27 + 128) = *(void *)(v28 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v27 + 136) = *(unsigned char *)(v28 + 136);
    *(unsigned char *)(v27 + 137) = *(unsigned char *)(v28 + 137);
    *(unsigned char *)(v27 + 138) = *(unsigned char *)(v28 + 138);
    *(unsigned char *)(v27 + 139) = *(unsigned char *)(v28 + 139);
  }
  return a1;
}

uint64_t initializeWithTake for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  long long v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v8 = v7[9];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v7[11]) = *(unsigned char *)(a2 + v7[11]);
  uint64_t v17 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  long long v20 = v19[7];
  v18[6] = v19[6];
  v18[7] = v20;
  *(_OWORD *)((char *)v18 + 124) = *(_OWORD *)((char *)v19 + 124);
  long long v21 = v19[3];
  v18[2] = v19[2];
  v18[3] = v21;
  long long v22 = v19[5];
  v18[4] = v19[4];
  v18[5] = v22;
  long long v23 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v23;
  return a1;
}

uint64_t assignWithTake for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  long long v6 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v7 = v6[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(unsigned char *)(a1 + v6[11]) = *(unsigned char *)(a2 + v6[11]);
  uint64_t v19 = *(int *)(a3 + 20);
  long long v20 = (void *)(a1 + v19);
  long long v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *long long v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(int *)(a3 + 24);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  if (*(void *)(a1 + v24 + 8) != 1)
  {
    uint64_t v27 = *(void *)(v26 + 8);
    if (v27 != 1)
    {
      *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
      *(void *)(v25 + 8) = v27;
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(v26 + 24);
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      *(void *)(v25 + 24) = v32;
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void *)(v26 + 40);
      *(void *)(v25 + 32) = *(void *)(v26 + 32);
      *(void *)(v25 + 40) = v33;
      swift_bridgeObjectRelease();
      *(void *)(v25 + 48) = *(void *)(v26 + 48);
      swift_bridgeObjectRelease();
      *(void *)(v25 + 56) = *(void *)(v26 + 56);
      swift_bridgeObjectRelease();
      long long v34 = *(void **)(v25 + 64);
      *(void *)(v25 + 64) = *(void *)(v26 + 64);

      long long v35 = *(void **)(v25 + 72);
      *(void *)(v25 + 72) = *(void *)(v26 + 72);

      long long v36 = *(void **)(v25 + 80);
      *(void *)(v25 + 80) = *(void *)(v26 + 80);

      long long v37 = *(void **)(v25 + 88);
      *(void *)(v25 + 88) = *(void *)(v26 + 88);

      long long v38 = *(void **)(v25 + 96);
      *(void *)(v25 + 96) = *(void *)(v26 + 96);

      *(void *)(v25 + 104) = *(void *)(v26 + 104);
      swift_bridgeObjectRelease();
      *(void *)(v25 + 112) = *(void *)(v26 + 112);
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void *)(v26 + 128);
      *(void *)(v25 + 120) = *(void *)(v26 + 120);
      *(void *)(v25 + 128) = v39;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v25 + 136) = *(_DWORD *)(v26 + 136);
      return a1;
    }
    outlined destroy of LocalePreferences(v25);
  }
  long long v28 = *(_OWORD *)(v26 + 112);
  *(_OWORD *)(v25 + 96) = *(_OWORD *)(v26 + 96);
  *(_OWORD *)(v25 + 112) = v28;
  *(_OWORD *)(v25 + 124) = *(_OWORD *)(v26 + 124);
  long long v29 = *(_OWORD *)(v26 + 48);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)(v26 + 32);
  *(_OWORD *)(v25 + 48) = v29;
  long long v30 = *(_OWORD *)(v26 + 80);
  *(_OWORD *)(v25 + 64) = *(_OWORD *)(v26 + 64);
  *(_OWORD *)(v25 + 80) = v30;
  long long v31 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v31;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUPercentNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181C6838C);
}

uint64_t sub_181C6838C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUPercentNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181C683B8);
}

uint64_t sub_181C683B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t base witness table accessor for Equatable in ICUCurrencyNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature(&lazy protocol witness table cache variable for type ICUCurrencyNumberFormatter.Signature and conformance ICUCurrencyNumberFormatter.Signature, (void (*)(uint64_t))type metadata accessor for ICUCurrencyNumberFormatter.Signature);
}

unint64_t lazy protocol witness table accessor for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature);
  }
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.format(_:)(NSDecimal *a1)
{
  void (*v14)(unsigned char *__return_ptr, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  Swift::String v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  Swift::String v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  void *v49;
  unint64_t v50;
  Swift::String v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  int v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  __int16 i;
  Swift::String v66;
  int v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  Swift::String result;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned char v89[20];
  unsigned char v90[140];
  unsigned char v91[144];
  uint64_t v92;

  LODWORD(v84) = v2;
  uint64_t v4 = v1;
  uint64_t v85 = 0;
  uint64_t v86 = (unint64_t)a1;
  unsigned __int8 v92 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for ICUNumberFormatter.Signature(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v83 = v3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  uint64_t v9 = *(void *)(v3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 472);
  swift_unknownObjectRetain();
  uint64_t v12 = v11(ObjectType, v9);
  uint64_t v81 = v13;
  uint64_t v82 = v12;
  swift_unknownObjectRelease();
  int v14 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v9 + 464);
  swift_unknownObjectRetain();
  v14(v90, ObjectType, v9);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v91, &demangling cache variable for type metadata for LocalePreferences?);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v83, (uint64_t)v8, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v15 = &v8[*(int *)(v6 + 28)];
  uint64_t v16 = v81;
  *(void *)uint64_t v15 = v82;
  *((void *)v15 + 1) = v16;
  outlined init with take of LocalePreferences?((uint64_t)v91, (uint64_t)&v8[*(int *)(v6 + 32)], &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v17 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v19 = v86;
    long long v20 = v4;
    long long v21 = v4;
    LODWORD(v22) = v84;
    uint64_t v23 = v85;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v18, v86, v21, v84);
    if (v23)
    {

      swift_release();
      uint64_t v23 = 0;
    }
    else
    {
LABEL_33:
      uint64_t v57 = swift_retain_n();
      MEMORY[0x1F4188790](v57);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v78 - 8), (uint64_t *)v90);
      if (v23) {
        goto LABEL_47;
      }
      id v56 = *(void *)v90;
      uint64_t v55 = *(void *)&v90[8];
      swift_release();
      swift_release_n();
      if (v55) {
        goto LABEL_44;
      }
    }
  }
  else
  {
    LODWORD(v22) = v84;
    long long v20 = v4;
    uint64_t v23 = v85;
    uint64_t v19 = v86;
  }
  uint64_t v85 = v23;
  *(void *)uint64_t v90 = v19;
  uint64_t v24 = HIDWORD(v19);
  uint64_t v25 = HIWORD(v19);
  uint64_t v26 = v20;
  uint64_t v27 = v20 >> 16;
  *(_WORD *)&v90[8] = v20;
  long long v28 = HIDWORD(v20);
  *(_WORD *)&v90[10] = v27;
  long long v29 = HIWORD(v26);
  *(_WORD *)&v90[12] = v28;
  long long v30 = v22;
  long long v31 = WORD1(v22);
  *(_WORD *)&v90[14] = HIWORD(v26);
  *(_WORD *)&v90[16] = v30;
  *(_WORD *)&v90[18] = v31;
  if (!_So9NSDecimala__length_getter(v90))
  {
    *(void *)uint64_t v90 = v19;
    *(_WORD *)&v90[8] = v26;
    *(_WORD *)&v90[10] = v27;
    *(_WORD *)&v90[12] = v28;
    *(_WORD *)&v90[14] = HIWORD(v26);
    *(_WORD *)&v90[16] = v30;
    *(_WORD *)&v90[18] = v31;
    if (_So9NSDecimala__isNegative_getter(v90))
    {
      uint64_t v55 = 0xE300000000000000;
      id v56 = 5136718;
LABEL_44:
      uint64_t v72 = v56;
      char v73 = (void *)v55;
      goto LABEL_48;
    }
  }
  *(void *)uint64_t v90 = v19;
  *(_WORD *)&v90[8] = v26;
  *(_WORD *)&v90[10] = v27;
  *(_WORD *)&v90[12] = v28;
  *(_WORD *)&v90[14] = HIWORD(v26);
  *(_WORD *)&v90[16] = v30;
  *(_WORD *)&v90[18] = v31;
  if (!_So9NSDecimala__length_getter(v90))
  {
    uint64_t v55 = 0xE100000000000000;
    id v56 = 48;
    goto LABEL_44;
  }
  __int16 v87 = 0;
  uint64_t v88 = 0xE000000000000000;
  *(void *)uint64_t v90 = v19;
  *(_WORD *)&v90[8] = v26;
  *(_WORD *)&v90[10] = v27;
  *(_WORD *)&v90[12] = v28;
  *(_WORD *)&v90[14] = HIWORD(v26);
  *(_WORD *)&v90[16] = v30;
  *(_WORD *)&v90[18] = v31;
  *(void *)uint64_t v89 = v19;
  *(_WORD *)&v89[8] = v26;
  *(_WORD *)&v89[10] = v27;
  *(_WORD *)&v89[12] = v28;
  *(_WORD *)&v89[14] = HIWORD(v26);
  *(_WORD *)&v89[16] = v30;
  *(_WORD *)&v89[18] = v31;
  if ((int)_So9NSDecimala__exponent_getter(v89) >= 1)
  {
    do
    {
      LODWORD(v86) = v31;
      v32._countAndFlagsBits = 48;
      v32._object = (void *)0xE100000000000000;
      String.append(_:)(v32);
      *(_DWORD *)uint64_t v89 = v19;
      *(_WORD *)&v89[4] = v24;
      *(_WORD *)&v89[6] = v25;
      *(_WORD *)&v89[8] = v26;
      *(_WORD *)&v89[10] = v27;
      *(_WORD *)&v89[12] = v28;
      *(_WORD *)&v89[14] = v29;
      *(_WORD *)&v89[16] = v30;
      *(_WORD *)&v89[18] = v86;
      uint64_t v33 = _So9NSDecimala__exponent_getter(v89);
      _So9NSDecimala__exponent_setter((v33 - 1), v90);
      uint64_t v19 = *(unsigned int *)v90;
      uint64_t v24 = *(unsigned __int16 *)&v90[4];
      LOWORD(v25) = *(_WORD *)&v90[6];
      uint64_t v26 = *(unsigned __int16 *)&v90[8];
      LOWORD(v27) = *(_WORD *)&v90[10];
      LOWORD(v28) = *(_WORD *)&v90[12];
      LOWORD(v29) = *(_WORD *)&v90[14];
      long long v30 = *(unsigned __int16 *)&v90[16];
      long long v31 = *(unsigned __int16 *)&v90[18];
      *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
      *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
      *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
      *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
      *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
      *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
      *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
      *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
      *(_WORD *)&v89[18] = *(_WORD *)&v90[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v89) > 0);
  }
  *(_DWORD *)uint64_t v89 = v19;
  *(_WORD *)&v89[4] = v24;
  *(_WORD *)&v89[6] = v25;
  *(_WORD *)&v89[8] = v26;
  *(_WORD *)&v89[10] = v27;
  *(_WORD *)&v89[12] = v28;
  *(_WORD *)&v89[14] = v29;
  *(_WORD *)&v89[16] = v30;
  *(_WORD *)&v89[18] = v31;
  if (!_So9NSDecimala__exponent_getter(v89))
  {
    _So9NSDecimala__exponent_setter(1, v90);
    uint64_t v19 = *(unsigned int *)v90;
    uint64_t v24 = *(unsigned __int16 *)&v90[4];
    LOWORD(v25) = *(_WORD *)&v90[6];
    uint64_t v26 = *(unsigned __int16 *)&v90[8];
    LOWORD(v27) = *(_WORD *)&v90[10];
    LOWORD(v28) = *(_WORD *)&v90[12];
    LOWORD(v29) = *(_WORD *)&v90[14];
    long long v30 = *(unsigned __int16 *)&v90[16];
    LOWORD(v31) = *(_WORD *)&v90[18];
  }
  uint64_t v86 = v19;
  *(_DWORD *)uint64_t v89 = v19;
  uint64_t v82 = v26;
  long long v83 = v24;
  *(_WORD *)&v89[4] = v24;
  *(_WORD *)&v89[6] = v25;
  *(_WORD *)&v89[8] = v26;
  *(_WORD *)&v89[10] = v27;
  *(_WORD *)&v89[12] = v28;
  *(_WORD *)&v89[14] = v29;
  LODWORD(v24) = v30;
  *(_WORD *)&v89[16] = v30;
  *(_WORD *)&v89[18] = v31;
  if (!_So9NSDecimala__length_getter(v89))
  {
    long long v34 = v86;
    LOWORD(v35) = v24;
    LOWORD(v36) = v82;
    LOWORD(v24) = v83;
LABEL_37:
    *(_DWORD *)uint64_t v89 = v34;
    *(_WORD *)&v89[4] = v24;
    *(_WORD *)&v89[6] = v25;
    *(_WORD *)&v89[8] = v36;
    *(_WORD *)&v89[10] = v27;
    *(_WORD *)&v89[12] = v28;
    *(_WORD *)&v89[14] = v29;
    *(_WORD *)&v89[16] = v35;
    *(_WORD *)&v89[18] = v31;
    uint64_t v58 = v36;
    id v59 = v35;
    long long v60 = _So9NSDecimala__exponent_getter(v89);
    long long v61 = v58;
    id v62 = v59;
    if (v60 <= 0)
    {
      uint64_t v86 = v34;
      *(_DWORD *)uint64_t v89 = v34;
      *(_WORD *)&v89[4] = v24;
      *(_WORD *)&v89[6] = v25;
      long long v63 = v58;
      *(_WORD *)&v89[8] = v58;
      *(_WORD *)&v89[10] = v27;
      *(_WORD *)&v89[12] = v28;
      *(_WORD *)&v89[14] = v29;
      long long v64 = v62;
      *(_WORD *)&v89[16] = v62;
      *(_WORD *)&v89[18] = v31;
      for (int i = v24; _So9NSDecimala__exponent_getter(v89); *(_WORD *)&v89[18] = *(_WORD *)&v90[18])
      {
        v66._countAndFlagsBits = 48;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        *(_DWORD *)uint64_t v89 = v86;
        *(_WORD *)&v89[4] = i;
        *(_WORD *)&v89[6] = v25;
        *(_WORD *)&v89[8] = v63;
        *(_WORD *)&v89[10] = v27;
        *(_WORD *)&v89[12] = v28;
        *(_WORD *)&v89[14] = v29;
        *(_WORD *)&v89[16] = v64;
        *(_WORD *)&v89[18] = v31;
        long long v67 = _So9NSDecimala__exponent_getter(v89);
        _So9NSDecimala__exponent_setter((v67 + 1), v90);
        int i = *(_WORD *)&v90[4];
        LOWORD(v25) = *(_WORD *)&v90[6];
        long long v63 = *(_WORD *)&v90[8];
        LOWORD(v27) = *(_WORD *)&v90[10];
        LOWORD(v28) = *(_WORD *)&v90[12];
        LOWORD(v29) = *(_WORD *)&v90[14];
        long long v64 = *(_WORD *)&v90[16];
        LOWORD(v31) = *(_WORD *)&v90[18];
        uint64_t v86 = *(unsigned int *)v90;
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
        *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
        *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
        *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
        *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
        *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
        *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
        *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
      }
      v68._countAndFlagsBits = 46;
      v68._object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      v69._countAndFlagsBits = 48;
      v69._object = (void *)0xE100000000000000;
      String.append(_:)(v69);
      LOWORD(v24) = i;
      LODWORD(v34) = v86;
      long long v61 = v63;
      id v62 = v64;
    }
    *(_DWORD *)uint64_t v89 = v34;
    *(_WORD *)&v89[4] = v24;
    *(_WORD *)&v89[6] = v25;
    *(_WORD *)&v89[8] = v61;
    *(_WORD *)&v89[10] = v27;
    *(_WORD *)&v89[12] = v28;
    *(_WORD *)&v89[14] = v29;
    *(_WORD *)&v89[16] = v62;
    *(_WORD *)&v89[18] = v31;
    if (_So9NSDecimala__isNegative_getter(v89))
    {
      v70._countAndFlagsBits = 45;
      v70._object = (void *)0xE100000000000000;
      String.append(_:)(v70);
    }
    *(void *)uint64_t v89 = v87;
    *(void *)&v89[8] = v88;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    id v56 = String.init<A>(_:)();
    uint64_t v55 = v71;
    goto LABEL_44;
  }
  uint64_t v19 = 3435973837;
  LODWORD(v34) = v86;
  long long v35 = v24;
  long long v36 = v82;
  uint64_t v24 = v83;
  while (1)
  {
    uint64_t v82 = v36;
    LODWORD(v84) = v35;
    *(_DWORD *)uint64_t v89 = v34;
    *(_WORD *)&v89[4] = v24;
    *(_WORD *)&v89[6] = v25;
    *(_WORD *)&v89[8] = v36;
    *(_WORD *)&v89[10] = v27;
    *(_WORD *)&v89[12] = v28;
    *(_WORD *)&v89[14] = v29;
    *(_WORD *)&v89[16] = v35;
    *(_WORD *)&v89[18] = v31;
    if (!_So9NSDecimala__exponent_getter(v89))
    {
      long long v83 = v24;
      v37._countAndFlagsBits = 46;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      LOWORD(v24) = v83;
    }
    *(_DWORD *)uint64_t v89 = v34;
    *(_WORD *)&v89[4] = v24;
    *(_WORD *)&v89[6] = v25;
    *(_WORD *)&v89[8] = v82;
    *(_WORD *)&v89[10] = v27;
    *(_WORD *)&v89[12] = v28;
    *(_WORD *)&v89[14] = v29;
    *(_WORD *)&v89[16] = v84;
    *(_WORD *)&v89[18] = v31;
    long long v38 = _So9NSDecimala__exponent_getter(v89);
    _So9NSDecimala__exponent_setter((v38 + 1), v90);
    uint64_t v39 = *(unsigned int *)v90;
    long long v40 = *(unsigned __int16 *)&v90[4];
    long long v20 = *(unsigned __int16 *)&v90[6];
    uint64_t v86 = *(unsigned __int16 *)&v90[8];
    long long v83 = *(unsigned __int16 *)&v90[12];
    long long v84 = *(unsigned __int16 *)&v90[10];
    uint64_t v81 = *(unsigned __int16 *)&v90[14];
    LODWORD(v82) = *(unsigned __int16 *)&v90[16];
    long long v80 = *(unsigned __int16 *)&v90[18];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v90 | ((unint64_t)*(unsigned __int16 *)&v90[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v90[6] << 48), *(unsigned __int16 *)&v90[8] | ((unint64_t)*(unsigned __int16 *)&v90[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v90[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v90[14] << 48), *(unsigned __int16 *)&v90[16] | (*(unsigned __int16 *)&v90[18] << 16));
    long long v42 = v41;
    id v43 = *(void *)(v41 + 16);
    if (!v43)
    {
      LODWORD(v29) = 0;
      uint64_t v22 = MEMORY[0x1E4FBC860];
      id v47 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v47) {
        goto LABEL_26;
      }
LABEL_23:
      if (!*(_WORD *)(v22 + 2 * v47 + 30))
      {
        do
        {
          *(void *)(v22 + 16) = v47 - 1;
          if (v47 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v22 + 28 + 2 * v47--));
      }
      goto LABEL_26;
    }
    char v78 = v40;
    long long v79 = v39;
    uint64_t v22 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v22 + 16) = v43;
    uint64_t v23 = (void *)(2 * v43);
    bzero((void *)(v22 + 32), 2 * v43);
    id v44 = *(unsigned __int16 *)(2 * v43 + v42 + 30);
    LOWORD(v45) = *(_WORD *)(2 * v43 + v42 + 30) / 0xAu;
    while (1)
    {
      *(_WORD *)(v22 + 30 + 2 * v43) = v45;
      LODWORD(v29) = v44 % 0xA;
      if (v43 == 1) {
        break;
      }
      id v44 = *(unsigned __int16 *)(v42 + 28 + 2 * v43) | (v29 << 16);
      id v45 = v44 / 0xA;
      id v46 = v43 - 2;
      --v43;
      if (v46 >= *(void *)(v22 + 16))
      {
        __break(1u);
        goto LABEL_33;
      }
    }
    LOWORD(v40) = v78;
    LODWORD(v39) = v79;
    id v47 = *(void *)(v22 + 16);
    if (v47) {
      goto LABEL_23;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v89 = v39;
    *(_WORD *)&v89[4] = v40;
    *(_WORD *)&v89[6] = v20;
    *(_WORD *)&v89[8] = v86;
    *(_WORD *)&v89[10] = v84;
    *(_WORD *)&v89[12] = v83;
    *(_WORD *)&v89[14] = v81;
    *(_WORD *)&v89[16] = v82;
    *(_WORD *)&v89[18] = v80;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v22);
    uint64_t v85 = v49;
    if (v49) {
      break;
    }
    id v50 = *(void *)(v22 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v50)) {
      goto LABEL_46;
    }
    _So9NSDecimala__length_setter(v50, v89);
    *(_DWORD *)uint64_t v90 = *(_DWORD *)v89;
    *(_OWORD *)&v90[4] = *(_OWORD *)&v89[4];
    *(void *)uint64_t v89 = v29 | 0x30;
    v51._countAndFlagsBits = MEMORY[0x185302020](v89, 1);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    uint64_t v86 = *(unsigned int *)v90;
    long long v83 = *(unsigned __int16 *)&v90[4];
    LOWORD(v25) = *(_WORD *)&v90[6];
    id v52 = *(unsigned __int16 *)&v90[8];
    LOWORD(v27) = *(_WORD *)&v90[10];
    LOWORD(v28) = *(_WORD *)&v90[12];
    LOWORD(v29) = *(_WORD *)&v90[14];
    id v53 = *(unsigned __int16 *)&v90[16];
    LOWORD(v31) = *(_WORD *)&v90[18];
    *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
    *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
    *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
    *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
    *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
    *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
    *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
    *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
    *(_WORD *)&v89[18] = *(_WORD *)&v90[18];
    uint64_t v54 = _So9NSDecimala__length_getter(v89);
    long long v35 = v53;
    long long v36 = v52;
    long long v34 = v86;
    uint64_t v24 = v83;
    if (!v54) {
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_46:
  uint64_t v77 = 0;
  char v76 = 3455;
  char v75 = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_47:
  swift_release_n();
  uint64_t v72 = swift_willThrow();
  __break(1u);
LABEL_48:
  result._object = v73;
  result._countAndFlagsBits = v72;
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.Currency.format(_:)(NSDecimal *a1)
{
  unsigned int v4 = v2;
  uint64_t v5 = v1;
  uint64_t v7 = 0;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = specialized static ICUCurrencyNumberFormatter.create(for:)(v3);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    unint64_t v10 = v5;
    unsigned int v11 = v4;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v9, (uint64_t)a1, v5, v4);
LABEL_32:
    uint64_t v45 = swift_retain_n();
    MEMORY[0x1F4188790](v45);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v57, (uint64_t *)v70);
    if (v7) {
      goto LABEL_48;
    }
    uint64_t v44 = *(void *)v70;
    unint64_t v43 = *(void *)&v70[8];
    swift_release();
    swift_release_n();
    unsigned int v4 = v11;
    if (v43) {
      goto LABEL_45;
    }
  }
  else
  {
    unint64_t v10 = v5;
  }
  uint64_t v65 = 0;
  *(void *)uint64_t v70 = a1;
  unint64_t v12 = (unint64_t)a1 >> 32;
  unint64_t v13 = (unint64_t)a1 >> 48;
  unint64_t v14 = v10;
  unint64_t v15 = v10 >> 16;
  *(_WORD *)&v70[8] = v14;
  unint64_t v16 = HIDWORD(v14);
  *(_WORD *)&v70[10] = v15;
  unint64_t v17 = HIWORD(v14);
  *(_WORD *)&v70[12] = WORD2(v14);
  unsigned int v18 = HIWORD(v4);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    *(void *)uint64_t v70 = a1;
    *(_WORD *)&v70[8] = v14;
    *(_WORD *)&v70[10] = v15;
    *(_WORD *)&v70[12] = WORD2(v14);
    *(_WORD *)&v70[14] = HIWORD(v14);
    *(_DWORD *)&v70[16] = v4;
    if (_So9NSDecimala__isNegative_getter(v70))
    {
      unint64_t v43 = 0xE300000000000000;
      uint64_t v44 = 5136718;
LABEL_45:
      uint64_t v54 = v44;
      uint64_t v55 = (void *)v43;
      goto LABEL_49;
    }
  }
  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    unint64_t v43 = 0xE100000000000000;
    uint64_t v44 = 48;
    goto LABEL_45;
  }
  uint64_t v67 = 0;
  unint64_t v68 = 0xE000000000000000;
  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  *(void *)uint64_t v69 = a1;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = WORD2(v14);
  *(_WORD *)&v69[14] = HIWORD(v14);
  *(_DWORD *)&v69[16] = v4;
  if ((int)_So9NSDecimala__exponent_getter(v69) >= 1)
  {
    do
    {
      v19._countAndFlagsBits = 48;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      *(_DWORD *)uint64_t v69 = a1;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v14;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      *(_WORD *)&v69[16] = v4;
      *(_WORD *)&v69[18] = v18;
      int v20 = _So9NSDecimala__exponent_getter(v69);
      _So9NSDecimala__exponent_setter((v20 - 1), v70);
      LODWORD(a1) = *(_DWORD *)v70;
      LOWORD(v12) = *(_WORD *)&v70[4];
      LOWORD(v13) = *(_WORD *)&v70[6];
      unint64_t v14 = *(unsigned __int16 *)&v70[8];
      LOWORD(v15) = *(_WORD *)&v70[10];
      LOWORD(v16) = *(_WORD *)&v70[12];
      LOWORD(v17) = *(_WORD *)&v70[14];
      unsigned int v4 = *(unsigned __int16 *)&v70[16];
      LOWORD(v18) = *(_WORD *)&v70[18];
      *(void *)uint64_t v69 = *(void *)v70;
      *(void *)&v69[8] = *(void *)&v70[8];
      *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
      *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v69) > 0);
  }
  *(_DWORD *)uint64_t v69 = a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  *(_WORD *)&v69[16] = v4;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__exponent_getter(v69))
  {
    _So9NSDecimala__exponent_setter(1, v70);
    LODWORD(a1) = *(_DWORD *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    unint64_t v14 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v4 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
  }
  unsigned int v21 = v4;
  int v22 = (int)a1;
  *(_DWORD *)uint64_t v69 = a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  unint64_t v66 = v14;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  unsigned int v23 = v21;
  *(_WORD *)&v69[16] = v21;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__length_getter(v69))
  {
    LOWORD(v24) = v66;
LABEL_36:
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    __int16 v46 = v24;
    if ((int)_So9NSDecimala__exponent_getter(v69) <= 0)
    {
      *(_DWORD *)uint64_t v69 = v22;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v46;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      __int16 v47 = v23;
      for (*(_WORD *)&v69[16] = v23; ; *(_WORD *)&v69[16] = *(_WORD *)&v70[16])
      {
        *(_WORD *)&v69[18] = v18;
        if (!_So9NSDecimala__exponent_getter(v69)) {
          break;
        }
        v48._countAndFlagsBits = 48;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        *(_DWORD *)uint64_t v69 = v22;
        *(_WORD *)&v69[4] = v12;
        *(_WORD *)&v69[6] = v13;
        *(_WORD *)&v69[8] = v46;
        *(_WORD *)&v69[10] = v15;
        *(_WORD *)&v69[12] = v16;
        *(_WORD *)&v69[14] = v17;
        *(_WORD *)&v69[16] = v47;
        *(_WORD *)&v69[18] = v18;
        int v49 = _So9NSDecimala__exponent_getter(v69);
        _So9NSDecimala__exponent_setter((v49 + 1), v70);
        int v22 = *(_DWORD *)v70;
        LOWORD(v12) = *(_WORD *)&v70[4];
        LOWORD(v13) = *(_WORD *)&v70[6];
        __int16 v46 = *(_WORD *)&v70[8];
        LOWORD(v15) = *(_WORD *)&v70[10];
        LOWORD(v16) = *(_WORD *)&v70[12];
        LOWORD(v17) = *(_WORD *)&v70[14];
        __int16 v47 = *(_WORD *)&v70[16];
        LOWORD(v18) = *(_WORD *)&v70[18];
        *(void *)uint64_t v69 = *(void *)v70;
        *(void *)&v69[8] = *(void *)&v70[8];
      }
      v50._countAndFlagsBits = 46;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 48;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
    }
    else
    {
      __int16 v47 = v23;
    }
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v46;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v47;
    *(_WORD *)&v69[18] = v18;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
      v52._countAndFlagsBits = 45;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
    }
    *(void *)uint64_t v69 = v67;
    *(void *)&v69[8] = v68;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    uint64_t v44 = String.init<A>(_:)();
    unint64_t v43 = v53;
    goto LABEL_45;
  }
  a1 = (NSDecimal *)3435973837;
  uint64_t v24 = v66;
  while (1)
  {
    unint64_t v66 = v24;
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    if (!_So9NSDecimala__exponent_getter(v69))
    {
      LODWORD(v64) = v23;
      v25._countAndFlagsBits = 46;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      LOWORD(v23) = v64;
    }
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v66;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    int v26 = _So9NSDecimala__exponent_getter(v69);
    _So9NSDecimala__exponent_setter((v26 + 1), v70);
    uint64_t v27 = *(unsigned int *)v70;
    uint64_t v7 = *(unsigned __int16 *)&v70[6];
    unsigned int v11 = *(unsigned __int16 *)&v70[14];
    unint64_t v66 = *(unsigned __int16 *)&v70[4];
    uint64_t v63 = *(unsigned __int16 *)&v70[10];
    uint64_t v64 = *(unsigned __int16 *)&v70[8];
    uint64_t v62 = *(unsigned __int16 *)&v70[12];
    __int16 v28 = *(_WORD *)&v70[18];
    int v61 = *(unsigned __int16 *)&v70[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v70 | ((unint64_t)*(unsigned __int16 *)&v70[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[6] << 48), *(unsigned __int16 *)&v70[8] | ((unint64_t)*(unsigned __int16 *)&v70[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v70[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[14] << 48), *(unsigned __int16 *)&v70[16] | (*(unsigned __int16 *)&v70[18] << 16));
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(v29 + 16);
    if (!v31)
    {
      LODWORD(v17) = 0;
      uint64_t v32 = MEMORY[0x1E4FBC860];
      uint64_t v36 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v36) {
        goto LABEL_25;
      }
LABEL_22:
      if (!*(_WORD *)(v32 + 2 * v36 + 30))
      {
        do
        {
          *(void *)(v32 + 16) = v36 - 1;
          if (v36 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v32 + 28 + 2 * v36--));
      }
      goto LABEL_25;
    }
    uint64_t v60 = v27;
    uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v10 = v32 + 30;
    *(void *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), 2 * v31);
    unsigned int v33 = *(unsigned __int16 *)(2 * v31 + v30 + 30);
    unsigned int v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v31) = v34;
      LODWORD(v17) = v33 % 0xA;
      if (v31 == 1) {
        break;
      }
      unsigned int v33 = *(unsigned __int16 *)(v30 + 28 + 2 * v31) | (v17 << 16);
      unsigned int v34 = v33 / 0xA;
      unint64_t v35 = v31 - 2;
      --v31;
      if (v35 >= *(void *)(v32 + 16))
      {
        __break(1u);
        goto LABEL_32;
      }
    }
    LODWORD(v27) = v60;
    uint64_t v36 = *(void *)(v32 + 16);
    if (v36) {
      goto LABEL_22;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v69 = v27;
    *(_WORD *)&v69[4] = v66;
    *(_WORD *)&v69[6] = v7;
    *(_WORD *)&v69[8] = v64;
    *(_WORD *)&v69[10] = v63;
    *(_WORD *)&v69[12] = v62;
    *(_WORD *)&v69[14] = v11;
    *(_WORD *)&v69[16] = v61;
    *(_WORD *)&v69[18] = v28;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v32);
    if (v38) {
      break;
    }
    uint64_t v65 = 0;
    unint64_t v39 = *(void *)(v32 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39)) {
      goto LABEL_47;
    }
    _So9NSDecimala__length_setter(v39, v69);
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v69;
    *(_OWORD *)&v70[4] = *(_OWORD *)&v69[4];
    *(void *)uint64_t v69 = v17 | 0x30;
    v40._countAndFlagsBits = MEMORY[0x185302020](v69, 1);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    unint64_t v66 = *(unsigned int *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    uint64_t v41 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v23 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
    *(void *)uint64_t v69 = *(void *)v70;
    *(void *)&v69[8] = *(void *)&v70[8];
    *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
    *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    int v42 = _So9NSDecimala__length_getter(v69);
    uint64_t v24 = v41;
    int v22 = v66;
    if (!v42) {
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_47:
  int v59 = 0;
  uint64_t v58 = 3455;
  v57[32] = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_48:
  swift_release_n();
  uint64_t v54 = swift_willThrow();
  __break(1u);
LABEL_49:
  result._object = v55;
  result._countAndFlagsBits = v54;
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.Percent.format(_:)(NSDecimal *a1)
{
  unsigned int v4 = v2;
  uint64_t v5 = v1;
  uint64_t v7 = 0;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ICUPercentNumberFormatter();
  uint64_t v8 = static ICUPercentNumberFormatter.create(for:)(v3);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    unint64_t v10 = v5;
    unsigned int v11 = v4;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v9, (uint64_t)a1, v5, v4);
LABEL_32:
    uint64_t v45 = swift_retain_n();
    MEMORY[0x1F4188790](v45);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v57, (uint64_t *)v70);
    if (v7) {
      goto LABEL_48;
    }
    uint64_t v44 = *(void *)v70;
    unint64_t v43 = *(void *)&v70[8];
    swift_release();
    swift_release_n();
    unsigned int v4 = v11;
    if (v43) {
      goto LABEL_45;
    }
  }
  else
  {
    unint64_t v10 = v5;
  }
  uint64_t v65 = 0;
  *(void *)uint64_t v70 = a1;
  unint64_t v12 = (unint64_t)a1 >> 32;
  unint64_t v13 = (unint64_t)a1 >> 48;
  unint64_t v14 = v10;
  unint64_t v15 = v10 >> 16;
  *(_WORD *)&v70[8] = v14;
  unint64_t v16 = HIDWORD(v14);
  *(_WORD *)&v70[10] = v15;
  unint64_t v17 = HIWORD(v14);
  *(_WORD *)&v70[12] = WORD2(v14);
  unsigned int v18 = HIWORD(v4);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    *(void *)uint64_t v70 = a1;
    *(_WORD *)&v70[8] = v14;
    *(_WORD *)&v70[10] = v15;
    *(_WORD *)&v70[12] = WORD2(v14);
    *(_WORD *)&v70[14] = HIWORD(v14);
    *(_DWORD *)&v70[16] = v4;
    if (_So9NSDecimala__isNegative_getter(v70))
    {
      unint64_t v43 = 0xE300000000000000;
      uint64_t v44 = 5136718;
LABEL_45:
      uint64_t v54 = v44;
      uint64_t v55 = (void *)v43;
      goto LABEL_49;
    }
  }
  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    unint64_t v43 = 0xE100000000000000;
    uint64_t v44 = 48;
    goto LABEL_45;
  }
  uint64_t v67 = 0;
  unint64_t v68 = 0xE000000000000000;
  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  *(void *)uint64_t v69 = a1;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = WORD2(v14);
  *(_WORD *)&v69[14] = HIWORD(v14);
  *(_DWORD *)&v69[16] = v4;
  if ((int)_So9NSDecimala__exponent_getter(v69) >= 1)
  {
    do
    {
      v19._countAndFlagsBits = 48;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      *(_DWORD *)uint64_t v69 = a1;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v14;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      *(_WORD *)&v69[16] = v4;
      *(_WORD *)&v69[18] = v18;
      int v20 = _So9NSDecimala__exponent_getter(v69);
      _So9NSDecimala__exponent_setter((v20 - 1), v70);
      LODWORD(a1) = *(_DWORD *)v70;
      LOWORD(v12) = *(_WORD *)&v70[4];
      LOWORD(v13) = *(_WORD *)&v70[6];
      unint64_t v14 = *(unsigned __int16 *)&v70[8];
      LOWORD(v15) = *(_WORD *)&v70[10];
      LOWORD(v16) = *(_WORD *)&v70[12];
      LOWORD(v17) = *(_WORD *)&v70[14];
      unsigned int v4 = *(unsigned __int16 *)&v70[16];
      LOWORD(v18) = *(_WORD *)&v70[18];
      *(void *)uint64_t v69 = *(void *)v70;
      *(void *)&v69[8] = *(void *)&v70[8];
      *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
      *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v69) > 0);
  }
  *(_DWORD *)uint64_t v69 = a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  *(_WORD *)&v69[16] = v4;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__exponent_getter(v69))
  {
    _So9NSDecimala__exponent_setter(1, v70);
    LODWORD(a1) = *(_DWORD *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    unint64_t v14 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v4 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
  }
  unsigned int v21 = v4;
  int v22 = (int)a1;
  *(_DWORD *)uint64_t v69 = a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  unint64_t v66 = v14;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  unsigned int v23 = v21;
  *(_WORD *)&v69[16] = v21;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__length_getter(v69))
  {
    LOWORD(v24) = v66;
LABEL_36:
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    __int16 v46 = v24;
    if ((int)_So9NSDecimala__exponent_getter(v69) <= 0)
    {
      *(_DWORD *)uint64_t v69 = v22;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v46;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      __int16 v47 = v23;
      for (*(_WORD *)&v69[16] = v23; ; *(_WORD *)&v69[16] = *(_WORD *)&v70[16])
      {
        *(_WORD *)&v69[18] = v18;
        if (!_So9NSDecimala__exponent_getter(v69)) {
          break;
        }
        v48._countAndFlagsBits = 48;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        *(_DWORD *)uint64_t v69 = v22;
        *(_WORD *)&v69[4] = v12;
        *(_WORD *)&v69[6] = v13;
        *(_WORD *)&v69[8] = v46;
        *(_WORD *)&v69[10] = v15;
        *(_WORD *)&v69[12] = v16;
        *(_WORD *)&v69[14] = v17;
        *(_WORD *)&v69[16] = v47;
        *(_WORD *)&v69[18] = v18;
        int v49 = _So9NSDecimala__exponent_getter(v69);
        _So9NSDecimala__exponent_setter((v49 + 1), v70);
        int v22 = *(_DWORD *)v70;
        LOWORD(v12) = *(_WORD *)&v70[4];
        LOWORD(v13) = *(_WORD *)&v70[6];
        __int16 v46 = *(_WORD *)&v70[8];
        LOWORD(v15) = *(_WORD *)&v70[10];
        LOWORD(v16) = *(_WORD *)&v70[12];
        LOWORD(v17) = *(_WORD *)&v70[14];
        __int16 v47 = *(_WORD *)&v70[16];
        LOWORD(v18) = *(_WORD *)&v70[18];
        *(void *)uint64_t v69 = *(void *)v70;
        *(void *)&v69[8] = *(void *)&v70[8];
      }
      v50._countAndFlagsBits = 46;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 48;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
    }
    else
    {
      __int16 v47 = v23;
    }
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v46;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v47;
    *(_WORD *)&v69[18] = v18;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
      v52._countAndFlagsBits = 45;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
    }
    *(void *)uint64_t v69 = v67;
    *(void *)&v69[8] = v68;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    uint64_t v44 = String.init<A>(_:)();
    unint64_t v43 = v53;
    goto LABEL_45;
  }
  a1 = (NSDecimal *)3435973837;
  uint64_t v24 = v66;
  while (1)
  {
    unint64_t v66 = v24;
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    if (!_So9NSDecimala__exponent_getter(v69))
    {
      LODWORD(v64) = v23;
      v25._countAndFlagsBits = 46;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      LOWORD(v23) = v64;
    }
    *(_DWORD *)uint64_t v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v66;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    int v26 = _So9NSDecimala__exponent_getter(v69);
    _So9NSDecimala__exponent_setter((v26 + 1), v70);
    uint64_t v27 = *(unsigned int *)v70;
    uint64_t v7 = *(unsigned __int16 *)&v70[6];
    unsigned int v11 = *(unsigned __int16 *)&v70[14];
    unint64_t v66 = *(unsigned __int16 *)&v70[4];
    uint64_t v63 = *(unsigned __int16 *)&v70[10];
    uint64_t v64 = *(unsigned __int16 *)&v70[8];
    uint64_t v62 = *(unsigned __int16 *)&v70[12];
    __int16 v28 = *(_WORD *)&v70[18];
    int v61 = *(unsigned __int16 *)&v70[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v70 | ((unint64_t)*(unsigned __int16 *)&v70[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[6] << 48), *(unsigned __int16 *)&v70[8] | ((unint64_t)*(unsigned __int16 *)&v70[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v70[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[14] << 48), *(unsigned __int16 *)&v70[16] | (*(unsigned __int16 *)&v70[18] << 16));
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(v29 + 16);
    if (!v31)
    {
      LODWORD(v17) = 0;
      uint64_t v32 = MEMORY[0x1E4FBC860];
      uint64_t v36 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v36) {
        goto LABEL_25;
      }
LABEL_22:
      if (!*(_WORD *)(v32 + 2 * v36 + 30))
      {
        do
        {
          *(void *)(v32 + 16) = v36 - 1;
          if (v36 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v32 + 28 + 2 * v36--));
      }
      goto LABEL_25;
    }
    uint64_t v60 = v27;
    uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v10 = v32 + 30;
    *(void *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), 2 * v31);
    unsigned int v33 = *(unsigned __int16 *)(2 * v31 + v30 + 30);
    unsigned int v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v31) = v34;
      LODWORD(v17) = v33 % 0xA;
      if (v31 == 1) {
        break;
      }
      unsigned int v33 = *(unsigned __int16 *)(v30 + 28 + 2 * v31) | (v17 << 16);
      unsigned int v34 = v33 / 0xA;
      unint64_t v35 = v31 - 2;
      --v31;
      if (v35 >= *(void *)(v32 + 16))
      {
        __break(1u);
        goto LABEL_32;
      }
    }
    LODWORD(v27) = v60;
    uint64_t v36 = *(void *)(v32 + 16);
    if (v36) {
      goto LABEL_22;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v69 = v27;
    *(_WORD *)&v69[4] = v66;
    *(_WORD *)&v69[6] = v7;
    *(_WORD *)&v69[8] = v64;
    *(_WORD *)&v69[10] = v63;
    *(_WORD *)&v69[12] = v62;
    *(_WORD *)&v69[14] = v11;
    *(_WORD *)&v69[16] = v61;
    *(_WORD *)&v69[18] = v28;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v32);
    if (v38) {
      break;
    }
    uint64_t v65 = 0;
    unint64_t v39 = *(void *)(v32 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39)) {
      goto LABEL_47;
    }
    _So9NSDecimala__length_setter(v39, v69);
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v69;
    *(_OWORD *)&v70[4] = *(_OWORD *)&v69[4];
    *(void *)uint64_t v69 = v17 | 0x30;
    v40._countAndFlagsBits = MEMORY[0x185302020](v69, 1);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    unint64_t v66 = *(unsigned int *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    uint64_t v41 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v23 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
    *(void *)uint64_t v69 = *(void *)v70;
    *(void *)&v69[8] = *(void *)&v70[8];
    *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
    *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    int v42 = _So9NSDecimala__length_getter(v69);
    uint64_t v24 = v41;
    int v22 = v66;
    if (!v42) {
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_47:
  int v59 = 0;
  uint64_t v58 = 3455;
  v57[32] = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_48:
  swift_release_n();
  uint64_t v54 = swift_willThrow();
  __break(1u);
LABEL_49:
  result._object = v55;
  result._countAndFlagsBits = v54;
  return result;
}

double NSDecimal.FormatStyle.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.locale(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

double NSDecimal.FormatStyle.Currency.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.locale(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Currency, a2).n128_u64[0];
  return result;
}

double NSDecimal.FormatStyle.Percent.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.locale(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2).n128_u64[0];
  return result;
}

__n128 NSDecimal.FormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t (*a2)(void)@<X1>, __n128 *a3@<X8>)
{
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v3, (uint64_t)a3, a2);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *a3 = v7;
  return result;
}

uint64_t NSDecimal.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 NSDecimal.FormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*NSDecimal.FormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 NSDecimal.FormatStyle.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned int v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  *(void *)unsigned int v4 = 0;
  v4[8] = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle, a1);
}

uint64_t NSDecimal.FormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.grouping(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, a2);
}

double NSDecimal.FormatStyle.precision(_:)@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.precision(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

uint64_t NSDecimal.FormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.sign(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t NSDecimal.FormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.decimalSeparator(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t NSDecimal.FormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return NSDecimal.FormatStyle.rounded(rule:increment:)(a1, a2, a3, type metadata accessor for NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, a4);
}

uint64_t NSDecimal.FormatStyle.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return NSDecimal.FormatStyle.scale(_:)(type metadata accessor for NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, a1, a2);
}

uint64_t NSDecimal.FormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.notation(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.CodingKeys()
{
  if (*v0) {
    return 0x697463656C6C6F63;
  }
  else {
    return 0x656C61636F6CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void NSDecimal.FormatStyle.hash(into:)(uint64_t a1)
{
}

void static NSDecimal.FormatStyle.== infix(_:_:)(long long *a1, long long *a2)
{
  static NSDecimal.FormatStyle.== infix(_:_:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle);
}

uint64_t NSDecimal.FormatStyle.encode(to:)(void *a1)
{
  return NSDecimal.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys, (uint64_t)&unk_1ECA50BC8, (uint64_t)type metadata accessor for NSDecimal.FormatStyle);
}

Swift::Int NSDecimal.FormatStyle.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(unsigned char *))NSDecimal.FormatStyle.hash(into:));
}

uint64_t NSDecimal.FormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.CodingKeys>);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v9 - 8);
  unsigned int v11 = (_OWORD *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (uint64_t)v11 + *(int *)(v12 + 28);
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0x1FFFFFFFELL;
  *(void *)(v13 + 56) = 0;
  *(void *)(v13 + 64) = 0;
  *(void *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 72) = 131584;
  *(_WORD *)(v13 + 76) = 512;
  uint64_t v14 = v13 + v3[9];
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v13 + v3[10];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = -1;
  *(unsigned char *)(v13 + v3[11]) = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys();
  uint64_t v17 = v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    int v20 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
    uint64_t v21 = v13;
  }
  else
  {
    char v27 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v18 = v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *unsigned int v11 = v26;
    LOBYTE(v26) = 1;
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v18);
    outlined assign with take of NumberFormatStyleConfiguration.Collection((uint64_t)v5, v13);
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v11, v22, type metadata accessor for NSDecimal.FormatStyle);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    int v20 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v21 = (uint64_t)v11;
  }
  return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v21, v20);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle(a1, (uint64_t (*)(void, void, void))NSDecimal.FormatStyle.format(_:), a2);
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle(a1, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle(void *a1)
{
  return NSDecimal.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(a1, a2, (void (*)(unsigned char *))NSDecimal.FormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(a1, a2, a3, (void (*)(unsigned char *))NSDecimal.FormatStyle.hash(into:));
}

uint64_t (*NSDecimal.FormatStyle.Percent.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 NSDecimal.FormatStyle.Percent.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0x4059000000000000;
  v4[8] = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle.Percent, a1);
}

uint64_t NSDecimal.FormatStyle.Percent.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.grouping(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v4, a4, a2);
  uint64_t result = a3(0);
  *(unsigned char *)(a4 + *(int *)(result + 20) + 73) = v7;
  return result;
}

double NSDecimal.FormatStyle.Percent.precision(_:)@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.precision(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, a2).n128_u64[0];
  return result;
}

__n128 NSDecimal.FormatStyle.precision(_:)@<Q0>(long long *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  long long v12 = a1[1];
  long long v13 = *a1;
  __n128 v11 = (__n128)a1[2];
  uint64_t v7 = *((void *)a1 + 6);
  char v8 = *((unsigned char *)a1 + 56);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v4, a4, a2);
  uint64_t v9 = a4 + *(int *)(a3(0) + 20);
  *(_OWORD *)(v9 + 16) = v13;
  *(_OWORD *)(v9 + 32) = v12;
  __n128 result = v11;
  *(__n128 *)(v9 + 48) = v11;
  *(void *)(v9 + 64) = v7;
  *(unsigned char *)(v9 + 72) = v8;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.sign(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  __int16 v7 = *a1;
  int v8 = a1[1];
  int v9 = a1[2];
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v4, a4, a2);
  if (v8) {
    __int16 v10 = 256;
  }
  else {
    __int16 v10 = 0;
  }
  __int16 v11 = v10 | v7;
  uint64_t result = a3(0);
  uint64_t v13 = a4 + *(int *)(result + 20);
  *(unsigned char *)(v13 + 76) = v9 != 0;
  *(_WORD *)(v13 + 74) = v11;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.decimalSeparator(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v4, a4, a2);
  uint64_t result = a3(0);
  *(unsigned char *)(a4 + *(int *)(result + 20) + 77) = v7;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return NSDecimal.FormatStyle.rounded(rule:increment:)(a1, a2, a3, type metadata accessor for NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, a4);
}

uint64_t NSDecimal.FormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = v6;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v8, a6, a4);
  uint64_t v13 = a6 + *(int *)(a5(0) + 20);
  uint64_t v14 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v15 = v13 + *(int *)(v14 + 36);
  outlined destroy of Any?(v15, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, a1, v16);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  if ((a3 & 1) == 0)
  {
    uint64_t v19 = v13 + *(int *)(v14 + 40);
    *(void *)uint64_t v19 = a2;
    *(unsigned char *)(v19 + 8) = 0;
  }
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return NSDecimal.FormatStyle.scale(_:)(type metadata accessor for NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, a1, a2);
}

uint64_t NSDecimal.FormatStyle.scale(_:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7 = v4;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v7, a3, a1);
  uint64_t result = a2(0);
  uint64_t v11 = a3 + *(int *)(result + 20);
  *(double *)uint64_t v11 = a4;
  *(unsigned char *)(v11 + 8) = 0;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.notation(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v4, a4, a2);
  uint64_t v8 = a4 + *(int *)(a3(0) + 20);
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v8 + *(int *)(result + 44)) = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Percent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Percent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t (*NSDecimal.FormatStyle.Currency.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.FormatStyle.Currency.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NSDecimal.FormatStyle.Currency.currencyCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NSDecimal.FormatStyle.Currency.currencyCode.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.FormatStyle.Currency.init(code:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = *a3;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a2;
  uint64_t v4 = a4 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v5 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v6 = v4 + v5[9];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0x1FFFFFFFELL;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 72) = 512;
  *(_DWORD *)(v4 + 74) = 2;
  *(unsigned char *)(v4 + 78) = 2;
  uint64_t v9 = v4 + v5[10];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = -1;
  *(unsigned char *)(v4 + v5[11]) = 1;
  *(unsigned char *)(v4 + v5[12]) = 3;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle.Currency, a1);
}

uint64_t NSDecimal.FormatStyle.attributed.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, a1);
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t NSDecimal.FormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  *(unsigned char *)(a2 + *(int *)(result + 24) + 73) = v4;
  return result;
}

__n128 NSDecimal.FormatStyle.Currency.precision(_:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v9 = a1[1];
  long long v10 = *a1;
  __n128 v8 = (__n128)a1[2];
  uint64_t v4 = *((void *)a1 + 6);
  char v5 = *((unsigned char *)a1 + 56);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v6 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  *(_OWORD *)(v6 + 16) = v10;
  *(_OWORD *)(v6 + 32) = v9;
  __n128 result = v8;
  *(__n128 *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v4;
  *(unsigned char *)(v6 + 72) = v5;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *a1;
  int v5 = a1[1];
  int v6 = a1[2];
  int v7 = a1[3];
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  if (v5) {
    int v8 = 256;
  }
  else {
    int v8 = 0;
  }
  int v9 = v8 | v4;
  if (v6) {
    int v10 = 0x10000;
  }
  else {
    int v10 = 0;
  }
  if (v7) {
    int v11 = 0x1000000;
  }
  else {
    int v11 = 0;
  }
  int v12 = v9 | v10 | v11;
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  *(_DWORD *)(a2 + *(int *)(result + 24) + 74) = v12;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  *(unsigned char *)(a2 + *(int *)(result + 24) + 78) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v5, a4, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v10 = a4 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v11 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v12 = v10 + *(int *)(v11 + 36);
  outlined destroy of Any?(v12, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  if ((a3 & 1) == 0)
  {
    uint64_t v16 = v10 + *(int *)(v11 + 40);
    *(void *)uint64_t v16 = a2;
    *(unsigned char *)(v16 + 8) = 0;
  }
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a1, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  uint64_t v6 = a1 + *(int *)(result + 24);
  *(double *)uint64_t v6 = a2;
  *(unsigned char *)(v6 + 8) = 0;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v5 + *(int *)(result + 44)) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v5 + *(int *)(result + 48)) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v7 - 8);
  int v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, (uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v15, (uint64_t)v9, type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v18 = (uint64_t)v9;
    }
    else
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v15, (uint64_t)v6, type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v18 = (uint64_t)v6;
    }
  }
  else
  {
    outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v15, (uint64_t)v12, type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0);
    NSDecimal.FormatStyle.hash(into:)(a1);
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v18 = (uint64_t)v12;
  }
  return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v18, v17);
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys>);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v38 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v36);
  long long v37 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys>);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  MEMORY[0x1F4188790](v5);
  unsigned int v33 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v31);
  uint64_t v32 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys>);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.CodingKeys>);
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v41, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = v32;
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v16, (uint64_t)v32, type metadata accessor for NSDecimal.FormatStyle.Currency);
      char v45 = 1;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
      uint64_t v21 = v33;
      uint64_t v22 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v23 = v35;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v23);
      uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }
    else
    {
      uint64_t v13 = v37;
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v16, (uint64_t)v37, type metadata accessor for NSDecimal.FormatStyle.Percent);
      char v46 = 2;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
      long long v26 = v38;
      uint64_t v22 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
      uint64_t v27 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v27);
      uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }
  else
  {
    outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v16, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle);
    char v44 = 0;
    lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
    uint64_t v22 = v43;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v25 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v25);
    uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle;
  }
  _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v13, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v19, v22);
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys>);
  uint64_t v58 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v64 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  uint64_t v57 = v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v63 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  MEMORY[0x1F4188790](v7);
  int v61 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.CodingKeys>);
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v49 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v49 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v49 - v22;
  uint64_t v24 = a1[3];
  uint64_t v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  uint64_t v25 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25) {
    goto LABEL_9;
  }
  Swift::String v50 = v17;
  Swift::String v51 = v14;
  unint64_t v66 = v20;
  long long v26 = v61;
  uint64_t v27 = v62;
  __int16 v28 = v63;
  uint64_t v29 = v64;
  Swift::String v52 = v23;
  uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v31 = v30;
  uint64_t v32 = v27;
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v39 = v11;
    uint64_t v41 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v41 = v12;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v41, *MEMORY[0x1E4FBBA70], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v27);
LABEL_9:
    uint64_t v36 = (uint64_t)v65;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if (*(unsigned char *)(v30 + 32))
  {
    if (*(unsigned char *)(v30 + 32) == 1)
    {
      char v68 = 1;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
      unsigned int v33 = v28;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      unint64_t v66 = (char *)v12;
      type metadata accessor for NSDecimal.FormatStyle.Currency(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v34 = (uint64_t)v50;
      uint64_t v35 = v56;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v32);
      uint64_t v36 = (uint64_t)v65;
      swift_storeEnumTagMultiPayload();
      uint64_t v37 = v34;
    }
    else
    {
      char v69 = 2;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      unint64_t v66 = (char *)v31;
      type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
      uint64_t v45 = (uint64_t)v51;
      uint64_t v46 = v55;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v47 = v60;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v29, v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v27);
      swift_storeEnumTagMultiPayload();
      uint64_t v37 = v45;
      uint64_t v36 = (uint64_t)v65;
    }
  }
  else
  {
    char v67 = 0;
    lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v42 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v27);
    uint64_t v36 = (uint64_t)v65;
    uint64_t v43 = (uint64_t)v66;
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = v43;
  }
  uint64_t v48 = (uint64_t)v52;
  outlined init with take of NSDecimal.FormatStyle.Percent(v37, (uint64_t)v52, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  outlined init with take of NSDecimal.FormatStyle.Percent(v48, v59, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  uint64_t v1 = 0x79636E6572727563;
  if (*v0 != 1) {
    uint64_t v1 = 0x697463656C6C6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C61636F6CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Currency.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  uint64_t v1 = 0x79636E6572727563;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E6563726570;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C616D69636564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(a1, a2, (void (*)(unsigned char *))NSDecimal.FormatStyle.Attributed.Style.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(a1, a2, a3, (void (*)(unsigned char *))NSDecimal.FormatStyle.Attributed.Style.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Attributed.Style@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.Style.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Attributed.Style(void *a1)
{
  return NSDecimal.FormatStyle.Attributed.Style.encode(to:)(a1);
}

uint64_t NSDecimal.FormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void (*v31)(unsigned char *__return_ptr, uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  Swift::OpaquePointer v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  Swift::String v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  Swift::String v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  Swift::String v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  int v67;
  __int16 v68;
  __int16 i;
  Swift::String v70;
  int v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  void *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char *v81;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned char v86[140];
  unsigned int v87;
  long long v88;
  uint64_t v89;
  unint64_t v90;

  long long v83 = a2;
  LODWORD(v85) = a3;
  long long v84 = a1;
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v82, (uint64_t)v19, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v19, (uint64_t)v10, type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v21 = specialized static ICUCurrencyNumberFormatter.create(for:)(v10);
      unint64_t v22 = v84;
      if (v21)
      {
        ICUNumberFormatter.attributedFormat(_:)(v84, v83, v85 | 0x200000000);
        swift_release();
        uint64_t v23 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        uint64_t v24 = (uint64_t)v10;
        return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v24, v23);
      }
      uint64_t v82 = (void *)a4;
      uint64_t v37 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v38 = (uint64_t)v10;
    }
    else
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v19, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle.Percent);
      type metadata accessor for ICUPercentNumberFormatter();
      uint64_t v35 = static ICUPercentNumberFormatter.create(for:)((uint64_t)v7);
      unint64_t v22 = v84;
      if (v35)
      {
        ICUNumberFormatter.attributedFormat(_:)(v84, v83, v85 | 0x200000000);
        swift_release();
        uint64_t v23 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        uint64_t v24 = (uint64_t)v7;
        return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v24, v23);
      }
      uint64_t v82 = (void *)a4;
      uint64_t v37 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v38 = (uint64_t)v7;
    }
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v38, v37);
  }
  else
  {
    uint64_t v82 = (void *)a4;
    outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v19, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v81 = &v16[*(int *)(v14 + 20)];
    uint64_t v25 = *((void *)v16 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 472);
    swift_unknownObjectRetain();
    uint64_t v28 = v27(ObjectType, v25);
    long long v80 = v29;
    swift_unknownObjectRelease();
    uint64_t v30 = v11;
    uint64_t v31 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v25 + 464);
    swift_unknownObjectRetain();
    v31(v86, ObjectType, v25);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v87, &demangling cache variable for type metadata for LocalePreferences?);
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v81, (uint64_t)v13, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    uint64_t v32 = (uint64_t *)&v13[*(int *)(v30 + 20)];
    unsigned int v33 = v80;
    *uint64_t v32 = v28;
    v32[1] = v33;
    outlined init with take of LocalePreferences?((uint64_t)&v87, (uint64_t)&v13[*(int *)(v30 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v34 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v13);
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v13, type metadata accessor for ICUNumberFormatter.Signature);
    if (v34)
    {
      ICUNumberFormatter.attributedFormat(_:)(v84, v83, v85 | 0x200000000);
      swift_release();
      uint64_t v23 = type metadata accessor for NSDecimal.FormatStyle;
      uint64_t v24 = (uint64_t)v16;
      return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v24, v23);
    }
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle);
    unint64_t v22 = v84;
  }
  uint64_t v39 = v83;
  __int16 v87 = v22;
  uint64_t v40 = HIDWORD(v22);
  LOWORD(v88) = WORD2(v22);
  v41._rawValue = (void *)HIWORD(v22);
  WORD1(v88) = HIWORD(v22);
  uint64_t v42 = v83 >> 16;
  *(void *)((char *)&v88 + 4) = v83;
  uint64_t v43 = (char *)HIDWORD(v83);
  char v44 = HIWORD(v83);
  LODWORD(v45) = v85;
  uint64_t v46 = WORD1(v85);
  HIDWORD(v88) = v85;
  if (!_So9NSDecimala__length_getter(&v87))
  {
    __int16 v87 = v22;
    LOWORD(v88) = WORD2(v22);
    WORD1(v88) = HIWORD(v22);
    WORD2(v88) = v39;
    WORD3(v88) = v42;
    WORD4(v88) = (_WORD)v43;
    WORD5(v88) = v44;
    WORD6(v88) = v45;
    HIWORD(v88) = v46;
    if (_So9NSDecimala__isNegative_getter(&v87)) {
      goto LABEL_51;
    }
  }
  __int16 v87 = v22;
  LOWORD(v88) = WORD2(v22);
  WORD1(v88) = HIWORD(v22);
  WORD2(v88) = v39;
  WORD3(v88) = v42;
  WORD4(v88) = (_WORD)v43;
  WORD5(v88) = v44;
  WORD6(v88) = v45;
  HIWORD(v88) = v46;
  if (!_So9NSDecimala__length_getter(&v87)) {
    goto LABEL_51;
  }
  uint64_t v89 = 0;
  uint64_t v90 = 0xE000000000000000;
  __int16 v87 = v22;
  LOWORD(v88) = WORD2(v22);
  WORD1(v88) = HIWORD(v22);
  WORD2(v88) = v39;
  WORD3(v88) = v42;
  WORD4(v88) = (_WORD)v43;
  WORD5(v88) = v44;
  WORD6(v88) = v45;
  HIWORD(v88) = v46;
  *(void *)uint64_t v86 = v22;
  *(_WORD *)&v86[8] = v39;
  *(_WORD *)&v86[10] = v42;
  *(_WORD *)&v86[12] = (_WORD)v43;
  *(_WORD *)&v86[14] = v44;
  *(_WORD *)&v86[16] = v45;
  *(_WORD *)&v86[18] = v46;
  if ((int)_So9NSDecimala__exponent_getter(v86) >= 1)
  {
    do
    {
      LODWORD(v85) = v45;
      v47._countAndFlagsBits = 48;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      *(_DWORD *)uint64_t v86 = v22;
      *(_WORD *)&v86[4] = v40;
      *(_WORD *)&v86[6] = v41._rawValue;
      *(_WORD *)&v86[8] = v39;
      *(_WORD *)&v86[10] = v42;
      *(_WORD *)&v86[12] = (_WORD)v43;
      *(_WORD *)&v86[14] = v44;
      *(_WORD *)&v86[16] = v85;
      *(_WORD *)&v86[18] = v46;
      uint64_t v48 = _So9NSDecimala__exponent_getter(v86);
      _So9NSDecimala__exponent_setter((v48 - 1), &v87);
      unint64_t v22 = v87;
      LOWORD(v40) = v88;
      LOWORD(v41._rawValue) = WORD1(v88);
      uint64_t v39 = WORD2(v88);
      LOWORD(v42) = WORD3(v88);
      LOWORD(v43) = WORD4(v88);
      LOWORD(v44) = WORD5(v88);
      LODWORD(v45) = WORD6(v88);
      LOWORD(v46) = HIWORD(v88);
      *(_DWORD *)uint64_t v86 = v87;
      *(_OWORD *)&v86[4] = v88;
    }
    while ((int)_So9NSDecimala__exponent_getter(v86) > 0);
  }
  *(_DWORD *)uint64_t v86 = v22;
  *(_WORD *)&v86[4] = v40;
  *(_WORD *)&v86[6] = v41._rawValue;
  *(_WORD *)&v86[8] = v39;
  *(_WORD *)&v86[10] = v42;
  *(_WORD *)&v86[12] = (_WORD)v43;
  *(_WORD *)&v86[14] = v44;
  *(_WORD *)&v86[16] = v45;
  *(_WORD *)&v86[18] = v46;
  if (!_So9NSDecimala__exponent_getter(v86))
  {
    _So9NSDecimala__exponent_setter(1, &v87);
    unint64_t v22 = v87;
    LOWORD(v40) = v88;
    LOWORD(v41._rawValue) = WORD1(v88);
    uint64_t v39 = WORD2(v88);
    LOWORD(v42) = WORD3(v88);
    LOWORD(v43) = WORD4(v88);
    LOWORD(v44) = WORD5(v88);
    LODWORD(v45) = WORD6(v88);
    LOWORD(v46) = HIWORD(v88);
  }
  long long v83 = v39;
  long long v84 = v22;
  *(_DWORD *)uint64_t v86 = v22;
  *(_WORD *)&v86[4] = v40;
  *(_WORD *)&v86[6] = v41._rawValue;
  *(_WORD *)&v86[8] = v39;
  *(_WORD *)&v86[10] = v42;
  *(_WORD *)&v86[12] = (_WORD)v43;
  *(_WORD *)&v86[14] = v44;
  *(_WORD *)&v86[16] = v45;
  *(_WORD *)&v86[18] = v46;
  if (!_So9NSDecimala__length_getter(v86))
  {
LABEL_42:
    LOWORD(v49) = v83;
    Swift::String v50 = v84;
LABEL_43:
    *(_DWORD *)uint64_t v86 = v50;
    *(_WORD *)&v86[4] = v40;
    *(_WORD *)&v86[6] = v41._rawValue;
    *(_WORD *)&v86[8] = v49;
    *(_WORD *)&v86[10] = v42;
    *(_WORD *)&v86[12] = (_WORD)v43;
    *(_WORD *)&v86[14] = v44;
    *(_WORD *)&v86[16] = v45;
    *(_WORD *)&v86[18] = v46;
    uint64_t v64 = v49;
    uint64_t v65 = v50;
    unint64_t v66 = _So9NSDecimala__exponent_getter(v86);
    char v67 = v65;
    if (v66 <= 0)
    {
      long long v84 = v65;
      *(_DWORD *)uint64_t v86 = v65;
      char v68 = v40;
      *(_WORD *)&v86[4] = v40;
      *(_WORD *)&v86[6] = v41._rawValue;
      *(_WORD *)&v86[8] = v64;
      *(_WORD *)&v86[10] = v42;
      *(_WORD *)&v86[12] = (_WORD)v43;
      *(_WORD *)&v86[14] = v44;
      *(_WORD *)&v86[16] = v45;
      *(_WORD *)&v86[18] = v46;
      for (int i = v45; _So9NSDecimala__exponent_getter(v86); *(_OWORD *)&v86[4] = v88)
      {
        v70._countAndFlagsBits = 48;
        v70._object = (void *)0xE100000000000000;
        String.append(_:)(v70);
        *(_DWORD *)uint64_t v86 = v84;
        *(_WORD *)&v86[4] = v68;
        *(_WORD *)&v86[6] = v41._rawValue;
        *(_WORD *)&v86[8] = v64;
        *(_WORD *)&v86[10] = v42;
        *(_WORD *)&v86[12] = (_WORD)v43;
        *(_WORD *)&v86[14] = v44;
        *(_WORD *)&v86[16] = i;
        *(_WORD *)&v86[18] = v46;
        uint64_t v71 = _So9NSDecimala__exponent_getter(v86);
        _So9NSDecimala__exponent_setter((v71 + 1), &v87);
        char v68 = v88;
        LOWORD(v41._rawValue) = WORD1(v88);
        uint64_t v64 = WORD2(v88);
        LOWORD(v42) = WORD3(v88);
        LOWORD(v43) = WORD4(v88);
        LOWORD(v44) = WORD5(v88);
        int i = WORD6(v88);
        LOWORD(v46) = HIWORD(v88);
        long long v84 = v87;
        *(_DWORD *)uint64_t v86 = v87;
      }
      v72._countAndFlagsBits = 46;
      v72._object = (void *)0xE100000000000000;
      String.append(_:)(v72);
      v73._countAndFlagsBits = 48;
      v73._object = (void *)0xE100000000000000;
      String.append(_:)(v73);
      LOWORD(v45) = i;
      char v67 = v84;
    }
    else
    {
      char v68 = v40;
    }
    *(_DWORD *)uint64_t v86 = v67;
    *(_WORD *)&v86[4] = v68;
    *(_WORD *)&v86[6] = v41._rawValue;
    *(_WORD *)&v86[8] = v64;
    *(_WORD *)&v86[10] = v42;
    *(_WORD *)&v86[12] = (_WORD)v43;
    *(_WORD *)&v86[14] = v44;
    *(_WORD *)&v86[16] = v45;
    *(_WORD *)&v86[18] = v46;
    if (_So9NSDecimala__isNegative_getter(v86))
    {
      v74._countAndFlagsBits = 45;
      v74._object = (void *)0xE100000000000000;
      String.append(_:)(v74);
    }
    *(void *)uint64_t v86 = v89;
    *(void *)&v86[8] = v90;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    String.init<A>(_:)();
LABEL_51:
    char v75 = v82;
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)(&v87, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v86);
    *char v75 = *(void *)v86;
    return result;
  }
  uint64_t v81 = 0;
  uint64_t v49 = v83;
  Swift::String v50 = v84;
  while (1)
  {
    long long v83 = v49;
    long long v84 = v50;
    *(_DWORD *)uint64_t v86 = v50;
    *(_WORD *)&v86[4] = v40;
    *(_WORD *)&v86[6] = v41._rawValue;
    *(_WORD *)&v86[8] = v49;
    *(_WORD *)&v86[10] = v42;
    *(_WORD *)&v86[12] = (_WORD)v43;
    *(_WORD *)&v86[14] = v44;
    *(_WORD *)&v86[16] = v45;
    *(_WORD *)&v86[18] = v46;
    if (!_So9NSDecimala__exponent_getter(v86))
    {
      LODWORD(v85) = v45;
      v51._countAndFlagsBits = 46;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
      LOWORD(v45) = v85;
    }
    *(_DWORD *)uint64_t v86 = v84;
    *(_WORD *)&v86[4] = v40;
    *(_WORD *)&v86[6] = v41._rawValue;
    *(_WORD *)&v86[8] = v83;
    *(_WORD *)&v86[10] = v42;
    *(_WORD *)&v86[12] = (_WORD)v43;
    *(_WORD *)&v86[14] = v44;
    *(_WORD *)&v86[16] = v45;
    *(_WORD *)&v86[18] = v46;
    Swift::String v52 = _So9NSDecimala__exponent_getter(v86);
    _So9NSDecimala__exponent_setter((v52 + 1), &v87);
    uint64_t v53 = v87;
    uint64_t v54 = (unsigned __int16)v88;
    LOWORD(v42) = WORD1(v88);
    long long v83 = WORD3(v88);
    long long v84 = WORD2(v88);
    long long v80 = WORD4(v88);
    char v78 = WORD5(v88);
    long long v79 = WORD6(v88);
    uint64_t v77 = HIWORD(v88);
    NSDecimal.asVariableLengthInteger()(v87 | ((unint64_t)(unsigned __int16)v88 << 32) | ((unint64_t)WORD1(v88) << 48), WORD2(v88) | ((unint64_t)WORD3(v88) << 16) | ((unint64_t)WORD4(v88) << 32) | ((unint64_t)WORD5(v88) << 48), WORD6(v88) | (HIWORD(v88) << 16));
    uint64_t v45 = v55;
    uint64_t v40 = *(void *)(v55 + 16);
    uint64_t v85 = v54;
    if (v40)
    {
      char v76 = v53;
      v41._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v43 = (char *)v41._rawValue + 30;
      *((void *)v41._rawValue + 2) = v40;
      LOWORD(v46) = 2 * v40;
      bzero((char *)v41._rawValue + 32, 2 * v40);
      uint64_t v56 = *(unsigned __int16 *)(2 * v40 + v45 + 30);
      LOWORD(v57) = *(_WORD *)(2 * v40 + v45 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v43[2 * v40] = v57;
        LODWORD(v44) = v56 % 0xA;
        if (v40 == 1) {
          break;
        }
        uint64_t v56 = *(unsigned __int16 *)(v45 + 28 + 2 * v40) | (v44 << 16);
        uint64_t v57 = v56 / 0xA;
        uint64_t v58 = v40 - 2;
        --v40;
        if (v58 >= *((void *)v41._rawValue + 2))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
      LODWORD(v53) = v76;
    }
    else
    {
      LODWORD(v44) = 0;
      v41._rawValue = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v59 = *((void *)v41._rawValue + 2);
    if (v59 && !*((_WORD *)v41._rawValue + v59 + 15))
    {
      do
      {
        *((void *)v41._rawValue + 2) = v59 - 1;
        if (v59 == 1) {
          break;
        }
      }
      while (!*((unsigned __int16 *)v41._rawValue + v59-- + 14));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v86 = v53;
    *(_WORD *)&v86[4] = v85;
    *(_WORD *)&v86[6] = v42;
    *(_WORD *)&v86[8] = v84;
    *(_WORD *)&v86[10] = v83;
    *(_WORD *)&v86[12] = v80;
    *(_WORD *)&v86[14] = v78;
    *(_WORD *)&v86[16] = v79;
    *(_WORD *)&v86[18] = v77;
    NSDecimal.copyVariableLengthInteger(_:)(v41);
    if (v61) {
      break;
    }
    uint64_t v81 = 0;
    uint64_t v45 = *((void *)v41._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v45)) {
      goto LABEL_53;
    }
    _So9NSDecimala__length_setter(v45, v86);
    __int16 v87 = *(_DWORD *)v86;
    uint64_t v88 = *(_OWORD *)&v86[4];
    *(void *)uint64_t v86 = v44 | 0x30;
    v62._countAndFlagsBits = MEMORY[0x185302020](v86, 1);
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    LOWORD(v40) = v88;
    LOWORD(v41._rawValue) = WORD1(v88);
    long long v83 = WORD2(v88);
    long long v84 = v87;
    LOWORD(v42) = WORD3(v88);
    LOWORD(v43) = WORD4(v88);
    LOWORD(v44) = WORD5(v88);
    LODWORD(v45) = WORD6(v88);
    LOWORD(v46) = HIWORD(v88);
    *(_DWORD *)uint64_t v86 = v87;
    *(_OWORD *)&v86[4] = v88;
    uint64_t v63 = _So9NSDecimala__length_getter(v86);
    uint64_t v49 = v83;
    Swift::String v50 = v84;
    if (!v63) {
      goto LABEL_43;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_53:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.FormatStyle.Attributed.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Attributed);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v16, (uint64_t)v10, type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      void *v10 = v17;
      v10[1] = v18;
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(a2, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v10, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v21 = (uint64_t)v10;
    }
    else
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v16, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v7 = v17;
      v7[1] = v18;
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(a2, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v7, a2, type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v21 = (uint64_t)v7;
    }
  }
  else
  {
    outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v16, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v13 = v17;
    v13[1] = v18;
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(a2, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v13, a2, type metadata accessor for NSDecimal.FormatStyle);
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v21 = (uint64_t)v13;
  }
  return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v21, v20);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return 0x656C797473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656C797473 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void NSDecimal.FormatStyle.Percent.hash(into:)(uint64_t a1)
{
}

void NSDecimal.FormatStyle.hash(into:)(uint64_t a1, uint64_t (*a2)(void))
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  uint64_t v56;
  Swift::UInt64 v57;
  Swift::UInt64 v58;
  int v59;
  Swift::UInt v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  Swift::UInt v65;
  int *v66;
  char *v67;
  uint64_t v68;
  int v69;
  Swift::UInt v70;
  Swift::UInt64 v71;
  Swift::UInt v72;
  void *v73;
  id v74;
  uint64_t v75;
  void *v76;
  id v77;
  char *v78;
  uint64_t (*v79)(void);
  uint64_t v80;
  uint64_t v81;
  unsigned char v82[144];
  char v83[8];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  char v99;
  char v100;
  void v101[18];
  unsigned char v102[144];
  unsigned char v103[152];

  long long v79 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  long long v80 = v5;
  uint64_t v81 = v6;
  MEMORY[0x1F4188790](v5);
  char v78 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v101, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v102, (uint64_t)v103, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v103) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v102, (uint64_t)v83, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v83[0] == 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = v83[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t v19 = v84;
    if (v84)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v85)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v86) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v86)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v22 = v87;
          if (!v87) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v22 = v87;
        if (!v87)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v23 = v88;
          if (!v88)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v23);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v90;
          long long v26 = v91;
          uint64_t v77 = v92;
          uint64_t v27 = v93;
          char v74 = v89;
          char v75 = v2;
          char v73 = v93;
          if (v89)
          {
            uint64_t v28 = v10;
            uint64_t v29 = v89;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v30 = v25;
            uint64_t v31 = v26;
            uint64_t v32 = v77;
            unsigned int v33 = v27;
            uint64_t v34 = v29;
            _CFObject.hash(into:)();
            if (v25)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v35 = v25;
              uint64_t v36 = v26;
              uint64_t v37 = v25;
              _CFObject.hash(into:)();

              long long v26 = v36;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v38 = v27;
            uint64_t v39 = v25;
            uint64_t v40 = v26;
            uint64_t v41 = v77;
            uint64_t v28 = v10;
            if (v25) {
              goto LABEL_27;
            }
          }
          uint64_t v35 = v25;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v42 = v73;
          char v76 = v26;
          if (v26)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v43 = v26;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          char v44 = v35;
          uint64_t v10 = v28;
          uint64_t v3 = v75;
          if (v77)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v45 = v77;
            _CFObject.hash(into:)();

            if (v42)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v46 = v42;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v42) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v46 = 0;
LABEL_38:
          uint64_t v47 = v76;

          uint64_t v48 = v94;
          if (v48)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v48);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v49 = v79;
          Swift::String v50 = v95;
          if (v95)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v50);
            swift_bridgeObjectRelease();
            if (v96)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              uint64_t v16 = v80;
              if (v97 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                Swift::String v51 = v97 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v51);
              }
              if (v98 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                Swift::String v52 = v98 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v52);
              }
              if (v99 == 2)
              {
                uint64_t v53 = 0;
              }
              else
              {
                uint64_t v53 = v99 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v53);
              if (v100 == 2)
              {
                uint64_t v54 = 0;
              }
              else
              {
                uint64_t v55 = v100 & 1;
                Hasher._combine(_:)(1u);
                uint64_t v54 = v55;
              }
              Hasher._combine(_:)(v54);
              outlined retain of LocalePreferences?((uint64_t)v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              uint64_t v17 = v49(0);
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v96) {
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v22);
        swift_bridgeObjectRelease();
        uint64_t v23 = v88;
        if (!v88) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v102, (uint64_t)v82, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v24 = v82;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v83;
    }
    outlined retain of LocalePreferences(v24);
    if (!v85) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  uint64_t v16 = v80;
  uint64_t v17 = v79(0);
LABEL_59:
  uint64_t v56 = v3 + *(int *)(v17 + 20);
  if (*(unsigned char *)(v56 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v57 = *(void *)v56;
    Hasher._combine(_:)(1u);
    if ((v57 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = 0;
    }
    Hasher._combine(_:)(v58);
  }
  outlined init with take of LocalePreferences?(v56 + 16, (uint64_t)v103, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v59 = *(unsigned __int8 *)(v56 + 73);
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v60 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v60);
  }
  int v61 = *(unsigned __int16 *)(v56 + 74);
  uint64_t v62 = v61 | (*(unsigned __int8 *)(v56 + 76) << 16);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62 & 1);
    Hasher._combine(_:)((v62 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v62) & 1);
  }
  uint64_t v63 = v81;
  uint64_t v64 = *(unsigned __int8 *)(v56 + 77);
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v65 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v65);
  }
  unint64_t v66 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v56 + v66[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v10, 1, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v67 = v78;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v78, v10, v16);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v67, v16);
  }
  char v68 = v56 + v66[10];
  char v69 = *(unsigned __int8 *)(v68 + 8);
  if (v69 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v70 = *(void *)v68;
    Hasher._combine(_:)(1u);
    if (v69)
    {
      Hasher._combine(_:)(1uLL);
      if ((v70 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v71 = v70;
      }
      else {
        uint64_t v71 = 0;
      }
      Hasher._combine(_:)(v71);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v70);
    }
  }
  uint64_t v72 = *(unsigned __int8 *)(v56 + v66[11]);
  if (v72 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v72);
  }
}

void static NSDecimal.FormatStyle.Percent.== infix(_:_:)(long long *a1, long long *a2)
{
  static NSDecimal.FormatStyle.== infix(_:_:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle.Percent);
}

void static NSDecimal.FormatStyle.== infix(_:_:)(long long *a1, long long *a2, uint64_t (*a3)(void))
{
  long long v6 = *a1;
  long long v8 = *a2;
  long long v9 = v6;
  if (specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8))
  {
    uint64_t v7 = *(int *)(a3(0) + 20);
    specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)a1 + v7, (uint64_t)a2 + v7);
  }
}

uint64_t NSDecimal.FormatStyle.Percent.encode(to:)(void *a1)
{
  return NSDecimal.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Percent.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys, (uint64_t)&unk_1ECA50C58, (uint64_t)type metadata accessor for NSDecimal.FormatStyle.Percent);
}

uint64_t NSDecimal.FormatStyle.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  v15[0] = a5;
  uint64_t v7 = v5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v16 = *v7;
  char v17 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v13 = v15[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    ((void (*)(void))v15[0])(0);
    LOBYTE(v16) = 1;
    type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NSDecimal.FormatStyle.Percent.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(unsigned char *))NSDecimal.FormatStyle.Percent.hash(into:));
}

Swift::Int NSDecimal.FormatStyle.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

uint64_t NSDecimal.FormatStyle.Percent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Percent.CodingKeys>);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x1F4188790](v6);
  long long v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (_OWORD *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (uint64_t)v11 + *(int *)(v12 + 28);
  uint64_t v14 = v13 + v3[9];
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(void *)uint64_t v13 = 0x4059000000000000;
  *(unsigned char *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0x1FFFFFFFELL;
  *(void *)(v13 + 56) = 0;
  *(void *)(v13 + 64) = 0;
  *(void *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 72) = 131584;
  *(_WORD *)(v13 + 76) = 512;
  uint64_t v16 = v13 + v3[10];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = -1;
  *(unsigned char *)(v13 + v3[11]) = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys();
  uint64_t v17 = v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v20 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
    uint64_t v21 = v13;
  }
  else
  {
    char v27 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v18 = v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *uint64_t v11 = v26;
    LOBYTE(v26) = 1;
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v18);
    outlined assign with take of NumberFormatStyleConfiguration.Collection((uint64_t)v5, v13);
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v11, v22, type metadata accessor for NSDecimal.FormatStyle.Percent);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v20 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    uint64_t v21 = (uint64_t)v11;
  }
  return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v21, v20);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Percent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle(a1, (uint64_t (*)(void, void, void))NSDecimal.FormatStyle.Percent.format(_:), a2);
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle.Percent@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Percent@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Percent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Percent(void *a1)
{
  return NSDecimal.FormatStyle.Percent.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Percent(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(a1, a2, (void (*)(unsigned char *))NSDecimal.FormatStyle.Percent.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(a1, a2, a3, (void (*)(unsigned char *))NSDecimal.FormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.FormatStyle(long long *a1, long long *a2, uint64_t a3)
{
  long long v6 = *a1;
  long long v9 = *a2;
  long long v10 = v6;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v10, (uint64_t)&v9) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(int *)(a3 + 20);

  return static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + v7, (char *)a2 + v7);
}

void NSDecimal.FormatStyle.Currency.hash(into:)(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  uint64_t v52;
  Swift::UInt64 v53;
  Swift::UInt64 v54;
  uint64_t v55;
  int v56;
  Swift::UInt v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  Swift::UInt v61;
  int *v62;
  char *v63;
  uint64_t v64;
  int v65;
  Swift::UInt v66;
  Swift::UInt64 v67;
  Swift::UInt v68;
  uint64_t v69;
  void *v70;
  id v71;
  char *v72;
  void *v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned char v78[144];
  char v79[8];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  void v97[18];
  unsigned char v98[144];
  unsigned char v99[152];

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  char v76 = v4;
  uint64_t v77 = v5;
  MEMORY[0x1F4188790](v4);
  char v75 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v7 - 8);
  long long v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v14(v97, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v97, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v99, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v99) == 1)
    {
      Swift::UInt8 v13 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v79[0] == 2)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = v79[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v16);
    uint64_t v17 = v80;
    if (v80)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v17 + 16));
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v19 = v17 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v19 += 16;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
        if (!v81)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v82) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v82)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v20 = v83;
          if (!v83) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v20 = v83;
        if (!v83)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v21 = v84;
          if (!v84)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v21);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v23 = v86;
          uint64_t v24 = v87;
          char v74 = v88;
          uint64_t v25 = v89;
          uint64_t v71 = v85;
          uint64_t v72 = v9;
          uint64_t v70 = v89;
          if (v85)
          {
            long long v26 = v85;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            char v27 = v23;
            uint64_t v28 = v24;
            uint64_t v29 = v74;
            uint64_t v30 = v25;
            uint64_t v31 = v26;
            _CFObject.hash(into:)();
            if (v23)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v32 = v23;
              unsigned int v33 = v24;
              uint64_t v34 = v23;
              _CFObject.hash(into:)();

              uint64_t v24 = v33;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v35 = v25;
            uint64_t v36 = v23;
            uint64_t v37 = v24;
            uint64_t v38 = v74;
            if (v23) {
              goto LABEL_27;
            }
          }
          uint64_t v32 = v23;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v39 = v70;
          char v73 = v24;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v40 = v24;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v41 = v32;
          long long v9 = v72;
          if (v74)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v42 = v74;
            _CFObject.hash(into:)();

            if (v39)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v43 = v39;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v39) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v43 = 0;
LABEL_38:
          char v44 = v73;

          uint64_t v45 = v90;
          if (v45)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v45);
            swift_bridgeObjectRelease();
            uint64_t v46 = v91;
            if (v91) {
              goto LABEL_40;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v46 = v91;
            if (v91)
            {
LABEL_40:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v46);
              swift_bridgeObjectRelease();
              if (v92)
              {
LABEL_41:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_45:
                uint64_t v15 = v76;
                if (v93 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  uint64_t v47 = v93 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v47);
                }
                if (v94 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  uint64_t v48 = v94 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v48);
                }
                if (v95 == 2)
                {
                  uint64_t v49 = 0;
                }
                else
                {
                  uint64_t v49 = v95 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v49);
                if (v96 == 2)
                {
                  Swift::String v50 = 0;
                }
                else
                {
                  Swift::String v51 = v96 & 1;
                  Hasher._combine(_:)(1u);
                  Swift::String v50 = v51;
                }
                Hasher._combine(_:)(v50);
                outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease();
                goto LABEL_58;
              }
LABEL_44:
              Hasher._combine(_:)(0);
              goto LABEL_45;
            }
          }
          Hasher._combine(_:)(0);
          if (v92) {
            goto LABEL_41;
          }
          goto LABEL_44;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v20);
        swift_bridgeObjectRelease();
        uint64_t v21 = v84;
        if (!v84) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v22 = v78;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v22 = v79;
    }
    outlined retain of LocalePreferences(v22);
    if (!v81) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v13 = 1;
LABEL_5:
  Hasher._combine(_:)(v13);
  swift_unknownObjectRelease();
  uint64_t v15 = v76;
LABEL_58:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::String v52 = v2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  if (*(unsigned char *)(v52 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v53 = *(void *)v52;
    Hasher._combine(_:)(1u);
    if ((v53 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    Hasher._combine(_:)(v54);
  }
  uint64_t v55 = v77;
  outlined init with take of LocalePreferences?(v52 + 16, (uint64_t)v99, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v56 = *(unsigned __int8 *)(v52 + 73);
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v57 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v57);
  }
  uint64_t v58 = *(unsigned int *)(v52 + 74);
  if (*(_DWORD *)(v52 + 74) == 2)
  {
    LOBYTE(v59) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v58 & 1);
    Hasher._combine(_:)((v58 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v58) & 1);
    uint64_t v59 = BYTE3(v58) & 1;
  }
  Hasher._combine(_:)(v59);
  uint64_t v60 = *(unsigned __int8 *)(v52 + 78);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v61 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61);
  }
  uint64_t v62 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v52 + v62[9], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v9, 1, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v63 = v75;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v75, v9, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v63, v15);
  }
  uint64_t v64 = v52 + v62[10];
  uint64_t v65 = *(unsigned __int8 *)(v64 + 8);
  if (v65 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v66 = *(void *)v64;
    Hasher._combine(_:)(1u);
    if (v65)
    {
      Hasher._combine(_:)(1uLL);
      if ((v66 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        char v67 = v66;
      }
      else {
        char v67 = 0;
      }
      Hasher._combine(_:)(v67);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v66);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v52 + v62[11]));
  char v68 = *(unsigned __int8 *)(v52 + v62[12]);
  if (v68 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }
}

uint64_t NSDecimal.FormatStyle.Currency.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Currency.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle.Currency(0);
    LOBYTE(v11) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NSDecimal.FormatStyle.Currency.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(unsigned char *))NSDecimal.FormatStyle.Currency.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Currency.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Currency.CodingKeys>);
  uint64_t v22 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v9);
  long long v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  uint64_t v20 = v4;
  uint64_t v21 = v6;
  uint64_t v13 = (uint64_t)v11;
  uint64_t v14 = v22;
  uint64_t v15 = v23;
  char v27 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v16 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v13 = v26;
  LOBYTE(v26) = 1;
  *(void *)(v13 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v13 + 24) = v17;
  LOBYTE(v26) = 2;
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v18 = (uint64_t)v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v16);
  outlined init with take of NSDecimal.FormatStyle.Percent(v18, v13 + *(int *)(v9 + 24), type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v13, v15, type metadata accessor for NSDecimal.FormatStyle.Currency);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v13, type metadata accessor for NSDecimal.FormatStyle.Currency);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Currency@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle(a1, (uint64_t (*)(void, void, void))NSDecimal.FormatStyle.Currency.format(_:), a2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle.Currency@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle(a1, type metadata accessor for NSDecimal.FormatStyle.Currency, a2).n128_u64[0];
  return result;
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle@<Q0>(__n128 *a1@<X0>, uint64_t (*a2)(void)@<X3>, __n128 *a3@<X8>)
{
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v3, (uint64_t)a3, a2);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *a3 = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Currency@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Currency.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Currency(void *a1)
{
  return NSDecimal.FormatStyle.Currency.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(a1, a2, (void (*)(unsigned char *))NSDecimal.FormatStyle.Currency.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(a1, a2, a3, (void (*)(unsigned char *))NSDecimal.FormatStyle.Currency.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v2, (uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v15, (uint64_t)v9, type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v18 = (uint64_t)v9;
    }
    else
    {
      outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v15, (uint64_t)v6, type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v18 = (uint64_t)v6;
    }
  }
  else
  {
    outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v15, (uint64_t)v12, type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0);
    NSDecimal.FormatStyle.hash(into:)(a1);
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v18 = (uint64_t)v12;
  }
  return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v18, v17);
}

uint64_t NSDecimal.FormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int NSDecimal.FormatStyle.Attributed.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(unsigned char *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle.Attributed(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of NSDecimal.FormatStyle.Percent(v15, (uint64_t)v11, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v11, v13, type metadata accessor for NSDecimal.FormatStyle.Attributed);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.format(_:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Attributed(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(a1, a2, (void (*)(unsigned char *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(a1, a2, a3, (void (*)(unsigned char *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

uint64_t NSDecimal.FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter(type metadata accessor for NSDecimal.FormatStyle, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle(type metadata accessor for NSDecimal.FormatStyle, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a1);
}

uint64_t NSDecimal.FormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter(type metadata accessor for NSDecimal.FormatStyle.Currency, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle.Currency@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle(type metadata accessor for NSDecimal.FormatStyle.Currency, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, a1);
}

uint64_t NSDecimal.FormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter(type metadata accessor for NSDecimal.FormatStyle.Percent, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a1);
}

uint64_t NSDecimal.FormatStyle.parseStrategy.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v6, a3, a1);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a2);
  *(unsigned char *)(a3 + *(int *)(result + 36)) = 1;
  return result;
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle.Percent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle(type metadata accessor for NSDecimal.FormatStyle.Percent, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v5, a3, a1);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a2);
  *(unsigned char *)(a3 + *(int *)(result + 36)) = 1;
  return result;
}

uint64_t static FormatStyle<>.number.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v12);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v12;
  uint64_t v5 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = 0;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0x1FFFFFFFELL;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 6) = 0;
  *((_DWORD *)v6 + 18) = 131584;
  *((_WORD *)v6 + 38) = 512;
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v8 = &v6[v7[9]];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v11 = &v6[v7[10]];
  *(void *)uint64_t v11 = 0;
  v11[8] = -1;
  v6[v7[11]] = 3;
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t static FormatStyle<>.percent.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v12);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v12;
  uint64_t v5 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v8 = &v6[v7[9]];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)uint64_t v6 = 0x4059000000000000;
  v6[8] = 0;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = 0;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0x1FFFFFFFELL;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 6) = 0;
  *((_DWORD *)v6 + 18) = 131584;
  *((_WORD *)v6 + 38) = 512;
  uint64_t v11 = &v6[v7[10]];
  *(void *)uint64_t v11 = 0;
  v11[8] = -1;
  v6[v7[11]] = 3;
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t static FormatStyle<>.currency(code:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v7, &v17);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  uint64_t v9 = v17;
  uint64_t v10 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *a3 = v9;
  a3[1] = v10;
  a3[2] = a1;
  a3[3] = a2;
  uint64_t v11 = (char *)a3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v13 = &v11[v12[9]];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0x1FFFFFFFELL;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_WORD *)v11 + 36) = 512;
  *(_DWORD *)(v11 + 74) = 2;
  v11[78] = 2;
  uint64_t v16 = &v11[v12[10]];
  *(void *)uint64_t v16 = 0;
  v16[8] = -1;
  v11[v12[11]] = 1;
  v11[v12[12]] = 3;
  return result;
}

Swift::String __swiftcall NSDecimal.formatted()()
{
  unsigned int v3 = v2;
  unint64_t v94 = v0;
  unint64_t v95 = v1;
  v101[18] = *MEMORY[0x1E4F143B8];
  uint64_t v92 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v92);
  uint64_t v5 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v6);
  unsigned __int8 v93 = (uint64_t *)((char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache + 16;
  uint64_t v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v8, &v98);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  uint64_t v10 = v98;
  uint64_t v11 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t v12 = v93;
  uint64_t v13 = (uint64_t)v93 + *(int *)(v6 + 20);
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0x1FFFFFFFELL;
  *(void *)(v13 + 56) = 0;
  *(void *)(v13 + 64) = 0;
  *(void *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 72) = 131584;
  *(_WORD *)(v13 + 76) = 512;
  uint64_t v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v15 = v13 + v14[9];
  uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v13 + v14[10];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = -1;
  *(unsigned char *)(v13 + v14[11]) = 3;
  *uint64_t v12 = v10;
  v12[1] = v11;
  v101[0] = static LocaleCache.cache;
  swift_unknownObjectRetain();
  LocaleCache.current.getter();
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 472))(ObjectType, v19);
  uint64_t v23 = v22;
  swift_release();
  swift_unknownObjectRelease();
  swift_retain();
  _LocaleAutoupdating.prefs.getter();
  swift_release();
  outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v13, (uint64_t)v5, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v24 = v92;
  uint64_t v25 = (uint64_t *)&v5[*(int *)(v92 + 20)];
  uint64_t *v25 = v21;
  v25[1] = v23;
  outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)&v5[*(int *)(v24 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v26 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v5);
  _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v5, type metadata accessor for ICUNumberFormatter.Signature);
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v27, v94, v95, v3);
    uint64_t v43 = swift_retain_n();
    MEMORY[0x1F4188790](v43);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v86 - 8), (uint64_t *)v100);
    uint64_t v45 = *(void *)v100;
    unint64_t v44 = *(void *)&v100[8];
    swift_release();
    swift_release_n();
    if (v44) {
      goto LABEL_49;
    }
  }
  uint64_t v92 = 0;
  unint64_t v29 = v94;
  unint64_t v28 = v95;
  *(void *)long long v100 = v94;
  unint64_t v30 = HIDWORD(v94);
  unint64_t v31 = HIWORD(v94);
  unint64_t v32 = v95 >> 16;
  *(void *)&v100[8] = v95;
  unint64_t v33 = HIDWORD(v95);
  unint64_t v34 = HIWORD(v95);
  *(_DWORD *)&v100[16] = v3;
  if (!_So9NSDecimala__length_getter(v100))
  {
    *(_DWORD *)long long v100 = v29;
    *(_WORD *)&v100[4] = v30;
    *(_WORD *)&v100[6] = v31;
    *(_WORD *)&v100[8] = v28;
    *(_WORD *)&v100[10] = v32;
    *(_WORD *)&v100[12] = v33;
    *(_WORD *)&v100[14] = v34;
    *(_DWORD *)&v100[16] = v3;
    if (_So9NSDecimala__isNegative_getter(v100))
    {
      unint64_t v44 = 0xE300000000000000;
      uint64_t v45 = 5136718;
LABEL_49:
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v93, type metadata accessor for NSDecimal.FormatStyle);
      uint64_t v80 = v45;
      uint64_t v81 = (void *)v44;
      goto LABEL_52;
    }
  }
  *(_DWORD *)long long v100 = v29;
  *(_WORD *)&v100[4] = v30;
  *(_WORD *)&v100[6] = v31;
  *(_WORD *)&v100[8] = v28;
  *(_WORD *)&v100[10] = v32;
  *(_WORD *)&v100[12] = v33;
  *(_WORD *)&v100[14] = v34;
  *(_DWORD *)&v100[16] = v3;
  if (!_So9NSDecimala__length_getter(v100))
  {
    unint64_t v44 = 0xE100000000000000;
    uint64_t v45 = 48;
    goto LABEL_49;
  }
  uint64_t v96 = 0;
  unint64_t v97 = 0xE000000000000000;
  *(void *)long long v100 = v29;
  *(void *)&v100[8] = v28;
  *(_DWORD *)&v100[16] = v3;
  *(void *)long long v99 = v29;
  unint64_t v90 = HIWORD(v29);
  unint64_t v91 = HIDWORD(v29);
  *(void *)&v99[8] = v28;
  unint64_t v35 = v28 >> 16;
  unint64_t v36 = HIDWORD(v28);
  unint64_t v37 = HIWORD(v28);
  *(_DWORD *)&v99[16] = v3;
  LODWORD(v38) = HIWORD(v3);
  if ((int)_So9NSDecimala__exponent_getter(v99) < 1)
  {
    LOWORD(v40) = v90;
    __int16 v39 = v91;
  }
  else
  {
    LOWORD(v40) = v90;
    __int16 v39 = v91;
    do
    {
      LODWORD(v95) = v3;
      v41._countAndFlagsBits = 48;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      *(_DWORD *)long long v99 = v29;
      *(_WORD *)&v99[4] = v39;
      *(_WORD *)&v99[6] = v40;
      *(_WORD *)&v99[8] = v28;
      *(_WORD *)&v99[10] = v35;
      *(_WORD *)&v99[12] = v36;
      *(_WORD *)&v99[14] = v37;
      *(_WORD *)&v99[16] = v95;
      *(_WORD *)&v99[18] = v38;
      int v42 = _So9NSDecimala__exponent_getter(v99);
      _So9NSDecimala__exponent_setter((v42 - 1), v100);
      unint64_t v29 = *(unsigned int *)v100;
      __int16 v39 = *(_WORD *)&v100[4];
      LOWORD(v40) = *(_WORD *)&v100[6];
      unint64_t v28 = *(unsigned __int16 *)&v100[8];
      LOWORD(v35) = *(_WORD *)&v100[10];
      LOWORD(v36) = *(_WORD *)&v100[12];
      unint64_t v37 = *(unsigned __int16 *)&v100[14];
      unsigned int v3 = *(unsigned __int16 *)&v100[16];
      LODWORD(v38) = *(unsigned __int16 *)&v100[18];
      *(void *)long long v99 = *(void *)v100;
      *(void *)&v99[8] = *(void *)&v100[8];
      *(_WORD *)&v99[16] = *(_WORD *)&v100[16];
      *(_WORD *)&v99[18] = *(_WORD *)&v100[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v99) > 0);
  }
  *(_DWORD *)long long v99 = v29;
  *(_WORD *)&v99[4] = v39;
  *(_WORD *)&v99[6] = v40;
  *(_WORD *)&v99[8] = v28;
  *(_WORD *)&v99[10] = v35;
  *(_WORD *)&v99[12] = v36;
  *(_WORD *)&v99[14] = v37;
  *(_WORD *)&v99[16] = v3;
  *(_WORD *)&v99[18] = v38;
  if (!_So9NSDecimala__exponent_getter(v99))
  {
    _So9NSDecimala__exponent_setter(1, v100);
    unint64_t v29 = *(unsigned int *)v100;
    __int16 v39 = *(_WORD *)&v100[4];
    LOWORD(v40) = *(_WORD *)&v100[6];
    unint64_t v28 = *(unsigned __int16 *)&v100[8];
    LOWORD(v35) = *(_WORD *)&v100[10];
    LOWORD(v36) = *(_WORD *)&v100[12];
    unint64_t v37 = *(unsigned __int16 *)&v100[14];
    unsigned int v3 = *(unsigned __int16 *)&v100[16];
    LODWORD(v38) = *(unsigned __int16 *)&v100[18];
  }
  unint64_t v94 = v29;
  *(_DWORD *)long long v99 = v29;
  *(_WORD *)&v99[4] = v39;
  *(_WORD *)&v99[6] = v40;
  *(_WORD *)&v99[8] = v28;
  *(_WORD *)&v99[10] = v35;
  *(_WORD *)&v99[12] = v36;
  *(_WORD *)&v99[14] = v37;
  LODWORD(v95) = v3;
  *(_WORD *)&v99[16] = v3;
  *(_WORD *)&v99[18] = v38;
  if (!_So9NSDecimala__length_getter(v99))
  {
LABEL_38:
    unint64_t v46 = v94;
    int v47 = v95;
LABEL_39:
    *(_DWORD *)long long v99 = v46;
    *(_WORD *)&v99[4] = v39;
    *(_WORD *)&v99[6] = v40;
    *(_WORD *)&v99[8] = v28;
    *(_WORD *)&v99[10] = v35;
    *(_WORD *)&v99[12] = v36;
    *(_WORD *)&v99[14] = v37;
    *(_WORD *)&v99[16] = v47;
    *(_WORD *)&v99[18] = v38;
    unint64_t v69 = v46;
    int v70 = v47;
    int v71 = _So9NSDecimala__exponent_getter(v99);
    int v72 = v69;
    if (v71 <= 0)
    {
      unint64_t v94 = v69;
      *(_DWORD *)long long v99 = v69;
      *(_WORD *)&v99[4] = v39;
      *(_WORD *)&v99[6] = v40;
      *(_WORD *)&v99[8] = v28;
      *(_WORD *)&v99[10] = v35;
      *(_WORD *)&v99[12] = v36;
      *(_WORD *)&v99[14] = v37;
      LODWORD(v95) = v70;
      *(_WORD *)&v99[16] = v70;
      *(_WORD *)&v99[18] = v38;
      __int16 v73 = v28;
      if (_So9NSDecimala__exponent_getter(v99))
      {
        LOWORD(v70) = v95;
        do
        {
          v74._countAndFlagsBits = 48;
          v74._object = (void *)0xE100000000000000;
          String.append(_:)(v74);
          *(_DWORD *)long long v99 = v94;
          *(_WORD *)&v99[4] = v39;
          *(_WORD *)&v99[6] = v40;
          *(_WORD *)&v99[8] = v73;
          *(_WORD *)&v99[10] = v35;
          *(_WORD *)&v99[12] = v36;
          *(_WORD *)&v99[14] = v37;
          *(_WORD *)&v99[16] = v70;
          *(_WORD *)&v99[18] = v38;
          int v75 = _So9NSDecimala__exponent_getter(v99);
          _So9NSDecimala__exponent_setter((v75 + 1), v100);
          __int16 v39 = *(_WORD *)&v100[4];
          LOWORD(v40) = *(_WORD *)&v100[6];
          __int16 v73 = *(_WORD *)&v100[8];
          LOWORD(v35) = *(_WORD *)&v100[10];
          LOWORD(v36) = *(_WORD *)&v100[12];
          LOWORD(v37) = *(_WORD *)&v100[14];
          LOWORD(v70) = *(_WORD *)&v100[16];
          LOWORD(v38) = *(_WORD *)&v100[18];
          unint64_t v94 = *(unsigned int *)v100;
          *(void *)long long v99 = *(void *)v100;
          *(void *)&v99[8] = *(void *)&v100[8];
          *(_WORD *)&v99[16] = *(_WORD *)&v100[16];
          *(_WORD *)&v99[18] = *(_WORD *)&v100[18];
        }
        while (_So9NSDecimala__exponent_getter(v99));
      }
      else
      {
        LOWORD(v70) = v95;
      }
      v76._countAndFlagsBits = 46;
      v76._object = (void *)0xE100000000000000;
      String.append(_:)(v76);
      v77._countAndFlagsBits = 48;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      LOWORD(v28) = v73;
      int v72 = v94;
    }
    *(_DWORD *)long long v99 = v72;
    *(_WORD *)&v99[4] = v39;
    *(_WORD *)&v99[6] = v40;
    *(_WORD *)&v99[8] = v28;
    *(_WORD *)&v99[10] = v35;
    *(_WORD *)&v99[12] = v36;
    *(_WORD *)&v99[14] = v37;
    *(_WORD *)&v99[16] = v70;
    *(_WORD *)&v99[18] = v38;
    if (_So9NSDecimala__isNegative_getter(v99))
    {
      v78._countAndFlagsBits = 45;
      v78._object = (void *)0xE100000000000000;
      String.append(_:)(v78);
    }
    *(void *)long long v99 = v96;
    *(void *)&v99[8] = v97;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    uint64_t v45 = String.init<A>(_:)();
    unint64_t v44 = v79;
    goto LABEL_49;
  }
  LODWORD(v46) = v94;
  LOWORD(v47) = v95;
  while (1)
  {
    unint64_t v91 = v37;
    LODWORD(v94) = v38;
    *(_DWORD *)long long v99 = v46;
    *(_WORD *)&v99[4] = v39;
    *(_WORD *)&v99[6] = v40;
    *(_WORD *)&v99[8] = v28;
    *(_WORD *)&v99[10] = v35;
    *(_WORD *)&v99[12] = v36;
    *(_WORD *)&v99[14] = v37;
    *(_WORD *)&v99[16] = v47;
    *(_WORD *)&v99[18] = v38;
    __int16 v48 = v36;
    __int16 v49 = v35;
    __int16 v50 = v40;
    __int16 v51 = v39;
    int v52 = v46;
    __int16 v53 = v47;
    if (!_So9NSDecimala__exponent_getter(v99))
    {
      unint64_t v95 = v28;
      v54._countAndFlagsBits = 46;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      LOWORD(v28) = v95;
    }
    *(_DWORD *)long long v99 = v52;
    *(_WORD *)&v99[4] = v51;
    *(_WORD *)&v99[6] = v50;
    *(_WORD *)&v99[8] = v28;
    *(_WORD *)&v99[10] = v49;
    *(_WORD *)&v99[12] = v48;
    *(_WORD *)&v99[14] = v91;
    *(_WORD *)&v99[16] = v53;
    *(_WORD *)&v99[18] = v94;
    int v55 = _So9NSDecimala__exponent_getter(v99);
    _So9NSDecimala__exponent_setter((v55 + 1), v100);
    uint64_t v56 = *(unsigned int *)v100;
    uint64_t v57 = *(unsigned __int16 *)&v100[4];
    LOWORD(v36) = *(_WORD *)&v100[6];
    unint64_t v94 = *(unsigned __int16 *)&v100[10];
    unint64_t v95 = *(unsigned __int16 *)&v100[8];
    unint64_t v91 = *(unsigned __int16 *)&v100[12];
    uint64_t v89 = *(unsigned __int16 *)&v100[14];
    LODWORD(v90) = *(unsigned __int16 *)&v100[16];
    int v88 = *(unsigned __int16 *)&v100[18];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v100 | ((unint64_t)*(unsigned __int16 *)&v100[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v100[6] << 48), *(unsigned __int16 *)&v100[8] | ((unint64_t)*(unsigned __int16 *)&v100[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v100[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v100[14] << 48), *(unsigned __int16 *)&v100[16] | (*(unsigned __int16 *)&v100[18] << 16));
    unint64_t v28 = v58;
    uint64_t v40 = *(void *)(v58 + 16);
    if (!v40)
    {
      LODWORD(v37) = 0;
      uint64_t v38 = MEMORY[0x1E4FBC860];
      uint64_t v62 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v62) {
        goto LABEL_34;
      }
LABEL_31:
      if (!*(_WORD *)(v38 + 2 * v62 + 30))
      {
        do
        {
          *(void *)(v38 + 16) = v62 - 1;
          if (v62 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v38 + 28 + 2 * v62--));
      }
      goto LABEL_34;
    }
    uint64_t v86 = v57;
    uint64_t v87 = v56;
    uint64_t v38 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v35 = v38 + 30;
    *(void *)(v38 + 16) = v40;
    __int16 v39 = 2 * v40;
    bzero((void *)(v38 + 32), 2 * v40);
    unsigned int v59 = *(unsigned __int16 *)(2 * v40 + v28 + 30);
    LOWORD(v60) = *(_WORD *)(2 * v40 + v28 + 30) / 0xAu;
    while (1)
    {
      *(_WORD *)(v35 + 2 * v40) = v60;
      LODWORD(v37) = v59 % 0xA;
      if (v40 == 1) {
        break;
      }
      unsigned int v59 = *(unsigned __int16 *)(v28 + 28 + 2 * v40) | (v37 << 16);
      unsigned int v60 = v59 / 0xA;
      unint64_t v61 = v40 - 2;
      --v40;
      if (v61 >= *(void *)(v38 + 16))
      {
        __break(1u);
        goto LABEL_38;
      }
    }
    LOWORD(v57) = v86;
    LODWORD(v56) = v87;
    uint64_t v62 = *(void *)(v38 + 16);
    if (v62) {
      goto LABEL_31;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    *(_DWORD *)long long v99 = v56;
    *(_WORD *)&v99[4] = v57;
    *(_WORD *)&v99[6] = v36;
    *(_WORD *)&v99[8] = v95;
    *(_WORD *)&v99[10] = v94;
    *(_WORD *)&v99[12] = v91;
    *(_WORD *)&v99[14] = v89;
    *(_WORD *)&v99[16] = v90;
    *(_WORD *)&v99[18] = v88;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v38);
    uint64_t v92 = v64;
    if (v64) {
      break;
    }
    unint64_t v65 = *(void *)(v38 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v65)) {
      goto LABEL_51;
    }
    _So9NSDecimala__length_setter(v65, v99);
    *(_DWORD *)long long v100 = *(_DWORD *)v99;
    *(_OWORD *)&v100[4] = *(_OWORD *)&v99[4];
    *(void *)long long v99 = v37 | 0x30;
    v66._countAndFlagsBits = MEMORY[0x185302020](v99, 1);
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    unint64_t v94 = *(unsigned int *)v100;
    unint64_t v91 = *(unsigned __int16 *)&v100[4];
    LOWORD(v40) = *(_WORD *)&v100[6];
    unint64_t v28 = *(unsigned __int16 *)&v100[8];
    LOWORD(v35) = *(_WORD *)&v100[10];
    LOWORD(v36) = *(_WORD *)&v100[12];
    unint64_t v37 = *(unsigned __int16 *)&v100[14];
    int v67 = *(unsigned __int16 *)&v100[16];
    LODWORD(v38) = *(unsigned __int16 *)&v100[18];
    *(void *)long long v99 = *(void *)v100;
    *(void *)&v99[8] = *(void *)&v100[8];
    *(_WORD *)&v99[16] = *(_WORD *)&v100[16];
    *(_WORD *)&v99[18] = *(_WORD *)&v100[18];
    int v68 = _So9NSDecimala__length_getter(v99);
    int v47 = v67;
    unint64_t v46 = v94;
    __int16 v39 = v91;
    if (!v68) {
      goto LABEL_39;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_51:
  int v85 = 0;
  uint64_t v84 = 3455;
  char v83 = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  swift_release_n();
  uint64_t v80 = swift_willThrow();
  __break(1u);
LABEL_52:
  result._object = v81;
  result._countAndFlagsBits = v80;
  return result;
}

uint64_t NSDecimal.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a2;
  v7[1] = a3;
  int v8 = a4;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(a6 + 48))(v7, a5, a6);
}

uint64_t NSDecimal.FormatStyle.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return NSDecimal.FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, type metadata accessor for NSDecimal.FormatStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:));
}

uint64_t NSDecimal.FormatStyle.Percent.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return NSDecimal.FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:));
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a6, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:));
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle.Percent(uint64_t a1)
{
  uint64_t v2 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);

  return MEMORY[0x1F4188350](a1, v2);
}

uint64_t NSDecimal.FormatStyle.Currency.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return NSDecimal.FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:));
}

uint64_t NSDecimal.FormatStyle.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(void), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v26 = a8;
  uint64_t v11 = v8;
  uint64_t v25 = a5;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v11, (uint64_t)v19, a7);
  v19[*(int *)(v17 + 44)] = 0;
  uint64_t v20 = v26(a1, a2, a3, a4, v25);
  uint64_t v22 = v21;
  outlined destroy of Any?((uint64_t)v19, a6);
  if ((v22 & 0x100000000) != 0) {
    return 0;
  }
  else {
    return v20;
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, a6, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:));
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle.Currency(uint64_t a1)
{
  uint64_t v2 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);

  return MEMORY[0x1F4188350](a1, v2);
}

uint64_t static RegexComponent<>.localizedCurrency(code:locale:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  *(_OWORD *)a3 = *a2;
  *(void *)(a3 + 16) = v4;
  *(void *)(a3 + 24) = v5;
  uint64_t v6 = a3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v8 = v6 + v7[9];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0x1FFFFFFFELL;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 48) = 0;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(unsigned char *)(v6 + 78) = 2;
  uint64_t v10 = v6 + v7[10];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = -1;
  *(unsigned char *)(v6 + v7[11]) = 1;
  *(unsigned char *)(v6 + v7[12]) = 3;
  swift_bridgeObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t specialized Array._makeMutableAndUnique()()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v0 = v1;
  if (!result)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *unint64_t v0 = result;
  }
  return result;
}

unint64_t specialized Array._checkSubscript_mutating(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(a2 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized static NSDecimal.FormatStyle.Currency.== infix(_:_:)(long long *a1, long long *a2)
{
  long long v4 = *a1;
  long long v8 = *a2;
  long long v9 = v4;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) == 0) {
    return 0;
  }
  BOOL v5 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);

  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + v6, (char *)a2 + v6);
}

uint64_t specialized static NSDecimal.FormatStyle.Attributed.Style.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v37 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v37);
  uint64_t v38 = (long long *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (long long *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (long long *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v35 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (long long *)((char *)&v35 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal.FormatStyle.Attributed.Style, NSDecimal.FormatStyle.Attributed.Style));
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 56)];
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(a1, (uint64_t)v19, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v40, v21, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v19, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v39;
        outlined init with take of NSDecimal.FormatStyle.Percent(v21, v39, type metadata accessor for NSDecimal.FormatStyle.Currency);
        long long v24 = *(_OWORD *)v13;
        long long v41 = *(_OWORD *)v23;
        long long v42 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (*((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v36 + 24)], v23 + *(int *)(v36 + 24)) & 1) != 0)
        {
          uint64_t v25 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
          uint64_t v26 = (uint64_t)v13;
LABEL_23:
          _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v26, v25);
          _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v19, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
          return 1;
        }
        unint64_t v31 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
        uint64_t v32 = (uint64_t)v13;
        goto LABEL_26;
      }
      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v28 = (uint64_t)v13;
    }
    else
    {
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v19, (uint64_t)v10, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        unint64_t v29 = v38;
        outlined init with take of NSDecimal.FormatStyle.Percent(v21, (uint64_t)v38, type metadata accessor for NSDecimal.FormatStyle.Percent);
        long long v30 = *v10;
        long long v41 = *v29;
        long long v42 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v37 + 20), (char *)v29 + *(int *)(v37 + 20)) & 1) != 0)
        {
          uint64_t v25 = type metadata accessor for NSDecimal.FormatStyle.Percent;
          _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
          uint64_t v26 = (uint64_t)v10;
          goto LABEL_23;
        }
        unint64_t v31 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
        uint64_t v32 = (uint64_t)v10;
        goto LABEL_26;
      }
      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v28 = (uint64_t)v10;
    }
  }
  else
  {
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v19, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of NSDecimal.FormatStyle.Percent(v21, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      long long v33 = *v16;
      long long v41 = *v7;
      long long v42 = v33;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 20), (char *)v7 + *(int *)(v5 + 20)) & 1) != 0)
      {
        uint64_t v25 = type metadata accessor for NSDecimal.FormatStyle;
        _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
        uint64_t v26 = (uint64_t)v16;
        goto LABEL_23;
      }
      unint64_t v31 = type metadata accessor for NSDecimal.FormatStyle;
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      uint64_t v32 = (uint64_t)v16;
LABEL_26:
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v32, v31);
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v19, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      return 0;
    }
    uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v28 = (uint64_t)v16;
  }
  _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v28, v27);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (NSDecimal.FormatStyle.Attributed.Style, NSDecimal.FormatStyle.Attributed.Style));
  return 0;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Attributed.Style);
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Percent(void *a1)
{
  a1[1] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
  a1[2] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Percent()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Currency(void *a1)
{
  a1[1] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
  a1[2] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Currency()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Attributed(void *a1)
{
  a1[1] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed);
  a1[2] = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed);
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Attributed()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed);
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle> and conformance NSDecimal.ParseStrategy<A>, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle(uint64_t a1)
{
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle.Currency()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency> and conformance NSDecimal.ParseStrategy<A>, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Currency(uint64_t a1)
{
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle.Percent()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent> and conformance NSDecimal.ParseStrategy<A>, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Percent(uint64_t a1)
{
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle.Percent()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Percent);
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle.Currency()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Currency);
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2);
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2);
}

void *initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    uint64_t v3 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    v8[8] = *((unsigned char *)a2 + v7 + 8);
    *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    long long v10 = *(_OWORD *)((char *)a2 + v7 + 48);
    long long v11 = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 3) = v10;
    *((_OWORD *)v8 + 1) = v11;
    v8[73] = *((unsigned char *)a2 + v7 + 73);
    LOWORD(v7) = *(_WORD *)((char *)a2 + v7 + 74);
    v8[76] = v9[76];
    *((_WORD *)v8 + 37) = v7;
    v8[77] = v9[77];
    uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v13 = v12[9];
    __dst = &v8[v13];
    uint64_t v14 = &v9[v13];
    uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_unknownObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v19 = v12[10];
    uint64_t v20 = &v8[v19];
    uint64_t v21 = &v9[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    v8[v12[11]] = v9[v12[11]];
  }
  return v3;
}

void *assignWithCopy for NSDecimal.FormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  LOBYTE(v7) = *((unsigned char *)a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  v8[8] = v7;
  long long v10 = *((_OWORD *)v9 + 1);
  long long v11 = *((_OWORD *)v9 + 2);
  long long v12 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v11;
  *((_OWORD *)v8 + 3) = v12;
  *((_OWORD *)v8 + 1) = v10;
  v8[73] = v9[73];
  LOWORD(v7) = *((_WORD *)v9 + 37);
  v8[76] = v9[76];
  *((_WORD *)v8 + 37) = v7;
  v8[77] = v9[77];
  uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v13 = v27[9];
  uint64_t v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  uint64_t v22 = v27[10];
  uint64_t v23 = &v8[v22];
  long long v24 = &v9[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  v8[v27[11]] = v9[v27[11]];
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((unsigned char *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  long long v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((unsigned char *)a2 + v4 + 73);
  LOWORD(v4) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = v6[76];
  *((_WORD *)v5 + 37) = v4;
  v5[77] = v6[77];
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  long long v11 = &v5[v10];
  long long v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = v9[10];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

void *assignWithTake for NSDecimal.FormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)long long v8 = *(void *)((char *)a2 + v7);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
  v8[73] = *((unsigned char *)a2 + v7 + 73);
  v8[76] = *((unsigned char *)a2 + v7 + 76);
  *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v7 + 74);
  v8[77] = *((unsigned char *)a2 + v7 + 77);
  long long v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v11 = v24[9];
  long long v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v20 = v24[10];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v8[v24[11]] = v9[v24[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2_0);
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2_0);
}

void *initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    uint64_t v3 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    long long v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *(void *)long long v10 = *(void *)((char *)a2 + v9);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    long long v12 = *(_OWORD *)((char *)a2 + v9 + 32);
    *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
    *((_OWORD *)v10 + 2) = v12;
    *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
    v10[73] = *((unsigned char *)a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
    v10[78] = *((unsigned char *)a2 + v9 + 78);
    uint64_t v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v14 = v13[9];
    __dst = &v10[v14];
    uint64_t v15 = &v11[v14];
    uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    uint64_t v20 = v13[10];
    uint64_t v21 = &v10[v20];
    uint64_t v22 = &v11[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    v10[v13[11]] = v11[v13[11]];
    v10[v13[12]] = v11[v13[12]];
  }
  return v3;
}

uint64_t destroy for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v6 = *(void *)(a2 + v5);
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(a2 + v5 + 8);
  long long v8 = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
  *(unsigned char *)(v6 + 73) = *(unsigned char *)(a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)(a2 + v5 + 74);
  *(unsigned char *)(v6 + 78) = *(unsigned char *)(a2 + v5 + 78);
  uint64_t v9 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  __dst = (void *)(v6 + v10);
  uint64_t v11 = (const void *)(v7 + v10);
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v16 = v9[10];
  uint64_t v17 = v6 + v16;
  uint64_t v18 = v7 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(unsigned char *)(v6 + v9[11]) = *(unsigned char *)(v7 + v9[11]);
  *(unsigned char *)(v6 + v9[12]) = *(unsigned char *)(v7 + v9[12]);
  return a1;
}

void *assignWithCopy for NSDecimal.FormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  long long v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(void *)long long v8 = v10;
  long long v11 = *((_OWORD *)v9 + 1);
  long long v12 = *((_OWORD *)v9 + 2);
  long long v13 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v13;
  *((_OWORD *)v8 + 1) = v11;
  v8[73] = v9[73];
  *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
  v8[78] = v9[78];
  uint64_t v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v15 = v14[9];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  unint64_t v29 = v16;
  LODWORD(v16) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (v16)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v29, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v29, 0, 1, v18);
      goto LABEL_9;
    }
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    uint64_t v23 = v29;
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v29, v17, v18);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v18);
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    uint64_t v23 = v29;
  }
  memcpy(v23, v17, v22);
LABEL_9:
  uint64_t v24 = v14[10];
  uint64_t v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  v8[v14[11]] = v9[v14[11]];
  v8[v14[12]] = v9[v14[12]];
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle.Currency(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  v6[8] = *((unsigned char *)a2 + v5 + 8);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)((char *)a2 + v5 + 57);
  long long v8 = *(_OWORD *)((char *)a2 + v5 + 48);
  long long v9 = *(_OWORD *)((char *)a2 + v5 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)((char *)a2 + v5 + 32);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 1) = v9;
  v6[73] = *((unsigned char *)a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)((char *)a2 + v5 + 74);
  v6[78] = *((unsigned char *)a2 + v5 + 78);
  uint64_t v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v11 = v10[9];
  long long v12 = &v6[v11];
  long long v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = v10[10];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  v6[v10[11]] = v7[v10[11]];
  v6[v10[12]] = v7[v10[12]];
  return a1;
}

void *assignWithTake for NSDecimal.FormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
  v10[8] = *((unsigned char *)a2 + v9 + 8);
  long long v12 = *(_OWORD *)((char *)a2 + v9 + 32);
  *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
  *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
  v10[73] = *((unsigned char *)a2 + v9 + 73);
  *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
  v10[78] = *((unsigned char *)a2 + v9 + 78);
  long long v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v14 = v13[9];
  uint64_t v15 = &v10[v14];
  uint64_t v16 = &v11[v14];
  uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v27 = v15;
  LODWORD(v15) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (v15)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
      goto LABEL_9;
    }
    size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    size_t v22 = v27;
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v27, v16, v17);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    size_t v22 = v27;
  }
  memcpy(v22, v16, v21);
LABEL_9:
  uint64_t v23 = v13[10];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v10[v13[11]] = v11[v13[11]];
  v10[v13[12]] = v11[v13[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181C75B88);
}

uint64_t sub_181C75B88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181C75C4C);
}

void *sub_181C75C4C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0) - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = (uint64_t)a2 + v19;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
      *(unsigned char *)(v20 + 8) = *((unsigned char *)a2 + v19 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v19 + 16);
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      *(unsigned char *)(v20 + 73) = *((unsigned char *)a2 + v19 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v19 + 74);
      *(unsigned char *)(v20 + 76) = *((unsigned char *)a2 + v19 + 76);
      *(unsigned char *)(v20 + 77) = *((unsigned char *)a2 + v19 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v23[9];
      __dsta = (void *)(v20 + v24);
      uint64_t v25 = (const void *)(v21 + v24);
      uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
      swift_unknownObjectRetain();
      if (v28(v25, 1, v26))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(__dsta, v25, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dsta, 0, 1, v26);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v6 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v6;
        uint64_t v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = (uint64_t)a2 + v7;
        *(void *)uint64_t v8 = *(uint64_t *)((char *)a2 + v7);
        *(unsigned char *)(v8 + 8) = *((unsigned char *)a2 + v7 + 8);
        long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)a2 + v7 + 16);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        *(unsigned char *)(v8 + 73) = *((unsigned char *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        *(unsigned char *)(v8 + 78) = *((unsigned char *)a2 + v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = (void *)(v8 + v12);
        long long v13 = (const void *)(v9 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v38 = v11[10];
        uint64_t v39 = v8 + v38;
        uint64_t v40 = v9 + v38;
        *(void *)uint64_t v39 = *(void *)v40;
        *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
        *(unsigned char *)(v8 + v11[11]) = *(unsigned char *)(v9 + v11[11]);
        *(unsigned char *)(v8 + v11[12]) = *(unsigned char *)(v9 + v11[12]);
        goto LABEL_16;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      uint64_t v20 = a1 + v30;
      uint64_t v21 = (uint64_t)a2 + v30;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v30);
      *(unsigned char *)(v20 + 8) = *((unsigned char *)a2 + v30 + 8);
      long long v31 = *(_OWORD *)((char *)a2 + v30 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v30 + 16);
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v30 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
      *(unsigned char *)(v20 + 73) = *((unsigned char *)a2 + v30 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v30 + 74);
      *(unsigned char *)(v20 + 76) = *((unsigned char *)a2 + v30 + 76);
      *(unsigned char *)(v20 + 77) = *((unsigned char *)a2 + v30 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v32 = v23[9];
      uint64_t v45 = (void *)(v20 + v32);
      long long v33 = (const void *)(v21 + v32);
      uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
      swift_unknownObjectRetain();
      if (v36(v33, 1, v34))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v45, v33, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v45, v33, v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v45, 0, 1, v34);
      }
    }
    uint64_t v41 = v23[10];
    uint64_t v42 = v20 + v41;
    uint64_t v43 = v21 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(unsigned char *)(v20 + v23[11]) = *(unsigned char *)(v21 + v23[11]);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  uint64_t v18 = *a2;
  *(void *)a1 = *a2;
  a1 = v18 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for NSDecimal.FormatStyle.Attributed(uint64_t a1)
{
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v17 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    *(void *)uint64_t v18 = *(void *)(a2 + v17);
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v17 + 8);
    long long v20 = *(_OWORD *)(a2 + v17 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v17 + 16);
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v17 + 48);
    *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
    *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v17 + 73);
    *(_WORD *)(v18 + 74) = *(_WORD *)(a2 + v17 + 74);
    *(unsigned char *)(v18 + 76) = *(unsigned char *)(a2 + v17 + 76);
    *(unsigned char *)(v18 + 77) = *(unsigned char *)(a2 + v17 + 77);
    uint64_t v21 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v22 = v21[9];
    uint64_t v23 = (void *)(v18 + v22);
    uint64_t v24 = (const void *)(v19 + v22);
    uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
    swift_unknownObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v47 = v21[10];
    uint64_t v48 = v18 + v47;
    uint64_t v49 = v19 + v47;
    *(void *)uint64_t v48 = *(void *)v49;
    *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
    uint64_t v50 = v21[11];
    uint64_t v45 = (unsigned char *)(v18 + v50);
    unint64_t v46 = (unsigned char *)(v19 + v50);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    *(void *)uint64_t v7 = *(void *)(a2 + v6);
    *(unsigned char *)(v7 + 8) = *(unsigned char *)(a2 + v6 + 8);
    long long v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(unsigned char *)(v7 + 73) = *(unsigned char *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(unsigned char *)(v7 + 78) = *(unsigned char *)(a2 + v6 + 78);
    long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v11 = v10[9];
    __dst = (void *)(v7 + v11);
    uint64_t v12 = (const void *)(v8 + v11);
    uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v41 = v10[10];
    uint64_t v42 = v7 + v41;
    uint64_t v43 = v8 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(unsigned char *)(v7 + v10[11]) = *(unsigned char *)(v8 + v10[11]);
    uint64_t v44 = v10[12];
    uint64_t v45 = (unsigned char *)(v7 + v44);
    unint64_t v46 = (unsigned char *)(v8 + v44);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v29 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    *(void *)uint64_t v30 = *(void *)(a2 + v29);
    *(unsigned char *)(v30 + 8) = *(unsigned char *)(a2 + v29 + 8);
    long long v32 = *(_OWORD *)(a2 + v29 + 32);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(a2 + v29 + 16);
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(a2 + v29 + 48);
    *(_OWORD *)(v30 + 57) = *(_OWORD *)(a2 + v29 + 57);
    *(unsigned char *)(v30 + 73) = *(unsigned char *)(a2 + v29 + 73);
    *(_WORD *)(v30 + 74) = *(_WORD *)(a2 + v29 + 74);
    *(unsigned char *)(v30 + 76) = *(unsigned char *)(a2 + v29 + 76);
    *(unsigned char *)(v30 + 77) = *(unsigned char *)(a2 + v29 + 77);
    long long v33 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v34 = v33[9];
    uint64_t v35 = (void *)(v30 + v34);
    uint64_t v36 = (const void *)(v31 + v34);
    uint64_t v37 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
    swift_unknownObjectRetain();
    if (v39(v36, 1, v37))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v51 = v33[10];
    uint64_t v52 = v30 + v51;
    uint64_t v53 = v31 + v51;
    *(void *)uint64_t v52 = *(void *)v53;
    *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
    uint64_t v54 = v33[11];
    uint64_t v45 = (unsigned char *)(v30 + v54);
    unint64_t v46 = (unsigned char *)(v31 + v54);
  }
  *uint64_t v45 = *v46;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      LOBYTE(v18) = *(unsigned char *)(a2 + v18 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v18;
      long long v21 = *(_OWORD *)(v20 + 57);
      long long v23 = *(_OWORD *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)(v19 + 48) = v22;
      *(_OWORD *)(v19 + 57) = v21;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v18) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v18;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v25 = v24[9];
      uint64_t v26 = (void *)(v19 + v25);
      uint64_t v27 = (const void *)(v20 + v25);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v30(v27, 1, v28))
      {
LABEL_9:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v26, v27, *(void *)(*(void *)(v37 - 8) + 64));
LABEL_13:
        uint64_t v45 = v24[10];
        uint64_t v46 = v19 + v45;
        uint64_t v47 = (uint64_t *)(v20 + v45);
        uint64_t v48 = *v47;
        *(unsigned char *)(v46 + 8) = *((unsigned char *)v47 + 8);
        *(void *)uint64_t v46 = v48;
        uint64_t v49 = v24[11];
        uint64_t v43 = (unsigned char *)(v19 + v49);
        uint64_t v44 = (unsigned char *)(v20 + v49);
LABEL_14:
        *uint64_t v43 = *v44;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(v5) = *(unsigned char *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(unsigned char *)(v6 + 8) = v5;
        long long v8 = *(_OWORD *)(v7 + 57);
        long long v10 = *(_OWORD *)(v7 + 32);
        long long v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(unsigned char *)(v6 + 73) = *(unsigned char *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(unsigned char *)(v6 + 78) = *(unsigned char *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = (void *)(v6 + v12);
        uint64_t v13 = (const void *)(v7 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v38 = v11[10];
        uint64_t v39 = v6 + v38;
        uint64_t v40 = (uint64_t *)(v7 + v38);
        uint64_t v41 = *v40;
        *(unsigned char *)(v39 + 8) = *((unsigned char *)v40 + 8);
        *(void *)uint64_t v39 = v41;
        *(unsigned char *)(v6 + v11[11]) = *(unsigned char *)(v7 + v11[11]);
        uint64_t v42 = v11[12];
        uint64_t v43 = (unsigned char *)(v6 + v42);
        uint64_t v44 = (unsigned char *)(v7 + v42);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v31 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      uint64_t v19 = a1 + v31;
      uint64_t v20 = a2 + v31;
      LOBYTE(v31) = *(unsigned char *)(a2 + v31 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v31;
      long long v32 = *(_OWORD *)(v20 + 57);
      long long v34 = *(_OWORD *)(v20 + 32);
      long long v33 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v34;
      *(_OWORD *)(v19 + 48) = v33;
      *(_OWORD *)(v19 + 57) = v32;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v31) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v31;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v35 = v24[9];
      uint64_t v26 = (void *)(v19 + v35);
      uint64_t v27 = (const void *)(v20 + v35);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v36(v27, 1, v28)) {
        goto LABEL_9;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      uint64_t v7 = (char *)a1 + v6;
      long long v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      v7[8] = *((unsigned char *)a2 + v6 + 8);
      long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((unsigned char *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((unsigned char *)a2 + v6 + 78);
      long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      uint64_t v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v35 = v10[10];
      uint64_t v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      long long v33 = &v7[v38];
      long long v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0);
  }
  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  v19[8] = *((unsigned char *)a2 + v18 + 8);
  long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((unsigned char *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((unsigned char *)a2 + v18 + 76);
  v19[77] = *((unsigned char *)a2 + v18 + 77);
  long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v23 = v22[9];
  uint64_t v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  long long v33 = &v19[v32];
  long long v34 = &v20[v32];
LABEL_13:
  *long long v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for NSDecimal.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v7 = (char *)a1 + v6;
        long long v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        v7[8] = *((unsigned char *)a2 + v6 + 8);
        long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((unsigned char *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((unsigned char *)a2 + v6 + 78);
        long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        uint64_t v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        long long v33 = &v7[v38];
        long long v34 = &v8[v38];
LABEL_14:
        *long long v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    uint64_t v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    long long v33 = &v19[v32];
    long long v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181C775E8);
}

uint64_t sub_181C775E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181C77668);
}

uint64_t sub_181C77668(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for NSDecimal.FormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return &unk_1ECA50B38;
}

void *type metadata accessor for NSDecimal.FormatStyle.Currency.CodingKeys()
{
  return &unk_1ECA50CE8;
}

void *type metadata accessor for NSDecimal.FormatStyle.Percent.CodingKeys()
{
  return &unk_1ECA50C58;
}

unsigned char *storeEnumTagSinglePayload for NSDecimal.FormatStyle.Percent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C7786CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.CodingKeys()
{
  return &unk_1ECA50BC8;
}

uint64_t assignWithCopy for NSDecimal.FormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      LOBYTE(v18) = *(unsigned char *)(a2 + v18 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v18;
      long long v21 = *(_OWORD *)(v20 + 57);
      long long v23 = *(_OWORD *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)(v19 + 48) = v22;
      *(_OWORD *)(v19 + 57) = v21;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v18) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v18;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v25 = v24[9];
      uint64_t v26 = (void *)(v19 + v25);
      uint64_t v27 = (const void *)(v20 + v25);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v30(v27, 1, v28))
      {
LABEL_9:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v26, v27, *(void *)(*(void *)(v37 - 8) + 64));
LABEL_13:
        uint64_t v45 = v24[10];
        uint64_t v46 = v19 + v45;
        uint64_t v47 = (uint64_t *)(v20 + v45);
        uint64_t v48 = *v47;
        *(unsigned char *)(v46 + 8) = *((unsigned char *)v47 + 8);
        *(void *)uint64_t v46 = v48;
        uint64_t v49 = v24[11];
        uint64_t v43 = (unsigned char *)(v19 + v49);
        uint64_t v44 = (unsigned char *)(v20 + v49);
LABEL_14:
        *uint64_t v43 = *v44;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(v5) = *(unsigned char *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(unsigned char *)(v6 + 8) = v5;
        long long v8 = *(_OWORD *)(v7 + 57);
        long long v10 = *(_OWORD *)(v7 + 32);
        long long v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(unsigned char *)(v6 + 73) = *(unsigned char *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(unsigned char *)(v6 + 78) = *(unsigned char *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = (void *)(v6 + v12);
        uint64_t v13 = (const void *)(v7 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v38 = v11[10];
        uint64_t v39 = v6 + v38;
        uint64_t v40 = (uint64_t *)(v7 + v38);
        uint64_t v41 = *v40;
        *(unsigned char *)(v39 + 8) = *((unsigned char *)v40 + 8);
        *(void *)uint64_t v39 = v41;
        *(unsigned char *)(v6 + v11[11]) = *(unsigned char *)(v7 + v11[11]);
        uint64_t v42 = v11[12];
        uint64_t v43 = (unsigned char *)(v6 + v42);
        uint64_t v44 = (unsigned char *)(v7 + v42);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v31 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      uint64_t v19 = a1 + v31;
      uint64_t v20 = a2 + v31;
      LOBYTE(v31) = *(unsigned char *)(a2 + v31 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v31;
      long long v32 = *(_OWORD *)(v20 + 57);
      long long v34 = *(_OWORD *)(v20 + 32);
      long long v33 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v19 + 32) = v34;
      *(_OWORD *)(v19 + 48) = v33;
      *(_OWORD *)(v19 + 57) = v32;
      *(unsigned char *)(v19 + 73) = *(unsigned char *)(v20 + 73);
      LOWORD(v31) = *(_WORD *)(v20 + 74);
      *(unsigned char *)(v19 + 76) = *(unsigned char *)(v20 + 76);
      *(_WORD *)(v19 + 74) = v31;
      *(unsigned char *)(v19 + 77) = *(unsigned char *)(v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v35 = v24[9];
      uint64_t v26 = (void *)(v19 + v35);
      uint64_t v27 = (const void *)(v20 + v35);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v36(v27, 1, v28)) {
        goto LABEL_9;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *assignWithTake for NSDecimal.FormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        uint64_t v7 = (char *)a1 + v6;
        long long v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        v7[8] = *((unsigned char *)a2 + v6 + 8);
        long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((unsigned char *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((unsigned char *)a2 + v6 + 78);
        long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        uint64_t v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        long long v33 = &v7[v38];
        long long v34 = &v8[v38];
LABEL_14:
        *long long v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    uint64_t v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    long long v33 = &v19[v32];
    long long v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Attributed.Style()
{
  return _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, (void (*)(uint64_t))type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
}

uint64_t specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697463656C6C6F63 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x697463656C6C6F63 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NSDecimal.FormatStyle.Currency.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C78AACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  return &unk_1ECA508F8;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  return &unk_1ECA50988;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  return &unk_1ECA50AA8;
}

unsigned char *storeEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181C78BA0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  return &unk_1ECA50A18;
}

uint64_t specialized NSDecimal.FormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616D69636564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  LOBYTE(v15) = Substring.UTF8View.subscript.getter();
  if (v15 == 10) {
    goto LABEL_7;
  }
  if (v15 == 13)
  {
    if ((unint64_t)Substring.UTF8View.index(after:)() >> 14 >= a5 >> 14
      || (swift_bridgeObjectRetain(),
          unint64_t v7 = Substring.UTF8View.subscript.getter(),
          swift_bridgeObjectRelease(),
          v7 != 10))
    {
      if ((unint64_t)Substring.UTF8View.index(after:)() >> 14 >= a2 >> 14) {
        return a2;
      }
      __break(1u);
      goto LABEL_16;
    }
    if ((unint64_t)Substring.UTF8View.index(after:)() >> 14 >= a2 >> 14) {
      return a2;
    }
    __break(1u);
LABEL_7:
    unint64_t v7 = a2 >> 14;
    if (a2 >> 14 > a4 >> 14)
    {
      a1 = Substring.UTF8View.index(before:)();
      int v16 = Substring.UTF8View.subscript.getter();
      unint64_t v15 = Substring.UTF8View.index(after:)();
      unint64_t v17 = v15 >> 14;
      if (v16 == 13)
      {
        if (v17 < a1 >> 14)
        {
          __break(1u);
          goto LABEL_11;
        }
        return a1;
      }
      if (v17 >= v7) {
        return a2;
      }
      __break(1u);
LABEL_78:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a3)
      {
        if (v43 >> 14 >= a1 >> 14)
        {
LABEL_83:
          Substring.UTF8View.index(after:)();
          return a1;
        }
        __break(1u);
      }
      BOOL v38 = a1 >> 14 >= v43 >> 14;
      unint64_t result = a1;
      a1 = v43;
      if (!v38) {
        goto LABEL_98;
      }
      goto LABEL_83;
    }
LABEL_16:
    unint64_t result = Substring.UTF8View.index(after:)();
    if (v7 > result >> 14) {
      goto LABEL_97;
    }
    return a2;
  }
LABEL_11:
  if (a3)
  {
    if ((v15 + 86) < 0xDBu) {
      return 0;
    }
  }
  else if ((v15 + 29) < 0xDFu)
  {
    return 0;
  }
  uint64_t v40 = *(void *)(a1 + 16);
  if (!v40) {
    return 0;
  }
  unint64_t v41 = a1 + 32;
  uint64_t v19 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v19) = 1;
  }
  unint64_t v39 = a5 & 0xC;
  unint64_t v20 = a4;
  uint64_t v21 = 4 << v19;
  if ((a7 & 0x2000000000000000) != 0) {
    uint64_t v22 = HIBYTE(a7) & 0xF;
  }
  else {
    uint64_t v22 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v45 = v20;
  unint64_t v46 = a5;
  unint64_t v48 = v20 >> 14;
  unint64_t v49 = v22;
  unint64_t v47 = a5 >> 14;
  unint64_t result = swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  unint64_t v43 = a2;
  uint64_t v50 = a6;
  while (1)
  {
    uint64_t v24 = *(void *)(v41 + 8 * v23);
    if (a3)
    {
      unint64_t v51 = 0;
      unint64_t v25 = *(void *)(v24 + 16);
      unint64_t v26 = v25 - 1;
      uint64_t v27 = -1;
      unint64_t v42 = v45;
    }
    else
    {
      unint64_t result = v46;
      if (v39 == v21)
      {
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v46, a6, a7);
        if (result < 0x4000) {
          goto LABEL_96;
        }
      }
      else if (v46 < 0x4000)
      {
        goto LABEL_96;
      }
      if ((a7 & 0x1000000000000000) != 0)
      {
        if (v49 < result >> 16) {
          goto LABEL_99;
        }
        unint64_t result = String.UTF8View._foreignIndex(before:)();
        unint64_t v42 = result;
      }
      else
      {
        unint64_t v42 = (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      unint64_t v26 = 0;
      unint64_t v25 = *(void *)(v24 + 16);
      unint64_t v51 = v25 - 1;
      uint64_t v27 = 1;
    }
    if (v26 >= v25) {
      goto LABEL_95;
    }
    uint64_t v44 = v23;
    int v28 = *(unsigned __int8 *)(v24 + 32 + v26);
    swift_bridgeObjectRetain();
    unint64_t result = Substring.UTF8View.subscript.getter();
    if (v28 == result) {
      break;
    }
LABEL_26:
    uint64_t v23 = v44 + 1;
    unint64_t result = swift_bridgeObjectRelease();
    a6 = v50;
    if (v44 + 1 == v40)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  a1 = v43;
  unint64_t v29 = v42 >> 16;
  while (1)
  {
    uint64_t v30 = v51 - v26;
    if (__OFSUB__(v51, v26)) {
      break;
    }
    if (a3)
    {
      if (v30 <= 0 && v27 < v30) {
        goto LABEL_78;
      }
    }
    else if (!v30)
    {
      goto LABEL_78;
    }
    unint64_t v31 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      goto LABEL_89;
    }
    if ((a1 & 0xC) == v21)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v50, a7);
      a1 = result;
      if ((a7 & 0x1000000000000000) != 0)
      {
LABEL_69:
        unint64_t result = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
        if (v37) {
          goto LABEL_26;
        }
        a1 = result;
        if ((v31 & 0x8000000000000000) != 0) {
          goto LABEL_92;
        }
        goto LABEL_57;
      }
    }
    else if ((a7 & 0x1000000000000000) != 0)
    {
      goto LABEL_69;
    }
    unint64_t v32 = a1 >> 16;
    int64_t v33 = (a1 >> 16) + v27;
    if (a3)
    {
      if (v32 >= v29 && v33 < (uint64_t)v29) {
        goto LABEL_26;
      }
    }
    else if (v29 >= v32 && (uint64_t)v29 < v33)
    {
      goto LABEL_26;
    }
    if (v33 < 0) {
      goto LABEL_90;
    }
    if (v49 < v33) {
      goto LABEL_91;
    }
    a1 = (v33 << 16) | 4;
    if ((v31 & 0x8000000000000000) != 0) {
      goto LABEL_92;
    }
LABEL_57:
    if (v31 >= *(void *)(v24 + 16)) {
      goto LABEL_93;
    }
    int v34 = *(unsigned __int8 *)(v24 + 32 + v31);
    unint64_t result = a1;
    if ((a1 & 0xC) == v21) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v50, a7);
    }
    if (result >> 14 < v48 || result >> 14 >= v47) {
      goto LABEL_94;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
    }
    else
    {
      unint64_t v35 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v52[0] = v50;
        v52[1] = a7 & 0xFFFFFFFFFFFFFFLL;
        unint64_t result = *((unsigned __int8 *)v52 + v35);
      }
      else
      {
        uint64_t v36 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v50 & 0x1000000000000000) == 0) {
          uint64_t v36 = _StringObject.sharedUTF8.getter();
        }
        unint64_t result = *(unsigned __int8 *)(v36 + v35);
      }
    }
    v26 += v27;
    if (v34 != result) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v14 = a5 >> 14;
  unint64_t v15 = a4 >> 14;
  if (a5 >> 14 < a4 >> 14)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    swift_once();
    goto LABEL_10;
  }
  unint64_t v9 = a5;
  unint64_t v10 = a4;
  unint64_t v13 = result;
  uint64_t v8 = a8;
  unint64_t v11 = a2 >> 14;
  unint64_t v47 = a3;
  unint64_t v12 = a3 >> 14;
  if (a2 >> 14 == v15 && v12 == v14 && (result & 4) == 0)
  {
    char v16 = 0;
    BOOL v17 = 0;
    unint64_t v18 = 0;
    char v19 = 1;
    unint64_t v20 = a4;
LABEL_76:
    *(void *)uint64_t v8 = v20;
    *(unsigned char *)(v8 + 8) = v17;
    *(void *)(v8 + 16) = v9;
    *(unsigned char *)(v8 + 24) = v16;
    *(void *)(v8 + 32) = v18;
    *(unsigned char *)(v8 + 40) = v19;
    return result;
  }
  char v16 = 0;
  if (v11 < v15 || v14 < v12)
  {
    unint64_t v20 = a4;
    BOOL v17 = 0;
    unint64_t v18 = a5;
LABEL_75:
    char v19 = v16;
    goto LABEL_76;
  }
  unint64_t v50 = a7;
  unint64_t v51 = a6;
  unint64_t v49 = a5 >> 14;
  if ((result & 8) != 0)
  {
    if (one-time initialization token for lineSeparators != -1) {
      swift_once();
    }
    uint64_t v21 = &static String.lineSeparators;
    goto LABEL_15;
  }
  if (one-time initialization token for paragraphSeparators != -1) {
    goto LABEL_79;
  }
LABEL_10:
  uint64_t v21 = &static String.paragraphSeparators;
LABEL_15:
  unint64_t v48 = *v21;
  swift_bridgeObjectRetain();
  BOOL v17 = (v13 & 1) == 0;
  unint64_t v20 = ((uint64_t)(v13 << 63) >> 63) & v10;
  if ((v13 & 1) == 0 || v11 == v15) {
    goto LABEL_43;
  }
  unint64_t v20 = Substring.UTF8View.index(before:)();
  if (v11 < v49)
  {
    swift_bridgeObjectRetain();
    int v22 = Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    if (v22 == 10)
    {
      swift_bridgeObjectRetain();
      int v23 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v23 == 13)
      {
        if (v15 >= v20 >> 14)
        {
LABEL_42:
          BOOL v17 = 0;
          unint64_t v20 = v10;
          goto LABEL_43;
        }
        unint64_t v20 = Substring.UTF8View.index(before:)();
      }
    }
  }
  BOOL v17 = 0;
  unint64_t v24 = v50;
  uint64_t v25 = (v51 >> 59) & 1;
  if ((v50 & 0x1000000000000000) == 0) {
    LOBYTE(v25) = 1;
  }
  uint64_t v26 = HIBYTE(v50) & 0xF;
  if ((v50 & 0x2000000000000000) == 0) {
    uint64_t v26 = v51 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v44 = v26;
  unint64_t v27 = v20 >> 14;
  if (v20 >> 14 < v15 || v27 >= v49)
  {
LABEL_43:
    if ((v13 & 6) == 0)
    {
LABEL_52:
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v9 = 0;
      unint64_t v18 = 0;
      char v16 = 1;
      char v19 = 1;
      goto LABEL_76;
    }
    goto LABEL_44;
  }
  uint64_t v45 = 4 << v25;
  while (1)
  {
    unint64_t result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v20, 1, v10, v9, v51, v24);
    if ((v28 & 1) == 0)
    {
      unint64_t v20 = Substring.UTF8View.index(after:)();
      BOOL v17 = 0;
      if ((v13 & 6) == 0) {
        goto LABEL_52;
      }
LABEL_44:
      if (v11 != v12)
      {
        unint64_t v47 = Substring.UTF8View.index(before:)();
        unint64_t v12 = v47 >> 14;
      }
      if (v12 >= v49)
      {
LABEL_68:
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v18 = 0;
        unint64_t v35 = 0;
        char v16 = 1;
LABEL_70:
        if (v12 == v49) {
          unint64_t v9 = v47;
        }
        else {
          unint64_t v9 = v35;
        }
        if (v12 == v49)
        {
          char v16 = 0;
          unint64_t v18 = v47;
        }
        goto LABEL_75;
      }
      unint64_t v30 = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v47, 1, v10, v9, v51, v50);
      if ((v32 & 1) == 0)
      {
        unint64_t v18 = v30;
        unint64_t v9 = v31;
        unint64_t result = swift_bridgeObjectRelease();
        char v16 = 0;
        char v19 = 0;
        goto LABEL_76;
      }
      unint64_t result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v47, 0, v10, v9, v51, v50);
      if ((v34 & 1) == 0)
      {
        unint64_t v18 = result;
        unint64_t v35 = v33;
LABEL_69:
        unint64_t result = swift_bridgeObjectRelease();
        char v16 = 0;
        goto LABEL_70;
      }
      uint64_t v36 = (v51 >> 59) & 1;
      if ((v50 & 0x1000000000000000) == 0) {
        LOBYTE(v36) = 1;
      }
      uint64_t v37 = 4 << v36;
      uint64_t v38 = HIBYTE(v50) & 0xF;
      if ((v50 & 0x2000000000000000) == 0) {
        uint64_t v38 = v51 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v46 = v38;
      unint64_t v39 = v47;
      while (1)
      {
        if ((v39 & 0xC) == v37)
        {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v39, v51, v50);
          unint64_t v40 = v50;
          unint64_t v39 = result;
          if ((v50 & 0x1000000000000000) == 0)
          {
LABEL_60:
            unint64_t v39 = (v39 & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_61;
          }
        }
        else
        {
          unint64_t v40 = v50;
          if ((v50 & 0x1000000000000000) == 0) {
            goto LABEL_60;
          }
        }
        if (v46 <= v39 >> 16) {
          goto LABEL_81;
        }
        uint64_t v43 = String.UTF8View._foreignIndex(after:)();
        unint64_t v40 = v50;
        unint64_t v39 = v43;
LABEL_61:
        unint64_t v12 = v39 >> 14;
        if (v39 >> 14 >= v49)
        {
          unint64_t v47 = v39;
          goto LABEL_68;
        }
        unint64_t result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v39, 0, v10, v9, v51, v40);
        if ((v42 & 1) == 0)
        {
          unint64_t v18 = result;
          unint64_t v35 = v41;
          unint64_t v47 = v39;
          goto LABEL_69;
        }
      }
    }
    if (v15 >= v27) {
      goto LABEL_42;
    }
    if ((v20 & 0xC) == v45)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v51, v50);
      unint64_t v20 = result;
      if (result < 0x4000) {
        goto LABEL_78;
      }
    }
    else if (v20 < 0x4000)
    {
      goto LABEL_78;
    }
    unint64_t v24 = v50;
    if ((v50 & 0x1000000000000000) == 0)
    {
      unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000) - 65532;
      goto LABEL_35;
    }
    if (v44 < v20 >> 16) {
      break;
    }
    uint64_t v29 = String.UTF8View._foreignIndex(before:)();
    unint64_t v24 = v50;
    unint64_t v20 = v29;
LABEL_35:
    BOOL v17 = 0;
    unint64_t v27 = v20 >> 14;
    if (v20 >> 14 < v15 || v27 >= v49) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

BOOL specialized Range.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t specialized Range.isEmpty.getter()
{
  return static BigString.Index.== infix(_:_:)();
}

uint64_t specialized Collection.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = v3;
  unint64_t v5 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v5);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized Collection.isEmpty.getter()
{
  uint64_t v0 = BigString.Index.utf8Offset.getter();
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = BigString.Index.utf8Offset.getter();
    if ((v2 & 0x8000000000000000) == 0) {
      return ((v2 ^ v1) & 0xFFFFFFFFFFFFLL) == 0;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 72 * v6;
    outlined init with copy of AttributedString._AttributeValue(v8, a4);
  }
  else
  {
    *(void *)(a4 + 64) = 0;
    double result = 0.0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  return v5;
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  long long v7 = v3[11];
  long long v38 = v3[10];
  long long v39 = v7;
  uint64_t v40 = *((void *)v3 + 24);
  long long v8 = v3[7];
  long long v34 = v3[6];
  long long v35 = v8;
  long long v9 = v3[9];
  long long v36 = v3[8];
  long long v37 = v9;
  long long v10 = v3[3];
  long long v30 = v3[2];
  long long v31 = v10;
  long long v11 = v3[5];
  long long v32 = v3[4];
  long long v33 = v11;
  __n128 v12 = (__n128)v3[1];
  long long v28 = *v3;
  __n128 v29 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1821037E0;
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  outlined retain of AttributedString.Runs((uint64_t)&v28);
  *(void *)(v13 + 32) = v14(a1, a2);
  *(void *)(v13 + 40) = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v26, a1, a2);
  uint64_t v16 = v27;
  if (v27 == 1)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v18 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1821037E0;
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v16;
  }
  long long v19 = v39;
  *(_OWORD *)(a3 + 160) = v38;
  *(_OWORD *)(a3 + 176) = v19;
  uint64_t v20 = v40;
  long long v21 = v35;
  *(_OWORD *)(a3 + 96) = v34;
  *(_OWORD *)(a3 + 112) = v21;
  long long v22 = v37;
  *(_OWORD *)(a3 + 128) = v36;
  *(_OWORD *)(a3 + 144) = v22;
  long long v23 = v31;
  *(_OWORD *)(a3 + 32) = v30;
  *(_OWORD *)(a3 + 48) = v23;
  long long v24 = v33;
  *(_OWORD *)(a3 + 64) = v32;
  *(_OWORD *)(a3 + 80) = v24;
  __n128 result = v29;
  *(_OWORD *)a3 = v28;
  *(__n128 *)(a3 + 16) = result;
  *(void *)(a3 + 192) = v20;
  *(void *)(a3 + 200) = v13;
  *(void *)(a3 + 208) = v17;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v3 + 168);
  uint64_t v7 = *(void *)(v3 + 176);
  uint64_t v8 = *(void *)(v3 + 184);
  uint64_t v9 = *(void *)(v3 + 192);
  uint64_t v37 = *(void *)(v3 + 216);
  uint64_t v38 = *(void *)(v3 + 240);
  uint64_t v39 = *(void *)(v3 + 232);
  uint64_t v40 = *(void *)(v3 + 224);
  if (static BigString.Index.== infix(_:_:)())
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
    return v11(a2, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    uint64_t v30 = a1;
    uint64_t v31 = a2;
    uint64_t v13 = *(void *)v3;
    long long v14 = *(_OWORD *)(v3 + 88);
    long long v67 = *(_OWORD *)(v3 + 72);
    long long v68 = v14;
    long long v15 = *(_OWORD *)(v3 + 120);
    long long v69 = *(_OWORD *)(v3 + 104);
    long long v70 = v15;
    long long v16 = *(_OWORD *)(v3 + 24);
    long long v63 = *(_OWORD *)(v3 + 8);
    long long v64 = v16;
    long long v17 = *(_OWORD *)(v3 + 56);
    long long v65 = *(_OWORD *)(v3 + 40);
    long long v66 = v17;
    uint64_t v34 = *(void *)(v3 + 144);
    uint64_t v35 = *(void *)(v3 + 136);
    uint64_t v32 = *(void *)(v3 + 160);
    uint64_t v33 = *(void *)(v3 + 152);
    long long v18 = *(_OWORD *)(v3 + 88);
    long long v76 = *(_OWORD *)(v3 + 72);
    long long v77 = v18;
    long long v78 = *(_OWORD *)(v3 + 104);
    long long v79 = *(_OWORD *)(v3 + 120);
    long long v72 = *(_OWORD *)(v3 + 8);
    long long v73 = *(_OWORD *)(v3 + 24);
    long long v74 = *(_OWORD *)(v3 + 40);
    long long v75 = *(_OWORD *)(v3 + 56);
    uint64_t v71 = v13;
    uint64_t v80 = v35;
    uint64_t v81 = v34;
    uint64_t v82 = v33;
    uint64_t v83 = v32;
    uint64_t v84 = v6;
    uint64_t v85 = v7;
    uint64_t v86 = v8;
    uint64_t v87 = v9;
    uint64_t v59 = v37;
    uint64_t v60 = v40;
    uint64_t v61 = v39;
    uint64_t v62 = v38;
    AttributedString.Runs.subscript.getter(&v42);
    long long v76 = v67;
    long long v77 = v68;
    long long v78 = v69;
    long long v79 = v70;
    long long v72 = v63;
    long long v73 = v64;
    long long v74 = v65;
    long long v75 = v66;
    long long v47 = v67;
    long long v48 = v68;
    uint64_t v29 = v42;
    long long v49 = v69;
    long long v50 = v70;
    long long v43 = v63;
    long long v44 = v64;
    long long v45 = v65;
    long long v46 = v66;
    uint64_t v19 = *(void *)(v3 + 200);
    uint64_t v20 = *(void *)(v3 + 208);
    uint64_t v71 = v13;
    uint64_t v80 = v35;
    uint64_t v81 = v34;
    uint64_t v82 = v33;
    uint64_t v83 = v32;
    uint64_t v84 = v6;
    uint64_t v85 = v7;
    uint64_t v86 = v8;
    uint64_t v87 = v9;
    uint64_t v88 = v19;
    uint64_t v89 = v20;
    uint64_t v51 = v35;
    uint64_t v52 = v34;
    uint64_t v53 = v33;
    uint64_t v54 = v32;
    uint64_t v55 = v6;
    uint64_t v56 = v7;
    uint64_t v57 = v8;
    uint64_t v58 = v9;
    v41[0] = v37;
    v41[1] = v40;
    v41[2] = v39;
    v41[3] = v38;
    uint64_t v42 = v13;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v71);
    swift_retain();
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(v41, v19, v20, &v59);
    swift_release();
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v71);
    uint64_t v22 = v59;
    uint64_t v21 = v60;
    uint64_t v23 = v61;
    uint64_t v24 = v62;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v3 + 216) = v22;
      *(void *)(v3 + 224) = v21;
      *(void *)(v3 + 232) = v23;
      *(void *)(v3 + 240) = v24;
      uint64_t v36 = v24;
      uint64_t v26 = *(void *)(v30 + 16);
      uint64_t v25 = *(void *)(v30 + 24);
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
      uint64_t v27 = swift_getTupleTypeMetadata2();
      long long v28 = (uint64_t *)(v31 + *(int *)(v27 + 48));
      AttributedString._AttributeStorage.subscript.getter(v29, v26, v25, v31);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *long long v28 = v37;
      v28[1] = v40;
      v28[2] = v39;
      v28[3] = v38;
      v28[4] = v22;
      v28[5] = v21;
      v28[6] = v23;
      v28[7] = v36;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v31, 0, 1, v27);
    }
  }
  return result;
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  long long v11 = *(_OWORD *)(v5 + 176);
  v18[10] = *(_OWORD *)(v5 + 160);
  v18[11] = v11;
  uint64_t v19 = *(void *)(v5 + 192);
  long long v12 = *(_OWORD *)(v5 + 112);
  v18[6] = *(_OWORD *)(v5 + 96);
  v18[7] = v12;
  long long v13 = *(_OWORD *)(v5 + 144);
  v18[8] = *(_OWORD *)(v5 + 128);
  v18[9] = v13;
  long long v14 = *(_OWORD *)(v5 + 48);
  v18[2] = *(_OWORD *)(v5 + 32);
  v18[3] = v14;
  long long v15 = *(_OWORD *)(v5 + 80);
  v18[4] = *(_OWORD *)(v5 + 64);
  v18[5] = v15;
  long long v16 = *(_OWORD *)(v5 + 16);
  v18[0] = *(_OWORD *)v5;
  v18[1] = v16;
  outlined retain of AttributedString.Runs((uint64_t)v18);
  *(void *)&double result = AttributedString.Runs.AttributesSlice2.init(runs:)(v5, a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 176);
  long long v3 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v27[32] = *(_OWORD *)(v1 + 160);
  long long v28 = v2;
  long long v4 = *(_OWORD *)(v1 + 176);
  long long v29 = *(_OWORD *)(v1 + 192);
  long long v5 = *(_OWORD *)(v1 + 112);
  long long v7 = *(_OWORD *)(v1 + 80);
  long long v25 = *(_OWORD *)(v1 + 96);
  long long v6 = v25;
  long long v26 = v5;
  long long v8 = *(_OWORD *)(v1 + 112);
  long long v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)(v1 + 128);
  long long v10 = *(_OWORD *)v27;
  *(_OWORD *)&v27[16] = v9;
  long long v11 = *(_OWORD *)(v1 + 48);
  long long v13 = *(_OWORD *)(v1 + 16);
  long long v21 = *(_OWORD *)(v1 + 32);
  long long v12 = v21;
  long long v22 = v11;
  long long v14 = *(_OWORD *)(v1 + 48);
  long long v15 = *(_OWORD *)(v1 + 80);
  long long v23 = *(_OWORD *)(v1 + 64);
  long long v16 = v23;
  long long v24 = v15;
  long long v17 = *(_OWORD *)(v1 + 16);
  v20[0] = *(_OWORD *)v1;
  long long v18 = v20[0];
  v20[1] = v17;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)&v27[32];
  *(_OWORD *)(a1 + 176) = v4;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v30 = *(void *)(v1 + 208);
  *(void *)(a1 + 208) = *(void *)(v1 + 208);
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v27[8];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v27[24];
  return outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v20);
}

uint64_t AttributedString.Runs.AttributesSlice2.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = v2[27];
  uint64_t v5 = v2[28];
  uint64_t v7 = v2[29];
  uint64_t v8 = v2[30];
  uint64_t v9 = v2[21];
  uint64_t v10 = v2[22];
  long long v11 = (long long *)v2[24];
  uint64_t v274 = v2[23];
  uint64_t v275 = v9;
  v273 = v11;
  if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v248 = a1;
    uint64_t v249 = a2;
    uint64_t v267 = v10;
    uint64_t v15 = *v2;
    long long v16 = *(_OWORD *)(v2 + 3);
    long long v332 = *(_OWORD *)(v2 + 1);
    long long v333 = v16;
    long long v17 = *(_OWORD *)(v2 + 7);
    long long v334 = *(_OWORD *)(v2 + 5);
    long long v335 = v17;
    uint64_t v261 = v2[9];
    long long v18 = (void *)v2[10];
    v276 = (void *)v2[11];
    v277 = v18;
    uint64_t v19 = v2[12];
    v271 = (void *)v2[13];
    uint64_t v272 = v19;
    unint64_t v20 = v2[14];
    uint64_t v269 = v2[15];
    unint64_t v270 = v20;
    uint64_t v21 = v2[17];
    uint64_t v268 = v2[16];
    uint64_t v22 = v2[18];
    long long v23 = (long long *)v2[19];
    long long v24 = (long long *)v2[20];
    uint64_t v278 = v15;
    swift_retain();
    uint64_t v281 = v22;
    v282 = (uint64_t *)v21;
    v279 = v24;
    v280 = v23;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
LABEL_260:
      __break(1u);
      goto LABEL_261;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
LABEL_261:
      __break(1u);
LABEL_262:
      __break(1u);
      goto LABEL_263;
    }
    uint64_t v25 = v6;
    uint64_t v26 = v8;
    uint64_t v28 = *(void *)(v278 + 64);
    uint64_t v27 = *(void *)(v278 + 72);
    uint64_t v30 = *(void *)(v278 + 80);
    uint64_t v29 = *(void *)(v278 + 88);
    swift_unknownObjectRetain();
    uint64_t v263 = v26;
    uint64_t v264 = v25;
    uint64_t v262 = v5;
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (v28) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    if (result < 0) {
      goto LABEL_262;
    }
    uint64_t v32 = result;
    if (v31 < result) {
      goto LABEL_262;
    }
    uint64_t v265 = v7;
    v257 = v2;
    if (!v28 || result >= v30 || !*(_WORD *)(v28 + 16))
    {
      unint64_t v44 = swift_unknownObjectRetain();
      unint64_t v45 = specialized Rope._endPath.getter(v44);
      swift_unknownObjectRelease();
      uint64_t v36 = 0;
      uint64_t v32 = 0;
      uint64_t v46 = 0;
      if (!v28) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    uint64_t v259 = v30;
    uint64_t v260 = v29;
    unint64_t v266 = v27;
    uint64_t v33 = *(unsigned __int8 *)(v28 + 18);
    if (*(unsigned char *)(v28 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v34 = v28;
      while (1)
      {
        uint64_t v37 = *(unsigned __int16 *)(v34 + 16);
        if (!*(_WORD *)(v34 + 16)) {
          break;
        }
        uint64_t v38 = *(void *)(v34 + 40);
        BOOL v39 = __OFSUB__(v32, v38);
        uint64_t v40 = v32 - v38;
        if (v39) {
          goto LABEL_252;
        }
        if (__OFADD__(v40, 1)) {
          goto LABEL_253;
        }
        if (v40 + 1 < 1)
        {
          uint64_t v37 = 0;
          goto LABEL_19;
        }
        if (v37 == 1)
        {
          uint64_t v32 = v40;
          break;
        }
        unint64_t v41 = (uint64_t *)(v34 + 64);
        uint64_t v42 = 1;
        while (1)
        {
          uint64_t v43 = *v41;
          v41 += 3;
          uint64_t v32 = v40 - v43;
          if (__OFSUB__(v40, v43)) {
            goto LABEL_246;
          }
          if (__OFADD__(v32, 1))
          {
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
            goto LABEL_250;
          }
          if (v32 + 1 < 1) {
            break;
          }
          ++v42;
          uint64_t v40 = v32;
          if (v37 == v42) {
            goto LABEL_18;
          }
        }
        uint64_t v37 = v42;
        uint64_t v32 = v40;
LABEL_19:
        char v35 = (4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C;
        uint64_t v33 = ((-15 << v35) - 1) & v33 | (v37 << v35);
        uint64_t v36 = *(void *)(v34 + 24 + 24 * v37);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v34 = v36;
        if (!*(unsigned char *)(v36 + 18)) {
          goto LABEL_78;
        }
      }
LABEL_18:
      if (!v32) {
        goto LABEL_19;
      }
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
      goto LABEL_260;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v36 = v28;
LABEL_78:
    uint64_t v89 = *(unsigned __int16 *)(v36 + 16);
    if (*(_WORD *)(v36 + 16))
    {
      uint64_t v90 = *(void *)(v36 + 24);
      BOOL v39 = __OFSUB__(v32, v90);
      uint64_t v91 = v32 - v90;
      uint64_t v27 = v266;
      if (v39)
      {
LABEL_287:
        __break(1u);
        goto LABEL_288;
      }
      if (__OFADD__(v91, 1))
      {
LABEL_288:
        __break(1u);
        goto LABEL_289;
      }
      if (v91 + 1 < 1)
      {
        uint64_t v89 = 0;
      }
      else
      {
        if (v89 == 1)
        {
          uint64_t v32 = v91;
          goto LABEL_100;
        }
        unint64_t v95 = (uint64_t *)(v36 + 48);
        uint64_t v96 = 1;
        while (1)
        {
          uint64_t v97 = *v95;
          v95 += 3;
          uint64_t v32 = v91 - v97;
          if (__OFSUB__(v91, v97)) {
            goto LABEL_281;
          }
          if (__OFADD__(v32, 1)) {
            goto LABEL_282;
          }
          if (v32 + 1 < 1) {
            break;
          }
          ++v96;
          uint64_t v91 = v32;
          if (v89 == v96) {
            goto LABEL_100;
          }
        }
        uint64_t v89 = v96;
        uint64_t v32 = v91;
      }
LABEL_101:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v45 = v33 & 0xFFFFFFFFFFFFF0FFLL | (v89 << 8);
      uint64_t v29 = v260;
LABEL_34:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v29, v45, v36, v28, v27);
      swift_unknownObjectRelease_n();
      uint64_t v46 = v32;
LABEL_35:
      long long v47 = *(_OWORD *)(v278 + 16);
      long long v48 = *(_OWORD *)(v278 + 32);
      long long v356 = *(_OWORD *)(v278 + 48);
      v355[1] = v48;
      v355[0] = v47;
      long long v49 = *(_OWORD *)(v278 + 16);
      long long v50 = *(_OWORD *)(v278 + 32);
      v357[2] = v356;
      v357[1] = v50;
      v357[0] = v49;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v357, (uint64_t)v358);
      outlined retain of Locale((uint64_t)v358);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v355);
      if (__OFSUB__(0, v46))
      {
LABEL_263:
        __break(1u);
        goto LABEL_264;
      }
      BigString.UTF8View.index(_:offsetBy:)();
      uint64_t result = outlined release of Locale((uint64_t)&v336);
      if (v29 != *(void *)(v278 + 88))
      {
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
      if (v36)
      {
        uint64_t v51 = (void *)(v36 + 24 * ((v45 >> ((4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C)) & 0xF));
        uint64_t v52 = v51[4];
        unint64_t v266 = v51[3];
        uint64_t v53 = v51[5];
        swift_retain();
        uint64_t v247 = v52;
        swift_bridgeObjectRetain();
        uint64_t v246 = v53;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v54 = *(void *)(v278 + 64);
        swift_retain();
        swift_unknownObjectRetain();
        unint64_t v266 = specialized Rope._Node.subscript.getter(v45, v54);
        uint64_t v246 = v56;
        uint64_t v247 = v55;
        swift_unknownObjectRelease();
      }
      static BigString.Index.< infix(_:_:)();
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v57 = result + v266;
      if (__OFADD__(result, v266)) {
        goto LABEL_265;
      }
      uint64_t v58 = (long long *)(v278 + 16);
      uint64_t v59 = BigString.Index.utf8Offset.getter();
      if (v59 >= v57) {
        uint64_t v60 = v57;
      }
      else {
        uint64_t v60 = v59;
      }
      long long v61 = *v58;
      long long v62 = *(_OWORD *)(v278 + 32);
      long long v354 = *(_OWORD *)(v278 + 48);
      v353[1] = v62;
      v353[0] = v61;
      long long v63 = *v58;
      long long v64 = *(_OWORD *)(v278 + 32);
      v256 = (long long *)(v278 + 16);
      v359[2] = v354;
      v359[1] = v64;
      v359[0] = v63;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v359, (uint64_t)v360);
      outlined retain of Locale((uint64_t)v360);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v353);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v60, result)) {
        goto LABEL_266;
      }
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)&v337);
      char v65 = static BigString.Index.< infix(_:_:)();
      uint64_t result = swift_release();
      if (v65)
      {
LABEL_267:
        __break(1u);
        goto LABEL_268;
      }
      long long v310 = v332;
      long long v311 = v333;
      long long v312 = v334;
      unint64_t v67 = v257[25];
      uint64_t v66 = v257[26];
      long long v313 = v335;
      uint64_t v309 = v278;
      uint64_t v314 = v261;
      v315 = v277;
      v316 = v276;
      uint64_t v317 = v272;
      v318 = v271;
      unint64_t v319 = v270;
      uint64_t v320 = v269;
      uint64_t v321 = v268;
      uint64_t v322 = (uint64_t)v282;
      uint64_t v323 = v281;
      v324 = v280;
      v325 = v279;
      uint64_t v326 = v275;
      uint64_t v327 = v267;
      uint64_t v328 = v274;
      v329 = v273;
      unint64_t v266 = v67;
      unint64_t v330 = v67;
      uint64_t v245 = v66;
      uint64_t v331 = v66;
      swift_retain();
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v309);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result)
      {
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_269:
        __break(1u);
        goto LABEL_270;
      }
      uint64_t v269 = *(void *)(v266 + 16);
      if (!v269)
      {
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
        goto LABEL_272;
      }
      uint64_t v69 = *(void *)(v278 + 64);
      uint64_t v68 = *(void *)(v278 + 72);
      uint64_t v70 = *(void *)(v278 + 80);
      uint64_t v268 = *(void *)(v278 + 88);
      swift_unknownObjectRetain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (v69) {
        uint64_t v71 = v70;
      }
      else {
        uint64_t v71 = 0;
      }
      if (result < 0) {
        goto LABEL_271;
      }
      uint64_t v72 = result;
      if (v71 < result) {
        goto LABEL_271;
      }
      if (!v69 || result >= v70 || !*(_WORD *)(v69 + 16))
      {
        unint64_t v84 = swift_unknownObjectRetain();
        unint64_t v85 = specialized Rope._endPath.getter(v84);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v86 = 0;
        uint64_t v74 = 0;
        uint64_t v87 = v269;
        if (!v69)
        {
          uint64_t v88 = 0;
LABEL_110:
          uint64_t v260 = v72 - v74;
          if (__OFSUB__(v72, v74))
          {
LABEL_272:
            __break(1u);
            goto LABEL_273;
          }
          long long v101 = *v256;
          long long v102 = v256[1];
          long long v352 = v256[2];
          v351[1] = v102;
          v351[0] = v101;
          long long v103 = *v256;
          long long v104 = v256[1];
          v361[2] = v352;
          v361[1] = v104;
          v361[0] = v103;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v361, (uint64_t)v362);
          outlined retain of Locale((uint64_t)v362);
          BigString.utf8.getter();
          uint64_t result = outlined release of Locale((uint64_t)v351);
          if (__OFSUB__(0, v74))
          {
LABEL_273:
            __break(1u);
            goto LABEL_274;
          }
          uint64_t v105 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v107 = v106;
          uint64_t v243 = v108;
          uint64_t v244 = v109;
          uint64_t result = outlined release of Locale((uint64_t)&v338);
          if (v88 >= v261)
          {
LABEL_274:
            __break(1u);
            goto LABEL_275;
          }
          uint64_t v110 = v278;
          if (v268 != *(void *)(v278 + 88))
          {
LABEL_275:
            __break(1u);
            goto LABEL_276;
          }
          unint64_t v270 = v85;
          uint64_t v111 = *(void *)(v278 + 64);
          v241[1] = v107;
          v241[2] = v105;
          if (v86)
          {
            unint64_t v112 = v270;
            unint64_t v113 = v86 + 24 * ((v270 >> ((4 * *(unsigned char *)(v86 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v114 = *(void *)(v113 + 40);
            uint64_t v281 = *(void *)(v113 + 32);
            swift_bridgeObjectRetain();
            uint64_t v242 = v114;
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v115 = v268;
            uint64_t v116 = v268;
          }
          else
          {
            swift_unknownObjectRetain();
            unint64_t v112 = v270;
            specialized Rope._Node.subscript.getter(v270, v111);
            uint64_t v281 = v117;
            uint64_t v242 = v118;
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v111 = *(void *)(v278 + 64);
            uint64_t v116 = *(void *)(v278 + 88);
            uint64_t v115 = v268;
          }
          uint64_t v259 = v88 + 1;
          v282 = &v297;
          uint64_t v289 = v115;
          uint64_t v290 = v112;
          v280 = (long long *)&v343;
          v254 = (uint64_t *)(v266 + 40);
          uint64_t v291 = v86;
          uint64_t v119 = v86;
LABEL_118:
          if (v115 != v116) {
            goto LABEL_256;
          }
          uint64_t v258 = v116;
          if (v119)
          {
            unint64_t v120 = *(void *)(v119 + 24 * ((v270 >> ((4 * *(unsigned char *)(v119 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            unint64_t v120 = specialized Rope._Node.subscript.getter(v270, v111);
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (__OFADD__(v260, v120)) {
            goto LABEL_257;
          }
          uint64_t v252 = v260 + v120;
          if (v111)
          {
            unint64_t v121 = ((-15 << ((4 * *(unsigned char *)(v111 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v111 + 18) | ((unint64_t)*(unsigned __int16 *)(v111 + 16) << ((4 * *(unsigned char *)(v111 + 18) + 8) & 0x3C));
            uint64_t result = swift_unknownObjectRetain();
          }
          else
          {
            unint64_t v121 = 0;
          }
          unint64_t v122 = v270;
          if (v270 >= v121) {
            goto LABEL_258;
          }
          if (v119)
          {
            char v123 = (4 * *(unsigned char *)(v119 + 18) + 8) & 0x3C;
            unint64_t v124 = ((v270 >> v123) & 0xF) + 1;
            if (v124 < *(unsigned __int16 *)(v119 + 16))
            {
              unint64_t v125 = (v124 << v123) | ((-15 << v123) - 1) & v270;
              uint64_t result = swift_unknownObjectRelease_n();
LABEL_133:
              uint64_t v130 = v291;
LABEL_134:
              uint64_t v131 = v281;
LABEL_141:
              if (v259 == v261)
              {
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
LABEL_182:
                if (v258 == *(void *)(v110 + 88))
                {
                  if (v119)
                  {
                    unint64_t v163 = *(void *)(v119 + 24 * ((v122 >> ((4 * *(unsigned char *)(v119 + 18) + 8) & 0x3C)) & 0xF) + 24);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    uint64_t v164 = *(void *)(v278 + 64);
                    swift_unknownObjectRetain();
                    unint64_t v163 = specialized Rope._Node.subscript.getter(v122, v164);
                    swift_unknownObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  unint64_t v165 = v260 + v163;
                  if (!__OFADD__(v260, v163))
                  {
                    v166 = v256;
                    long long v167 = *v256;
                    long long v168 = v256[1];
                    long long v350 = v256[2];
                    v349[1] = v168;
                    v349[0] = v167;
                    long long v169 = *v256;
                    v363[1] = v256[1];
                    v363[2] = v350;
                    v363[0] = v169;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(v363, (uint64_t)v364);
                    outlined retain of Locale((uint64_t)v364);
                    BigString.utf8.getter();
                    outlined release of Locale((uint64_t)v349);
                    uint64_t result = BigString.Index.utf8Offset.getter();
                    if (!__OFSUB__(v165, result))
                    {
                      uint64_t v170 = BigString.UTF8View.index(_:offsetBy:)();
                      uint64_t v172 = v171;
                      uint64_t v174 = v173;
                      v176 = v175;
                      outlined release of Locale((uint64_t)&v339);
                      uint64_t v178 = v274;
                      uint64_t v177 = v275;
                      uint64_t v179 = v267;
                      v180 = v273;
                      char v181 = static BigString.Index.< infix(_:_:)();
                      if (v181) {
                        uint64_t v182 = v177;
                      }
                      else {
                        uint64_t v182 = v170;
                      }
                      if (v181) {
                        uint64_t v183 = v179;
                      }
                      else {
                        uint64_t v183 = v172;
                      }
                      if (v181) {
                        uint64_t v184 = v178;
                      }
                      else {
                        uint64_t v184 = v174;
                      }
                      uint64_t v185 = v182;
                      if (v181) {
                        v186 = v180;
                      }
                      else {
                        v186 = v176;
                      }
                      uint64_t v187 = v183;
                      uint64_t v189 = v262;
                      uint64_t v188 = v263;
                      long long v190 = *v166;
                      long long v191 = v166[1];
                      long long v348 = v166[2];
                      long long v347 = v191;
                      long long v346 = v190;
                      long long v192 = *v166;
                      long long v193 = v166[1];
                      uint64_t v194 = v184;
                      long long v284 = v193;
                      long long v285 = v348;
                      long long v283 = v192;
                      outlined init with take of any PredicateExpression<Self.Output == B1>(&v283, (uint64_t)v365);
                      outlined retain of Locale((uint64_t)v365);
                      uint64_t v196 = v264;
                      uint64_t v195 = v265;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      if ((result & 1) == 0)
                      {
                        *(void *)&long long v304 = v196;
                        *((void *)&v304 + 1) = v189;
                        *(void *)&long long v305 = v195;
                        *((void *)&v305 + 1) = v188;
                        *(void *)&long long v306 = v185;
                        *((void *)&v306 + 1) = v187;
                        *(void *)&long long v307 = v194;
                        *((void *)&v307 + 1) = v186;
                        uint64_t v197 = v245;
                        uint64_t v198 = *(void *)(v245 + 16);
                        if (v198 && (static BigString.Index.== infix(_:_:)() & 1) == 0)
                        {
                          swift_bridgeObjectRetain();
                          uint64_t v199 = 40;
                          uint64_t v200 = v198;
                          v282 = (uint64_t *)v194;
                          v280 = v186;
                          while (*(void *)(v197 + v199))
                          {
                            swift_bridgeObjectRelease();
                            v199 += 16;
                            if (!--v200)
                            {
                              swift_bridgeObjectRelease();
                              uint64_t v202 = v264;
                              uint64_t v201 = v265;
                              uint64_t v203 = v263;
                              goto LABEL_210;
                            }
                          }
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          BigString.utf8.getter();
                          BigString.UTF8View.subscript.getter();
                          outlined release of Locale((uint64_t)v340);
                          uint64_t v202 = v264;
                          uint64_t v201 = v265;
                          uint64_t v203 = v263;
                          uint64_t result = static BigString.Index.< infix(_:_:)();
                          if (result) {
                            goto LABEL_291;
                          }
                          *(void *)&long long v299 = v202;
                          *((void *)&v299 + 1) = v189;
                          *(void *)&long long v300 = v201;
                          *((void *)&v300 + 1) = v203;
                          *(void *)&long long v301 = v202;
                          *((void *)&v301 + 1) = v189;
                          *(void *)&long long v302 = v201;
                          *((void *)&v302 + 1) = v203;
                          specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)&v299, &v289);
                          outlined release of Locale((uint64_t)&v341);
                          v204 = v296;
                          if (v296 != (long long *)2)
                          {
                            uint64_t v185 = v293;
                            uint64_t v187 = v294;
                            v282 = (uint64_t *)v295;
                            uint64_t result = static BigString.Index.< infix(_:_:)();
                            v280 = v204;
                            if (result) {
                              goto LABEL_292;
                            }
                          }
LABEL_210:
                          v288[0] = v202;
                          v288[1] = v189;
                          v288[2] = v201;
                          v288[3] = v203;
                          v288[4] = v185;
                          v288[5] = v187;
                          uint64_t v194 = (uint64_t)v282;
                          v186 = v280;
                          v288[6] = v282;
                          v288[7] = v280;
                          uint64_t v205 = *(void *)(v197 + 16);
                          if (!v205) {
                            goto LABEL_214;
                          }
                          uint64_t v206 = 40;
                          while (!*(void *)(v197 + v206))
                          {
                            v206 += 16;
                            if (!--v205) {
                              goto LABEL_214;
                            }
                          }
                          uint64_t v281 = v187;
                          uint64_t v226 = v185;
                          swift_bridgeObjectRetain();
                          v227 = (unint64_t *)(v197 + 40);
                          v228 = (char *)MEMORY[0x1E4FBC860];
                          do
                          {
                            unint64_t v229 = *v227;
                            if (*v227)
                            {
                              uint64_t v230 = *(v227 - 1);
                              if ((v229 & 0x2000000000000000) != 0 ? HIBYTE(v229) & 0xF : v230 & 0xFFFFFFFFFFFFLL)
                              {
                                if ((v229 & 0x1000000000000000) != 0)
                                {
                                  int v232 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                                }
                                else
                                {
                                  if ((v229 & 0x2000000000000000) != 0)
                                  {
                                    uint64_t v289 = *(v227 - 1);
                                    uint64_t v290 = v229 & 0xFFFFFFFFFFFFFFLL;
                                    swift_bridgeObjectRetain();
                                  }
                                  else
                                  {
                                    if ((v230 & 0x1000000000000000) == 0) {
                                      _StringObject.sharedUTF8.getter();
                                    }
                                    swift_bridgeObjectRetain();
                                  }
                                  int v232 = _decodeScalar(_:startingAt:)();
                                  swift_bridgeObjectRelease();
                                }
                                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                                  v228 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v228 + 2) + 1, 1, v228);
                                }
                                unint64_t v234 = *((void *)v228 + 2);
                                unint64_t v233 = *((void *)v228 + 3);
                                if (v234 >= v233 >> 1) {
                                  v228 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v233 > 1), v234 + 1, 1, v228);
                                }
                                *((void *)v228 + 2) = v234 + 1;
                                *(_DWORD *)&v228[4 * v234 + 32] = v232;
                              }
                            }
                            v227 += 2;
                            --v198;
                          }
                          while (v198);
                          swift_bridgeObjectRelease();
                          BigString.unicodeScalars.getter();
                          BigString.UnicodeScalarView.subscript.getter();
                          outlined release of Locale((uint64_t)v345);
                          uint64_t v185 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v228);
                          uint64_t v236 = v235;
                          uint64_t v238 = v237;
                          v207 = v239;
                          swift_bridgeObjectRelease();
                          outlined release of Locale((uint64_t)&v289);
                          if (v207 == (long long *)2)
                          {
                            outlined release of Locale((uint64_t)&v346);
                            swift_release();
                            uint64_t v185 = v226;
                            uint64_t v187 = v281;
                            uint64_t v194 = (uint64_t)v282;
                            goto LABEL_215;
                          }
                          char v240 = static BigString.Index.< infix(_:_:)();
                          outlined release of Locale((uint64_t)&v346);
                          swift_release();
                          uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v309);
                          if ((v240 & 1) == 0)
                          {
                            uint64_t v187 = v236;
                            uint64_t v194 = v238;
                            goto LABEL_216;
                          }
                          goto LABEL_293;
                        }
LABEL_214:
                        outlined release of Locale((uint64_t)&v346);
                        swift_release();
LABEL_215:
                        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v309);
                        v207 = v186;
LABEL_216:
                        v208 = v257;
                        v209 = (void *)v257[27];
                        uint64_t v210 = v257[28];
                        v211 = (long long *)v257[29];
                        v280 = (long long *)v257[30];
                        uint64_t result = static BigString.Index.< infix(_:_:)();
                        if ((result & 1) == 0)
                        {
                          v208[27] = v185;
                          v208[28] = v187;
                          v208[29] = v194;
                          v208[30] = v207;
                          v277 = v209;
                          uint64_t v212 = v248;
                          uint64_t v275 = *(void *)(v248 + 32);
                          uint64_t v213 = *(void *)(v248 + 16);
                          v279 = v207;
                          v276 = (void *)v185;
                          swift_getAssociatedTypeWitness();
                          type metadata accessor for Optional();
                          v282 = (uint64_t *)v194;
                          uint64_t v214 = *(void *)(v212 + 40);
                          uint64_t v215 = *(void *)(v212 + 24);
                          swift_getAssociatedTypeWitness();
                          type metadata accessor for Optional();
                          __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
                          TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
                          uint64_t v217 = *(int *)(TupleTypeMetadata3 + 48);
                          uint64_t v281 = v187;
                          uint64_t v218 = v249;
                          uint64_t v219 = v249 + v217;
                          v220 = (void *)(v249 + *(int *)(TupleTypeMetadata3 + 64));
                          v273 = v211;
                          uint64_t v274 = v210;
                          uint64_t v221 = v247;
                          AttributedString._AttributeStorage.subscript.getter(v247, v213, v275, v249);
                          AttributedString._AttributeStorage.subscript.getter(v221, v215, v214, v219);
                          swift_release();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v222 = v274;
                          void *v220 = v277;
                          v220[1] = v222;
                          v223 = v280;
                          v220[2] = v273;
                          v220[3] = v223;
                          uint64_t v224 = v281;
                          v220[4] = v276;
                          v220[5] = v224;
                          v225 = v279;
                          v220[6] = v282;
                          v220[7] = v225;
                          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8)
                                                                                              + 56))(v218, 0, 1, TupleTypeMetadata3);
                        }
                        goto LABEL_280;
                      }
LABEL_279:
                      __break(1u);
LABEL_280:
                      __break(1u);
LABEL_281:
                      __break(1u);
LABEL_282:
                      __break(1u);
LABEL_283:
                      __break(1u);
LABEL_284:
                      __break(1u);
                      goto LABEL_285;
                    }
LABEL_278:
                    __break(1u);
                    goto LABEL_279;
                  }
LABEL_277:
                  __break(1u);
                  goto LABEL_278;
                }
LABEL_276:
                __break(1u);
                goto LABEL_277;
              }
              if (v289 != *(void *)(v110 + 88)) {
                goto LABEL_259;
              }
              uint64_t v268 = v289;
              uint64_t v253 = v119;
              uint64_t v250 = v130;
              unint64_t v251 = v125;
              if (v130)
              {
                unint64_t v135 = v130 + 24 * ((v125 >> ((4 * *(unsigned char *)(v130 + 18) + 8) & 0x3C)) & 0xF);
                long long v137 = *(long long **)(v135 + 32);
                uint64_t v136 = *(void *)(v135 + 40);
                swift_bridgeObjectRetain();
                uint64_t v255 = v136;
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v138 = *(void *)(v110 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v125, v138);
                long long v137 = v139;
                uint64_t v255 = v140;
                uint64_t v131 = v281;
                swift_unknownObjectRelease();
              }
              uint64_t result = swift_bridgeObjectRetain();
              uint64_t v141 = 0;
              unsigned int v142 = v254;
              v279 = v137;
              while (1)
              {
                uint64_t v144 = v141 + 1;
                if (__OFADD__(v141, 1))
                {
                  __break(1u);
LABEL_246:
                  __break(1u);
                  goto LABEL_247;
                }
                uint64_t v145 = *(v142 - 1);
                uint64_t v146 = *v142;
                if (*(void *)(v131 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v147 = specialized __RawDictionaryStorage.find<A>(_:)(v145, v146);
                  if (v148)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(void *)(v131 + 56) + 72 * v147, (uint64_t)&v304);
                  }
                  else
                  {
                    uint64_t v308 = 0;
                    long long v306 = 0u;
                    long long v307 = 0u;
                    long long v304 = 0u;
                    long long v305 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (!*((void *)v137 + 2))
                  {
LABEL_156:
                    uint64_t v303 = 0;
                    long long v301 = 0u;
                    long long v302 = 0u;
                    long long v299 = 0u;
                    long long v300 = 0u;
                    goto LABEL_163;
                  }
                }
                else
                {
                  uint64_t v308 = 0;
                  long long v306 = 0u;
                  long long v307 = 0u;
                  long long v304 = 0u;
                  long long v305 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*((void *)v137 + 2)) {
                    goto LABEL_156;
                  }
                }
                swift_bridgeObjectRetain();
                unint64_t v149 = specialized __RawDictionaryStorage.find<A>(_:)(v145, v146);
                if (v150)
                {
                  outlined init with copy of AttributedString._AttributeValue(*((void *)v137 + 7) + 72 * v149, (uint64_t)&v299);
                }
                else
                {
                  uint64_t v303 = 0;
                  long long v301 = 0u;
                  long long v302 = 0u;
                  long long v299 = 0u;
                  long long v300 = 0u;
                }
                swift_bridgeObjectRelease();
                uint64_t v131 = v281;
LABEL_163:
                swift_bridgeObjectRelease();
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v304, (uint64_t)&v289, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v299, (uint64_t)v282, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v292)
                {
                  if (v298) {
                    goto LABEL_180;
                  }
                  outlined destroy of Any?((uint64_t)&v289, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v299, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t result = outlined destroy of Any?((uint64_t)&v304, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_150;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v289, (uint64_t)v288, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v298) {
                  goto LABEL_179;
                }
                long long v151 = *((_OWORD *)v282 + 3);
                long long v285 = *((_OWORD *)v282 + 2);
                long long v286 = v151;
                uint64_t v287 = v282[8];
                long long v152 = *((_OWORD *)v282 + 1);
                long long v283 = *(_OWORD *)v282;
                long long v284 = v152;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v288, (uint64_t)v363);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v283, (uint64_t)v349);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v363, (uint64_t)&v341, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v349, (uint64_t)v280, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v342)
                {
                  if (!v344)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v341);
LABEL_148:
                    char v143 = 0;
                    goto LABEL_149;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v341, (uint64_t)&v346);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v280, (uint64_t)v345);
                  uint64_t v153 = *((void *)&v347 + 1);
                  uint64_t v272 = v348;
                  v271 = __swift_project_boxed_opaque_existential_1(&v346, *((uint64_t *)&v347 + 1));
                  v277 = v241;
                  uint64_t v154 = *(void *)(v153 - 8);
                  MEMORY[0x1F4188790](v271);
                  uint64_t v156 = (char *)v241 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v345, (uint64_t)v340);
                  uint64_t v157 = type metadata accessor for Optional();
                  v276 = v241;
                  uint64_t v158 = *(void *)(v157 - 8);
                  MEMORY[0x1F4188790](v157);
                  int v160 = (char *)v241 - v159;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  int v161 = swift_dynamicCast();
                  v162 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v154 + 56);
                  if (v161)
                  {
                    v162(v160, 0, 1, v153);
                    (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v156, v160, v153);
                    char v143 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v154 + 8))(v156, v153);
                  }
                  else
                  {
                    v162(v160, 1, 1, v153);
                    (*(void (**)(char *, uint64_t))(v158 + 8))(v160, v157);
                    char v143 = 0;
                  }
                  uint64_t v87 = v269;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v345);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v346);
                  uint64_t v131 = v281;
                }
                else
                {
                  if (v344)
                  {
                    outlined destroy of Any?((uint64_t)v280, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_148;
                  }
                  char v143 = 1;
                }
LABEL_149:
                outlined destroy of Any?((uint64_t)v349, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v363, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v283);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v288);
                outlined destroy of Any?((uint64_t)&v289, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v299, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t result = outlined destroy of Any?((uint64_t)&v304, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                long long v137 = v279;
                if ((v143 & 1) == 0) {
                  goto LABEL_181;
                }
LABEL_150:
                v142 += 2;
                ++v141;
                if (v144 == v87)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v110 = v278;
                  uint64_t v111 = *(void *)(v278 + 64);
                  uint64_t v116 = *(void *)(v278 + 88);
                  uint64_t v260 = v252;
                  uint64_t v115 = v268;
                  uint64_t v289 = v268;
                  uint64_t v290 = v251;
                  uint64_t v119 = v250;
                  unint64_t v270 = v251;
                  uint64_t v291 = v250;
                  BOOL v39 = __OFADD__(v259++, 1);
                  if (!v39) {
                    goto LABEL_118;
                  }
                  __break(1u);
LABEL_179:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v288);
LABEL_180:
                  outlined destroy of Any?((uint64_t)&v289, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v299, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v304, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_181:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v110 = v278;
                  uint64_t v119 = v253;
                  unint64_t v122 = v270;
                  goto LABEL_182;
                }
              }
            }
          }
          int v126 = *(unsigned __int8 *)(v111 + 18);
          char v127 = (4 * v126 + 8) & 0x3C;
          unint64_t v128 = (v270 >> v127) & 0xF;
          *(void *)&long long v341 = v128;
          if (v126)
          {
            swift_unknownObjectRetain();
            char v129 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v111 + 24, (uint64_t *)&v341, (uint64_t)&v289, v111, v126);
            uint64_t result = swift_unknownObjectRelease();
            if (v129)
            {
              uint64_t result = swift_unknownObjectRelease_n();
              unint64_t v125 = v290;
              goto LABEL_133;
            }
          }
          else
          {
            unint64_t v132 = v128 + 1;
            if (v128 + 1 < *(unsigned __int16 *)(v111 + 16))
            {
              uint64_t result = swift_unknownObjectRelease_n();
              unint64_t v125 = (v132 << v127) | ((-15 << v127) - 1) & v122;
              uint64_t v130 = v111;
              goto LABEL_134;
            }
          }
          if (v111)
          {
            int v133 = *(unsigned __int8 *)(v111 + 18);
            uint64_t v134 = *(unsigned __int16 *)(v111 + 16);
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v125 = ((-15 << ((4 * v133 + 8) & 0x3C)) - 1) & v133 | (unint64_t)(v134 << ((4 * v133 + 8) & 0x3C));
          }
          else
          {
            unint64_t v125 = 0;
          }
          uint64_t v131 = v281;
          uint64_t v130 = 0;
          uint64_t v289 = v258;
          goto LABEL_141;
        }
LABEL_76:
        swift_unknownObjectRetain();
        uint64_t v88 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v268, v85, v86, v69, v68);
        uint64_t result = swift_unknownObjectRelease_n();
        goto LABEL_110;
      }
      v282 = (uint64_t *)v68;
      uint64_t v73 = *(unsigned __int8 *)(v69 + 18);
      if (*(unsigned char *)(v69 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v74 = v72;
        uint64_t v75 = v69;
        while (1)
        {
          uint64_t v78 = *(unsigned __int16 *)(v75 + 16);
          if (!*(_WORD *)(v75 + 16)) {
            goto LABEL_60;
          }
          uint64_t v79 = *(void *)(v75 + 40);
          BOOL v39 = __OFSUB__(v74, v79);
          uint64_t v80 = v74 - v79;
          if (v39) {
            goto LABEL_254;
          }
          if (__OFADD__(v80, 1)) {
            goto LABEL_255;
          }
          if (v80 + 1 < 1)
          {
            uint64_t v78 = 0;
          }
          else
          {
            if (v78 == 1)
            {
              uint64_t v74 = v80;
LABEL_60:
              if (v74) {
                goto LABEL_251;
              }
              goto LABEL_61;
            }
            uint64_t v81 = (uint64_t *)(v75 + 64);
            uint64_t v82 = 1;
            while (1)
            {
              uint64_t v83 = *v81;
              v81 += 3;
              uint64_t v74 = v80 - v83;
              if (__OFSUB__(v80, v83)) {
                goto LABEL_248;
              }
              if (__OFADD__(v74, 1)) {
                goto LABEL_249;
              }
              if (v74 + 1 < 1) {
                break;
              }
              ++v82;
              uint64_t v80 = v74;
              if (v78 == v82) {
                goto LABEL_60;
              }
            }
            uint64_t v78 = v82;
            uint64_t v74 = v80;
          }
LABEL_61:
          char v76 = (4 * *(unsigned char *)(v75 + 18) + 8) & 0x3C;
          uint64_t v73 = ((-15 << v76) - 1) & v73 | (v78 << v76);
          uint64_t v77 = *(void *)(v75 + 24 + 24 * v78);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v75 = v77;
          if (!*(unsigned char *)(v77 + 18)) {
            goto LABEL_85;
          }
        }
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v74 = v72;
      uint64_t v77 = v69;
LABEL_85:
      uint64_t v92 = *(unsigned __int16 *)(v77 + 16);
      if (*(_WORD *)(v77 + 16))
      {
        uint64_t v93 = *(void *)(v77 + 24);
        BOOL v39 = __OFSUB__(v74, v93);
        uint64_t v94 = v74 - v93;
        uint64_t v87 = v269;
        if (v39)
        {
LABEL_289:
          __break(1u);
          goto LABEL_290;
        }
        if (__OFADD__(v94, 1))
        {
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
          return result;
        }
        uint64_t v86 = v77;
        if (v94 + 1 < 1)
        {
          uint64_t v92 = 0;
        }
        else
        {
          if (v92 == 1)
          {
            uint64_t v74 = v94;
            goto LABEL_107;
          }
          uint64_t v98 = (uint64_t *)(v77 + 48);
          uint64_t v99 = 1;
          while (1)
          {
            uint64_t v100 = *v98;
            v98 += 3;
            uint64_t v74 = v94 - v100;
            if (__OFSUB__(v94, v100)) {
              goto LABEL_283;
            }
            if (__OFADD__(v74, 1)) {
              goto LABEL_284;
            }
            if (v74 + 1 < 1) {
              break;
            }
            ++v99;
            uint64_t v94 = v74;
            if (v92 == v99) {
              goto LABEL_107;
            }
          }
          uint64_t v92 = v99;
          uint64_t v74 = v94;
        }
LABEL_108:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v85 = v73 & 0xFFFFFFFFFFFFF0FFLL | (v92 << 8);
        uint64_t v68 = (uint64_t)v282;
        goto LABEL_76;
      }
      uint64_t v86 = v77;
      uint64_t v87 = v269;
LABEL_107:
      if (v74)
      {
LABEL_286:
        __break(1u);
        goto LABEL_287;
      }
      goto LABEL_108;
    }
    uint64_t v27 = v266;
LABEL_100:
    if (v32)
    {
LABEL_285:
      __break(1u);
      goto LABEL_286;
    }
    goto LABEL_101;
  }
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v12 = swift_getTupleTypeMetadata3();
  long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);

  return v13(a2, 1, 1, v12);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  long long v14 = *(_OWORD *)(v7 + 176);
  v21[10] = *(_OWORD *)(v7 + 160);
  v21[11] = v14;
  uint64_t v22 = *(void *)(v7 + 192);
  long long v15 = *(_OWORD *)(v7 + 112);
  v21[6] = *(_OWORD *)(v7 + 96);
  v21[7] = v15;
  long long v16 = *(_OWORD *)(v7 + 144);
  v21[8] = *(_OWORD *)(v7 + 128);
  v21[9] = v16;
  long long v17 = *(_OWORD *)(v7 + 48);
  v21[2] = *(_OWORD *)(v7 + 32);
  v21[3] = v17;
  long long v18 = *(_OWORD *)(v7 + 80);
  v21[4] = *(_OWORD *)(v7 + 64);
  v21[5] = v18;
  long long v19 = *(_OWORD *)(v7 + 16);
  v21[0] = *(_OWORD *)v7;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v21);
  *(void *)&double result = AttributedString.Runs.AttributesSlice3.init(runs:)(v7, a1, a2, a3, a4, a5, a7, a6).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice3.Iterator.next()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 216);
  uint64_t v6 = *(void *)(v2 + 224);
  uint64_t v7 = *(void *)(v2 + 232);
  uint64_t v8 = *(void *)(v2 + 240);
  uint64_t v10 = *(void *)(v2 + 168);
  uint64_t v9 = *(void *)(v2 + 176);
  long long v11 = *(uint64_t **)(v2 + 192);
  uint64_t v294 = *(uint64_t **)(v2 + 184);
  uint64_t v295 = v9;
  if (static BigString.Index.== infix(_:_:)())
  {
    swift_getAssociatedTypeWitness();
    uint64_t v329 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&long long v330 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v330 + 1) = type metadata accessor for Optional();
    *(void *)&long long v331 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(a2, 1, 1, TupleTypeMetadata);
  }
  v277 = a1;
  uint64_t v289 = v10;
  uint64_t v14 = *(void *)v2;
  long long v15 = *(_OWORD *)(v2 + 24);
  long long v352 = *(_OWORD *)(v2 + 8);
  long long v353 = v15;
  long long v16 = *(_OWORD *)(v2 + 56);
  long long v354 = *(_OWORD *)(v2 + 40);
  long long v355 = v16;
  uint64_t v17 = *(void *)(v2 + 72);
  uint64_t v281 = a2;
  uint64_t v282 = v17;
  uint64_t v298 = *(uint64_t **)(v2 + 80);
  long long v18 = *(uint64_t **)(v2 + 88);
  uint64_t v296 = v8;
  uint64_t v297 = v18;
  uint64_t v19 = *(void *)(v2 + 96);
  uint64_t v292 = *(void **)(v2 + 104);
  uint64_t v293 = v19;
  uint64_t v20 = *(void *)(v2 + 112);
  uint64_t v290 = *(void *)(v2 + 120);
  uint64_t v291 = v20;
  uint64_t v21 = *(void *)(v2 + 136);
  uint64_t v288 = *(void *)(v2 + 128);
  uint64_t v22 = *(void *)(v2 + 144);
  long long v23 = *(long long **)(v2 + 152);
  long long v24 = *(uint64_t **)(v2 + 160);
  uint64_t v300 = v14;
  swift_retain();
  *(void *)&long long v302 = v22;
  *((void *)&v302 + 1) = v21;
  long long v301 = v23;
  long long v299 = v24;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_284;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
    goto LABEL_287;
  }
  long long v285 = v11;
  uint64_t v275 = (void *)v2;
  uint64_t v25 = v300;
  uint64_t v26 = *(void *)(v300 + 64);
  uint64_t v27 = *(void *)(v300 + 72);
  uint64_t v29 = *(void *)(v300 + 80);
  uint64_t v28 = *(void *)(v300 + 88);
  swift_unknownObjectRetain();
  uint64_t v286 = v7;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v26) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  if (result < 0) {
    goto LABEL_286;
  }
  uint64_t v31 = result;
  if (v30 < result) {
    goto LABEL_286;
  }
  uint64_t v283 = v6;
  uint64_t v284 = v5;
  if (!v26 || result >= v29 || !*(_WORD *)(v26 + 16))
  {
    unint64_t v43 = swift_unknownObjectRetain();
    unint64_t v44 = specialized Rope._endPath.getter(v43);
    swift_unknownObjectRelease();
    uint64_t v35 = 0;
    uint64_t v31 = 0;
    uint64_t v45 = 0;
    if (!v26) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v287 = v28;
  uint64_t v32 = *(unsigned __int8 *)(v26 + 18);
  if (*(unsigned char *)(v26 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v33 = v26;
    while (1)
    {
      uint64_t v36 = *(unsigned __int16 *)(v33 + 16);
      if (!*(_WORD *)(v33 + 16)) {
        goto LABEL_16;
      }
      uint64_t v37 = *(void *)(v33 + 40);
      BOOL v38 = __OFSUB__(v31, v37);
      uint64_t v39 = v31 - v37;
      if (v38) {
        goto LABEL_276;
      }
      if (__OFADD__(v39, 1)) {
        goto LABEL_277;
      }
      if (v39 + 1 < 1)
      {
        uint64_t v36 = 0;
      }
      else
      {
        if (v36 == 1)
        {
          uint64_t v31 = v39;
LABEL_16:
          if (v31) {
            goto LABEL_274;
          }
          goto LABEL_17;
        }
        uint64_t v40 = (uint64_t *)(v33 + 64);
        uint64_t v41 = 1;
        while (1)
        {
          uint64_t v42 = *v40;
          v40 += 3;
          uint64_t v31 = v39 - v42;
          if (__OFSUB__(v39, v42)) {
            goto LABEL_270;
          }
          if (__OFADD__(v31, 1)) {
            goto LABEL_271;
          }
          if (v31 + 1 < 1) {
            break;
          }
          ++v41;
          uint64_t v39 = v31;
          if (v36 == v41) {
            goto LABEL_16;
          }
        }
        uint64_t v36 = v41;
        uint64_t v31 = v39;
      }
LABEL_17:
      char v34 = (4 * *(unsigned char *)(v33 + 18) + 8) & 0x3C;
      uint64_t v32 = ((-15 << v34) - 1) & v32 | (v36 << v34);
      uint64_t v35 = *(void *)(v33 + 24 + 24 * v36);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v33 = v35;
      if (!*(unsigned char *)(v35 + 18)) {
        goto LABEL_79;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v35 = v26;
LABEL_79:
  uint64_t v91 = *(unsigned __int16 *)(v35 + 16);
  if (!*(_WORD *)(v35 + 16))
  {
    uint64_t v25 = v300;
LABEL_101:
    if (v31)
    {
LABEL_309:
      __break(1u);
      goto LABEL_310;
    }
    goto LABEL_102;
  }
  uint64_t v92 = *(void *)(v35 + 24);
  BOOL v38 = __OFSUB__(v31, v92);
  uint64_t v93 = v31 - v92;
  uint64_t v25 = v300;
  if (v38)
  {
LABEL_311:
    __break(1u);
    goto LABEL_312;
  }
  if (__OFADD__(v93, 1))
  {
LABEL_312:
    __break(1u);
    goto LABEL_313;
  }
  if (v93 + 1 < 1)
  {
    uint64_t v91 = 0;
  }
  else
  {
    if (v91 == 1)
    {
      uint64_t v31 = v93;
      goto LABEL_101;
    }
    uint64_t v97 = (uint64_t *)(v35 + 48);
    uint64_t v98 = 1;
    while (1)
    {
      uint64_t v99 = *v97;
      v97 += 3;
      uint64_t v31 = v93 - v99;
      if (__OFSUB__(v93, v99)) {
        goto LABEL_305;
      }
      if (__OFADD__(v31, 1)) {
        goto LABEL_306;
      }
      if (v31 + 1 < 1) {
        break;
      }
      ++v98;
      uint64_t v93 = v31;
      if (v91 == v98) {
        goto LABEL_101;
      }
    }
    uint64_t v91 = v98;
    uint64_t v31 = v93;
  }
LABEL_102:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v44 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v91 << 8);
  uint64_t v28 = v287;
LABEL_32:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v28, v44, v35, v26, v27);
  swift_unknownObjectRelease_n();
  uint64_t v45 = v31;
LABEL_33:
  long long v46 = *(_OWORD *)(v25 + 16);
  long long v47 = *(_OWORD *)(v25 + 32);
  long long v376 = *(_OWORD *)(v25 + 48);
  v375[1] = v47;
  v375[0] = v46;
  long long v48 = *(_OWORD *)(v25 + 16);
  long long v49 = *(_OWORD *)(v25 + 32);
  v377[2] = v376;
  v377[1] = v49;
  v377[0] = v48;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v377, (uint64_t)v378);
  outlined retain of Locale((uint64_t)v378);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v375);
  if (__OFSUB__(0, v45))
  {
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  uint64_t v50 = BigString.UTF8View.index(_:offsetBy:)();
  unint64_t v52 = v51;
  uint64_t result = outlined release of Locale((uint64_t)&v356);
  if (v28 != *(void *)(v25 + 88))
  {
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  unint64_t v287 = v52;
  if (v35)
  {
    uint64_t v53 = (void *)(v35 + 24 * ((v44 >> ((4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v54 = v53[4];
    unint64_t v279 = v53[3];
    uint64_t v55 = v53[5];
    swift_retain();
    uint64_t v280 = v54;
    swift_bridgeObjectRetain();
    uint64_t v266 = v55;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v56 = *(void *)(v25 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v279 = specialized Rope._Node.subscript.getter(v44, v56);
    uint64_t v280 = v57;
    uint64_t v266 = v58;
    swift_unknownObjectRelease();
  }
  if (static BigString.Index.< infix(_:_:)()) {
    uint64_t v59 = v50;
  }
  else {
    uint64_t v59 = *((void *)&v302 + 1);
  }
  uint64_t v278 = v59;
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v60 = result + v279;
  if (__OFADD__(result, v279)) {
    goto LABEL_289;
  }
  long long v61 = (long long *)(v300 + 16);
  uint64_t v62 = BigString.Index.utf8Offset.getter();
  if (v62 >= v60) {
    uint64_t v63 = v60;
  }
  else {
    uint64_t v63 = v62;
  }
  long long v64 = *v61;
  long long v65 = *(_OWORD *)(v300 + 32);
  long long v374 = *(_OWORD *)(v300 + 48);
  v373[1] = v65;
  v373[0] = v64;
  long long v66 = *v61;
  long long v67 = *(_OWORD *)(v300 + 32);
  v273 = (long long *)(v300 + 16);
  v379[2] = v374;
  v379[1] = v67;
  v379[0] = v66;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v379, (uint64_t)v380);
  outlined retain of Locale((uint64_t)v380);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v373);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v63, result)) {
    goto LABEL_290;
  }
  BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v357);
  char v68 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v68)
  {
LABEL_291:
    __break(1u);
    goto LABEL_292;
  }
  long long v330 = v352;
  long long v331 = v353;
  long long v332 = v354;
  uint64_t v70 = v275[25];
  uint64_t v69 = v275[26];
  long long v333 = v355;
  uint64_t v329 = v300;
  uint64_t v334 = v282;
  long long v335 = v298;
  uint64_t v336 = v297;
  uint64_t v337 = v293;
  uint64_t v338 = v292;
  uint64_t v339 = v291;
  uint64_t v340 = v290;
  uint64_t v341 = v288;
  uint64_t v342 = *((void *)&v302 + 1);
  uint64_t v343 = v302;
  uint64_t v344 = v301;
  v345 = v299;
  uint64_t v346 = v289;
  uint64_t v347 = v295;
  long long v348 = v294;
  v349 = v285;
  uint64_t v288 = v70;
  uint64_t v350 = v70;
  uint64_t v270 = v69;
  uint64_t v351 = v69;
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v329);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_293:
    __break(1u);
    goto LABEL_294;
  }
  uint64_t v291 = *(void *)(v288 + 16);
  if (!v291)
  {
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
    goto LABEL_296;
  }
  uint64_t v71 = *(void *)(v300 + 64);
  uint64_t v72 = *(void *)(v300 + 72);
  uint64_t v73 = *(void *)(v300 + 80);
  uint64_t v290 = *(void *)(v300 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v71) {
    uint64_t v74 = v73;
  }
  else {
    uint64_t v74 = 0;
  }
  if (result < 0) {
    goto LABEL_295;
  }
  uint64_t v75 = result;
  if (v74 < result) {
    goto LABEL_295;
  }
  if (v71 && result < v73 && *(_WORD *)(v71 + 16))
  {
    *((void *)&v302 + 1) = v72;
    uint64_t v76 = *(unsigned __int8 *)(v71 + 18);
    if (*(unsigned char *)(v71 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v77 = v75;
      uint64_t v78 = v71;
      while (1)
      {
        uint64_t v81 = *(unsigned __int16 *)(v78 + 16);
        if (!*(_WORD *)(v78 + 16)) {
          goto LABEL_61;
        }
        uint64_t v82 = *(void *)(v78 + 40);
        BOOL v38 = __OFSUB__(v77, v82);
        uint64_t v83 = v77 - v82;
        if (v38) {
          goto LABEL_278;
        }
        if (__OFADD__(v83, 1)) {
          goto LABEL_279;
        }
        if (v83 + 1 < 1)
        {
          uint64_t v81 = 0;
        }
        else
        {
          if (v81 == 1)
          {
            uint64_t v77 = v83;
LABEL_61:
            if (v77) {
              goto LABEL_275;
            }
            goto LABEL_62;
          }
          unint64_t v84 = (uint64_t *)(v78 + 64);
          uint64_t v85 = 1;
          while (1)
          {
            uint64_t v86 = *v84;
            v84 += 3;
            uint64_t v77 = v83 - v86;
            if (__OFSUB__(v83, v86)) {
              goto LABEL_272;
            }
            if (__OFADD__(v77, 1)) {
              goto LABEL_273;
            }
            if (v77 + 1 < 1) {
              break;
            }
            ++v85;
            uint64_t v83 = v77;
            if (v81 == v85) {
              goto LABEL_61;
            }
          }
          uint64_t v81 = v85;
          uint64_t v77 = v83;
        }
LABEL_62:
        char v79 = (4 * *(unsigned char *)(v78 + 18) + 8) & 0x3C;
        uint64_t v76 = ((-15 << v79) - 1) & v76 | (v81 << v79);
        uint64_t v80 = *(void *)(v78 + 24 + 24 * v81);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v78 = v80;
        if (!*(unsigned char *)(v80 + 18)) {
          goto LABEL_86;
        }
      }
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v77 = v75;
    uint64_t v80 = v71;
LABEL_86:
    uint64_t v94 = *(unsigned __int16 *)(v80 + 16);
    if (*(_WORD *)(v80 + 16))
    {
      uint64_t v95 = *(void *)(v80 + 24);
      BOOL v38 = __OFSUB__(v77, v95);
      uint64_t v96 = v77 - v95;
      uint64_t v89 = v291;
      if (v38)
      {
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
        goto LABEL_316;
      }
      if (__OFADD__(v96, 1)) {
        goto LABEL_314;
      }
      if (v96 + 1 < 1)
      {
        uint64_t v94 = 0;
      }
      else
      {
        if (v94 == 1)
        {
          uint64_t v77 = v96;
          goto LABEL_108;
        }
        uint64_t v100 = (uint64_t *)(v80 + 48);
        uint64_t v101 = 1;
        while (1)
        {
          uint64_t v102 = *v100;
          v100 += 3;
          uint64_t v77 = v96 - v102;
          if (__OFSUB__(v96, v102)) {
            goto LABEL_307;
          }
          if (__OFADD__(v77, 1)) {
            goto LABEL_308;
          }
          if (v77 + 1 < 1) {
            break;
          }
          ++v101;
          uint64_t v96 = v77;
          if (v94 == v101) {
            goto LABEL_108;
          }
        }
        uint64_t v94 = v101;
        uint64_t v77 = v96;
      }
LABEL_109:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v88 = v80;
      unint64_t v287 = v76 & 0xFFFFFFFFFFFFF0FFLL | (v94 << 8);
      uint64_t v72 = *((void *)&v302 + 1);
      goto LABEL_77;
    }
    uint64_t v89 = v291;
LABEL_108:
    if (v77)
    {
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }
    goto LABEL_109;
  }
  unint64_t v87 = swift_unknownObjectRetain();
  unint64_t v287 = specialized Rope._endPath.getter(v87);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v88 = 0;
  uint64_t v77 = 0;
  uint64_t v89 = v291;
  if (v71)
  {
LABEL_77:
    swift_unknownObjectRetain();
    uint64_t v90 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v290, v287, v88, v71, v72);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_111;
  }
  uint64_t v90 = 0;
LABEL_111:
  unint64_t v279 = v75 - v77;
  if (__OFSUB__(v75, v77))
  {
LABEL_296:
    __break(1u);
    goto LABEL_297;
  }
  long long v103 = *v273;
  long long v104 = v273[1];
  long long v372 = v273[2];
  v371[1] = v104;
  v371[0] = v103;
  long long v105 = *v273;
  long long v106 = v273[1];
  v381[2] = v372;
  v381[1] = v106;
  v381[0] = v105;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v381, (uint64_t)v382);
  outlined retain of Locale((uint64_t)v382);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v371);
  if (__OFSUB__(0, v77))
  {
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }
  uint64_t v107 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v264 = v109;
  uint64_t v265 = v108;
  uint64_t v263 = v110;
  uint64_t result = outlined release of Locale((uint64_t)&v358);
  if (v90 >= v282)
  {
LABEL_298:
    __break(1u);
    goto LABEL_299;
  }
  uint64_t v262 = v107;
  uint64_t v111 = v300;
  if (v290 != *(void *)(v300 + 88))
  {
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
    goto LABEL_302;
  }
  unint64_t v112 = *(uint64_t **)(v300 + 64);
  if (v88)
  {
    unint64_t v113 = v287;
    unint64_t v114 = v88 + 24 * ((v287 >> ((4 * *(unsigned char *)(v88 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v115 = v90;
    uint64_t v116 = *(void *)(v114 + 40);
    uint64_t v297 = *(uint64_t **)(v114 + 32);
    swift_bridgeObjectRetain();
    uint64_t v261 = v116;
    uint64_t v90 = v115;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v117 = v290;
    uint64_t v118 = v290;
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v113 = v287;
    specialized Rope._Node.subscript.getter(v287, (uint64_t)v112);
    uint64_t v297 = v119;
    uint64_t v261 = v120;
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v112 = *(uint64_t **)(v300 + 64);
    uint64_t v118 = *(void *)(v300 + 88);
    uint64_t v117 = v290;
  }
  uint64_t v276 = v90 + 1;
  uint64_t v310 = v117;
  uint64_t v311 = v113;
  long long v301 = (long long *)&v363;
  *(void *)&long long v302 = &v317;
  v271 = (uint64_t *)(v288 + 40);
  long long v312 = (uint64_t *)v88;
  uint64_t v121 = v88;
  while (2)
  {
    if (v117 != v118) {
      goto LABEL_280;
    }
    uint64_t v274 = v118;
    uint64_t v278 = v121;
    if (v121)
    {
      unint64_t v122 = v287;
      unint64_t v123 = *(void *)(v121 + 24 * ((v287 >> ((4 * *(unsigned char *)(v121 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v122 = v287;
      unint64_t v123 = specialized Rope._Node.subscript.getter(v287, (uint64_t)v112);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v279, v123)) {
      goto LABEL_281;
    }
    unint64_t v269 = v279 + v123;
    if (v112)
    {
      unint64_t v124 = ((-15 << ((4 * *((unsigned char *)v112 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v112 + 18) | ((unint64_t)*((unsigned __int16 *)v112 + 8) << ((4 * *((unsigned char *)v112 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v124 = 0;
    }
    unint64_t v125 = v297;
    if (v122 >= v124) {
      goto LABEL_282;
    }
    if (!v278
      || (char v126 = (4 * *(unsigned char *)(v278 + 18) + 8) & 0x3C,
          unint64_t v127 = ((v122 >> v126) & 0xF) + 1,
          v127 >= *(unsigned __int16 *)(v278 + 16)))
    {
      int v129 = *((unsigned __int8 *)v112 + 18);
      char v130 = (4 * v129 + 8) & 0x3C;
      uint64_t v131 = (v122 >> v130) & 0xF;
      *(void *)&long long v361 = v131;
      if (v129)
      {
        swift_unknownObjectRetain();
        char v132 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v112 + 3), (uint64_t *)&v361, (uint64_t)&v310, (uint64_t)v112, v129);
        uint64_t result = swift_unknownObjectRelease();
        if (v132)
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v128 = v311;
          unint64_t v125 = v297;
          goto LABEL_134;
        }
      }
      else
      {
        uint64_t v133 = v131 + 1;
        if (v131 + 1 < (unint64_t)*((unsigned __int16 *)v112 + 8))
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v128 = (v133 << v130) | ((-15 << v130) - 1) & v122;
LABEL_141:
          unint64_t v125 = v297;
          goto LABEL_142;
        }
      }
      if (v112)
      {
        int v134 = *((unsigned __int8 *)v112 + 18);
        uint64_t v135 = *((unsigned __int16 *)v112 + 8);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v128 = ((-15 << ((4 * v134 + 8) & 0x3C)) - 1) & v134 | (unint64_t)(v135 << ((4 * v134 + 8) & 0x3C));
      }
      else
      {
        unint64_t v128 = 0;
      }
      unint64_t v112 = 0;
      uint64_t v310 = v274;
      goto LABEL_141;
    }
    unint64_t v128 = (v127 << v126) | ((-15 << v126) - 1) & v122;
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_134:
    unint64_t v112 = v312;
LABEL_142:
    if (v276 == v282)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_183;
    }
    if (v310 != *(void *)(v111 + 88)) {
      goto LABEL_283;
    }
    uint64_t v290 = v310;
    uint64_t v267 = v112;
    unint64_t v268 = v128;
    if (v112)
    {
      uint64_t v136 = &v112[3 * ((v128 >> ((4 * *((unsigned char *)v112 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v137 = v136[4];
      uint64_t v138 = v136[5];
      swift_bridgeObjectRetain();
      uint64_t v272 = v138;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v139 = *(void *)(v111 + 64);
      swift_unknownObjectRetain();
      unint64_t v125 = v297;
      specialized Rope._Node.subscript.getter(v128, v139);
      uint64_t v272 = v140;
      uint64_t v137 = v141;
      swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v142 = 0;
    char v143 = v271;
    *((void *)&v302 + 1) = v137;
    do
    {
      uint64_t v145 = v142 + 1;
      if (__OFADD__(v142, 1))
      {
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
        goto LABEL_285;
      }
      uint64_t v146 = *(v143 - 1);
      uint64_t v147 = *v143;
      if (v125[2])
      {
        swift_bridgeObjectRetain_n();
        unint64_t v148 = specialized __RawDictionaryStorage.find<A>(_:)(v146, v147);
        if (v149)
        {
          outlined init with copy of AttributedString._AttributeValue(v125[7] + 72 * v148, (uint64_t)&v324);
        }
        else
        {
          uint64_t v328 = 0;
          long long v326 = 0u;
          long long v327 = 0u;
          long long v324 = 0u;
          long long v325 = 0u;
        }
        swift_bridgeObjectRelease();
        uint64_t v137 = *((void *)&v302 + 1);
        if (!*(void *)(*((void *)&v302 + 1) + 16))
        {
LABEL_157:
          uint64_t v323 = 0;
          long long v321 = 0u;
          long long v322 = 0u;
          long long v319 = 0u;
          long long v320 = 0u;
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v328 = 0;
        long long v326 = 0u;
        long long v327 = 0u;
        long long v324 = 0u;
        long long v325 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v137 + 16)) {
          goto LABEL_157;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(v146, v147);
      if (v151)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v137 + 56) + 72 * v150, (uint64_t)&v319);
      }
      else
      {
        uint64_t v323 = 0;
        long long v321 = 0u;
        long long v322 = 0u;
        long long v319 = 0u;
        long long v320 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_164:
      unint64_t v112 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      swift_bridgeObjectRelease();
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v324, (uint64_t)&v310, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v319, v302, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v313)
      {
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v310, (uint64_t)v308, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v318) {
          goto LABEL_180;
        }
        long long v152 = *(_OWORD *)(v302 + 48);
        long long v305 = *(_OWORD *)(v302 + 32);
        long long v306 = v152;
        uint64_t v307 = *(void *)(v302 + 64);
        long long v153 = *(_OWORD *)(v302 + 16);
        long long v303 = *(_OWORD *)v302;
        long long v304 = v153;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v308, (uint64_t)v385);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v303, (uint64_t)v383);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v385, (uint64_t)&v361, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v383, (uint64_t)v301, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        if (v362)
        {
          if (v364)
          {
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v361, (uint64_t)&v368);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v301, (uint64_t)v366);
            uint64_t v154 = *((void *)&v369 + 1);
            uint64_t v293 = v370;
            uint64_t v292 = __swift_project_boxed_opaque_existential_1(&v368, *((uint64_t *)&v369 + 1));
            long long v299 = &v260;
            uint64_t v155 = *(void *)(v154 - 8);
            MEMORY[0x1F4188790](v292);
            uint64_t v157 = (char *)&v260 - ((v156 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v366, (uint64_t)v365);
            uint64_t v158 = type metadata accessor for Optional();
            uint64_t v298 = &v260;
            uint64_t v159 = *(void *)(v158 - 8);
            MEMORY[0x1F4188790](v158);
            int v161 = (char *)&v260 - v160;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v162 = swift_dynamicCast();
            unint64_t v163 = *(void (**)(char *, void, uint64_t, uint64_t))(v155 + 56);
            if (v162)
            {
              v163(v161, 0, 1, v154);
              (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v157, v161, v154);
              char v144 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v155 + 8))(v157, v154);
            }
            else
            {
              v163(v161, 1, 1, v154);
              (*(void (**)(char *, uint64_t))(v159 + 8))(v161, v158);
              char v144 = 0;
            }
            uint64_t v89 = v291;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v366);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v368);
            unint64_t v125 = v297;
LABEL_150:
            outlined destroy of Any?((uint64_t)v383, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v385, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v303);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v308);
            outlined destroy of Any?((uint64_t)&v310, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v319, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v324, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v144 & 1) == 0) {
              goto LABEL_182;
            }
            goto LABEL_151;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v361);
        }
        else
        {
          if (!v364)
          {
            char v144 = 1;
            goto LABEL_150;
          }
          outlined destroy of Any?((uint64_t)v301, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        }
        char v144 = 0;
        goto LABEL_150;
      }
      if (v318) {
        goto LABEL_181;
      }
      outlined destroy of Any?((uint64_t)&v310, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v319, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v324, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_151:
      v143 += 2;
      ++v142;
      uint64_t v137 = *((void *)&v302 + 1);
    }
    while (v145 != v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v111 = v300;
    unint64_t v112 = *(uint64_t **)(v300 + 64);
    uint64_t v118 = *(void *)(v300 + 88);
    unint64_t v279 = v269;
    uint64_t v117 = v290;
    uint64_t v310 = v290;
    uint64_t v311 = v268;
    uint64_t v121 = (uint64_t)v267;
    unint64_t v287 = v268;
    long long v312 = v267;
    BOOL v38 = __OFADD__(v276++, 1);
    if (!v38) {
      continue;
    }
    break;
  }
  __break(1u);
LABEL_180:
  outlined destroy of AttributedString._AttributeValue((uint64_t)v308);
LABEL_181:
  outlined destroy of Any?((uint64_t)&v310, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v319, v112);
  outlined destroy of Any?((uint64_t)&v324, v112);
LABEL_182:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v111 = v300;
LABEL_183:
  if (v274 != *(void *)(v111 + 88)) {
    goto LABEL_300;
  }
  if (v278)
  {
    unint64_t v164 = *(void *)(v278 + 24 * ((v287 >> ((4 * *(unsigned char *)(v278 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v165 = *(void *)(v300 + 64);
    swift_unknownObjectRetain();
    unint64_t v164 = specialized Rope._Node.subscript.getter(v287, v165);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v166 = v279 + v164;
  if (__OFADD__(v279, v164)) {
    goto LABEL_301;
  }
  long long v167 = v273;
  long long v168 = *v273;
  long long v169 = v273[1];
  long long v370 = v273[2];
  long long v369 = v169;
  long long v368 = v168;
  long long v170 = *v273;
  long long v171 = v273[1];
  v383[2] = v370;
  v383[1] = v171;
  v383[0] = v170;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v383, (uint64_t)v384);
  outlined retain of Locale((uint64_t)v384);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v368);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v166, result))
  {
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
    goto LABEL_309;
  }
  uint64_t v172 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v174 = v173;
  v176 = v175;
  uint64_t v178 = v177;
  outlined release of Locale((uint64_t)&v359);
  uint64_t v179 = v289;
  char v181 = v294;
  uint64_t v180 = v295;
  uint64_t v182 = v285;
  char v183 = static BigString.Index.< infix(_:_:)();
  if (v183) {
    uint64_t v184 = v179;
  }
  else {
    uint64_t v184 = v172;
  }
  if (v183) {
    uint64_t v185 = v180;
  }
  else {
    uint64_t v185 = v174;
  }
  if (v183) {
    v186 = v181;
  }
  else {
    v186 = v176;
  }
  uint64_t v187 = v185;
  uint64_t v188 = v184;
  if (v183) {
    uint64_t v189 = v182;
  }
  else {
    uint64_t v189 = v178;
  }
  uint64_t v190 = v286;
  long long v191 = *v167;
  long long v192 = v167[1];
  long long v367 = v167[2];
  v366[1] = v192;
  v366[0] = v191;
  long long v193 = *v167;
  v385[1] = v167[1];
  v385[2] = v367;
  v385[0] = v193;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v385, (uint64_t)v386);
  outlined retain of Locale((uint64_t)v386);
  uint64_t v194 = v283;
  uint64_t v195 = v284;
  uint64_t v196 = v296;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_303;
  }
  *(void *)&long long v319 = v195;
  *((void *)&v319 + 1) = v194;
  *(void *)&long long v320 = v190;
  *((void *)&v320 + 1) = v196;
  *(void *)&long long v321 = v188;
  *((void *)&v321 + 1) = v187;
  *(void *)&long long v322 = v186;
  *((void *)&v322 + 1) = v189;
  uint64_t v197 = v270;
  uint64_t v198 = *(void *)(v270 + 16);
  if (v198 && (static BigString.Index.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v201 = 40;
    uint64_t v202 = v198;
    *(void *)&long long v302 = v188;
    *((void *)&v302 + 1) = v187;
    while (*(void *)(v197 + v201))
    {
      swift_bridgeObjectRelease();
      v201 += 16;
      if (!--v202)
      {
        swift_bridgeObjectRelease();
        uint64_t v203 = v283;
        uint64_t v204 = v284;
        uint64_t v205 = v296;
        uint64_t v206 = v286;
        goto LABEL_212;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    BigString.utf8.getter();
    BigString.UTF8View.subscript.getter();
    outlined release of Locale((uint64_t)&v360);
    uint64_t v203 = v283;
    uint64_t v204 = v284;
    uint64_t v206 = v286;
    uint64_t v205 = v296;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_315;
    }
    v308[0] = v204;
    v308[1] = v203;
    v308[2] = v206;
    v308[3] = v205;
    v308[4] = v204;
    v308[5] = v203;
    v308[6] = v206;
    v308[7] = v205;
    specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v308, &v310);
    outlined release of Locale((uint64_t)&v361);
    v207 = v316;
    if (v316 == (uint64_t *)2
      || (v186 = v315, v302 = v314, uint64_t result = static BigString.Index.< infix(_:_:)(), v189 = v207, (result & 1) == 0))
    {
LABEL_212:
      *(void *)&long long v303 = v204;
      *((void *)&v303 + 1) = v203;
      *(void *)&long long v304 = v206;
      *((void *)&v304 + 1) = v205;
      uint64_t v188 = v302;
      long long v305 = v302;
      *(void *)&long long v306 = v186;
      *((void *)&v306 + 1) = v189;
      uint64_t v208 = v270;
      uint64_t v209 = *(void *)(v270 + 16);
      uint64_t v200 = v275;
      if (v209)
      {
        uint64_t v210 = 40;
        while (!*(void *)(v270 + v210))
        {
          v210 += 16;
          if (!--v209) {
            goto LABEL_216;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v246 = (unint64_t *)(v208 + 40);
        uint64_t v247 = (char *)MEMORY[0x1E4FBC860];
        do
        {
          unint64_t v248 = *v246;
          if (*v246)
          {
            uint64_t v249 = *(v246 - 1);
            if ((v248 & 0x2000000000000000) != 0 ? HIBYTE(v248) & 0xF : v249 & 0xFFFFFFFFFFFFLL)
            {
              if ((v248 & 0x1000000000000000) != 0)
              {
                int v251 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }
              else
              {
                if ((v248 & 0x2000000000000000) != 0)
                {
                  uint64_t v310 = *(v246 - 1);
                  uint64_t v311 = v248 & 0xFFFFFFFFFFFFFFLL;
                  swift_bridgeObjectRetain();
                }
                else
                {
                  if ((v249 & 0x1000000000000000) == 0) {
                    _StringObject.sharedUTF8.getter();
                  }
                  swift_bridgeObjectRetain();
                }
                int v251 = _decodeScalar(_:startingAt:)();
                swift_bridgeObjectRelease();
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v247 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v247 + 2) + 1, 1, v247);
              }
              unint64_t v253 = *((void *)v247 + 2);
              unint64_t v252 = *((void *)v247 + 3);
              if (v253 >= v252 >> 1) {
                uint64_t v247 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v252 > 1), v253 + 1, 1, v247);
              }
              *((void *)v247 + 2) = v253 + 1;
              *(_DWORD *)&v247[4 * v253 + 32] = v251;
            }
          }
          v246 += 2;
          --v198;
        }
        while (v198);
        swift_bridgeObjectRelease();
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)v365);
        uint64_t v254 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v247);
        uint64_t v187 = v255;
        v257 = v256;
        v211 = v258;
        swift_bridgeObjectRelease();
        outlined release of Locale((uint64_t)&v310);
        if (v211 != (uint64_t *)2)
        {
          char v259 = static BigString.Index.< infix(_:_:)();
          outlined release of Locale((uint64_t)v366);
          swift_release();
          uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v329);
          if ((v259 & 1) == 0)
          {
            v186 = v257;
            uint64_t v188 = v254;
            uint64_t v199 = v280;
            uint64_t v200 = v275;
            goto LABEL_219;
          }
          goto LABEL_317;
        }
        outlined release of Locale((uint64_t)v366);
        swift_release();
        uint64_t v199 = v280;
        uint64_t v200 = v275;
        uint64_t v188 = v302;
      }
      else
      {
LABEL_216:
        outlined release of Locale((uint64_t)v366);
        swift_release();
        uint64_t v199 = v280;
      }
      uint64_t v187 = *((void *)&v302 + 1);
      goto LABEL_218;
    }
LABEL_316:
    __break(1u);
LABEL_317:
    __break(1u);
    return result;
  }
  outlined release of Locale((uint64_t)v366);
  swift_release();
  uint64_t v199 = v280;
  uint64_t v200 = v275;
LABEL_218:
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v329);
  v211 = v189;
LABEL_219:
  uint64_t v213 = (uint64_t *)v200[27];
  uint64_t v212 = (uint64_t *)v200[28];
  uint64_t v214 = (uint64_t *)v200[29];
  long long v301 = (long long *)v200[30];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_304;
  }
  uint64_t v297 = v214;
  uint64_t v298 = v212;
  *(void *)&long long v302 = v188;
  v200[27] = v188;
  v200[28] = v187;
  v200[29] = v186;
  v200[30] = v211;
  uint64_t v215 = (*(uint64_t (**)(void, void))(v277[5] + 24))(v277[2], v277[5]);
  if (*(void *)(v199 + 16) && (unint64_t v217 = specialized __RawDictionaryStorage.find<A>(_:)(v215, v216), (v218 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v199 + 56) + 72 * v217, (uint64_t)&v324);
  }
  else
  {
    uint64_t v328 = 0;
    long long v326 = 0u;
    long long v327 = 0u;
    long long v324 = 0u;
    long long v325 = 0u;
  }
  swift_bridgeObjectRelease();
  *((void *)&v302 + 1) = v187;
  long long v299 = v213;
  if (*((void *)&v325 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v324, (uint64_t)v309);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v220 = v281;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v324);
    uint64_t v221 = v220;
    uint64_t v199 = v280;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v221, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v324, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v222 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v222 - 8) + 56))(v281, 1, 1, v222);
  }
  uint64_t v223 = (*(uint64_t (**)(void, void))(v277[6] + 24))(v277[3], v277[6]);
  if (*(void *)(v199 + 16) && (unint64_t v225 = specialized __RawDictionaryStorage.find<A>(_:)(v223, v224), (v226 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v199 + 56) + 72 * v225, (uint64_t)&v324);
  }
  else
  {
    uint64_t v328 = 0;
    long long v326 = 0u;
    long long v327 = 0u;
    long long v324 = 0u;
    long long v325 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v309[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v309[1] = type metadata accessor for Optional();
  uint64_t v227 = v277[7];
  uint64_t v228 = v277[4];
  swift_getAssociatedTypeWitness();
  v309[2] = type metadata accessor for Optional();
  v309[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  unint64_t v229 = (int *)swift_getTupleTypeMetadata();
  uint64_t v230 = v281 + v229[12];
  if (*((void *)&v325 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v324, (uint64_t)v309);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v231 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v324);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v231 - 8) + 56))(v230, 0, 1, v231);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v324, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v232 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v232 - 8) + 56))(v230, 1, 1, v232);
  }
  uint64_t v233 = (*(uint64_t (**)(uint64_t, uint64_t))(v227 + 24))(v228, v227);
  uint64_t v235 = v280;
  uint64_t v236 = (uint64_t *)*((void *)&v302 + 1);
  if (*(void *)(v280 + 16) && (unint64_t v237 = specialized __RawDictionaryStorage.find<A>(_:)(v233, v234), (v238 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v235 + 56) + 72 * v237, (uint64_t)&v324);
  }
  else
  {
    uint64_t v328 = 0;
    long long v326 = 0u;
    long long v327 = 0u;
    long long v324 = 0u;
    long long v325 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v239 = v281;
  uint64_t v240 = v281 + v229[16];
  if (*((void *)&v325 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v324, (uint64_t)v309);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v241 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v324);
    uint64_t v239 = v281;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v241 - 8) + 56))(v240, 0, 1, v241);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v324, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v242 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 56))(v240, 1, 1, v242);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v243 = (uint64_t **)(v239 + v229[20]);
  uint64_t v244 = v298;
  *uint64_t v243 = v299;
  v243[1] = v244;
  uint64_t v245 = v301;
  v243[2] = v297;
  v243[3] = (uint64_t *)v245;
  v243[4] = (uint64_t *)v302;
  v243[5] = v236;
  v243[6] = v186;
  v243[7] = v211;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v229 - 1) + 56))(v239, 0, 1, v229);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v13 = *(_OWORD *)(v8 + 176);
  v20[10] = *(_OWORD *)(v8 + 160);
  v20[11] = v13;
  uint64_t v21 = *(void *)(v8 + 192);
  long long v14 = *(_OWORD *)(v8 + 112);
  v20[6] = *(_OWORD *)(v8 + 96);
  v20[7] = v14;
  long long v15 = *(_OWORD *)(v8 + 144);
  v20[8] = *(_OWORD *)(v8 + 128);
  v20[9] = v15;
  long long v16 = *(_OWORD *)(v8 + 48);
  _OWORD v20[2] = *(_OWORD *)(v8 + 32);
  v20[3] = v16;
  long long v17 = *(_OWORD *)(v8 + 80);
  v20[4] = *(_OWORD *)(v8 + 64);
  v20[5] = v17;
  long long v18 = *(_OWORD *)(v8 + 16);
  v20[0] = *(_OWORD *)v8;
  v20[1] = v18;
  outlined retain of AttributedString.Runs((uint64_t)v20);
  *(void *)&double result = AttributedString.Runs.AttributesSlice4.init(runs:)(v8, a1, a2, a3, a5, a6, a7, a4, a8).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice4.Iterator.next()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 216);
  uint64_t v6 = *(void *)(v2 + 224);
  uint64_t v7 = *(void *)(v2 + 232);
  uint64_t v8 = *(void *)(v2 + 240);
  uint64_t v10 = *(void *)(v2 + 168);
  uint64_t v9 = *(void *)(v2 + 176);
  uint64_t v11 = *(void *)(v2 + 192);
  uint64_t v311 = *(void *)(v2 + 184);
  uint64_t v312 = v9;
  if (static BigString.Index.== infix(_:_:)())
  {
    swift_getAssociatedTypeWitness();
    uint64_t v348 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&long long v349 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v349 + 1) = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&long long v350 = type metadata accessor for Optional();
    *((void *)&v350 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(a2, 1, 1, TupleTypeMetadata);
  }
  long long v285 = a1;
  uint64_t v295 = a2;
  uint64_t v306 = v10;
  uint64_t v14 = *(void *)v2;
  long long v15 = *(_OWORD *)(v2 + 24);
  long long v371 = *(_OWORD *)(v2 + 8);
  long long v372 = v15;
  long long v16 = *(_OWORD *)(v2 + 56);
  long long v373 = *(_OWORD *)(v2 + 40);
  long long v374 = v16;
  uint64_t v299 = *(void *)(v2 + 72);
  long long v17 = *(uint64_t **)(v2 + 80);
  uint64_t v314 = v8;
  v315 = v17;
  uint64_t v313 = *(void *)(v2 + 88);
  uint64_t v18 = *(void *)(v2 + 96);
  uint64_t v309 = *(void **)(v2 + 104);
  uint64_t v310 = v18;
  uint64_t v19 = *(void *)(v2 + 112);
  uint64_t v307 = *(void *)(v2 + 120);
  uint64_t v308 = v19;
  uint64_t v20 = *(void *)(v2 + 136);
  uint64_t v305 = *(void *)(v2 + 128);
  uint64_t v21 = *(void *)(v2 + 144);
  uint64_t v22 = *(long long **)(v2 + 152);
  long long v23 = *(uint64_t **)(v2 + 160);
  uint64_t v317 = v14;
  swift_retain();
  long long v319 = (uint64_t *)v21;
  uint64_t v320 = v20;
  uint64_t v318 = v22;
  v316 = v23;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_289;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
    goto LABEL_292;
  }
  uint64_t v301 = v11;
  uint64_t v292 = (void *)v2;
  uint64_t v24 = v317;
  uint64_t v25 = *(void *)(v317 + 64);
  uint64_t v26 = *(void *)(v317 + 72);
  uint64_t v28 = *(void *)(v317 + 80);
  uint64_t v27 = *(void *)(v317 + 88);
  swift_unknownObjectRetain();
  uint64_t v304 = v7;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v25) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  if (result < 0) {
    goto LABEL_291;
  }
  uint64_t v30 = result;
  if (v29 < result) {
    goto LABEL_291;
  }
  uint64_t v300 = v5;
  uint64_t v303 = v6;
  if (!v25 || result >= v28 || !*(_WORD *)(v25 + 16))
  {
    unint64_t v42 = swift_unknownObjectRetain();
    unint64_t v43 = specialized Rope._endPath.getter(v42);
    swift_unknownObjectRelease();
    uint64_t v34 = 0;
    uint64_t v30 = 0;
    uint64_t v44 = 0;
    if (!v25) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v302 = v27;
  uint64_t v31 = *(unsigned __int8 *)(v25 + 18);
  if (*(unsigned char *)(v25 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v32 = v25;
    while (1)
    {
      uint64_t v35 = *(unsigned __int16 *)(v32 + 16);
      if (!*(_WORD *)(v32 + 16)) {
        break;
      }
      uint64_t v36 = *(void *)(v32 + 40);
      BOOL v37 = __OFSUB__(v30, v36);
      uint64_t v38 = v30 - v36;
      if (v37) {
        goto LABEL_281;
      }
      if (__OFADD__(v38, 1)) {
        goto LABEL_282;
      }
      if (v38 + 1 < 1)
      {
        uint64_t v35 = 0;
        goto LABEL_17;
      }
      if (v35 == 1)
      {
        uint64_t v30 = v38;
        break;
      }
      uint64_t v39 = (uint64_t *)(v32 + 64);
      uint64_t v40 = 1;
      while (1)
      {
        uint64_t v41 = *v39;
        v39 += 3;
        uint64_t v30 = v38 - v41;
        if (__OFSUB__(v38, v41)) {
          goto LABEL_275;
        }
        if (__OFADD__(v30, 1))
        {
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
          goto LABEL_279;
        }
        if (v30 + 1 < 1) {
          break;
        }
        ++v40;
        uint64_t v38 = v30;
        if (v35 == v40) {
          goto LABEL_16;
        }
      }
      uint64_t v35 = v40;
      uint64_t v30 = v38;
LABEL_17:
      char v33 = (4 * *(unsigned char *)(v32 + 18) + 8) & 0x3C;
      uint64_t v31 = ((-15 << v33) - 1) & v31 | (v35 << v33);
      uint64_t v34 = *(void *)(v32 + 24 + 24 * v35);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v32 = v34;
      if (!*(unsigned char *)(v34 + 18)) {
        goto LABEL_79;
      }
    }
LABEL_16:
    if (!v30) {
      goto LABEL_17;
    }
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v34 = v25;
LABEL_79:
  uint64_t v91 = *(unsigned __int16 *)(v34 + 16);
  if (!*(_WORD *)(v34 + 16))
  {
    uint64_t v24 = v317;
LABEL_101:
    if (v30)
    {
LABEL_314:
      __break(1u);
      goto LABEL_315;
    }
    goto LABEL_102;
  }
  uint64_t v92 = *(void *)(v34 + 24);
  BOOL v37 = __OFSUB__(v30, v92);
  uint64_t v93 = v30 - v92;
  uint64_t v24 = v317;
  if (v37)
  {
LABEL_316:
    __break(1u);
    goto LABEL_317;
  }
  if (__OFADD__(v93, 1))
  {
LABEL_317:
    __break(1u);
    goto LABEL_318;
  }
  if (v93 + 1 < 1)
  {
    uint64_t v91 = 0;
  }
  else
  {
    if (v91 == 1)
    {
      uint64_t v30 = v93;
      goto LABEL_101;
    }
    uint64_t v97 = (uint64_t *)(v34 + 48);
    uint64_t v98 = 1;
    while (1)
    {
      uint64_t v99 = *v97;
      v97 += 3;
      uint64_t v30 = v93 - v99;
      if (__OFSUB__(v93, v99)) {
        goto LABEL_310;
      }
      if (__OFADD__(v30, 1)) {
        goto LABEL_311;
      }
      if (v30 + 1 < 1) {
        break;
      }
      ++v98;
      uint64_t v93 = v30;
      if (v91 == v98) {
        goto LABEL_101;
      }
    }
    uint64_t v91 = v98;
    uint64_t v30 = v93;
  }
LABEL_102:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v43 = v31 & 0xFFFFFFFFFFFFF0FFLL | (v91 << 8);
  uint64_t v27 = v302;
LABEL_32:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v27, v43, v34, v25, v26);
  swift_unknownObjectRelease_n();
  uint64_t v44 = v30;
LABEL_33:
  long long v45 = *(_OWORD *)(v24 + 16);
  long long v46 = *(_OWORD *)(v24 + 32);
  long long v395 = *(_OWORD *)(v24 + 48);
  v394[1] = v46;
  v394[0] = v45;
  long long v47 = *(_OWORD *)(v24 + 16);
  long long v48 = *(_OWORD *)(v24 + 32);
  v396[2] = v395;
  v396[1] = v48;
  v396[0] = v47;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v396, (uint64_t)v397);
  outlined retain of Locale((uint64_t)v397);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v394);
  if (__OFSUB__(0, v44))
  {
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }
  uint64_t v49 = BigString.UTF8View.index(_:offsetBy:)();
  unint64_t v51 = v50;
  uint64_t result = outlined release of Locale((uint64_t)&v375);
  if (v27 != *(void *)(v24 + 88))
  {
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
    goto LABEL_296;
  }
  unint64_t v298 = v51;
  if (v34)
  {
    unint64_t v52 = (void *)(v34 + 24 * ((v43 >> ((4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v53 = v52[4];
    unint64_t v297 = v52[3];
    uint64_t v54 = v52[5];
    swift_retain();
    uint64_t v302 = v53;
    swift_bridgeObjectRetain();
    uint64_t v284 = v54;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v55 = *(void *)(v24 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v297 = specialized Rope._Node.subscript.getter(v43, v55);
    uint64_t v302 = v56;
    uint64_t v284 = v57;
    swift_unknownObjectRelease();
  }
  if (static BigString.Index.< infix(_:_:)()) {
    uint64_t v58 = v49;
  }
  else {
    uint64_t v58 = v320;
  }
  uint64_t v296 = v58;
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v59 = result + v297;
  if (__OFADD__(result, v297)) {
    goto LABEL_294;
  }
  uint64_t v60 = (long long *)(v317 + 16);
  uint64_t v61 = BigString.Index.utf8Offset.getter();
  if (v61 >= v59) {
    uint64_t v62 = v59;
  }
  else {
    uint64_t v62 = v61;
  }
  long long v63 = *v60;
  long long v64 = *(_OWORD *)(v317 + 32);
  long long v393 = *(_OWORD *)(v317 + 48);
  v392[1] = v64;
  v392[0] = v63;
  long long v65 = *v60;
  long long v66 = *(_OWORD *)(v317 + 32);
  v398[2] = v393;
  v398[1] = v66;
  v398[0] = v65;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v398, (uint64_t)v399);
  outlined retain of Locale((uint64_t)v399);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v392);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v62, result)) {
    goto LABEL_295;
  }
  uint64_t v290 = (long long *)(v317 + 16);
  BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v376);
  char v67 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v67)
  {
LABEL_296:
    __break(1u);
    goto LABEL_297;
  }
  long long v349 = v371;
  long long v350 = v372;
  long long v351 = v373;
  uint64_t v69 = v292[25];
  uint64_t v68 = v292[26];
  long long v352 = v374;
  uint64_t v348 = v317;
  uint64_t v353 = v299;
  long long v354 = v315;
  uint64_t v355 = v313;
  uint64_t v356 = v310;
  uint64_t v357 = v309;
  uint64_t v358 = v308;
  uint64_t v359 = v307;
  uint64_t v360 = v305;
  uint64_t v361 = v320;
  uint64_t v362 = (uint64_t)v319;
  uint64_t v363 = v318;
  uint64_t v364 = v316;
  uint64_t v365 = v306;
  uint64_t v366 = v312;
  uint64_t v367 = v311;
  uint64_t v368 = v301;
  uint64_t v305 = v69;
  uint64_t v369 = v69;
  uint64_t v283 = v68;
  uint64_t v370 = v68;
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v348);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_298:
    __break(1u);
    goto LABEL_299;
  }
  uint64_t v308 = *(void *)(v305 + 16);
  if (!v308)
  {
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
    goto LABEL_301;
  }
  uint64_t v70 = *(void *)(v317 + 64);
  uint64_t v71 = *(void *)(v317 + 72);
  uint64_t v72 = *(void *)(v317 + 80);
  uint64_t v307 = *(void *)(v317 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v70) {
    uint64_t v73 = v72;
  }
  else {
    uint64_t v73 = 0;
  }
  if (result < 0) {
    goto LABEL_300;
  }
  uint64_t v74 = result;
  if (v73 < result) {
    goto LABEL_300;
  }
  if (v70 && result < v72 && *(_WORD *)(v70 + 16))
  {
    long long v319 = (uint64_t *)v72;
    uint64_t v320 = v71;
    uint64_t v75 = *(unsigned __int8 *)(v70 + 18);
    if (*(unsigned char *)(v70 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v76 = v74;
      uint64_t v77 = v70;
      while (1)
      {
        uint64_t v80 = *(unsigned __int16 *)(v77 + 16);
        if (!*(_WORD *)(v77 + 16)) {
          goto LABEL_61;
        }
        uint64_t v81 = *(void *)(v77 + 40);
        BOOL v37 = __OFSUB__(v76, v81);
        uint64_t v82 = v76 - v81;
        if (v37) {
          goto LABEL_283;
        }
        if (__OFADD__(v82, 1)) {
          goto LABEL_284;
        }
        if (v82 + 1 < 1)
        {
          uint64_t v80 = 0;
        }
        else
        {
          if (v80 == 1)
          {
            uint64_t v76 = v82;
LABEL_61:
            if (v76) {
              goto LABEL_280;
            }
            goto LABEL_62;
          }
          uint64_t v83 = (uint64_t *)(v77 + 64);
          uint64_t v84 = 1;
          while (1)
          {
            uint64_t v85 = *v83;
            v83 += 3;
            uint64_t v76 = v82 - v85;
            if (__OFSUB__(v82, v85)) {
              goto LABEL_277;
            }
            if (__OFADD__(v76, 1)) {
              goto LABEL_278;
            }
            if (v76 + 1 < 1) {
              break;
            }
            ++v84;
            uint64_t v82 = v76;
            if (v80 == v84) {
              goto LABEL_61;
            }
          }
          uint64_t v80 = v84;
          uint64_t v76 = v82;
        }
LABEL_62:
        char v78 = (4 * *(unsigned char *)(v77 + 18) + 8) & 0x3C;
        uint64_t v75 = ((-15 << v78) - 1) & v75 | (v80 << v78);
        uint64_t v79 = *(void *)(v77 + 24 + 24 * v80);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v77 = v79;
        if (!*(unsigned char *)(v79 + 18)) {
          goto LABEL_86;
        }
      }
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v76 = v74;
    uint64_t v79 = v70;
LABEL_86:
    uint64_t v94 = *(unsigned __int16 *)(v79 + 16);
    if (*(_WORD *)(v79 + 16))
    {
      uint64_t v95 = *(void *)(v79 + 24);
      BOOL v37 = __OFSUB__(v76, v95);
      uint64_t v96 = v76 - v95;
      uint64_t v89 = v308;
      if (v37)
      {
LABEL_318:
        __break(1u);
        goto LABEL_319;
      }
      if (__OFADD__(v96, 1))
      {
LABEL_319:
        __break(1u);
LABEL_320:
        __break(1u);
LABEL_321:
        __break(1u);
LABEL_322:
        __break(1u);
        return result;
      }
      if (v96 + 1 < 1)
      {
        uint64_t v94 = 0;
      }
      else
      {
        if (v94 == 1)
        {
          uint64_t v76 = v96;
          goto LABEL_108;
        }
        uint64_t v100 = (uint64_t *)(v79 + 48);
        uint64_t v101 = 1;
        while (1)
        {
          uint64_t v102 = *v100;
          v100 += 3;
          uint64_t v76 = v96 - v102;
          if (__OFSUB__(v96, v102)) {
            goto LABEL_312;
          }
          if (__OFADD__(v76, 1)) {
            goto LABEL_313;
          }
          if (v76 + 1 < 1) {
            break;
          }
          ++v101;
          uint64_t v96 = v76;
          if (v94 == v101) {
            goto LABEL_108;
          }
        }
        uint64_t v94 = v101;
        uint64_t v76 = v96;
      }
LABEL_109:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v88 = v79;
      unint64_t v87 = v75 & 0xFFFFFFFFFFFFF0FFLL | (v94 << 8);
      uint64_t v71 = v320;
      unint64_t v298 = v87;
      goto LABEL_77;
    }
    uint64_t v89 = v308;
LABEL_108:
    if (v76)
    {
LABEL_315:
      __break(1u);
      goto LABEL_316;
    }
    goto LABEL_109;
  }
  unint64_t v86 = swift_unknownObjectRetain();
  unint64_t v87 = specialized Rope._endPath.getter(v86);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v88 = 0;
  uint64_t v76 = 0;
  uint64_t v89 = v308;
  unint64_t v298 = v87;
  if (v70)
  {
LABEL_77:
    swift_unknownObjectRetain();
    uint64_t v90 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v307, v87, v88, v70, v71);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_111;
  }
  uint64_t v90 = 0;
LABEL_111:
  unint64_t v297 = v74 - v76;
  if (__OFSUB__(v74, v76))
  {
LABEL_301:
    __break(1u);
    goto LABEL_302;
  }
  long long v103 = *v290;
  long long v104 = v290[1];
  long long v391 = v290[2];
  v390[1] = v104;
  v390[0] = v103;
  long long v105 = *v290;
  long long v106 = v290[1];
  v400[2] = v391;
  v400[1] = v106;
  v400[0] = v105;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v400, (uint64_t)v401);
  outlined retain of Locale((uint64_t)v401);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v390);
  if (__OFSUB__(0, v76))
  {
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }
  uint64_t v107 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v109 = v108;
  uint64_t v281 = v111;
  uint64_t v282 = v110;
  uint64_t result = outlined release of Locale((uint64_t)&v377);
  if (v90 >= v299)
  {
LABEL_303:
    __break(1u);
    goto LABEL_304;
  }
  uint64_t v279 = v109;
  uint64_t v280 = v107;
  uint64_t v112 = v317;
  if (v307 != *(void *)(v317 + 88))
  {
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
    goto LABEL_307;
  }
  unint64_t v113 = *(uint64_t **)(v317 + 64);
  if (v88)
  {
    unint64_t v114 = v298;
    unint64_t v115 = v88 + 24 * ((v298 >> ((4 * *(unsigned char *)(v88 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v116 = v90;
    uint64_t v117 = *(void *)(v115 + 40);
    uint64_t v313 = *(void *)(v115 + 32);
    swift_bridgeObjectRetain();
    uint64_t v278 = v117;
    uint64_t v90 = v116;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v118 = v307;
    uint64_t v119 = v307;
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v114 = v298;
    specialized Rope._Node.subscript.getter(v298, (uint64_t)v113);
    uint64_t v313 = v120;
    uint64_t v278 = v121;
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v113 = *(uint64_t **)(v317 + 64);
    uint64_t v119 = *(void *)(v317 + 88);
    uint64_t v118 = v307;
  }
  uint64_t v294 = v90 + 1;
  uint64_t v328 = v118;
  uint64_t v329 = v114;
  uint64_t v318 = (long long *)&v382;
  long long v319 = &v336;
  uint64_t v288 = (uint64_t *)(v305 + 40);
  long long v330 = (uint64_t *)v88;
  uint64_t v122 = v88;
  unint64_t v123 = v114;
LABEL_119:
  if (v118 != v119) {
    goto LABEL_285;
  }
  uint64_t v291 = v119;
  uint64_t v296 = v122;
  if (v122)
  {
    unint64_t v124 = *(void *)(v122 + 24 * ((v123 >> ((4 * *(unsigned char *)(v122 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v124 = specialized Rope._Node.subscript.getter(v123, (uint64_t)v113);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v297, v124)) {
    goto LABEL_286;
  }
  unint64_t v287 = v297 + v124;
  if (v113)
  {
    unint64_t v125 = ((-15 << ((4 * *((unsigned char *)v113 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v113 + 18) | ((unint64_t)*((unsigned __int16 *)v113 + 8) << ((4 * *((unsigned char *)v113 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
  }
  else
  {
    unint64_t v125 = 0;
  }
  if (v123 >= v125) {
    goto LABEL_287;
  }
  if (v296)
  {
    char v126 = (4 * *(unsigned char *)(v296 + 18) + 8) & 0x3C;
    unint64_t v127 = ((v123 >> v126) & 0xF) + 1;
    if (v127 < *(unsigned __int16 *)(v296 + 16))
    {
      unint64_t v293 = (v127 << v126) | ((-15 << v126) - 1) & v123;
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_134:
      unint64_t v113 = v330;
      goto LABEL_141;
    }
  }
  int v128 = *((unsigned __int8 *)v113 + 18);
  unint64_t v129 = v123;
  char v130 = (4 * v128 + 8) & 0x3C;
  unint64_t v131 = v129;
  uint64_t v132 = (v129 >> v130) & 0xF;
  *(void *)&long long v380 = v132;
  if (v128)
  {
    swift_unknownObjectRetain();
    char v133 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v113 + 3), (uint64_t *)&v380, (uint64_t)&v328, (uint64_t)v113, v128);
    uint64_t result = swift_unknownObjectRelease();
    if (v133)
    {
      uint64_t result = swift_unknownObjectRelease_n();
      unint64_t v293 = v329;
      unint64_t v123 = v131;
      goto LABEL_134;
    }
  }
  else
  {
    uint64_t v134 = v132 + 1;
    if (v132 + 1 < (unint64_t)*((unsigned __int16 *)v113 + 8))
    {
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v135 = ((-15 << v130) - 1) & v131;
      uint64_t v136 = v134 << v130;
      unint64_t v123 = v131;
      unint64_t v293 = v136 | v135;
      goto LABEL_141;
    }
  }
  if (v113)
  {
    int v137 = *((unsigned __int8 *)v113 + 18);
    uint64_t v138 = *((unsigned __int16 *)v113 + 8);
    uint64_t result = swift_unknownObjectRelease_n();
    unint64_t v293 = ((-15 << ((4 * v137 + 8) & 0x3C)) - 1) & v137 | (unint64_t)(v138 << ((4 * v137 + 8) & 0x3C));
  }
  else
  {
    unint64_t v293 = 0;
  }
  unint64_t v123 = v131;
  unint64_t v113 = 0;
  uint64_t v328 = v291;
LABEL_141:
  uint64_t v139 = v313;
  if (v294 != v299)
  {
    if (v328 != *(void *)(v112 + 88))
    {
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
      goto LABEL_290;
    }
    uint64_t v307 = v328;
    unint64_t v298 = v123;
    uint64_t v286 = v113;
    if (v113)
    {
      uint64_t v140 = &v113[3 * ((v293 >> ((4 * *((unsigned char *)v113 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v141 = v140[4];
      uint64_t v142 = v140[5];
      swift_bridgeObjectRetain();
      uint64_t v289 = v142;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v143 = *(void *)(v112 + 64);
      swift_unknownObjectRetain();
      uint64_t v139 = v313;
      specialized Rope._Node.subscript.getter(v293, v143);
      uint64_t v289 = v144;
      uint64_t v141 = v145;
      swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v146 = 0;
    uint64_t v147 = v288;
    uint64_t v320 = v141;
    while (1)
    {
      uint64_t v149 = v146 + 1;
      if (__OFADD__(v146, 1))
      {
        __break(1u);
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }
      uint64_t v150 = *(v147 - 1);
      uint64_t v151 = *v147;
      if (*(void *)(v139 + 16))
      {
        swift_bridgeObjectRetain_n();
        unint64_t v152 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v151);
        if (v153)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v139 + 56) + 72 * v152, (uint64_t)&v343);
        }
        else
        {
          uint64_t v347 = 0;
          long long v345 = 0u;
          long long v346 = 0u;
          long long v343 = 0u;
          long long v344 = 0u;
        }
        swift_bridgeObjectRelease();
        uint64_t v141 = v320;
        if (!*(void *)(v320 + 16))
        {
LABEL_156:
          uint64_t v342 = 0;
          long long v340 = 0u;
          long long v341 = 0u;
          long long v338 = 0u;
          long long v339 = 0u;
          goto LABEL_163;
        }
      }
      else
      {
        uint64_t v347 = 0;
        long long v345 = 0u;
        long long v346 = 0u;
        long long v343 = 0u;
        long long v344 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v141 + 16)) {
          goto LABEL_156;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v154 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v151);
      if (v155)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v141 + 56) + 72 * v154, (uint64_t)&v338);
      }
      else
      {
        uint64_t v342 = 0;
        long long v340 = 0u;
        long long v341 = 0u;
        long long v338 = 0u;
        long long v339 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_163:
      unint64_t v113 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      swift_bridgeObjectRelease();
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v343, (uint64_t)&v328, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v338, (uint64_t)v319, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v331)
      {
        if (v337) {
          goto LABEL_180;
        }
        outlined destroy of Any?((uint64_t)&v328, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v338, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?((uint64_t)&v343, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_150;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v328, (uint64_t)v326, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v337) {
        goto LABEL_179;
      }
      long long v156 = *((_OWORD *)v319 + 3);
      long long v323 = *((_OWORD *)v319 + 2);
      long long v324 = v156;
      uint64_t v325 = v319[8];
      long long v157 = *((_OWORD *)v319 + 1);
      long long v321 = *(_OWORD *)v319;
      long long v322 = v157;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v326, (uint64_t)v404);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v321, (uint64_t)v402);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v404, (uint64_t)&v380, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v402, (uint64_t)v318, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v381)
      {
        if (!v383)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v380);
LABEL_148:
          char v148 = 0;
          goto LABEL_149;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v380, (uint64_t)&v387);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v318, (uint64_t)v385);
        uint64_t v158 = *((void *)&v388 + 1);
        uint64_t v310 = v389;
        uint64_t v309 = __swift_project_boxed_opaque_existential_1(&v387, *((uint64_t *)&v388 + 1));
        v316 = &v277;
        uint64_t v159 = *(void *)(v158 - 8);
        MEMORY[0x1F4188790](v309);
        int v161 = (char *)&v277 - ((v160 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v385, (uint64_t)v384);
        uint64_t v162 = type metadata accessor for Optional();
        v315 = &v277;
        uint64_t v163 = *(void *)(v162 - 8);
        MEMORY[0x1F4188790](v162);
        uint64_t v165 = (char *)&v277 - v164;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        int v166 = swift_dynamicCast();
        long long v167 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v159 + 56);
        if (v166)
        {
          v167(v165, 0, 1, v158);
          (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v161, v165, v158);
          char v148 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v159 + 8))(v161, v158);
        }
        else
        {
          v167(v165, 1, 1, v158);
          (*(void (**)(char *, uint64_t))(v163 + 8))(v165, v162);
          char v148 = 0;
        }
        uint64_t v89 = v308;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v385);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v387);
        uint64_t v139 = v313;
      }
      else
      {
        if (v383)
        {
          outlined destroy of Any?((uint64_t)v318, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_148;
        }
        char v148 = 1;
      }
LABEL_149:
      outlined destroy of Any?((uint64_t)v402, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v404, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v321);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v326);
      outlined destroy of Any?((uint64_t)&v328, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v338, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v343, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v148 & 1) == 0) {
        goto LABEL_181;
      }
LABEL_150:
      v147 += 2;
      ++v146;
      uint64_t v141 = v320;
      if (v149 == v89)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v112 = v317;
        unint64_t v113 = *(uint64_t **)(v317 + 64);
        uint64_t v119 = *(void *)(v317 + 88);
        unint64_t v297 = v287;
        uint64_t v118 = v307;
        uint64_t v328 = v307;
        unint64_t v123 = v293;
        uint64_t v329 = v293;
        uint64_t v122 = (uint64_t)v286;
        long long v330 = v286;
        BOOL v37 = __OFADD__(v294++, 1);
        if (!v37) {
          goto LABEL_119;
        }
        __break(1u);
LABEL_179:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v326);
LABEL_180:
        outlined destroy of Any?((uint64_t)&v328, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v338, v113);
        outlined destroy of Any?((uint64_t)&v343, v113);
LABEL_181:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v112 = v317;
        unint64_t v123 = v298;
        goto LABEL_182;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_182:
  if (v291 != *(void *)(v112 + 88)) {
    goto LABEL_305;
  }
  if (v296)
  {
    unint64_t v168 = *(void *)(v296 + 24 * ((v123 >> ((4 * *(unsigned char *)(v296 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v169 = *(void *)(v317 + 64);
    swift_unknownObjectRetain();
    unint64_t v168 = specialized Rope._Node.subscript.getter(v123, v169);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v170 = v297 + v168;
  if (__OFADD__(v297, v168)) {
    goto LABEL_306;
  }
  long long v171 = v290;
  long long v172 = *v290;
  long long v173 = v290[1];
  long long v389 = v290[2];
  long long v388 = v173;
  long long v387 = v172;
  long long v174 = *v290;
  long long v175 = v290[1];
  v402[2] = v389;
  v402[1] = v175;
  v402[0] = v174;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v402, (uint64_t)v403);
  outlined retain of Locale((uint64_t)v403);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v387);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v170, result))
  {
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
LABEL_310:
    __break(1u);
LABEL_311:
    __break(1u);
LABEL_312:
    __break(1u);
LABEL_313:
    __break(1u);
    goto LABEL_314;
  }
  uint64_t v176 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v178 = v177;
  uint64_t v180 = v179;
  uint64_t v182 = v181;
  outlined release of Locale((uint64_t)&v378);
  uint64_t v183 = v306;
  uint64_t v185 = v311;
  uint64_t v184 = v312;
  uint64_t v186 = v301;
  char v187 = static BigString.Index.< infix(_:_:)();
  if (v187) {
    uint64_t v188 = v183;
  }
  else {
    uint64_t v188 = v176;
  }
  if (v187) {
    uint64_t v189 = v184;
  }
  else {
    uint64_t v189 = v178;
  }
  if (v187) {
    uint64_t v190 = v185;
  }
  else {
    uint64_t v190 = v180;
  }
  uint64_t v191 = v189;
  if (v187) {
    uint64_t v192 = v186;
  }
  else {
    uint64_t v192 = v182;
  }
  uint64_t v193 = v304;
  long long v194 = *v171;
  long long v195 = v171[1];
  long long v386 = v171[2];
  v385[1] = v195;
  v385[0] = v194;
  long long v196 = *v171;
  long long v197 = v171[1];
  uint64_t v198 = v188;
  v404[1] = v197;
  v404[2] = v386;
  v404[0] = v196;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v404, (uint64_t)v405);
  outlined retain of Locale((uint64_t)v405);
  uint64_t v199 = v300;
  uint64_t v200 = v303;
  uint64_t v201 = v314;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_308;
  }
  *(void *)&long long v338 = v199;
  *((void *)&v338 + 1) = v200;
  *(void *)&long long v339 = v193;
  *((void *)&v339 + 1) = v201;
  *(void *)&long long v340 = v198;
  *((void *)&v340 + 1) = v191;
  *(void *)&long long v341 = v190;
  *((void *)&v341 + 1) = v192;
  uint64_t v202 = v283;
  uint64_t v203 = *(void *)(v283 + 16);
  if (v203 && (static BigString.Index.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v205 = 40;
    uint64_t v206 = v203;
    long long v319 = (uint64_t *)v190;
    uint64_t v320 = v191;
    while (*(void *)(v202 + v205))
    {
      swift_bridgeObjectRelease();
      v205 += 16;
      if (!--v206)
      {
        swift_bridgeObjectRelease();
        uint64_t v207 = v303;
        uint64_t v208 = v304;
        uint64_t v209 = v314;
        uint64_t v210 = v300;
        goto LABEL_211;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    BigString.utf8.getter();
    BigString.UTF8View.subscript.getter();
    outlined release of Locale((uint64_t)&v379);
    uint64_t v210 = v300;
    uint64_t v207 = v303;
    uint64_t v208 = v304;
    uint64_t v209 = v314;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_320;
    }
    v326[0] = v210;
    v326[1] = v207;
    v326[2] = v208;
    v326[3] = v209;
    v326[4] = v210;
    v326[5] = v207;
    v326[6] = v208;
    v326[7] = v209;
    specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v326, &v328);
    outlined release of Locale((uint64_t)&v380);
    uint64_t v211 = v335;
    if (v335 != 2)
    {
      uint64_t v198 = v332;
      long long v319 = (uint64_t *)v334;
      uint64_t v320 = v333;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      uint64_t v192 = v211;
      if (result) {
        goto LABEL_321;
      }
    }
LABEL_211:
    *(void *)&long long v321 = v210;
    *((void *)&v321 + 1) = v207;
    *(void *)&long long v322 = v208;
    *((void *)&v322 + 1) = v209;
    uint64_t v190 = (uint64_t)v319;
    uint64_t v191 = v320;
    *(void *)&long long v323 = v198;
    *((void *)&v323 + 1) = v320;
    *(void *)&long long v324 = v319;
    *((void *)&v324 + 1) = v192;
    uint64_t v212 = *(void *)(v202 + 16);
    uint64_t v204 = v292;
    if (!v212)
    {
LABEL_215:
      outlined release of Locale((uint64_t)v385);
      swift_release();
      goto LABEL_216;
    }
    uint64_t v213 = 40;
    while (!*(void *)(v202 + v213))
    {
      v213 += 16;
      if (!--v212) {
        goto LABEL_215;
      }
    }
    uint64_t v262 = v198;
    swift_bridgeObjectRetain();
    uint64_t v263 = (unint64_t *)(v202 + 40);
    uint64_t v264 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v265 = *v263;
      if (*v263)
      {
        uint64_t v266 = *(v263 - 1);
        if ((v265 & 0x2000000000000000) != 0 ? HIBYTE(v265) & 0xF : v266 & 0xFFFFFFFFFFFFLL)
        {
          if ((v265 & 0x1000000000000000) != 0)
          {
            int v268 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v265 & 0x2000000000000000) != 0)
            {
              uint64_t v328 = *(v263 - 1);
              uint64_t v329 = v265 & 0xFFFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain();
            }
            else
            {
              if ((v266 & 0x1000000000000000) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              swift_bridgeObjectRetain();
            }
            int v268 = _decodeScalar(_:startingAt:)();
            swift_bridgeObjectRelease();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v264 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v264 + 2) + 1, 1, v264);
          }
          unint64_t v270 = *((void *)v264 + 2);
          unint64_t v269 = *((void *)v264 + 3);
          if (v270 >= v269 >> 1) {
            uint64_t v264 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v269 > 1), v270 + 1, 1, v264);
          }
          *((void *)v264 + 2) = v270 + 1;
          *(_DWORD *)&v264[4 * v270 + 32] = v268;
        }
      }
      v263 += 2;
      --v203;
    }
    while (v203);
    swift_bridgeObjectRelease();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v384);
    uint64_t v198 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v264);
    uint64_t v272 = v271;
    uint64_t v274 = v273;
    uint64_t v214 = v275;
    swift_bridgeObjectRelease();
    outlined release of Locale((uint64_t)&v328);
    if (v214 == 2)
    {
      outlined release of Locale((uint64_t)v385);
      swift_release();
      uint64_t v204 = v292;
      uint64_t v198 = v262;
      uint64_t v190 = (uint64_t)v319;
      uint64_t v191 = v320;
      goto LABEL_216;
    }
    char v276 = static BigString.Index.< infix(_:_:)();
    outlined release of Locale((uint64_t)v385);
    swift_release();
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v348);
    if ((v276 & 1) == 0)
    {
      uint64_t v191 = v272;
      uint64_t v190 = v274;
      uint64_t v215 = v295;
      uint64_t v216 = v285;
      uint64_t v204 = v292;
      goto LABEL_217;
    }
    goto LABEL_322;
  }
  outlined release of Locale((uint64_t)v385);
  swift_release();
  uint64_t v204 = v292;
LABEL_216:
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v348);
  uint64_t v214 = v192;
  uint64_t v215 = v295;
  uint64_t v216 = v285;
LABEL_217:
  uint64_t v217 = v204[27];
  uint64_t v218 = v204[28];
  uint64_t v219 = (uint64_t *)v204[30];
  uint64_t v318 = (long long *)v204[29];
  v316 = v219;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_309;
  }
  uint64_t v312 = v218;
  uint64_t v313 = v217;
  v204[27] = v198;
  v204[28] = v191;
  long long v319 = (uint64_t *)v190;
  v204[29] = v190;
  v204[30] = v214;
  uint64_t v220 = (*(uint64_t (**)(void, void))(v216[6] + 24))(v216[2], v216[6]);
  uint64_t v222 = v302;
  if (*(void *)(v302 + 16) && (unint64_t v223 = specialized __RawDictionaryStorage.find<A>(_:)(v220, v221), (v224 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v222 + 56) + 72 * v223, (uint64_t)&v343);
  }
  else
  {
    uint64_t v347 = 0;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v343 = 0u;
    long long v344 = 0u;
  }
  swift_bridgeObjectRelease();
  v315 = (uint64_t *)v198;
  if (*((void *)&v344 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v343, (uint64_t)v327);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v343);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v215, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v343, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v226 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v226 - 8) + 56))(v215, 1, 1, v226);
  }
  uint64_t v227 = (*(uint64_t (**)(void, void))(v216[7] + 24))(v216[3], v216[7]);
  uint64_t v229 = v302;
  uint64_t v230 = *(void *)(v302 + 16);
  uint64_t v320 = v191;
  uint64_t v314 = v214;
  if (v230 && (unint64_t v231 = specialized __RawDictionaryStorage.find<A>(_:)(v227, v228), (v232 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v229 + 56) + 72 * v231, (uint64_t)&v343);
  }
  else
  {
    uint64_t v347 = 0;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v343 = 0u;
    long long v344 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v327[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v327[1] = type metadata accessor for Optional();
  uint64_t v233 = v216[8];
  uint64_t v234 = v216[4];
  swift_getAssociatedTypeWitness();
  v327[2] = type metadata accessor for Optional();
  uint64_t v235 = v216[9];
  uint64_t v236 = v216[5];
  swift_getAssociatedTypeWitness();
  v327[3] = type metadata accessor for Optional();
  v327[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  unint64_t v237 = (int *)swift_getTupleTypeMetadata();
  uint64_t v238 = v295 + v237[12];
  if (*((void *)&v344 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v343, (uint64_t)v327);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v239 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v343);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v239 - 8) + 56))(v238, 0, 1, v239);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v343, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v240 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v240 - 8) + 56))(v238, 1, 1, v240);
  }
  uint64_t v241 = (*(uint64_t (**)(uint64_t, uint64_t))(v233 + 24))(v234, v233);
  uint64_t v243 = v302;
  uint64_t v244 = v295;
  if (*(void *)(v302 + 16) && (unint64_t v245 = specialized __RawDictionaryStorage.find<A>(_:)(v241, v242), (v246 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v243 + 56) + 72 * v245, (uint64_t)&v343);
  }
  else
  {
    uint64_t v347 = 0;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v343 = 0u;
    long long v344 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v247 = v244 + v237[16];
  if (*((void *)&v344 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v343, (uint64_t)v327);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v248 = swift_getAssociatedTypeWitness();
    uint64_t v243 = v302;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v343);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v248 - 8) + 56))(v247, 0, 1, v248);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v343, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v249 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v249 - 8) + 56))(v247, 1, 1, v249);
  }
  uint64_t v250 = (*(uint64_t (**)(uint64_t, uint64_t))(v235 + 24))(v236, v235);
  if (*(void *)(v243 + 16) && (unint64_t v252 = specialized __RawDictionaryStorage.find<A>(_:)(v250, v251), (v253 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v243 + 56) + 72 * v252, (uint64_t)&v343);
  }
  else
  {
    uint64_t v347 = 0;
    long long v345 = 0u;
    long long v346 = 0u;
    long long v343 = 0u;
    long long v344 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v254 = v244 + v237[20];
  if (*((void *)&v344 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v343, (uint64_t)v327);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v255 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v343);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v255 - 8) + 56))(v254, 0, 1, v255);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v343, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v256 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v256 - 8) + 56))(v254, 1, 1, v256);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v257 = (void *)(v244 + v237[24]);
  uint64_t v258 = v312;
  void *v257 = v313;
  v257[1] = v258;
  char v259 = v316;
  v257[2] = v318;
  v257[3] = v259;
  uint64_t v260 = v320;
  v257[4] = v315;
  v257[5] = v260;
  uint64_t v261 = v314;
  v257[6] = v319;
  v257[7] = v261;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v237 - 1) + 56))(v244, 0, 1, v237);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v16 = *(_OWORD *)(v11 + 176);
  v23[10] = *(_OWORD *)(v11 + 160);
  v23[11] = v16;
  uint64_t v24 = *(void *)(v11 + 192);
  long long v17 = *(_OWORD *)(v11 + 112);
  v23[6] = *(_OWORD *)(v11 + 96);
  v23[7] = v17;
  long long v18 = *(_OWORD *)(v11 + 144);
  v23[8] = *(_OWORD *)(v11 + 128);
  v23[9] = v18;
  long long v19 = *(_OWORD *)(v11 + 48);
  v23[2] = *(_OWORD *)(v11 + 32);
  v23[3] = v19;
  long long v20 = *(_OWORD *)(v11 + 80);
  v23[4] = *(_OWORD *)(v11 + 64);
  v23[5] = v20;
  long long v21 = *(_OWORD *)(v11 + 16);
  v23[0] = *(_OWORD *)v11;
  v23[1] = v21;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  *(void *)&double result = AttributedString.Runs.AttributesSlice5.init(runs:)(v11, a1, a2, a3, a5, a7, a8, a4, a9, a10, a11).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice5.Iterator.next()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 216);
  uint64_t v6 = *(void *)(v2 + 224);
  uint64_t v7 = *(void *)(v2 + 232);
  uint64_t v8 = *(void *)(v2 + 240);
  uint64_t v10 = *(long long **)(v2 + 168);
  uint64_t v9 = *(void *)(v2 + 176);
  uint64_t v11 = *(void *)(v2 + 192);
  uint64_t v316 = *(void *)(v2 + 184);
  uint64_t v317 = v9;
  uint64_t v310 = v11;
  if (static BigString.Index.== infix(_:_:)())
  {
    swift_getAssociatedTypeWitness();
    uint64_t v352 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&long long v353 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v353 + 1) = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&long long v354 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v354 + 1) = type metadata accessor for Optional();
    *(void *)&long long v355 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(a2, 1, 1, TupleTypeMetadata);
  }
  uint64_t v308 = v10;
  uint64_t v289 = a1;
  uint64_t v300 = a2;
  uint64_t v14 = *(void *)v2;
  long long v15 = *(_OWORD *)(v2 + 24);
  long long v375 = *(_OWORD *)(v2 + 8);
  long long v376 = v15;
  long long v16 = *(_OWORD *)(v2 + 56);
  long long v377 = *(_OWORD *)(v2 + 40);
  long long v378 = v16;
  uint64_t v302 = *(void *)(v2 + 72);
  long long v17 = *(void **)(v2 + 80);
  uint64_t v318 = *(void *)(v2 + 88);
  long long v319 = v17;
  uint64_t v18 = *(void *)(v2 + 96);
  uint64_t v314 = *(void *)(v2 + 104);
  uint64_t v315 = v18;
  uint64_t v313 = *(void **)(v2 + 112);
  uint64_t v311 = *(void *)(v2 + 120);
  uint64_t v19 = *(void *)(v2 + 136);
  uint64_t v309 = *(void *)(v2 + 128);
  uint64_t v20 = *(void *)(v2 + 144);
  long long v21 = *(long long **)(v2 + 152);
  uint64_t v22 = *(void **)(v2 + 160);
  uint64_t v321 = v14;
  swift_retain();
  long long v323 = (uint64_t *)v20;
  uint64_t v324 = v19;
  long long v322 = v21;
  uint64_t v320 = v22;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_299;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
    goto LABEL_302;
  }
  uint64_t v296 = (void *)v2;
  uint64_t v23 = *(void *)(v321 + 64);
  uint64_t v24 = *(void *)(v321 + 72);
  uint64_t v26 = *(void *)(v321 + 80);
  uint64_t v25 = *(void *)(v321 + 88);
  swift_unknownObjectRetain();
  uint64_t v305 = v5;
  uint64_t v312 = v8;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v23) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  if (result < 0) {
    goto LABEL_301;
  }
  uint64_t v28 = result;
  if (v27 < result) {
    goto LABEL_301;
  }
  uint64_t v303 = v7;
  uint64_t v304 = v6;
  if (!v23 || result >= v26 || !*(_WORD *)(v23 + 16))
  {
    unint64_t v40 = swift_unknownObjectRetain();
    unint64_t v41 = specialized Rope._endPath.getter(v40);
    swift_unknownObjectRelease();
    uint64_t v32 = 0;
    uint64_t v28 = 0;
    uint64_t v42 = 0;
    if (!v23) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v307 = v24;
  uint64_t v29 = *(unsigned __int8 *)(v23 + 18);
  if (*(unsigned char *)(v23 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v30 = v23;
    while (1)
    {
      uint64_t v33 = *(unsigned __int16 *)(v30 + 16);
      if (!*(_WORD *)(v30 + 16)) {
        break;
      }
      uint64_t v34 = *(void *)(v30 + 40);
      BOOL v35 = __OFSUB__(v28, v34);
      uint64_t v36 = v28 - v34;
      if (v35) {
        goto LABEL_291;
      }
      if (__OFADD__(v36, 1)) {
        goto LABEL_292;
      }
      if (v36 + 1 < 1)
      {
        uint64_t v33 = 0;
        goto LABEL_17;
      }
      if (v33 == 1)
      {
        uint64_t v28 = v36;
        break;
      }
      BOOL v37 = (uint64_t *)(v30 + 64);
      uint64_t v38 = 1;
      while (1)
      {
        uint64_t v39 = *v37;
        v37 += 3;
        uint64_t v28 = v36 - v39;
        if (__OFSUB__(v36, v39)) {
          goto LABEL_285;
        }
        if (__OFADD__(v28, 1))
        {
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
          goto LABEL_289;
        }
        if (v28 + 1 < 1) {
          break;
        }
        ++v38;
        uint64_t v36 = v28;
        if (v33 == v38) {
          goto LABEL_16;
        }
      }
      uint64_t v33 = v38;
      uint64_t v28 = v36;
LABEL_17:
      char v31 = (4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C;
      uint64_t v29 = ((-15 << v31) - 1) & v29 | (v33 << v31);
      uint64_t v32 = *(void *)(v30 + 24 + 24 * v33);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v30 = v32;
      if (!*(unsigned char *)(v32 + 18)) {
        goto LABEL_79;
      }
    }
LABEL_16:
    if (!v28) {
      goto LABEL_17;
    }
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v32 = v23;
LABEL_79:
  uint64_t v87 = *(unsigned __int16 *)(v32 + 16);
  if (!*(_WORD *)(v32 + 16)) {
    goto LABEL_101;
  }
  uint64_t v88 = *(void *)(v32 + 24);
  BOOL v35 = __OFSUB__(v28, v88);
  uint64_t v89 = v28 - v88;
  if (v35)
  {
LABEL_326:
    __break(1u);
    goto LABEL_327;
  }
  if (__OFADD__(v89, 1))
  {
LABEL_327:
    __break(1u);
    goto LABEL_328;
  }
  if (v89 + 1 < 1)
  {
    uint64_t v87 = 0;
  }
  else
  {
    if (v87 == 1)
    {
      uint64_t v28 = v89;
LABEL_101:
      if (v28)
      {
LABEL_324:
        __break(1u);
        goto LABEL_325;
      }
      goto LABEL_102;
    }
    uint64_t v93 = (uint64_t *)(v32 + 48);
    uint64_t v94 = 1;
    while (1)
    {
      uint64_t v95 = *v93;
      v93 += 3;
      uint64_t v28 = v89 - v95;
      if (__OFSUB__(v89, v95)) {
        goto LABEL_320;
      }
      if (__OFADD__(v28, 1)) {
        goto LABEL_321;
      }
      if (v28 + 1 < 1) {
        break;
      }
      ++v94;
      uint64_t v89 = v28;
      if (v87 == v94) {
        goto LABEL_101;
      }
    }
    uint64_t v87 = v94;
    uint64_t v28 = v89;
  }
LABEL_102:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v41 = v29 & 0xFFFFFFFFFFFFF0FFLL | (v87 << 8);
  uint64_t v24 = v307;
LABEL_32:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v25, v41, v32, v23, v24);
  swift_unknownObjectRelease_n();
  uint64_t v42 = v28;
LABEL_33:
  long long v43 = *(_OWORD *)(v321 + 16);
  long long v44 = *(_OWORD *)(v321 + 32);
  long long v399 = *(_OWORD *)(v321 + 48);
  v398[1] = v44;
  v398[0] = v43;
  long long v45 = *(_OWORD *)(v321 + 16);
  long long v46 = *(_OWORD *)(v321 + 32);
  v400[2] = v399;
  v400[1] = v46;
  v400[0] = v45;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v400, (uint64_t)v401);
  outlined retain of Locale((uint64_t)v401);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v398);
  if (__OFSUB__(0, v42))
  {
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }
  uint64_t v47 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v49 = v48;
  uint64_t result = outlined release of Locale((uint64_t)&v379);
  if (v25 != *(void *)(v321 + 88))
  {
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
    goto LABEL_306;
  }
  uint64_t v307 = v49;
  if (v32)
  {
    unint64_t v50 = (void *)(v32 + 24 * ((v41 >> ((4 * *(unsigned char *)(v32 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v51 = v50[4];
    unint64_t v306 = v50[3];
    uint64_t v52 = v50[5];
    swift_retain();
    uint64_t v299 = v51;
    swift_bridgeObjectRetain();
    uint64_t v288 = v52;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v53 = *(void *)(v321 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v306 = specialized Rope._Node.subscript.getter(v41, v53);
    uint64_t v299 = v54;
    uint64_t v288 = v55;
    swift_unknownObjectRelease();
  }
  if (static BigString.Index.< infix(_:_:)()) {
    uint64_t v56 = v47;
  }
  else {
    uint64_t v56 = v324;
  }
  uint64_t v301 = v56;
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v57 = result + v306;
  if (__OFADD__(result, v306)) {
    goto LABEL_304;
  }
  uint64_t v58 = (long long *)(v321 + 16);
  uint64_t v59 = BigString.Index.utf8Offset.getter();
  if (v59 >= v57) {
    uint64_t v60 = v57;
  }
  else {
    uint64_t v60 = v59;
  }
  long long v61 = *v58;
  long long v62 = *(_OWORD *)(v321 + 32);
  long long v397 = *(_OWORD *)(v321 + 48);
  v396[1] = v62;
  v396[0] = v61;
  long long v63 = *v58;
  long long v64 = *(_OWORD *)(v321 + 32);
  uint64_t v295 = (long long *)(v321 + 16);
  v402[2] = v397;
  v402[1] = v64;
  v402[0] = v63;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v402, (uint64_t)v403);
  outlined retain of Locale((uint64_t)v403);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v396);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v60, result)) {
    goto LABEL_305;
  }
  BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v380);
  char v65 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v65)
  {
LABEL_306:
    __break(1u);
    goto LABEL_307;
  }
  long long v353 = v375;
  long long v354 = v376;
  long long v355 = v377;
  uint64_t v67 = v296[25];
  uint64_t v66 = v296[26];
  long long v356 = v378;
  uint64_t v352 = v321;
  uint64_t v357 = v302;
  uint64_t v358 = v319;
  uint64_t v359 = v318;
  uint64_t v360 = v315;
  uint64_t v361 = v314;
  uint64_t v362 = v313;
  uint64_t v363 = v311;
  uint64_t v364 = v309;
  uint64_t v365 = v324;
  uint64_t v366 = (uint64_t)v323;
  uint64_t v367 = v322;
  uint64_t v368 = v320;
  uint64_t v369 = v308;
  uint64_t v370 = v317;
  uint64_t v371 = v316;
  uint64_t v372 = v310;
  uint64_t v307 = v67;
  uint64_t v373 = v67;
  uint64_t v287 = v66;
  uint64_t v374 = v66;
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v352);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_307:
    __break(1u);
    goto LABEL_308;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_308:
    __break(1u);
    goto LABEL_309;
  }
  if (!*(void *)(v307 + 16))
  {
LABEL_309:
    __break(1u);
LABEL_310:
    __break(1u);
    goto LABEL_311;
  }
  uint64_t v315 = *(void *)(v307 + 16);
  uint64_t v68 = v321;
  uint64_t v70 = *(void *)(v321 + 64);
  uint64_t v69 = *(void *)(v321 + 72);
  uint64_t v71 = *(void *)(v321 + 80);
  uint64_t v311 = *(void *)(v321 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v70) {
    uint64_t v72 = v71;
  }
  else {
    uint64_t v72 = 0;
  }
  if (result < 0) {
    goto LABEL_310;
  }
  uint64_t v73 = result;
  if (v72 < result) {
    goto LABEL_310;
  }
  if (v70 && result < v71 && *(_WORD *)(v70 + 16))
  {
    uint64_t v324 = v69;
    uint64_t v74 = *(unsigned __int8 *)(v70 + 18);
    if (*(unsigned char *)(v70 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v75 = v73;
      uint64_t v76 = v70;
      while (1)
      {
        uint64_t v79 = *(unsigned __int16 *)(v76 + 16);
        if (!*(_WORD *)(v76 + 16)) {
          goto LABEL_61;
        }
        uint64_t v80 = *(void *)(v76 + 40);
        BOOL v35 = __OFSUB__(v75, v80);
        uint64_t v81 = v75 - v80;
        if (v35) {
          goto LABEL_293;
        }
        if (__OFADD__(v81, 1)) {
          goto LABEL_294;
        }
        if (v81 + 1 < 1)
        {
          uint64_t v79 = 0;
        }
        else
        {
          if (v79 == 1)
          {
            uint64_t v75 = v81;
LABEL_61:
            if (v75) {
              goto LABEL_290;
            }
            goto LABEL_62;
          }
          uint64_t v82 = (uint64_t *)(v76 + 64);
          uint64_t v83 = 1;
          while (1)
          {
            uint64_t v84 = *v82;
            v82 += 3;
            uint64_t v75 = v81 - v84;
            if (__OFSUB__(v81, v84)) {
              goto LABEL_287;
            }
            if (__OFADD__(v75, 1)) {
              goto LABEL_288;
            }
            if (v75 + 1 < 1) {
              break;
            }
            ++v83;
            uint64_t v81 = v75;
            if (v79 == v83) {
              goto LABEL_61;
            }
          }
          uint64_t v79 = v83;
          uint64_t v75 = v81;
        }
LABEL_62:
        char v77 = (4 * *(unsigned char *)(v76 + 18) + 8) & 0x3C;
        uint64_t v74 = ((-15 << v77) - 1) & v74 | (v79 << v77);
        uint64_t v78 = *(void *)(v76 + 24 + 24 * v79);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v76 = v78;
        if (!*(unsigned char *)(v78 + 18)) {
          goto LABEL_86;
        }
      }
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v75 = v73;
    uint64_t v78 = v70;
LABEL_86:
    uint64_t v90 = *(unsigned __int16 *)(v78 + 16);
    uint64_t v309 = v78;
    if (v90)
    {
      uint64_t v91 = *(void *)(v78 + 24);
      BOOL v35 = __OFSUB__(v75, v91);
      uint64_t v92 = v75 - v91;
      uint64_t v68 = v321;
      if (v35)
      {
LABEL_328:
        __break(1u);
        goto LABEL_329;
      }
      if (__OFADD__(v92, 1))
      {
LABEL_329:
        __break(1u);
LABEL_330:
        __break(1u);
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
        return result;
      }
      if (v92 + 1 < 1)
      {
        uint64_t v90 = 0;
      }
      else
      {
        if (v90 == 1)
        {
          uint64_t v75 = v92;
          goto LABEL_108;
        }
        uint64_t v96 = (uint64_t *)(v309 + 48);
        uint64_t v97 = 1;
        while (1)
        {
          uint64_t v98 = *v96;
          v96 += 3;
          uint64_t v75 = v92 - v98;
          if (__OFSUB__(v92, v98)) {
            goto LABEL_322;
          }
          if (__OFADD__(v75, 1)) {
            goto LABEL_323;
          }
          if (v75 + 1 < 1) {
            break;
          }
          ++v97;
          uint64_t v92 = v75;
          if (v90 == v97) {
            goto LABEL_108;
          }
        }
        uint64_t v90 = v97;
        uint64_t v75 = v92;
      }
LABEL_109:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v306 = v74 & 0xFFFFFFFFFFFFF0FFLL | (v90 << 8);
      uint64_t v69 = v324;
      goto LABEL_77;
    }
    uint64_t v68 = v321;
LABEL_108:
    if (v75)
    {
LABEL_325:
      __break(1u);
      goto LABEL_326;
    }
    goto LABEL_109;
  }
  unint64_t v85 = swift_unknownObjectRetain();
  unint64_t v306 = specialized Rope._endPath.getter(v85);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v309 = 0;
  uint64_t v75 = 0;
  if (v70)
  {
LABEL_77:
    swift_unknownObjectRetain();
    uint64_t v86 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v311, v306, v309, v70, v69);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_111;
  }
  uint64_t v86 = 0;
LABEL_111:
  uint64_t v99 = v315;
  uint64_t v301 = v73 - v75;
  if (__OFSUB__(v73, v75))
  {
LABEL_311:
    __break(1u);
    goto LABEL_312;
  }
  long long v100 = *v295;
  long long v101 = v295[1];
  long long v395 = v295[2];
  v394[1] = v101;
  v394[0] = v100;
  long long v102 = *v295;
  long long v103 = v295[1];
  v404[2] = v395;
  v404[1] = v103;
  v404[0] = v102;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v404, (uint64_t)v405);
  outlined retain of Locale((uint64_t)v405);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v394);
  if (__OFSUB__(0, v75))
  {
LABEL_312:
    __break(1u);
    goto LABEL_313;
  }
  uint64_t v104 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v286 = v105;
  uint64_t v107 = v106;
  uint64_t v109 = v108;
  uint64_t result = outlined release of Locale((uint64_t)&v381);
  if (v86 >= v302)
  {
LABEL_313:
    __break(1u);
    goto LABEL_314;
  }
  if (v311 != *(void *)(v68 + 88))
  {
LABEL_314:
    __break(1u);
LABEL_315:
    __break(1u);
LABEL_316:
    __break(1u);
    goto LABEL_317;
  }
  v284[1] = v109;
  v284[2] = v107;
  v284[3] = v104;
  uint64_t v110 = *(uint64_t **)(v68 + 64);
  uint64_t v111 = v309;
  if (v309)
  {
    unint64_t v112 = v306;
    uint64_t v113 = v309 + 24 * ((v306 >> ((4 * *(unsigned char *)(v309 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v114 = v68;
    uint64_t v115 = v86;
    uint64_t v117 = *(void *)(v113 + 32);
    uint64_t v116 = *(void *)(v113 + 40);
    swift_bridgeObjectRetain();
    uint64_t v285 = v116;
    uint64_t v86 = v115;
    uint64_t v68 = v114;
    uint64_t v99 = v315;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v118 = v311;
    uint64_t v119 = v311;
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v112 = v306;
    specialized Rope._Node.subscript.getter(v306, (uint64_t)v110);
    uint64_t v117 = v120;
    uint64_t v285 = v121;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v110 = *(uint64_t **)(v68 + 64);
    uint64_t v119 = *(void *)(v68 + 88);
    uint64_t v118 = v311;
  }
  uint64_t v298 = v86 + 1;
  uint64_t v332 = v118;
  uint64_t v333 = v112;
  long long v322 = (long long *)&v386;
  long long v323 = &v340;
  unint64_t v293 = (uint64_t *)(v307 + 40);
  uint64_t v334 = v309;
  uint64_t v318 = v117;
LABEL_119:
  if (v118 != v119) {
    goto LABEL_295;
  }
  uint64_t v297 = v119;
  if (v111)
  {
    unint64_t v122 = v306;
    unint64_t v123 = *(void *)(v111 + 24 * ((v306 >> ((4 * *(unsigned char *)(v111 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v122 = v306;
    unint64_t v123 = specialized Rope._Node.subscript.getter(v306, (uint64_t)v110);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v301, v123)) {
    goto LABEL_296;
  }
  uint64_t v292 = v301 + v123;
  if (v110)
  {
    unint64_t v124 = ((-15 << ((4 * *((unsigned char *)v110 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v110 + 18) | ((unint64_t)*((unsigned __int16 *)v110 + 8) << ((4 * *((unsigned char *)v110 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
  }
  else
  {
    unint64_t v124 = 0;
  }
  uint64_t v125 = v318;
  if (v122 >= v124) {
    goto LABEL_297;
  }
  uint64_t v309 = v111;
  if (v111)
  {
    char v126 = (4 * *(unsigned char *)(v111 + 18) + 8) & 0x3C;
    unint64_t v127 = ((v122 >> v126) & 0xF) + 1;
    if (v127 < *(unsigned __int16 *)(v111 + 16))
    {
      unint64_t v128 = (v127 << v126) | ((-15 << v126) - 1) & v122;
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_134:
      uint64_t v110 = (uint64_t *)v334;
      goto LABEL_142;
    }
  }
  int v129 = *((unsigned __int8 *)v110 + 18);
  char v130 = (4 * v129 + 8) & 0x3C;
  uint64_t v131 = (v122 >> v130) & 0xF;
  *(void *)&long long v384 = v131;
  if (v129)
  {
    swift_unknownObjectRetain();
    uint64_t v125 = v318;
    char v132 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v110 + 3), (uint64_t *)&v384, (uint64_t)&v332, (uint64_t)v110, v129);
    uint64_t result = swift_unknownObjectRelease();
    if (v132)
    {
      uint64_t result = swift_unknownObjectRelease_n();
      unint64_t v128 = v333;
      goto LABEL_134;
    }
  }
  else
  {
    uint64_t v133 = v131 + 1;
    if (v131 + 1 < (unint64_t)*((unsigned __int16 *)v110 + 8))
    {
      uint64_t result = swift_unknownObjectRelease_n();
      unint64_t v128 = (v133 << v130) | ((-15 << v130) - 1) & v122;
      uint64_t v111 = v309;
      goto LABEL_142;
    }
    uint64_t v111 = v309;
  }
  if (v110)
  {
    int v134 = *((unsigned __int8 *)v110 + 18);
    uint64_t v135 = *((unsigned __int16 *)v110 + 8);
    uint64_t result = swift_unknownObjectRelease_n();
    char v136 = (4 * v134 + 8) & 0x3C;
    uint64_t v137 = ((-15 << v136) - 1) & v134;
    uint64_t v138 = v135 << v136;
    uint64_t v111 = v309;
    unint64_t v128 = v137 | v138;
  }
  else
  {
    unint64_t v128 = 0;
  }
  uint64_t v110 = 0;
  uint64_t v332 = v297;
LABEL_142:
  if (v298 != v302)
  {
    if (v332 != *(void *)(v68 + 88))
    {
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
    uint64_t v311 = v332;
    uint64_t v290 = v110;
    unint64_t v291 = v128;
    if (v110)
    {
      uint64_t v139 = &v110[3 * ((v128 >> ((4 * *((unsigned char *)v110 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v140 = v139[4];
      uint64_t v141 = v139[5];
      swift_bridgeObjectRetain();
      uint64_t v294 = v141;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v142 = *(void *)(v68 + 64);
      swift_unknownObjectRetain();
      uint64_t v125 = v318;
      specialized Rope._Node.subscript.getter(v128, v142);
      uint64_t v294 = v143;
      uint64_t v140 = v144;
      swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v145 = 0;
    uint64_t v146 = v293;
    uint64_t v324 = v140;
    while (1)
    {
      uint64_t v148 = v145 + 1;
      if (__OFADD__(v145, 1))
      {
        __break(1u);
LABEL_285:
        __break(1u);
        goto LABEL_286;
      }
      uint64_t v149 = *(v146 - 1);
      uint64_t v150 = *v146;
      if (*(void *)(v125 + 16))
      {
        swift_bridgeObjectRetain_n();
        unint64_t v151 = specialized __RawDictionaryStorage.find<A>(_:)(v149, v150);
        if (v152)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v125 + 56) + 72 * v151, (uint64_t)&v347);
        }
        else
        {
          uint64_t v351 = 0;
          long long v349 = 0u;
          long long v350 = 0u;
          long long v347 = 0u;
          long long v348 = 0u;
        }
        swift_bridgeObjectRelease();
        uint64_t v140 = v324;
        if (!*(void *)(v324 + 16))
        {
LABEL_157:
          uint64_t v346 = 0;
          long long v344 = 0u;
          long long v345 = 0u;
          long long v342 = 0u;
          long long v343 = 0u;
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v351 = 0;
        long long v349 = 0u;
        long long v350 = 0u;
        long long v347 = 0u;
        long long v348 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v140 + 16)) {
          goto LABEL_157;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v153 = specialized __RawDictionaryStorage.find<A>(_:)(v149, v150);
      if (v154)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v140 + 56) + 72 * v153, (uint64_t)&v342);
      }
      else
      {
        uint64_t v346 = 0;
        long long v344 = 0u;
        long long v345 = 0u;
        long long v342 = 0u;
        long long v343 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_164:
      uint64_t v110 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      swift_bridgeObjectRelease();
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v347, (uint64_t)&v332, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v342, (uint64_t)v323, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v335)
      {
        if (v341) {
          goto LABEL_181;
        }
        outlined destroy of Any?((uint64_t)&v332, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v342, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?((uint64_t)&v347, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_151;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v332, (uint64_t)v330, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v341) {
        goto LABEL_180;
      }
      long long v155 = *((_OWORD *)v323 + 3);
      long long v327 = *((_OWORD *)v323 + 2);
      long long v328 = v155;
      uint64_t v329 = v323[8];
      long long v156 = *((_OWORD *)v323 + 1);
      long long v325 = *(_OWORD *)v323;
      long long v326 = v156;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v330, (uint64_t)v408);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v325, (uint64_t)v406);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v408, (uint64_t)&v384, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v406, (uint64_t)v322, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v385)
      {
        if (!v387)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v384);
LABEL_149:
          char v147 = 0;
          goto LABEL_150;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v384, (uint64_t)&v391);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v322, (uint64_t)v389);
        uint64_t v157 = *((void *)&v392 + 1);
        uint64_t v314 = v393;
        uint64_t v313 = __swift_project_boxed_opaque_existential_1(&v391, *((uint64_t *)&v392 + 1));
        uint64_t v320 = v284;
        uint64_t v158 = *(void *)(v157 - 8);
        MEMORY[0x1F4188790](v313);
        uint64_t v160 = (char *)v284 - ((v159 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v389, (uint64_t)v388);
        uint64_t v161 = type metadata accessor for Optional();
        long long v319 = v284;
        uint64_t v162 = *(void *)(v161 - 8);
        MEMORY[0x1F4188790](v161);
        uint64_t v164 = (char *)v284 - v163;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        int v165 = swift_dynamicCast();
        int v166 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v158 + 56);
        if (v165)
        {
          v166(v164, 0, 1, v157);
          (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v160, v164, v157);
          char v147 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v158 + 8))(v160, v157);
        }
        else
        {
          v166(v164, 1, 1, v157);
          (*(void (**)(char *, uint64_t))(v162 + 8))(v164, v161);
          char v147 = 0;
        }
        uint64_t v68 = v321;
        uint64_t v99 = v315;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v389);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v391);
        uint64_t v125 = v318;
      }
      else
      {
        if (v387)
        {
          outlined destroy of Any?((uint64_t)v322, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_149;
        }
        char v147 = 1;
      }
LABEL_150:
      outlined destroy of Any?((uint64_t)v406, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v408, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v325);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v330);
      outlined destroy of Any?((uint64_t)&v332, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v342, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v347, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v147 & 1) == 0) {
        goto LABEL_182;
      }
LABEL_151:
      v146 += 2;
      ++v145;
      uint64_t v140 = v324;
      if (v148 == v99)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v110 = *(uint64_t **)(v68 + 64);
        uint64_t v119 = *(void *)(v68 + 88);
        uint64_t v301 = v292;
        uint64_t v118 = v311;
        uint64_t v332 = v311;
        uint64_t v333 = v291;
        uint64_t v111 = (uint64_t)v290;
        unint64_t v306 = v291;
        uint64_t v334 = (uint64_t)v290;
        BOOL v35 = __OFADD__(v298++, 1);
        if (!v35) {
          goto LABEL_119;
        }
        __break(1u);
LABEL_180:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v330);
LABEL_181:
        outlined destroy of Any?((uint64_t)&v332, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v342, v110);
        outlined destroy of Any?((uint64_t)&v347, v110);
LABEL_182:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v111 = v309;
        unint64_t v122 = v306;
        goto LABEL_183;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_183:
  if (v297 != *(void *)(v68 + 88)) {
    goto LABEL_315;
  }
  if (v111)
  {
    unint64_t v167 = *(void *)(v111 + 24 * ((v122 >> ((4 * *(unsigned char *)(v111 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v168 = *(void *)(v68 + 64);
    swift_unknownObjectRetain();
    unint64_t v167 = specialized Rope._Node.subscript.getter(v122, v168);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v169 = v301 + v167;
  if (__OFADD__(v301, v167)) {
    goto LABEL_316;
  }
  unint64_t v170 = v295;
  long long v171 = *v295;
  long long v172 = v295[1];
  long long v393 = v295[2];
  long long v392 = v172;
  long long v391 = v171;
  long long v173 = *v295;
  long long v174 = v295[1];
  v406[2] = v393;
  v406[1] = v174;
  v406[0] = v173;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v406, (uint64_t)v407);
  outlined retain of Locale((uint64_t)v407);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v391);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v169, result))
  {
LABEL_317:
    __break(1u);
LABEL_318:
    __break(1u);
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
LABEL_321:
    __break(1u);
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
    goto LABEL_324;
  }
  uint64_t v175 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v177 = v176;
  uint64_t v179 = v178;
  uint64_t v181 = v180;
  outlined release of Locale((uint64_t)&v382);
  uint64_t v182 = v308;
  uint64_t v184 = v316;
  uint64_t v183 = v317;
  uint64_t v185 = v310;
  char v186 = static BigString.Index.< infix(_:_:)();
  if (v186) {
    char v187 = v182;
  }
  else {
    char v187 = (long long *)v175;
  }
  if (v186) {
    uint64_t v188 = v183;
  }
  else {
    uint64_t v188 = v177;
  }
  if (v186) {
    uint64_t v189 = v184;
  }
  else {
    uint64_t v189 = v179;
  }
  uint64_t v190 = v187;
  if (v186) {
    uint64_t v191 = v185;
  }
  else {
    uint64_t v191 = v181;
  }
  long long v192 = *v170;
  long long v193 = v170[1];
  long long v390 = v170[2];
  v389[1] = v193;
  v389[0] = v192;
  long long v194 = *v170;
  long long v195 = v170[1];
  uint64_t v196 = v188;
  v408[1] = v195;
  v408[2] = v390;
  v408[0] = v194;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v408, (uint64_t)v409);
  outlined retain of Locale((uint64_t)v409);
  uint64_t v197 = v304;
  uint64_t v198 = v305;
  uint64_t v199 = v303;
  uint64_t v200 = v312;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_318;
  }
  *(void *)&long long v342 = v198;
  *((void *)&v342 + 1) = v197;
  *(void *)&long long v343 = v199;
  *((void *)&v343 + 1) = v200;
  *(void *)&long long v344 = v190;
  *((void *)&v344 + 1) = v196;
  *(void *)&long long v345 = v189;
  *((void *)&v345 + 1) = v191;
  uint64_t v201 = v287;
  uint64_t v202 = *(void *)(v287 + 16);
  if (v202)
  {
    uint64_t v324 = v196;
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v204 = 40;
      uint64_t v205 = v202;
      long long v323 = (uint64_t *)v189;
      while (*(void *)(v201 + v204))
      {
        swift_bridgeObjectRelease();
        v204 += 16;
        if (!--v205)
        {
          swift_bridgeObjectRelease();
          uint64_t v207 = v303;
          uint64_t v206 = v304;
          uint64_t v208 = v312;
          uint64_t v209 = v305;
          goto LABEL_213;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      outlined release of Locale((uint64_t)&v383);
      uint64_t v206 = v304;
      uint64_t v209 = v305;
      uint64_t v207 = v303;
      uint64_t v208 = v312;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_330;
      }
      v330[0] = v209;
      v330[1] = v206;
      v330[2] = v207;
      v330[3] = v208;
      v330[4] = v209;
      v330[5] = v206;
      v330[6] = v207;
      v330[7] = v208;
      specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v330, &v332);
      outlined release of Locale((uint64_t)&v384);
      uint64_t v210 = v339;
      if (v339 != 2)
      {
        uint64_t v190 = v336;
        long long v323 = (uint64_t *)v338;
        uint64_t v324 = v337;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        uint64_t v191 = v210;
        if (result) {
          goto LABEL_331;
        }
      }
LABEL_213:
      *(void *)&long long v325 = v209;
      *((void *)&v325 + 1) = v206;
      *(void *)&long long v326 = v207;
      *((void *)&v326 + 1) = v208;
      uint64_t v189 = (uint64_t)v323;
      *(void *)&long long v327 = v190;
      *((void *)&v327 + 1) = v324;
      *(void *)&long long v328 = v323;
      *((void *)&v328 + 1) = v191;
      uint64_t v211 = *(void *)(v201 + 16);
      if (!v211) {
        goto LABEL_217;
      }
      uint64_t v212 = 40;
      while (!*(void *)(v201 + v212))
      {
        v212 += 16;
        if (!--v211) {
          goto LABEL_217;
        }
      }
      long long v322 = v190;
      swift_bridgeObjectRetain();
      unint64_t v269 = (unint64_t *)(v201 + 40);
      unint64_t v270 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v271 = *v269;
        if (*v269)
        {
          uint64_t v272 = *(v269 - 1);
          if ((v271 & 0x2000000000000000) != 0 ? HIBYTE(v271) & 0xF : v272 & 0xFFFFFFFFFFFFLL)
          {
            if ((v271 & 0x1000000000000000) != 0)
            {
              int v274 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v271 & 0x2000000000000000) != 0)
              {
                uint64_t v332 = *(v269 - 1);
                uint64_t v333 = v271 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v272 & 0x1000000000000000) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }
              int v274 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v270 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v270 + 2) + 1, 1, v270);
            }
            unint64_t v276 = *((void *)v270 + 2);
            unint64_t v275 = *((void *)v270 + 3);
            if (v276 >= v275 >> 1) {
              unint64_t v270 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v275 > 1), v276 + 1, 1, v270);
            }
            *((void *)v270 + 2) = v276 + 1;
            *(_DWORD *)&v270[4 * v276 + 32] = v274;
          }
        }
        v269 += 2;
        --v202;
      }
      while (v202);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v388);
      uint64_t v277 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v270);
      uint64_t v279 = v278;
      uint64_t v189 = v280;
      uint64_t v282 = v281;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v332);
      if (v282 == 2)
      {
        outlined release of Locale((uint64_t)v389);
        swift_release();
        uint64_t v203 = v289;
        uint64_t v190 = v322;
        uint64_t v189 = (uint64_t)v323;
        goto LABEL_218;
      }
      char v283 = static BigString.Index.< infix(_:_:)();
      outlined release of Locale((uint64_t)v389);
      swift_release();
      uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v352);
      uint64_t v203 = v289;
      if ((v283 & 1) == 0)
      {
        uint64_t v191 = v282;
        uint64_t v190 = (long long *)v277;
        uint64_t v196 = v279;
        goto LABEL_220;
      }
      goto LABEL_332;
    }
LABEL_217:
    outlined release of Locale((uint64_t)v389);
    swift_release();
    uint64_t v203 = v289;
LABEL_218:
    uint64_t v196 = v324;
  }
  else
  {
    outlined release of Locale((uint64_t)v389);
    swift_release();
    uint64_t v203 = v289;
  }
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v352);
LABEL_220:
  uint64_t v213 = v299;
  uint64_t v214 = v296;
  uint64_t v215 = v296[27];
  uint64_t v216 = v296[28];
  uint64_t v217 = (void *)v296[29];
  long long v319 = (void *)v296[30];
  uint64_t v320 = v217;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_319;
  }
  uint64_t v316 = v216;
  uint64_t v317 = v215;
  v214[27] = v190;
  v214[28] = v196;
  v214[29] = v189;
  v214[30] = v191;
  uint64_t v318 = v191;
  uint64_t v218 = (*(uint64_t (**)(void, void))(v203[7] + 24))(v203[2], v203[7]);
  if (*(void *)(v213 + 16) && (unint64_t v220 = specialized __RawDictionaryStorage.find<A>(_:)(v218, v219), (v221 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v213 + 56) + 72 * v220, (uint64_t)&v347);
  }
  else
  {
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
  }
  swift_bridgeObjectRelease();
  long long v322 = v190;
  long long v323 = (uint64_t *)v189;
  if (*((void *)&v348 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v347, (uint64_t)v331);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v223 = v300;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v347);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v223, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v347, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v224 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v224 - 8) + 56))(v300, 1, 1, v224);
  }
  uint64_t v225 = (*(uint64_t (**)(void, void))(v203[8] + 24))(v203[3], v203[8]);
  uint64_t v227 = *(void *)(v213 + 16);
  uint64_t v324 = v196;
  if (v227 && (unint64_t v228 = specialized __RawDictionaryStorage.find<A>(_:)(v225, v226), (v229 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v213 + 56) + 72 * v228, (uint64_t)&v347);
  }
  else
  {
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v331[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v331[1] = type metadata accessor for Optional();
  uint64_t v230 = v203[9];
  uint64_t v231 = v203[4];
  swift_getAssociatedTypeWitness();
  v331[2] = type metadata accessor for Optional();
  char v232 = v203;
  uint64_t v233 = v203[10];
  uint64_t v234 = v232[5];
  swift_getAssociatedTypeWitness();
  v331[3] = type metadata accessor for Optional();
  uint64_t v235 = v232[6];
  uint64_t v314 = v232[11];
  uint64_t v315 = v235;
  swift_getAssociatedTypeWitness();
  v331[4] = type metadata accessor for Optional();
  v331[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v236 = (int *)swift_getTupleTypeMetadata();
  uint64_t v237 = v300 + v236[12];
  if (*((void *)&v348 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v347, (uint64_t)v331);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v238 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v347);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v238 - 8) + 56))(v237, 0, 1, v238);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v347, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v239 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v239 - 8) + 56))(v237, 1, 1, v239);
  }
  uint64_t v240 = (*(uint64_t (**)(uint64_t, uint64_t))(v230 + 24))(v231, v230);
  uint64_t v242 = v299;
  uint64_t v243 = v300;
  if (*(void *)(v299 + 16) && (unint64_t v244 = specialized __RawDictionaryStorage.find<A>(_:)(v240, v241), (v245 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v242 + 56) + 72 * v244, (uint64_t)&v347);
  }
  else
  {
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v246 = v243 + v236[16];
  if (*((void *)&v348 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v347, (uint64_t)v331);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v247 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v347);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v247 - 8) + 56))(v246, 0, 1, v247);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v347, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v248 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v248 - 8) + 56))(v246, 1, 1, v248);
  }
  uint64_t v249 = (*(uint64_t (**)(uint64_t, uint64_t))(v233 + 24))(v234, v233);
  uint64_t v251 = v299;
  uint64_t v252 = v324;
  if (*(void *)(v299 + 16) && (unint64_t v253 = specialized __RawDictionaryStorage.find<A>(_:)(v249, v250), (v254 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v251 + 56) + 72 * v253, (uint64_t)&v347);
  }
  else
  {
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v255 = v243 + v236[20];
  if (*((void *)&v348 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v347, (uint64_t)v331);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v256 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v347);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v256 - 8) + 56))(v255, 0, 1, v256);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v347, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v257 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v257 - 8) + 56))(v255, 1, 1, v257);
  }
  uint64_t v258 = (*(uint64_t (**)(uint64_t, uint64_t))(v314 + 24))(v315, v314);
  if (*(void *)(v251 + 16) && (unint64_t v260 = specialized __RawDictionaryStorage.find<A>(_:)(v258, v259), (v261 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v251 + 56) + 72 * v260, (uint64_t)&v347);
  }
  else
  {
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v347 = 0u;
    long long v348 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v262 = v243 + v236[24];
  if (*((void *)&v348 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v347, (uint64_t)v331);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v263 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v347);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v263 - 8) + 56))(v262, 0, 1, v263);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v347, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v264 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v264 - 8) + 56))(v262, 1, 1, v264);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v265 = (void *)(v243 + v236[28]);
  uint64_t v266 = v316;
  *unint64_t v265 = v317;
  v265[1] = v266;
  uint64_t v267 = v319;
  v265[2] = v320;
  v265[3] = v267;
  v265[4] = v322;
  v265[5] = v252;
  uint64_t v268 = v318;
  v265[6] = v323;
  v265[7] = v268;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v236 - 1) + 56))(v243, 0, 1, v236);
}

__n128 AttributedString.Runs.AttributesSlice1.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 136);
  long long v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.Runs.AttributesSlice1.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 168);
  long long v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.index(after:)(_OWORD *a1, uint64_t a2)
{
  return AttributedString.Runs.AttributesSlice1.index(after:)(a1, a2, (void (*)(_OWORD *, uint64_t, uint64_t))AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:));
}

uint64_t AttributedString.Runs.AttributesSlice1.index(before:)(_OWORD *a1, uint64_t a2)
{
  return AttributedString.Runs.AttributesSlice1.index(after:)(a1, a2, (void (*)(_OWORD *, uint64_t, uint64_t))AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:));
}

uint64_t AttributedString.Runs.AttributesSlice1.index(after:)(_OWORD *a1, uint64_t a2, void (*a3)(_OWORD *, uint64_t, uint64_t))
{
  long long v5 = *(_OWORD *)(v3 + 144);
  long long v6 = *(_OWORD *)(v3 + 176);
  long long v32 = *(_OWORD *)(v3 + 160);
  long long v33 = v6;
  long long v7 = *(_OWORD *)(v3 + 80);
  long long v8 = *(_OWORD *)(v3 + 112);
  long long v28 = *(_OWORD *)(v3 + 96);
  long long v29 = v8;
  long long v9 = *(_OWORD *)(v3 + 112);
  long long v10 = *(_OWORD *)(v3 + 144);
  long long v30 = *(_OWORD *)(v3 + 128);
  long long v31 = v10;
  long long v11 = *(_OWORD *)(v3 + 16);
  long long v12 = *(_OWORD *)(v3 + 48);
  long long v24 = *(_OWORD *)(v3 + 32);
  long long v25 = v12;
  long long v13 = *(_OWORD *)(v3 + 48);
  long long v14 = *(_OWORD *)(v3 + 80);
  long long v26 = *(_OWORD *)(v3 + 64);
  long long v27 = v14;
  long long v15 = *(_OWORD *)(v3 + 16);
  v23[0] = *(_OWORD *)v3;
  v23[1] = v15;
  long long v16 = *(_OWORD *)(v3 + 176);
  _OWORD v21[12] = v32;
  v21[13] = v16;
  v21[8] = v28;
  v21[9] = v9;
  v21[10] = v30;
  v21[11] = v5;
  v21[4] = v24;
  v21[5] = v13;
  v21[6] = v26;
  v21[7] = v7;
  uint64_t v17 = *(void *)(v3 + 200);
  uint64_t v34 = *(void *)(v3 + 192);
  uint64_t v18 = *(void *)(v3 + 208);
  uint64_t v22 = *(void *)(v3 + 192);
  v21[2] = v23[0];
  v21[3] = v11;
  long long v19 = a1[1];
  v21[0] = *a1;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  a3(v21, v17, v18);
  return outlined release of AttributedString.Runs((uint64_t)v23);
}

uint64_t AttributedString.Runs.AttributesSlice1.subscript.getter(uint64_t a1, _OWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v202 = a1;
  uint64_t v203 = a4;
  uint64_t v199 = a2;
  long long v5 = *v4;
  long long v6 = v4[1];
  long long v7 = v4[2];
  v288[3] = v4[3];
  v288[2] = v7;
  long long v8 = v4[1];
  long long v9 = v4[2];
  long long v10 = *v4;
  v288[0] = v5;
  v288[1] = v8;
  long long v12 = v4[5];
  long long v11 = v4[6];
  long long v13 = v11;
  long long v292 = v4[7];
  long long v291 = v11;
  long long v14 = v4[3];
  long long v15 = v4[5];
  long long v289 = v4[4];
  long long v290 = v15;
  long long v17 = v4[9];
  long long v16 = v4[10];
  long long v18 = v16;
  long long v296 = v4[11];
  long long v295 = v16;
  long long v19 = v4[7];
  long long v20 = v4[9];
  long long v293 = v4[8];
  long long v294 = v20;
  long long v21 = v4[11];
  long long v263 = v18;
  long long v264 = v21;
  long long v259 = v13;
  long long v260 = v19;
  long long v261 = v293;
  long long v262 = v17;
  long long v256 = v9;
  long long v257 = v14;
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  uint64_t v25 = a3[2];
  uint64_t v24 = a3[3];
  uint64_t v26 = *((void *)v4 + 25);
  uint64_t v297 = *((void *)v4 + 24);
  uint64_t v27 = *((void *)v4 + 26);
  uint64_t v265 = *((void *)v4 + 24);
  v258[0] = v289;
  v258[1] = v12;
  long long v254 = v10;
  long long v255 = v6;
  *(void *)&long long v244 = v22;
  *((void *)&v244 + 1) = v23;
  *(void *)&long long v245 = v25;
  *((void *)&v245 + 1) = v24;
  outlined retain of AttributedString.Runs((uint64_t)v288);
  uint64_t v227 = v26;
  uint64_t v211 = v27;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((uint64_t *)&v249, (uint64_t *)&v244, v26, v27, (uint64_t *)&v269);
  unint64_t v201 = *((void *)&v269 + 1);
  uint64_t v206 = v270;
  uint64_t v207 = v269;
  outlined release of AttributedString.Runs((uint64_t)v288);
  long long v204 = v249;
  long long v205 = v250;
  uint64_t v216 = *((void *)&v295 + 1);
  long long v217 = v296;
  uint64_t v28 = v297;
  outlined retain of AttributedString.Runs((uint64_t)v288);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_200;
  }
  uint64_t v221 = v22;
  uint64_t v225 = v23;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_201:
    __break(1u);
    goto LABEL_202;
  }
  if (!*(void *)(v227 + 16))
  {
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
    goto LABEL_204;
  }
  uint64_t v30 = v25;
  uint64_t v31 = v24;
  uint64_t v230 = *(void *)(v227 + 16);
  uint64_t v200 = v28;
  uint64_t v32 = *(void *)&v288[0];
  uint64_t v33 = *(void *)(*(void *)&v288[0] + 64);
  uint64_t v34 = *(void *)(*(void *)&v288[0] + 72);
  uint64_t v35 = *(void *)(*(void *)&v288[0] + 80);
  uint64_t v228 = *(void *)(*(void *)&v288[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v219 = v30;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v33) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  if (result < 0) {
    goto LABEL_203;
  }
  uint64_t v37 = result;
  if (v36 < result) {
    goto LABEL_203;
  }
  uint64_t v222 = v32;
  uint64_t v218 = v31;
  *((void *)&v236 + 1) = v34;
  if (!v33 || result >= v35 || !*(_WORD *)(v33 + 16))
  {
    unint64_t v50 = swift_unknownObjectRetain();
    unint64_t v51 = specialized Rope._endPath.getter(v50);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v42 = 0;
    uint64_t v39 = 0;
    if (!v33)
    {
      uint64_t v52 = 0;
LABEL_49:
      uint64_t v224 = v37 - v39;
      if (__OFSUB__(v37, v39))
      {
LABEL_204:
        __break(1u);
        goto LABEL_205;
      }
      long long v59 = *(_OWORD *)(v32 + 16);
      long long v60 = *(_OWORD *)(v32 + 32);
      long long v281 = *(_OWORD *)(v32 + 48);
      v280[1] = v60;
      v280[0] = v59;
      long long v61 = *(_OWORD *)(v32 + 16);
      long long v62 = *(_OWORD *)(v32 + 32);
      v282[2] = v281;
      v282[1] = v62;
      v282[0] = v61;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v282, (uint64_t)v283);
      outlined retain of Locale((uint64_t)v283);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v280);
      if (__OFSUB__(0, v39))
      {
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }
      uint64_t v63 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v197 = v65;
      uint64_t v198 = v64;
      uint64_t v196 = v66;
      uint64_t result = outlined release of Locale((uint64_t)&v266);
      uint64_t v214 = *((void *)&v289 + 1);
      if (v52 >= *((uint64_t *)&v289 + 1))
      {
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }
      if (v228 != *(void *)(v32 + 88))
      {
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
      unint64_t v226 = v51;
      uint64_t v193 = v63;
      uint64_t v67 = *(uint64_t **)(v32 + 64);
      if (v42)
      {
        unint64_t v68 = v226;
        unint64_t v69 = v42 + 24 * ((v226 >> ((4 * *(unsigned char *)(v42 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v70 = *(void *)(v69 + 40);
        uint64_t v229 = *(void *)(v69 + 32);
        swift_bridgeObjectRetain();
        uint64_t v195 = v70;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v71 = v228;
        uint64_t v72 = v228;
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v68 = v226;
        specialized Rope._Node.subscript.getter(v226, (uint64_t)v67);
        uint64_t v229 = v73;
        uint64_t v195 = v74;
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v67 = *(uint64_t **)(v32 + 64);
        uint64_t v72 = *(void *)(v32 + 88);
        uint64_t v71 = v228;
      }
      long long v194 = (long long *)(v32 + 16);
      uint64_t v220 = v52 + 1;
      uint64_t v233 = (char *)v258 + 8;
      *(void *)&long long v254 = v71;
      *((void *)&v254 + 1) = v68;
      *(void *)&long long v236 = &v272;
      *(void *)&long long v255 = v42;
      uint64_t v213 = (uint64_t *)(v227 + 40);
      uint64_t v76 = v229;
      uint64_t v75 = v230;
LABEL_57:
      if (v71 != v72) {
        goto LABEL_196;
      }
      uint64_t v223 = v42;
      if (v42)
      {
        unint64_t v77 = v226;
        unint64_t v78 = *(void *)(v42 + 24 * ((v226 >> ((4 * *(unsigned char *)(v42 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v77 = v226;
        unint64_t v78 = specialized Rope._Node.subscript.getter(v226, (uint64_t)v67);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v224, v78)) {
        goto LABEL_197;
      }
      uint64_t v210 = v224 + v78;
      if (v67)
      {
        unint64_t v79 = ((-15 << ((4 * *((unsigned char *)v67 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v67 + 18) | ((unint64_t)*((unsigned __int16 *)v67 + 8) << ((4 * *((unsigned char *)v67 + 18) + 8) & 0x3C));
        uint64_t result = swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v79 = 0;
      }
      uint64_t v80 = (uint64_t)v233;
      if (v77 >= v79) {
        goto LABEL_198;
      }
      if (v223)
      {
        char v81 = (4 * *(unsigned char *)(v223 + 18) + 8) & 0x3C;
        unint64_t v82 = ((v77 >> v81) & 0xF) + 1;
        if (v82 < *(unsigned __int16 *)(v223 + 16))
        {
          unint64_t v83 = (v82 << v81) | ((-15 << v81) - 1) & v77;
          uint64_t result = swift_unknownObjectRelease_n();
LABEL_72:
          uint64_t v67 = (uint64_t *)v255;
          goto LABEL_80;
        }
      }
      int v84 = *((unsigned __int8 *)v67 + 18);
      char v85 = (4 * v84 + 8) & 0x3C;
      uint64_t v86 = (v77 >> v85) & 0xF;
      *(void *)&long long v269 = v86;
      if (v84)
      {
        swift_unknownObjectRetain();
        char v87 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v67 + 3), (uint64_t *)&v269, (uint64_t)&v254, (uint64_t)v67, v84);
        uint64_t result = swift_unknownObjectRelease();
        if (v87)
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v83 = *((void *)&v254 + 1);
          uint64_t v80 = (uint64_t)v233;
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v88 = v86 + 1;
        if (v86 + 1 < (unint64_t)*((unsigned __int16 *)v67 + 8))
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v83 = (v88 << v85) | ((-15 << v85) - 1) & v77;
LABEL_79:
          uint64_t v80 = (uint64_t)v233;
LABEL_80:
          if (v220 != v214)
          {
            if ((void)v254 != *(void *)(v32 + 88))
            {
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
              goto LABEL_201;
            }
            uint64_t v228 = v254;
            uint64_t v212 = v72;
            uint64_t v208 = v67;
            unint64_t v209 = v83;
            if (v67)
            {
              uint64_t v91 = &v67[3 * ((v83 >> ((4 * *((unsigned char *)v67 + 18) + 8) & 0x3C)) & 0xF)];
              uint64_t v92 = v91[4];
              uint64_t v93 = v91[5];
              swift_bridgeObjectRetain();
              uint64_t v215 = v93;
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v94 = *(void *)(v32 + 64);
              swift_unknownObjectRetain();
              uint64_t v80 = (uint64_t)v233;
              specialized Rope._Node.subscript.getter(v83, v94);
              uint64_t v215 = v95;
              uint64_t v92 = v96;
              swift_unknownObjectRelease();
            }
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v97 = 0;
            uint64_t v98 = v213;
            *((void *)&v236 + 1) = v92;
            while (1)
            {
              uint64_t v100 = v97 + 1;
              if (__OFADD__(v97, 1))
              {
                __break(1u);
LABEL_191:
                __break(1u);
                goto LABEL_192;
              }
              uint64_t v101 = *(v98 - 1);
              uint64_t v102 = *v98;
              if (*(void *)(v76 + 16))
              {
                swift_bridgeObjectRetain_n();
                unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
                if (v104)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v76 + 56) + 72 * v103, (uint64_t)&v249);
                }
                else
                {
                  uint64_t v253 = 0;
                  long long v251 = 0u;
                  long long v252 = 0u;
                  long long v249 = 0u;
                  long long v250 = 0u;
                }
                swift_bridgeObjectRelease();
                uint64_t v92 = *((void *)&v236 + 1);
                if (!*(void *)(*((void *)&v236 + 1) + 16))
                {
LABEL_95:
                  uint64_t v248 = 0;
                  long long v246 = 0u;
                  long long v247 = 0u;
                  long long v244 = 0u;
                  long long v245 = 0u;
                  goto LABEL_102;
                }
              }
              else
              {
                uint64_t v253 = 0;
                long long v251 = 0u;
                long long v252 = 0u;
                long long v249 = 0u;
                long long v250 = 0u;
                swift_bridgeObjectRetain();
                if (!*(void *)(v92 + 16)) {
                  goto LABEL_95;
                }
              }
              swift_bridgeObjectRetain();
              unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
              if (v106)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v92 + 56) + 72 * v105, (uint64_t)&v244);
              }
              else
              {
                uint64_t v248 = 0;
                long long v246 = 0u;
                long long v247 = 0u;
                long long v244 = 0u;
                long long v245 = 0u;
              }
              swift_bridgeObjectRelease();
LABEL_102:
              uint64_t v67 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
              swift_bridgeObjectRelease();
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v249, (uint64_t)&v254, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v244, v80, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!*((void *)&v255 + 1))
              {
                if ((void)v259) {
                  goto LABEL_119;
                }
                outlined destroy of Any?((uint64_t)&v254, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v244, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t result = outlined destroy of Any?((uint64_t)&v249, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                goto LABEL_89;
              }
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v254, (uint64_t)v242, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!(void)v259) {
                goto LABEL_118;
              }
              long long v107 = *(_OWORD *)(v80 + 48);
              long long v239 = *(_OWORD *)(v80 + 32);
              long long v240 = v107;
              uint64_t v241 = *(void *)(v80 + 64);
              long long v108 = *(_OWORD *)(v80 + 16);
              long long v237 = *(_OWORD *)v80;
              long long v238 = v108;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v242, (uint64_t)v286);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v237, (uint64_t)v284);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v286, (uint64_t)&v269, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v284, v236, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              if (v271)
              {
                if (!v273)
                {
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v269);
LABEL_87:
                  char v99 = 0;
                  goto LABEL_88;
                }
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v269, (uint64_t)&v277);
                outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v236, (uint64_t)v275);
                uint64_t v109 = *((void *)&v278 + 1);
                uint64_t v232 = v279;
                uint64_t v231 = __swift_project_boxed_opaque_existential_1(&v277, *((uint64_t *)&v278 + 1));
                uint64_t v235 = &v193;
                uint64_t v110 = *(void *)(v109 - 8);
                MEMORY[0x1F4188790](v231);
                unint64_t v112 = (char *)&v193 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v275, (uint64_t)v274);
                uint64_t v113 = type metadata accessor for Optional();
                uint64_t v234 = &v193;
                uint64_t v114 = *(void *)(v113 - 8);
                MEMORY[0x1F4188790](v113);
                uint64_t v116 = (char *)&v193 - v115;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                int v117 = swift_dynamicCast();
                uint64_t v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
                if (v117)
                {
                  v118(v116, 0, 1, v109);
                  (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v112, v116, v109);
                  char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
                }
                else
                {
                  v118(v116, 1, 1, v109);
                  (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
                  char v99 = 0;
                }
                uint64_t v75 = v230;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v275);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v277);
                uint64_t v76 = v229;
                uint64_t v80 = (uint64_t)v233;
              }
              else
              {
                if (v273)
                {
                  outlined destroy of Any?(v236, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  goto LABEL_87;
                }
                char v99 = 1;
              }
LABEL_88:
              outlined destroy of Any?((uint64_t)v284, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?((uint64_t)v286, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v237);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v242);
              outlined destroy of Any?((uint64_t)&v254, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v244, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v249, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if ((v99 & 1) == 0) {
                goto LABEL_120;
              }
LABEL_89:
              v98 += 2;
              ++v97;
              uint64_t v92 = *((void *)&v236 + 1);
              if (v100 == v75)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v32 = v222;
                uint64_t v67 = *(uint64_t **)(v222 + 64);
                uint64_t v72 = *(void *)(v222 + 88);
                uint64_t v224 = v210;
                uint64_t v71 = v228;
                *(void *)&long long v254 = v228;
                *((void *)&v254 + 1) = v209;
                uint64_t v42 = (uint64_t)v208;
                unint64_t v226 = v209;
                *(void *)&long long v255 = v208;
                BOOL v45 = __OFADD__(v220++, 1);
                if (!v45) {
                  goto LABEL_57;
                }
                __break(1u);
LABEL_118:
                outlined destroy of AttributedString._AttributeValue((uint64_t)v242);
LABEL_119:
                outlined destroy of Any?((uint64_t)&v254, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                outlined destroy of Any?((uint64_t)&v244, v67);
                outlined destroy of Any?((uint64_t)&v249, v67);
LABEL_120:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v32 = v222;
                unint64_t v77 = v226;
                uint64_t v72 = v212;
                goto LABEL_121;
              }
            }
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
LABEL_121:
          if (v72 != *(void *)(v32 + 88)) {
            goto LABEL_208;
          }
          if (v223)
          {
            unint64_t v119 = *(void *)(v223 + 24 * ((v77 >> ((4 * *(unsigned char *)(v223 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v120 = *(void *)(v32 + 64);
            swift_unknownObjectRetain();
            unint64_t v119 = specialized Rope._Node.subscript.getter(v77, v120);
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v121 = v224 + v119;
          unint64_t v122 = v194;
          if (__OFADD__(v224, v119)) {
            goto LABEL_209;
          }
          long long v123 = *v194;
          long long v124 = v194[1];
          long long v279 = v194[2];
          long long v278 = v124;
          long long v277 = v123;
          long long v125 = *v194;
          long long v126 = v194[1];
          v284[2] = v279;
          v284[1] = v126;
          v284[0] = v125;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v284, (uint64_t)v285);
          outlined retain of Locale((uint64_t)v285);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)&v277);
          uint64_t result = BigString.Index.utf8Offset.getter();
          if (__OFSUB__(v121, result))
          {
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
            goto LABEL_212;
          }
          uint64_t v127 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v129 = v128;
          uint64_t v131 = v130;
          uint64_t v133 = v132;
          outlined release of Locale((uint64_t)&v267);
          uint64_t v134 = v216;
          long long v135 = v217;
          uint64_t v136 = v200;
          char v137 = static BigString.Index.< infix(_:_:)();
          if (v137) {
            uint64_t v138 = v134;
          }
          else {
            uint64_t v138 = v127;
          }
          if (v137) {
            uint64_t v139 = v135;
          }
          else {
            uint64_t v139 = v129;
          }
          if (v137)
          {
            uint64_t v131 = *((void *)&v135 + 1);
            uint64_t v133 = v136;
          }
          long long v140 = *v122;
          long long v141 = v122[1];
          long long v276 = v122[2];
          v275[1] = v141;
          v275[0] = v140;
          long long v142 = *v122;
          long long v143 = v122[1];
          uint64_t v144 = v138;
          v286[2] = v276;
          v286[1] = v143;
          v286[0] = v142;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v286, (uint64_t)v287);
          outlined retain of Locale((uint64_t)v287);
          uint64_t v145 = v221;
          uint64_t v146 = v225;
          uint64_t v148 = v218;
          uint64_t v147 = v219;
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if (result) {
            goto LABEL_211;
          }
          *(void *)&long long v244 = v145;
          *((void *)&v244 + 1) = v146;
          *(void *)&long long v245 = v147;
          *((void *)&v245 + 1) = v148;
          *(void *)&long long v246 = v144;
          *((void *)&v246 + 1) = v139;
          *(void *)&long long v247 = v131;
          *((void *)&v247 + 1) = v133;
          uint64_t v149 = v211;
          uint64_t v150 = *(void *)(v211 + 16);
          *((void *)&v236 + 1) = v139;
          if (v150)
          {
            char v151 = static BigString.Index.== infix(_:_:)();
            uint64_t v152 = v222;
            if ((v151 & 1) == 0)
            {
              swift_bridgeObjectRetain();
              uint64_t v153 = 40;
              uint64_t v154 = v150;
              *(void *)&long long v236 = v144;
              while (*(void *)(v149 + v153))
              {
                swift_bridgeObjectRelease();
                v153 += 16;
                if (!--v154)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v156 = v218;
                  uint64_t v155 = v219;
                  uint64_t v157 = v225;
                  uint64_t v158 = v221;
                  goto LABEL_146;
                }
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              BigString.utf8.getter();
              BigString.UTF8View.subscript.getter();
              outlined release of Locale((uint64_t)&v268);
              uint64_t v158 = v221;
              uint64_t v157 = v225;
              uint64_t v156 = v218;
              uint64_t v155 = v219;
              uint64_t result = static BigString.Index.< infix(_:_:)();
              if (result) {
                goto LABEL_219;
              }
              v242[0] = v158;
              v242[1] = v157;
              v242[2] = v155;
              v242[3] = v156;
              v242[4] = v158;
              v242[5] = v157;
              v242[6] = v155;
              v242[7] = v156;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v242, (uint64_t *)&v254);
              outlined release of Locale((uint64_t)&v269);
              uint64_t v159 = *((void *)&v257 + 1);
              if (*((void *)&v257 + 1) != 2)
              {
                uint64_t v131 = v257;
                long long v236 = v256;
                uint64_t result = static BigString.Index.< infix(_:_:)();
                uint64_t v133 = v159;
                if (result) {
                  goto LABEL_220;
                }
              }
LABEL_146:
              *(void *)&long long v237 = v158;
              *((void *)&v237 + 1) = v157;
              *(void *)&long long v238 = v155;
              *((void *)&v238 + 1) = v156;
              uint64_t v144 = v236;
              long long v239 = v236;
              *(void *)&long long v240 = v131;
              *((void *)&v240 + 1) = v133;
              uint64_t v160 = v211;
              uint64_t v161 = *(void *)(v211 + 16);
              if (!v161) {
                goto LABEL_172;
              }
              uint64_t v162 = 40;
              while (!*(void *)(v211 + v162))
              {
                v162 += 16;
                if (!--v161) {
                  goto LABEL_172;
                }
              }
              swift_bridgeObjectRetain();
              uint64_t v163 = (unint64_t *)(v160 + 40);
              uint64_t v164 = (char *)MEMORY[0x1E4FBC860];
              do
              {
                unint64_t v165 = *v163;
                if (*v163)
                {
                  uint64_t v166 = *(v163 - 1);
                  if ((v165 & 0x2000000000000000) != 0 ? HIBYTE(v165) & 0xF : v166 & 0xFFFFFFFFFFFFLL)
                  {
                    if ((v165 & 0x1000000000000000) != 0)
                    {
                      int v168 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }
                    else
                    {
                      if ((v165 & 0x2000000000000000) != 0)
                      {
                        *(void *)&long long v254 = *(v163 - 1);
                        *((void *)&v254 + 1) = v165 & 0xFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        if ((v166 & 0x1000000000000000) == 0) {
                          _StringObject.sharedUTF8.getter();
                        }
                        swift_bridgeObjectRetain();
                      }
                      int v168 = _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v164 + 2) + 1, 1, v164);
                    }
                    unint64_t v170 = *((void *)v164 + 2);
                    unint64_t v169 = *((void *)v164 + 3);
                    if (v170 >= v169 >> 1) {
                      uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v169 > 1), v170 + 1, 1, v164);
                    }
                    *((void *)v164 + 2) = v170 + 1;
                    *(_DWORD *)&v164[4 * v170 + 32] = v168;
                  }
                }
                v163 += 2;
                --v150;
              }
              while (v150);
              swift_bridgeObjectRelease();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)v274);
              uint64_t v171 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v164);
              uint64_t v173 = v172;
              uint64_t v175 = v174;
              uint64_t v177 = v176;
              swift_bridgeObjectRelease();
              outlined release of Locale((uint64_t)&v254);
              uint64_t v152 = v222;
              uint64_t v144 = v236;
              if (v177 == 2) {
                goto LABEL_172;
              }
              char v192 = static BigString.Index.< infix(_:_:)();
              outlined release of Locale((uint64_t)v275);
              uint64_t result = outlined release of AttributedString.Runs((uint64_t)v288);
              if (v192) {
                goto LABEL_221;
              }
              uint64_t v144 = v171;
              *((void *)&v236 + 1) = v173;
              uint64_t v131 = v175;
LABEL_173:
              if (v207 == *(void *)(v152 + 88))
              {
                if (v206)
                {
                  uint64_t v178 = *(void *)(v206 + 24 * ((v201 >> ((4 * *(unsigned char *)(v206 + 18) + 8) & 0x3C)) & 0xF) + 32);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  uint64_t v179 = *(void *)(v152 + 64);
                  swift_unknownObjectRetain();
                  specialized Rope._Node.subscript.getter(v201, v179);
                  uint64_t v178 = v180;
                  swift_unknownObjectRelease();
                }
                uint64_t v181 = (*(uint64_t (**)(void, void))(*(void *)(v203 + 24) + 24))(*(void *)(v203 + 16), *(void *)(v203 + 24));
                if (*(void *)(v178 + 16)
                  && (unint64_t v183 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v182), (v184 & 1) != 0))
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v178 + 56) + 72 * v183, (uint64_t)&v249);
                }
                else
                {
                  uint64_t v253 = 0;
                  long long v251 = 0u;
                  long long v252 = 0u;
                  long long v249 = 0u;
                  long long v250 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v250 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v249, (uint64_t)&v243);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                  uint64_t v186 = v202;
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v249);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v186, 0, 1, AssociatedTypeWitness);
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v249, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v187 = swift_getAssociatedTypeWitness();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56))(v202, 1, 1, v187);
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v188 = *((void *)&v236 + 1);
                long long v189 = v204;
                long long v190 = v205;
                uint64_t result = static BigString.Index.< infix(_:_:)();
                if ((result & 1) == 0)
                {
                  uint64_t v191 = v199;
                  *uint64_t v199 = v189;
                  v191[1] = v190;
                  *((void *)v191 + 4) = v144;
                  *((void *)v191 + 5) = v188;
                  *((void *)v191 + 6) = v131;
                  *((void *)v191 + 7) = v177;
                  return result;
                }
                goto LABEL_213;
              }
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
              goto LABEL_216;
            }
          }
          else
          {
            uint64_t v152 = v222;
          }
LABEL_172:
          outlined release of Locale((uint64_t)v275);
          uint64_t result = outlined release of AttributedString.Runs((uint64_t)v288);
          uint64_t v177 = v133;
          goto LABEL_173;
        }
      }
      if (v67)
      {
        int v89 = *((unsigned __int8 *)v67 + 18);
        uint64_t v90 = *((unsigned __int16 *)v67 + 8);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v83 = ((-15 << ((4 * v89 + 8) & 0x3C)) - 1) & v89 | (unint64_t)(v90 << ((4 * v89 + 8) & 0x3C));
      }
      else
      {
        unint64_t v83 = 0;
      }
      uint64_t v67 = 0;
      *(void *)&long long v254 = v72;
      goto LABEL_79;
    }
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v52 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v228, v51, v42, v33, *((uint64_t *)&v236 + 1));
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  uint64_t v38 = *(unsigned __int8 *)(v33 + 18);
  if (*(unsigned char *)(v33 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v39 = v37;
    uint64_t v40 = v33;
    while (1)
    {
      uint64_t v43 = *(unsigned __int16 *)(v40 + 16);
      if (!*(_WORD *)(v40 + 16)) {
        break;
      }
      uint64_t v44 = *(void *)(v40 + 40);
      BOOL v45 = __OFSUB__(v39, v44);
      uint64_t v46 = v39 - v44;
      if (v45) {
        goto LABEL_194;
      }
      if (__OFADD__(v46, 1)) {
        goto LABEL_195;
      }
      if (v46 + 1 < 1)
      {
        uint64_t v43 = 0;
        goto LABEL_16;
      }
      if (v43 == 1)
      {
        uint64_t v39 = v46;
        break;
      }
      uint64_t v47 = (uint64_t *)(v40 + 64);
      uint64_t v48 = 1;
      while (1)
      {
        uint64_t v49 = *v47;
        v47 += 3;
        uint64_t v39 = v46 - v49;
        if (__OFSUB__(v46, v49)) {
          goto LABEL_191;
        }
        if (__OFADD__(v39, 1))
        {
LABEL_192:
          __break(1u);
          goto LABEL_193;
        }
        if (v39 + 1 < 1) {
          break;
        }
        ++v48;
        uint64_t v46 = v39;
        if (v43 == v48) {
          goto LABEL_15;
        }
      }
      uint64_t v43 = v48;
      uint64_t v39 = v46;
LABEL_16:
      char v41 = (4 * *(unsigned char *)(v40 + 18) + 8) & 0x3C;
      uint64_t v38 = ((-15 << v41) - 1) & v38 | (v43 << v41);
      uint64_t v42 = *(void *)(v40 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v40 = v42;
      if (!*(unsigned char *)(v42 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_15:
    if (!v39) {
      goto LABEL_16;
    }
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
    goto LABEL_199;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v39 = v37;
  uint64_t v42 = v33;
LABEL_33:
  uint64_t v53 = *(unsigned __int16 *)(v42 + 16);
  if (!*(_WORD *)(v42 + 16)) {
    goto LABEL_46;
  }
  uint64_t v54 = *(void *)(v42 + 24);
  BOOL v45 = __OFSUB__(v39, v54);
  uint64_t v55 = v39 - v54;
  if (v45)
  {
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  if (!__OFADD__(v55, 1))
  {
    if (v55 + 1 < 1)
    {
      uint64_t v53 = 0;
    }
    else
    {
      if (v53 == 1)
      {
        uint64_t v39 = v55;
LABEL_46:
        if (v39)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        goto LABEL_47;
      }
      uint64_t v56 = (uint64_t *)(v42 + 48);
      uint64_t v57 = 1;
      while (1)
      {
        uint64_t v58 = *v56;
        v56 += 3;
        uint64_t v39 = v55 - v58;
        if (__OFSUB__(v55, v58)) {
          goto LABEL_214;
        }
        if (__OFADD__(v39, 1)) {
          goto LABEL_215;
        }
        if (v39 + 1 < 1) {
          break;
        }
        ++v57;
        uint64_t v55 = v39;
        if (v53 == v57) {
          goto LABEL_46;
        }
      }
      uint64_t v53 = v57;
      uint64_t v39 = v55;
    }
LABEL_47:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v51 = v38 & 0xFFFFFFFFFFFFF0FFLL | (v53 << 8);
    uint64_t v32 = v222;
    goto LABEL_31;
  }
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice1.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return MEMORY[0x1F41836F0]();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return MEMORY[0x1F41836E8]();
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t **a1, uint64_t *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  long long v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  v6[5] = v9;
  long long v10 = (char *)malloc(*(void *)(v9 + 64));
  v6[6] = (uint64_t)v10;
  long long v11 = AttributedString.Runs.AttributesSlice1.subscript.read(v6, a2, a3);
  long long v13 = v12;
  v6[7] = (uint64_t)v11;
  (*(void (**)(char *))(*(void *)(v7 - 8) + 16))(v10);
  long long v14 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  long long v15 = v13[1];
  long long v16 = v13[2];
  long long v17 = v13[3];
  *(_OWORD *)long long v14 = *v13;
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v16;
  *((_OWORD *)v14 + 3) = v17;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  long long v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);

  free((void *)v3);
}

uint64_t (*AttributedString.Runs.AttributesSlice1.subscript.read(uint64_t *a1, uint64_t *a2, uint64_t a3))()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  long long v8 = (char *)malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  AttributedString.Runs.AttributesSlice1.subscript.getter((uint64_t)v8, &v8[*(int *)(TupleTypeMetadata2 + 48)], a2, a3);
  return AttributedString.Runs.AttributesSlice1.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return MEMORY[0x1F4184430]();
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return MEMORY[0x1F4184410]();
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return MEMORY[0x1F4184390]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836F0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  swift_getWitnessTable();

  JUMPOUT(0x185301E20);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice1<A>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice1.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice1.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  long long v7 = v3[11];
  long long v40 = v3[10];
  long long v41 = v7;
  uint64_t v42 = *((void *)v3 + 24);
  long long v8 = v3[7];
  long long v36 = v3[6];
  long long v37 = v8;
  long long v9 = v3[9];
  long long v38 = v3[8];
  long long v39 = v9;
  long long v10 = v3[3];
  long long v32 = v3[2];
  long long v33 = v10;
  long long v11 = v3[5];
  long long v34 = v3[4];
  long long v35 = v11;
  __n128 v12 = (__n128)v3[1];
  long long v30 = *v3;
  __n128 v31 = v12;
  uint64_t v13 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1821037E0;
  uint64_t v15 = *(void *)(*MEMORY[0x1E4FBC5F0] + v13 + 8);
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  outlined retain of AttributedString.Runs((uint64_t)&v30);
  *(void *)(v14 + 32) = v16(v15, a2);
  *(void *)(v14 + 40) = v17;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v28, v15, a2);
  uint64_t v18 = v29;
  if (v29 == 1)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v20 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1821037E0;
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v18;
  }
  long long v21 = v41;
  *(_OWORD *)(a3 + 160) = v40;
  *(_OWORD *)(a3 + 176) = v21;
  uint64_t v22 = v42;
  long long v23 = v37;
  *(_OWORD *)(a3 + 96) = v36;
  *(_OWORD *)(a3 + 112) = v23;
  long long v24 = v39;
  *(_OWORD *)(a3 + 128) = v38;
  *(_OWORD *)(a3 + 144) = v24;
  long long v25 = v33;
  *(_OWORD *)(a3 + 32) = v32;
  *(_OWORD *)(a3 + 48) = v25;
  long long v26 = v35;
  *(_OWORD *)(a3 + 64) = v34;
  *(_OWORD *)(a3 + 80) = v26;
  __n128 result = v31;
  *(_OWORD *)a3 = v30;
  *(__n128 *)(a3 + 16) = result;
  *(void *)(a3 + 192) = v22;
  *(void *)(a3 + 200) = v14;
  *(void *)(a3 + 208) = v19;
  return result;
}

__n128 AttributedString.Runs.AttributesSlice2.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_182106040;
  *(void *)(v12 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a2, a4);
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a3, a5);
  *(void *)(v12 + 56) = v14;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 32))(v26, a2, a4);
  uint64_t v15 = v26[0];
  uint64_t v16 = v26[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v25, a3, a5);
  uint64_t v17 = specialized RangeReplaceableCollection.init(_contents:_:)(v15, v16, v25[0], v25[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v15, v16);
  long long v18 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a6 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a6 + 176) = v18;
  uint64_t v19 = *(void *)(a1 + 192);
  long long v20 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a6 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a6 + 112) = v20;
  long long v21 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a6 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a6 + 144) = v21;
  long long v22 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a6 + 48) = v22;
  long long v23 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a6 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a6 + 80) = v23;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(__n128 *)(a6 + 16) = result;
  *(void *)(a6 + 192) = v19;
  *(void *)(a6 + 200) = v12;
  *(void *)(a6 + 208) = v17;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice2.subscript.getter(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  long long v378 = a5;
  uint64_t v368 = a3;
  uint64_t v369 = a1;
  uint64_t v370 = a2;
  uint64_t v6 = a4[1];
  unint64_t v7 = a4[2];
  uint64_t v395 = *a4;
  unint64_t v396 = v7;
  uint64_t v400 = a4[3];
  long long v8 = *v5;
  long long v9 = v5[1];
  long long v10 = v5[2];
  v498[3] = v5[3];
  v498[2] = v10;
  v498[0] = v8;
  v498[1] = v9;
  long long v11 = v5[4];
  long long v12 = v5[5];
  long long v13 = v5[6];
  long long v502 = v5[7];
  long long v501 = v13;
  long long v499 = v11;
  long long v500 = v12;
  long long v14 = v5[8];
  long long v15 = v5[9];
  long long v16 = v5[10];
  long long v17 = v5[11];
  uint64_t v18 = *((void *)v5 + 24);
  uint64_t v401 = *((void *)v5 + 25);
  uint64_t v507 = v18;
  long long v506 = v17;
  long long v505 = v16;
  long long v503 = v14;
  long long v504 = v15;
  uint64_t v407 = *((void *)v5 + 26);
  unint64_t v19 = *((void *)&v14 + 1);
  long long v20 = v15;
  long long v21 = v16;
  long long v22 = v17;
  uint64_t v23 = v18;
  outlined retain of AttributedString.Runs((uint64_t)v498);
  uint64_t v397 = v6;
  unint64_t v398 = v19;
  long long v399 = v20;
  v403 = (void *)v21;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_375;
  }
  uint64_t v382 = *((void *)&v21 + 1);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_376:
    __break(1u);
    goto LABEL_377;
  }
  uint64_t v405 = *(void *)(v401 + 16);
  if (!v405)
  {
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
    goto LABEL_380;
  }
  uint64_t v379 = v23;
  uint64_t v380 = *((void *)&v22 + 1);
  uint64_t v381 = v22;
  uint64_t v25 = *(void *)(*(void *)&v498[0] + 64);
  uint64_t v26 = *(void *)(*(void *)&v498[0] + 72);
  uint64_t v402 = *(void *)&v498[0];
  uint64_t v27 = *(void *)(*(void *)&v498[0] + 80);
  long long v393 = *(void **)(*(void *)&v498[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v28 = v395;
  unint64_t v29 = v396;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v25) {
    uint64_t v30 = v27;
  }
  else {
    uint64_t v30 = 0;
  }
  if (result < 0) {
    goto LABEL_378;
  }
  uint64_t v31 = result;
  if (v30 < result) {
    goto LABEL_378;
  }
  v410 = (unsigned char *)v26;
  if (!v25 || result >= v27 || !*(_WORD *)(v25 + 16))
  {
    unint64_t v44 = swift_unknownObjectRetain();
    unint64_t v386 = specialized Rope._endPath.getter(v44);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    goto LABEL_47;
  }
  uint64_t v32 = *(unsigned __int8 *)(v25 + 18);
  if (*(unsigned char *)(v25 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v33 = v31;
    uint64_t v34 = v25;
    while (1)
    {
      uint64_t v37 = *(unsigned __int16 *)(v34 + 16);
      if (!*(_WORD *)(v34 + 16)) {
        break;
      }
      uint64_t v38 = *(void *)(v34 + 40);
      BOOL v39 = __OFSUB__(v33, v38);
      uint64_t v40 = v33 - v38;
      if (v39) {
        goto LABEL_367;
      }
      if (__OFADD__(v40, 1)) {
        goto LABEL_368;
      }
      if (v40 + 1 < 1)
      {
        uint64_t v37 = 0;
        goto LABEL_16;
      }
      if (v37 == 1)
      {
        uint64_t v33 = v40;
        break;
      }
      long long v41 = (uint64_t *)(v34 + 64);
      uint64_t v42 = 1;
      while (1)
      {
        uint64_t v43 = *v41;
        v41 += 3;
        uint64_t v33 = v40 - v43;
        if (__OFSUB__(v40, v43)) {
          goto LABEL_360;
        }
        if (__OFADD__(v33, 1))
        {
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
          goto LABEL_365;
        }
        if (v33 + 1 < 1) {
          break;
        }
        ++v42;
        uint64_t v40 = v33;
        if (v37 == v42) {
          goto LABEL_15;
        }
      }
      uint64_t v37 = v42;
      uint64_t v33 = v40;
LABEL_16:
      char v35 = (4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C;
      uint64_t v32 = ((-15 << v35) - 1) & v32 | (v37 << v35);
      uint64_t v36 = *(void *)(v34 + 24 + 24 * v37);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v34 = v36;
      if (!*(unsigned char *)(v36 + 18)) {
        goto LABEL_32;
      }
    }
LABEL_15:
    if (!v33) {
      goto LABEL_16;
    }
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
    goto LABEL_376;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v33 = v31;
  uint64_t v36 = v25;
LABEL_32:
  uint64_t v45 = *(unsigned __int16 *)(v36 + 16);
  if (!*(_WORD *)(v36 + 16))
  {
    unint64_t v48 = v396;
LABEL_45:
    if (v33)
    {
LABEL_407:
      __break(1u);
      goto LABEL_408;
    }
    goto LABEL_46;
  }
  uint64_t v46 = *(void *)(v36 + 24);
  BOOL v39 = __OFSUB__(v33, v46);
  uint64_t v47 = v33 - v46;
  unint64_t v48 = v396;
  if (v39)
  {
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }
  if (__OFADD__(v47, 1))
  {
LABEL_410:
    __break(1u);
    goto LABEL_411;
  }
  if (v47 + 1 < 1)
  {
    uint64_t v45 = 0;
  }
  else
  {
    if (v45 == 1)
    {
      uint64_t v33 = v47;
      goto LABEL_45;
    }
    uint64_t v49 = (uint64_t *)(v36 + 48);
    uint64_t v50 = 1;
    while (1)
    {
      uint64_t v51 = *v49;
      v49 += 3;
      uint64_t v33 = v47 - v51;
      if (__OFSUB__(v47, v51)) {
        goto LABEL_394;
      }
      if (__OFADD__(v33, 1)) {
        goto LABEL_395;
      }
      if (v33 + 1 < 1) {
        break;
      }
      ++v50;
      uint64_t v47 = v33;
      if (v45 == v50) {
        goto LABEL_45;
      }
    }
    uint64_t v45 = v50;
    uint64_t v33 = v47;
  }
LABEL_46:
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v386 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v45 << 8);
  unint64_t v29 = v48;
  uint64_t v28 = v395;
LABEL_47:
  uint64_t v387 = v36;
  uint64_t v52 = (void *)v402;
  if (v25)
  {
    swift_unknownObjectRetain();
    uint64_t v406 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v393, v386, v387, v25, (uint64_t)v410);
    uint64_t result = swift_unknownObjectRelease_n();
  }
  else
  {
    uint64_t v406 = 0;
  }
  uint64_t v53 = v400;
  BOOL v39 = __OFSUB__(v31, v33);
  uint64_t v54 = v31 - v33;
  if (v39) {
    goto LABEL_379;
  }
  long long v55 = *(_OWORD *)(v402 + 16);
  long long v56 = *(_OWORD *)(v402 + 32);
  long long v485 = *(_OWORD *)(v402 + 48);
  v484[1] = v56;
  v484[0] = v55;
  long long v57 = *(_OWORD *)(v402 + 16);
  long long v58 = *(_OWORD *)(v402 + 32);
  v486[2] = v485;
  v486[1] = v58;
  v486[0] = v57;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v486, (uint64_t)v487);
  outlined retain of Locale((uint64_t)v487);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v484);
  if (__OFSUB__(0, v33))
  {
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
    goto LABEL_382;
  }
  long long v388 = (long long *)(v402 + 16);
  uint64_t v59 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v383 = v60;
  uint64_t v384 = v59;
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t result = outlined release of Locale((uint64_t)&v438);
  uint64_t v385 = v28;
  uint64_t v65 = v397;
  unint64_t v376 = v29;
  long long v389 = (void *)*((void *)&v499 + 1);
  if (v406 == *((void *)&v499 + 1)) {
    goto LABEL_165;
  }
  if (v393 != *(void **)(v402 + 88))
  {
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
    goto LABEL_400;
  }
  uint64_t v377 = v62;
  if (v387)
  {
    uint64_t v66 = v387 + 24 * ((v386 >> ((4 * *(unsigned char *)(v387 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v67 = *(long long **)(v66 + 32);
    unint64_t v68 = *(void *)(v66 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v69 = *(void *)(v402 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v386, v69);
    unint64_t v68 = v70;
    uint64_t v67 = v71;
    uint64_t result = swift_unknownObjectRelease();
  }
  uint64_t v72 = v405;
  if (*((uint64_t *)&v498[0] + 1) >= v406) {
    goto LABEL_112;
  }
  v409 = (long long *)v459;
  v410 = v426;
  uint64_t v73 = (uint64_t *)(v401 + 40);
  unint64_t v74 = v386;
  uint64_t v75 = v387;
  unint64_t v372 = v68;
  uint64_t v373 = v64;
  v408 = v67;
  uint64_t v366 = (uint64_t *)(v401 + 40);
  uint64_t v367 = *((void *)&v498[0] + 1);
LABEL_59:
  uint64_t v385 = v54;
  uint64_t v76 = v52[8];
  unint64_t v77 = (void *)v52[11];
  v418 = v393;
  uint64_t v419 = v74;
  uint64_t v420 = v75;
  if (v393 != v77) {
    goto LABEL_401;
  }
  if (v76)
  {
    unint64_t v78 = *(unsigned __int8 *)(v76 + 18);
    unint64_t v79 = v74;
    uint64_t v80 = v75;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v75 = v80;
    unint64_t v74 = v79;
    if (v79 <= v78) {
      goto LABEL_402;
    }
  }
  else if (!v74)
  {
    goto LABEL_402;
  }
  if (!v75 || (char v81 = (4 * *(unsigned char *)(v75 + 18) + 8) & 0x3C, ((v74 >> v81) & 0xF) == 0))
  {
    int v83 = *(unsigned __int8 *)(v76 + 18);
    char v84 = (4 * v83 + 8) & 0x3C;
    uint64_t v85 = (v74 >> v84) & 0xF;
    *(void *)&long long v457 = v85;
    if (v83)
    {
      swift_unknownObjectRetain();
      char v86 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v76 + 16, v76 + 24, (uint64_t *)&v457, (uint64_t)&v418, v83);
      uint64_t result = swift_unknownObjectRelease();
      if ((v86 & 1) == 0) {
        goto LABEL_406;
      }
      if (v418 != v393) {
        goto LABEL_403;
      }
      uint64_t v75 = v420;
      unint64_t v82 = v419;
      if (v420) {
        goto LABEL_71;
      }
    }
    else
    {
      if (!v85) {
        goto LABEL_406;
      }
      unint64_t v82 = ((v85 - 1) << v84) | ((-15 << v84) - 1) & v74;
      uint64_t v419 = v82;
      uint64_t v420 = v76;
      uint64_t v75 = v76;
      if (v76) {
        goto LABEL_71;
      }
    }
    unint64_t v90 = v82;
    swift_unknownObjectRetain();
    unint64_t v376 = v90;
    unint64_t v88 = specialized Rope._Node.subscript.getter(v90, v76);
    swift_unknownObjectRelease();
    uint64_t v374 = 0;
    char v89 = 1;
    goto LABEL_75;
  }
  unint64_t v82 = ((((v74 >> v81) & 0xF) - 1) << v81) | ((-15 << v81) - 1) & v74;
  uint64_t v419 = v82;
LABEL_71:
  char v87 = (4 * *(unsigned char *)(v75 + 18) + 8) & 0x3C;
  unint64_t v376 = v82;
  uint64_t v374 = v75;
  unint64_t v88 = *(void *)(v75 + 24 * ((v82 >> v87) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v89 = 0;
LABEL_75:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v385, v88)) {
    goto LABEL_404;
  }
  uint64_t v52 = (void *)v402;
  if (v393 != *(void **)(v402 + 88)) {
    goto LABEL_405;
  }
  unint64_t v371 = v385 - v88;
  if (v89)
  {
    uint64_t v91 = *(void *)(v402 + 64);
    swift_unknownObjectRetain();
    uint64_t v52 = (void *)v402;
    specialized Rope._Node.subscript.getter(v376, v91);
    uint64_t v93 = v92;
    long long v375 = v94;
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v95 = v374 + 24 * ((v376 >> ((4 * *(unsigned char *)(v374 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v93 = *(long long **)(v95 + 32);
    uint64_t v96 = *(uint64_t **)(v95 + 40);
    swift_bridgeObjectRetain();
    long long v375 = v96;
    swift_bridgeObjectRetain();
  }
  uint64_t v97 = v408;
  --v406;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v98 = 0;
  v404 = v93;
  while (1)
  {
    uint64_t v100 = v98 + 1;
    if (__OFADD__(v98, 1)) {
      goto LABEL_364;
    }
    uint64_t v101 = *(v73 - 1);
    uint64_t v102 = *v73;
    if (*((void *)v97 + 2))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
      if (v104)
      {
        outlined init with copy of AttributedString._AttributeValue(*((void *)v97 + 7) + 72 * v103, (uint64_t)&v449);
      }
      else
      {
        uint64_t v453 = 0;
        long long v452 = 0u;
        long long v451 = 0u;
        long long v450 = 0u;
        long long v449 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)v93 + 2))
      {
LABEL_90:
        uint64_t v447 = 0;
        long long v446 = 0u;
        long long v445 = 0u;
        long long v444 = 0u;
        long long v443 = 0u;
        goto LABEL_97;
      }
    }
    else
    {
      uint64_t v453 = 0;
      long long v452 = 0u;
      long long v451 = 0u;
      long long v450 = 0u;
      long long v449 = 0u;
      swift_bridgeObjectRetain();
      if (!*((void *)v93 + 2)) {
        goto LABEL_90;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
    if (v106)
    {
      outlined init with copy of AttributedString._AttributeValue(*((void *)v93 + 7) + 72 * v105, (uint64_t)&v443);
    }
    else
    {
      uint64_t v447 = 0;
      long long v446 = 0u;
      long long v445 = 0u;
      long long v444 = 0u;
      long long v443 = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v97 = v408;
LABEL_97:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v449, (uint64_t)&v418, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v443, (uint64_t)v410, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v421)
    {
      if (v427) {
        goto LABEL_114;
      }
      outlined destroy of Any?((uint64_t)&v418, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v443, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v449, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_84;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v418, (uint64_t)&v433, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v427) {
      break;
    }
    long long v107 = *((_OWORD *)v410 + 3);
    long long v430 = *((_OWORD *)v410 + 2);
    long long v431 = v107;
    uint64_t v432 = *((void *)v410 + 8);
    long long v108 = *((_OWORD *)v410 + 1);
    long long v428 = *(_OWORD *)v410;
    long long v429 = v108;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v433, (uint64_t)v416);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v428, (uint64_t)&v411);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v416, (uint64_t)&v457, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v411, (uint64_t)v409, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v458)
    {
      if (!v460)
      {
        char v99 = 1;
        goto LABEL_83;
      }
      outlined destroy of Any?((uint64_t)v409, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_82:
      char v99 = 0;
      goto LABEL_83;
    }
    if (!v460)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v457);
      goto LABEL_82;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v457, (uint64_t)v473);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v409, (uint64_t)v472);
    uint64_t v109 = v474;
    uint64_t v391 = v475;
    long long v390 = __swift_project_boxed_opaque_existential_1(v473, v474);
    v394 = v365;
    uint64_t v110 = *(void *)(v109 - 8);
    MEMORY[0x1F4188790](v390);
    unint64_t v112 = (char *)v365 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v472, (uint64_t)v469);
    uint64_t v113 = type metadata accessor for Optional();
    long long v392 = v365;
    uint64_t v114 = *(void *)(v113 - 8);
    MEMORY[0x1F4188790](v113);
    uint64_t v116 = (char *)v365 - v115;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    int v117 = swift_dynamicCast();
    uint64_t v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
    if (v117)
    {
      v118(v116, 0, 1, v109);
      (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v112, v116, v109);
      char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
    }
    else
    {
      v118(v116, 1, 1, v109);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
      char v99 = 0;
    }
    uint64_t v72 = v405;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v472);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v473);
    uint64_t v52 = (void *)v402;
    uint64_t v97 = v408;
LABEL_83:
    outlined destroy of Any?((uint64_t)&v411, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v416, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v428);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v433);
    outlined destroy of Any?((uint64_t)&v418, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v443, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t result = outlined destroy of Any?((uint64_t)&v449, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v93 = v404;
    if ((v99 & 1) == 0) {
      goto LABEL_115;
    }
LABEL_84:
    v73 += 2;
    ++v98;
    if (v100 == v72)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v54 = v371;
      uint64_t v73 = v366;
      uint64_t v75 = v374;
      unint64_t v74 = v376;
      if (v367 >= v406)
      {
        uint64_t v54 = v371;
LABEL_112:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_116;
      }
      goto LABEL_59;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v433);
LABEL_114:
  outlined destroy of Any?((uint64_t)&v418, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v443, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v449, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_115:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v54 = v385;
LABEL_116:
  unint64_t v119 = v388;
  long long v120 = *v388;
  long long v121 = v388[1];
  long long v483 = v388[2];
  v482[1] = v121;
  v482[0] = v120;
  long long v122 = *v388;
  long long v123 = v388[1];
  v488[2] = v483;
  v488[1] = v123;
  v488[0] = v122;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v488, (uint64_t)v489);
  outlined retain of Locale((uint64_t)v489);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v482);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v54, result)) {
    goto LABEL_399;
  }
  uint64_t v124 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v126 = v125;
  unint64_t v128 = v127;
  uint64_t v130 = v129;
  outlined release of Locale((uint64_t)&v439);
  unint64_t v131 = v398;
  unint64_t v133 = *((void *)&v399 + 1);
  uint64_t v132 = v399;
  uint64_t v134 = v403;
  char v135 = static BigString.Index.< infix(_:_:)();
  if (v135) {
    uint64_t v136 = v124;
  }
  else {
    uint64_t v136 = v131;
  }
  uint64_t v385 = v136;
  if (v135)
  {
    unint64_t v133 = v128;
    uint64_t v137 = v130;
  }
  else
  {
    uint64_t v126 = v132;
    uint64_t v137 = (uint64_t)v134;
  }
  long long v138 = v119[1];
  long long v479 = *v119;
  long long v480 = v138;
  long long v481 = v119[2];
  BigString.unicodeScalars.getter();
  uint64_t v139 = BigString.UnicodeScalarView.index(after:)();
  long long v141 = v140;
  long long v142 = v119;
  uint64_t v144 = v143;
  uint64_t v146 = v145;
  outlined release of Locale((uint64_t)&v440);
  long long v147 = *v142;
  long long v148 = v142[1];
  long long v471 = v142[2];
  v470[1] = v148;
  v470[0] = v147;
  long long v149 = *v142;
  long long v150 = v142[1];
  uint64_t v151 = v385;
  v490[2] = v471;
  v490[1] = v150;
  v490[0] = v149;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v490, (uint64_t)v491);
  outlined retain of Locale((uint64_t)v491);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
    goto LABEL_407;
  }
  v473[0] = v151;
  v473[1] = v126;
  v473[2] = v133;
  uint64_t v474 = v137;
  uint64_t v475 = v139;
  v476 = v141;
  uint64_t v477 = v144;
  v478 = v146;
  uint64_t v152 = v126;
  uint64_t v153 = *(void *)(v407 + 16);
  uint64_t v384 = v152;
  if (!v153)
  {
    unint64_t v376 = v133;
    uint64_t v53 = v137;
    goto LABEL_164;
  }
  v409 = v146;
  v410 = (unsigned char *)v137;
  uint64_t v154 = (long long *)v139;
  v408 = v141;
  uint64_t v406 = v144;
  if (static BigString.Index.== infix(_:_:)())
  {
    unint64_t v376 = v133;
    uint64_t v53 = (uint64_t)v410;
    goto LABEL_164;
  }
  swift_bridgeObjectRetain();
  uint64_t v155 = 40;
  uint64_t v156 = v153;
  while (2)
  {
    if (*(void *)(v407 + v155))
    {
      swift_bridgeObjectRelease();
      v155 += 16;
      if (--v156) {
        continue;
      }
      swift_bridgeObjectRelease();
      uint64_t v158 = v408;
      uint64_t v157 = v409;
      uint64_t v159 = v406;
      uint64_t v53 = (uint64_t)v410;
      uint64_t v160 = v154;
LABEL_138:
      v469[0] = v385;
      v469[1] = v384;
      v469[2] = v133;
      v469[3] = v53;
      v469[4] = v160;
      v469[5] = v158;
      v469[6] = v159;
      v469[7] = v157;
      uint64_t v174 = *(void *)(v407 + 16);
      unint64_t v376 = v133;
      if (v174)
      {
        uint64_t v175 = 40;
        while (!*(void *)(v407 + v175))
        {
          v175 += 16;
          if (!--v174) {
            goto LABEL_164;
          }
        }
        v404 = v160;
        uint64_t v176 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
        uint64_t v177 = (char *)MEMORY[0x1E4FBC860];
        do
        {
          unint64_t v178 = *v176;
          if (*v176)
          {
            uint64_t v179 = *(v176 - 1);
            if ((v178 & 0x2000000000000000) != 0 ? HIBYTE(v178) & 0xF : v179 & 0xFFFFFFFFFFFFLL)
            {
              if ((v178 & 0x1000000000000000) != 0)
              {
                int v181 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }
              else
              {
                if ((v178 & 0x2000000000000000) != 0)
                {
                  v418 = (void *)*(v176 - 1);
                  uint64_t v419 = v178 & 0xFFFFFFFFFFFFFFLL;
                  swift_bridgeObjectRetain();
                }
                else
                {
                  if ((v179 & 0x1000000000000000) == 0) {
                    _StringObject.sharedUTF8.getter();
                  }
                  swift_bridgeObjectRetain();
                }
                int v181 = _decodeScalar(_:startingAt:)();
                swift_bridgeObjectRelease();
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v177 + 2) + 1, 1, v177);
              }
              unint64_t v183 = *((void *)v177 + 2);
              unint64_t v182 = *((void *)v177 + 3);
              if (v183 >= v182 >> 1) {
                uint64_t v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v182 > 1), v183 + 1, 1, v177);
              }
              *((void *)v177 + 2) = v183 + 1;
              *(_DWORD *)&v177[4 * v183 + 32] = v181;
            }
          }
          v176 += 2;
          --v153;
        }
        while (v153);
        swift_bridgeObjectRelease();
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v448);
        uint64_t v184 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v177);
        uint64_t v65 = v185;
        unint64_t v187 = v186;
        uint64_t v189 = v188;
        swift_bridgeObjectRelease();
        outlined release of Locale((uint64_t)&v449);
        if (v189 != 2)
        {
          uint64_t v367 = v189;
          char v364 = static BigString.Index.< infix(_:_:)();
          outlined release of Locale((uint64_t)v470);
          uint64_t result = outlined release of AttributedString.Runs((uint64_t)v498);
          if ((v364 & 1) == 0)
          {
            uint64_t v385 = v184;
            unint64_t v376 = v187;
            uint64_t v52 = (void *)v402;
            goto LABEL_166;
          }
          goto LABEL_417;
        }
      }
LABEL_164:
      outlined release of Locale((uint64_t)v470);
      uint64_t v52 = (void *)v402;
      uint64_t v65 = v384;
LABEL_165:
      outlined release of AttributedString.Runs((uint64_t)v498);
      uint64_t v367 = v53;
LABEL_166:
      outlined retain of AttributedString.Runs((uint64_t)v498);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_381;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_382:
        __break(1u);
LABEL_383:
        __break(1u);
        goto LABEL_384;
      }
      uint64_t v384 = v65;
      uint64_t v190 = v52[8];
      uint64_t v191 = v52[9];
      char v192 = v52;
      uint64_t v193 = v52[10];
      uint64_t v194 = v192[11];
      swift_unknownObjectRetain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (v190) {
        uint64_t v195 = v193;
      }
      else {
        uint64_t v195 = 0;
      }
      if (result < 0) {
        goto LABEL_383;
      }
      uint64_t v196 = result;
      if (v195 < result) {
        goto LABEL_383;
      }
      v394 = (void *)v194;
      v410 = (unsigned char *)v191;
      if (v190 && result < v193 && *(_WORD *)(v190 + 16))
      {
        uint64_t v197 = *(unsigned __int8 *)(v190 + 18);
        if (*(unsigned char *)(v190 + 18))
        {
          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v198 = v196;
          uint64_t v199 = v190;
          while (1)
          {
            uint64_t v202 = *(unsigned __int16 *)(v199 + 16);
            if (!*(_WORD *)(v199 + 16)) {
              goto LABEL_179;
            }
            uint64_t v203 = *(void *)(v199 + 40);
            BOOL v39 = __OFSUB__(v198, v203);
            uint64_t v204 = v198 - v203;
            if (v39) {
              goto LABEL_369;
            }
            if (__OFADD__(v204, 1)) {
              goto LABEL_370;
            }
            if (v204 + 1 < 1)
            {
              uint64_t v202 = 0;
            }
            else
            {
              if (v202 == 1)
              {
                uint64_t v198 = v204;
LABEL_179:
                if (v198) {
                  goto LABEL_366;
                }
                goto LABEL_180;
              }
              long long v205 = (uint64_t *)(v199 + 64);
              uint64_t v206 = 1;
              while (1)
              {
                uint64_t v207 = *v205;
                v205 += 3;
                uint64_t v198 = v204 - v207;
                if (__OFSUB__(v204, v207)) {
                  goto LABEL_362;
                }
                if (__OFADD__(v198, 1)) {
                  goto LABEL_363;
                }
                if (v198 + 1 < 1) {
                  break;
                }
                ++v206;
                uint64_t v204 = v198;
                if (v202 == v206) {
                  goto LABEL_179;
                }
              }
              uint64_t v202 = v206;
              uint64_t v198 = v204;
            }
LABEL_180:
            char v200 = (4 * *(unsigned char *)(v199 + 18) + 8) & 0x3C;
            uint64_t v197 = ((-15 << v200) - 1) & v197 | (v202 << v200);
            uint64_t v201 = *(void *)(v199 + 24 + 24 * v202);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v199 = v201;
            if (!*(unsigned char *)(v201 + 18)) {
              goto LABEL_197;
            }
          }
        }
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v198 = v196;
        uint64_t v201 = v190;
LABEL_197:
        uint64_t v212 = *(unsigned __int16 *)(v201 + 16);
        if (*(_WORD *)(v201 + 16))
        {
          uint64_t v213 = *(void *)(v201 + 24);
          BOOL v39 = __OFSUB__(v198, v213);
          uint64_t v214 = v198 - v213;
          if (v39)
          {
LABEL_411:
            __break(1u);
            goto LABEL_412;
          }
          if (__OFADD__(v214, 1))
          {
LABEL_412:
            __break(1u);
LABEL_413:
            __break(1u);
LABEL_414:
            __break(1u);
LABEL_415:
            __break(1u);
            goto LABEL_416;
          }
          if (v214 + 1 < 1)
          {
            uint64_t v212 = 0;
          }
          else
          {
            if (v212 == 1)
            {
              uint64_t v198 = v214;
              goto LABEL_210;
            }
            uint64_t v215 = (uint64_t *)(v201 + 48);
            uint64_t v216 = 1;
            while (1)
            {
              uint64_t v217 = *v215;
              v215 += 3;
              uint64_t v198 = v214 - v217;
              if (__OFSUB__(v214, v217)) {
                goto LABEL_396;
              }
              if (__OFADD__(v198, 1)) {
                goto LABEL_397;
              }
              if (v198 + 1 < 1) {
                break;
              }
              ++v216;
              uint64_t v214 = v198;
              if (v212 == v216) {
                goto LABEL_210;
              }
            }
            uint64_t v212 = v216;
            uint64_t v198 = v214;
          }
        }
        else
        {
LABEL_210:
          if (v198)
          {
LABEL_408:
            __break(1u);
            goto LABEL_409;
          }
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v210 = v201;
        unint64_t v209 = v197 & 0xFFFFFFFFFFFFF0FFLL | (v212 << 8);
        uint64_t v194 = (uint64_t)v394;
LABEL_195:
        swift_unknownObjectRetain();
        uint64_t v211 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v194, v209, v210, v190, (uint64_t)v410);
        uint64_t result = swift_unknownObjectRelease_n();
      }
      else
      {
        unint64_t v208 = swift_unknownObjectRetain();
        unint64_t v209 = specialized Rope._endPath.getter(v208);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v210 = 0;
        uint64_t v198 = 0;
        if (v190) {
          goto LABEL_195;
        }
        uint64_t v211 = 0;
      }
      uint64_t v218 = v402;
      long long v392 = (void *)(v196 - v198);
      if (__OFSUB__(v196, v198))
      {
LABEL_384:
        __break(1u);
        goto LABEL_385;
      }
      long long v219 = *v388;
      long long v220 = v388[1];
      long long v468 = v388[2];
      v467[1] = v220;
      v467[0] = v219;
      long long v221 = *v388;
      long long v222 = v388[1];
      v492[2] = v468;
      v492[1] = v222;
      v492[0] = v221;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v492, (uint64_t)v493);
      outlined retain of Locale((uint64_t)v493);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v467);
      if (__OFSUB__(0, v198))
      {
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
      uint64_t v223 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v374 = v224;
      uint64_t v226 = v225;
      uint64_t v228 = v227;
      uint64_t result = outlined release of Locale((uint64_t)&v454);
      if (v211 >= (uint64_t)v389)
      {
LABEL_386:
        __break(1u);
        goto LABEL_387;
      }
      if (v394 != *(void **)(v218 + 88))
      {
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }
      unint64_t v398 = v209;
      v365[1] = v228;
      v365[2] = v226;
      v365[3] = v223;
      uint64_t v229 = *(void *)(v218 + 64);
      if (v210)
      {
        unint64_t v230 = v398;
        unint64_t v231 = v210 + 24 * ((v398 >> ((4 * *(unsigned char *)(v210 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v232 = *(uint64_t **)(v231 + 40);
        uint64_t v233 = v210;
        v409 = *(long long **)(v231 + 32);
        swift_bridgeObjectRetain();
        uint64_t v366 = v232;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v234 = (uint64_t)v394;
        uint64_t v235 = v394;
      }
      else
      {
        uint64_t v233 = 0;
        swift_unknownObjectRetain();
        unint64_t v230 = v398;
        specialized Rope._Node.subscript.getter(v398, v229);
        v409 = v236;
        uint64_t v366 = v237;
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v229 = *(void *)(v218 + 64);
        uint64_t v235 = *(void **)(v218 + 88);
        uint64_t v234 = (uint64_t)v394;
      }
      long long v390 = (void *)(v211 + 1);
      v410 = v426;
      v418 = (void *)v234;
      uint64_t v419 = v230;
      v408 = (long long *)v459;
      long long v375 = (uint64_t *)(v401 + 40);
      uint64_t v420 = v233;
      while (2)
      {
        if ((void *)v234 != v235) {
          goto LABEL_371;
        }
        uint64_t v383 = (uint64_t)v235;
        uint64_t v391 = v233;
        if (v233)
        {
          unint64_t v238 = *(void *)(v233 + 24 * ((v398 >> ((4 * *(unsigned char *)(v233 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          unint64_t v238 = specialized Rope._Node.subscript.getter(v398, v229);
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (__OFADD__(v392, v238)) {
          goto LABEL_372;
        }
        uint64_t v373 = (void *)((char *)v392 + v238);
        if (v229)
        {
          unint64_t v239 = ((-15 << ((4 * *(unsigned char *)(v229 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v229 + 18) | ((unint64_t)*(unsigned __int16 *)(v229 + 16) << ((4 * *(unsigned char *)(v229 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v239 = 0;
        }
        uint64_t v240 = v405;
        unint64_t v241 = v398;
        if (v398 >= v239) {
          goto LABEL_373;
        }
        if (v391)
        {
          char v242 = (4 * *(unsigned char *)(v391 + 18) + 8) & 0x3C;
          unint64_t v243 = ((v398 >> v242) & 0xF) + 1;
          if (v243 < *(unsigned __int16 *)(v391 + 16))
          {
            unint64_t v244 = (v243 << v242) | ((-15 << v242) - 1) & v398;
            uint64_t result = swift_unknownObjectRelease_n();
            goto LABEL_236;
          }
        }
        int v245 = *(unsigned __int8 *)(v229 + 18);
        char v246 = (4 * v245 + 8) & 0x3C;
        unint64_t v247 = (v398 >> v246) & 0xF;
        *(void *)&long long v457 = v247;
        if (v245)
        {
          swift_unknownObjectRetain();
          uint64_t v240 = v405;
          char v248 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v229 + 24, (uint64_t *)&v457, (uint64_t)&v418, v229, v245);
          uint64_t result = swift_unknownObjectRelease();
          if (v248)
          {
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v244 = v419;
LABEL_236:
            uint64_t v249 = v420;
LABEL_237:
            long long v250 = v409;
LABEL_244:
            if (v390 == v389)
            {
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
LABEL_285:
              if (v383 == *(void *)(v218 + 88))
              {
                if (v391)
                {
                  unint64_t v283 = *(void *)(v391 + 24 * ((v241 >> ((4 * *(unsigned char *)(v391 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  uint64_t v284 = *(void *)(v218 + 64);
                  swift_unknownObjectRetain();
                  unint64_t v283 = specialized Rope._Node.subscript.getter(v241, v284);
                  swift_unknownObjectRelease();
                }
                uint64_t v285 = v388;
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v286 = (char *)v392 + v283;
                if (!__OFADD__(v392, v283))
                {
                  long long v287 = *v285;
                  long long v288 = v285[1];
                  long long v466 = v285[2];
                  long long v465 = v288;
                  long long v464 = v287;
                  long long v289 = *v285;
                  long long v290 = v285[1];
                  v494[2] = v466;
                  v494[1] = v290;
                  v494[0] = v289;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v494, (uint64_t)v495);
                  outlined retain of Locale((uint64_t)v495);
                  BigString.utf8.getter();
                  outlined release of Locale((uint64_t)&v464);
                  uint64_t result = BigString.Index.utf8Offset.getter();
                  if (!__OFSUB__(v286, result))
                  {
                    uint64_t v291 = BigString.UTF8View.index(_:offsetBy:)();
                    uint64_t v293 = v292;
                    uint64_t v295 = v294;
                    long long v296 = v285;
                    uint64_t v298 = v297;
                    outlined release of Locale((uint64_t)&v455);
                    uint64_t v300 = v381;
                    uint64_t v299 = v382;
                    uint64_t v302 = v379;
                    uint64_t v301 = v380;
                    char v303 = static BigString.Index.< infix(_:_:)();
                    if (v303) {
                      uint64_t v304 = v299;
                    }
                    else {
                      uint64_t v304 = v291;
                    }
                    if (v303)
                    {
                      uint64_t v293 = v300;
                      uint64_t v305 = v301;
                    }
                    else
                    {
                      uint64_t v305 = v295;
                    }
                    uint64_t v307 = v395;
                    unint64_t v306 = v396;
                    if (v303) {
                      uint64_t v298 = v302;
                    }
                    long long v308 = *v296;
                    long long v309 = v296[1];
                    long long v463 = v296[2];
                    v462[1] = v309;
                    v462[0] = v308;
                    long long v310 = *v296;
                    long long v311 = v296[1];
                    uint64_t v312 = v304;
                    v496[2] = v463;
                    v496[1] = v311;
                    v496[0] = v310;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(v496, (uint64_t)v497);
                    outlined retain of Locale((uint64_t)v497);
                    uint64_t v313 = v397;
                    uint64_t v314 = v400;
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if ((result & 1) == 0)
                    {
                      *(void *)&long long v428 = v307;
                      *((void *)&v428 + 1) = v313;
                      *(void *)&long long v429 = v306;
                      *((void *)&v429 + 1) = v314;
                      *(void *)&long long v430 = v312;
                      *((void *)&v430 + 1) = v293;
                      *(void *)&long long v431 = v305;
                      *((void *)&v431 + 1) = v298;
                      uint64_t v315 = *(void *)(v407 + 16);
                      if (!v315 || (static BigString.Index.== infix(_:_:)() & 1) != 0)
                      {
LABEL_331:
                        outlined release of Locale((uint64_t)v462);
                        uint64_t result = outlined release of AttributedString.Runs((uint64_t)v498);
                        uint64_t v339 = v298;
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v316 = 40;
                        uint64_t v317 = v315;
                        v410 = (unsigned char *)v312;
                        while (*(void *)(v407 + v316))
                        {
                          swift_bridgeObjectRelease();
                          v316 += 16;
                          if (!--v317)
                          {
                            swift_bridgeObjectRelease();
                            unint64_t v319 = v396;
                            uint64_t v318 = v397;
                            uint64_t v320 = v400;
                            goto LABEL_309;
                          }
                        }
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease_n();
                        BigString.utf8.getter();
                        BigString.UTF8View.subscript.getter();
                        outlined release of Locale((uint64_t)&v456);
                        unint64_t v319 = v396;
                        uint64_t v318 = v397;
                        uint64_t v320 = v400;
                        uint64_t result = static BigString.Index.< infix(_:_:)();
                        if (result) {
                          goto LABEL_413;
                        }
                        v416[0] = v307;
                        v416[1] = v318;
                        v416[2] = v319;
                        v416[3] = v320;
                        v416[4] = v307;
                        v416[5] = v318;
                        v416[6] = v319;
                        v416[7] = v320;
                        specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v416, (uint64_t *)&v418);
                        outlined release of Locale((uint64_t)&v457);
                        uint64_t v321 = v425;
                        if (v425 != 2)
                        {
                          uint64_t v293 = v423;
                          uint64_t v305 = v424;
                          v410 = (unsigned char *)v422;
                          uint64_t result = static BigString.Index.< infix(_:_:)();
                          uint64_t v298 = v321;
                          if (result) {
                            goto LABEL_414;
                          }
                        }
LABEL_309:
                        *(void *)&long long v411 = v307;
                        *((void *)&v411 + 1) = v318;
                        *(void *)&long long v412 = v319;
                        *((void *)&v412 + 1) = v320;
                        uint64_t v312 = (uint64_t)v410;
                        *(void *)&long long v413 = v410;
                        *((void *)&v413 + 1) = v293;
                        *(void *)&long long v414 = v305;
                        *((void *)&v414 + 1) = v298;
                        uint64_t v322 = *(void *)(v407 + 16);
                        if (!v322) {
                          goto LABEL_331;
                        }
                        uint64_t v323 = 40;
                        while (!*(void *)(v407 + v323))
                        {
                          v323 += 16;
                          if (!--v322) {
                            goto LABEL_331;
                          }
                        }
                        *(void *)&long long v433 = MEMORY[0x1E4FBC860];
                        uint64_t v324 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
                        do
                        {
                          unint64_t v329 = *v324;
                          if (*v324)
                          {
                            uint64_t v330 = *(v324 - 1);
                            if ((v329 & 0x2000000000000000) != 0 ? HIBYTE(v329) & 0xF : v330 & 0xFFFFFFFFFFFFLL)
                            {
                              if ((v329 & 0x1000000000000000) != 0)
                              {
                                int v325 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                              }
                              else
                              {
                                if ((v329 & 0x2000000000000000) != 0)
                                {
                                  v418 = (void *)*(v324 - 1);
                                  uint64_t v419 = v329 & 0xFFFFFFFFFFFFFFLL;
                                  swift_bridgeObjectRetain();
                                }
                                else
                                {
                                  if ((v330 & 0x1000000000000000) == 0) {
                                    _StringObject.sharedUTF8.getter();
                                  }
                                  swift_bridgeObjectRetain();
                                }
                                int v325 = _decodeScalar(_:startingAt:)();
                                swift_bridgeObjectRelease();
                              }
                              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                              uint64_t v326 = *(void *)(v433 + 16);
                              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v326);
                              uint64_t v327 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v326, v325);
                              destructiveProjectEnumData for PredicateCodableError(v327, v328);
                            }
                          }
                          v324 += 2;
                          --v315;
                        }
                        while (v315);
                        swift_bridgeObjectRelease();
                        uint64_t v332 = v433;
                        BigString.unicodeScalars.getter();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v461);
                        uint64_t v333 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v332);
                        uint64_t v335 = v334;
                        uint64_t v337 = v336;
                        uint64_t v339 = v338;
                        swift_bridgeObjectRelease();
                        outlined release of Locale((uint64_t)&v418);
                        uint64_t v312 = (uint64_t)v410;
                        if (v339 == 2) {
                          goto LABEL_331;
                        }
                        char v363 = static BigString.Index.< infix(_:_:)();
                        outlined release of Locale((uint64_t)v462);
                        uint64_t result = outlined release of AttributedString.Runs((uint64_t)v498);
                        if (v363) {
                          goto LABEL_415;
                        }
                        uint64_t v312 = v333;
                        uint64_t v293 = v335;
                        uint64_t v305 = v337;
                      }
                      if (v393 == *(void **)(v402 + 88))
                      {
                        v410 = (unsigned char *)v339;
                        if (v387)
                        {
                          uint64_t v340 = *(void *)(v387 + 24 * ((v386 >> ((4 * *(unsigned char *)(v387 + 18) + 8) & 0x3C)) & 0xF) + 32);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          uint64_t v341 = *(void *)(v402 + 64);
                          swift_unknownObjectRetain();
                          specialized Rope._Node.subscript.getter(v386, v341);
                          uint64_t v340 = v342;
                          swift_unknownObjectRelease();
                        }
                        uint64_t v343 = (*(uint64_t (**)(void, void))(v378[4] + 24))(v378[2], v378[4]);
                        if (*(void *)(v340 + 16)
                          && (unint64_t v345 = specialized __RawDictionaryStorage.find<A>(_:)(v343, v344), (v346 & 1) != 0))
                        {
                          outlined init with copy of AttributedString._AttributeValue(*(void *)(v340 + 56) + 72 * v345, (uint64_t)&v433);
                        }
                        else
                        {
                          uint64_t v437 = 0;
                          long long v435 = 0u;
                          long long v436 = 0u;
                          long long v433 = 0u;
                          long long v434 = 0u;
                        }
                        swift_bridgeObjectRelease();
                        if (*((void *)&v434 + 1))
                        {
                          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v433, (uint64_t)v417);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                          uint64_t v348 = v369;
                          swift_dynamicCast();
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v433);
                          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness
                                                                                                - 8)
                                                                                    + 56))(v348, 0, 1, AssociatedTypeWitness);
                        }
                        else
                        {
                          outlined destroy of Any?((uint64_t)&v433, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          uint64_t v349 = swift_getAssociatedTypeWitness();
                          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v349 - 8) + 56))(v369, 1, 1, v349);
                        }
                        uint64_t v350 = (*(uint64_t (**)(void, void))(v378[5] + 24))(v378[3], v378[5]);
                        if (*(void *)(v340 + 16)
                          && (unint64_t v352 = specialized __RawDictionaryStorage.find<A>(_:)(v350, v351), (v353 & 1) != 0))
                        {
                          outlined init with copy of AttributedString._AttributeValue(*(void *)(v340 + 56) + 72 * v352, (uint64_t)&v433);
                        }
                        else
                        {
                          uint64_t v437 = 0;
                          long long v435 = 0u;
                          long long v436 = 0u;
                          long long v433 = 0u;
                          long long v434 = 0u;
                        }
                        swift_bridgeObjectRelease();
                        if (*((void *)&v434 + 1))
                        {
                          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v433, (uint64_t)v417);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                          uint64_t v354 = swift_getAssociatedTypeWitness();
                          uint64_t v355 = v370;
                          swift_dynamicCast();
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v433);
                          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v354 - 8) + 56))(v355, 0, 1, v354);
                        }
                        else
                        {
                          outlined destroy of Any?((uint64_t)&v433, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          uint64_t v356 = swift_getAssociatedTypeWitness();
                          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v356 - 8) + 56))(v370, 1, 1, v356);
                        }
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v357 = (uint64_t)v410;
                        uint64_t v359 = v384;
                        uint64_t v358 = v385;
                        unint64_t v360 = v376;
                        uint64_t v361 = v367;
                        uint64_t result = static BigString.Index.< infix(_:_:)();
                        if ((result & 1) == 0)
                        {
                          uint64_t v362 = v368;
                          *uint64_t v368 = v358;
                          v362[1] = v359;
                          v362[2] = v360;
                          v362[3] = v361;
                          v362[4] = v312;
                          v362[5] = v293;
                          v362[6] = v305;
                          v362[7] = v357;
                          return result;
                        }
                        goto LABEL_393;
                      }
LABEL_392:
                      __break(1u);
LABEL_393:
                      __break(1u);
LABEL_394:
                      __break(1u);
LABEL_395:
                      __break(1u);
LABEL_396:
                      __break(1u);
LABEL_397:
                      __break(1u);
                      goto LABEL_398;
                    }
LABEL_391:
                    __break(1u);
                    goto LABEL_392;
                  }
LABEL_390:
                  __break(1u);
                  goto LABEL_391;
                }
LABEL_389:
                __break(1u);
                goto LABEL_390;
              }
LABEL_388:
              __break(1u);
              goto LABEL_389;
            }
            long long v254 = *(void **)(v218 + 88);
            v394 = v418;
            if (v418 != v254) {
              goto LABEL_374;
            }
            unint64_t v371 = v249;
            unint64_t v372 = v244;
            if (v249)
            {
              unint64_t v255 = v249 + 24 * ((v244 >> ((4 * *(unsigned char *)(v249 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v257 = *(void *)(v255 + 32);
              uint64_t v256 = *(void *)(v255 + 40);
              swift_bridgeObjectRetain();
              uint64_t v377 = v256;
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v258 = *(void *)(v218 + 64);
              swift_unknownObjectRetain();
              uint64_t v240 = v405;
              specialized Rope._Node.subscript.getter(v244, v258);
              uint64_t v257 = v259;
              uint64_t v377 = v260;
              long long v250 = v409;
              swift_unknownObjectRelease();
            }
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v261 = 0;
            long long v262 = v375;
            uint64_t v406 = v257;
LABEL_254:
            uint64_t v264 = v261 + 1;
            if (__OFADD__(v261, 1))
            {
              __break(1u);
LABEL_360:
              __break(1u);
              goto LABEL_361;
            }
            uint64_t v266 = *(v262 - 1);
            uint64_t v265 = *v262;
            if (*((void *)v250 + 2))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v267 = specialized __RawDictionaryStorage.find<A>(_:)(v266, v265);
              if (v268)
              {
                outlined init with copy of AttributedString._AttributeValue(*((void *)v250 + 7) + 72 * v267, (uint64_t)&v433);
              }
              else
              {
                uint64_t v437 = 0;
                long long v435 = 0u;
                long long v436 = 0u;
                long long v433 = 0u;
                long long v434 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*(void *)(v257 + 16))
              {
LABEL_262:
                swift_bridgeObjectRetain();
                unint64_t v269 = specialized __RawDictionaryStorage.find<A>(_:)(v266, v265);
                if (v270)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v257 + 56) + 72 * v269, (uint64_t)&v428);
                }
                else
                {
                  uint64_t v432 = 0;
                  long long v430 = 0u;
                  long long v431 = 0u;
                  long long v428 = 0u;
                  long long v429 = 0u;
                }
                swift_bridgeObjectRelease();
                long long v250 = v409;
LABEL_266:
                swift_bridgeObjectRelease();
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v433, (uint64_t)&v418, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v428, (uint64_t)v410, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (v421)
                {
                  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v418, (uint64_t)v416, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  if (!v427) {
                    goto LABEL_282;
                  }
                  long long v271 = *((_OWORD *)v410 + 3);
                  long long v413 = *((_OWORD *)v410 + 2);
                  long long v414 = v271;
                  uint64_t v415 = *((void *)v410 + 8);
                  long long v272 = *((_OWORD *)v410 + 1);
                  long long v411 = *(_OWORD *)v410;
                  long long v412 = v272;
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v416, (uint64_t)v496);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v411, (uint64_t)v494);
                  outlined init with copy of (Hashable & Sendable)?((uint64_t)v496, (uint64_t)&v457, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  outlined init with copy of (Hashable & Sendable)?((uint64_t)v494, (uint64_t)v408, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  if (v458)
                  {
                    if (v460)
                    {
                      outlined init with take of any PredicateExpression<Self.Output == B1>(&v457, (uint64_t)&v464);
                      outlined init with take of any PredicateExpression<Self.Output == B1>(v408, (uint64_t)v462);
                      uint64_t v273 = *((void *)&v465 + 1);
                      *((void *)&v399 + 1) = v466;
                      *(void *)&long long v399 = __swift_project_boxed_opaque_existential_1(&v464, *((uint64_t *)&v465 + 1));
                      v404 = (long long *)v365;
                      uint64_t v274 = *(void *)(v273 - 8);
                      MEMORY[0x1F4188790](v399);
                      long long v276 = (char *)v365 - ((v275 + 15) & 0xFFFFFFFFFFFFFFF0);
                      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v462, (uint64_t)v461);
                      uint64_t v277 = type metadata accessor for Optional();
                      v403 = v365;
                      uint64_t v278 = *(void *)(v277 - 8);
                      MEMORY[0x1F4188790](v277);
                      uint64_t v280 = (char *)v365 - v279;
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                      int v281 = swift_dynamicCast();
                      uint64_t v282 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v274 + 56);
                      if (v281)
                      {
                        v282(v280, 0, 1, v273);
                        (*(void (**)(char *, char *, uint64_t))(v274 + 32))(v276, v280, v273);
                        char v263 = dispatch thunk of static Equatable.== infix(_:_:)();
                        (*(void (**)(char *, uint64_t))(v274 + 8))(v276, v273);
                      }
                      else
                      {
                        v282(v280, 1, 1, v273);
                        (*(void (**)(char *, uint64_t))(v278 + 8))(v280, v277);
                        char v263 = 0;
                      }
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v462);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v464);
                      uint64_t v240 = v405;
                      long long v250 = v409;
                      goto LABEL_252;
                    }
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v457);
LABEL_251:
                    char v263 = 0;
                  }
                  else
                  {
                    if (v460)
                    {
                      outlined destroy of Any?((uint64_t)v408, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                      goto LABEL_251;
                    }
                    char v263 = 1;
                  }
LABEL_252:
                  outlined destroy of Any?((uint64_t)v494, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  outlined destroy of Any?((uint64_t)v496, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v411);
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v416);
                  outlined destroy of Any?((uint64_t)&v418, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v428, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t result = outlined destroy of Any?((uint64_t)&v433, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v257 = v406;
                  if ((v263 & 1) == 0) {
                    goto LABEL_284;
                  }
                }
                else
                {
                  if (v427) {
                    goto LABEL_283;
                  }
                  outlined destroy of Any?((uint64_t)&v418, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v428, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t result = outlined destroy of Any?((uint64_t)&v433, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                }
                v262 += 2;
                ++v261;
                if (v264 == v240)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v218 = v402;
                  uint64_t v229 = *(void *)(v402 + 64);
                  uint64_t v235 = *(void **)(v402 + 88);
                  long long v392 = v373;
                  uint64_t v234 = (uint64_t)v394;
                  v418 = v394;
                  uint64_t v419 = v372;
                  uint64_t v233 = v371;
                  unint64_t v398 = v372;
                  uint64_t v420 = v371;
                  BOOL v39 = __OFADD__(v390, 1);
                  long long v390 = (void *)((char *)v390 + 1);
                  if (!v39) {
                    continue;
                  }
                  __break(1u);
LABEL_282:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v416);
LABEL_283:
                  outlined destroy of Any?((uint64_t)&v418, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v428, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v433, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_284:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v218 = v402;
                  unint64_t v241 = v398;
                  goto LABEL_285;
                }
                goto LABEL_254;
              }
            }
            else
            {
              uint64_t v437 = 0;
              long long v435 = 0u;
              long long v436 = 0u;
              long long v433 = 0u;
              long long v434 = 0u;
              swift_bridgeObjectRetain();
              if (*(void *)(v257 + 16)) {
                goto LABEL_262;
              }
            }
            uint64_t v432 = 0;
            long long v430 = 0u;
            long long v431 = 0u;
            long long v428 = 0u;
            long long v429 = 0u;
            goto LABEL_266;
          }
        }
        else
        {
          unint64_t v251 = v247 + 1;
          if (v247 + 1 < *(unsigned __int16 *)(v229 + 16))
          {
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v244 = (v251 << v246) | ((-15 << v246) - 1) & v241;
            uint64_t v249 = v229;
            goto LABEL_237;
          }
        }
        break;
      }
      if (v229)
      {
        int v252 = *(unsigned __int8 *)(v229 + 18);
        uint64_t v253 = *(unsigned __int16 *)(v229 + 16);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v244 = ((-15 << ((4 * v252 + 8) & 0x3C)) - 1) & v252 | (unint64_t)(v253 << ((4 * v252 + 8) & 0x3C));
      }
      else
      {
        unint64_t v244 = 0;
      }
      long long v250 = v409;
      uint64_t v249 = 0;
      v418 = (void *)v383;
      goto LABEL_244;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.startIndex.getter();
  uint64_t v158 = v408;
  uint64_t v161 = v409;
  uint64_t v159 = v406;
  char v162 = static BigString.Index.< infix(_:_:)();
  uint64_t v53 = (uint64_t)v410;
  if ((v162 & 1) == 0)
  {
LABEL_137:
    uint64_t v160 = v154;
    uint64_t v157 = v161;
    goto LABEL_138;
  }
  unint64_t v376 = v133;
  BigString.utf8.getter();
  v394 = (void *)BigString.UTF8View.index(before:)();
  uint64_t v164 = v163;
  uint64_t v166 = v165;
  uint64_t v168 = v167;
  outlined release of Locale((uint64_t)&v441);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  unint64_t v169 = v409;
  outlined release of Locale((uint64_t)&v442);
  v404 = v154;
  unint64_t v170 = v394;
  uint64_t v391 = v166;
  long long v392 = v164;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    v472[0] = v170;
    v472[1] = v392;
    v472[2] = v391;
    v472[3] = v168;
    uint64_t v171 = v404;
    v472[4] = v404;
    v472[5] = v158;
    v472[6] = v159;
    v472[7] = v169;
    specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)v472, (uint64_t *)&v418);
    outlined release of Locale((uint64_t)&v443);
    uint64_t v161 = v421;
    unint64_t v133 = v376;
    uint64_t v160 = v171;
    uint64_t v157 = v409;
    if (v421 == (long long *)2) {
      goto LABEL_138;
    }
    unint64_t v133 = v420;
    uint64_t v154 = v409;
    uint64_t v384 = v419;
    uint64_t v385 = (uint64_t)v418;
    uint64_t v172 = v160;
    char v173 = static BigString.Index.< infix(_:_:)();
    uint64_t v157 = v154;
    uint64_t v160 = v172;
    uint64_t v53 = (uint64_t)v161;
    if ((v173 & 1) == 0) {
      goto LABEL_138;
    }
    __break(1u);
    goto LABEL_137;
  }
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice2.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t **a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v6[4] = TupleTypeMetadata3;
  uint64_t v10 = *(void *)(TupleTypeMetadata3 - 8);
  v6[5] = v10;
  long long v11 = (char *)malloc(*(void *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  long long v12 = AttributedString.Runs.AttributesSlice2.subscript.read(v6, a2, a3);
  uint64_t v14 = v13;
  long long v16 = v15;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(void *)(v7 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata3 + 48)], v14, v8);
  long long v17 = &v11[*(int *)(TupleTypeMetadata3 + 64)];
  long long v18 = v16[1];
  long long v19 = v16[2];
  long long v20 = v16[3];
  *(_OWORD *)long long v17 = *v16;
  *((_OWORD *)v17 + 1) = v18;
  *((_OWORD *)v17 + 2) = v19;
  *((_OWORD *)v17 + 3) = v20;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice2<A, B>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  long long v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);

  free((void *)v3);
}

uint64_t (*AttributedString.Runs.AttributesSlice2.subscript.read(uint64_t *a1, uint64_t *a2, void *a3))()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *a1 = TupleTypeMetadata3;
  uint64_t v7 = *(void *)(TupleTypeMetadata3 - 8);
  a1[1] = v7;
  uint64_t v8 = (char *)malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  AttributedString.Runs.AttributesSlice2.subscript.getter((uint64_t)v8, (uint64_t)&v8[*(int *)(TupleTypeMetadata3 + 48)], (uint64_t *)&v8[*(int *)(TupleTypeMetadata3 + 64)], a2, a3);
  return AttributedString.Runs.AttributesSlice1.subscript.read;
}

void AttributedString.Runs.AttributesSlice1.subscript.read(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836F0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice2<A, B>()
{
  swift_getWitnessTable();

  JUMPOUT(0x185301E20);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice2.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice2.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  long long v11 = *(_OWORD *)(v5 + 176);
  v19[10] = *(_OWORD *)(v5 + 160);
  v19[11] = v11;
  uint64_t v20 = *(void *)(v5 + 192);
  long long v12 = *(_OWORD *)(v5 + 112);
  v19[6] = *(_OWORD *)(v5 + 96);
  v19[7] = v12;
  long long v13 = *(_OWORD *)(v5 + 144);
  v19[8] = *(_OWORD *)(v5 + 128);
  v19[9] = v13;
  long long v14 = *(_OWORD *)(v5 + 48);
  _OWORD v19[2] = *(_OWORD *)(v5 + 32);
  v19[3] = v14;
  long long v15 = *(_OWORD *)(v5 + 80);
  v19[4] = *(_OWORD *)(v5 + 64);
  v19[5] = v15;
  long long v16 = *(_OWORD *)(v5 + 16);
  v19[0] = *(_OWORD *)v5;
  v19[1] = v16;
  uint64_t v17 = v10;
  outlined retain of AttributedString.Runs((uint64_t)v19);
  *(void *)&double result = AttributedString.Runs.AttributesSlice2.init(runs:)(v5, *(void *)(v9 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v17 + *MEMORY[0x1E4FBC5F0] + 8), a3, a4, a5).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice3.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18210C6B0;
  *(void *)(v16 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a2, a5);
  *(void *)(v16 + 40) = v17;
  *(void *)(v16 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  *(void *)(v16 + 56) = v18;
  *(void *)(v16 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a4, a7);
  *(void *)(v16 + 72) = v19;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v34, a2, a5);
  uint64_t v20 = v34[0];
  uint64_t v21 = v34[1];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v33, a3, a6);
  uint64_t v22 = v33[0];
  uint64_t v23 = v33[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 32))(v32, a4, a7);
  long long v24 = specialized RangeReplaceableCollection.init(_contents:_:_:)(v20, v21, v22, v23, v32[0], v32[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v22, v23);
  outlined consume of AttributedString.AttributeRunBoundaries?(v20, v21);
  long long v25 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v25;
  uint64_t v26 = *(void *)(a1 + 192);
  long long v27 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v27;
  long long v28 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v28;
  long long v29 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v29;
  long long v30 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v30;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(void *)(a8 + 192) = v26;
  *(void *)(a8 + 200) = v16;
  *(void *)(a8 + 208) = v24;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice2.index(after:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v171 = a2;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[3];
  uint64_t v188 = a1[2];
  uint64_t v189 = v3;
  long long v6 = *v2;
  long long v7 = v2[1];
  long long v8 = v2[2];
  v247[3] = v2[3];
  v247[2] = v8;
  v247[0] = v6;
  v247[1] = v7;
  long long v9 = v2[4];
  long long v10 = v2[5];
  long long v11 = v2[6];
  long long v251 = v2[7];
  long long v250 = v11;
  long long v248 = v9;
  long long v249 = v10;
  long long v12 = v2[8];
  long long v13 = v2[9];
  long long v14 = v2[10];
  long long v15 = v2[11];
  uint64_t v16 = *((void *)v2 + 24);
  uint64_t v190 = *((void *)v2 + 25);
  uint64_t v256 = v16;
  long long v255 = v15;
  long long v254 = v14;
  long long v252 = v12;
  long long v253 = v13;
  uint64_t v185 = *((void *)v2 + 26);
  uint64_t v17 = *((void *)&v14 + 1);
  long long v18 = v15;
  uint64_t v180 = v16;
  outlined retain of AttributedString.Runs((uint64_t)v247);
  uint64_t v183 = v5;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_185;
  }
  uint64_t v184 = v4;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_186:
    __break(1u);
    goto LABEL_187;
  }
  uint64_t v192 = *(void *)(v190 + 16);
  if (!v192)
  {
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  uint64_t v168 = *((void *)&v18 + 1);
  uint64_t v169 = v18;
  uint64_t v170 = v17;
  uint64_t v20 = *(void *)&v247[0];
  uint64_t v22 = *(void *)(*(void *)&v247[0] + 64);
  uint64_t v21 = *(void *)(*(void *)&v247[0] + 72);
  uint64_t v23 = *(void *)(*(void *)&v247[0] + 80);
  uint64_t v191 = *(void *)(*(void *)&v247[0] + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v22) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  if (result < 0) {
    goto LABEL_188;
  }
  uint64_t v25 = result;
  if (v24 < result) {
    goto LABEL_188;
  }
  uint64_t v178 = v20;
  if (v22 && result < v23 && *(_WORD *)(v22 + 16))
  {
    uint64_t v200 = v21;
    uint64_t v26 = *(unsigned __int8 *)(v22 + 18);
    if (*(unsigned char *)(v22 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v27 = v25;
      uint64_t v28 = v22;
      while (1)
      {
        uint64_t v31 = *(unsigned __int16 *)(v28 + 16);
        if (!*(_WORD *)(v28 + 16)) {
          break;
        }
        uint64_t v32 = *(void *)(v28 + 40);
        BOOL v33 = __OFSUB__(v27, v32);
        uint64_t v34 = v27 - v32;
        if (v33) {
          goto LABEL_179;
        }
        if (__OFADD__(v34, 1)) {
          goto LABEL_180;
        }
        if (v34 + 1 < 1)
        {
          uint64_t v31 = 0;
          goto LABEL_16;
        }
        if (v31 == 1)
        {
          uint64_t v27 = v34;
          break;
        }
        char v35 = (uint64_t *)(v28 + 64);
        uint64_t v36 = 1;
        while (1)
        {
          uint64_t v37 = *v35;
          v35 += 3;
          uint64_t v27 = v34 - v37;
          if (__OFSUB__(v34, v37)) {
            goto LABEL_176;
          }
          if (__OFADD__(v27, 1))
          {
LABEL_177:
            __break(1u);
            goto LABEL_178;
          }
          if (v27 + 1 < 1) {
            break;
          }
          ++v36;
          uint64_t v34 = v27;
          if (v31 == v36) {
            goto LABEL_15;
          }
        }
        uint64_t v31 = v36;
        uint64_t v27 = v34;
LABEL_16:
        char v29 = (4 * *(unsigned char *)(v28 + 18) + 8) & 0x3C;
        uint64_t v26 = ((-15 << v29) - 1) & v26 | (v31 << v29);
        uint64_t v30 = *(void *)(v28 + 24 + 24 * v31);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v28 = v30;
        if (!*(unsigned char *)(v30 + 18)) {
          goto LABEL_131;
        }
      }
LABEL_15:
      if (!v27) {
        goto LABEL_16;
      }
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
      goto LABEL_184;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v27 = v25;
    uint64_t v30 = v22;
LABEL_131:
    uint64_t v142 = *(unsigned __int16 *)(v30 + 16);
    uint64_t v186 = v30;
    if (v142)
    {
      uint64_t v143 = *(void *)(v30 + 24);
      BOOL v33 = __OFSUB__(v27, v143);
      uint64_t v144 = v27 - v143;
      uint64_t v38 = v183;
      uint64_t v20 = v178;
      if (v33)
      {
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
      if (__OFADD__(v144, 1))
      {
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
        goto LABEL_203;
      }
      if (v144 + 1 < 1)
      {
        uint64_t v142 = 0;
      }
      else
      {
        if (v142 == 1)
        {
          uint64_t v27 = v144;
          goto LABEL_167;
        }
        uint64_t v157 = (uint64_t *)(v186 + 48);
        uint64_t v158 = 1;
        while (1)
        {
          uint64_t v159 = *v157;
          v157 += 3;
          uint64_t v27 = v144 - v159;
          if (__OFSUB__(v144, v159)) {
            goto LABEL_196;
          }
          if (__OFADD__(v27, 1)) {
            goto LABEL_197;
          }
          if (v27 + 1 < 1) {
            break;
          }
          ++v158;
          uint64_t v144 = v27;
          if (v142 == v158) {
            goto LABEL_167;
          }
        }
        uint64_t v142 = v158;
        uint64_t v27 = v144;
      }
LABEL_168:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v160 = v26 & 0xFFFFFFFFFFFFF0FFLL;
      uint64_t v41 = v186;
      unint64_t v40 = v160 | (v142 << 8);
      uint64_t v21 = v200;
      goto LABEL_31;
    }
    uint64_t v38 = v183;
    uint64_t v20 = v178;
LABEL_167:
    if (v27)
    {
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }
    goto LABEL_168;
  }
  uint64_t v38 = v183;
  unint64_t v39 = swift_unknownObjectRetain();
  unint64_t v40 = specialized Rope._endPath.getter(v39);
  swift_unknownObjectRelease();
  uint64_t v41 = 0;
  uint64_t v27 = 0;
  if (!v22)
  {
    uint64_t v42 = 0;
LABEL_32:
    long long v43 = *(_OWORD *)(v20 + 16);
    long long v44 = *(_OWORD *)(v20 + 32);
    long long v241 = *(_OWORD *)(v20 + 48);
    v240[1] = v44;
    v240[0] = v43;
    long long v45 = *(_OWORD *)(v20 + 16);
    long long v46 = *(_OWORD *)(v20 + 32);
    v242[2] = v241;
    v242[1] = v46;
    v242[0] = v45;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v242, (uint64_t)v243);
    outlined retain of Locale((uint64_t)v243);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v240);
    if (__OFSUB__(0, v27))
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    uint64_t v47 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v166 = v49;
    uint64_t v167 = v48;
    uint64_t v165 = v50;
    uint64_t result = outlined release of Locale((uint64_t)&v227);
    uint64_t v177 = *((void *)&v248 + 1);
    if (v42 >= *((uint64_t *)&v248 + 1))
    {
LABEL_190:
      __break(1u);
      goto LABEL_191;
    }
    if (v191 != *(void *)(v20 + 88))
    {
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
      goto LABEL_194;
    }
    unint64_t v187 = v40;
    v162[1] = v47;
    uint64_t v51 = *(uint64_t **)(v20 + 64);
    if (v41)
    {
      unint64_t v52 = v187;
      unint64_t v53 = v41 + 24 * ((v187 >> ((4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v54 = *(void *)(v53 + 40);
      uint64_t v195 = *(void *)(v53 + 32);
      swift_bridgeObjectRetain();
      uint64_t v164 = v54;
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v55 = v191;
      uint64_t v56 = v191;
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v52 = v187;
      specialized Rope._Node.subscript.getter(v187, (uint64_t)v51);
      uint64_t v195 = v57;
      uint64_t v164 = v58;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v51 = *(uint64_t **)(v20 + 64);
      uint64_t v56 = *(void *)(v20 + 88);
      uint64_t v55 = v191;
    }
    uint64_t v163 = (long long *)(v20 + 16);
    uint64_t v182 = v42 + 1;
    uint64_t v196 = &v215;
    uint64_t v207 = v55;
    uint64_t v208 = v52;
    uint64_t v199 = (long long *)&v232;
    unint64_t v209 = (uint64_t *)v41;
    uint64_t v175 = (uint64_t *)(v190 + 40);
    uint64_t v59 = v192;
LABEL_39:
    if (v55 != v56) {
      goto LABEL_181;
    }
    uint64_t v181 = v56;
    uint64_t v186 = v41;
    if (v41)
    {
      unint64_t v60 = v187;
      unint64_t v61 = *(void *)(v41 + 24 * ((v187 >> ((4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v60 = v187;
      unint64_t v61 = specialized Rope._Node.subscript.getter(v187, (uint64_t)v51);
    }
    uint64_t v62 = v195;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v25, v61)) {
      goto LABEL_182;
    }
    uint64_t v174 = v25 + v61;
    uint64_t v176 = v25;
    if (v51)
    {
      unint64_t v63 = ((-15 << ((4 * *((unsigned char *)v51 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v51 + 18) | ((unint64_t)*((unsigned __int16 *)v51 + 8) << ((4 * *((unsigned char *)v51 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v63 = 0;
    }
    uint64_t v64 = (uint64_t)v196;
    if (v60 >= v63) {
      goto LABEL_183;
    }
    if (v186)
    {
      char v65 = (4 * *(unsigned char *)(v186 + 18) + 8) & 0x3C;
      unint64_t v66 = ((v60 >> v65) & 0xF) + 1;
      if (v66 < *(unsigned __int16 *)(v186 + 16))
      {
        unint64_t v67 = (v66 << v65) | ((-15 << v65) - 1) & v60;
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_54:
        uint64_t v51 = v209;
LABEL_61:
        if (v182 != v177)
        {
          if (v207 != *(void *)(v20 + 88))
          {
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
            goto LABEL_186;
          }
          uint64_t v191 = v207;
          uint64_t v172 = v51;
          unint64_t v173 = v67;
          if (v51)
          {
            uint64_t v75 = &v51[3 * ((v67 >> ((4 * *((unsigned char *)v51 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v76 = v75[4];
            uint64_t v77 = v75[5];
            swift_bridgeObjectRetain();
            uint64_t v179 = v77;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v78 = *(void *)(v20 + 64);
            swift_unknownObjectRetain();
            uint64_t v64 = (uint64_t)v196;
            specialized Rope._Node.subscript.getter(v67, v78);
            uint64_t v179 = v79;
            uint64_t v76 = v80;
            swift_unknownObjectRelease();
          }
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v81 = 0;
          unint64_t v82 = v175;
          uint64_t v200 = v76;
          while (1)
          {
            uint64_t v84 = v81 + 1;
            if (__OFADD__(v81, 1))
            {
              __break(1u);
LABEL_176:
              __break(1u);
              goto LABEL_177;
            }
            uint64_t v86 = *(v82 - 1);
            uint64_t v85 = *v82;
            if (*(void *)(v62 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v85);
              if (v88)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v62 + 56) + 72 * v87, (uint64_t)&v222);
              }
              else
              {
                uint64_t v226 = 0;
                long long v224 = 0u;
                long long v225 = 0u;
                long long v222 = 0u;
                long long v223 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v76 = v200;
              if (!*(void *)(v200 + 16))
              {
LABEL_76:
                uint64_t v221 = 0;
                long long v219 = 0u;
                long long v220 = 0u;
                long long v217 = 0u;
                long long v218 = 0u;
                goto LABEL_83;
              }
            }
            else
            {
              uint64_t v226 = 0;
              long long v224 = 0u;
              long long v225 = 0u;
              long long v222 = 0u;
              long long v223 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v76 + 16)) {
                goto LABEL_76;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v85);
            if (v90)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v76 + 56) + 72 * v89, (uint64_t)&v217);
            }
            else
            {
              uint64_t v221 = 0;
              long long v219 = 0u;
              long long v220 = 0u;
              long long v217 = 0u;
              long long v218 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_83:
            uint64_t v51 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v222, (uint64_t)&v207, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v217, v64, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v210)
            {
              if (v216) {
                goto LABEL_100;
              }
              outlined destroy of Any?((uint64_t)&v207, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v222, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_70;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v207, (uint64_t)v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v216) {
              goto LABEL_99;
            }
            long long v91 = *(_OWORD *)(v64 + 48);
            long long v203 = *(_OWORD *)(v64 + 32);
            long long v204 = v91;
            uint64_t v205 = *(void *)(v64 + 64);
            long long v92 = *(_OWORD *)(v64 + 16);
            long long v201 = *(_OWORD *)v64;
            long long v202 = v92;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v206, (uint64_t)v244);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v201, (uint64_t)v238);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v244, (uint64_t)&v230, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v238, (uint64_t)v199, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v231)
            {
              if (!v233)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v230);
LABEL_68:
                char v83 = 0;
                goto LABEL_69;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v230, (uint64_t)&v235);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v199, (uint64_t)v234);
              uint64_t v93 = *((void *)&v236 + 1);
              uint64_t v194 = v237;
              uint64_t v193 = __swift_project_boxed_opaque_existential_1(&v235, *((uint64_t *)&v236 + 1));
              uint64_t v198 = v162;
              uint64_t v94 = *(void *)(v93 - 8);
              MEMORY[0x1F4188790](v193);
              uint64_t v96 = (char *)v162 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v234, (uint64_t)v229);
              uint64_t v97 = type metadata accessor for Optional();
              uint64_t v197 = v162;
              uint64_t v98 = *(void *)(v97 - 8);
              MEMORY[0x1F4188790](v97);
              uint64_t v100 = (char *)v162 - v99;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v101 = swift_dynamicCast();
              uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56);
              if (v101)
              {
                v102(v100, 0, 1, v93);
                (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v96, v100, v93);
                char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v94 + 8))(v96, v93);
              }
              else
              {
                v102(v100, 1, 1, v93);
                (*(void (**)(char *, uint64_t))(v98 + 8))(v100, v97);
                char v83 = 0;
              }
              uint64_t v59 = v192;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v234);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
              uint64_t v62 = v195;
              uint64_t v64 = (uint64_t)v196;
            }
            else
            {
              if (v233)
              {
                outlined destroy of Any?((uint64_t)v199, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_68;
              }
              char v83 = 1;
            }
LABEL_69:
            outlined destroy of Any?((uint64_t)v238, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v244, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v201);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v206);
            outlined destroy of Any?((uint64_t)&v207, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v217, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v222, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v83 & 1) == 0) {
              goto LABEL_101;
            }
LABEL_70:
            v82 += 2;
            ++v81;
            uint64_t v76 = v200;
            if (v84 == v59)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v20 = v178;
              uint64_t v51 = *(uint64_t **)(v178 + 64);
              uint64_t v56 = *(void *)(v178 + 88);
              uint64_t v25 = v174;
              uint64_t v55 = v191;
              uint64_t v207 = v191;
              uint64_t v208 = v173;
              uint64_t v41 = (uint64_t)v172;
              unint64_t v187 = v173;
              unint64_t v209 = v172;
              BOOL v33 = __OFADD__(v182++, 1);
              if (!v33) {
                goto LABEL_39;
              }
              __break(1u);
LABEL_99:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v206);
LABEL_100:
              outlined destroy of Any?((uint64_t)&v207, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v217, v51);
              outlined destroy of Any?((uint64_t)&v222, v51);
LABEL_101:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v20 = v178;
              unint64_t v60 = v187;
              goto LABEL_102;
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
LABEL_102:
        if (v181 != *(void *)(v20 + 88)) {
          goto LABEL_192;
        }
        if (v186)
        {
          unint64_t v103 = *(void *)(v186 + 24 * ((v60 >> ((4 * *(unsigned char *)(v186 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v104 = *(void *)(v20 + 64);
          swift_unknownObjectRetain();
          unint64_t v103 = specialized Rope._Node.subscript.getter(v60, v104);
          swift_unknownObjectRelease();
        }
        unint64_t v105 = v163;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v106 = v176 + v103;
        if (__OFADD__(v176, v103)) {
          goto LABEL_193;
        }
        long long v107 = *v105;
        long long v108 = v105[1];
        long long v239 = v105[2];
        v238[1] = v108;
        v238[0] = v107;
        long long v109 = *v105;
        long long v110 = v105[1];
        v244[2] = v239;
        v244[1] = v110;
        v244[0] = v109;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v244, (uint64_t)v245);
        outlined retain of Locale((uint64_t)v245);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v238);
        uint64_t result = BigString.Index.utf8Offset.getter();
        if (__OFSUB__(v106, result))
        {
LABEL_194:
          __break(1u);
          goto LABEL_195;
        }
        uint64_t v111 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v113 = v112;
        uint64_t v115 = v114;
        uint64_t v117 = v116;
        outlined release of Locale((uint64_t)&v228);
        uint64_t v119 = v169;
        uint64_t v118 = v170;
        uint64_t v120 = v168;
        uint64_t v121 = v180;
        char v122 = static BigString.Index.< infix(_:_:)();
        if (v122) {
          uint64_t v123 = v118;
        }
        else {
          uint64_t v123 = v111;
        }
        if (v122)
        {
          uint64_t v113 = v119;
          uint64_t v115 = v120;
        }
        uint64_t v124 = v123;
        if (v122) {
          uint64_t v117 = v121;
        }
        long long v125 = *v105;
        long long v126 = v105[1];
        long long v237 = v105[2];
        long long v236 = v126;
        long long v235 = v125;
        long long v127 = *v105;
        long long v202 = v105[1];
        long long v203 = v237;
        long long v201 = v127;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v201, (uint64_t)v246);
        outlined retain of Locale((uint64_t)v246);
        uint64_t v128 = v183;
        uint64_t v129 = v184;
        uint64_t v131 = v188;
        uint64_t v130 = v189;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result)
        {
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
          goto LABEL_198;
        }
        *(void *)&long long v222 = v129;
        *((void *)&v222 + 1) = v130;
        *(void *)&long long v223 = v131;
        *((void *)&v223 + 1) = v128;
        *(void *)&long long v224 = v124;
        *((void *)&v224 + 1) = v113;
        *(void *)&long long v225 = v115;
        *((void *)&v225 + 1) = v117;
        uint64_t v132 = v185;
        uint64_t v133 = *(void *)(v185 + 16);
        uint64_t v200 = v124;
        if (v133 && (static BigString.Index.== infix(_:_:)() & 1) == 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v134 = 40;
          uint64_t v135 = v133;
          while (*(void *)(v132 + v134))
          {
            swift_bridgeObjectRelease();
            v134 += 16;
            if (!--v135)
            {
              swift_bridgeObjectRelease();
              uint64_t v137 = v188;
              uint64_t v136 = v189;
              uint64_t v138 = v183;
              goto LABEL_125;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v229);
          uint64_t v137 = v188;
          uint64_t v136 = v189;
          uint64_t v138 = v183;
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if (result) {
            goto LABEL_201;
          }
          *(void *)&long long v217 = v129;
          *((void *)&v217 + 1) = v136;
          *(void *)&long long v218 = v137;
          *((void *)&v218 + 1) = v138;
          *(void *)&long long v219 = v129;
          *((void *)&v219 + 1) = v136;
          *(void *)&long long v220 = v137;
          *((void *)&v220 + 1) = v138;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)&v217, &v207);
          outlined release of Locale((uint64_t)&v230);
          uint64_t v139 = v214;
          if (v214 != 2)
          {
            uint64_t v113 = v212;
            uint64_t v115 = v213;
            uint64_t v200 = v211;
            uint64_t result = static BigString.Index.< infix(_:_:)();
            uint64_t v117 = v139;
            if (result) {
              goto LABEL_202;
            }
          }
LABEL_125:
          v206[0] = v129;
          v206[1] = v136;
          v206[2] = v137;
          v206[3] = v138;
          v206[4] = v200;
          v206[5] = v113;
          v206[6] = v115;
          v206[7] = v117;
          uint64_t v140 = *(void *)(v185 + 16);
          if (v140)
          {
            uint64_t v141 = 40;
            while (!*(void *)(v185 + v141))
            {
              v141 += 16;
              if (!--v140) {
                goto LABEL_159;
              }
            }
            uint64_t v145 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
            uint64_t v146 = (char *)MEMORY[0x1E4FBC860];
            do
            {
              unint64_t v147 = *v145;
              if (*v145)
              {
                uint64_t v148 = *(v145 - 1);
                if ((v147 & 0x2000000000000000) != 0 ? HIBYTE(v147) & 0xF : v148 & 0xFFFFFFFFFFFFLL)
                {
                  if ((v147 & 0x1000000000000000) != 0)
                  {
                    int v150 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                  }
                  else
                  {
                    if ((v147 & 0x2000000000000000) != 0)
                    {
                      uint64_t v207 = *(v145 - 1);
                      uint64_t v208 = v147 & 0xFFFFFFFFFFFFFFLL;
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      if ((v148 & 0x1000000000000000) == 0) {
                        _StringObject.sharedUTF8.getter();
                      }
                      swift_bridgeObjectRetain();
                    }
                    int v150 = _decodeScalar(_:startingAt:)();
                    swift_bridgeObjectRelease();
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v146 + 2) + 1, 1, v146);
                  }
                  unint64_t v152 = *((void *)v146 + 2);
                  unint64_t v151 = *((void *)v146 + 3);
                  if (v152 >= v151 >> 1) {
                    uint64_t v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v151 > 1), v152 + 1, 1, v146);
                  }
                  *((void *)v146 + 2) = v152 + 1;
                  *(_DWORD *)&v146[4 * v152 + 32] = v150;
                }
              }
              v145 += 2;
              --v133;
            }
            while (v133);
            swift_bridgeObjectRelease();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v234);
            uint64_t v41 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v146);
            uint64_t v20 = v153;
            uint64_t v38 = v154;
            uint64_t v21 = v155;
            swift_bridgeObjectRelease();
            outlined release of Locale((uint64_t)&v207);
            if (v21 != 2) {
              goto LABEL_171;
            }
          }
        }
LABEL_159:
        outlined release of Locale((uint64_t)&v235);
        uint64_t result = outlined release of AttributedString.Runs((uint64_t)v247);
        uint64_t v21 = v117;
        uint64_t v156 = v171;
        uint64_t v41 = v200;
LABEL_160:
        *uint64_t v156 = v41;
        v156[1] = v113;
        v156[2] = v115;
        v156[3] = v21;
        return result;
      }
    }
    int v68 = *((unsigned __int8 *)v51 + 18);
    char v69 = (4 * v68 + 8) & 0x3C;
    uint64_t v70 = (v60 >> v69) & 0xF;
    *(void *)&long long v230 = v70;
    if (v68)
    {
      swift_unknownObjectRetain();
      uint64_t v64 = (uint64_t)v196;
      char v71 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v51 + 3), (uint64_t *)&v230, (uint64_t)&v207, (uint64_t)v51, v68);
      uint64_t result = swift_unknownObjectRelease();
      if (v71)
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v67 = v208;
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v72 = v70 + 1;
      if (v70 + 1 < (unint64_t)*((unsigned __int16 *)v51 + 8))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v67 = (v72 << v69) | ((-15 << v69) - 1) & v60;
        goto LABEL_61;
      }
    }
    if (v51)
    {
      int v73 = *((unsigned __int8 *)v51 + 18);
      uint64_t v74 = *((unsigned __int16 *)v51 + 8);
      uint64_t result = swift_unknownObjectRelease_n();
      unint64_t v67 = ((-15 << ((4 * v73 + 8) & 0x3C)) - 1) & v73 | (unint64_t)(v74 << ((4 * v73 + 8) & 0x3C));
    }
    else
    {
      unint64_t v67 = 0;
    }
    uint64_t v51 = 0;
    uint64_t v207 = v181;
    goto LABEL_61;
  }
LABEL_31:
  swift_unknownObjectRetain();
  uint64_t v42 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v191, v40, v41, v22, v21);
  swift_unknownObjectRelease_n();
  BOOL v33 = __OFSUB__(v25, v27);
  v25 -= v27;
  if (!v33) {
    goto LABEL_32;
  }
  __break(1u);
LABEL_171:
  char v161 = static BigString.Index.< infix(_:_:)();
  outlined release of Locale((uint64_t)&v235);
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v247);
  if ((v161 & 1) == 0)
  {
    uint64_t v113 = v20;
    uint64_t v115 = v38;
    uint64_t v156 = v171;
    goto LABEL_160;
  }
LABEL_203:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice2.index(before:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v171 = a2;
  uint64_t v3 = a1[1];
  uint64_t v184 = *a1;
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  long long v6 = *v2;
  long long v7 = v2[1];
  long long v8 = v2[2];
  v232[3] = v2[3];
  v232[2] = v8;
  v232[0] = v6;
  v232[1] = v7;
  long long v9 = v2[4];
  long long v10 = v2[5];
  long long v11 = v2[6];
  v232[7] = v2[7];
  v232[6] = v11;
  v232[4] = v9;
  v232[5] = v10;
  long long v12 = v2[8];
  long long v13 = v2[9];
  long long v14 = v2[10];
  long long v15 = v2[11];
  uint64_t v16 = *((void *)v2 + 24);
  uint64_t v183 = *((void *)v2 + 25);
  uint64_t v233 = v16;
  v232[11] = v15;
  v232[10] = v14;
  v232[8] = v12;
  v232[9] = v13;
  uint64_t v185 = *((void *)v2 + 26);
  uint64_t v17 = *((void *)&v12 + 1);
  uint64_t v18 = *((void *)&v13 + 1);
  uint64_t v19 = (long long *)v13;
  uint64_t v20 = v14;
  uint64_t v192 = (long long *)v15;
  uint64_t v193 = *((void *)&v14 + 1);
  outlined retain of AttributedString.Runs((uint64_t)v232);
  uint64_t v172 = v17;
  unint64_t v173 = v19;
  uint64_t v21 = v184;
  uint64_t v174 = v18;
  uint64_t v175 = v20;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  uint64_t v189 = v4;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_174:
    __break(1u);
    goto LABEL_175;
  }
  if (!*(void *)(v183 + 16))
  {
LABEL_175:
    __break(1u);
    goto LABEL_176;
  }
  uint64_t v182 = *(void *)(v183 + 16);
  uint64_t v23 = *(void *)&v232[0];
  uint64_t v24 = *(void *)(*(void *)&v232[0] + 64);
  uint64_t v25 = *(void *)(*(void *)&v232[0] + 72);
  uint64_t v26 = *(void *)(*(void *)&v232[0] + 80);
  uint64_t v27 = *(void *)(*(void *)&v232[0] + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v28 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  if (v24) {
    uint64_t v29 = v26;
  }
  else {
    uint64_t v29 = 0;
  }
  if (v28 < 0 || v29 < v28) {
    goto LABEL_177;
  }
  uint64_t v186 = v3;
  uint64_t v181 = v5;
  if (!v24 || !*(_WORD *)(v24 + 16) || v28 >= v26)
  {
    unint64_t v42 = swift_unknownObjectRetain();
    unint64_t v191 = specialized Rope._endPath.getter(v42);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v31 = 0;
    uint64_t v190 = 0;
    if (!v24) {
      goto LABEL_161;
    }
    goto LABEL_32;
  }
  uint64_t v193 = v25;
  uint64_t v168 = v27;
  uint64_t v170 = v23;
  uint64_t v30 = *(unsigned __int8 *)(v24 + 18);
  if (*(unsigned char *)(v24 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v31 = v28;
    uint64_t v32 = v24;
    while (1)
    {
      uint64_t v35 = *(unsigned __int16 *)(v32 + 16);
      if (!*(_WORD *)(v32 + 16)) {
        break;
      }
      uint64_t v36 = *(void *)(v32 + 40);
      BOOL v37 = __OFSUB__(v31, v36);
      uint64_t v38 = v31 - v36;
      if (v37) {
        goto LABEL_171;
      }
      if (__OFADD__(v38, 1)) {
        goto LABEL_172;
      }
      if (v38 + 1 < 1)
      {
        uint64_t v35 = 0;
        goto LABEL_17;
      }
      if (v35 == 1)
      {
        uint64_t v31 = v38;
        break;
      }
      unint64_t v39 = (uint64_t *)(v32 + 64);
      uint64_t v40 = 1;
      while (1)
      {
        uint64_t v41 = *v39;
        v39 += 3;
        uint64_t v31 = v38 - v41;
        if (__OFSUB__(v38, v41))
        {
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
          goto LABEL_170;
        }
        if (__OFADD__(v31, 1)) {
          goto LABEL_168;
        }
        if (v31 + 1 < 1) {
          break;
        }
        ++v40;
        uint64_t v38 = v31;
        if (v35 == v40) {
          goto LABEL_16;
        }
      }
      uint64_t v35 = v40;
      uint64_t v31 = v38;
LABEL_17:
      char v33 = (4 * *(unsigned char *)(v32 + 18) + 8) & 0x3C;
      uint64_t v30 = ((-15 << v33) - 1) & v30 | (v35 << v33);
      uint64_t v34 = *(void *)(v32 + 24 + 24 * v35);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v32 = v34;
      if (!*(unsigned char *)(v34 + 18)) {
        goto LABEL_117;
      }
    }
LABEL_16:
    if (!v31) {
      goto LABEL_17;
    }
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
    goto LABEL_173;
  }
  while (2)
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v31 = v28;
    uint64_t v34 = v24;
LABEL_117:
    uint64_t v141 = *(unsigned __int16 *)(v34 + 16);
    if (*(_WORD *)(v34 + 16))
    {
      uint64_t v142 = *(void *)(v34 + 24);
      BOOL v37 = __OFSUB__(v31, v142);
      uint64_t v143 = v31 - v142;
      uint64_t v21 = v184;
      uint64_t v25 = v193;
      if (v37)
      {
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }
      if (__OFADD__(v143, 1)) {
        goto LABEL_191;
      }
      if (v143 + 1 < 1)
      {
        uint64_t v141 = 0;
        goto LABEL_160;
      }
      if (v141 != 1)
      {
        uint64_t v158 = (uint64_t *)(v34 + 48);
        uint64_t v159 = 1;
        while (1)
        {
          uint64_t v160 = *v158;
          v158 += 3;
          uint64_t v31 = v143 - v160;
          if (__OFSUB__(v143, v160)) {
            goto LABEL_181;
          }
          if (__OFADD__(v31, 1)) {
            goto LABEL_182;
          }
          if (v31 + 1 < 1) {
            break;
          }
          ++v159;
          uint64_t v143 = v31;
          if (v141 == v159) {
            goto LABEL_159;
          }
        }
        uint64_t v141 = v159;
        uint64_t v31 = v143;
        goto LABEL_160;
      }
      uint64_t v31 = v143;
    }
    else
    {
      uint64_t v21 = v184;
      uint64_t v25 = v193;
    }
LABEL_159:
    if (v31)
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
LABEL_160:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v191 = v30 & 0xFFFFFFFFFFFFF0FFLL | (v141 << 8);
    uint64_t v23 = v170;
    uint64_t v27 = v168;
    uint64_t v190 = v34;
    if (!v24)
    {
LABEL_161:
      uint64_t v43 = 0;
      long long v44 = (long long *)(v28 - v31);
      if (!__OFSUB__(v28, v31)) {
        goto LABEL_33;
      }
LABEL_163:
      __break(1u);
      goto LABEL_164;
    }
LABEL_32:
    swift_unknownObjectRetain();
    uint64_t v43 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v27, v191, v190, v24, v25);
    uint64_t result = swift_unknownObjectRelease_n();
    long long v44 = (long long *)(v28 - v31);
    if (__OFSUB__(v28, v31)) {
      goto LABEL_163;
    }
LABEL_33:
    if (v27 != *(void *)(v23 + 88))
    {
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    if (v190)
    {
      uint64_t v45 = v190 + 24 * ((v191 >> ((4 * *(unsigned char *)(v190 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v46 = *(void *)(v45 + 32);
      uint64_t v47 = *(void *)(v45 + 40);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v48 = *(void *)(v23 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v191, v48);
      uint64_t v46 = v49;
      uint64_t v47 = v50;
      uint64_t result = swift_unknownObjectRelease();
    }
    if (*((uint64_t *)&v232[0] + 1) < v43)
    {
      uint64_t v163 = *((void *)&v232[0] + 1);
      uint64_t v164 = v47;
      uint64_t v179 = v46;
      uint64_t v180 = &v204;
      uint64_t v192 = (long long *)&v221;
      uint64_t v167 = (uint64_t *)(v183 + 40);
      uint64_t v168 = v27;
      uint64_t v170 = v23;
LABEL_39:
      uint64_t v51 = *(void *)(v23 + 64);
      uint64_t v52 = *(void *)(v23 + 88);
      uint64_t v53 = v190;
      unint64_t v54 = v191;
      uint64_t v200 = v27;
      uint64_t v201 = v191;
      uint64_t v202 = v190;
      if (v27 != v52)
      {
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      uint64_t v176 = v43;
      if (v51)
      {
        unint64_t v55 = *(unsigned __int8 *)(v51 + 18);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v53 = v190;
        unint64_t v54 = v191;
        if (v191 <= v55) {
          goto LABEL_184;
        }
      }
      else if (!v191)
      {
LABEL_184:
        __break(1u);
        goto LABEL_185;
      }
      if (v53)
      {
        char v56 = (4 * *(unsigned char *)(v53 + 18) + 8) & 0x3C;
        if (((v54 >> v56) & 0xF) != 0)
        {
          unint64_t v57 = ((((v54 >> v56) & 0xF) - 1) << v56) | ((-15 << v56) - 1) & v54;
          uint64_t v201 = v57;
LABEL_51:
          char v62 = (4 * *(unsigned char *)(v53 + 18) + 8) & 0x3C;
          uint64_t v190 = v53;
          unint64_t v191 = v57;
          unint64_t v63 = *(void *)(v53 + 24 * ((v57 >> v62) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v64 = 0;
LABEL_55:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (__OFSUB__(v44, v63))
          {
LABEL_186:
            __break(1u);
            goto LABEL_187;
          }
          if (v27 != *(void *)(v23 + 88))
          {
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }
          uint64_t v165 = (long long *)((char *)v44 - v63);
          uint64_t v166 = v44;
          if (v64)
          {
            uint64_t v65 = *(void *)(v23 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v191, v65);
            uint64_t v169 = v66;
            uint64_t v68 = v67;
            swift_unknownObjectRelease();
          }
          else
          {
            uint64_t v69 = v190 + 24 * ((v191 >> ((4 * *(unsigned char *)(v190 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v68 = *(void *)(v69 + 32);
            uint64_t v70 = *(void *)(v69 + 40);
            swift_bridgeObjectRetain();
            uint64_t v169 = v70;
            swift_bridgeObjectRetain();
          }
          uint64_t v71 = v179;
          --v176;
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v72 = 0;
          int v73 = v167;
          uint64_t v74 = v182;
          uint64_t v75 = (uint64_t)v180;
          uint64_t v193 = v68;
          while (1)
          {
            uint64_t v77 = v72 + 1;
            if (__OFADD__(v72, 1)) {
              goto LABEL_169;
            }
            uint64_t v78 = *(v73 - 1);
            uint64_t v79 = *v73;
            if (*(void *)(v71 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v79);
              if (v81)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v71 + 56) + 72 * v80, (uint64_t)&v211);
              }
              else
              {
                uint64_t v215 = 0;
                long long v213 = 0u;
                long long v214 = 0u;
                long long v211 = 0u;
                long long v212 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v68 = v193;
              if (!*(void *)(v193 + 16))
              {
LABEL_70:
                uint64_t v210 = 0;
                long long v208 = 0u;
                long long v209 = 0u;
                long long v206 = 0u;
                long long v207 = 0u;
                goto LABEL_77;
              }
            }
            else
            {
              uint64_t v215 = 0;
              long long v213 = 0u;
              long long v214 = 0u;
              long long v211 = 0u;
              long long v212 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v68 + 16)) {
                goto LABEL_70;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v79);
            if (v83)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v68 + 56) + 72 * v82, (uint64_t)&v206);
            }
            else
            {
              uint64_t v210 = 0;
              long long v208 = 0u;
              long long v209 = 0u;
              long long v206 = 0u;
              long long v207 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_77:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v211, (uint64_t)&v200, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v206, v75, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v203)
            {
              if (v205) {
                goto LABEL_94;
              }
              outlined destroy of Any?((uint64_t)&v200, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_64;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v200, (uint64_t)v199, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v205)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v199);
LABEL_94:
              outlined destroy of Any?((uint64_t)&v200, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_95:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = v170;
              long long v44 = v166;
              goto LABEL_96;
            }
            long long v84 = *(_OWORD *)(v75 + 48);
            long long v196 = *(_OWORD *)(v75 + 32);
            long long v197 = v84;
            uint64_t v198 = *(void *)(v75 + 64);
            long long v85 = *(_OWORD *)(v75 + 16);
            long long v194 = *(_OWORD *)v75;
            long long v195 = v85;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v199, (uint64_t)v229);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v194, (uint64_t)v227);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v229, (uint64_t)&v219, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v227, (uint64_t)v192, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v220)
            {
              if (!v222)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v219);
LABEL_62:
                char v76 = 0;
                goto LABEL_63;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v219, (uint64_t)&v224);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v192, (uint64_t)v223);
              uint64_t v86 = *((void *)&v225 + 1);
              uint64_t v178 = v226;
              uint64_t v177 = __swift_project_boxed_opaque_existential_1(&v224, *((uint64_t *)&v225 + 1));
              uint64_t v188 = &v162;
              uint64_t v87 = *(void *)(v86 - 8);
              MEMORY[0x1F4188790](v177);
              unint64_t v89 = (char *)&v162 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v223, (uint64_t)v218);
              uint64_t v90 = type metadata accessor for Optional();
              unint64_t v187 = &v162;
              uint64_t v91 = *(void *)(v90 - 8);
              MEMORY[0x1F4188790](v90);
              uint64_t v93 = (char *)&v162 - v92;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v94 = swift_dynamicCast();
              uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56);
              if (v94)
              {
                v95(v93, 0, 1, v86);
                (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v89, v93, v86);
                char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v86);
              }
              else
              {
                v95(v93, 1, 1, v86);
                (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v90);
                char v76 = 0;
              }
              uint64_t v74 = v182;
              uint64_t v71 = v179;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v223);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
              uint64_t v75 = (uint64_t)v180;
            }
            else
            {
              if (v222)
              {
                outlined destroy of Any?((uint64_t)v192, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_62;
              }
              char v76 = 1;
            }
LABEL_63:
            outlined destroy of Any?((uint64_t)v227, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v229, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v194);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v199);
            outlined destroy of Any?((uint64_t)&v200, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v76 & 1) == 0) {
              goto LABEL_95;
            }
LABEL_64:
            v73 += 2;
            ++v72;
            uint64_t v68 = v193;
            if (v77 == v74)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v96 = v165;
              long long v44 = v165;
              uint64_t v43 = v176;
              uint64_t v23 = v170;
              uint64_t v27 = v168;
              if (v163 < v176) {
                goto LABEL_39;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v44 = v96;
              goto LABEL_96;
            }
          }
        }
      }
      int v58 = *(unsigned __int8 *)(v51 + 18);
      char v59 = (4 * v58 + 8) & 0x3C;
      uint64_t v60 = (v54 >> v59) & 0xF;
      *(void *)&long long v219 = v60;
      if (v58)
      {
        swift_unknownObjectRetain();
        char v61 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v51 + 16, v51 + 24, (uint64_t *)&v219, (uint64_t)&v200, v58);
        uint64_t result = swift_unknownObjectRelease();
        if (v61)
        {
          if (v200 != v27)
          {
LABEL_185:
            __break(1u);
            goto LABEL_186;
          }
          unint64_t v57 = v201;
          uint64_t v53 = v202;
          if (v202) {
            goto LABEL_51;
          }
          goto LABEL_54;
        }
      }
      else if (v60)
      {
        unint64_t v57 = ((v60 - 1) << v59) | ((-15 << v59) - 1) & v54;
        uint64_t v201 = v57;
        uint64_t v202 = v51;
        uint64_t v53 = v51;
        if (v51) {
          goto LABEL_51;
        }
LABEL_54:
        swift_unknownObjectRetain();
        unint64_t v191 = v57;
        unint64_t v63 = specialized Rope._Node.subscript.getter(v57, v51);
        swift_unknownObjectRelease();
        uint64_t v190 = 0;
        char v64 = 1;
        goto LABEL_55;
      }
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_96:
    long long v97 = *(_OWORD *)(v23 + 16);
    long long v98 = *(_OWORD *)(v23 + 32);
    long long v228 = *(_OWORD *)(v23 + 48);
    v227[1] = v98;
    v227[0] = v97;
    long long v99 = *(_OWORD *)(v23 + 16);
    long long v100 = *(_OWORD *)(v23 + 32);
    v229[2] = v228;
    v229[1] = v100;
    v229[0] = v99;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v229, (uint64_t)v230);
    outlined retain of Locale((uint64_t)v230);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v227);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v44, result)) {
      goto LABEL_179;
    }
    int v101 = (long long *)(v23 + 16);
    uint64_t v102 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v104 = v103;
    uint64_t v106 = v105;
    uint64_t v28 = v107;
    outlined release of Locale((uint64_t)&v216);
    uint64_t v108 = v172;
    long long v109 = v173;
    uint64_t v111 = v174;
    uint64_t v110 = v175;
    char v112 = static BigString.Index.< infix(_:_:)();
    if (v112) {
      uint64_t v108 = v102;
    }
    else {
      uint64_t v104 = v109;
    }
    uint64_t v113 = v184;
    if ((v112 & 1) == 0)
    {
      uint64_t v106 = v111;
      uint64_t v28 = v110;
    }
    uint64_t v114 = v189;
    long long v115 = *v101;
    long long v116 = v101[1];
    long long v226 = v101[2];
    long long v224 = v115;
    long long v225 = v116;
    long long v117 = *v101;
    long long v118 = v101[1];
    uint64_t v119 = v186;
    long long v195 = v118;
    long long v196 = v226;
    long long v194 = v117;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v194, (uint64_t)v231);
    outlined retain of Locale((uint64_t)v231);
    uint64_t v120 = v181;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    *(void *)&long long v211 = v108;
    *((void *)&v211 + 1) = v104;
    *(void *)&long long v212 = v106;
    *((void *)&v212 + 1) = v28;
    *(void *)&long long v213 = v113;
    *((void *)&v213 + 1) = v119;
    uint64_t v121 = v120;
    *(void *)&long long v214 = v120;
    *((void *)&v214 + 1) = v114;
    uint64_t v122 = v185;
    uint64_t v123 = *(void *)(v185 + 16);
    if (!v123)
    {
      uint64_t v193 = v108;
      goto LABEL_151;
    }
    uint64_t v192 = v104;
    uint64_t v124 = v121;
    if (static BigString.Index.== infix(_:_:)())
    {
      uint64_t v193 = v108;
      uint64_t v104 = v192;
LABEL_151:
      outlined release of Locale((uint64_t)&v224);
      uint64_t result = outlined release of AttributedString.Runs((uint64_t)v232);
      uint64_t v24 = v28;
      uint64_t v31 = v193;
LABEL_152:
      uint64_t v157 = v171;
      *uint64_t v171 = v31;
      v157[1] = (uint64_t)v104;
      v157[2] = v106;
      v157[3] = v24;
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v125 = 40;
    uint64_t v126 = v123;
    while (*(void *)(v122 + v125))
    {
      swift_bridgeObjectRelease();
      v125 += 16;
      if (!--v126)
      {
        swift_bridgeObjectRelease();
        uint64_t v127 = v184;
        uint64_t v128 = v114;
        uint64_t v30 = v186;
        uint64_t v129 = v124;
        uint64_t v104 = v192;
        goto LABEL_125;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    BigString.startIndex.getter();
    uint64_t v127 = v184;
    uint64_t v130 = v114;
    uint64_t v30 = v186;
    uint64_t v129 = v124;
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v193 = v108;
      BigString.utf8.getter();
      uint64_t v131 = BigString.UTF8View.index(before:)();
      uint64_t v190 = v132;
      unint64_t v191 = v133;
      uint64_t v135 = v134;
      outlined release of Locale((uint64_t)&v217);
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      uint64_t v136 = v189;
      outlined release of Locale((uint64_t)v218);
      uint64_t v137 = v131;
      uint64_t v138 = v190;
      uint64_t v188 = v135;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      uint64_t v104 = v192;
      if (result) {
        goto LABEL_192;
      }
      *(void *)&long long v206 = v137;
      *((void *)&v206 + 1) = v138;
      *(void *)&long long v207 = v188;
      *((void *)&v207 + 1) = v191;
      *(void *)&long long v208 = v127;
      *((void *)&v208 + 1) = v30;
      uint64_t v129 = v181;
      *(void *)&long long v209 = v181;
      *((void *)&v209 + 1) = v136;
      specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)&v206, &v200);
      outlined release of Locale((uint64_t)&v219);
      uint64_t v24 = v203;
      uint64_t v108 = v193;
      uint64_t v128 = v189;
      if (v203 != 2)
      {
        uint64_t v108 = v200;
        uint64_t v104 = (long long *)v201;
        uint64_t v106 = v202;
        uint64_t v139 = v189;
        char v140 = static BigString.Index.< infix(_:_:)();
        uint64_t v128 = v139;
        uint64_t v28 = v24;
        if (v140)
        {
          __break(1u);
          continue;
        }
      }
    }
    else
    {
      uint64_t v104 = v192;
      uint64_t v128 = v130;
    }
    break;
  }
LABEL_125:
  v199[0] = v108;
  v199[1] = v104;
  v199[2] = v106;
  v199[3] = v28;
  v199[4] = v127;
  v199[5] = v30;
  v199[6] = v129;
  v199[7] = v128;
  uint64_t v144 = *(void *)(v185 + 16);
  uint64_t v193 = v108;
  if (!v144) {
    goto LABEL_151;
  }
  uint64_t v145 = 40;
  while (!*(void *)(v185 + v145))
  {
    v145 += 16;
    if (!--v144) {
      goto LABEL_151;
    }
  }
  uint64_t v146 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
  unint64_t v147 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    unint64_t v148 = *v146;
    if (*v146)
    {
      uint64_t v149 = *(v146 - 1);
      if ((v148 & 0x2000000000000000) != 0 ? HIBYTE(v148) & 0xF : v149 & 0xFFFFFFFFFFFFLL)
      {
        if ((v148 & 0x1000000000000000) != 0)
        {
          int v151 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v148 & 0x2000000000000000) != 0)
          {
            uint64_t v200 = *(v146 - 1);
            uint64_t v201 = v148 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v149 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }
          int v151 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v147 + 2) + 1, 1, v147);
        }
        unint64_t v153 = *((void *)v147 + 2);
        unint64_t v152 = *((void *)v147 + 3);
        if (v153 >= v152 >> 1) {
          unint64_t v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v152 > 1), v153 + 1, 1, v147);
        }
        *((void *)v147 + 2) = v153 + 1;
        *(_DWORD *)&v147[4 * v153 + 32] = v151;
      }
    }
    v146 += 2;
    --v123;
  }
  while (v123);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v223);
  uint64_t v31 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v147);
  long long v44 = v154;
  uint64_t v21 = v155;
  uint64_t v24 = v156;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v200);
  if (v24 == 2) {
    goto LABEL_151;
  }
LABEL_164:
  char v161 = static BigString.Index.< infix(_:_:)();
  outlined release of Locale((uint64_t)&v224);
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v232);
  if ((v161 & 1) == 0)
  {
    uint64_t v104 = v44;
    uint64_t v106 = v21;
    goto LABEL_152;
  }
LABEL_193:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice3.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  uint64_t v384 = a6;
  uint64_t v362 = a4;
  uint64_t v363 = a1;
  uint64_t v364 = a2;
  uint64_t v365 = a3;
  uint64_t v399 = *a5;
  uint64_t v7 = a5[2];
  uint64_t v392 = a5[1];
  uint64_t v394 = a5[3];
  long long v8 = *v6;
  long long v9 = v6[1];
  long long v10 = v6[2];
  long long v492[3] = v6[3];
  v492[2] = v10;
  v492[0] = v8;
  v492[1] = v9;
  long long v11 = v6[4];
  long long v12 = v6[5];
  long long v13 = v6[6];
  long long v496 = v6[7];
  long long v495 = v13;
  long long v493 = v11;
  long long v494 = v12;
  long long v14 = v6[8];
  long long v15 = v6[9];
  long long v16 = v6[10];
  long long v17 = v6[11];
  uint64_t v18 = *((void *)v6 + 24);
  uint64_t v393 = *((void *)v6 + 25);
  uint64_t v501 = v18;
  long long v500 = v17;
  long long v499 = v16;
  long long v497 = v14;
  long long v498 = v15;
  uint64_t v402 = *((void *)v6 + 26);
  uint64_t v19 = (unsigned char *)*((void *)&v14 + 1);
  long long v20 = v15;
  long long v21 = v16;
  long long v22 = v17;
  uint64_t v23 = v18;
  outlined retain of AttributedString.Runs((uint64_t)v492);
  uint64_t v396 = v7;
  long long v389 = v19;
  long long v390 = v20;
  uint64_t v391 = v21;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_375;
  }
  long long v375 = (long long *)v22;
  uint64_t v376 = *((void *)&v21 + 1);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_376:
    __break(1u);
    goto LABEL_377;
  }
  if (!*(void *)(v393 + 16))
  {
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
    goto LABEL_380;
  }
  uint64_t v25 = *(void *)(v393 + 16);
  uint64_t v373 = v23;
  uint64_t v374 = *((void *)&v22 + 1);
  uint64_t v26 = *(void *)(*(void *)&v492[0] + 64);
  uint64_t v27 = *(void *)(*(void *)&v492[0] + 72);
  uint64_t v395 = *(void *)&v492[0];
  uint64_t v28 = *(void *)(*(void *)&v492[0] + 80);
  uint64_t v388 = *(void *)(*(void *)&v492[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v29 = v392;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v26) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = 0;
  }
  if (result < 0) {
    goto LABEL_378;
  }
  uint64_t v31 = result;
  if (v30 < result) {
    goto LABEL_378;
  }
  uint64_t v400 = v25;
  v404 = (unsigned char *)v27;
  if (!v26 || result >= v28 || !*(_WORD *)(v26 + 16))
  {
    unint64_t v44 = swift_unknownObjectRetain();
    unint64_t v379 = specialized Rope._endPath.getter(v44);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    goto LABEL_47;
  }
  uint64_t v32 = *(unsigned __int8 *)(v26 + 18);
  if (*(unsigned char *)(v26 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v33 = v31;
    uint64_t v34 = v26;
    while (1)
    {
      uint64_t v37 = *(unsigned __int16 *)(v34 + 16);
      if (!*(_WORD *)(v34 + 16)) {
        break;
      }
      uint64_t v38 = *(void *)(v34 + 40);
      BOOL v39 = __OFSUB__(v33, v38);
      uint64_t v40 = v33 - v38;
      if (v39) {
        goto LABEL_367;
      }
      if (__OFADD__(v40, 1)) {
        goto LABEL_368;
      }
      if (v40 + 1 < 1)
      {
        uint64_t v37 = 0;
        goto LABEL_16;
      }
      if (v37 == 1)
      {
        uint64_t v33 = v40;
        break;
      }
      uint64_t v41 = (uint64_t *)(v34 + 64);
      uint64_t v42 = 1;
      while (1)
      {
        uint64_t v43 = *v41;
        v41 += 3;
        uint64_t v33 = v40 - v43;
        if (__OFSUB__(v40, v43)) {
          goto LABEL_360;
        }
        if (__OFADD__(v33, 1))
        {
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
          goto LABEL_365;
        }
        if (v33 + 1 < 1) {
          break;
        }
        ++v42;
        uint64_t v40 = v33;
        if (v37 == v42) {
          goto LABEL_15;
        }
      }
      uint64_t v37 = v42;
      uint64_t v33 = v40;
LABEL_16:
      char v35 = (4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C;
      uint64_t v32 = ((-15 << v35) - 1) & v32 | (v37 << v35);
      uint64_t v36 = *(void *)(v34 + 24 + 24 * v37);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v34 = v36;
      if (!*(unsigned char *)(v36 + 18)) {
        goto LABEL_32;
      }
    }
LABEL_15:
    if (!v33) {
      goto LABEL_16;
    }
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
    goto LABEL_376;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v33 = v31;
  uint64_t v36 = v26;
LABEL_32:
  uint64_t v45 = *(unsigned __int16 *)(v36 + 16);
  if (!*(_WORD *)(v36 + 16))
  {
    uint64_t v29 = v392;
LABEL_45:
    if (v33)
    {
LABEL_407:
      __break(1u);
      goto LABEL_408;
    }
    goto LABEL_46;
  }
  uint64_t v46 = *(void *)(v36 + 24);
  BOOL v39 = __OFSUB__(v33, v46);
  uint64_t v47 = v33 - v46;
  uint64_t v29 = v392;
  if (v39)
  {
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }
  if (__OFADD__(v47, 1))
  {
LABEL_410:
    __break(1u);
    goto LABEL_411;
  }
  if (v47 + 1 < 1)
  {
    uint64_t v45 = 0;
  }
  else
  {
    if (v45 == 1)
    {
      uint64_t v33 = v47;
      goto LABEL_45;
    }
    uint64_t v48 = (uint64_t *)(v36 + 48);
    uint64_t v49 = 1;
    while (1)
    {
      uint64_t v50 = *v48;
      v48 += 3;
      uint64_t v33 = v47 - v50;
      if (__OFSUB__(v47, v50)) {
        goto LABEL_394;
      }
      if (__OFADD__(v33, 1)) {
        goto LABEL_395;
      }
      if (v33 + 1 < 1) {
        break;
      }
      ++v49;
      uint64_t v47 = v33;
      if (v45 == v49) {
        goto LABEL_45;
      }
    }
    uint64_t v45 = v49;
    uint64_t v33 = v47;
  }
LABEL_46:
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v379 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v45 << 8);
LABEL_47:
  uint64_t v380 = v36;
  if (v26)
  {
    swift_unknownObjectRetain();
    unint64_t v398 = (void *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v388, v379, v380, v26, (uint64_t)v404);
    uint64_t result = swift_unknownObjectRelease_n();
  }
  else
  {
    unint64_t v398 = 0;
  }
  uint64_t v51 = v394;
  uint64_t v385 = v31 - v33;
  if (__OFSUB__(v31, v33)) {
    goto LABEL_379;
  }
  long long v52 = *(_OWORD *)(v395 + 16);
  long long v53 = *(_OWORD *)(v395 + 32);
  long long v479 = *(_OWORD *)(v395 + 48);
  v478[1] = v53;
  v478[0] = v52;
  long long v54 = *(_OWORD *)(v395 + 16);
  long long v55 = *(_OWORD *)(v395 + 32);
  v480[2] = v479;
  v480[1] = v55;
  v480[0] = v54;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v480, (uint64_t)v481);
  outlined retain of Locale((uint64_t)v481);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v478);
  if (__OFSUB__(0, v33))
  {
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
    goto LABEL_382;
  }
  uint64_t v381 = (long long *)(v395 + 16);
  uint64_t v369 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v383 = v56;
  uint64_t v58 = v57;
  uint64_t v377 = v59;
  uint64_t result = outlined release of Locale((uint64_t)&v432);
  uint64_t v378 = v399;
  uint64_t v370 = v396;
  uint64_t v371 = v29;
  uint64_t v382 = *((void *)&v493 + 1);
  uint64_t v60 = (void *)v395;
  if (v398 == *((void **)&v493 + 1)) {
    goto LABEL_161;
  }
  if (v388 != *(void *)(v395 + 88))
  {
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
    goto LABEL_400;
  }
  uint64_t v371 = v58;
  if (v380)
  {
    uint64_t v61 = v380 + 24 * ((v379 >> ((4 * *(unsigned char *)(v380 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v62 = *(void *)(v61 + 32);
    uint64_t v63 = *(void *)(v61 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v64 = *(void *)(v395 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v379, v64);
    uint64_t v63 = v65;
    uint64_t v62 = v66;
    uint64_t result = swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v492[0] + 1) >= (uint64_t)v398)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_116;
  }
  uint64_t v359 = *((void *)&v492[0] + 1);
  uint64_t v360 = v63;
  v403 = (long long *)v453;
  v404 = v420;
  uint64_t v368 = (uint64_t *)(v393 + 40);
  unint64_t v68 = v379;
  uint64_t v67 = v380;
  uint64_t v401 = v62;
LABEL_59:
  uint64_t v69 = v60[8];
  uint64_t v70 = v60[11];
  uint64_t v412 = v388;
  uint64_t v413 = v68;
  uint64_t v414 = v67;
  if (v388 != v70) {
    goto LABEL_401;
  }
  uint64_t v71 = v67;
  if (v69)
  {
    unint64_t v72 = *(unsigned __int8 *)(v69 + 18);
    uint64_t result = swift_unknownObjectRetain();
    if (v68 <= v72) {
      goto LABEL_402;
    }
  }
  else if (!v68)
  {
    goto LABEL_402;
  }
  if (!v71 || (char v73 = (4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C, ((v68 >> v73) & 0xF) == 0))
  {
    int v75 = *(unsigned __int8 *)(v69 + 18);
    char v76 = (4 * v75 + 8) & 0x3C;
    uint64_t v77 = (v68 >> v76) & 0xF;
    *(void *)&long long v451 = v77;
    if (v75)
    {
      swift_unknownObjectRetain();
      char v78 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v69 + 16, v69 + 24, (uint64_t *)&v451, (uint64_t)&v412, v75);
      uint64_t result = swift_unknownObjectRelease();
      if ((v78 & 1) == 0) {
        goto LABEL_406;
      }
      if (v412 != v388) {
        goto LABEL_403;
      }
      uint64_t v71 = v414;
      unint64_t v74 = v413;
      if (v414) {
        goto LABEL_71;
      }
    }
    else
    {
      if (!v77) {
        goto LABEL_406;
      }
      unint64_t v74 = ((v77 - 1) << v76) | ((-15 << v76) - 1) & v68;
      uint64_t v413 = v74;
      uint64_t v414 = v69;
      uint64_t v71 = v69;
      if (v69) {
        goto LABEL_71;
      }
    }
    swift_unknownObjectRetain();
    unint64_t v79 = specialized Rope._Node.subscript.getter(v74, v69);
    swift_unknownObjectRelease();
    char v80 = 1;
    goto LABEL_75;
  }
  unint64_t v74 = ((((v68 >> v73) & 0xF) - 1) << v73) | ((-15 << v73) - 1) & v68;
  uint64_t v413 = v74;
LABEL_71:
  unint64_t v79 = *(void *)(v71 + 24 * ((v74 >> ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v80 = 0;
LABEL_75:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v385, v79)) {
    goto LABEL_404;
  }
  uint64_t v60 = (void *)v395;
  if (v388 != *(void *)(v395 + 88)) {
    goto LABEL_405;
  }
  uint64_t v361 = v385 - v79;
  uint64_t v366 = v71;
  unint64_t v367 = v74;
  if (v80)
  {
    uint64_t v81 = *(void *)(v395 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v74, v81);
    char v83 = v82;
    uint64_t v370 = v84;
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v85 = v71 + 24 * ((v74 >> ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) & 0xF);
    char v83 = *(void **)(v85 + 32);
    uint64_t v86 = *(void *)(v85 + 40);
    swift_bridgeObjectRetain();
    uint64_t v370 = v86;
    swift_bridgeObjectRetain();
  }
  uint64_t v87 = v401;
  unint64_t v398 = (void *)((char *)v398 - 1);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v88 = 0;
  unint64_t v89 = v368;
  uint64_t v397 = v83;
  while (1)
  {
    uint64_t v91 = v88 + 1;
    if (__OFADD__(v88, 1)) {
      goto LABEL_364;
    }
    uint64_t v92 = *(v89 - 1);
    uint64_t v93 = *v89;
    if (*(void *)(v87 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v93);
      if (v95)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v87 + 56) + 72 * v94, (uint64_t)&v443);
      }
      else
      {
        uint64_t v447 = 0;
        long long v446 = 0u;
        long long v445 = 0u;
        long long v444 = 0u;
        long long v443 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!v83[2])
      {
LABEL_90:
        uint64_t v441 = 0;
        long long v440 = 0u;
        long long v439 = 0u;
        long long v438 = 0u;
        long long v437 = 0u;
        goto LABEL_97;
      }
    }
    else
    {
      uint64_t v447 = 0;
      long long v446 = 0u;
      long long v445 = 0u;
      long long v444 = 0u;
      long long v443 = 0u;
      swift_bridgeObjectRetain();
      if (!v83[2]) {
        goto LABEL_90;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v93);
    if (v97)
    {
      outlined init with copy of AttributedString._AttributeValue(v83[7] + 72 * v96, (uint64_t)&v437);
    }
    else
    {
      uint64_t v441 = 0;
      long long v440 = 0u;
      long long v439 = 0u;
      long long v438 = 0u;
      long long v437 = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v87 = v401;
LABEL_97:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v443, (uint64_t)&v412, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v437, (uint64_t)v404, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v415)
    {
      if (v421) {
        goto LABEL_114;
      }
      outlined destroy of Any?((uint64_t)&v412, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v437, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v443, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_84;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v412, (uint64_t)&v427, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v421) {
      break;
    }
    long long v98 = *((_OWORD *)v404 + 3);
    long long v424 = *((_OWORD *)v404 + 2);
    long long v425 = v98;
    uint64_t v426 = *((void *)v404 + 8);
    long long v99 = *((_OWORD *)v404 + 1);
    long long v422 = *(_OWORD *)v404;
    long long v423 = v99;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v427, (uint64_t)v410);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v422, (uint64_t)&v405);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v410, (uint64_t)&v451, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v405, (uint64_t)v403, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v452)
    {
      if (!v454)
      {
        char v90 = 1;
        goto LABEL_83;
      }
      outlined destroy of Any?((uint64_t)v403, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_82:
      char v90 = 0;
      goto LABEL_83;
    }
    if (!v454)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v451);
      goto LABEL_82;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v451, (uint64_t)v467);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v403, (uint64_t)v466);
    uint64_t v100 = v468;
    uint64_t v378 = (uint64_t)v469;
    unint64_t v372 = __swift_project_boxed_opaque_existential_1(v467, v468);
    unint64_t v387 = (unint64_t)&v356;
    uint64_t v101 = *(void *)(v100 - 8);
    MEMORY[0x1F4188790](v372);
    unint64_t v103 = (char *)&v356 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v466, (uint64_t)v463);
    uint64_t v104 = type metadata accessor for Optional();
    unint64_t v386 = &v356;
    uint64_t v105 = *(void *)(v104 - 8);
    MEMORY[0x1F4188790](v104);
    uint64_t v107 = (char *)&v356 - v106;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    int v108 = swift_dynamicCast();
    long long v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56);
    if (v108)
    {
      v109(v107, 0, 1, v100);
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v103, v107, v100);
      char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
    }
    else
    {
      v109(v107, 1, 1, v100);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v104);
      char v90 = 0;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v466);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v467);
    uint64_t v60 = (void *)v395;
    uint64_t v87 = v401;
LABEL_83:
    outlined destroy of Any?((uint64_t)&v405, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v410, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v422);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v427);
    outlined destroy of Any?((uint64_t)&v412, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v437, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t result = outlined destroy of Any?((uint64_t)&v443, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    char v83 = v397;
    if ((v90 & 1) == 0) {
      goto LABEL_115;
    }
LABEL_84:
    v89 += 2;
    ++v88;
    if (v91 == v400)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v110 = v361;
      uint64_t v385 = v361;
      uint64_t v67 = v366;
      unint64_t v68 = v367;
      if (v359 >= (uint64_t)v398)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v385 = v110;
        goto LABEL_116;
      }
      goto LABEL_59;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v427);
LABEL_114:
  outlined destroy of Any?((uint64_t)&v412, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v437, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v443, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_115:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_116:
  uint64_t v111 = v381;
  long long v112 = *v381;
  long long v113 = v381[1];
  long long v477 = v381[2];
  v476[1] = v113;
  v476[0] = v112;
  long long v114 = *v381;
  long long v115 = v381[1];
  _OWORD v482[2] = v477;
  v482[1] = v115;
  v482[0] = v114;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v482, (uint64_t)v483);
  outlined retain of Locale((uint64_t)v483);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v476);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v385, result)) {
    goto LABEL_399;
  }
  uint64_t v116 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v118 = v117;
  uint64_t v120 = v119;
  uint64_t v122 = v121;
  outlined release of Locale((uint64_t)&v433);
  uint64_t v123 = v389;
  uint64_t v126 = *((void *)&v390 + 1);
  uint64_t v125 = v390;
  uint64_t v124 = v391;
  char v127 = static BigString.Index.< infix(_:_:)();
  if (v127) {
    uint64_t v128 = v116;
  }
  else {
    uint64_t v128 = (uint64_t)v123;
  }
  uint64_t v378 = v128;
  if (v127)
  {
    uint64_t v126 = v120;
    uint64_t v51 = v122;
  }
  else
  {
    uint64_t v118 = v125;
    uint64_t v51 = v124;
  }
  long long v129 = v111[1];
  long long v473 = *v111;
  long long v474 = v129;
  long long v475 = v111[2];
  BigString.unicodeScalars.getter();
  uint64_t v130 = v118;
  uint64_t v131 = (long long *)BigString.UnicodeScalarView.index(after:)();
  uint64_t v133 = v132;
  uint64_t v135 = v134;
  uint64_t v136 = v111;
  uint64_t v138 = v137;
  outlined release of Locale((uint64_t)&v434);
  long long v139 = *v136;
  long long v140 = v136[1];
  long long v465 = v136[2];
  v464[1] = v140;
  v464[0] = v139;
  long long v141 = *v136;
  long long v142 = v136[1];
  uint64_t v143 = v378;
  _OWORD v484[2] = v465;
  v484[1] = v142;
  v484[0] = v141;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v484, (uint64_t)v485);
  outlined retain of Locale((uint64_t)v485);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
    goto LABEL_407;
  }
  v467[0] = v143;
  v467[1] = v118;
  _OWORD v467[2] = v126;
  uint64_t v468 = v51;
  v469 = v131;
  uint64_t v470 = v133;
  uint64_t v471 = v135;
  uint64_t v472 = v138;
  uint64_t v144 = *(void *)(v402 + 16);
  uint64_t v370 = v126;
  uint64_t v371 = v130;
  if (!v144) {
    goto LABEL_160;
  }
  v404 = (unsigned char *)v135;
  if (static BigString.Index.== infix(_:_:)()) {
    goto LABEL_160;
  }
  uint64_t v401 = v133;
  v403 = v131;
  swift_bridgeObjectRetain();
  uint64_t v145 = 40;
  uint64_t v146 = v144;
  while (2)
  {
    if (!*(void *)(v402 + v145))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.startIndex.getter();
      unint64_t v147 = v403;
      uint64_t v148 = (uint64_t)v404;
      uint64_t v149 = v401;
      if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
        goto LABEL_134;
      }
      BigString.utf8.getter();
      uint64_t v397 = (void *)BigString.UTF8View.index(before:)();
      unint64_t v398 = v150;
      uint64_t v152 = v151;
      uint64_t v154 = v153;
      outlined release of Locale((uint64_t)&v435);
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      uint64_t v155 = v154;
      uint64_t v156 = v152;
      uint64_t v157 = v397;
      outlined release of Locale((uint64_t)&v436);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        v466[0] = v157;
        v466[1] = v156;
        v466[2] = v155;
        v466[3] = v398;
        v466[4] = v147;
        v466[5] = v149;
        v466[6] = v148;
        v466[7] = v138;
        specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)v466, &v412);
        outlined release of Locale((uint64_t)&v437);
        uint64_t v158 = v415;
        if (v415 == 2) {
          goto LABEL_134;
        }
        uint64_t v378 = v412;
        uint64_t v370 = v414;
        uint64_t v371 = v413;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        uint64_t v51 = v158;
        if ((result & 1) == 0) {
          goto LABEL_134;
        }
        goto LABEL_418;
      }
      goto LABEL_416;
    }
    swift_bridgeObjectRelease();
    v145 += 16;
    if (--v146) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v147 = v403;
  uint64_t v148 = (uint64_t)v404;
  uint64_t v149 = v401;
LABEL_134:
  v463[0] = v378;
  v463[1] = v371;
  v463[2] = v370;
  v463[3] = v51;
  v463[4] = v147;
  v463[5] = v149;
  v463[6] = v148;
  v463[7] = v138;
  uint64_t v159 = *(void *)(v402 + 16);
  if (v159)
  {
    uint64_t v160 = 40;
    while (!*(void *)(v402 + v160))
    {
      v160 += 16;
      if (!--v159) {
        goto LABEL_160;
      }
    }
    char v161 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v162 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v163 = *v161;
      if (*v161)
      {
        uint64_t v164 = *(v161 - 1);
        if ((v163 & 0x2000000000000000) != 0 ? HIBYTE(v163) & 0xF : v164 & 0xFFFFFFFFFFFFLL)
        {
          if ((v163 & 0x1000000000000000) != 0)
          {
            int v166 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v163 & 0x2000000000000000) != 0)
            {
              uint64_t v412 = *(v161 - 1);
              uint64_t v413 = v163 & 0xFFFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain();
            }
            else
            {
              if ((v164 & 0x1000000000000000) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              swift_bridgeObjectRetain();
            }
            int v166 = _decodeScalar(_:startingAt:)();
            swift_bridgeObjectRelease();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v162 + 2) + 1, 1, v162);
          }
          unint64_t v168 = *((void *)v162 + 2);
          unint64_t v167 = *((void *)v162 + 3);
          if (v168 >= v167 >> 1) {
            uint64_t v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v167 > 1), v168 + 1, 1, v162);
          }
          *((void *)v162 + 2) = v168 + 1;
          *(_DWORD *)&v162[4 * v168 + 32] = v166;
        }
      }
      v161 += 2;
      --v144;
    }
    while (v144);
    swift_bridgeObjectRelease();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v442);
    uint64_t v169 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v162);
    uint64_t v171 = v170;
    uint64_t v173 = v172;
    uint64_t v175 = v174;
    swift_bridgeObjectRelease();
    outlined release of Locale((uint64_t)&v443);
    if (v175 != 2)
    {
      uint64_t v361 = v175;
      char v355 = static BigString.Index.< infix(_:_:)();
      outlined release of Locale((uint64_t)v464);
      uint64_t result = outlined release of AttributedString.Runs((uint64_t)v492);
      if ((v355 & 1) == 0)
      {
        uint64_t v378 = v169;
        uint64_t v370 = v173;
        uint64_t v371 = v171;
        uint64_t v60 = (void *)v395;
        goto LABEL_162;
      }
      goto LABEL_417;
    }
  }
LABEL_160:
  outlined release of Locale((uint64_t)v464);
  uint64_t v60 = (void *)v395;
LABEL_161:
  outlined release of AttributedString.Runs((uint64_t)v492);
  uint64_t v361 = v51;
LABEL_162:
  outlined retain of AttributedString.Runs((uint64_t)v492);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_381;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }
  uint64_t v176 = v60[8];
  uint64_t v177 = v60[9];
  uint64_t v178 = v60;
  uint64_t v179 = v60[10];
  *(void *)&long long v390 = v178[11];
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v176) {
    uint64_t v180 = v179;
  }
  else {
    uint64_t v180 = 0;
  }
  if (result < 0) {
    goto LABEL_383;
  }
  uint64_t v181 = result;
  if (v180 < result) {
    goto LABEL_383;
  }
  if (!v176 || result >= v179 || !*(_WORD *)(v176 + 16))
  {
    unint64_t v193 = swift_unknownObjectRetain();
    unint64_t v194 = specialized Rope._endPath.getter(v193);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v195 = 0;
    uint64_t v183 = 0;
    if (v176) {
      goto LABEL_191;
    }
    uint64_t v196 = 0;
LABEL_208:
    uint64_t v203 = v395;
    unint64_t v386 = (uint64_t *)(v181 - v183);
    if (__OFSUB__(v181, v183))
    {
LABEL_384:
      __break(1u);
      goto LABEL_385;
    }
    long long v204 = *v381;
    long long v205 = v381[1];
    long long v462 = v381[2];
    v461[1] = v205;
    v461[0] = v204;
    long long v206 = *v381;
    long long v207 = v381[1];
    v486[2] = v462;
    v486[1] = v207;
    v486[0] = v206;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v486, (uint64_t)v487);
    outlined retain of Locale((uint64_t)v487);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v461);
    if (__OFSUB__(0, v183))
    {
LABEL_385:
      __break(1u);
      goto LABEL_386;
    }
    uint64_t v208 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v359 = v210;
    uint64_t v360 = v209;
    uint64_t v358 = v211;
    uint64_t result = outlined release of Locale((uint64_t)&v448);
    if (v196 >= v382)
    {
LABEL_386:
      __break(1u);
      goto LABEL_387;
    }
    if ((void)v390 != *(void *)(v203 + 88))
    {
LABEL_387:
      __break(1u);
      goto LABEL_388;
    }
    uint64_t v356 = v208;
    uint64_t v212 = *(void *)(v203 + 64);
    if (v195)
    {
      unint64_t v213 = v195 + 24 * ((v194 >> ((4 * *(unsigned char *)(v195 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v214 = *(void *)(v213 + 40);
      uint64_t v215 = v195;
      v404 = *(unsigned char **)(v213 + 32);
      swift_bridgeObjectRetain();
      uint64_t v357 = v214;
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v216 = v390;
      uint64_t v217 = v390;
    }
    else
    {
      uint64_t v215 = 0;
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v194, v212);
      v404 = (unsigned char *)v218;
      uint64_t v357 = v219;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v212 = *(void *)(v203 + 64);
      uint64_t v217 = *(void *)(v203 + 88);
      uint64_t v216 = v390;
    }
    uint64_t v383 = v196 + 1;
    uint64_t v220 = v420;
    uint64_t v412 = v216;
    uint64_t v413 = v194;
    v403 = (long long *)v453;
    uint64_t v369 = v393 + 40;
    uint64_t v414 = v215;
    uint64_t v221 = v400;
    long long v389 = v420;
LABEL_216:
    if (v216 != v217) {
      goto LABEL_371;
    }
    uint64_t v377 = v217;
    uint64_t v385 = v215;
    unint64_t v387 = v194;
    if (v215)
    {
      unint64_t v222 = *(void *)(v215 + 24 * ((v194 >> ((4 * *(unsigned char *)(v215 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v222 = specialized Rope._Node.subscript.getter(v194, v212);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v386, v222)) {
      goto LABEL_372;
    }
    uint64_t v368 = (uint64_t *)((char *)v386 + v222);
    if (v212)
    {
      unint64_t v223 = ((-15 << ((4 * *(unsigned char *)(v212 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v212 + 18) | ((unint64_t)*(unsigned __int16 *)(v212 + 16) << ((4 * *(unsigned char *)(v212 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v223 = 0;
    }
    if (v387 >= v223) {
      goto LABEL_373;
    }
    if (v385)
    {
      char v224 = (4 * *(unsigned char *)(v385 + 18) + 8) & 0x3C;
      unint64_t v225 = ((v387 >> v224) & 0xF) + 1;
      if (v225 < *(unsigned __int16 *)(v385 + 16))
      {
        unint64_t v226 = (v225 << v224) | ((-15 << v224) - 1) & v387;
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_231:
        uint64_t v231 = v414;
LABEL_232:
        uint64_t v232 = (uint64_t)v404;
LABEL_239:
        if (v383 == v382)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
LABEL_280:
          unint64_t v264 = v387;
          if (v377 == *(void *)(v203 + 88))
          {
            if (v385)
            {
              unint64_t v265 = *(void *)(v385 + 24 * ((v387 >> ((4 * *(unsigned char *)(v385 + 18) + 8) & 0x3C)) & 0xF) + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v266 = *(void *)(v203 + 64);
              swift_unknownObjectRetain();
              unint64_t v265 = specialized Rope._Node.subscript.getter(v264, v266);
              swift_unknownObjectRelease();
            }
            uint64_t v267 = v376;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            char v268 = (char *)v386 + v265;
            if (!__OFADD__(v386, v265))
            {
              unint64_t v269 = v381;
              long long v270 = *v381;
              long long v271 = v381[1];
              long long v460 = v381[2];
              long long v459 = v271;
              long long v458 = v270;
              long long v272 = *v381;
              long long v273 = v381[1];
              v488[2] = v460;
              v488[1] = v273;
              v488[0] = v272;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v488, (uint64_t)v489);
              outlined retain of Locale((uint64_t)v489);
              BigString.utf8.getter();
              outlined release of Locale((uint64_t)&v458);
              uint64_t result = BigString.Index.utf8Offset.getter();
              if (!__OFSUB__(v268, result))
              {
                uint64_t v274 = BigString.UTF8View.index(_:offsetBy:)();
                long long v276 = v275;
                uint64_t v278 = v277;
                uint64_t v280 = v279;
                outlined release of Locale((uint64_t)&v449);
                int v281 = v375;
                uint64_t v282 = v267;
                uint64_t v284 = v373;
                uint64_t v283 = v374;
                char v285 = static BigString.Index.< infix(_:_:)();
                if (v285)
                {
                  uint64_t v286 = v281;
                }
                else
                {
                  uint64_t v282 = v274;
                  uint64_t v286 = v276;
                }
                if (v285)
                {
                  uint64_t v278 = v283;
                  uint64_t v287 = v284;
                }
                else
                {
                  uint64_t v287 = v280;
                }
                uint64_t v288 = v392;
                uint64_t v289 = v399;
                long long v290 = *v269;
                long long v291 = v269[1];
                long long v457 = v269[2];
                v456[1] = v291;
                v456[0] = v290;
                long long v292 = *v269;
                long long v293 = v269[1];
                uint64_t v294 = v286;
                v490[2] = v457;
                v490[1] = v293;
                v490[0] = v292;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v490, (uint64_t)v491);
                outlined retain of Locale((uint64_t)v491);
                uint64_t v295 = v396;
                uint64_t v296 = v394;
                uint64_t result = static BigString.Index.< infix(_:_:)();
                if ((result & 1) == 0)
                {
                  *(void *)&long long v422 = v289;
                  *((void *)&v422 + 1) = v288;
                  *(void *)&long long v423 = v295;
                  *((void *)&v423 + 1) = v296;
                  *(void *)&long long v424 = v282;
                  *((void *)&v424 + 1) = v294;
                  *(void *)&long long v425 = v278;
                  *((void *)&v425 + 1) = v287;
                  uint64_t v297 = *(void *)(v402 + 16);
                  if (!v297 || (static BigString.Index.== infix(_:_:)() & 1) != 0)
                  {
LABEL_324:
                    outlined release of Locale((uint64_t)v456);
                    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v492);
                    uint64_t v322 = v287;
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v298 = 40;
                    uint64_t v299 = v297;
                    v403 = v294;
                    v404 = (unsigned char *)v282;
                    while (*(void *)(v402 + v298))
                    {
                      swift_bridgeObjectRelease();
                      v298 += 16;
                      if (!--v299)
                      {
                        swift_bridgeObjectRelease();
                        uint64_t v300 = v392;
                        uint64_t v301 = v396;
                        uint64_t v302 = v394;
                        uint64_t v303 = v399;
                        goto LABEL_302;
                      }
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    BigString.utf8.getter();
                    BigString.UTF8View.subscript.getter();
                    outlined release of Locale((uint64_t)&v450);
                    uint64_t v303 = v399;
                    uint64_t v300 = v392;
                    uint64_t v301 = v396;
                    uint64_t v302 = v394;
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if (result) {
                      goto LABEL_413;
                    }
                    v410[0] = v303;
                    v410[1] = v300;
                    v410[2] = v301;
                    v410[3] = v302;
                    v410[4] = v303;
                    v410[5] = v300;
                    v410[6] = v301;
                    v410[7] = v302;
                    specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v410, &v412);
                    outlined release of Locale((uint64_t)&v451);
                    uint64_t v304 = v419;
                    if (v419 != 2)
                    {
                      uint64_t v278 = v418;
                      v403 = v417;
                      v404 = (unsigned char *)v416;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      uint64_t v287 = v304;
                      if (result) {
                        goto LABEL_414;
                      }
                    }
LABEL_302:
                    *(void *)&long long v405 = v303;
                    *((void *)&v405 + 1) = v300;
                    *(void *)&long long v406 = v301;
                    *((void *)&v406 + 1) = v302;
                    uint64_t v294 = v403;
                    uint64_t v282 = (uint64_t)v404;
                    *(void *)&long long v407 = v404;
                    *((void *)&v407 + 1) = v403;
                    *(void *)&long long v408 = v278;
                    *((void *)&v408 + 1) = v287;
                    uint64_t v305 = *(void *)(v402 + 16);
                    if (!v305) {
                      goto LABEL_324;
                    }
                    uint64_t v306 = 40;
                    while (!*(void *)(v402 + v306))
                    {
                      v306 += 16;
                      if (!--v305) {
                        goto LABEL_324;
                      }
                    }
                    *(void *)&long long v427 = MEMORY[0x1E4FBC860];
                    uint64_t v307 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
                    do
                    {
                      unint64_t v312 = *v307;
                      if (*v307)
                      {
                        uint64_t v313 = *(v307 - 1);
                        if ((v312 & 0x2000000000000000) != 0 ? HIBYTE(v312) & 0xF : v313 & 0xFFFFFFFFFFFFLL)
                        {
                          if ((v312 & 0x1000000000000000) != 0)
                          {
                            int v308 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                          }
                          else
                          {
                            if ((v312 & 0x2000000000000000) != 0)
                            {
                              uint64_t v412 = *(v307 - 1);
                              uint64_t v413 = v312 & 0xFFFFFFFFFFFFFFLL;
                              swift_bridgeObjectRetain();
                            }
                            else
                            {
                              if ((v313 & 0x1000000000000000) == 0) {
                                _StringObject.sharedUTF8.getter();
                              }
                              swift_bridgeObjectRetain();
                            }
                            int v308 = _decodeScalar(_:startingAt:)();
                            swift_bridgeObjectRelease();
                          }
                          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                          uint64_t v309 = *(void *)(v427 + 16);
                          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v309);
                          uint64_t v310 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v309, v308);
                          destructiveProjectEnumData for PredicateCodableError(v310, v311);
                        }
                      }
                      v307 += 2;
                      --v297;
                    }
                    while (v297);
                    swift_bridgeObjectRelease();
                    uint64_t v315 = v427;
                    BigString.unicodeScalars.getter();
                    BigString.UnicodeScalarView.subscript.getter();
                    outlined release of Locale((uint64_t)v455);
                    uint64_t v316 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v315);
                    uint64_t v318 = v317;
                    uint64_t v320 = v319;
                    uint64_t v322 = v321;
                    swift_bridgeObjectRelease();
                    outlined release of Locale((uint64_t)&v412);
                    uint64_t v294 = v403;
                    uint64_t v282 = (uint64_t)v404;
                    if (v322 == 2) {
                      goto LABEL_324;
                    }
                    char v354 = static BigString.Index.< infix(_:_:)();
                    outlined release of Locale((uint64_t)v456);
                    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v492);
                    if (v354) {
                      goto LABEL_415;
                    }
                    uint64_t v282 = v316;
                    uint64_t v294 = v318;
                    uint64_t v278 = v320;
                  }
                  if (v388 == *(void *)(v395 + 88))
                  {
                    v404 = (unsigned char *)v322;
                    uint64_t v323 = v282;
                    if (v380)
                    {
                      uint64_t v324 = *(void *)(v380 + 24 * ((v379 >> ((4 * *(unsigned char *)(v380 + 18) + 8) & 0x3C)) & 0xF) + 32);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      uint64_t v325 = *(void *)(v395 + 64);
                      swift_unknownObjectRetain();
                      specialized Rope._Node.subscript.getter(v379, v325);
                      uint64_t v324 = v326;
                      swift_unknownObjectRelease();
                    }
                    uint64_t v327 = (*(uint64_t (**)(void, void))(v384[5] + 24))(v384[2], v384[5]);
                    if (*(void *)(v324 + 16)
                      && (unint64_t v329 = specialized __RawDictionaryStorage.find<A>(_:)(v327, v328), (v330 & 1) != 0))
                    {
                      outlined init with copy of AttributedString._AttributeValue(*(void *)(v324 + 56) + 72 * v329, (uint64_t)&v427);
                    }
                    else
                    {
                      uint64_t v431 = 0;
                      long long v429 = 0u;
                      long long v430 = 0u;
                      long long v427 = 0u;
                      long long v428 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((void *)&v428 + 1))
                    {
                      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v427, (uint64_t)v411);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                      uint64_t v332 = v363;
                      swift_dynamicCast();
                      outlined destroy of AttributedString._AttributeValue((uint64_t)&v427);
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8)
                                                                                + 56))(v332, 0, 1, AssociatedTypeWitness);
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v427, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      uint64_t v333 = swift_getAssociatedTypeWitness();
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v333 - 8) + 56))(v363, 1, 1, v333);
                    }
                    uint64_t v334 = (*(uint64_t (**)(void, void))(v384[6] + 24))(v384[3], v384[6]);
                    if (*(void *)(v324 + 16)
                      && (unint64_t v336 = specialized __RawDictionaryStorage.find<A>(_:)(v334, v335), (v337 & 1) != 0))
                    {
                      outlined init with copy of AttributedString._AttributeValue(*(void *)(v324 + 56) + 72 * v336, (uint64_t)&v427);
                    }
                    else
                    {
                      uint64_t v431 = 0;
                      long long v429 = 0u;
                      long long v430 = 0u;
                      long long v427 = 0u;
                      long long v428 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((void *)&v428 + 1))
                    {
                      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v427, (uint64_t)v411);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                      uint64_t v338 = swift_getAssociatedTypeWitness();
                      uint64_t v339 = v364;
                      swift_dynamicCast();
                      outlined destroy of AttributedString._AttributeValue((uint64_t)&v427);
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v338 - 8) + 56))(v339, 0, 1, v338);
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v427, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      uint64_t v340 = swift_getAssociatedTypeWitness();
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v340 - 8) + 56))(v364, 1, 1, v340);
                    }
                    uint64_t v341 = (*(uint64_t (**)(void, void))(v384[7] + 24))(v384[4], v384[7]);
                    if (*(void *)(v324 + 16)
                      && (unint64_t v343 = specialized __RawDictionaryStorage.find<A>(_:)(v341, v342), (v344 & 1) != 0))
                    {
                      outlined init with copy of AttributedString._AttributeValue(*(void *)(v324 + 56) + 72 * v343, (uint64_t)&v427);
                    }
                    else
                    {
                      uint64_t v431 = 0;
                      long long v429 = 0u;
                      long long v430 = 0u;
                      long long v427 = 0u;
                      long long v428 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((void *)&v428 + 1))
                    {
                      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v427, (uint64_t)v411);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                      uint64_t v345 = swift_getAssociatedTypeWitness();
                      uint64_t v346 = v365;
                      swift_dynamicCast();
                      outlined destroy of AttributedString._AttributeValue((uint64_t)&v427);
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v345 - 8) + 56))(v346, 0, 1, v345);
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v427, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      uint64_t v347 = swift_getAssociatedTypeWitness();
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v347 - 8) + 56))(v365, 1, 1, v347);
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v348 = (uint64_t)v404;
                    uint64_t v349 = v378;
                    uint64_t v351 = v370;
                    uint64_t v350 = v371;
                    uint64_t v352 = v361;
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if ((result & 1) == 0)
                    {
                      char v353 = v362;
                      *uint64_t v362 = v349;
                      v353[1] = v350;
                      _OWORD v353[2] = v351;
                      v353[3] = v352;
                      v353[4] = v323;
                      v353[5] = (uint64_t)v294;
                      v353[6] = v278;
                      v353[7] = v348;
                      return result;
                    }
                    goto LABEL_393;
                  }
LABEL_392:
                  __break(1u);
LABEL_393:
                  __break(1u);
LABEL_394:
                  __break(1u);
LABEL_395:
                  __break(1u);
LABEL_396:
                  __break(1u);
LABEL_397:
                  __break(1u);
                  goto LABEL_398;
                }
LABEL_391:
                __break(1u);
                goto LABEL_392;
              }
LABEL_390:
              __break(1u);
              goto LABEL_391;
            }
LABEL_389:
            __break(1u);
            goto LABEL_390;
          }
LABEL_388:
          __break(1u);
          goto LABEL_389;
        }
        if (v412 != *(void *)(v203 + 88)) {
          goto LABEL_374;
        }
        *(void *)&long long v390 = v412;
        uint64_t v366 = v231;
        unint64_t v367 = v226;
        if (v231)
        {
          unint64_t v236 = v231 + 24 * ((v226 >> ((4 * *(unsigned char *)(v231 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v238 = *(void *)(v236 + 32);
          long long v237 = *(void **)(v236 + 40);
          swift_bridgeObjectRetain();
          unint64_t v372 = v237;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v239 = *(void *)(v203 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v226, v239);
          uint64_t v238 = v240;
          unint64_t v372 = v241;
          uint64_t v232 = (uint64_t)v404;
          swift_unknownObjectRelease();
        }
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v242 = 0;
        unint64_t v243 = (uint64_t *)v369;
        uint64_t v401 = v238;
        while (1)
        {
          uint64_t v245 = v242 + 1;
          if (__OFADD__(v242, 1))
          {
            __break(1u);
LABEL_360:
            __break(1u);
            goto LABEL_361;
          }
          uint64_t v247 = *(v243 - 1);
          uint64_t v246 = *v243;
          if (*(void *)(v232 + 16))
          {
            swift_bridgeObjectRetain_n();
            unint64_t v248 = specialized __RawDictionaryStorage.find<A>(_:)(v247, v246);
            if (v249)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v232 + 56) + 72 * v248, (uint64_t)&v427);
            }
            else
            {
              uint64_t v431 = 0;
              long long v429 = 0u;
              long long v430 = 0u;
              long long v427 = 0u;
              long long v428 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*(void *)(v238 + 16))
            {
LABEL_254:
              uint64_t v426 = 0;
              long long v424 = 0u;
              long long v425 = 0u;
              long long v422 = 0u;
              long long v423 = 0u;
              goto LABEL_261;
            }
          }
          else
          {
            uint64_t v431 = 0;
            long long v429 = 0u;
            long long v430 = 0u;
            long long v427 = 0u;
            long long v428 = 0u;
            swift_bridgeObjectRetain();
            if (!*(void *)(v238 + 16)) {
              goto LABEL_254;
            }
          }
          swift_bridgeObjectRetain();
          unint64_t v250 = specialized __RawDictionaryStorage.find<A>(_:)(v247, v246);
          if (v251)
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v238 + 56) + 72 * v250, (uint64_t)&v422);
          }
          else
          {
            uint64_t v426 = 0;
            long long v424 = 0u;
            long long v425 = 0u;
            long long v422 = 0u;
            long long v423 = 0u;
          }
          swift_bridgeObjectRelease();
          uint64_t v232 = (uint64_t)v404;
LABEL_261:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v427, (uint64_t)&v412, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v422, (uint64_t)v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v415)
          {
            if (v421) {
              goto LABEL_278;
            }
            outlined destroy of Any?((uint64_t)&v412, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v427, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_248;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v412, (uint64_t)v410, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v421) {
            goto LABEL_277;
          }
          long long v252 = *((_OWORD *)v220 + 3);
          long long v407 = *((_OWORD *)v220 + 2);
          long long v408 = v252;
          uint64_t v409 = *((void *)v220 + 8);
          long long v253 = *((_OWORD *)v220 + 1);
          long long v405 = *(_OWORD *)v220;
          long long v406 = v253;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v410, (uint64_t)v490);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v405, (uint64_t)v488);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v490, (uint64_t)&v451, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v488, (uint64_t)v403, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v452)
          {
            if (!v454)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v451);
LABEL_246:
              char v244 = 0;
              goto LABEL_247;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v451, (uint64_t)&v458);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v403, (uint64_t)v456);
            uint64_t v254 = *((void *)&v459 + 1);
            uint64_t v391 = v460;
            *((void *)&v390 + 1) = __swift_project_boxed_opaque_existential_1(&v458, *((uint64_t *)&v459 + 1));
            unint64_t v398 = &v356;
            uint64_t v255 = *(void *)(v254 - 8);
            MEMORY[0x1F4188790](*((void *)&v390 + 1));
            uint64_t v257 = (char *)&v356 - ((v256 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v456, (uint64_t)v455);
            uint64_t v258 = type metadata accessor for Optional();
            uint64_t v397 = &v356;
            uint64_t v259 = *(void *)(v258 - 8);
            MEMORY[0x1F4188790](v258);
            uint64_t v261 = (char *)&v356 - v260;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v262 = swift_dynamicCast();
            char v263 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v255 + 56);
            if (v262)
            {
              v263(v261, 0, 1, v254);
              (*(void (**)(char *, char *, uint64_t))(v255 + 32))(v257, v261, v254);
              char v244 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v255 + 8))(v257, v254);
            }
            else
            {
              v263(v261, 1, 1, v254);
              (*(void (**)(char *, uint64_t))(v259 + 8))(v261, v258);
              char v244 = 0;
            }
            uint64_t v221 = v400;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v456);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v458);
            uint64_t v232 = (uint64_t)v404;
            uint64_t v220 = v389;
          }
          else
          {
            if (v454)
            {
              outlined destroy of Any?((uint64_t)v403, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_246;
            }
            char v244 = 1;
          }
LABEL_247:
          outlined destroy of Any?((uint64_t)v488, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v490, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v405);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v410);
          outlined destroy of Any?((uint64_t)&v412, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = outlined destroy of Any?((uint64_t)&v427, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t v238 = v401;
          if ((v244 & 1) == 0) {
            goto LABEL_279;
          }
LABEL_248:
          v243 += 2;
          ++v242;
          if (v245 == v221)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v203 = v395;
            uint64_t v212 = *(void *)(v395 + 64);
            uint64_t v217 = *(void *)(v395 + 88);
            unint64_t v194 = v367;
            unint64_t v386 = v368;
            uint64_t v216 = v390;
            uint64_t v412 = v390;
            uint64_t v413 = v367;
            uint64_t v215 = v366;
            uint64_t v414 = v366;
            BOOL v39 = __OFADD__(v383++, 1);
            if (!v39) {
              goto LABEL_216;
            }
            __break(1u);
LABEL_277:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v410);
LABEL_278:
            outlined destroy of Any?((uint64_t)&v412, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v427, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_279:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v203 = v395;
            goto LABEL_280;
          }
        }
      }
    }
    int v227 = *(unsigned __int8 *)(v212 + 18);
    char v228 = (4 * v227 + 8) & 0x3C;
    uint64_t v229 = (v387 >> v228) & 0xF;
    *(void *)&long long v451 = v229;
    if (v227)
    {
      swift_unknownObjectRetain();
      char v230 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v212 + 24, (uint64_t *)&v451, (uint64_t)&v412, v212, v227);
      uint64_t result = swift_unknownObjectRelease();
      if (v230)
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v226 = v413;
        goto LABEL_231;
      }
    }
    else
    {
      uint64_t v233 = v229 + 1;
      if (v229 + 1 < (unint64_t)*(unsigned __int16 *)(v212 + 16))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v226 = (v233 << v228) | ((-15 << v228) - 1) & v387;
        uint64_t v231 = v212;
        goto LABEL_232;
      }
    }
    if (v212)
    {
      int v234 = *(unsigned __int8 *)(v212 + 18);
      uint64_t v235 = *(unsigned __int16 *)(v212 + 16);
      uint64_t result = swift_unknownObjectRelease_n();
      unint64_t v226 = ((-15 << ((4 * v234 + 8) & 0x3C)) - 1) & v234 | (unint64_t)(v235 << ((4 * v234 + 8) & 0x3C));
    }
    else
    {
      unint64_t v226 = 0;
    }
    uint64_t v232 = (uint64_t)v404;
    uint64_t v231 = 0;
    uint64_t v412 = v377;
    goto LABEL_239;
  }
  v404 = (unsigned char *)v177;
  uint64_t v182 = *(unsigned __int8 *)(v176 + 18);
  if (*(unsigned char *)(v176 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v183 = v181;
    uint64_t v184 = v176;
    while (1)
    {
      uint64_t v187 = *(unsigned __int16 *)(v184 + 16);
      if (!*(_WORD *)(v184 + 16)) {
        goto LABEL_175;
      }
      uint64_t v188 = *(void *)(v184 + 40);
      BOOL v39 = __OFSUB__(v183, v188);
      uint64_t v189 = v183 - v188;
      if (v39) {
        goto LABEL_369;
      }
      if (__OFADD__(v189, 1)) {
        goto LABEL_370;
      }
      if (v189 + 1 < 1)
      {
        uint64_t v187 = 0;
      }
      else
      {
        if (v187 == 1)
        {
          uint64_t v183 = v189;
LABEL_175:
          if (v183) {
            goto LABEL_366;
          }
          goto LABEL_176;
        }
        uint64_t v190 = (uint64_t *)(v184 + 64);
        uint64_t v191 = 1;
        while (1)
        {
          uint64_t v192 = *v190;
          v190 += 3;
          uint64_t v183 = v189 - v192;
          if (__OFSUB__(v189, v192)) {
            goto LABEL_362;
          }
          if (__OFADD__(v183, 1)) {
            goto LABEL_363;
          }
          if (v183 + 1 < 1) {
            break;
          }
          ++v191;
          uint64_t v189 = v183;
          if (v187 == v191) {
            goto LABEL_175;
          }
        }
        uint64_t v187 = v191;
        uint64_t v183 = v189;
      }
LABEL_176:
      char v185 = (4 * *(unsigned char *)(v184 + 18) + 8) & 0x3C;
      uint64_t v182 = ((-15 << v185) - 1) & v182 | (v187 << v185);
      uint64_t v186 = *(void *)(v184 + 24 + 24 * v187);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v184 = v186;
      if (!*(unsigned char *)(v186 + 18)) {
        goto LABEL_193;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v183 = v181;
  uint64_t v186 = v176;
LABEL_193:
  uint64_t v197 = *(unsigned __int16 *)(v186 + 16);
  if (!*(_WORD *)(v186 + 16))
  {
LABEL_205:
    if (v183)
    {
LABEL_408:
      __break(1u);
      goto LABEL_409;
    }
    goto LABEL_206;
  }
  uint64_t v198 = *(void *)(v186 + 24);
  BOOL v39 = __OFSUB__(v183, v198);
  uint64_t v199 = v183 - v198;
  if (v39)
  {
LABEL_411:
    __break(1u);
    goto LABEL_412;
  }
  if (!__OFADD__(v199, 1))
  {
    if (v199 + 1 < 1)
    {
      uint64_t v197 = 0;
    }
    else
    {
      if (v197 == 1)
      {
        uint64_t v183 = v199;
        goto LABEL_205;
      }
      uint64_t v200 = (uint64_t *)(v186 + 48);
      uint64_t v201 = 1;
      while (1)
      {
        uint64_t v202 = *v200;
        v200 += 3;
        uint64_t v183 = v199 - v202;
        if (__OFSUB__(v199, v202)) {
          goto LABEL_396;
        }
        if (__OFADD__(v183, 1)) {
          goto LABEL_397;
        }
        if (v183 + 1 < 1) {
          break;
        }
        ++v201;
        uint64_t v199 = v183;
        if (v197 == v201) {
          goto LABEL_205;
        }
      }
      uint64_t v197 = v201;
      uint64_t v183 = v199;
    }
LABEL_206:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v195 = v186;
    unint64_t v194 = v182 & 0xFFFFFFFFFFFFF0FFLL | (v197 << 8);
    uint64_t v177 = (uint64_t)v404;
LABEL_191:
    swift_unknownObjectRetain();
    uint64_t v196 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v390, v194, v195, v176, v177);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_208;
  }
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice3.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(void *a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  long long v6 = malloc(0x60uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *long long v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  v6[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[8] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[9] = v8;
  long long v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[10] = v9;
  long long v10 = AttributedString.Runs.AttributesSlice3.subscript.read(v6 + 4, a2, a3);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v6[11] = v10;
  uint64_t v16 = *v15;
  long long v17 = (_OWORD *)v15[1];
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v9, v12, v18);
  uint64_t v19 = &v9[TupleTypeMetadata[12]];
  uint64_t v20 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v19, v14, v20);
  long long v21 = &v9[TupleTypeMetadata[16]];
  uint64_t v22 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v16, v22);
  uint64_t v23 = &v9[TupleTypeMetadata[20]];
  long long v24 = v17[1];
  long long v25 = v17[2];
  long long v26 = v17[3];
  *(_OWORD *)uint64_t v23 = *v17;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v25;
  *((_OWORD *)v23 + 3) = v26;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 32;
  (*(void (**)(void, void))(*(void *)(*a1 + 72) + 8))(*(void *)(*a1 + 80), *(void *)(*a1 + 64));
  uint64_t v5 = *(void **)(v3 + 80);
  (*(void (**)(uint64_t, uint64_t))(v3 + 88))(v4, a2);
  free(v5);

  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice3.subscript.read(void *a1, uint64_t *a2, void *a3))(uint64_t a1)
{
  long long v6 = malloc(0x48uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *long long v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  v6[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[6] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[7] = v8;
  long long v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[8] = v9;
  uint64_t v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  uint64_t v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  uint64_t v12 = (uint64_t *)&v9[TupleTypeMetadata[20]];
  AttributedString.Runs.AttributesSlice3.subscript.getter((uint64_t)v9, v10, v11, v12, a2, a3);
  v6[4] = v11;
  v6[5] = v12;
  return AttributedString.Runs.AttributesSlice3.subscript.read;
}

void AttributedString.Runs.AttributesSlice3.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 64);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 56) + 8))(v2, *(void *)(*(void *)a1 + 48));
  free(v2);

  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836F0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  swift_getWitnessTable();

  JUMPOUT(0x185301E20);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice3.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice3.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v13 = *a1;
  uint64_t v14 = *a2;
  uint64_t v15 = *a3;
  long long v16 = *(_OWORD *)(v8 + 176);
  v24[10] = *(_OWORD *)(v8 + 160);
  v24[11] = v16;
  uint64_t v25 = *(void *)(v8 + 192);
  long long v17 = *(_OWORD *)(v8 + 112);
  v24[6] = *(_OWORD *)(v8 + 96);
  v24[7] = v17;
  long long v18 = *(_OWORD *)(v8 + 144);
  v24[8] = *(_OWORD *)(v8 + 128);
  v24[9] = v18;
  long long v19 = *(_OWORD *)(v8 + 48);
  v24[2] = *(_OWORD *)(v8 + 32);
  v24[3] = v19;
  long long v20 = *(_OWORD *)(v8 + 80);
  v24[4] = *(_OWORD *)(v8 + 64);
  v24[5] = v20;
  long long v21 = *(_OWORD *)(v8 + 16);
  v24[0] = *(_OWORD *)v8;
  v24[1] = v21;
  uint64_t v22 = v15;
  outlined retain of AttributedString.Runs((uint64_t)v24);
  *(void *)&double result = AttributedString.Runs.AttributesSlice3.init(runs:)(v8, *(void *)(v13 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v14 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v22 + *MEMORY[0x1E4FBC5F0] + 8), a4, a5, a6, a7).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice4.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_18210C6A0;
  *(void *)(v17 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a2, a5);
  *(void *)(v17 + 40) = v18;
  *(void *)(v17 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  *(void *)(v17 + 56) = v19;
  *(void *)(v17 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a4, a7);
  *(void *)(v17 + 72) = v20;
  *(void *)(v17 + 80) = (*(uint64_t (**)(void))(a9 + 24))();
  *(void *)(v17 + 88) = v21;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v39, a2, a5);
  uint64_t v22 = v39[0];
  uint64_t v23 = v39[1];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v38, a3, a6);
  uint64_t v24 = v38[0];
  uint64_t v25 = v38[1];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a7 + 32))(v37, a4, a7);
  uint64_t v26 = v37[0];
  uint64_t v27 = v37[1];
  (*(void (**)(uint64_t *__return_ptr))(a9 + 32))(v36);
  uint64_t v28 = specialized RangeReplaceableCollection.init(_contents:_:_:_:)(v22, v23, v24, v25, v26, v27, v36[0], v36[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v26, v27);
  outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
  outlined consume of AttributedString.AttributeRunBoundaries?(v22, v23);
  long long v29 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v29;
  uint64_t v30 = *(void *)(a1 + 192);
  long long v31 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v31;
  long long v32 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v32;
  long long v33 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v33;
  long long v34 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v34;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(void *)(a8 + 192) = v30;
  *(void *)(a8 + 200) = v17;
  *(void *)(a8 + 208) = v28;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice4.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7)
{
  uint64_t v400 = a7;
  uint64_t v373 = a5;
  uint64_t v374 = a1;
  uint64_t v376 = a3;
  uint64_t v377 = a4;
  uint64_t v375 = a2;
  uint64_t v403 = *a6;
  uint64_t v405 = a6[1];
  uint64_t v8 = a6[3];
  uint64_t v409 = (uint64_t *)a6[2];
  long long v9 = *v7;
  long long v10 = v7[1];
  long long v11 = v7[2];
  v504[3] = v7[3];
  v504[2] = v11;
  v504[0] = v9;
  v504[1] = v10;
  long long v12 = v7[4];
  long long v13 = v7[5];
  long long v14 = v7[6];
  long long v508 = v7[7];
  long long v507 = v14;
  long long v505 = v12;
  long long v506 = v13;
  long long v15 = v7[8];
  long long v16 = v7[9];
  long long v17 = v7[10];
  long long v18 = v7[11];
  uint64_t v19 = *((void *)v7 + 25);
  uint64_t v513 = *((void *)v7 + 24);
  long long v512 = v18;
  long long v511 = v17;
  long long v509 = v15;
  long long v510 = v16;
  uint64_t v20 = *((void *)v7 + 26);
  uint64_t v407 = v19;
  uint64_t v408 = v20;
  uint64_t v21 = *((void *)&v15 + 1);
  long long v22 = v16;
  long long v23 = v17;
  long long v24 = v18;
  uint64_t v25 = v513;
  outlined retain of AttributedString.Runs((uint64_t)v504);
  uint64_t v410 = v8;
  uint64_t v402 = (void *)v21;
  long long v404 = v22;
  uint64_t v406 = v23;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_385;
  }
  uint64_t v390 = *((void *)&v23 + 1);
  uint64_t v27 = v403;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_386:
    __break(1u);
    goto LABEL_387;
  }
  uint64_t v413 = *(void *)(v407 + 16);
  if (!v413)
  {
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
    goto LABEL_389;
  }
  uint64_t v387 = v25;
  uint64_t v388 = *((void *)&v24 + 1);
  uint64_t v389 = v24;
  uint64_t v28 = *(void *)&v504[0];
  uint64_t v29 = *(void *)(*(void *)&v504[0] + 64);
  uint64_t v30 = *(void *)(*(void *)&v504[0] + 72);
  uint64_t v31 = *(void *)(*(void *)&v504[0] + 80);
  uint64_t v399 = *(void **)(*(void *)&v504[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v32 = v405;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v29) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = 0;
  }
  if (result < 0) {
    goto LABEL_388;
  }
  uint64_t v34 = result;
  if (v33 < result) {
    goto LABEL_388;
  }
  uint64_t v401 = v28;
  if (v29 && result < v31 && *(_WORD *)(v29 + 16))
  {
    uint64_t v416 = (unsigned char *)v30;
    uint64_t v35 = *(unsigned __int8 *)(v29 + 18);
    if (*(unsigned char *)(v29 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v36 = v34;
      uint64_t v37 = v29;
      while (1)
      {
        uint64_t v40 = *(unsigned __int16 *)(v37 + 16);
        if (!*(_WORD *)(v37 + 16)) {
          break;
        }
        uint64_t v41 = *(void *)(v37 + 40);
        BOOL v42 = __OFSUB__(v36, v41);
        uint64_t v43 = v36 - v41;
        if (v42) {
          goto LABEL_377;
        }
        if (__OFADD__(v43, 1)) {
          goto LABEL_378;
        }
        if (v43 + 1 < 1)
        {
          uint64_t v40 = 0;
          goto LABEL_16;
        }
        if (v40 == 1)
        {
          uint64_t v36 = v43;
          break;
        }
        unint64_t v44 = (uint64_t *)(v37 + 64);
        uint64_t v45 = 1;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          uint64_t v36 = v43 - v46;
          if (__OFSUB__(v43, v46)) {
            goto LABEL_370;
          }
          if (__OFADD__(v36, 1))
          {
LABEL_371:
            __break(1u);
LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
            goto LABEL_375;
          }
          if (v36 + 1 < 1) {
            break;
          }
          ++v45;
          uint64_t v43 = v36;
          if (v40 == v45) {
            goto LABEL_15;
          }
        }
        uint64_t v40 = v45;
        uint64_t v36 = v43;
LABEL_16:
        char v38 = (4 * *(unsigned char *)(v37 + 18) + 8) & 0x3C;
        uint64_t v35 = ((-15 << v38) - 1) & v35 | (v40 << v38);
        uint64_t v39 = *(void *)(v37 + 24 + 24 * v40);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v37 = v39;
        if (!*(unsigned char *)(v39 + 18)) {
          goto LABEL_33;
        }
      }
LABEL_15:
      if (!v36) {
        goto LABEL_16;
      }
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
LABEL_382:
      __break(1u);
LABEL_383:
      __break(1u);
      goto LABEL_384;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v36 = v34;
    uint64_t v39 = v29;
LABEL_33:
    uint64_t v48 = *(unsigned __int16 *)(v39 + 16);
    if (*(_WORD *)(v39 + 16))
    {
      uint64_t v49 = *(void *)(v39 + 24);
      BOOL v42 = __OFSUB__(v36, v49);
      uint64_t v50 = v36 - v49;
      uint64_t v32 = v405;
      if (v42)
      {
LABEL_419:
        __break(1u);
        goto LABEL_420;
      }
      if (__OFADD__(v50, 1))
      {
LABEL_420:
        __break(1u);
        goto LABEL_421;
      }
      if (v50 + 1 < 1)
      {
        uint64_t v48 = 0;
      }
      else
      {
        if (v48 == 1)
        {
          uint64_t v36 = v50;
          goto LABEL_46;
        }
        uint64_t v51 = (uint64_t *)(v39 + 48);
        uint64_t v52 = 1;
        while (1)
        {
          uint64_t v53 = *v51;
          v51 += 3;
          uint64_t v36 = v50 - v53;
          if (__OFSUB__(v50, v53)) {
            goto LABEL_404;
          }
          if (__OFADD__(v36, 1)) {
            goto LABEL_405;
          }
          if (v36 + 1 < 1) {
            break;
          }
          ++v52;
          uint64_t v50 = v36;
          if (v48 == v52) {
            goto LABEL_46;
          }
        }
        uint64_t v48 = v52;
        uint64_t v36 = v50;
      }
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v392 = v35 & 0xFFFFFFFFFFFFF0FFLL | (v48 << 8);
      uint64_t v27 = v403;
      uint64_t v28 = v401;
      uint64_t v30 = (uint64_t)v416;
      uint64_t v393 = v39;
      goto LABEL_31;
    }
    uint64_t v32 = v405;
LABEL_46:
    if (v36)
    {
LABEL_417:
      __break(1u);
      goto LABEL_418;
    }
    goto LABEL_47;
  }
  unint64_t v47 = swift_unknownObjectRetain();
  unint64_t v392 = specialized Rope._endPath.getter(v47);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v36 = 0;
  uint64_t v393 = 0;
  if (v29)
  {
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v412 = (void *)specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v399, v392, v393, v29, v30);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  uint64_t v412 = 0;
LABEL_49:
  uint64_t v54 = v410;
  uint64_t v55 = v34 - v36;
  if (__OFSUB__(v34, v36))
  {
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  long long v56 = *(_OWORD *)(v28 + 16);
  long long v57 = *(_OWORD *)(v28 + 32);
  long long v491 = *(_OWORD *)(v28 + 48);
  v490[1] = v57;
  v490[0] = v56;
  long long v58 = *(_OWORD *)(v28 + 16);
  long long v59 = *(_OWORD *)(v28 + 32);
  v492[2] = v491;
  v492[1] = v59;
  v492[0] = v58;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v492, (uint64_t)v493);
  outlined retain of Locale((uint64_t)v493);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v490);
  if (__OFSUB__(0, v36))
  {
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
    goto LABEL_392;
  }
  uint64_t v394 = (long long *)(v28 + 16);
  uint64_t v60 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v386 = v65;
  uint64_t result = outlined release of Locale((uint64_t)&v444);
  uint64_t v384 = v27;
  uint64_t v385 = v32;
  uint64_t v383 = v409;
  uint64_t v395 = *((void *)&v505 + 1);
  if (v412 == *((void **)&v505 + 1)) {
    goto LABEL_161;
  }
  uint64_t v383 = v64;
  uint64_t v384 = v62;
  if (v399 != *(void **)(v28 + 88))
  {
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }
  if (v393)
  {
    uint64_t v66 = v393 + 24 * ((v392 >> ((4 * *(unsigned char *)(v393 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v67 = *(long long **)(v66 + 32);
    uint64_t v68 = *(void *)(v66 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v69 = *(void *)(v28 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v392, v69);
    uint64_t v68 = v70;
    uint64_t v67 = v71;
    uint64_t result = swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v504[0] + 1) >= (uint64_t)v412)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v116 = v394;
    goto LABEL_115;
  }
  uint64_t v371 = v68;
  uint64_t v372 = v60;
  uint64_t v415 = (long long *)v465;
  uint64_t v416 = v432;
  uint64_t v381 = (uint64_t *)(v407 + 40);
  unint64_t v73 = v392;
  uint64_t v72 = v393;
  uint64_t v414 = v67;
  uint64_t v370 = *((void *)&v504[0] + 1);
LABEL_58:
  uint64_t v385 = v55;
  uint64_t v74 = *(void *)(v28 + 64);
  int v75 = *(void **)(v28 + 88);
  long long v424 = v399;
  uint64_t v425 = v73;
  uint64_t v426 = (uint64_t *)v72;
  if (v399 != v75) {
    goto LABEL_411;
  }
  uint64_t v76 = v72;
  if (v74)
  {
    unint64_t v77 = *(unsigned __int8 *)(v74 + 18);
    uint64_t result = swift_unknownObjectRetain();
    if (v73 <= v77) {
      goto LABEL_412;
    }
  }
  else if (!v73)
  {
    goto LABEL_412;
  }
  if (!v76 || (char v78 = (4 * *(unsigned char *)(v76 + 18) + 8) & 0x3C, ((v73 >> v78) & 0xF) == 0))
  {
    int v80 = *(unsigned __int8 *)(v74 + 18);
    char v81 = (4 * v80 + 8) & 0x3C;
    uint64_t v82 = (v73 >> v81) & 0xF;
    *(void *)&long long v463 = v82;
    if (v80)
    {
      swift_unknownObjectRetain();
      char v83 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v74 + 16, v74 + 24, (uint64_t *)&v463, (uint64_t)&v424, v80);
      uint64_t result = swift_unknownObjectRelease();
      if ((v83 & 1) == 0) {
        goto LABEL_416;
      }
      uint64_t v28 = v401;
      if (v424 != v399) {
        goto LABEL_413;
      }
      uint64_t v76 = (uint64_t)v426;
      unint64_t v79 = v425;
      if (v426) {
        goto LABEL_70;
      }
    }
    else
    {
      if (!v82) {
        goto LABEL_416;
      }
      unint64_t v79 = ((v82 - 1) << v81) | ((-15 << v81) - 1) & v73;
      uint64_t v425 = v79;
      uint64_t v426 = (uint64_t *)v74;
      uint64_t v76 = v74;
      if (v74) {
        goto LABEL_70;
      }
    }
    swift_unknownObjectRetain();
    unint64_t v84 = specialized Rope._Node.subscript.getter(v79, v74);
    swift_unknownObjectRelease();
    char v85 = 1;
    goto LABEL_74;
  }
  unint64_t v79 = ((((v73 >> v78) & 0xF) - 1) << v78) | ((-15 << v78) - 1) & v73;
  uint64_t v425 = v79;
LABEL_70:
  unint64_t v84 = *(void *)(v76 + 24 * ((v79 >> ((4 * *(unsigned char *)(v76 + 18) + 8) & 0x3C)) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v85 = 0;
LABEL_74:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v385, v84)) {
    goto LABEL_414;
  }
  if (v399 != *(void **)(v28 + 88)) {
    goto LABEL_415;
  }
  uint64_t v378 = (uint64_t *)(v385 - v84);
  unint64_t v379 = v76;
  uint64_t v380 = (void *)v79;
  if (v85)
  {
    uint64_t v86 = *(void *)(v28 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v79, v86);
    uint64_t v88 = v87;
    uint64_t v382 = v89;
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v90 = v76 + 24 * ((v79 >> ((4 * *(unsigned char *)(v76 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v88 = *(void **)(v90 + 32);
    uint64_t v91 = *(uint64_t **)(v90 + 40);
    swift_bridgeObjectRetain();
    uint64_t v382 = v91;
    swift_bridgeObjectRetain();
  }
  uint64_t v92 = v414;
  uint64_t v412 = (void *)((char *)v412 - 1);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v93 = 0;
  unint64_t v94 = v381;
  long long v411 = v88;
  while (1)
  {
    uint64_t v96 = v93 + 1;
    if (__OFADD__(v93, 1)) {
      goto LABEL_374;
    }
    uint64_t v97 = *(v94 - 1);
    uint64_t v98 = *v94;
    if (*((void *)v92 + 2))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v98);
      if (v100)
      {
        outlined init with copy of AttributedString._AttributeValue(*((void *)v92 + 7) + 72 * v99, (uint64_t)&v455);
      }
      else
      {
        uint64_t v459 = 0;
        long long v458 = 0u;
        long long v457 = 0u;
        long long v456 = 0u;
        long long v455 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!v88[2])
      {
LABEL_89:
        uint64_t v453 = 0;
        long long v452 = 0u;
        long long v451 = 0u;
        long long v450 = 0u;
        long long v449 = 0u;
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v459 = 0;
      long long v458 = 0u;
      long long v457 = 0u;
      long long v456 = 0u;
      long long v455 = 0u;
      swift_bridgeObjectRetain();
      if (!v88[2]) {
        goto LABEL_89;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v98);
    if (v102)
    {
      outlined init with copy of AttributedString._AttributeValue(v88[7] + 72 * v101, (uint64_t)&v449);
    }
    else
    {
      uint64_t v453 = 0;
      long long v452 = 0u;
      long long v451 = 0u;
      long long v450 = 0u;
      long long v449 = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v92 = v414;
LABEL_96:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v455, (uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v449, (uint64_t)v416, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v427)
    {
      if (v433) {
        goto LABEL_113;
      }
      outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v449, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v455, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_83;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v424, (uint64_t)&v439, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v433) {
      break;
    }
    long long v103 = *((_OWORD *)v416 + 3);
    long long v436 = *((_OWORD *)v416 + 2);
    long long v437 = v103;
    uint64_t v438 = *((void *)v416 + 8);
    long long v104 = *((_OWORD *)v416 + 1);
    long long v434 = *(_OWORD *)v416;
    long long v435 = v104;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v439, (uint64_t)v422);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v434, (uint64_t)&v417);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v422, (uint64_t)&v463, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v417, (uint64_t)v415, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v464)
    {
      if (!v466)
      {
        char v95 = 1;
        goto LABEL_82;
      }
      outlined destroy of Any?((uint64_t)v415, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_81:
      char v95 = 0;
      goto LABEL_82;
    }
    if (!v466)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v463);
      goto LABEL_81;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v463, (uint64_t)v479);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v415, (uint64_t)v478);
    uint64_t v105 = v480;
    uint64_t v396 = (uint64_t)v481;
    uint64_t v391 = __swift_project_boxed_opaque_existential_1(v479, v480);
    unint64_t v398 = (unint64_t)v368;
    uint64_t v106 = *(void *)(v105 - 8);
    MEMORY[0x1F4188790](v391);
    int v108 = (char *)v368 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v478, (uint64_t)v475);
    uint64_t v109 = type metadata accessor for Optional();
    uint64_t v397 = v368;
    uint64_t v110 = *(void *)(v109 - 8);
    MEMORY[0x1F4188790](v109);
    long long v112 = (char *)v368 - v111;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    int v113 = swift_dynamicCast();
    long long v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
    if (v113)
    {
      v114(v112, 0, 1, v105);
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v108, v112, v105);
      char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
    }
    else
    {
      v114(v112, 1, 1, v105);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
      char v95 = 0;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v478);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v479);
    uint64_t v28 = v401;
    uint64_t v92 = v414;
LABEL_82:
    outlined destroy of Any?((uint64_t)&v417, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v422, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v434);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v439);
    outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v449, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t result = outlined destroy of Any?((uint64_t)&v455, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v88 = v411;
    if ((v95 & 1) == 0) {
      goto LABEL_114;
    }
LABEL_83:
    v94 += 2;
    ++v93;
    if (v96 == v413)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v115 = v378;
      uint64_t v72 = v379;
      uint64_t v55 = (uint64_t)v378;
      unint64_t v73 = (unint64_t)v380;
      if (v370 >= (uint64_t)v412)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = (uint64_t)v115;
        uint64_t v116 = v394;
        goto LABEL_115;
      }
      goto LABEL_58;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v439);
LABEL_113:
  outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v449, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v455, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v116 = v394;
  uint64_t v55 = v385;
LABEL_115:
  long long v117 = *v116;
  long long v118 = v116[1];
  long long v489 = v116[2];
  v488[1] = v118;
  v488[0] = v117;
  long long v119 = *v116;
  long long v120 = v116[1];
  v494[2] = v489;
  v494[1] = v120;
  v494[0] = v119;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v494, (uint64_t)v495);
  outlined retain of Locale((uint64_t)v495);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v488);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v55, result)) {
    goto LABEL_409;
  }
  uint64_t v121 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v122 = v116;
  uint64_t v124 = v123;
  uint64_t v126 = v125;
  uint64_t v128 = v127;
  outlined release of Locale((uint64_t)&v445);
  uint64_t v129 = (uint64_t)v402;
  uint64_t v131 = (uint64_t *)*((void *)&v404 + 1);
  uint64_t v130 = v404;
  uint64_t v132 = v406;
  char v133 = static BigString.Index.< infix(_:_:)();
  if (v133) {
    uint64_t v129 = v121;
  }
  else {
    uint64_t v124 = v130;
  }
  if (v133)
  {
    uint64_t v131 = v126;
    uint64_t v54 = v128;
  }
  else
  {
    uint64_t v54 = v132;
  }
  long long v134 = v122[1];
  long long v485 = *v122;
  long long v486 = v134;
  long long v487 = v122[2];
  BigString.unicodeScalars.getter();
  uint64_t v135 = v129;
  uint64_t v136 = (long long *)BigString.UnicodeScalarView.index(after:)();
  uint64_t v138 = v137;
  uint64_t v140 = v139;
  uint64_t v142 = v141;
  outlined release of Locale((uint64_t)&v446);
  long long v143 = *v122;
  long long v144 = v122[1];
  long long v477 = v122[2];
  v476[1] = v144;
  v476[0] = v143;
  long long v145 = *v122;
  long long v146 = v122[1];
  v496[2] = v477;
  v496[1] = v146;
  v496[0] = v145;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v496, (uint64_t)v497);
  outlined retain of Locale((uint64_t)v497);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
LABEL_412:
    __break(1u);
LABEL_413:
    __break(1u);
LABEL_414:
    __break(1u);
LABEL_415:
    __break(1u);
LABEL_416:
    __break(1u);
    goto LABEL_417;
  }
  v479[0] = v135;
  v479[1] = v124;
  v479[2] = v131;
  uint64_t v480 = v54;
  long long v481 = v136;
  uint64_t v482 = v138;
  uint64_t v483 = v140;
  uint64_t v484 = v142;
  uint64_t v147 = v124;
  uint64_t v148 = *(void *)(v408 + 16);
  uint64_t v384 = v135;
  uint64_t v385 = v147;
  uint64_t v383 = v131;
  if (!v148)
  {
    uint64_t v28 = v401;
    goto LABEL_160;
  }
  uint64_t v416 = (unsigned char *)v138;
  char v149 = static BigString.Index.== infix(_:_:)();
  uint64_t v28 = v401;
  if (v149) {
    goto LABEL_160;
  }
  uint64_t v415 = v136;
  swift_bridgeObjectRetain();
  uint64_t v150 = 40;
  uint64_t v151 = v148;
  while (2)
  {
    if (!*(void *)(v408 + v150))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.startIndex.getter();
      uint64_t v152 = v415;
      uint64_t v153 = (uint64_t)v416;
      if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
        goto LABEL_134;
      }
      BigString.utf8.getter();
      uint64_t v412 = (void *)BigString.UTF8View.index(before:)();
      uint64_t v155 = v154;
      uint64_t v157 = v156;
      uint64_t v414 = v158;
      outlined release of Locale((uint64_t)&v447);
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      uint64_t v159 = v157;
      uint64_t v160 = v412;
      outlined release of Locale((uint64_t)&v448);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        v478[0] = v160;
        v478[1] = v155;
        _OWORD v478[2] = v159;
        v478[3] = v414;
        v478[4] = v152;
        v478[5] = v153;
        v478[6] = v140;
        v478[7] = v142;
        specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)v478, (uint64_t *)&v424);
        outlined release of Locale((uint64_t)&v449);
        uint64_t v161 = v427;
        uint64_t v28 = v401;
        if (v427 == 2) {
          goto LABEL_134;
        }
        uint64_t v384 = (uint64_t)v424;
        uint64_t v385 = v425;
        uint64_t v383 = v426;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        uint64_t v54 = v161;
        if ((result & 1) == 0) {
          goto LABEL_134;
        }
        goto LABEL_428;
      }
      goto LABEL_426;
    }
    swift_bridgeObjectRelease();
    v150 += 16;
    if (--v151) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v152 = v415;
  uint64_t v153 = (uint64_t)v416;
LABEL_134:
  v475[0] = v384;
  v475[1] = v385;
  v475[2] = v383;
  v475[3] = v54;
  v475[4] = v152;
  v475[5] = v153;
  v475[6] = v140;
  v475[7] = v142;
  uint64_t v162 = *(void *)(v408 + 16);
  if (v162)
  {
    uint64_t v163 = 40;
    while (!*(void *)(v408 + v163))
    {
      v163 += 16;
      if (!--v162) {
        goto LABEL_160;
      }
    }
    uint64_t v164 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v165 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v166 = *v164;
      if (*v164)
      {
        uint64_t v167 = *(v164 - 1);
        if ((v166 & 0x2000000000000000) != 0 ? HIBYTE(v166) & 0xF : v167 & 0xFFFFFFFFFFFFLL)
        {
          if ((v166 & 0x1000000000000000) != 0)
          {
            int v169 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v166 & 0x2000000000000000) != 0)
            {
              long long v424 = (void *)*(v164 - 1);
              uint64_t v425 = v166 & 0xFFFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain();
            }
            else
            {
              if ((v167 & 0x1000000000000000) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              swift_bridgeObjectRetain();
            }
            int v169 = _decodeScalar(_:startingAt:)();
            swift_bridgeObjectRelease();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v165 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v165 + 2) + 1, 1, v165);
          }
          unint64_t v171 = *((void *)v165 + 2);
          unint64_t v170 = *((void *)v165 + 3);
          if (v171 >= v170 >> 1) {
            uint64_t v165 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v170 > 1), v171 + 1, 1, v165);
          }
          *((void *)v165 + 2) = v171 + 1;
          *(_DWORD *)&v165[4 * v171 + 32] = v169;
        }
      }
      v164 += 2;
      --v148;
    }
    while (v148);
    swift_bridgeObjectRelease();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v454);
    uint64_t v172 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v165);
    uint64_t v174 = v173;
    uint64_t v176 = v175;
    uint64_t v178 = v177;
    swift_bridgeObjectRelease();
    outlined release of Locale((uint64_t)&v455);
    uint64_t v28 = v401;
    if (v178 != 2)
    {
      uint64_t v372 = v178;
      char v367 = static BigString.Index.< infix(_:_:)();
      outlined release of Locale((uint64_t)v476);
      uint64_t result = outlined release of AttributedString.Runs((uint64_t)v504);
      if ((v367 & 1) == 0)
      {
        uint64_t v384 = v172;
        uint64_t v385 = v174;
        uint64_t v383 = v176;
        goto LABEL_162;
      }
      goto LABEL_427;
    }
  }
LABEL_160:
  outlined release of Locale((uint64_t)v476);
LABEL_161:
  outlined release of AttributedString.Runs((uint64_t)v504);
  uint64_t v372 = v54;
LABEL_162:
  outlined retain of AttributedString.Runs((uint64_t)v504);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_391;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
    goto LABEL_394;
  }
  uint64_t v179 = *(void *)(v28 + 64);
  uint64_t v180 = *(void *)(v28 + 72);
  uint64_t v181 = *(void *)(v28 + 80);
  uint64_t v402 = *(void **)(v28 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v179) {
    uint64_t v182 = v181;
  }
  else {
    uint64_t v182 = 0;
  }
  if (result < 0) {
    goto LABEL_393;
  }
  uint64_t v183 = result;
  if (v182 < result) {
    goto LABEL_393;
  }
  uint64_t v416 = (unsigned char *)v180;
  if (!v179 || result >= v181 || !*(_WORD *)(v179 + 16))
  {
    unint64_t v195 = swift_unknownObjectRetain();
    unint64_t v196 = specialized Rope._endPath.getter(v195);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v197 = 0;
    uint64_t v185 = 0;
    if (v179) {
      goto LABEL_191;
    }
    uint64_t v198 = 0;
LABEL_209:
    uint64_t v397 = (void *)(v183 - v185);
    if (__OFSUB__(v183, v185))
    {
LABEL_394:
      __break(1u);
      goto LABEL_395;
    }
    long long v205 = *v394;
    long long v206 = v394[1];
    long long v474 = v394[2];
    v473[1] = v206;
    v473[0] = v205;
    long long v207 = *v394;
    long long v208 = v394[1];
    v498[2] = v474;
    v498[1] = v208;
    v498[0] = v207;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v498, (uint64_t)v499);
    outlined retain of Locale((uint64_t)v499);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v473);
    if (__OFSUB__(0, v185))
    {
LABEL_395:
      __break(1u);
      goto LABEL_396;
    }
    uint64_t v209 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v211 = v210;
    uint64_t v370 = v213;
    uint64_t v371 = v212;
    uint64_t result = outlined release of Locale((uint64_t)&v460);
    if (v198 >= v395)
    {
LABEL_396:
      __break(1u);
      goto LABEL_397;
    }
    if (v402 != *(void **)(v28 + 88))
    {
LABEL_397:
      __break(1u);
LABEL_398:
      __break(1u);
LABEL_399:
      __break(1u);
      goto LABEL_400;
    }
    v368[1] = v209;
    v368[2] = v211;
    uint64_t v214 = *(uint64_t **)(v28 + 64);
    uint64_t v215 = v197;
    if (v197)
    {
      unint64_t v216 = v197 + 24 * ((v196 >> ((4 * *(unsigned char *)(v197 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v217 = *(void *)(v216 + 32);
      uint64_t v218 = *(void *)(v216 + 40);
      swift_bridgeObjectRetain();
      uint64_t v369 = v218;
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v219 = (uint64_t)v402;
      uint64_t v220 = (uint64_t)v402;
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v196, (uint64_t)v214);
      uint64_t v217 = v221;
      uint64_t v369 = v222;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v214 = *(uint64_t **)(v28 + 64);
      uint64_t v220 = *(void *)(v28 + 88);
      uint64_t v219 = (uint64_t)v402;
    }
    uint64_t v396 = v198 + 1;
    long long v424 = (void *)v219;
    uint64_t v425 = v196;
    uint64_t v414 = (long long *)v465;
    uint64_t v415 = (long long *)v432;
    uint64_t v382 = (uint64_t *)(v407 + 40);
    uint64_t v426 = (uint64_t *)v215;
    uint64_t v223 = v413;
    uint64_t v406 = v217;
LABEL_217:
    if (v219 != v220) {
      goto LABEL_381;
    }
    unint64_t v398 = v196;
    if (v215)
    {
      unint64_t v224 = *(void *)(v215 + 24 * ((v196 >> ((4 * *(unsigned char *)(v215 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v224 = specialized Rope._Node.subscript.getter(v196, (uint64_t)v214);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v397, v224)) {
      goto LABEL_382;
    }
    uint64_t v380 = (void *)((char *)v397 + v224);
    uint64_t v391 = (void *)v220;
    if (v214)
    {
      unint64_t v225 = ((-15 << ((4 * *((unsigned char *)v214 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v214 + 18) | ((unint64_t)*((unsigned __int16 *)v214 + 8) << ((4 * *((unsigned char *)v214 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v225 = 0;
    }
    uint64_t v226 = v406;
    if (v398 >= v225) {
      goto LABEL_383;
    }
    if (v215)
    {
      char v227 = (4 * *(unsigned char *)(v215 + 18) + 8) & 0x3C;
      unint64_t v228 = ((v398 >> v227) & 0xF) + 1;
      if (v228 < *(unsigned __int16 *)(v215 + 16))
      {
        unint64_t v229 = (v228 << v227) | ((-15 << v227) - 1) & v398;
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_232:
        uint64_t v214 = v426;
        goto LABEL_239;
      }
    }
    int v230 = *((unsigned __int8 *)v214 + 18);
    char v231 = (4 * v230 + 8) & 0x3C;
    uint64_t v232 = (v398 >> v231) & 0xF;
    *(void *)&long long v463 = v232;
    if (v230)
    {
      swift_unknownObjectRetain();
      char v233 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v214 + 3), (uint64_t *)&v463, (uint64_t)&v424, (uint64_t)v214, v230);
      uint64_t result = swift_unknownObjectRelease();
      if (v233)
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v229 = v425;
        goto LABEL_232;
      }
    }
    else
    {
      uint64_t v234 = v232 + 1;
      if (v232 + 1 < (unint64_t)*((unsigned __int16 *)v214 + 8))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v229 = (v234 << v231) | ((-15 << v231) - 1) & v398;
        goto LABEL_239;
      }
    }
    if (v214)
    {
      int v235 = *((unsigned __int8 *)v214 + 18);
      uint64_t v236 = *((unsigned __int16 *)v214 + 8);
      uint64_t result = swift_unknownObjectRelease_n();
      unint64_t v229 = ((-15 << ((4 * v235 + 8) & 0x3C)) - 1) & v235 | (unint64_t)(v236 << ((4 * v235 + 8) & 0x3C));
    }
    else
    {
      unint64_t v229 = 0;
    }
    uint64_t v214 = 0;
    long long v424 = v391;
LABEL_239:
    if (v396 != v395)
    {
      if (v424 != *(void **)(v28 + 88))
      {
LABEL_384:
        __break(1u);
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
      uint64_t v402 = v424;
      uint64_t v381 = (uint64_t *)v215;
      uint64_t v378 = v214;
      unint64_t v379 = v229;
      if (v214)
      {
        long long v237 = &v214[3 * ((v229 >> ((4 * *((unsigned char *)v214 + 18) + 8) & 0x3C)) & 0xF)];
        uint64_t v238 = v237[4];
        uint64_t v239 = v237[5];
        swift_bridgeObjectRetain();
        uint64_t v386 = v239;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v240 = *(void *)(v28 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v229, v240);
        uint64_t v386 = v241;
        uint64_t v238 = v242;
        swift_unknownObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v243 = 0;
      char v244 = v382;
      uint64_t v416 = (unsigned char *)v238;
      while (1)
      {
        uint64_t v246 = v243 + 1;
        if (__OFADD__(v243, 1))
        {
          __break(1u);
LABEL_370:
          __break(1u);
          goto LABEL_371;
        }
        uint64_t v248 = *(v244 - 1);
        uint64_t v247 = *v244;
        if (*(void *)(v226 + 16))
        {
          swift_bridgeObjectRetain_n();
          unint64_t v249 = specialized __RawDictionaryStorage.find<A>(_:)(v248, v247);
          if (v250)
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v226 + 56) + 72 * v249, (uint64_t)&v439);
          }
          else
          {
            uint64_t v443 = 0;
            long long v441 = 0u;
            long long v442 = 0u;
            long long v439 = 0u;
            long long v440 = 0u;
          }
          swift_bridgeObjectRelease();
          uint64_t v238 = (uint64_t)v416;
          if (!*((void *)v416 + 2))
          {
LABEL_254:
            uint64_t v438 = 0;
            long long v436 = 0u;
            long long v437 = 0u;
            long long v434 = 0u;
            long long v435 = 0u;
            goto LABEL_261;
          }
        }
        else
        {
          uint64_t v443 = 0;
          long long v441 = 0u;
          long long v442 = 0u;
          long long v439 = 0u;
          long long v440 = 0u;
          swift_bridgeObjectRetain();
          if (!*(void *)(v238 + 16)) {
            goto LABEL_254;
          }
        }
        swift_bridgeObjectRetain();
        unint64_t v251 = specialized __RawDictionaryStorage.find<A>(_:)(v248, v247);
        if (v252)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v238 + 56) + 72 * v251, (uint64_t)&v434);
        }
        else
        {
          uint64_t v438 = 0;
          long long v436 = 0u;
          long long v437 = 0u;
          long long v434 = 0u;
          long long v435 = 0u;
        }
        swift_bridgeObjectRelease();
LABEL_261:
        uint64_t v214 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
        swift_bridgeObjectRelease();
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v439, (uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v434, (uint64_t)v415, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v427)
        {
          if (v433) {
            goto LABEL_278;
          }
          outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v434, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = outlined destroy of Any?((uint64_t)&v439, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          goto LABEL_248;
        }
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v424, (uint64_t)v422, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v433) {
          goto LABEL_277;
        }
        long long v253 = v415[3];
        long long v419 = v415[2];
        long long v420 = v253;
        uint64_t v421 = *((void *)v415 + 8);
        long long v254 = v415[1];
        long long v417 = *v415;
        long long v418 = v254;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v422, (uint64_t)v502);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v417, (uint64_t)v500);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v502, (uint64_t)&v463, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v500, (uint64_t)v414, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        if (v464)
        {
          if (!v466)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v463);
LABEL_246:
            char v245 = 0;
            goto LABEL_247;
          }
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v463, (uint64_t)&v470);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v414, (uint64_t)v468);
          uint64_t v255 = *((void *)&v471 + 1);
          *((void *)&v404 + 1) = v472;
          *(void *)&long long v404 = __swift_project_boxed_opaque_existential_1(&v470, *((uint64_t *)&v471 + 1));
          uint64_t v412 = v368;
          uint64_t v256 = *(void *)(v255 - 8);
          MEMORY[0x1F4188790](v404);
          uint64_t v258 = (char *)v368 - ((v257 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v468, (uint64_t)v467);
          uint64_t v259 = type metadata accessor for Optional();
          long long v411 = v368;
          uint64_t v260 = *(void *)(v259 - 8);
          MEMORY[0x1F4188790](v259);
          int v262 = (char *)v368 - v261;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          int v263 = swift_dynamicCast();
          unint64_t v264 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v256 + 56);
          if (v263)
          {
            v264(v262, 0, 1, v255);
            (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v258, v262, v255);
            char v245 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v256 + 8))(v258, v255);
          }
          else
          {
            v264(v262, 1, 1, v255);
            (*(void (**)(char *, uint64_t))(v260 + 8))(v262, v259);
            char v245 = 0;
          }
          uint64_t v226 = v406;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v468);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v470);
          uint64_t v223 = v413;
        }
        else
        {
          if (v466)
          {
            outlined destroy of Any?((uint64_t)v414, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            goto LABEL_246;
          }
          char v245 = 1;
        }
LABEL_247:
        outlined destroy of Any?((uint64_t)v500, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v502, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v417);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v422);
        outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v434, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?((uint64_t)&v439, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v245 & 1) == 0) {
          goto LABEL_279;
        }
LABEL_248:
        v244 += 2;
        ++v243;
        uint64_t v238 = (uint64_t)v416;
        if (v246 == v223)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v28 = v401;
          uint64_t v219 = (uint64_t)v402;
          uint64_t v214 = *(uint64_t **)(v401 + 64);
          uint64_t v220 = *(void *)(v401 + 88);
          unint64_t v196 = v379;
          long long v424 = v402;
          uint64_t v425 = v379;
          uint64_t v215 = (uint64_t)v378;
          uint64_t v426 = v378;
          BOOL v42 = __OFADD__(v396++, 1);
          uint64_t v397 = v380;
          if (!v42) {
            goto LABEL_217;
          }
          __break(1u);
LABEL_277:
          outlined destroy of AttributedString._AttributeValue((uint64_t)v422);
LABEL_278:
          outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
          outlined destroy of Any?((uint64_t)&v434, v214);
          outlined destroy of Any?((uint64_t)&v439, v214);
LABEL_279:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v28 = v401;
          uint64_t v215 = (uint64_t)v381;
          goto LABEL_280;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_280:
    unint64_t v265 = v398;
    if (v391 != *(void **)(v28 + 88)) {
      goto LABEL_398;
    }
    if (v215)
    {
      unint64_t v266 = *(void *)(v215 + 24 * ((v398 >> ((4 * *(unsigned char *)(v215 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v267 = *(void *)(v28 + 64);
      swift_unknownObjectRetain();
      unint64_t v266 = specialized Rope._Node.subscript.getter(v265, v267);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    char v268 = (char *)v397 + v266;
    if (__OFADD__(v397, v266)) {
      goto LABEL_399;
    }
    unint64_t v269 = v394;
    long long v270 = *v394;
    long long v271 = v394[1];
    long long v472 = v394[2];
    long long v471 = v271;
    long long v470 = v270;
    long long v272 = *v394;
    long long v273 = v394[1];
    v500[2] = v472;
    v500[1] = v273;
    v500[0] = v272;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v500, (uint64_t)v501);
    outlined retain of Locale((uint64_t)v501);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)&v470);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v268, result))
    {
LABEL_400:
      __break(1u);
LABEL_401:
      __break(1u);
      goto LABEL_402;
    }
    uint64_t v274 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v276 = v275;
    uint64_t v278 = v277;
    uint64_t v280 = v279;
    outlined release of Locale((uint64_t)&v461);
    uint64_t v282 = v389;
    uint64_t v281 = v390;
    uint64_t v284 = v387;
    uint64_t v283 = v388;
    char v285 = static BigString.Index.< infix(_:_:)();
    if (v285) {
      uint64_t v286 = v281;
    }
    else {
      uint64_t v286 = v274;
    }
    if (v285)
    {
      uint64_t v287 = v283;
    }
    else
    {
      uint64_t v282 = v276;
      uint64_t v287 = v278;
    }
    uint64_t v288 = v286;
    uint64_t v289 = v405;
    if (v285) {
      uint64_t v280 = v284;
    }
    uint64_t v290 = v403;
    long long v291 = *v269;
    long long v292 = v269[1];
    long long v469 = v269[2];
    v468[1] = v292;
    v468[0] = v291;
    long long v293 = *v269;
    long long v294 = v269[1];
    v502[2] = v469;
    v502[1] = v294;
    v502[0] = v293;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v502, (uint64_t)v503);
    outlined retain of Locale((uint64_t)v503);
    uint64_t v295 = v409;
    uint64_t v296 = v410;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_401;
    }
    *(void *)&long long v434 = v290;
    *((void *)&v434 + 1) = v289;
    *(void *)&long long v435 = v295;
    *((void *)&v435 + 1) = v296;
    *(void *)&long long v436 = v288;
    *((void *)&v436 + 1) = v282;
    *(void *)&long long v437 = v287;
    *((void *)&v437 + 1) = v280;
    uint64_t v297 = v288;
    uint64_t v298 = v408;
    uint64_t v299 = *(void *)(v408 + 16);
    uint64_t v416 = (unsigned char *)v297;
    if (!v299 || (static BigString.Index.== infix(_:_:)() & 1) != 0)
    {
LABEL_309:
      uint64_t v309 = v385;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v300 = 40;
      uint64_t v301 = v299;
      while (*(void *)(v298 + v300))
      {
        swift_bridgeObjectRelease();
        v300 += 16;
        if (!--v301)
        {
          swift_bridgeObjectRelease();
          uint64_t v302 = v405;
          uint64_t v303 = v290;
          uint64_t v305 = v409;
          uint64_t v304 = v410;
          goto LABEL_304;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      outlined release of Locale((uint64_t)&v462);
      uint64_t v302 = v405;
      uint64_t v303 = v290;
      uint64_t v305 = v409;
      uint64_t v304 = v410;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_423;
      }
      v422[0] = v303;
      v422[1] = v302;
      v422[2] = v305;
      v422[3] = v304;
      v422[4] = v303;
      v422[5] = v302;
      v422[6] = v305;
      v422[7] = v304;
      specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v422, (uint64_t *)&v424);
      outlined release of Locale((uint64_t)&v463);
      uint64_t v306 = v431;
      if (v431 != 2)
      {
        uint64_t v282 = v429;
        uint64_t v287 = v430;
        uint64_t v416 = (unsigned char *)v428;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        uint64_t v280 = v306;
        if (result) {
          goto LABEL_424;
        }
      }
LABEL_304:
      *(void *)&long long v417 = v303;
      *((void *)&v417 + 1) = v302;
      *(void *)&long long v418 = v305;
      *((void *)&v418 + 1) = v304;
      *(void *)&long long v419 = v416;
      *((void *)&v419 + 1) = v282;
      *(void *)&long long v420 = v287;
      *((void *)&v420 + 1) = v280;
      uint64_t v307 = *(void *)(v408 + 16);
      if (!v307) {
        goto LABEL_309;
      }
      uint64_t v308 = 40;
      uint64_t v309 = v385;
      while (!*(void *)(v408 + v308))
      {
        v308 += 16;
        if (!--v307) {
          goto LABEL_310;
        }
      }
      *(void *)&long long v439 = MEMORY[0x1E4FBC860];
      uint64_t v351 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      do
      {
        unint64_t v356 = *v351;
        if (*v351)
        {
          uint64_t v357 = *(v351 - 1);
          if ((v356 & 0x2000000000000000) != 0 ? HIBYTE(v356) & 0xF : v357 & 0xFFFFFFFFFFFFLL)
          {
            if ((v356 & 0x1000000000000000) != 0)
            {
              int v352 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v356 & 0x2000000000000000) != 0)
              {
                long long v424 = (void *)*(v351 - 1);
                uint64_t v425 = v356 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v357 & 0x1000000000000000) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }
              int v352 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v353 = *(void *)(v439 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v353);
            uint64_t v354 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v353, v352);
            destructiveProjectEnumData for PredicateCodableError(v354, v355);
          }
        }
        v351 += 2;
        --v299;
      }
      while (v299);
      swift_bridgeObjectRelease();
      uint64_t v359 = v439;
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v467);
      uint64_t v360 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v359);
      uint64_t v362 = v361;
      uint64_t v364 = v363;
      uint64_t v310 = v365;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v424);
      if (v310 != 2)
      {
        char v366 = static BigString.Index.< infix(_:_:)();
        outlined release of Locale((uint64_t)v468);
        uint64_t result = outlined release of AttributedString.Runs((uint64_t)v504);
        if (v366) {
          goto LABEL_425;
        }
        uint64_t v416 = (unsigned char *)v360;
        uint64_t v282 = v362;
        uint64_t v287 = v364;
        uint64_t v311 = v393;
        uint64_t v309 = v385;
LABEL_311:
        if (v399 == *(void **)(v401 + 88))
        {
          if (v311)
          {
            unint64_t v312 = v311 + 24 * ((v392 >> ((4 * *(unsigned char *)(v311 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v314 = *(void *)(v312 + 32);
            uint64_t v313 = *(long long **)(v312 + 40);
            swift_bridgeObjectRetain();
            uint64_t v415 = v313;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v315 = *(void *)(v401 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v392, v315);
            uint64_t v314 = v316;
            uint64_t v415 = v317;
            swift_unknownObjectRelease();
          }
          uint64_t v318 = (*(uint64_t (**)(void, void))(v400[6] + 24))(v400[2], v400[6]);
          if (*(void *)(v314 + 16)
            && (unint64_t v320 = specialized __RawDictionaryStorage.find<A>(_:)(v318, v319), (v321 & 1) != 0))
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v314 + 56) + 72 * v320, (uint64_t)&v439);
          }
          else
          {
            uint64_t v443 = 0;
            long long v441 = 0u;
            long long v442 = 0u;
            long long v439 = 0u;
            long long v440 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v440 + 1))
          {
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v439, (uint64_t)v423);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            uint64_t v323 = v374;
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v439);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v323, 0, 1, AssociatedTypeWitness);
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v439, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t v324 = swift_getAssociatedTypeWitness();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v324 - 8) + 56))(v374, 1, 1, v324);
          }
          uint64_t v325 = (*(uint64_t (**)(void, void))(v400[7] + 24))(v400[3], v400[7]);
          if (*(void *)(v314 + 16)
            && (unint64_t v327 = specialized __RawDictionaryStorage.find<A>(_:)(v325, v326), (v328 & 1) != 0))
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v314 + 56) + 72 * v327, (uint64_t)&v439);
          }
          else
          {
            uint64_t v443 = 0;
            long long v441 = 0u;
            long long v442 = 0u;
            long long v439 = 0u;
            long long v440 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v440 + 1))
          {
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v439, (uint64_t)v423);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            uint64_t v329 = swift_getAssociatedTypeWitness();
            uint64_t v330 = v375;
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v439);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v329 - 8) + 56))(v330, 0, 1, v329);
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v439, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t v331 = swift_getAssociatedTypeWitness();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v331 - 8) + 56))(v375, 1, 1, v331);
          }
          uint64_t v332 = (*(uint64_t (**)(void, void))(v400[8] + 24))(v400[4], v400[8]);
          if (*(void *)(v314 + 16)
            && (unint64_t v334 = specialized __RawDictionaryStorage.find<A>(_:)(v332, v333), (v335 & 1) != 0))
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v314 + 56) + 72 * v334, (uint64_t)&v439);
          }
          else
          {
            uint64_t v443 = 0;
            long long v441 = 0u;
            long long v442 = 0u;
            long long v439 = 0u;
            long long v440 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v440 + 1))
          {
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v439, (uint64_t)v423);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            uint64_t v336 = swift_getAssociatedTypeWitness();
            uint64_t v337 = v376;
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v439);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v336 - 8) + 56))(v337, 0, 1, v336);
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v439, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t v338 = swift_getAssociatedTypeWitness();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v338 - 8) + 56))(v376, 1, 1, v338);
          }
          uint64_t v339 = (*(uint64_t (**)(void, void))(v400[9] + 24))(v400[5], v400[9]);
          if (*(void *)(v314 + 16)
            && (unint64_t v341 = specialized __RawDictionaryStorage.find<A>(_:)(v339, v340), (v342 & 1) != 0))
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v314 + 56) + 72 * v341, (uint64_t)&v439);
          }
          else
          {
            uint64_t v443 = 0;
            long long v441 = 0u;
            long long v442 = 0u;
            long long v439 = 0u;
            long long v440 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v440 + 1))
          {
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v439, (uint64_t)v423);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            uint64_t v343 = swift_getAssociatedTypeWitness();
            uint64_t v344 = v377;
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v439);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v343 - 8) + 56))(v344, 0, 1, v343);
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v439, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t v345 = swift_getAssociatedTypeWitness();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v345 - 8) + 56))(v377, 1, 1, v345);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v346 = (uint64_t)v416;
          uint64_t v348 = v383;
          uint64_t v347 = v384;
          uint64_t v349 = v372;
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            uint64_t v350 = v373;
            *uint64_t v373 = v347;
            v350[1] = v309;
            v350[2] = (uint64_t)v348;
            v350[3] = v349;
            v350[4] = v346;
            v350[5] = v282;
            v350[6] = v287;
            v350[7] = v310;
            return result;
          }
          goto LABEL_403;
        }
LABEL_402:
        __break(1u);
LABEL_403:
        __break(1u);
LABEL_404:
        __break(1u);
LABEL_405:
        __break(1u);
LABEL_406:
        __break(1u);
LABEL_407:
        __break(1u);
        goto LABEL_408;
      }
    }
LABEL_310:
    outlined release of Locale((uint64_t)v468);
    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v504);
    uint64_t v310 = v280;
    uint64_t v311 = v393;
    goto LABEL_311;
  }
  uint64_t v184 = *(unsigned __int8 *)(v179 + 18);
  if (*(unsigned char *)(v179 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v185 = v183;
    uint64_t v186 = v179;
    while (1)
    {
      uint64_t v189 = *(unsigned __int16 *)(v186 + 16);
      if (!*(_WORD *)(v186 + 16)) {
        goto LABEL_175;
      }
      uint64_t v190 = *(void *)(v186 + 40);
      BOOL v42 = __OFSUB__(v185, v190);
      uint64_t v191 = v185 - v190;
      if (v42) {
        goto LABEL_379;
      }
      if (__OFADD__(v191, 1)) {
        goto LABEL_380;
      }
      if (v191 + 1 < 1)
      {
        uint64_t v189 = 0;
      }
      else
      {
        if (v189 == 1)
        {
          uint64_t v185 = v191;
LABEL_175:
          if (v185) {
            goto LABEL_376;
          }
          goto LABEL_176;
        }
        uint64_t v192 = (uint64_t *)(v186 + 64);
        uint64_t v193 = 1;
        while (1)
        {
          uint64_t v194 = *v192;
          v192 += 3;
          uint64_t v185 = v191 - v194;
          if (__OFSUB__(v191, v194)) {
            goto LABEL_372;
          }
          if (__OFADD__(v185, 1)) {
            goto LABEL_373;
          }
          if (v185 + 1 < 1) {
            break;
          }
          ++v193;
          uint64_t v191 = v185;
          if (v189 == v193) {
            goto LABEL_175;
          }
        }
        uint64_t v189 = v193;
        uint64_t v185 = v191;
      }
LABEL_176:
      char v187 = (4 * *(unsigned char *)(v186 + 18) + 8) & 0x3C;
      uint64_t v184 = ((-15 << v187) - 1) & v184 | (v189 << v187);
      uint64_t v188 = *(void *)(v186 + 24 + 24 * v189);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v186 = v188;
      if (!*(unsigned char *)(v188 + 18)) {
        goto LABEL_193;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v185 = v183;
  uint64_t v188 = v179;
LABEL_193:
  uint64_t v199 = *(unsigned __int16 *)(v188 + 16);
  if (!*(_WORD *)(v188 + 16))
  {
    uint64_t v197 = v188;
    goto LABEL_206;
  }
  uint64_t v200 = *(void *)(v188 + 24);
  BOOL v42 = __OFSUB__(v185, v200);
  uint64_t v201 = v185 - v200;
  if (v42)
  {
LABEL_421:
    __break(1u);
    goto LABEL_422;
  }
  if (!__OFADD__(v201, 1))
  {
    uint64_t v197 = v188;
    if (v201 + 1 < 1)
    {
      uint64_t v199 = 0;
    }
    else if (v199 == 1)
    {
      uint64_t v185 = v201;
LABEL_206:
      if (v185)
      {
LABEL_418:
        __break(1u);
        goto LABEL_419;
      }
    }
    else
    {
      uint64_t v202 = (uint64_t *)(v188 + 48);
      uint64_t v203 = 1;
      while (1)
      {
        uint64_t v204 = *v202;
        v202 += 3;
        uint64_t v185 = v201 - v204;
        if (__OFSUB__(v201, v204)) {
          goto LABEL_406;
        }
        if (__OFADD__(v185, 1)) {
          goto LABEL_407;
        }
        if (v185 + 1 < 1) {
          break;
        }
        ++v203;
        uint64_t v201 = v185;
        if (v199 == v203) {
          goto LABEL_206;
        }
      }
      uint64_t v199 = v203;
      uint64_t v185 = v201;
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v196 = v184 & 0xFFFFFFFFFFFFF0FFLL | (v199 << 8);
    uint64_t v28 = v401;
LABEL_191:
    swift_unknownObjectRetain();
    uint64_t v198 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v402, v196, v197, v179, (uint64_t)v416);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_209;
  }
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
LABEL_427:
  __break(1u);
LABEL_428:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice4.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(void *a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  long long v6 = malloc(0x68uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *long long v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  v6[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[9] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[10] = v8;
  long long v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[11] = v9;
  long long v10 = AttributedString.Runs.AttributesSlice4.subscript.read(v6 + 5, a2, a3);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v6[12] = v10;
  uint64_t v16 = *v15;
  uint64_t v30 = v15[1];
  long long v17 = (_OWORD *)v15[2];
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v9, v12, v18);
  uint64_t v19 = &v9[TupleTypeMetadata[12]];
  uint64_t v20 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v19, v14, v20);
  uint64_t v21 = &v9[TupleTypeMetadata[16]];
  uint64_t v22 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v16, v22);
  long long v23 = &v9[TupleTypeMetadata[20]];
  uint64_t v24 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v30, v24);
  uint64_t v25 = &v9[TupleTypeMetadata[24]];
  long long v26 = v17[1];
  long long v27 = v17[2];
  long long v28 = v17[3];
  *(_OWORD *)uint64_t v25 = *v17;
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v27;
  *((_OWORD *)v25 + 3) = v28;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 40;
  (*(void (**)(void, void))(*(void *)(*a1 + 80) + 8))(*(void *)(*a1 + 88), *(void *)(*a1 + 72));
  uint64_t v5 = *(void **)(v3 + 88);
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, a2);
  free(v5);

  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice4.subscript.read(void *a1, uint64_t *a2, void *a3))(uint64_t a1)
{
  long long v6 = malloc(0x58uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *long long v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  v6[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[8] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[9] = v8;
  long long v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[10] = v9;
  uint64_t v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  uint64_t v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  uint64_t v12 = (uint64_t)&v9[TupleTypeMetadata[20]];
  uint64_t v13 = (uint64_t *)&v9[TupleTypeMetadata[24]];
  AttributedString.Runs.AttributesSlice4.subscript.getter((uint64_t)v9, v10, v11, v12, v13, a2, a3);
  v6[5] = v11;
  v6[6] = v12;
  v6[7] = v13;
  return AttributedString.Runs.AttributesSlice4.subscript.read;
}

void AttributedString.Runs.AttributesSlice4.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 80);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 72) + 8))(v2, *(void *)(*(void *)a1 + 64));
  free(v2);

  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836F0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  swift_getWitnessTable();

  JUMPOUT(0x185301E20);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice4.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice4.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v15 = *a1;
  uint64_t v16 = *a2;
  uint64_t v17 = *a3;
  long long v18 = *(_OWORD *)(v9 + 176);
  v25[10] = *(_OWORD *)(v9 + 160);
  v25[11] = v18;
  uint64_t v26 = *(void *)(v9 + 192);
  long long v19 = *(_OWORD *)(v9 + 112);
  v25[6] = *(_OWORD *)(v9 + 96);
  v25[7] = v19;
  long long v20 = *(_OWORD *)(v9 + 144);
  v25[8] = *(_OWORD *)(v9 + 128);
  v25[9] = v20;
  long long v21 = *(_OWORD *)(v9 + 48);
  uint64_t v25[2] = *(_OWORD *)(v9 + 32);
  v25[3] = v21;
  long long v22 = *(_OWORD *)(v9 + 80);
  v25[4] = *(_OWORD *)(v9 + 64);
  v25[5] = v22;
  long long v23 = *(_OWORD *)(v9 + 16);
  v25[0] = *(_OWORD *)v9;
  v25[1] = v23;
  outlined retain of AttributedString.Runs((uint64_t)v25);
  *(void *)&double result = AttributedString.Runs.AttributesSlice4.init(runs:)(v9, *(void *)(v15 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v16 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v17 + *MEMORY[0x1E4FBC5F0] + 8), a4, a5, a6, a8, a7).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice5.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18210C6A0;
  *(void *)(v18 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a2, a6);
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a3, a7);
  *(void *)(v18 + 56) = v20;
  *(void *)(v18 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a4, a9);
  *(void *)(v18 + 72) = v21;
  uint64_t v36 = v18;
  *(void *)(v18 + 80) = (*(uint64_t (**)(uint64_t))(a10 + 24))(a5);
  *(void *)(v18 + 88) = v22;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v45, a2, a6);
  uint64_t v37 = v45[1];
  uint64_t v38 = v45[0];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a7 + 32))(v44, a3, a7);
  uint64_t v23 = v44[0];
  uint64_t v24 = v44[1];
  (*(void (**)(void *__return_ptr, uint64_t))(a9 + 32))(v43, a4);
  uint64_t v26 = v43[0];
  uint64_t v25 = v43[1];
  (*(void (**)(void *__return_ptr, uint64_t))(a10 + 32))(v42, a5);
  uint64_t v27 = v42[0];
  uint64_t v28 = v42[1];
  (*(void (**)(uint64_t *__return_ptr))(a11 + 32))(v41);
  uint64_t v40 = specialized RangeReplaceableCollection.init(_contents:_:_:_:_:)(v38, v37, v23, v24, v26, v25, v27, v28, v41[0], v41[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v27, v28);
  outlined consume of AttributedString.AttributeRunBoundaries?(v26, v25);
  outlined consume of AttributedString.AttributeRunBoundaries?(v23, v24);
  outlined consume of AttributedString.AttributeRunBoundaries?(v38, v37);
  long long v29 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v29;
  uint64_t v30 = *(void *)(a1 + 192);
  long long v31 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v31;
  long long v32 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v32;
  long long v33 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v33;
  long long v34 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v34;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(void *)(a8 + 192) = v30;
  *(void *)(a8 + 200) = v36;
  *(void *)(a8 + 208) = v40;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice5.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, void *a8)
{
  uint64_t v406 = a8;
  uint64_t v377 = a6;
  uint64_t v378 = a1;
  uint64_t v381 = a4;
  uint64_t v382 = a5;
  uint64_t v379 = a2;
  uint64_t v380 = a3;
  uint64_t v409 = *a7;
  long long v411 = (long long *)a7[1];
  uint64_t v9 = a7[3];
  uint64_t v413 = a7[2];
  long long v10 = *v8;
  long long v11 = v8[1];
  long long v12 = v8[2];
  v510[3] = v8[3];
  v510[2] = v12;
  v510[0] = v10;
  v510[1] = v11;
  long long v13 = v8[4];
  long long v14 = v8[5];
  long long v15 = v8[6];
  long long v514 = v8[7];
  long long v513 = v15;
  long long v511 = v13;
  long long v512 = v14;
  long long v16 = v8[8];
  long long v17 = v8[9];
  long long v18 = v8[10];
  long long v19 = v8[11];
  uint64_t v20 = *((void *)v8 + 24);
  uint64_t v410 = *((void *)v8 + 25);
  uint64_t v519 = v20;
  long long v518 = v19;
  long long v517 = v18;
  long long v515 = v16;
  long long v516 = v17;
  uint64_t v412 = *((void *)v8 + 26);
  uint64_t v21 = (void *)*((void *)&v16 + 1);
  long long v22 = v17;
  long long v23 = v18;
  long long v24 = v19;
  uint64_t v25 = v20;
  outlined retain of AttributedString.Runs((uint64_t)v510);
  uint64_t v414 = v9;
  uint64_t v415 = (void *)*((void *)&v22 + 1);
  uint64_t v407 = v21;
  uint64_t v408 = v22;
  uint64_t v416 = (void *)v23;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_396;
  }
  uint64_t v394 = *((void *)&v23 + 1);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_397:
    __break(1u);
    goto LABEL_398;
  }
  uint64_t v418 = *(void *)(v410 + 16);
  if (!v418)
  {
LABEL_398:
    __break(1u);
    goto LABEL_399;
  }
  uint64_t v391 = v25;
  uint64_t v392 = *((void *)&v24 + 1);
  uint64_t v393 = v24;
  uint64_t v27 = *(void *)&v510[0];
  uint64_t v28 = *(void *)(*(void *)&v510[0] + 64);
  uint64_t v29 = *(void *)(*(void *)&v510[0] + 72);
  uint64_t v30 = *(void *)(*(void *)&v510[0] + 80);
  long long v404 = *(void **)(*(void *)&v510[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v31 = v409;
  long long v32 = v411;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v28) {
    uint64_t v33 = v30;
  }
  else {
    uint64_t v33 = 0;
  }
  if (result < 0 || (uint64_t v34 = result, v33 < result))
  {
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
    goto LABEL_401;
  }
  uint64_t v417 = v27;
  if (!v28 || result >= v30 || !*(_WORD *)(v28 + 16))
  {
    unint64_t v46 = swift_unknownObjectRetain();
    unint64_t v396 = specialized Rope._endPath.getter(v46);
    swift_unknownObjectRelease();
    uint64_t v35 = 0;
    uint64_t v397 = 0;
    if (!v28) {
      goto LABEL_132;
    }
    goto LABEL_31;
  }
  long long v422 = (unsigned char *)v29;
  uint64_t v27 = *(unsigned __int8 *)(v28 + 18);
  if (*(unsigned char *)(v28 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v35 = v34;
    uint64_t v36 = v28;
    while (1)
    {
      uint64_t v39 = *(unsigned __int16 *)(v36 + 16);
      if (!*(_WORD *)(v36 + 16)) {
        break;
      }
      uint64_t v40 = *(void *)(v36 + 40);
      BOOL v41 = __OFSUB__(v35, v40);
      uint64_t v42 = v35 - v40;
      if (v41) {
        goto LABEL_388;
      }
      if (__OFADD__(v42, 1)) {
        goto LABEL_389;
      }
      if (v42 + 1 < 1)
      {
        uint64_t v39 = 0;
        goto LABEL_16;
      }
      if (v39 == 1)
      {
        uint64_t v35 = v42;
        break;
      }
      uint64_t v43 = (uint64_t *)(v36 + 64);
      uint64_t v44 = 1;
      while (1)
      {
        uint64_t v45 = *v43;
        v43 += 3;
        uint64_t v35 = v42 - v45;
        if (__OFSUB__(v42, v45)) {
          goto LABEL_381;
        }
        if (__OFADD__(v35, 1))
        {
LABEL_382:
          __break(1u);
LABEL_383:
          __break(1u);
LABEL_384:
          __break(1u);
LABEL_385:
          __break(1u);
          goto LABEL_386;
        }
        if (v35 + 1 < 1) {
          break;
        }
        ++v44;
        uint64_t v42 = v35;
        if (v39 == v44) {
          goto LABEL_15;
        }
      }
      uint64_t v39 = v44;
      uint64_t v35 = v42;
LABEL_16:
      char v37 = (4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C;
      uint64_t v27 = ((-15 << v37) - 1) & v27 | (v39 << v37);
      uint64_t v38 = *(void *)(v36 + 24 + 24 * v39);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v36 = v38;
      if (!*(unsigned char *)(v38 + 18)) {
        goto LABEL_95;
      }
    }
LABEL_15:
    if (!v35) {
      goto LABEL_16;
    }
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
    goto LABEL_395;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v35 = v34;
  uint64_t v38 = v28;
LABEL_95:
  uint64_t v112 = *(unsigned __int16 *)(v38 + 16);
  if (!*(_WORD *)(v38 + 16))
  {
    uint64_t v31 = v409;
LABEL_130:
    if (!v35) {
      goto LABEL_131;
    }
LABEL_427:
    __break(1u);
    goto LABEL_428;
  }
  uint64_t v113 = *(void *)(v38 + 24);
  BOOL v41 = __OFSUB__(v35, v113);
  uint64_t v114 = v35 - v113;
  uint64_t v31 = v409;
  if (v41)
  {
LABEL_429:
    __break(1u);
    goto LABEL_430;
  }
  if (__OFADD__(v114, 1))
  {
LABEL_430:
    __break(1u);
    goto LABEL_431;
  }
  if (v114 + 1 < 1) {
    goto LABEL_124;
  }
  if (v112 == 1)
  {
    uint64_t v35 = v114;
    goto LABEL_130;
  }
  uint64_t v154 = (uint64_t *)(v38 + 48);
  uint64_t v155 = 1;
  while (1)
  {
    uint64_t v156 = *v154;
    v154 += 3;
    uint64_t v35 = v114 - v156;
    if (__OFSUB__(v114, v156)) {
      goto LABEL_414;
    }
    if (__OFADD__(v35, 1)) {
      goto LABEL_415;
    }
    if (v35 + 1 < 1) {
      break;
    }
    ++v155;
    uint64_t v114 = v35;
    if (v112 == v155) {
      goto LABEL_130;
    }
  }
  uint64_t v112 = v155;
  uint64_t v35 = v114;
LABEL_131:
  while (2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v396 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v112 << 8);
    long long v32 = v411;
    uint64_t v27 = v417;
    uint64_t v29 = (uint64_t)v422;
    uint64_t v397 = v38;
    if (v28)
    {
LABEL_31:
      swift_unknownObjectRetain();
      uint64_t v419 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v404, v396, v397, v28, v29);
      swift_unknownObjectRelease_n();
      unint64_t v47 = (void *)(v34 - v35);
      if (__OFSUB__(v34, v35)) {
        goto LABEL_134;
      }
    }
    else
    {
LABEL_132:
      uint64_t v419 = 0;
      unint64_t v47 = (void *)(v34 - v35);
      if (__OFSUB__(v34, v35))
      {
LABEL_134:
        __break(1u);
LABEL_135:
        uint64_t v147 = (uint64_t)v422;
        goto LABEL_136;
      }
    }
    long long v48 = *(_OWORD *)(v27 + 16);
    long long v49 = *(_OWORD *)(v27 + 32);
    long long v497 = *(_OWORD *)(v27 + 48);
    v496[1] = v49;
    v496[0] = v48;
    long long v50 = *(_OWORD *)(v27 + 16);
    long long v51 = *(_OWORD *)(v27 + 32);
    v498[2] = v497;
    v498[1] = v51;
    v498[0] = v50;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v498, (uint64_t)v499);
    outlined retain of Locale((uint64_t)v499);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v496);
    if (__OFSUB__(0, v35)) {
      goto LABEL_400;
    }
    unint64_t v398 = (long long *)(v27 + 16);
    uint64_t v52 = v413;
    uint64_t v53 = v414;
    uint64_t v54 = BigString.UTF8View.index(_:offsetBy:)();
    long long v56 = v55;
    uint64_t v58 = v57;
    uint64_t v400 = v59;
    uint64_t result = outlined release of Locale((uint64_t)&v450);
    uint64_t v388 = v31;
    uint64_t v389 = (uint64_t)v32;
    uint64_t v387 = v52;
    uint64_t v399 = *((void *)&v511 + 1);
    if (v419 == *((void *)&v511 + 1)) {
      goto LABEL_163;
    }
    if (v404 != *(void **)(v27 + 88)) {
      goto LABEL_418;
    }
    uint64_t v389 = v58;
    if (v397)
    {
      uint64_t v60 = v397 + 24 * ((v396 >> ((4 * *(unsigned char *)(v397 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v62 = *(void *)(v60 + 32);
      uint64_t v61 = *(void *)(v60 + 40);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v63 = *(void *)(v27 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v396, v63);
      uint64_t v62 = v64;
      uint64_t v61 = v65;
      uint64_t result = swift_unknownObjectRelease();
    }
    if (*((uint64_t *)&v510[0] + 1) >= v419)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v111 = v398;
      goto LABEL_105;
    }
    uint64_t v375 = v61;
    uint64_t v376 = v54;
    long long v420 = (long long *)v471;
    uint64_t v421 = v438;
    uint64_t v385 = v56;
    uint64_t v386 = (uint64_t *)(v410 + 40);
    unint64_t v66 = v396;
    uint64_t v67 = v397;
    uint64_t v395 = v62;
    uint64_t v374 = *((void *)&v510[0] + 1);
LABEL_40:
    uint64_t v390 = v47;
    uint64_t v68 = *(void *)(v27 + 64);
    uint64_t v69 = *(void **)(v27 + 88);
    uint64_t v430 = v404;
    uint64_t v431 = v66;
    uint64_t v432 = v67;
    if (v404 != v69) {
      goto LABEL_421;
    }
    unint64_t v70 = v66;
    if (v68)
    {
      unint64_t v71 = *(unsigned __int8 *)(v68 + 18);
      uint64_t v72 = v67;
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v67 = v72;
      if (v70 <= v71) {
        goto LABEL_422;
      }
    }
    else if (!v66)
    {
      goto LABEL_422;
    }
    if (!v67 || (char v73 = (4 * *(unsigned char *)(v67 + 18) + 8) & 0x3C, ((v70 >> v73) & 0xF) == 0))
    {
      int v75 = *(unsigned __int8 *)(v68 + 18);
      char v76 = (4 * v75 + 8) & 0x3C;
      uint64_t v77 = (v70 >> v76) & 0xF;
      *(void *)&long long v469 = v77;
      if (v75)
      {
        swift_unknownObjectRetain();
        char v78 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v68 + 16, v68 + 24, (uint64_t *)&v469, (uint64_t)&v430, v75);
        uint64_t result = swift_unknownObjectRelease();
        if ((v78 & 1) == 0) {
          goto LABEL_426;
        }
        uint64_t v27 = v417;
        if (v430 != v404) {
          goto LABEL_423;
        }
        uint64_t v67 = v432;
        unint64_t v74 = v431;
        if (v432) {
          goto LABEL_52;
        }
      }
      else
      {
        if (!v77) {
          goto LABEL_426;
        }
        unint64_t v74 = ((v77 - 1) << v76) | ((-15 << v76) - 1) & v70;
        uint64_t v431 = v74;
        uint64_t v432 = v68;
        uint64_t v67 = v68;
        if (v68) {
          goto LABEL_52;
        }
      }
      swift_unknownObjectRetain();
      unint64_t v80 = specialized Rope._Node.subscript.getter(v74, v68);
      swift_unknownObjectRelease();
      uint64_t v387 = 0;
      char v81 = 1;
      goto LABEL_56;
    }
    unint64_t v74 = ((((v70 >> v73) & 0xF) - 1) << v73) | ((-15 << v73) - 1) & v70;
    uint64_t v431 = v74;
LABEL_52:
    unsigned int v79 = (v74 >> ((4 * *(unsigned char *)(v67 + 18) + 8) & 0x3C)) & 0xF;
    uint64_t v387 = v67;
    unint64_t v80 = *(void *)(v67 + 24 * v79 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v81 = 0;
LABEL_56:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFSUB__(v390, v80)) {
      goto LABEL_424;
    }
    if (v404 != *(void **)(v27 + 88)) {
      goto LABEL_425;
    }
    uint64_t v383 = (void *)((char *)v390 - v80);
    unint64_t v384 = v74;
    if (v81)
    {
      uint64_t v82 = *(void *)(v27 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v74, v82);
      uint64_t v388 = v83;
      uint64_t v85 = v84;
      swift_unknownObjectRelease();
    }
    else
    {
      unint64_t v86 = v387 + 24 * ((v74 >> ((4 * *(unsigned char *)(v387 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v85 = *(void *)(v86 + 32);
      uint64_t v87 = *(void *)(v86 + 40);
      swift_bridgeObjectRetain();
      uint64_t v388 = v87;
      swift_bridgeObjectRetain();
    }
    --v419;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v88 = 0;
    unint64_t v89 = v386;
    long long v422 = (unsigned char *)v85;
    while (1)
    {
      uint64_t v91 = v88 + 1;
      if (__OFADD__(v88, 1)) {
        goto LABEL_385;
      }
      uint64_t v92 = *(v89 - 1);
      uint64_t v93 = *v89;
      if (*(void *)(v62 + 16))
      {
        swift_bridgeObjectRetain_n();
        unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v93);
        if (v95)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v62 + 56) + 72 * v94, (uint64_t)&v461);
        }
        else
        {
          uint64_t v465 = 0;
          long long v464 = 0u;
          long long v463 = 0u;
          long long v462 = 0u;
          long long v461 = 0u;
        }
        swift_bridgeObjectRelease();
        uint64_t v85 = (uint64_t)v422;
        if (!*((void *)v422 + 2))
        {
LABEL_71:
          uint64_t v459 = 0;
          long long v458 = 0u;
          long long v457 = 0u;
          long long v456 = 0u;
          long long v455 = 0u;
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v465 = 0;
        long long v464 = 0u;
        long long v463 = 0u;
        long long v462 = 0u;
        long long v461 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v85 + 16)) {
          goto LABEL_71;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v93);
      if (v97)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v85 + 56) + 72 * v96, (uint64_t)&v455);
      }
      else
      {
        uint64_t v459 = 0;
        long long v458 = 0u;
        long long v457 = 0u;
        long long v456 = 0u;
        long long v455 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_78:
      swift_bridgeObjectRelease();
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v461, (uint64_t)&v430, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v455, (uint64_t)v421, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v433)
      {
        if (v439) {
          goto LABEL_103;
        }
        outlined destroy of Any?((uint64_t)&v430, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v455, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?((uint64_t)&v461, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_65;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v430, (uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v439) {
        break;
      }
      long long v98 = *((_OWORD *)v421 + 3);
      long long v442 = *((_OWORD *)v421 + 2);
      long long v443 = v98;
      uint64_t v444 = *((void *)v421 + 8);
      long long v99 = *((_OWORD *)v421 + 1);
      long long v440 = *(_OWORD *)v421;
      long long v441 = v99;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v445, (uint64_t)v428);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v440, (uint64_t)&v423);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v428, (uint64_t)&v469, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v423, (uint64_t)v420, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (!v470)
      {
        if (!v472)
        {
          char v90 = 1;
          goto LABEL_64;
        }
        outlined destroy of Any?((uint64_t)v420, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_63:
        char v90 = 0;
        goto LABEL_64;
      }
      if (!v472)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v469);
        goto LABEL_63;
      }
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v469, (uint64_t)v485);
      outlined init with take of any PredicateExpression<Self.Output == B1>(v420, (uint64_t)v484);
      uint64_t v100 = v486;
      unint64_t v402 = v487;
      uint64_t v401 = __swift_project_boxed_opaque_existential_1(v485, v486);
      uint64_t v405 = v372;
      uint64_t v101 = *(void *)(v100 - 8);
      MEMORY[0x1F4188790](v401);
      long long v103 = (char *)v372 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v484, (uint64_t)v481);
      uint64_t v104 = type metadata accessor for Optional();
      uint64_t v403 = v372;
      uint64_t v105 = *(void *)(v104 - 8);
      MEMORY[0x1F4188790](v104);
      uint64_t v107 = (char *)v372 - v106;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      int v108 = swift_dynamicCast();
      uint64_t v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56);
      if (v108)
      {
        v109(v107, 0, 1, v100);
        (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v103, v107, v100);
        char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
      }
      else
      {
        v109(v107, 1, 1, v100);
        (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v104);
        char v90 = 0;
      }
      uint64_t v62 = v395;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v484);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v485);
      uint64_t v27 = v417;
LABEL_64:
      outlined destroy of Any?((uint64_t)&v423, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v428, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v440);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v445);
      outlined destroy of Any?((uint64_t)&v430, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v455, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v461, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v90 & 1) == 0) {
        goto LABEL_104;
      }
LABEL_65:
      v89 += 2;
      ++v88;
      uint64_t v85 = (uint64_t)v422;
      if (v91 == v418)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v110 = v383;
        unint64_t v66 = v384;
        unint64_t v47 = v383;
        uint64_t v67 = v387;
        if (v374 >= v419)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v47 = v110;
          uint64_t v111 = v398;
          goto LABEL_105;
        }
        goto LABEL_40;
      }
    }
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v445);
LABEL_103:
    outlined destroy of Any?((uint64_t)&v430, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
    outlined destroy of Any?((uint64_t)&v455, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v461, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_104:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v111 = v398;
    unint64_t v47 = v390;
LABEL_105:
    long long v115 = *v111;
    long long v116 = v111[1];
    long long v495 = v111[2];
    v494[1] = v116;
    v494[0] = v115;
    long long v117 = *v111;
    long long v118 = v111[1];
    v500[2] = v495;
    v500[1] = v118;
    v500[0] = v117;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v500, (uint64_t)v501);
    outlined retain of Locale((uint64_t)v501);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v494);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v47, result)) {
      goto LABEL_419;
    }
    uint64_t v119 = BigString.UTF8View.index(_:offsetBy:)();
    long long v120 = v111;
    uint64_t v122 = v121;
    uint64_t v124 = v123;
    uint64_t v126 = v125;
    outlined release of Locale((uint64_t)&v451);
    uint64_t v127 = v407;
    uint64_t v128 = v408;
    uint64_t v130 = v415;
    uint64_t v129 = v416;
    char v131 = static BigString.Index.< infix(_:_:)();
    if (v131) {
      uint64_t v127 = (void *)v119;
    }
    else {
      uint64_t v122 = v128;
    }
    if ((v131 & 1) == 0)
    {
      uint64_t v124 = v130;
      uint64_t v126 = (uint64_t)v129;
    }
    long long v132 = v120[1];
    long long v491 = *v120;
    long long v492 = v132;
    long long v493 = v120[2];
    BigString.unicodeScalars.getter();
    uint64_t v133 = (uint64_t)v127;
    uint64_t v134 = BigString.UnicodeScalarView.index(after:)();
    uint64_t v136 = v135;
    uint64_t v29 = v137;
    uint64_t v35 = v138;
    outlined release of Locale((uint64_t)&v452);
    long long v139 = *v120;
    long long v140 = v120[1];
    long long v483 = v120[2];
    v482[1] = v140;
    v482[0] = v139;
    long long v141 = *v120;
    long long v142 = v120[1];
    v502[2] = v483;
    v502[1] = v142;
    v502[0] = v141;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v502, (uint64_t)v503);
    outlined retain of Locale((uint64_t)v503);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_420;
    }
    v485[0] = v133;
    v485[1] = v122;
    v485[2] = v124;
    uint64_t v486 = v126;
    unint64_t v487 = v134;
    v488 = v136;
    uint64_t v489 = v29;
    uint64_t v490 = v35;
    uint64_t v143 = v122;
    uint64_t v34 = *(void *)(v412 + 16);
    uint64_t v388 = v133;
    uint64_t v389 = v143;
    uint64_t v387 = (uint64_t)v124;
    long long v422 = (unsigned char *)v126;
    if (!v34)
    {
      uint64_t v27 = v417;
      goto LABEL_162;
    }
    long long v420 = v136;
    uint64_t v421 = (unsigned char *)v134;
    char v144 = static BigString.Index.== infix(_:_:)();
    uint64_t v27 = v417;
    if (v144) {
      goto LABEL_162;
    }
    swift_bridgeObjectRetain();
    uint64_t v145 = 40;
    uint64_t v146 = v34;
LABEL_115:
    if (!*(void *)(v412 + v145))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.startIndex.getter();
      long long v32 = v420;
      uint64_t v31 = (uint64_t)v421;
      if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
        goto LABEL_135;
      }
      BigString.utf8.getter();
      uint64_t v148 = BigString.UTF8View.index(before:)();
      uint64_t v150 = v149;
      uint64_t v419 = v151;
      uint64_t v38 = v152;
      outlined release of Locale((uint64_t)&v453);
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      uint64_t v153 = v419;
      outlined release of Locale((uint64_t)&v454);
      uint64_t v405 = (void *)v148;
      uint64_t v403 = v150;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      uint64_t v147 = (uint64_t)v422;
      if (result) {
        goto LABEL_436;
      }
      v484[0] = v405;
      v484[1] = v403;
      _OWORD v484[2] = v153;
      long long v484[3] = v38;
      v484[4] = v31;
      v484[5] = v32;
      v484[6] = v29;
      v484[7] = v35;
      specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)v484, (uint64_t *)&v430);
      outlined release of Locale((uint64_t)&v455);
      uint64_t v28 = v433;
      uint64_t v27 = v417;
      if (v433 == 2) {
        goto LABEL_136;
      }
      uint64_t v388 = (uint64_t)v430;
      uint64_t v389 = v431;
      uint64_t v387 = v432;
      uint64_t v147 = v433;
      if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
        goto LABEL_136;
      }
      __break(1u);
LABEL_124:
      uint64_t v112 = 0;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  v145 += 16;
  if (--v146) {
    goto LABEL_115;
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = (uint64_t)v421;
  uint64_t v147 = (uint64_t)v422;
  long long v32 = v420;
LABEL_136:
  v481[0] = v388;
  v481[1] = v389;
  v481[2] = v387;
  v481[3] = v147;
  v481[4] = v31;
  v481[5] = v32;
  v481[6] = v29;
  v481[7] = v35;
  uint64_t v157 = *(void *)(v412 + 16);
  long long v422 = (unsigned char *)v147;
  if (!v157) {
    goto LABEL_162;
  }
  uint64_t v158 = 40;
  while (!*(void *)(v412 + v158))
  {
    v158 += 16;
    if (!--v157) {
      goto LABEL_162;
    }
  }
  uint64_t v159 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v160 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    unint64_t v161 = *v159;
    if (*v159)
    {
      uint64_t v162 = *(v159 - 1);
      if ((v161 & 0x2000000000000000) != 0 ? HIBYTE(v161) & 0xF : v162 & 0xFFFFFFFFFFFFLL)
      {
        if ((v161 & 0x1000000000000000) != 0)
        {
          int v164 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v161 & 0x2000000000000000) != 0)
          {
            uint64_t v430 = (void *)*(v159 - 1);
            uint64_t v431 = v161 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v162 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }
          int v164 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v160 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v160 + 2) + 1, 1, v160);
        }
        unint64_t v166 = *((void *)v160 + 2);
        unint64_t v165 = *((void *)v160 + 3);
        if (v166 >= v165 >> 1) {
          uint64_t v160 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v165 > 1), v166 + 1, 1, v160);
        }
        *((void *)v160 + 2) = v166 + 1;
        *(_DWORD *)&v160[4 * v166 + 32] = v164;
      }
    }
    v159 += 2;
    --v34;
  }
  while (v34);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v460);
  uint64_t v167 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v160);
  uint64_t v169 = v168;
  uint64_t v171 = v170;
  uint64_t v173 = v172;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v461);
  uint64_t v27 = v417;
  if (v173 == 2)
  {
LABEL_162:
    outlined release of Locale((uint64_t)v482);
    uint64_t v53 = (uint64_t)v422;
LABEL_163:
    outlined release of AttributedString.Runs((uint64_t)v510);
    uint64_t v376 = v53;
LABEL_164:
    outlined retain of AttributedString.Runs((uint64_t)v510);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
LABEL_401:
      __break(1u);
      goto LABEL_402;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
LABEL_402:
      __break(1u);
LABEL_403:
      __break(1u);
      goto LABEL_404;
    }
    uint64_t v174 = *(void *)(v27 + 64);
    long long v422 = *(unsigned char **)(v27 + 72);
    uint64_t v176 = *(void *)(v27 + 80);
    uint64_t v175 = *(void *)(v27 + 88);
    swift_unknownObjectRetain();
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (v174) {
      uint64_t v177 = v176;
    }
    else {
      uint64_t v177 = 0;
    }
    if (result < 0) {
      goto LABEL_403;
    }
    uint64_t v178 = result;
    if (v177 < result) {
      goto LABEL_403;
    }
    uint64_t v405 = (void *)v175;
    if (v174 && result < v176 && *(_WORD *)(v174 + 16))
    {
      uint64_t v179 = *(unsigned __int8 *)(v174 + 18);
      if (*(unsigned char *)(v174 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v180 = v178;
        uint64_t v181 = v174;
        while (1)
        {
          uint64_t v184 = *(unsigned __int16 *)(v181 + 16);
          if (!*(_WORD *)(v181 + 16)) {
            goto LABEL_177;
          }
          uint64_t v185 = *(void *)(v181 + 40);
          BOOL v41 = __OFSUB__(v180, v185);
          uint64_t v186 = v180 - v185;
          if (v41) {
            goto LABEL_390;
          }
          if (__OFADD__(v186, 1)) {
            goto LABEL_391;
          }
          if (v186 + 1 < 1)
          {
            uint64_t v184 = 0;
          }
          else
          {
            if (v184 == 1)
            {
              uint64_t v180 = v186;
LABEL_177:
              if (v180) {
                goto LABEL_387;
              }
              goto LABEL_178;
            }
            char v187 = (uint64_t *)(v181 + 64);
            uint64_t v188 = 1;
            while (1)
            {
              uint64_t v189 = *v187;
              v187 += 3;
              uint64_t v180 = v186 - v189;
              if (__OFSUB__(v186, v189)) {
                goto LABEL_383;
              }
              if (__OFADD__(v180, 1)) {
                goto LABEL_384;
              }
              if (v180 + 1 < 1) {
                break;
              }
              ++v188;
              uint64_t v186 = v180;
              if (v184 == v188) {
                goto LABEL_177;
              }
            }
            uint64_t v184 = v188;
            uint64_t v180 = v186;
          }
LABEL_178:
          char v182 = (4 * *(unsigned char *)(v181 + 18) + 8) & 0x3C;
          uint64_t v179 = ((-15 << v182) - 1) & v179 | (v184 << v182);
          uint64_t v183 = *(void *)(v181 + 24 + 24 * v184);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v181 = v183;
          if (!*(unsigned char *)(v183 + 18)) {
            goto LABEL_195;
          }
        }
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v180 = v178;
      uint64_t v183 = v174;
LABEL_195:
      uint64_t v194 = *(unsigned __int16 *)(v183 + 16);
      if (!*(_WORD *)(v183 + 16))
      {
        uint64_t v192 = v183;
        goto LABEL_208;
      }
      uint64_t v195 = *(void *)(v183 + 24);
      BOOL v41 = __OFSUB__(v180, v195);
      uint64_t v196 = v180 - v195;
      if (v41)
      {
LABEL_431:
        __break(1u);
LABEL_432:
        __break(1u);
LABEL_433:
        __break(1u);
LABEL_434:
        __break(1u);
LABEL_435:
        __break(1u);
LABEL_436:
        __break(1u);
        goto LABEL_437;
      }
      if (__OFADD__(v196, 1)) {
        goto LABEL_432;
      }
      uint64_t v192 = v183;
      if (v196 + 1 < 1)
      {
        uint64_t v194 = 0;
      }
      else if (v194 == 1)
      {
        uint64_t v180 = v196;
LABEL_208:
        if (v180)
        {
LABEL_428:
          __break(1u);
          goto LABEL_429;
        }
      }
      else
      {
        uint64_t v197 = (uint64_t *)(v183 + 48);
        uint64_t v198 = 1;
        while (1)
        {
          uint64_t v199 = *v197;
          v197 += 3;
          uint64_t v180 = v196 - v199;
          if (__OFSUB__(v196, v199)) {
            goto LABEL_416;
          }
          if (__OFADD__(v180, 1)) {
            goto LABEL_417;
          }
          if (v180 + 1 < 1) {
            break;
          }
          ++v198;
          uint64_t v196 = v180;
          if (v194 == v198) {
            goto LABEL_208;
          }
        }
        uint64_t v194 = v198;
        uint64_t v180 = v196;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v191 = v179 & 0xFFFFFFFFFFFFF0FFLL | (v194 << 8);
      uint64_t v27 = v417;
LABEL_193:
      swift_unknownObjectRetain();
      uint64_t v193 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v405, v191, v192, v174, (uint64_t)v422);
      uint64_t result = swift_unknownObjectRelease_n();
    }
    else
    {
      unint64_t v190 = swift_unknownObjectRetain();
      unint64_t v191 = specialized Rope._endPath.getter(v190);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v192 = 0;
      uint64_t v180 = 0;
      if (v174) {
        goto LABEL_193;
      }
      uint64_t v193 = 0;
    }
    uint64_t v403 = (void *)(v178 - v180);
    if (__OFSUB__(v178, v180))
    {
LABEL_404:
      __break(1u);
      goto LABEL_405;
    }
    long long v200 = *v398;
    long long v201 = v398[1];
    long long v480 = v398[2];
    v479[1] = v201;
    v479[0] = v200;
    long long v202 = *v398;
    long long v203 = v398[1];
    v504[2] = v480;
    v504[1] = v203;
    v504[0] = v202;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v504, (uint64_t)v505);
    outlined retain of Locale((uint64_t)v505);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v479);
    if (__OFSUB__(0, v180))
    {
LABEL_405:
      __break(1u);
      goto LABEL_406;
    }
    uint64_t v204 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v374 = v206;
    uint64_t v375 = v205;
    uint64_t v208 = v207;
    uint64_t result = outlined release of Locale((uint64_t)&v466);
    if (v193 >= v399)
    {
LABEL_406:
      __break(1u);
      goto LABEL_407;
    }
    if (v405 != *(void **)(v27 + 88))
    {
LABEL_407:
      __break(1u);
LABEL_408:
      __break(1u);
LABEL_409:
      __break(1u);
      goto LABEL_410;
    }
    v372[0] = v208;
    v372[1] = v204;
    uint64_t v209 = *(void *)(v27 + 64);
    uint64_t v210 = (void *)v192;
    if (v192)
    {
      unint64_t v211 = v192 + 24 * ((v191 >> ((4 * *(unsigned char *)(v192 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v212 = *(void *)(v211 + 40);
      uint64_t v421 = *(unsigned char **)(v211 + 32);
      swift_bridgeObjectRetain();
      uint64_t v373 = v212;
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v213 = (uint64_t)v405;
      uint64_t v214 = (uint64_t)v405;
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v191, v209);
      uint64_t v421 = (unsigned char *)v215;
      uint64_t v373 = v216;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v209 = *(void *)(v27 + 64);
      uint64_t v214 = *(void *)(v27 + 88);
      uint64_t v213 = (uint64_t)v405;
    }
    uint64_t v400 = v193 + 1;
    long long v422 = v438;
    uint64_t v430 = (void *)v213;
    uint64_t v431 = v191;
    long long v420 = (long long *)v471;
    uint64_t v386 = (uint64_t *)(v410 + 40);
    uint64_t v432 = (uint64_t)v210;
    uint64_t v217 = v418;
    while (2)
    {
      if (v213 != v214) {
        goto LABEL_392;
      }
      uint64_t v395 = v214;
      unint64_t v402 = v191;
      if (v210)
      {
        unint64_t v218 = v210[3 * ((v191 >> ((4 * *((unsigned char *)v210 + 18) + 8) & 0x3C)) & 0xF) + 3];
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v218 = specialized Rope._Node.subscript.getter(v191, v209);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v403, v218)) {
        goto LABEL_393;
      }
      uint64_t v385 = (void *)((char *)v403 + v218);
      if (v209)
      {
        unint64_t v219 = ((-15 << ((4 * *(unsigned char *)(v209 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v209 + 18) | ((unint64_t)*(unsigned __int16 *)(v209 + 16) << ((4 * *(unsigned char *)(v209 + 18) + 8) & 0x3C));
        uint64_t result = swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v219 = 0;
      }
      unint64_t v220 = v402;
      if (v402 >= v219) {
        goto LABEL_394;
      }
      uint64_t v401 = v210;
      if (v210)
      {
        char v221 = (4 * *((unsigned char *)v210 + 18) + 8) & 0x3C;
        unint64_t v222 = ((v402 >> v221) & 0xF) + 1;
        if (v222 < *((unsigned __int16 *)v210 + 8))
        {
          unint64_t v223 = (v222 << v221) | ((-15 << v221) - 1) & v402;
          uint64_t result = swift_unknownObjectRelease_n();
          goto LABEL_234;
        }
      }
      int v224 = *(unsigned __int8 *)(v209 + 18);
      char v225 = (4 * v224 + 8) & 0x3C;
      unint64_t v226 = (v402 >> v225) & 0xF;
      *(void *)&long long v469 = v226;
      if (v224)
      {
        swift_unknownObjectRetain();
        char v227 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v209 + 24, (uint64_t *)&v469, (uint64_t)&v430, v209, v224);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v210 = v401;
        if (v227)
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v223 = v431;
LABEL_234:
          uint64_t v228 = v432;
LABEL_235:
          uint64_t v229 = (uint64_t)v421;
LABEL_243:
          if (v400 != v399)
          {
            if (v430 != *(void **)(v27 + 88))
            {
LABEL_395:
              __break(1u);
LABEL_396:
              __break(1u);
              goto LABEL_397;
            }
            uint64_t v405 = v430;
            uint64_t v383 = (void *)v228;
            unint64_t v384 = v223;
            if (v228)
            {
              unint64_t v236 = v228 + 24 * ((v223 >> ((4 * *(unsigned char *)(v228 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v238 = *(void *)(v236 + 32);
              long long v237 = *(void **)(v236 + 40);
              swift_bridgeObjectRetain();
              uint64_t v390 = v237;
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v239 = *(void *)(v27 + 64);
              swift_unknownObjectRetain();
              specialized Rope._Node.subscript.getter(v223, v239);
              uint64_t v238 = v240;
              uint64_t v390 = v241;
              uint64_t v229 = (uint64_t)v421;
              swift_unknownObjectRelease();
            }
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v242 = 0;
            uint64_t v243 = v386;
            uint64_t v419 = v238;
LABEL_253:
            uint64_t v245 = v242 + 1;
            if (__OFADD__(v242, 1))
            {
              __break(1u);
LABEL_381:
              __break(1u);
              goto LABEL_382;
            }
            uint64_t v247 = *(v243 - 1);
            uint64_t v246 = *v243;
            if (*(void *)(v229 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v248 = specialized __RawDictionaryStorage.find<A>(_:)(v247, v246);
              if (v249)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v229 + 56) + 72 * v248, (uint64_t)&v445);
              }
              else
              {
                uint64_t v449 = 0;
                long long v447 = 0u;
                long long v448 = 0u;
                long long v445 = 0u;
                long long v446 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*(void *)(v238 + 16))
              {
LABEL_261:
                swift_bridgeObjectRetain();
                unint64_t v250 = specialized __RawDictionaryStorage.find<A>(_:)(v247, v246);
                if (v251)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v238 + 56) + 72 * v250, (uint64_t)&v440);
                }
                else
                {
                  uint64_t v444 = 0;
                  long long v442 = 0u;
                  long long v443 = 0u;
                  long long v440 = 0u;
                  long long v441 = 0u;
                }
                swift_bridgeObjectRelease();
                uint64_t v229 = (uint64_t)v421;
LABEL_265:
                swift_bridgeObjectRelease();
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v445, (uint64_t)&v430, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v440, (uint64_t)v422, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (v433)
                {
                  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v430, (uint64_t)v428, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  if (!v439) {
                    goto LABEL_281;
                  }
                  long long v252 = *((_OWORD *)v422 + 3);
                  long long v425 = *((_OWORD *)v422 + 2);
                  long long v426 = v252;
                  uint64_t v427 = *((void *)v422 + 8);
                  long long v253 = *((_OWORD *)v422 + 1);
                  long long v423 = *(_OWORD *)v422;
                  long long v424 = v253;
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v428, (uint64_t)v508);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v423, (uint64_t)v506);
                  outlined init with copy of (Hashable & Sendable)?((uint64_t)v508, (uint64_t)&v469, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  outlined init with copy of (Hashable & Sendable)?((uint64_t)v506, (uint64_t)v420, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  if (v470)
                  {
                    if (v472)
                    {
                      outlined init with take of any PredicateExpression<Self.Output == B1>(&v469, (uint64_t)&v476);
                      outlined init with take of any PredicateExpression<Self.Output == B1>(v420, (uint64_t)v474);
                      uint64_t v254 = *((void *)&v477 + 1);
                      uint64_t v408 = v478;
                      uint64_t v407 = __swift_project_boxed_opaque_existential_1(&v476, *((uint64_t *)&v477 + 1));
                      uint64_t v416 = v372;
                      uint64_t v255 = *(void *)(v254 - 8);
                      MEMORY[0x1F4188790](v407);
                      uint64_t v257 = (char *)v372 - ((v256 + 15) & 0xFFFFFFFFFFFFFFF0);
                      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v474, (uint64_t)v473);
                      uint64_t v258 = type metadata accessor for Optional();
                      uint64_t v415 = v372;
                      uint64_t v259 = *(void *)(v258 - 8);
                      MEMORY[0x1F4188790](v258);
                      uint64_t v261 = (char *)v372 - v260;
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                      int v262 = swift_dynamicCast();
                      int v263 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v255 + 56);
                      if (v262)
                      {
                        v263(v261, 0, 1, v254);
                        (*(void (**)(char *, char *, uint64_t))(v255 + 32))(v257, v261, v254);
                        char v244 = dispatch thunk of static Equatable.== infix(_:_:)();
                        (*(void (**)(char *, uint64_t))(v255 + 8))(v257, v254);
                      }
                      else
                      {
                        v263(v261, 1, 1, v254);
                        (*(void (**)(char *, uint64_t))(v259 + 8))(v261, v258);
                        char v244 = 0;
                      }
                      uint64_t v217 = v418;
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v474);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v476);
                      uint64_t v27 = v417;
                      uint64_t v229 = (uint64_t)v421;
                      goto LABEL_251;
                    }
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v469);
LABEL_250:
                    char v244 = 0;
                  }
                  else
                  {
                    if (v472)
                    {
                      outlined destroy of Any?((uint64_t)v420, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                      goto LABEL_250;
                    }
                    char v244 = 1;
                  }
LABEL_251:
                  outlined destroy of Any?((uint64_t)v506, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  outlined destroy of Any?((uint64_t)v508, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v423);
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v428);
                  outlined destroy of Any?((uint64_t)&v430, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v440, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t result = outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v238 = v419;
                  if ((v244 & 1) == 0) {
                    goto LABEL_283;
                  }
                }
                else
                {
                  if (v439) {
                    goto LABEL_282;
                  }
                  outlined destroy of Any?((uint64_t)&v430, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v440, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t result = outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                }
                v243 += 2;
                ++v242;
                if (v245 == v217)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v209 = *(void *)(v27 + 64);
                  uint64_t v214 = *(void *)(v27 + 88);
                  unint64_t v191 = v384;
                  uint64_t v403 = v385;
                  uint64_t v213 = (uint64_t)v405;
                  uint64_t v430 = v405;
                  uint64_t v431 = v384;
                  uint64_t v210 = v383;
                  uint64_t v432 = (uint64_t)v383;
                  BOOL v41 = __OFADD__(v400++, 1);
                  if (!v41) {
                    continue;
                  }
                  __break(1u);
LABEL_281:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v428);
LABEL_282:
                  outlined destroy of Any?((uint64_t)&v430, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v440, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_283:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v210 = v401;
                  goto LABEL_284;
                }
                goto LABEL_253;
              }
            }
            else
            {
              uint64_t v449 = 0;
              long long v447 = 0u;
              long long v448 = 0u;
              long long v445 = 0u;
              long long v446 = 0u;
              swift_bridgeObjectRetain();
              if (*(void *)(v238 + 16)) {
                goto LABEL_261;
              }
            }
            uint64_t v444 = 0;
            long long v442 = 0u;
            long long v443 = 0u;
            long long v440 = 0u;
            long long v441 = 0u;
            goto LABEL_265;
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
LABEL_284:
          if (v395 != *(void *)(v27 + 88)) {
            goto LABEL_408;
          }
          if (v210)
          {
            unint64_t v264 = v210[3 * ((v402 >> ((4 * *((unsigned char *)v210 + 18) + 8) & 0x3C)) & 0xF) + 3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v265 = *(void *)(v27 + 64);
            swift_unknownObjectRetain();
            unint64_t v264 = specialized Rope._Node.subscript.getter(v402, v265);
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v266 = (char *)v403 + v264;
          if (__OFADD__(v403, v264)) {
            goto LABEL_409;
          }
          uint64_t v267 = v398;
          long long v268 = *v398;
          long long v269 = v398[1];
          long long v478 = v398[2];
          long long v477 = v269;
          long long v476 = v268;
          long long v270 = *v398;
          long long v271 = v398[1];
          v506[2] = v478;
          v506[1] = v271;
          v506[0] = v270;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v506, (uint64_t)v507);
          outlined retain of Locale((uint64_t)v507);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)&v476);
          uint64_t result = BigString.Index.utf8Offset.getter();
          if (__OFSUB__(v266, result))
          {
LABEL_410:
            __break(1u);
LABEL_411:
            __break(1u);
            goto LABEL_412;
          }
          uint64_t v272 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v274 = v273;
          uint64_t v276 = v275;
          uint64_t v278 = v277;
          outlined release of Locale((uint64_t)&v467);
          uint64_t v280 = v393;
          uint64_t v279 = v394;
          uint64_t v282 = v391;
          uint64_t v281 = v392;
          char v283 = static BigString.Index.< infix(_:_:)();
          if (v283) {
            uint64_t v284 = v279;
          }
          else {
            uint64_t v284 = v272;
          }
          if (v283)
          {
            uint64_t v285 = v281;
          }
          else
          {
            uint64_t v280 = v274;
            uint64_t v285 = v276;
          }
          uint64_t v286 = v409;
          uint64_t v287 = v411;
          if (v283) {
            uint64_t v278 = v282;
          }
          uint64_t v288 = v284;
          long long v289 = *v267;
          long long v290 = v267[1];
          long long v475 = v267[2];
          v474[1] = v290;
          v474[0] = v289;
          long long v291 = *v267;
          long long v292 = v267[1];
          v508[2] = v475;
          v508[1] = v292;
          v508[0] = v291;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v508, (uint64_t)v509);
          outlined retain of Locale((uint64_t)v509);
          uint64_t v293 = v413;
          uint64_t v294 = v414;
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if (result) {
            goto LABEL_411;
          }
          *(void *)&long long v440 = v286;
          *((void *)&v440 + 1) = v287;
          *(void *)&long long v441 = v293;
          *((void *)&v441 + 1) = v294;
          *(void *)&long long v442 = v288;
          *((void *)&v442 + 1) = v280;
          *(void *)&long long v443 = v285;
          *((void *)&v443 + 1) = v278;
          uint64_t v295 = v412;
          uint64_t v296 = *(void *)(v412 + 16);
          if (!v296 || (static BigString.Index.== infix(_:_:)() & 1) != 0)
          {
LABEL_313:
            uint64_t v306 = v389;
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v297 = 40;
            uint64_t v298 = v296;
            long long v422 = (unsigned char *)v288;
            while (*(void *)(v295 + v297))
            {
              swift_bridgeObjectRelease();
              v297 += 16;
              if (!--v298)
              {
                swift_bridgeObjectRelease();
                uint64_t v299 = v409;
                uint64_t v301 = v413;
                uint64_t v300 = v414;
                uint64_t v302 = v411;
                goto LABEL_308;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            BigString.utf8.getter();
            BigString.UTF8View.subscript.getter();
            outlined release of Locale((uint64_t)&v468);
            uint64_t v299 = v409;
            uint64_t v302 = v411;
            uint64_t v301 = v413;
            uint64_t v300 = v414;
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if (result) {
              goto LABEL_433;
            }
            v428[0] = v299;
            v428[1] = v302;
            v428[2] = v301;
            v428[3] = v300;
            v428[4] = v299;
            v428[5] = v302;
            v428[6] = v301;
            v428[7] = v300;
            specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v428, (uint64_t *)&v430);
            outlined release of Locale((uint64_t)&v469);
            uint64_t v303 = v437;
            if (v437 != 2)
            {
              uint64_t v280 = v435;
              uint64_t v285 = v436;
              long long v422 = (unsigned char *)v434;
              uint64_t result = static BigString.Index.< infix(_:_:)();
              uint64_t v278 = v303;
              if (result) {
                goto LABEL_434;
              }
            }
LABEL_308:
            *(void *)&long long v423 = v299;
            *((void *)&v423 + 1) = v302;
            *(void *)&long long v424 = v301;
            *((void *)&v424 + 1) = v300;
            uint64_t v288 = (uint64_t)v422;
            *(void *)&long long v425 = v422;
            *((void *)&v425 + 1) = v280;
            *(void *)&long long v426 = v285;
            *((void *)&v426 + 1) = v278;
            uint64_t v304 = *(void *)(v412 + 16);
            if (!v304) {
              goto LABEL_313;
            }
            uint64_t v305 = 40;
            uint64_t v306 = v389;
            while (!*(void *)(v412 + v305))
            {
              v305 += 16;
              if (!--v304) {
                goto LABEL_314;
              }
            }
            *(void *)&long long v445 = MEMORY[0x1E4FBC860];
            uint64_t v355 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
            do
            {
              unint64_t v360 = *v355;
              if (*v355)
              {
                uint64_t v361 = *(v355 - 1);
                if ((v360 & 0x2000000000000000) != 0 ? HIBYTE(v360) & 0xF : v361 & 0xFFFFFFFFFFFFLL)
                {
                  if ((v360 & 0x1000000000000000) != 0)
                  {
                    int v356 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                  }
                  else
                  {
                    if ((v360 & 0x2000000000000000) != 0)
                    {
                      uint64_t v430 = (void *)*(v355 - 1);
                      uint64_t v431 = v360 & 0xFFFFFFFFFFFFFFLL;
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      if ((v361 & 0x1000000000000000) == 0) {
                        _StringObject.sharedUTF8.getter();
                      }
                      swift_bridgeObjectRetain();
                    }
                    int v356 = _decodeScalar(_:startingAt:)();
                    swift_bridgeObjectRelease();
                  }
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  uint64_t v357 = *(void *)(v445 + 16);
                  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v357);
                  uint64_t v358 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v357, v356);
                  destructiveProjectEnumData for PredicateCodableError(v358, v359);
                }
              }
              v355 += 2;
              --v296;
            }
            while (v296);
            swift_bridgeObjectRelease();
            uint64_t v363 = v445;
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v473);
            uint64_t v364 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v363);
            uint64_t v366 = v365;
            uint64_t v368 = v367;
            uint64_t v307 = v369;
            swift_bridgeObjectRelease();
            outlined release of Locale((uint64_t)&v430);
            uint64_t v288 = (uint64_t)v422;
            if (v307 != 2)
            {
              char v370 = static BigString.Index.< infix(_:_:)();
              outlined release of Locale((uint64_t)v474);
              uint64_t result = outlined release of AttributedString.Runs((uint64_t)v510);
              if (v370) {
                goto LABEL_435;
              }
              uint64_t v288 = v364;
              uint64_t v280 = v366;
              uint64_t v285 = v368;
              uint64_t v308 = v397;
              uint64_t v306 = v389;
LABEL_315:
              if (v404 == *(void **)(v417 + 88))
              {
                long long v422 = (unsigned char *)v288;
                if (v308)
                {
                  unint64_t v309 = v308 + 24 * ((v396 >> ((4 * *(unsigned char *)(v308 + 18) + 8) & 0x3C)) & 0xF);
                  uint64_t v311 = *(void *)(v309 + 32);
                  uint64_t v310 = *(void *)(v309 + 40);
                  swift_bridgeObjectRetain();
                  uint64_t v421 = (unsigned char *)v310;
                  swift_bridgeObjectRetain();
                }
                else
                {
                  uint64_t v312 = *(void *)(v417 + 64);
                  swift_unknownObjectRetain();
                  specialized Rope._Node.subscript.getter(v396, v312);
                  uint64_t v311 = v313;
                  uint64_t v421 = (unsigned char *)v314;
                  swift_unknownObjectRelease();
                }
                uint64_t v315 = (*(uint64_t (**)(void, void))(v406[7] + 24))(v406[2], v406[7]);
                if (*(void *)(v311 + 16)
                  && (unint64_t v317 = specialized __RawDictionaryStorage.find<A>(_:)(v315, v316), (v318 & 1) != 0))
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v311 + 56) + 72 * v317, (uint64_t)&v445);
                }
                else
                {
                  uint64_t v449 = 0;
                  long long v447 = 0u;
                  long long v448 = 0u;
                  long long v445 = 0u;
                  long long v446 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v446 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v445, (uint64_t)v429);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                  uint64_t v320 = v378;
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v445);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v320, 0, 1, AssociatedTypeWitness);
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v321 = swift_getAssociatedTypeWitness();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v321 - 8) + 56))(v378, 1, 1, v321);
                }
                uint64_t v322 = (*(uint64_t (**)(void, void))(v406[8] + 24))(v406[3], v406[8]);
                if (*(void *)(v311 + 16)
                  && (unint64_t v324 = specialized __RawDictionaryStorage.find<A>(_:)(v322, v323), (v325 & 1) != 0))
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v311 + 56) + 72 * v324, (uint64_t)&v445);
                }
                else
                {
                  uint64_t v449 = 0;
                  long long v447 = 0u;
                  long long v448 = 0u;
                  long long v445 = 0u;
                  long long v446 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v446 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v445, (uint64_t)v429);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  uint64_t v326 = swift_getAssociatedTypeWitness();
                  uint64_t v327 = v379;
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v445);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v326 - 8) + 56))(v327, 0, 1, v326);
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v328 = swift_getAssociatedTypeWitness();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v328 - 8) + 56))(v379, 1, 1, v328);
                }
                uint64_t v329 = (*(uint64_t (**)(void, void))(v406[9] + 24))(v406[4], v406[9]);
                if (*(void *)(v311 + 16)
                  && (unint64_t v331 = specialized __RawDictionaryStorage.find<A>(_:)(v329, v330), (v332 & 1) != 0))
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v311 + 56) + 72 * v331, (uint64_t)&v445);
                }
                else
                {
                  uint64_t v449 = 0;
                  long long v447 = 0u;
                  long long v448 = 0u;
                  long long v445 = 0u;
                  long long v446 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v446 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v445, (uint64_t)v429);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  uint64_t v333 = swift_getAssociatedTypeWitness();
                  uint64_t v334 = v380;
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v445);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v333 - 8) + 56))(v334, 0, 1, v333);
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v335 = swift_getAssociatedTypeWitness();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v335 - 8) + 56))(v380, 1, 1, v335);
                }
                uint64_t v336 = (*(uint64_t (**)(void, void))(v406[10] + 24))(v406[5], v406[10]);
                if (*(void *)(v311 + 16)
                  && (unint64_t v338 = specialized __RawDictionaryStorage.find<A>(_:)(v336, v337), (v339 & 1) != 0))
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v311 + 56) + 72 * v338, (uint64_t)&v445);
                }
                else
                {
                  uint64_t v449 = 0;
                  long long v447 = 0u;
                  long long v448 = 0u;
                  long long v445 = 0u;
                  long long v446 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v446 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v445, (uint64_t)v429);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  uint64_t v340 = swift_getAssociatedTypeWitness();
                  uint64_t v341 = v381;
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v445);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v340 - 8) + 56))(v341, 0, 1, v340);
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v342 = swift_getAssociatedTypeWitness();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v342 - 8) + 56))(v381, 1, 1, v342);
                }
                uint64_t v343 = (*(uint64_t (**)(void, void))(v406[11] + 24))(v406[6], v406[11]);
                if (*(void *)(v311 + 16)
                  && (unint64_t v345 = specialized __RawDictionaryStorage.find<A>(_:)(v343, v344), (v346 & 1) != 0))
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v311 + 56) + 72 * v345, (uint64_t)&v445);
                }
                else
                {
                  uint64_t v449 = 0;
                  long long v447 = 0u;
                  long long v448 = 0u;
                  long long v445 = 0u;
                  long long v446 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v446 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v445, (uint64_t)v429);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  uint64_t v347 = swift_getAssociatedTypeWitness();
                  uint64_t v348 = v382;
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v445);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v347 - 8) + 56))(v348, 0, 1, v347);
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t v349 = swift_getAssociatedTypeWitness();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v349 - 8) + 56))(v382, 1, 1, v349);
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v350 = (uint64_t)v422;
                uint64_t v352 = v387;
                uint64_t v351 = v388;
                uint64_t v353 = v376;
                uint64_t result = static BigString.Index.< infix(_:_:)();
                if ((result & 1) == 0)
                {
                  uint64_t v354 = v377;
                  *uint64_t v377 = v351;
                  v354[1] = v306;
                  v354[2] = v352;
                  v354[3] = v353;
                  v354[4] = v350;
                  v354[5] = v280;
                  v354[6] = v285;
                  v354[7] = v307;
                  return result;
                }
                goto LABEL_413;
              }
LABEL_412:
              __break(1u);
LABEL_413:
              __break(1u);
LABEL_414:
              __break(1u);
LABEL_415:
              __break(1u);
LABEL_416:
              __break(1u);
LABEL_417:
              __break(1u);
LABEL_418:
              __break(1u);
LABEL_419:
              __break(1u);
LABEL_420:
              __break(1u);
LABEL_421:
              __break(1u);
LABEL_422:
              __break(1u);
LABEL_423:
              __break(1u);
LABEL_424:
              __break(1u);
LABEL_425:
              __break(1u);
LABEL_426:
              __break(1u);
              goto LABEL_427;
            }
          }
LABEL_314:
          outlined release of Locale((uint64_t)v474);
          uint64_t result = outlined release of AttributedString.Runs((uint64_t)v510);
          uint64_t v307 = v278;
          uint64_t v308 = v397;
          goto LABEL_315;
        }
      }
      else
      {
        unint64_t v230 = v226 + 1;
        if (v226 + 1 < *(unsigned __int16 *)(v209 + 16))
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v223 = (v230 << v225) | ((-15 << v225) - 1) & v220;
          uint64_t v228 = v209;
          uint64_t v210 = v401;
          goto LABEL_235;
        }
        uint64_t v210 = v401;
      }
      break;
    }
    if (v209)
    {
      int v231 = *(unsigned __int8 *)(v209 + 18);
      uint64_t v232 = *(unsigned __int16 *)(v209 + 16);
      uint64_t result = swift_unknownObjectRelease_n();
      char v233 = (4 * v231 + 8) & 0x3C;
      uint64_t v234 = ((-15 << v233) - 1) & v231;
      uint64_t v235 = v232 << v233;
      uint64_t v210 = v401;
      unint64_t v223 = v234 | v235;
    }
    else
    {
      unint64_t v223 = 0;
    }
    uint64_t v229 = (uint64_t)v421;
    uint64_t v228 = 0;
    uint64_t v430 = (void *)v395;
    goto LABEL_243;
  }
  uint64_t v376 = v173;
  char v371 = static BigString.Index.< infix(_:_:)();
  outlined release of Locale((uint64_t)v482);
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v510);
  if ((v371 & 1) == 0)
  {
    uint64_t v388 = v167;
    uint64_t v389 = v169;
    uint64_t v387 = v171;
    goto LABEL_164;
  }
LABEL_437:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice5.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(void *a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  long long v6 = malloc(0x70uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *long long v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[4] = type metadata accessor for Optional();
  v6[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[10] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[11] = v8;
  uint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[12] = v9;
  long long v10 = AttributedString.Runs.AttributesSlice5.subscript.read(v6 + 6, a2, a3);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v6[13] = v10;
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  long long v18 = (_OWORD *)v15[3];
  uint64_t v33 = v15[2];
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v9, v12, v19);
  uint64_t v20 = &v9[TupleTypeMetadata[12]];
  uint64_t v21 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, v14, v21);
  long long v22 = &v9[TupleTypeMetadata[16]];
  uint64_t v23 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, v17, v23);
  long long v24 = &v9[TupleTypeMetadata[20]];
  uint64_t v25 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v24, v16, v25);
  uint64_t v26 = &v9[TupleTypeMetadata[24]];
  uint64_t v27 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v26, v33, v27);
  uint64_t v28 = &v9[TupleTypeMetadata[28]];
  long long v29 = v18[1];
  long long v30 = v18[2];
  long long v31 = v18[3];
  *(_OWORD *)uint64_t v28 = *v18;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v30;
  *((_OWORD *)v28 + 3) = v31;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 48;
  (*(void (**)(void, void))(*(void *)(*a1 + 88) + 8))(*(void *)(*a1 + 96), *(void *)(*a1 + 80));
  uint64_t v5 = *(void **)(v3 + 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 104))(v4, a2);
  free(v5);

  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice5.subscript.read(void *a1, uint64_t *a2, void *a3))(uint64_t a1)
{
  long long v6 = malloc(0x68uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *long long v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[4] = type metadata accessor for Optional();
  v6[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[10] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[11] = v8;
  uint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[12] = v9;
  uint64_t v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  uint64_t v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  uint64_t v12 = (uint64_t)&v9[TupleTypeMetadata[20]];
  uint64_t v13 = (uint64_t)&v9[TupleTypeMetadata[24]];
  uint64_t v14 = (uint64_t *)&v9[TupleTypeMetadata[28]];
  AttributedString.Runs.AttributesSlice5.subscript.getter((uint64_t)v9, v10, v11, v12, v13, v14, a2, a3);
  v6[6] = v11;
  v6[7] = v12;
  v6 += 6;
  v6[2] = v13;
  v6[3] = v14;
  return AttributedString.Runs.AttributesSlice5.subscript.read;
}

void AttributedString.Runs.AttributesSlice5.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 96);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 88) + 8))(v2, *(void *)(*(void *)a1 + 80));
  free(v2);

  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836F0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  swift_getWitnessTable();

  JUMPOUT(0x185301E20);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice5.index(after:));
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(_OWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr))
{
  a4(v7);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *a1 = v7[0];
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice5.makeIterator());
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  long long v4 = *(_OWORD *)(v3 + 176);
  v11[10] = *(_OWORD *)(v3 + 160);
  v11[11] = v4;
  v11[12] = *(_OWORD *)(v3 + 192);
  uint64_t v12 = *(void *)(v3 + 208);
  long long v5 = *(_OWORD *)(v3 + 112);
  v11[6] = *(_OWORD *)(v3 + 96);
  v11[7] = v5;
  long long v6 = *(_OWORD *)(v3 + 144);
  v11[8] = *(_OWORD *)(v3 + 128);
  v11[9] = v6;
  long long v7 = *(_OWORD *)(v3 + 48);
  v11[2] = *(_OWORD *)(v3 + 32);
  v11[3] = v7;
  long long v8 = *(_OWORD *)(v3 + 80);
  v11[4] = *(_OWORD *)(v3 + 64);
  v11[5] = v8;
  long long v9 = *(_OWORD *)(v3 + 16);
  v11[0] = *(_OWORD *)v3;
  v11[1] = v9;
  return outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v11);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = *a1;
  uint64_t v14 = *a2;
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  long long v17 = *(_OWORD *)(v10 + 176);
  v26[10] = *(_OWORD *)(v10 + 160);
  v26[11] = v17;
  uint64_t v27 = *(void *)(v10 + 192);
  long long v18 = *(_OWORD *)(v10 + 112);
  v26[6] = *(_OWORD *)(v10 + 96);
  v26[7] = v18;
  long long v19 = *(_OWORD *)(v10 + 144);
  v26[8] = *(_OWORD *)(v10 + 128);
  v26[9] = v19;
  long long v20 = *(_OWORD *)(v10 + 48);
  void v26[2] = *(_OWORD *)(v10 + 32);
  v26[3] = v20;
  long long v21 = *(_OWORD *)(v10 + 80);
  v26[4] = *(_OWORD *)(v10 + 64);
  v26[5] = v21;
  long long v22 = *(_OWORD *)(v10 + 16);
  v26[0] = *(_OWORD *)v10;
  v26[1] = v22;
  outlined retain of AttributedString.Runs((uint64_t)v26);
  *(void *)&double result = AttributedString.Runs.AttributesSlice5.init(runs:)(v10, *(void *)(v13 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v14 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v15 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(v16 + *MEMORY[0x1E4FBC5F0] + 8), a5, a6, a8, a7, a9, a10).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.NSAttributesSlice.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 136);
  long long v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v4 = v1[26];
  uint64_t v3 = v1[27];
  uint64_t v5 = v1[28];
  uint64_t v6 = v1[29];
  uint64_t v8 = v1[21];
  uint64_t v7 = v1[22];
  uint64_t v9 = v1[24];
  uint64_t v228 = v1[23];
  uint64_t v229 = v7;
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    return result;
  }
  uint64_t v222 = v8;
  long long v202 = a1;
  uint64_t v218 = v9;
  uint64_t v11 = *v1;
  long long v12 = *(_OWORD *)(v1 + 3);
  long long v282 = *(_OWORD *)(v1 + 1);
  long long v283 = v12;
  long long v13 = *(_OWORD *)(v1 + 7);
  long long v284 = *(_OWORD *)(v1 + 5);
  long long v285 = v13;
  uint64_t v214 = v1[9];
  uint64_t v14 = v1[10];
  uint64_t v226 = v1[11];
  uint64_t v227 = v14;
  uint64_t v15 = (void *)v1[12];
  unint64_t v224 = v1[13];
  char v225 = v15;
  uint64_t v223 = v1[14];
  uint64_t v16 = v1[15];
  uint64_t v17 = v1[17];
  uint64_t v219 = v1[16];
  uint64_t v220 = v16;
  uint64_t v18 = v1[18];
  long long v19 = (long long *)v1[19];
  long long v20 = (uint64_t *)v1[20];
  uint64_t v230 = v11;
  swift_retain();
  uint64_t v234 = v18;
  uint64_t v235 = v17;
  uint64_t v232 = v20;
  char v233 = v19;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_211;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
    goto LABEL_214;
  }
  uint64_t v21 = v4;
  uint64_t v22 = v230;
  uint64_t v24 = *(void *)(v230 + 64);
  uint64_t v23 = *(void *)(v230 + 72);
  int64_t v25 = *(void *)(v230 + 80);
  int v231 = *(uint64_t **)(v230 + 88);
  swift_unknownObjectRetain();
  uint64_t v215 = v3;
  uint64_t v216 = v21;
  int64_t v26 = v25;
  uint64_t v221 = v5;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v24) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = 0;
  }
  if (result < 0) {
    goto LABEL_213;
  }
  uint64_t v28 = result;
  if (v27 < result) {
    goto LABEL_213;
  }
  unint64_t v211 = v1;
  uint64_t v217 = v6;
  uint64_t v201 = 0;
  if (!v24 || result >= v26 || !*(_WORD *)(v24 + 16))
  {
    unint64_t v41 = swift_unknownObjectRetain();
    uint64_t v30 = (uint64_t)v231;
    unint64_t v42 = specialized Rope._endPath.getter(v41);
    swift_unknownObjectRelease();
    uint64_t v33 = 0;
    uint64_t v28 = 0;
    uint64_t v43 = 0;
    if (!v24) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v212 = v26;
  uint64_t v213 = v23;
  uint64_t v29 = *(unsigned __int8 *)(v24 + 18);
  uint64_t v30 = (uint64_t)v231;
  if (*(unsigned char *)(v24 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v31 = v24;
    while (1)
    {
      uint64_t v34 = *(unsigned __int16 *)(v31 + 16);
      if (!*(_WORD *)(v31 + 16)) {
        break;
      }
      uint64_t v35 = *(void *)(v31 + 40);
      BOOL v36 = __OFSUB__(v28, v35);
      uint64_t v37 = v28 - v35;
      if (v36) {
        goto LABEL_203;
      }
      if (__OFADD__(v37, 1)) {
        goto LABEL_204;
      }
      if (v37 + 1 < 1)
      {
        uint64_t v34 = 0;
        goto LABEL_17;
      }
      if (v34 == 1)
      {
        uint64_t v28 = v37;
        break;
      }
      uint64_t v38 = (uint64_t *)(v31 + 64);
      uint64_t v39 = 1;
      while (1)
      {
        uint64_t v40 = *v38;
        v38 += 3;
        uint64_t v28 = v37 - v40;
        if (__OFSUB__(v37, v40)) {
          goto LABEL_197;
        }
        if (__OFADD__(v28, 1))
        {
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
          goto LABEL_201;
        }
        if (v28 + 1 < 1) {
          break;
        }
        ++v39;
        uint64_t v37 = v28;
        if (v34 == v39) {
          goto LABEL_16;
        }
      }
      uint64_t v34 = v39;
      uint64_t v28 = v37;
LABEL_17:
      char v32 = (4 * *(unsigned char *)(v31 + 18) + 8) & 0x3C;
      uint64_t v29 = ((-15 << v32) - 1) & v29 | (v34 << v32);
      uint64_t v33 = *(void *)(v31 + 24 + 24 * v34);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v31 = v33;
      if (!*(unsigned char *)(v33 + 18)) {
        goto LABEL_76;
      }
    }
LABEL_16:
    if (!v28) {
      goto LABEL_17;
    }
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v33 = v24;
LABEL_76:
  uint64_t v86 = *(unsigned __int16 *)(v33 + 16);
  if (!*(_WORD *)(v33 + 16))
  {
    uint64_t v22 = v230;
    uint64_t v23 = v213;
LABEL_98:
    if (v28)
    {
LABEL_240:
      __break(1u);
      goto LABEL_241;
    }
    goto LABEL_99;
  }
  uint64_t v87 = *(void *)(v33 + 24);
  BOOL v36 = __OFSUB__(v28, v87);
  uint64_t v88 = v28 - v87;
  uint64_t v22 = v230;
  uint64_t v23 = v213;
  if (v36)
  {
LABEL_236:
    __break(1u);
    goto LABEL_237;
  }
  if (__OFADD__(v88, 1))
  {
LABEL_237:
    __break(1u);
    goto LABEL_238;
  }
  if (v88 + 1 < 1)
  {
    uint64_t v86 = 0;
  }
  else
  {
    if (v86 == 1)
    {
      uint64_t v28 = v88;
      goto LABEL_98;
    }
    uint64_t v92 = (uint64_t *)(v33 + 48);
    uint64_t v93 = 1;
    while (1)
    {
      uint64_t v94 = *v92;
      v92 += 3;
      uint64_t v28 = v88 - v94;
      if (__OFSUB__(v88, v94)) {
        goto LABEL_232;
      }
      if (__OFADD__(v28, 1)) {
        goto LABEL_233;
      }
      if (v28 + 1 < 1) {
        break;
      }
      ++v93;
      uint64_t v88 = v28;
      if (v86 == v93) {
        goto LABEL_98;
      }
    }
    uint64_t v86 = v93;
    uint64_t v28 = v88;
  }
LABEL_99:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v42 = v29 & 0xFFFFFFFFFFFFF0FFLL | (v86 << 8);
LABEL_32:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v42, v33, v24, v23);
  swift_unknownObjectRelease_n();
  uint64_t v43 = v28;
LABEL_33:
  long long v44 = *(_OWORD *)(v22 + 16);
  long long v45 = *(_OWORD *)(v22 + 48);
  v303[1] = *(_OWORD *)(v22 + 32);
  v303[2] = v45;
  v303[0] = v44;
  long long v46 = *(_OWORD *)(v22 + 16);
  v304[1] = *(_OWORD *)(v22 + 32);
  v304[2] = v45;
  v304[0] = v46;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v304, (uint64_t)v305);
  outlined retain of Locale((uint64_t)v305);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v303);
  if (__OFSUB__(0, v43))
  {
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
  BigString.UTF8View.index(_:offsetBy:)();
  uint64_t result = outlined release of Locale((uint64_t)&v286);
  if (v30 != *(void *)(v22 + 88))
  {
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  if (v33)
  {
    unint64_t v47 = (void *)(v33 + 24 * ((v42 >> ((4 * *(unsigned char *)(v33 + 18) + 8) & 0x3C)) & 0xF));
    unint64_t v48 = v47[3];
    uint64_t v49 = v47[4];
    uint64_t v50 = v47[5];
    swift_retain();
    uint64_t v199 = v49;
    swift_bridgeObjectRetain();
    uint64_t v200 = v50;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v51 = *(void *)(v22 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v48 = specialized Rope._Node.subscript.getter(v42, v51);
    uint64_t v199 = v52;
    uint64_t v200 = v53;
    swift_unknownObjectRelease();
  }
  static BigString.Index.< infix(_:_:)();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v54 = result + v48;
  if (__OFADD__(result, v48)) {
    goto LABEL_216;
  }
  uint64_t v55 = (long long *)(v230 + 16);
  uint64_t v56 = BigString.Index.utf8Offset.getter();
  if (v56 >= v54) {
    uint64_t v57 = v54;
  }
  else {
    uint64_t v57 = v56;
  }
  long long v58 = *v55;
  long long v59 = *(_OWORD *)(v230 + 48);
  v302[1] = *(_OWORD *)(v230 + 32);
  v302[2] = v59;
  v302[0] = v58;
  long long v60 = *v55;
  long long v61 = *(_OWORD *)(v230 + 32);
  uint64_t v210 = (long long *)(v230 + 16);
  v306[1] = v61;
  v306[2] = v59;
  v306[0] = v60;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v306, (uint64_t)v307);
  outlined retain of Locale((uint64_t)v307);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v302);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v57, result)) {
    goto LABEL_217;
  }
  BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v287);
  char v62 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v62)
  {
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
  long long v261 = v282;
  long long v262 = v283;
  long long v263 = v284;
  uint64_t v63 = v211[25];
  long long v264 = v285;
  uint64_t v260 = v230;
  uint64_t v265 = v214;
  uint64_t v266 = v227;
  uint64_t v267 = v226;
  long long v268 = v225;
  unint64_t v269 = v224;
  uint64_t v270 = v223;
  uint64_t v271 = v220;
  uint64_t v272 = v219;
  uint64_t v273 = v235;
  uint64_t v274 = v234;
  uint64_t v275 = v233;
  uint64_t v276 = v232;
  uint64_t v277 = v222;
  uint64_t v278 = v229;
  uint64_t v279 = v228;
  uint64_t v280 = v218;
  uint64_t v220 = v63;
  uint64_t v281 = v63;
  swift_retain();
  outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v260);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_219:
    __break(1u);
    goto LABEL_220;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_220:
    __break(1u);
    goto LABEL_221;
  }
  uint64_t v64 = *(void *)(v220 + 16);
  if (!v64)
  {
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
    goto LABEL_223;
  }
  uint64_t v65 = v230;
  uint64_t v66 = *(void *)(v230 + 64);
  uint64_t v67 = *(void *)(v230 + 72);
  uint64_t v68 = *(void *)(v230 + 80);
  uint64_t v223 = *(void *)(v230 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v66) {
    uint64_t v69 = v68;
  }
  else {
    uint64_t v69 = 0;
  }
  if (result < 0) {
    goto LABEL_222;
  }
  uint64_t v70 = result;
  if (v69 < result) {
    goto LABEL_222;
  }
  uint64_t v219 = v64;
  if (!v66 || result >= v68 || !*(_WORD *)(v66 + 16))
  {
    unint64_t v82 = swift_unknownObjectRetain();
    unint64_t v83 = specialized Rope._endPath.getter(v82);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v84 = 0;
    uint64_t v72 = 0;
    unint64_t v224 = v83;
    if (!v66)
    {
      uint64_t v85 = 0;
LABEL_108:
      uint64_t v213 = v70 - v72;
      if (__OFSUB__(v70, v72))
      {
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
      long long v98 = *v210;
      long long v99 = v210[2];
      v301[1] = v210[1];
      v301[2] = v99;
      v301[0] = v98;
      long long v100 = *v210;
      v308[1] = v210[1];
      v308[2] = v99;
      v308[0] = v100;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v308, (uint64_t)v309);
      outlined retain of Locale((uint64_t)v309);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v301);
      if (__OFSUB__(0, v72))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      uint64_t v101 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v197 = v102;
      uint64_t v198 = v101;
      uint64_t v195 = v104;
      uint64_t v196 = v103;
      uint64_t result = outlined release of Locale((uint64_t)&v288);
      if (v85 >= v214)
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      if (v223 != *(void *)(v65 + 88))
      {
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }
      uint64_t v105 = *(uint64_t **)(v65 + 64);
      if (v84)
      {
        unint64_t v106 = v224;
        unint64_t v107 = v84 + 24 * ((v224 >> ((4 * *(unsigned char *)(v84 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v108 = *(void *)(v107 + 40);
        uint64_t v227 = *(void *)(v107 + 32);
        swift_bridgeObjectRetain();
        uint64_t v194 = v108;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v109 = v223;
        uint64_t v110 = v223;
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v106 = v224;
        specialized Rope._Node.subscript.getter(v224, (uint64_t)v105);
        uint64_t v227 = v111;
        uint64_t v194 = v112;
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v105 = *(uint64_t **)(v65 + 64);
        uint64_t v110 = *(void *)(v65 + 88);
        uint64_t v109 = v223;
      }
      uint64_t v113 = v85 + 1;
      *(void *)&long long v289 = v109;
      *((void *)&v289 + 1) = v106;
      char v233 = (long long *)((char *)&v243 + 8);
      uint64_t v234 = (uint64_t)v293 + 8;
      *(void *)&long long v290 = v84;
      uint64_t v208 = (uint64_t *)(v220 + 40);
      uint64_t v114 = v110;
LABEL_116:
      if (v109 != v114) {
        goto LABEL_207;
      }
      if (v84)
      {
        unint64_t v115 = *(void *)(v84 + 24 * ((v224 >> ((4 * *(unsigned char *)(v84 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v115 = specialized Rope._Node.subscript.getter(v224, (uint64_t)v105);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v213, v115)) {
        goto LABEL_208;
      }
      uint64_t v205 = v213 + v115;
      if (v105)
      {
        unint64_t v116 = ((-15 << ((4 * *((unsigned char *)v105 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v105 + 18) | ((unint64_t)*((unsigned __int16 *)v105 + 8) << ((4 * *((unsigned char *)v105 + 18) + 8) & 0x3C));
        uint64_t result = swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v116 = 0;
      }
      unint64_t v117 = v224;
      if (v224 >= v116) {
        goto LABEL_209;
      }
      if (v84)
      {
        char v118 = (4 * *(unsigned char *)(v84 + 18) + 8) & 0x3C;
        unint64_t v119 = ((v224 >> v118) & 0xF) + 1;
        if (v119 < *(unsigned __int16 *)(v84 + 16))
        {
          unint64_t v212 = (v119 << v118) | ((-15 << v118) - 1) & v224;
          uint64_t result = swift_unknownObjectRelease_n();
LABEL_131:
          uint64_t v105 = (uint64_t *)v290;
LABEL_138:
          if (v113 == v214)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
LABEL_179:
            if (v114 == *(void *)(v65 + 88))
            {
              if (v84)
              {
                unint64_t v156 = *(void *)(v84 + 24 * ((v117 >> ((4 * *(unsigned char *)(v84 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                unint64_t v157 = v117;
                uint64_t v158 = *(void *)(v65 + 64);
                swift_unknownObjectRetain();
                unint64_t v156 = specialized Rope._Node.subscript.getter(v157, v158);
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              unint64_t v159 = v213 + v156;
              if (!__OFADD__(v213, v156))
              {
                long long v160 = *v210;
                long long v161 = v210[2];
                long long v256 = v210[1];
                long long v257 = v161;
                long long v255 = v160;
                long long v162 = *v210;
                long long v242 = v210[1];
                long long v243 = v161;
                long long v241 = v162;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v241, (uint64_t)v249);
                outlined retain of Locale((uint64_t)v249);
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)&v255);
                uint64_t result = BigString.Index.utf8Offset.getter();
                if (!__OFSUB__(v159, result))
                {
                  uint64_t v163 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v165 = v164;
                  uint64_t v167 = v166;
                  uint64_t v169 = v168;
                  outlined release of Locale((uint64_t)&v250);
                  uint64_t v170 = v222;
                  uint64_t v172 = v228;
                  uint64_t v171 = v229;
                  uint64_t v173 = v218;
                  char v174 = static BigString.Index.< infix(_:_:)();
                  if (v174)
                  {
                    uint64_t v163 = v170;
                    uint64_t v175 = v171;
                  }
                  else
                  {
                    uint64_t v175 = v165;
                  }
                  if (v174)
                  {
                    uint64_t v167 = v172;
                    uint64_t v169 = v173;
                  }
                  char v176 = static BigString.Index.< infix(_:_:)();
                  swift_release();
                  uint64_t result = outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)&v260);
                  if ((v176 & 1) == 0)
                  {
                    uint64_t v177 = v211;
                    uint64_t v178 = v211[26];
                    uint64_t v179 = v211[27];
                    uint64_t v180 = v211[28];
                    uint64_t v181 = v211[29];
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if ((result & 1) == 0)
                    {
                      v177[26] = v163;
                      v177[27] = v175;
                      v177[28] = v167;
                      v177[29] = v169;
                      long long v182 = *((_OWORD *)v177 + 11);
                      long long v298 = *((_OWORD *)v177 + 10);
                      long long v299 = v182;
                      long long v300 = *((_OWORD *)v177 + 12);
                      long long v183 = *((_OWORD *)v177 + 7);
                      long long v294 = *((_OWORD *)v177 + 6);
                      long long v295 = v183;
                      long long v184 = *((_OWORD *)v177 + 9);
                      long long v296 = *((_OWORD *)v177 + 8);
                      long long v297 = v184;
                      long long v185 = *((_OWORD *)v177 + 3);
                      long long v291 = *((_OWORD *)v177 + 2);
                      long long v292 = v185;
                      long long v186 = *((_OWORD *)v177 + 5);
                      v293[0] = *((_OWORD *)v177 + 4);
                      v293[1] = v186;
                      long long v187 = *((_OWORD *)v177 + 1);
                      long long v289 = *(_OWORD *)v177;
                      long long v290 = v187;
                      outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v289);
                      outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v289);
                      uint64_t v235 = v169;
                      uint64_t v188 = swift_bridgeObjectRetain();
                      uint64_t v189 = specialized _NativeDictionary.filter(_:)(v188, (uint64_t)&v289);
                      swift_release();
                      swift_bridgeObjectRelease_n();
                      uint64_t result = outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)&v289);
                      unint64_t v190 = v202;
                      uint64_t v191 = v200;
                      *long long v202 = v189;
                      v190[1] = v191;
                      v190[2] = v178;
                      v190[3] = v179;
                      v190[4] = v180;
                      v190[5] = v181;
                      v190[6] = v163;
                      v190[7] = v175;
                      uint64_t v192 = v235;
                      v190[8] = v167;
                      v190[9] = v192;
                      return result;
                    }
                    goto LABEL_231;
                  }
LABEL_230:
                  __break(1u);
LABEL_231:
                  __break(1u);
LABEL_232:
                  __break(1u);
LABEL_233:
                  __break(1u);
LABEL_234:
                  __break(1u);
LABEL_235:
                  __break(1u);
                  goto LABEL_236;
                }
LABEL_229:
                __break(1u);
                goto LABEL_230;
              }
LABEL_228:
              __break(1u);
              goto LABEL_229;
            }
LABEL_227:
            __break(1u);
            goto LABEL_228;
          }
          if ((void)v289 != *(void *)(v65 + 88)) {
            goto LABEL_210;
          }
          uint64_t v223 = v289;
          uint64_t v206 = v114;
          uint64_t v207 = v84;
          long long v203 = v105;
          uint64_t v204 = v113;
          if (v105)
          {
            uint64_t v127 = &v105[3 * ((v212 >> ((4 * *((unsigned char *)v105 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v128 = v127[4];
            uint64_t v129 = v127[5];
            swift_bridgeObjectRetain();
            uint64_t v209 = v129;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v130 = *(void *)(v65 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v212, v130);
            uint64_t v209 = v131;
            uint64_t v128 = v132;
            swift_unknownObjectRelease();
          }
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v133 = 0;
          uint64_t v134 = v208;
          uint64_t v135 = v227;
          uint64_t v235 = v128;
          while (1)
          {
            uint64_t v137 = v133 + 1;
            if (__OFADD__(v133, 1))
            {
              __break(1u);
LABEL_197:
              __break(1u);
              goto LABEL_198;
            }
            uint64_t v138 = *(v134 - 1);
            uint64_t v139 = *v134;
            if (*(void *)(v135 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v140 = specialized __RawDictionaryStorage.find<A>(_:)(v138, v139);
              if (v141)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v135 + 56) + 72 * v140, (uint64_t)&v255);
              }
              else
              {
                uint64_t v259 = 0;
                long long v257 = 0u;
                long long v258 = 0u;
                long long v255 = 0u;
                long long v256 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v128 = v235;
              if (!*(void *)(v235 + 16))
              {
LABEL_153:
                uint64_t v254 = 0;
                long long v252 = 0u;
                long long v253 = 0u;
                long long v250 = 0u;
                long long v251 = 0u;
                goto LABEL_160;
              }
            }
            else
            {
              uint64_t v259 = 0;
              long long v257 = 0u;
              long long v258 = 0u;
              long long v255 = 0u;
              long long v256 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v128 + 16)) {
                goto LABEL_153;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v142 = specialized __RawDictionaryStorage.find<A>(_:)(v138, v139);
            if (v143)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v128 + 56) + 72 * v142, (uint64_t)&v250);
            }
            else
            {
              uint64_t v254 = 0;
              long long v252 = 0u;
              long long v253 = 0u;
              long long v250 = 0u;
              long long v251 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_160:
            uint64_t v105 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v255, (uint64_t)&v289, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v250, v234, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v290 + 1))
            {
              if ((void)v294) {
                goto LABEL_177;
              }
              outlined destroy of Any?((uint64_t)&v289, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v250, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v255, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_147;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v289, (uint64_t)v249, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!(void)v294) {
              goto LABEL_176;
            }
            long long v144 = *(_OWORD *)(v234 + 48);
            v247[2] = *(_OWORD *)(v234 + 32);
            v247[3] = v144;
            uint64_t v248 = *(void *)(v234 + 64);
            long long v145 = *(_OWORD *)(v234 + 16);
            v247[0] = *(_OWORD *)v234;
            v247[1] = v145;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v249, (uint64_t)v246);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v247, (uint64_t)v245);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v246, (uint64_t)&v241, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v245, (uint64_t)v233, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (*((void *)&v242 + 1))
            {
              if (!v244)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v241);
LABEL_145:
                char v136 = 0;
                goto LABEL_146;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v241, (uint64_t)v238);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v233, (uint64_t)v237);
              uint64_t v146 = v239;
              uint64_t v226 = v240;
              char v225 = __swift_project_boxed_opaque_existential_1(v238, v239);
              uint64_t v232 = &v193;
              uint64_t v147 = *(void *)(v146 - 8);
              MEMORY[0x1F4188790](v225);
              char v149 = (char *)&v193 - ((v148 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v237, (uint64_t)&v236);
              uint64_t v150 = type metadata accessor for Optional();
              int v231 = &v193;
              uint64_t v151 = *(void *)(v150 - 8);
              MEMORY[0x1F4188790](v150);
              uint64_t v153 = (char *)&v193 - v152;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v154 = swift_dynamicCast();
              uint64_t v155 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v147 + 56);
              if (v154)
              {
                v155(v153, 0, 1, v146);
                (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v149, v153, v146);
                char v136 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v147 + 8))(v149, v146);
              }
              else
              {
                v155(v153, 1, 1, v146);
                (*(void (**)(char *, uint64_t))(v151 + 8))(v153, v150);
                char v136 = 0;
              }
              uint64_t v64 = v219;
              uint64_t v135 = v227;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v237);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v238);
            }
            else
            {
              if (v244)
              {
                outlined destroy of Any?((uint64_t)v233, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_145;
              }
              char v136 = 1;
            }
LABEL_146:
            outlined destroy of Any?((uint64_t)v245, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v246, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v247);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v249);
            outlined destroy of Any?((uint64_t)&v289, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v250, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v255, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v136 & 1) == 0) {
              goto LABEL_178;
            }
LABEL_147:
            v134 += 2;
            ++v133;
            uint64_t v128 = v235;
            if (v137 == v64)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v65 = v230;
              uint64_t v105 = *(uint64_t **)(v230 + 64);
              uint64_t v114 = *(void *)(v230 + 88);
              uint64_t v213 = v205;
              uint64_t v109 = v223;
              *(void *)&long long v289 = v223;
              *((void *)&v289 + 1) = v212;
              uint64_t v84 = (uint64_t)v203;
              unint64_t v224 = v212;
              *(void *)&long long v290 = v203;
              uint64_t v113 = v204 + 1;
              if (!__OFADD__(v204, 1)) {
                goto LABEL_116;
              }
              __break(1u);
LABEL_176:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v249);
LABEL_177:
              outlined destroy of Any?((uint64_t)&v289, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v250, v105);
              outlined destroy of Any?((uint64_t)&v255, v105);
LABEL_178:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v65 = v230;
              uint64_t v114 = v206;
              uint64_t v84 = v207;
              unint64_t v117 = v224;
              goto LABEL_179;
            }
          }
        }
      }
      int v120 = *((unsigned __int8 *)v105 + 18);
      char v121 = (4 * v120 + 8) & 0x3C;
      unint64_t v122 = (v224 >> v121) & 0xF;
      *(void *)&long long v241 = v122;
      if (v120)
      {
        swift_unknownObjectRetain();
        char v123 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v105 + 3), (uint64_t *)&v241, (uint64_t)&v289, (uint64_t)v105, v120);
        uint64_t result = swift_unknownObjectRelease();
        if (v123)
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v212 = *((void *)&v289 + 1);
          goto LABEL_131;
        }
      }
      else
      {
        unint64_t v124 = v122 + 1;
        if (v122 + 1 < *((unsigned __int16 *)v105 + 8))
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v212 = (v124 << v121) | ((-15 << v121) - 1) & v117;
          goto LABEL_138;
        }
      }
      if (v105)
      {
        int v125 = *((unsigned __int8 *)v105 + 18);
        uint64_t v126 = *((unsigned __int16 *)v105 + 8);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v212 = ((-15 << ((4 * v125 + 8) & 0x3C)) - 1) & v125 | (unint64_t)(v126 << ((4 * v125 + 8) & 0x3C));
      }
      else
      {
        unint64_t v212 = 0;
      }
      uint64_t v105 = 0;
      *(void *)&long long v289 = v114;
      goto LABEL_138;
    }
LABEL_74:
    swift_unknownObjectRetain();
    uint64_t v85 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v223, v83, v84, v66, v67);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_108;
  }
  uint64_t v235 = v67;
  uint64_t v71 = *(unsigned __int8 *)(v66 + 18);
  if (*(unsigned char *)(v66 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v72 = v70;
    uint64_t v73 = v66;
    while (1)
    {
      uint64_t v76 = *(unsigned __int16 *)(v73 + 16);
      if (!*(_WORD *)(v73 + 16)) {
        goto LABEL_58;
      }
      uint64_t v77 = *(void *)(v73 + 40);
      BOOL v36 = __OFSUB__(v72, v77);
      uint64_t v78 = v72 - v77;
      if (v36) {
        goto LABEL_205;
      }
      if (__OFADD__(v78, 1)) {
        goto LABEL_206;
      }
      if (v78 + 1 < 1)
      {
        uint64_t v76 = 0;
      }
      else
      {
        if (v76 == 1)
        {
          uint64_t v72 = v78;
LABEL_58:
          if (v72) {
            goto LABEL_202;
          }
          goto LABEL_59;
        }
        unsigned int v79 = (uint64_t *)(v73 + 64);
        uint64_t v80 = 1;
        while (1)
        {
          uint64_t v81 = *v79;
          v79 += 3;
          uint64_t v72 = v78 - v81;
          if (__OFSUB__(v78, v81)) {
            goto LABEL_199;
          }
          if (__OFADD__(v72, 1)) {
            goto LABEL_200;
          }
          if (v72 + 1 < 1) {
            break;
          }
          ++v80;
          uint64_t v78 = v72;
          if (v76 == v80) {
            goto LABEL_58;
          }
        }
        uint64_t v76 = v80;
        uint64_t v72 = v78;
      }
LABEL_59:
      char v74 = (4 * *(unsigned char *)(v73 + 18) + 8) & 0x3C;
      uint64_t v71 = ((-15 << v74) - 1) & v71 | (v76 << v74);
      uint64_t v75 = *(void *)(v73 + 24 + 24 * v76);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v73 = v75;
      if (!*(unsigned char *)(v75 + 18)) {
        goto LABEL_83;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v72 = v70;
  uint64_t v75 = v66;
LABEL_83:
  uint64_t v89 = *(unsigned __int16 *)(v75 + 16);
  uint64_t v84 = v75;
  if (*(_WORD *)(v75 + 16))
  {
    uint64_t v90 = *(void *)(v75 + 24);
    BOOL v36 = __OFSUB__(v72, v90);
    uint64_t v91 = v72 - v90;
    uint64_t v67 = v235;
    if (v36)
    {
LABEL_238:
      __break(1u);
      goto LABEL_239;
    }
    if (__OFADD__(v91, 1))
    {
LABEL_239:
      __break(1u);
      goto LABEL_240;
    }
    if (v91 + 1 < 1)
    {
      uint64_t v89 = 0;
LABEL_106:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v83 = v71 & 0xFFFFFFFFFFFFF0FFLL | (v89 << 8);
      uint64_t v65 = v230;
      uint64_t v64 = v219;
      unint64_t v224 = v83;
      goto LABEL_74;
    }
    if (v89 != 1)
    {
      char v95 = (uint64_t *)(v75 + 48);
      uint64_t v96 = 1;
      while (1)
      {
        uint64_t v97 = *v95;
        v95 += 3;
        uint64_t v72 = v91 - v97;
        if (__OFSUB__(v91, v97)) {
          goto LABEL_234;
        }
        if (__OFADD__(v72, 1)) {
          goto LABEL_235;
        }
        if (v72 + 1 < 1) {
          break;
        }
        ++v96;
        uint64_t v91 = v72;
        if (v89 == v96) {
          goto LABEL_105;
        }
      }
      uint64_t v89 = v96;
      uint64_t v72 = v91;
      goto LABEL_106;
    }
    uint64_t v72 = v91;
  }
  else
  {
    uint64_t v67 = v235;
  }
LABEL_105:
  if (!v72) {
    goto LABEL_106;
  }
LABEL_241:
  __break(1u);
  return result;
}

__n128 AttributedString.Runs.NSAttributesSlice.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 168);
  long long v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.index(after:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v129 = a2;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v142 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v144 = v3;
  uint64_t v145 = v5;
  long long v6 = *(_OWORD *)(v2 + 176);
  long long v197 = *(_OWORD *)(v2 + 160);
  long long v198 = v6;
  uint64_t v7 = *(void *)(v2 + 192);
  uint64_t v146 = *(void *)(v2 + 200);
  uint64_t v199 = v7;
  long long v8 = *(_OWORD *)(v2 + 112);
  long long v193 = *(_OWORD *)(v2 + 96);
  long long v194 = v8;
  long long v9 = *(_OWORD *)(v2 + 144);
  long long v195 = *(_OWORD *)(v2 + 128);
  long long v196 = v9;
  long long v10 = *(_OWORD *)(v2 + 48);
  v190[2] = *(_OWORD *)(v2 + 32);
  v190[3] = v10;
  long long v11 = *(_OWORD *)(v2 + 80);
  long long v191 = *(_OWORD *)(v2 + 64);
  long long v192 = v11;
  long long v12 = *(_OWORD *)(v2 + 16);
  v190[0] = *(_OWORD *)v2;
  v190[1] = v12;
  uint64_t v13 = *((void *)&v197 + 1);
  long long v14 = v198;
  uint64_t v15 = v7;
  outlined retain of AttributedString.Runs((uint64_t)v190);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_143;
  }
  uint64_t v139 = v4;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  if (!*(void *)(v146 + 16))
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }
  uint64_t v148 = *(void *)(v146 + 16);
  uint64_t v126 = v13;
  long long v127 = v14;
  uint64_t v128 = v15;
  uint64_t v17 = *(void *)&v190[0];
  uint64_t v18 = *(void *)(*(void *)&v190[0] + 64);
  uint64_t v19 = *(void *)(*(void *)&v190[0] + 72);
  uint64_t v20 = *(void *)(*(void *)&v190[0] + 80);
  uint64_t v147 = *(void *)(*(void *)&v190[0] + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v18) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  if (result < 0) {
    goto LABEL_146;
  }
  uint64_t v22 = result;
  if (v21 < result) {
    goto LABEL_146;
  }
  uint64_t v134 = v17;
  uint64_t v155 = (uint64_t *)v20;
  uint64_t v156 = v19;
  if (!v18 || result >= v20 || !*(_WORD *)(v18 + 16))
  {
    unint64_t v35 = swift_unknownObjectRetain();
    unint64_t v36 = specialized Rope._endPath.getter(v35);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v27 = 0;
    uint64_t v24 = 0;
    if (!v18)
    {
      uint64_t v156 = 0;
LABEL_49:
      uint64_t v141 = v22 - v24;
      if (__OFSUB__(v22, v24))
      {
LABEL_147:
        __break(1u);
        goto LABEL_148;
      }
      long long v43 = *(_OWORD *)(v17 + 16);
      long long v44 = *(_OWORD *)(v17 + 48);
      v187[1] = *(_OWORD *)(v17 + 32);
      v187[2] = v44;
      v187[0] = v43;
      long long v45 = *(_OWORD *)(v17 + 16);
      v188[1] = *(_OWORD *)(v17 + 32);
      v188[2] = v44;
      v188[0] = v45;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v188, (uint64_t)v189);
      outlined retain of Locale((uint64_t)v189);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v187);
      if (__OFSUB__(0, v24))
      {
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      uint64_t v46 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v124 = v48;
      uint64_t v125 = v47;
      uint64_t v123 = v49;
      uint64_t result = outlined release of Locale((uint64_t)&v186);
      uint64_t v133 = *((void *)&v191 + 1);
      if (v156 >= *((uint64_t *)&v191 + 1))
      {
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      if (v147 != *(void *)(v17 + 88))
      {
LABEL_150:
        __break(1u);
        goto LABEL_151;
      }
      unint64_t v143 = v36;
      uint64_t v121 = v46;
      uint64_t v50 = *(uint64_t **)(v17 + 64);
      if (v27)
      {
        unint64_t v51 = v143;
        unint64_t v52 = v27 + 24 * ((v143 >> ((4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v53 = *(void *)(v52 + 40);
        uint64_t v151 = *(void *)(v52 + 32);
        swift_bridgeObjectRetain();
        uint64_t v122 = v53;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v54 = v147;
        uint64_t v55 = v147;
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v51 = v143;
        specialized Rope._Node.subscript.getter(v143, (uint64_t)v50);
        uint64_t v151 = v56;
        uint64_t v122 = v57;
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v50 = *(uint64_t **)(v17 + 64);
        uint64_t v55 = *(void *)(v17 + 88);
        uint64_t v54 = v147;
      }
      int v120 = (long long *)(v17 + 16);
      uint64_t v138 = v156 + 1;
      *(void *)&long long v171 = v54;
      *((void *)&v171 + 1) = v51;
      int v154 = (long long *)((char *)&v164 + 8);
      uint64_t v155 = &v174;
      *(void *)&long long v172 = v27;
      uint64_t v132 = (uint64_t *)(v146 + 40);
      uint64_t v58 = v148;
LABEL_57:
      if (v54 != v55) {
        goto LABEL_139;
      }
      uint64_t v136 = v55;
      uint64_t v140 = v27;
      if (v27)
      {
        unint64_t v59 = v143;
        unint64_t v60 = *(void *)(v27 + 24 * ((v143 >> ((4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v59 = v143;
        unint64_t v60 = specialized Rope._Node.subscript.getter(v143, (uint64_t)v50);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v141, v60)) {
        goto LABEL_140;
      }
      uint64_t v131 = v141 + v60;
      if (v50)
      {
        unint64_t v61 = ((-15 << ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v50 + 18) | ((unint64_t)*((unsigned __int16 *)v50 + 8) << ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C));
        uint64_t result = swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v61 = 0;
      }
      uint64_t v62 = v151;
      if (v59 >= v61) {
        goto LABEL_141;
      }
      if (v140)
      {
        char v63 = (4 * *(unsigned char *)(v140 + 18) + 8) & 0x3C;
        unint64_t v64 = ((v59 >> v63) & 0xF) + 1;
        if (v64 < *(unsigned __int16 *)(v140 + 16))
        {
          unint64_t v137 = (v64 << v63) | ((-15 << v63) - 1) & v59;
          uint64_t result = swift_unknownObjectRelease_n();
LABEL_72:
          uint64_t v50 = (uint64_t *)v172;
LABEL_80:
          if (v138 == v133)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
LABEL_121:
            if (v136 == *(void *)(v17 + 88))
            {
              if (v140)
              {
                unint64_t v100 = *(void *)(v140 + 24 * ((v59 >> ((4 * *(unsigned char *)(v140 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v101 = *(void *)(v17 + 64);
                swift_unknownObjectRetain();
                unint64_t v100 = specialized Rope._Node.subscript.getter(v59, v101);
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              unint64_t v102 = v141 + v100;
              if (!__OFADD__(v141, v100))
              {
                long long v103 = *v120;
                long long v104 = v120[2];
                long long v163 = v120[1];
                long long v164 = v104;
                long long v162 = v103;
                long long v105 = *v120;
                long long v172 = v120[1];
                long long v173 = v104;
                long long v171 = v105;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v171, (uint64_t)&v176);
                outlined retain of Locale((uint64_t)&v176);
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)&v162);
                uint64_t result = BigString.Index.utf8Offset.getter();
                if (!__OFSUB__(v102, result))
                {
                  uint64_t v106 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v108 = v107;
                  uint64_t v110 = v109;
                  uint64_t v112 = v111;
                  outlined release of Locale((uint64_t)&v181);
                  uint64_t v113 = v126;
                  uint64_t v115 = *((void *)&v127 + 1);
                  uint64_t v116 = v127;
                  uint64_t v114 = v128;
                  if (static BigString.Index.< infix(_:_:)())
                  {
                    uint64_t v106 = v113;
                    uint64_t v108 = v116;
                    uint64_t v110 = v115;
                    uint64_t v112 = v114;
                  }
                  char v117 = static BigString.Index.< infix(_:_:)();
                  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v190);
                  if ((v117 & 1) == 0)
                  {
                    char v118 = v129;
                    *uint64_t v129 = v106;
                    v118[1] = v108;
                    v118[2] = v110;
                    v118[3] = v112;
                    return result;
                  }
                  goto LABEL_154;
                }
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
                goto LABEL_157;
              }
LABEL_152:
              __break(1u);
              goto LABEL_153;
            }
LABEL_151:
            __break(1u);
            goto LABEL_152;
          }
          if ((void)v171 != *(void *)(v17 + 88)) {
            goto LABEL_142;
          }
          uint64_t v147 = v171;
          uint64_t v130 = v50;
          if (v50)
          {
            uint64_t v72 = &v50[3 * ((v137 >> ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v73 = v72[4];
            uint64_t v74 = v72[5];
            swift_bridgeObjectRetain();
            uint64_t v135 = v74;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v75 = *(void *)(v17 + 64);
            swift_unknownObjectRetain();
            uint64_t v62 = v151;
            specialized Rope._Node.subscript.getter(v137, v75);
            uint64_t v135 = v76;
            uint64_t v73 = v77;
            swift_unknownObjectRelease();
          }
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v78 = 0;
          unsigned int v79 = v132;
          uint64_t v156 = v73;
          while (1)
          {
            uint64_t v81 = v78 + 1;
            if (__OFADD__(v78, 1))
            {
              __break(1u);
LABEL_134:
              __break(1u);
              goto LABEL_135;
            }
            uint64_t v83 = *(v79 - 1);
            uint64_t v82 = *v79;
            if (*(void *)(v62 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v82);
              if (v85)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v62 + 56) + 72 * v84, (uint64_t)&v181);
              }
              else
              {
                uint64_t v185 = 0;
                long long v183 = 0u;
                long long v184 = 0u;
                long long v181 = 0u;
                long long v182 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v73 = v156;
              if (!*(void *)(v156 + 16))
              {
LABEL_95:
                uint64_t v180 = 0;
                long long v178 = 0u;
                long long v179 = 0u;
                long long v176 = 0u;
                long long v177 = 0u;
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v185 = 0;
              long long v183 = 0u;
              long long v184 = 0u;
              long long v181 = 0u;
              long long v182 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v73 + 16)) {
                goto LABEL_95;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v82);
            if (v87)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v73 + 56) + 72 * v86, (uint64_t)&v176);
            }
            else
            {
              uint64_t v180 = 0;
              long long v178 = 0u;
              long long v179 = 0u;
              long long v176 = 0u;
              long long v177 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_102:
            uint64_t v50 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v181, (uint64_t)&v171, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v176, (uint64_t)v155, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v172 + 1))
            {
              if (v175) {
                goto LABEL_119;
              }
              outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v181, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_89;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v171, (uint64_t)v170, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v175) {
              goto LABEL_118;
            }
            long long v88 = *((_OWORD *)v155 + 3);
            v168[2] = *((_OWORD *)v155 + 2);
            v168[3] = v88;
            uint64_t v169 = v155[8];
            long long v89 = *((_OWORD *)v155 + 1);
            v168[0] = *(_OWORD *)v155;
            v168[1] = v89;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v170, (uint64_t)v167);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v168, (uint64_t)v166);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v167, (uint64_t)&v162, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v166, (uint64_t)v154, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (*((void *)&v163 + 1))
            {
              if (!v165)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v162);
LABEL_87:
                char v80 = 0;
                goto LABEL_88;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v162, (uint64_t)v159);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v154, (uint64_t)v158);
              uint64_t v90 = v160;
              uint64_t v150 = v161;
              char v149 = __swift_project_boxed_opaque_existential_1(v159, v160);
              uint64_t v153 = &v119;
              uint64_t v91 = *(void *)(v90 - 8);
              MEMORY[0x1F4188790](v149);
              uint64_t v93 = (char *)&v119 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v158, (uint64_t)&v157);
              uint64_t v94 = type metadata accessor for Optional();
              uint64_t v152 = &v119;
              uint64_t v95 = *(void *)(v94 - 8);
              MEMORY[0x1F4188790](v94);
              uint64_t v97 = (char *)&v119 - v96;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v98 = swift_dynamicCast();
              long long v99 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56);
              if (v98)
              {
                v99(v97, 0, 1, v90);
                (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v93, v97, v90);
                char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v90);
              }
              else
              {
                v99(v97, 1, 1, v90);
                (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
                char v80 = 0;
              }
              uint64_t v58 = v148;
              uint64_t v62 = v151;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
            }
            else
            {
              if (v165)
              {
                outlined destroy of Any?((uint64_t)v154, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_87;
              }
              char v80 = 1;
            }
LABEL_88:
            outlined destroy of Any?((uint64_t)v166, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v167, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v168);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v170);
            outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v181, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v80 & 1) == 0) {
              goto LABEL_120;
            }
LABEL_89:
            v79 += 2;
            ++v78;
            uint64_t v73 = v156;
            if (v81 == v58)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v17 = v134;
              uint64_t v50 = *(uint64_t **)(v134 + 64);
              uint64_t v55 = *(void *)(v134 + 88);
              uint64_t v141 = v131;
              uint64_t v54 = v147;
              *(void *)&long long v171 = v147;
              *((void *)&v171 + 1) = v137;
              uint64_t v27 = (uint64_t)v130;
              unint64_t v143 = v137;
              *(void *)&long long v172 = v130;
              BOOL v30 = __OFADD__(v138++, 1);
              if (!v30) {
                goto LABEL_57;
              }
              __break(1u);
LABEL_118:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v170);
LABEL_119:
              outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v176, v50);
              outlined destroy of Any?((uint64_t)&v181, v50);
LABEL_120:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v17 = v134;
              unint64_t v59 = v143;
              goto LABEL_121;
            }
          }
        }
      }
      int v65 = *((unsigned __int8 *)v50 + 18);
      char v66 = (4 * v65 + 8) & 0x3C;
      uint64_t v67 = (v59 >> v66) & 0xF;
      *(void *)&long long v162 = v67;
      if (v65)
      {
        swift_unknownObjectRetain();
        char v68 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v50 + 3), (uint64_t *)&v162, (uint64_t)&v171, (uint64_t)v50, v65);
        uint64_t result = swift_unknownObjectRelease();
        if (v68)
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v137 = *((void *)&v171 + 1);
          uint64_t v62 = v151;
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v69 = v67 + 1;
        if (v67 + 1 < (unint64_t)*((unsigned __int16 *)v50 + 8))
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v137 = (v69 << v66) | ((-15 << v66) - 1) & v59;
LABEL_79:
          uint64_t v62 = v151;
          goto LABEL_80;
        }
      }
      if (v50)
      {
        int v70 = *((unsigned __int8 *)v50 + 18);
        uint64_t v71 = *((unsigned __int16 *)v50 + 8);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v137 = ((-15 << ((4 * v70 + 8) & 0x3C)) - 1) & v70 | (unint64_t)(v71 << ((4 * v70 + 8) & 0x3C));
      }
      else
      {
        unint64_t v137 = 0;
      }
      uint64_t v50 = 0;
      *(void *)&long long v171 = v136;
      goto LABEL_79;
    }
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v156 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v147, v36, v27, v18, v156);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  uint64_t v23 = *(unsigned __int8 *)(v18 + 18);
  if (*(unsigned char *)(v18 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v24 = v22;
    uint64_t v25 = v18;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v25 + 16);
      if (!*(_WORD *)(v25 + 16)) {
        break;
      }
      uint64_t v29 = *(void *)(v25 + 40);
      BOOL v30 = __OFSUB__(v24, v29);
      uint64_t v31 = v24 - v29;
      if (v30) {
        goto LABEL_137;
      }
      if (__OFADD__(v31, 1)) {
        goto LABEL_138;
      }
      if (v31 + 1 < 1)
      {
        uint64_t v28 = 0;
        goto LABEL_16;
      }
      if (v28 == 1)
      {
        uint64_t v24 = v31;
        break;
      }
      char v32 = (uint64_t *)(v25 + 64);
      uint64_t v33 = 1;
      while (1)
      {
        uint64_t v34 = *v32;
        v32 += 3;
        uint64_t v24 = v31 - v34;
        if (__OFSUB__(v31, v34)) {
          goto LABEL_134;
        }
        if (__OFADD__(v24, 1))
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (v24 + 1 < 1) {
          break;
        }
        ++v33;
        uint64_t v31 = v24;
        if (v28 == v33) {
          goto LABEL_15;
        }
      }
      uint64_t v28 = v33;
      uint64_t v24 = v31;
LABEL_16:
      char v26 = (4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C;
      uint64_t v23 = ((-15 << v26) - 1) & v23 | (v28 << v26);
      uint64_t v27 = *(void *)(v25 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v25 = v27;
      if (!*(unsigned char *)(v27 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_15:
    if (!v24) {
      goto LABEL_16;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v24 = v22;
  uint64_t v27 = v18;
LABEL_33:
  uint64_t v37 = *(unsigned __int16 *)(v27 + 16);
  if (*(_WORD *)(v27 + 16))
  {
    uint64_t v38 = *(void *)(v27 + 24);
    BOOL v30 = __OFSUB__(v24, v38);
    uint64_t v39 = v24 - v38;
    uint64_t v17 = v134;
    if (v30)
    {
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    if (__OFADD__(v39, 1))
    {
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
    if (v39 + 1 < 1)
    {
      uint64_t v37 = 0;
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v36 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v37 << 8);
      goto LABEL_31;
    }
    if (v37 != 1)
    {
      uint64_t v40 = (uint64_t *)(v27 + 48);
      uint64_t v41 = 1;
      while (1)
      {
        uint64_t v42 = *v40;
        v40 += 3;
        uint64_t v24 = v39 - v42;
        if (__OFSUB__(v39, v42)) {
          goto LABEL_155;
        }
        if (__OFADD__(v24, 1)) {
          goto LABEL_156;
        }
        if (v24 + 1 < 1) {
          break;
        }
        ++v41;
        uint64_t v39 = v24;
        if (v37 == v41) {
          goto LABEL_46;
        }
      }
      uint64_t v37 = v41;
      uint64_t v24 = v39;
      goto LABEL_47;
    }
    uint64_t v24 = v39;
  }
  else
  {
    uint64_t v17 = v134;
  }
LABEL_46:
  if (!v24) {
    goto LABEL_47;
  }
LABEL_159:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.makeIterator()@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[9];
  long long v3 = v1[11];
  *(_OWORD *)&v29[32] = v1[10];
  long long v30 = v3;
  long long v4 = v1[11];
  long long v31 = v1[12];
  long long v5 = v1[5];
  long long v6 = v1[7];
  long long v27 = v1[6];
  long long v7 = v27;
  long long v28 = v6;
  long long v8 = v1[7];
  long long v9 = v1[9];
  *(_OWORD *)uint64_t v29 = v1[8];
  long long v10 = *(_OWORD *)v29;
  *(_OWORD *)&v29[16] = v9;
  long long v11 = v1[1];
  long long v12 = v1[3];
  long long v23 = v1[2];
  long long v13 = v23;
  long long v24 = v12;
  long long v14 = v1[3];
  long long v15 = v1[5];
  long long v25 = v1[4];
  long long v16 = v25;
  long long v26 = v15;
  long long v17 = v1[1];
  v22[0] = *v1;
  long long v18 = v22[0];
  v22[1] = v17;
  a1[10] = *(_OWORD *)&v29[32];
  a1[11] = v4;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  long long v19 = v1[12];
  *a1 = v18;
  a1[1] = v11;
  long long v20 = *(_OWORD *)&v29[8];
  a1[12] = v19;
  a1[13] = v20;
  a1[14] = *(_OWORD *)&v29[24];
  return outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v22);
}

uint64_t AttributedString.Runs.NSAttributesSlice.index(before:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  int v120 = a2;
  uint64_t v132 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[3];
  uint64_t v138 = a1[2];
  uint64_t v139 = v3;
  long long v5 = *(_OWORD *)(v2 + 176);
  long long v175 = *(_OWORD *)(v2 + 160);
  long long v176 = v5;
  uint64_t v6 = *(void *)(v2 + 192);
  uint64_t v134 = *(void *)(v2 + 200);
  uint64_t v177 = v6;
  long long v7 = *(_OWORD *)(v2 + 112);
  v172[6] = *(_OWORD *)(v2 + 96);
  v172[7] = v7;
  long long v8 = *(_OWORD *)(v2 + 144);
  long long v173 = *(_OWORD *)(v2 + 128);
  long long v174 = v8;
  long long v9 = *(_OWORD *)(v2 + 48);
  v172[2] = *(_OWORD *)(v2 + 32);
  v172[3] = v9;
  long long v10 = *(_OWORD *)(v2 + 80);
  v172[4] = *(_OWORD *)(v2 + 64);
  v172[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 16);
  v172[0] = *(_OWORD *)v2;
  v172[1] = v11;
  uint64_t v12 = *((void *)&v173 + 1);
  long long v13 = v174;
  uint64_t v14 = v175;
  outlined retain of AttributedString.Runs((uint64_t)v172);
  uint64_t v121 = v12;
  long long v122 = v13;
  uint64_t v123 = v14;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  if (!*(void *)(v134 + 16))
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  uint64_t v133 = *(void *)(v134 + 16);
  uint64_t v16 = *(void *)&v172[0];
  uint64_t v17 = *(void *)(*(void *)&v172[0] + 64);
  uint64_t v18 = *(void *)(*(void *)&v172[0] + 72);
  uint64_t v19 = *(void *)(*(void *)&v172[0] + 80);
  uint64_t v20 = *(void *)(*(void *)&v172[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v119 = v4;
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v21 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  if (v17) {
    uint64_t v22 = v19;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v21 < 0 || v22 < v21) {
    goto LABEL_131;
  }
  uint64_t v126 = v16;
  uint64_t v129 = v20;
  uint64_t v142 = v18;
  if (!v17 || !*(_WORD *)(v17 + 16) || v21 >= v19)
  {
    unint64_t v35 = swift_unknownObjectRetain();
    unint64_t v36 = specialized Rope._endPath.getter(v35);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v37 = 0;
    uint64_t v24 = 0;
    goto LABEL_47;
  }
  uint64_t v23 = *(unsigned __int8 *)(v17 + 18);
  if (*(unsigned char *)(v17 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v24 = v21;
    uint64_t v25 = v17;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v25 + 16);
      if (!*(_WORD *)(v25 + 16)) {
        break;
      }
      uint64_t v29 = *(void *)(v25 + 40);
      BOOL v30 = __OFSUB__(v24, v29);
      uint64_t v31 = v24 - v29;
      if (v30) {
        goto LABEL_125;
      }
      if (__OFADD__(v31, 1)) {
        goto LABEL_126;
      }
      if (v31 + 1 < 1)
      {
        uint64_t v28 = 0;
        goto LABEL_17;
      }
      if (v28 == 1)
      {
        uint64_t v24 = v31;
        break;
      }
      char v32 = (uint64_t *)(v25 + 64);
      uint64_t v33 = 1;
      while (1)
      {
        uint64_t v34 = *v32;
        v32 += 3;
        uint64_t v24 = v31 - v34;
        if (__OFSUB__(v31, v34))
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
        if (__OFADD__(v24, 1)) {
          goto LABEL_122;
        }
        if (v24 + 1 < 1) {
          break;
        }
        ++v33;
        uint64_t v31 = v24;
        if (v28 == v33) {
          goto LABEL_16;
        }
      }
      uint64_t v28 = v33;
      uint64_t v24 = v31;
LABEL_17:
      char v26 = (4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C;
      uint64_t v23 = ((-15 << v26) - 1) & v23 | (v28 << v26);
      uint64_t v27 = *(void *)(v25 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v25 = v27;
      if (!*(unsigned char *)(v27 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_16:
    if (!v24) {
      goto LABEL_17;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v24 = v21;
  uint64_t v27 = v17;
LABEL_33:
  uint64_t v38 = *(unsigned __int16 *)(v27 + 16);
  uint64_t v37 = v27;
  if (*(_WORD *)(v27 + 16))
  {
    uint64_t v39 = *(void *)(v27 + 24);
    BOOL v30 = __OFSUB__(v24, v39);
    uint64_t v40 = v24 - v39;
    if (v30)
    {
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    if (__OFADD__(v40, 1))
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if (v40 + 1 < 1)
    {
      uint64_t v38 = 0;
LABEL_46:
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v36 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
LABEL_47:
      unint64_t v135 = v36;
      if (v17)
      {
        swift_unknownObjectRetain();
        uint64_t v44 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v129, v36, v37, v17, v142);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v45 = v21 - v24;
        if (!__OFSUB__(v21, v24)) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v45 = v21 - v24;
        if (!__OFSUB__(v21, v24))
        {
LABEL_49:
          uint64_t v21 = v126;
          if (v129 != *(void *)(v126 + 88))
          {
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
          if (v37)
          {
            unint64_t v46 = v37 + 24 * ((v135 >> ((4 * *(unsigned char *)(v37 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v48 = *(void *)(v46 + 32);
            uint64_t v47 = *(void *)(v46 + 40);
            swift_bridgeObjectRetain();
            uint64_t result = swift_bridgeObjectRetain();
            goto LABEL_56;
          }
LABEL_55:
          uint64_t v49 = *(void *)(v21 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v135, v49);
          uint64_t v48 = v50;
          uint64_t v47 = v51;
          uint64_t result = swift_unknownObjectRelease();
LABEL_56:
          if (*((uint64_t *)&v172[0] + 1) >= v44)
          {
LABEL_111:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_115:
            long long v98 = *(_OWORD *)(v21 + 16);
            long long v99 = *(_OWORD *)(v21 + 48);
            long long v149 = *(_OWORD *)(v21 + 32);
            long long v150 = v99;
            long long v148 = v98;
            long long v100 = *(_OWORD *)(v21 + 16);
            long long v158 = *(_OWORD *)(v21 + 32);
            long long v159 = v99;
            long long v157 = v100;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v157, (uint64_t)&v162);
            outlined retain of Locale((uint64_t)&v162);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)&v148);
            uint64_t result = BigString.Index.utf8Offset.getter();
            if (!__OFSUB__(v45, result))
            {
              uint64_t v101 = BigString.UTF8View.index(_:offsetBy:)();
              uint64_t v103 = v102;
              uint64_t v105 = v104;
              uint64_t v107 = v106;
              outlined release of Locale((uint64_t)&v167);
              uint64_t v108 = v121;
              long long v110 = v122;
              uint64_t v109 = v123;
              if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
              {
                uint64_t v101 = v108;
                uint64_t v105 = *((void *)&v110 + 1);
                uint64_t v103 = v110;
                uint64_t v107 = v109;
              }
              char v111 = static BigString.Index.< infix(_:_:)();
              uint64_t result = outlined release of AttributedString.Runs((uint64_t)v172);
              if ((v111 & 1) == 0)
              {
                uint64_t v112 = v120;
                *int v120 = v101;
                v112[1] = v103;
                v112[2] = v105;
                v112[3] = v107;
                return result;
              }
              goto LABEL_134;
            }
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
            goto LABEL_137;
          }
          uint64_t v130 = v48;
          uint64_t v131 = v37;
          uint64_t v140 = (long long *)((char *)&v150 + 8);
          uint64_t v141 = &v160;
          uint64_t v116 = v47;
          char v117 = (uint64_t *)(v134 + 40);
          uint64_t v52 = v129;
          uint64_t v114 = *((void *)&v172[0] + 1);
LABEL_58:
          uint64_t v124 = v45;
          uint64_t v125 = v44;
          uint64_t v53 = *(void *)(v21 + 64);
          uint64_t v54 = *(void *)(v21 + 88);
          *(void *)&long long v157 = v52;
          unint64_t v55 = v135;
          *((void *)&v157 + 1) = v135;
          *(void *)&long long v158 = v131;
          if (v52 != v54)
          {
LABEL_137:
            __break(1u);
            goto LABEL_138;
          }
          uint64_t v56 = v52;
          if (v53)
          {
            unint64_t v57 = *(unsigned __int8 *)(v53 + 18);
            uint64_t result = swift_unknownObjectRetain();
            if (v55 <= v57) {
              goto LABEL_138;
            }
          }
          else if (!v135)
          {
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
          if (v131)
          {
            char v58 = (4 * *(unsigned char *)(v131 + 18) + 8) & 0x3C;
            if (((v55 >> v58) & 0xF) != 0)
            {
              unint64_t v59 = ((((v55 >> v58) & 0xF) - 1) << v58) | ((-15 << v58) - 1) & v55;
              *((void *)&v157 + 1) = v59;
LABEL_70:
              uint64_t v64 = v131;
              char v65 = (4 * *(unsigned char *)(v131 + 18) + 8) & 0x3C;
              unint64_t v135 = v59;
              unint64_t v66 = *(void *)(v131 + 24 * ((v59 >> v65) & 0xF) + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v67 = 0;
LABEL_74:
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (__OFSUB__(v124, v66))
              {
LABEL_139:
                __break(1u);
                goto LABEL_140;
              }
              if (v56 != *(void *)(v21 + 88))
              {
LABEL_140:
                __break(1u);
                goto LABEL_141;
              }
              uint64_t v115 = v124 - v66;
              uint64_t v131 = v64;
              if (v67)
              {
                uint64_t v68 = *(void *)(v21 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v135, v68);
                uint64_t v118 = v69;
                uint64_t v71 = v70;
                swift_unknownObjectRelease();
              }
              else
              {
                unint64_t v72 = v64 + 24 * ((v135 >> ((4 * *(unsigned char *)(v64 + 18) + 8) & 0x3C)) & 0xF);
                uint64_t v71 = *(void *)(v72 + 32);
                uint64_t v73 = *(void *)(v72 + 40);
                swift_bridgeObjectRetain();
                uint64_t v118 = v73;
                swift_bridgeObjectRetain();
              }
              --v125;
              uint64_t result = swift_bridgeObjectRetain();
              uint64_t v74 = 0;
              uint64_t v75 = v117;
              uint64_t v76 = v133;
              uint64_t v77 = v130;
              uint64_t v142 = v71;
              while (1)
              {
                uint64_t v79 = v74 + 1;
                if (__OFADD__(v74, 1)) {
                  goto LABEL_123;
                }
                uint64_t v80 = *(v75 - 1);
                uint64_t v81 = *v75;
                if (*(void *)(v77 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v81);
                  if (v83)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(void *)(v77 + 56) + 72 * v82, (uint64_t)&v167);
                  }
                  else
                  {
                    uint64_t v171 = 0;
                    long long v169 = 0u;
                    long long v170 = 0u;
                    long long v167 = 0u;
                    long long v168 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v71 = v142;
                  if (!*(void *)(v142 + 16))
                  {
LABEL_89:
                    uint64_t v166 = 0;
                    long long v164 = 0u;
                    long long v165 = 0u;
                    long long v162 = 0u;
                    long long v163 = 0u;
                    goto LABEL_96;
                  }
                }
                else
                {
                  uint64_t v171 = 0;
                  long long v169 = 0u;
                  long long v170 = 0u;
                  long long v167 = 0u;
                  long long v168 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(void *)(v71 + 16)) {
                    goto LABEL_89;
                  }
                }
                swift_bridgeObjectRetain();
                unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v81);
                if (v85)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(void *)(v71 + 56) + 72 * v84, (uint64_t)&v162);
                }
                else
                {
                  uint64_t v166 = 0;
                  long long v164 = 0u;
                  long long v165 = 0u;
                  long long v162 = 0u;
                  long long v163 = 0u;
                }
                swift_bridgeObjectRelease();
LABEL_96:
                swift_bridgeObjectRelease();
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v167, (uint64_t)&v157, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v162, (uint64_t)v141, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!*((void *)&v158 + 1))
                {
                  if (v161) {
                    goto LABEL_113;
                  }
                  outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t result = outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_83;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v157, (uint64_t)v156, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v161)
                {
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v156);
LABEL_113:
                  outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v21 = v126;
                  uint64_t v45 = v124;
                  goto LABEL_115;
                }
                long long v86 = *((_OWORD *)v141 + 3);
                v154[2] = *((_OWORD *)v141 + 2);
                v154[3] = v86;
                uint64_t v155 = v141[8];
                long long v87 = *((_OWORD *)v141 + 1);
                v154[0] = *(_OWORD *)v141;
                v154[1] = v87;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v156, (uint64_t)v153);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v154, (uint64_t)v152);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v153, (uint64_t)&v148, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v152, (uint64_t)v140, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (*((void *)&v149 + 1))
                {
                  if (!v151)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
LABEL_81:
                    char v78 = 0;
                    goto LABEL_82;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v148, (uint64_t)v145);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v140, (uint64_t)v144);
                  uint64_t v88 = v146;
                  uint64_t v128 = v147;
                  long long v127 = __swift_project_boxed_opaque_existential_1(v145, v146);
                  unint64_t v137 = &v113;
                  uint64_t v89 = *(void *)(v88 - 8);
                  MEMORY[0x1F4188790](v127);
                  uint64_t v91 = (char *)&v113 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v144, (uint64_t)&v143);
                  uint64_t v92 = type metadata accessor for Optional();
                  uint64_t v136 = &v113;
                  uint64_t v93 = *(void *)(v92 - 8);
                  MEMORY[0x1F4188790](v92);
                  uint64_t v95 = (char *)&v113 - v94;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  int v96 = swift_dynamicCast();
                  uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56);
                  if (v96)
                  {
                    v97(v95, 0, 1, v88);
                    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v91, v95, v88);
                    char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v88);
                  }
                  else
                  {
                    v97(v95, 1, 1, v88);
                    (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v92);
                    char v78 = 0;
                  }
                  uint64_t v76 = v133;
                  uint64_t v77 = v130;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
                }
                else
                {
                  if (v151)
                  {
                    outlined destroy of Any?((uint64_t)v140, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_81;
                  }
                  char v78 = 1;
                }
LABEL_82:
                outlined destroy of Any?((uint64_t)v152, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v153, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v154);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v156);
                outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t result = outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v78 & 1) == 0) {
                  goto LABEL_114;
                }
LABEL_83:
                v75 += 2;
                ++v74;
                uint64_t v71 = v142;
                if (v79 == v76)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v45 = v115;
                  uint64_t v44 = v125;
                  uint64_t v21 = v126;
                  uint64_t v52 = v129;
                  if (v114 < v125) {
                    goto LABEL_58;
                  }
                  uint64_t v45 = v115;
                  goto LABEL_111;
                }
              }
            }
          }
          int v60 = *(unsigned __int8 *)(v53 + 18);
          char v61 = (4 * v60 + 8) & 0x3C;
          uint64_t v62 = (v55 >> v61) & 0xF;
          *(void *)&long long v148 = v62;
          if (v60)
          {
            swift_unknownObjectRetain();
            char v63 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v53 + 16, v53 + 24, (uint64_t *)&v148, (uint64_t)&v157, v60);
            uint64_t result = swift_unknownObjectRelease();
            if (v63)
            {
              if ((void)v157 != v56)
              {
LABEL_141:
                __break(1u);
                goto LABEL_142;
              }
              unint64_t v59 = *((void *)&v157 + 1);
              uint64_t v131 = v158;
              if ((void)v158) {
                goto LABEL_70;
              }
              goto LABEL_73;
            }
          }
          else if (v62)
          {
            unint64_t v59 = ((v62 - 1) << v61) | ((-15 << v61) - 1) & v55;
            *((void *)&v157 + 1) = v59;
            *(void *)&long long v158 = v53;
            uint64_t v131 = v53;
            if (v53) {
              goto LABEL_70;
            }
LABEL_73:
            swift_unknownObjectRetain();
            unint64_t v135 = v59;
            unint64_t v66 = specialized Rope._Node.subscript.getter(v59, v53);
            swift_unknownObjectRelease();
            uint64_t v64 = 0;
            char v67 = 1;
            goto LABEL_74;
          }
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
      }
      __break(1u);
      goto LABEL_55;
    }
    if (v38 != 1)
    {
      uint64_t v41 = (uint64_t *)(v27 + 48);
      uint64_t v42 = 1;
      while (1)
      {
        uint64_t v43 = *v41;
        v41 += 3;
        uint64_t v24 = v40 - v43;
        if (__OFSUB__(v40, v43)) {
          goto LABEL_135;
        }
        if (__OFADD__(v24, 1)) {
          goto LABEL_136;
        }
        if (v24 + 1 < 1) {
          break;
        }
        ++v42;
        uint64_t v40 = v24;
        if (v38 == v42) {
          goto LABEL_45;
        }
      }
      uint64_t v38 = v42;
      uint64_t v24 = v40;
      goto LABEL_46;
    }
    uint64_t v24 = v40;
  }
LABEL_45:
  if (!v24) {
    goto LABEL_46;
  }
LABEL_145:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.subscript.getter(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v259 = a2;
  uint64_t v260 = a1;
  long long v4 = v3[9];
  long long v5 = v3[11];
  long long v340 = v3[10];
  long long v341 = v5;
  long long v6 = v3[11];
  long long v342 = v3[12];
  long long v7 = v3[5];
  long long v8 = v3[7];
  long long v336 = v3[6];
  long long v337 = v8;
  long long v9 = v3[7];
  long long v10 = v3[9];
  long long v338 = v3[8];
  long long v339 = v10;
  long long v11 = v3[1];
  long long v12 = v3[3];
  long long v332 = v3[2];
  long long v333 = v12;
  long long v13 = v3[3];
  long long v14 = v3[5];
  long long v334 = v3[4];
  long long v335 = v14;
  long long v15 = v3[1];
  v331[0] = *v3;
  v331[1] = v15;
  long long v364 = v4;
  long long v365 = v340;
  long long v366 = v6;
  long long v360 = v7;
  long long v361 = v336;
  long long v362 = v9;
  long long v363 = v338;
  v358[1] = v11;
  v358[2] = v332;
  v358[3] = v13;
  long long v359 = v334;
  uint64_t v16 = (uint64_t *)a3[1];
  unint64_t v18 = a3[2];
  uint64_t v17 = (void *)a3[3];
  uint64_t v19 = *((void *)v3 + 24);
  uint64_t v20 = *a3;
  uint64_t v367 = v19;
  v358[0] = v331[0];
  uint64_t v357 = *((void *)&v342 + 1);
  long long v21 = v4;
  uint64_t v276 = *((void *)&v6 + 1);
  uint64_t v277 = v19;
  uint64_t v278 = v6;
  outlined retain of AttributedString.Runs((uint64_t)v358);
  uint64_t v286 = (void *)*((void *)&v338 + 1);
  long long v287 = v21;
  long long v289 = (void *)v340;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_273;
  }
  uint64_t v265 = *((void *)&v340 + 1);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  uint64_t v280 = v357;
  uint64_t v292 = *(void *)(v357 + 16);
  if (!v292)
  {
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }
  uint64_t v23 = v17;
  uint64_t v24 = v16;
  uint64_t v25 = *(void *)&v358[0];
  unint64_t v26 = v18;
  uint64_t v27 = v20;
  uint64_t v28 = *(void *)(*(void *)&v358[0] + 64);
  uint64_t v29 = *(void *)(*(void *)&v358[0] + 72);
  uint64_t v30 = *(void *)(*(void *)&v358[0] + 80);
  uint64_t v281 = *(void *)(*(void *)&v358[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v282 = v27;
  long long v283 = v24;
  unint64_t v31 = v26;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v28) {
    uint64_t v32 = v30;
  }
  else {
    uint64_t v32 = 0;
  }
  if (result < 0) {
    goto LABEL_276;
  }
  uint64_t v33 = result;
  if (v32 < result) {
    goto LABEL_276;
  }
  uint64_t v279 = v23;
  unint64_t v267 = v26;
  uint64_t v288 = v25;
  if (v28 && result < v30 && *(_WORD *)(v28 + 16))
  {
    uint64_t v294 = v29;
    uint64_t v34 = *(unsigned __int8 *)(v28 + 18);
    if (*(unsigned char *)(v28 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v35 = v33;
      uint64_t v36 = v28;
      while (1)
      {
        uint64_t v39 = *(unsigned __int16 *)(v36 + 16);
        if (!*(_WORD *)(v36 + 16)) {
          break;
        }
        uint64_t v40 = *(void *)(v36 + 40);
        BOOL v41 = __OFSUB__(v35, v40);
        uint64_t v42 = v35 - v40;
        if (v41) {
          goto LABEL_265;
        }
        if (__OFADD__(v42, 1)) {
          goto LABEL_266;
        }
        if (v42 + 1 < 1)
        {
          uint64_t v39 = 0;
          goto LABEL_16;
        }
        if (v39 == 1)
        {
          uint64_t v35 = v42;
          break;
        }
        uint64_t v43 = (uint64_t *)(v36 + 64);
        uint64_t v44 = 1;
        while (1)
        {
          uint64_t v45 = *v43;
          v43 += 3;
          uint64_t v35 = v42 - v45;
          if (__OFSUB__(v42, v45)) {
            goto LABEL_258;
          }
          if (__OFADD__(v35, 1))
          {
LABEL_259:
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
            goto LABEL_263;
          }
          if (v35 + 1 < 1) {
            break;
          }
          ++v44;
          uint64_t v42 = v35;
          if (v39 == v44) {
            goto LABEL_15;
          }
        }
        uint64_t v39 = v44;
        uint64_t v35 = v42;
LABEL_16:
        char v37 = (4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C;
        uint64_t v34 = ((-15 << v37) - 1) & v34 | (v39 << v37);
        uint64_t v38 = *(void *)(v36 + 24 + 24 * v39);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v36 = v38;
        if (!*(unsigned char *)(v38 + 18)) {
          goto LABEL_33;
        }
      }
LABEL_15:
      if (!v35) {
        goto LABEL_16;
      }
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v35 = v33;
    uint64_t v38 = v28;
LABEL_33:
    uint64_t v47 = *(unsigned __int16 *)(v38 + 16);
    if (*(_WORD *)(v38 + 16))
    {
      uint64_t v48 = *(void *)(v38 + 24);
      BOOL v41 = __OFSUB__(v35, v48);
      uint64_t v49 = v35 - v48;
      unint64_t v31 = v267;
      uint64_t v25 = v288;
      if (v41)
      {
LABEL_305:
        __break(1u);
        goto LABEL_306;
      }
      if (__OFADD__(v49, 1))
      {
LABEL_306:
        __break(1u);
        goto LABEL_307;
      }
      if (v49 + 1 < 1)
      {
        uint64_t v47 = 0;
      }
      else
      {
        if (v47 == 1)
        {
          uint64_t v35 = v49;
          goto LABEL_46;
        }
        uint64_t v50 = (uint64_t *)(v38 + 48);
        uint64_t v51 = 1;
        while (1)
        {
          uint64_t v52 = *v50;
          v50 += 3;
          uint64_t v35 = v49 - v52;
          if (__OFSUB__(v49, v52)) {
            goto LABEL_292;
          }
          if (__OFADD__(v35, 1)) {
            goto LABEL_293;
          }
          if (v35 + 1 < 1) {
            break;
          }
          ++v51;
          uint64_t v49 = v35;
          if (v47 == v51) {
            goto LABEL_46;
          }
        }
        uint64_t v47 = v51;
        uint64_t v35 = v49;
      }
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v268 = v34 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
      uint64_t v23 = v279;
      uint64_t v29 = v294;
      uint64_t v269 = v38;
      goto LABEL_31;
    }
    unint64_t v31 = v267;
    uint64_t v25 = v288;
LABEL_46:
    if (v35)
    {
LABEL_307:
      __break(1u);
      goto LABEL_308;
    }
    goto LABEL_47;
  }
  unint64_t v46 = swift_unknownObjectRetain();
  unint64_t v268 = specialized Rope._endPath.getter(v46);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v35 = 0;
  uint64_t v269 = 0;
  if (v28)
  {
LABEL_31:
    swift_unknownObjectRetain();
    long long v290 = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v281, v268, v269, v28, v29);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  long long v290 = 0;
LABEL_49:
  uint64_t v53 = v33 - v35;
  if (__OFSUB__(v33, v35))
  {
LABEL_277:
    __break(1u);
    goto LABEL_278;
  }
  long long v54 = *(_OWORD *)(v25 + 16);
  v349[1] = *(_OWORD *)(v25 + 32);
  long long v350 = *(_OWORD *)(v25 + 48);
  v349[0] = v54;
  long long v55 = *(_OWORD *)(v25 + 16);
  long long v56 = *(_OWORD *)(v25 + 32);
  _OWORD v351[2] = v350;
  v351[1] = v56;
  v351[0] = v55;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v351, (uint64_t)v352);
  outlined retain of Locale((uint64_t)v352);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v349);
  if (__OFSUB__(0, v35))
  {
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
  uint64_t v270 = (_OWORD *)(v25 + 16);
  uint64_t v266 = BigString.UTF8View.index(_:offsetBy:)();
  char v58 = v57;
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t result = outlined release of Locale((uint64_t)&v327);
  uint64_t v271 = *((void *)&v359 + 1);
  if (v290 == *((uint64_t **)&v359 + 1))
  {
    outlined release of AttributedString.Runs((uint64_t)v358);
    long long v257 = v23;
    uint64_t v258 = 0;
    long long v255 = v283;
    uint64_t v256 = v282;
    unint64_t v63 = v31;
    goto LABEL_121;
  }
  if (v281 != *(void *)(v25 + 88))
  {
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }
  long long v263 = (uint64_t *)*((void *)&v358[0] + 1);
  uint64_t v275 = v62;
  if (v269)
  {
    uint64_t v64 = v269 + 24 * ((v268 >> ((4 * *(unsigned char *)(v269 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v65 = *(void *)(v64 + 32);
    uint64_t v66 = *(void *)(v64 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    char v67 = v58;
    uint64_t v68 = *(void *)(v25 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v268, v68);
    uint64_t v65 = v69;
    char v58 = v67;
    uint64_t v66 = v70;
    uint64_t result = swift_unknownObjectRelease();
  }
  long long v261 = v58;
  if ((uint64_t)v263 >= (uint64_t)v290)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v258 = 0;
    goto LABEL_116;
  }
  uint64_t v252 = v66;
  uint64_t v258 = 0;
  uint64_t v293 = v315;
  long long v291 = (_OWORD *)((char *)v302 + 8);
  long long v255 = (uint64_t *)(v280 + 40);
  unint64_t v71 = v268;
  uint64_t v72 = v269;
  uint64_t v274 = v65;
  uint64_t v264 = v60;
LABEL_59:
  unint64_t v262 = v53;
  uint64_t v73 = *(void *)(v25 + 64);
  uint64_t v74 = *(void *)(v25 + 88);
  *(void *)&long long v312 = v281;
  *((void *)&v312 + 1) = v71;
  *(void *)&long long v313 = v72;
  if (v281 != v74) {
    goto LABEL_299;
  }
  unint64_t v75 = v71;
  if (v73)
  {
    unint64_t v76 = *(unsigned __int8 *)(v73 + 18);
    uint64_t v77 = v72;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v72 = v77;
    if (v75 <= v76) {
      goto LABEL_300;
    }
  }
  else if (!v71)
  {
    goto LABEL_300;
  }
  if (!v72 || (char v78 = (4 * *(unsigned char *)(v72 + 18) + 8) & 0x3C, ((v75 >> v78) & 0xF) == 0))
  {
    int v80 = *(unsigned __int8 *)(v73 + 18);
    char v81 = (4 * v80 + 8) & 0x3C;
    uint64_t v82 = (v75 >> v81) & 0xF;
    *(void *)&long long v300 = v82;
    if (v80)
    {
      swift_unknownObjectRetain();
      char v83 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v73 + 16, v73 + 24, (uint64_t *)&v300, (uint64_t)&v312, v80);
      uint64_t result = swift_unknownObjectRelease();
      if ((v83 & 1) == 0) {
        goto LABEL_304;
      }
      if ((void)v312 != v281) {
        goto LABEL_303;
      }
      uint64_t v72 = v313;
      unint64_t v79 = *((void *)&v312 + 1);
      if ((void)v313) {
        goto LABEL_71;
      }
    }
    else
    {
      if (!v82) {
        goto LABEL_304;
      }
      unint64_t v79 = ((v82 - 1) << v81) | ((-15 << v81) - 1) & v75;
      *((void *)&v312 + 1) = v79;
      *(void *)&long long v313 = v73;
      uint64_t v72 = v73;
      if (v73) {
        goto LABEL_71;
      }
    }
    swift_unknownObjectRetain();
    unint64_t v85 = specialized Rope._Node.subscript.getter(v79, v73);
    swift_unknownObjectRelease();
    uint64_t v256 = 0;
    char v86 = 1;
    goto LABEL_75;
  }
  unint64_t v79 = ((((v75 >> v78) & 0xF) - 1) << v78) | ((-15 << v78) - 1) & v75;
  *((void *)&v312 + 1) = v79;
LABEL_71:
  unsigned int v84 = (v79 >> ((4 * *(unsigned char *)(v72 + 18) + 8) & 0x3C)) & 0xF;
  uint64_t v256 = v72;
  unint64_t v85 = *(void *)(v72 + 24 * v84 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v86 = 0;
LABEL_75:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v262, v85)) {
    goto LABEL_301;
  }
  if (v281 != *(void *)(v25 + 88)) {
    goto LABEL_302;
  }
  uint64_t v253 = v262 - v85;
  unint64_t v254 = v79;
  if (v86)
  {
    uint64_t v87 = *(void *)(v25 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v79, v87);
    long long v257 = v88;
    uint64_t v90 = v89;
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v91 = v256 + 24 * ((v79 >> ((4 * *(unsigned char *)(v256 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v90 = *(void *)(v91 + 32);
    uint64_t v92 = *(void **)(v91 + 40);
    swift_bridgeObjectRetain();
    long long v257 = v92;
    swift_bridgeObjectRetain();
  }
  long long v290 = (uint64_t *)((char *)v290 - 1);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v93 = 0;
  uint64_t v94 = v255;
  uint64_t v95 = v274;
  uint64_t v294 = v90;
  while (1)
  {
    uint64_t v97 = v93 + 1;
    if (__OFADD__(v93, 1)) {
      goto LABEL_262;
    }
    uint64_t v99 = *(v94 - 1);
    uint64_t v98 = *v94;
    if (*(void *)(v95 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v98);
      if (v101)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v95 + 56) + 72 * v100, (uint64_t)&v322);
      }
      else
      {
        uint64_t v326 = 0;
        long long v324 = 0u;
        long long v325 = 0u;
        long long v322 = 0u;
        long long v323 = 0u;
      }
      swift_bridgeObjectRelease();
      uint64_t v90 = v294;
      if (!*(void *)(v294 + 16))
      {
LABEL_90:
        uint64_t v321 = 0;
        long long v319 = 0u;
        long long v320 = 0u;
        long long v317 = 0u;
        long long v318 = 0u;
        goto LABEL_97;
      }
    }
    else
    {
      uint64_t v326 = 0;
      long long v324 = 0u;
      long long v325 = 0u;
      long long v322 = 0u;
      long long v323 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(v90 + 16)) {
        goto LABEL_90;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v98);
    if (v103)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v90 + 56) + 72 * v102, (uint64_t)&v317);
    }
    else
    {
      uint64_t v321 = 0;
      long long v319 = 0u;
      long long v320 = 0u;
      long long v317 = 0u;
      long long v318 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_97:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v322, (uint64_t)&v312, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v317, (uint64_t)v293, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v313 + 1))
    {
      if (v316) {
        goto LABEL_114;
      }
      outlined destroy of Any?((uint64_t)&v312, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v317, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v322, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_84;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v312, (uint64_t)v311, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v316) {
      break;
    }
    long long v104 = *((_OWORD *)v293 + 3);
    long long v308 = *((_OWORD *)v293 + 2);
    long long v309 = v104;
    uint64_t v310 = *((void *)v293 + 8);
    long long v105 = *((_OWORD *)v293 + 1);
    long long v306 = *(_OWORD *)v293;
    long long v307 = v105;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v311, (uint64_t)v355);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v306, (uint64_t)v353);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v355, (uint64_t)&v300, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v353, (uint64_t)v291, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!*((void *)&v301 + 1))
    {
      if (!v303)
      {
        char v96 = 1;
        goto LABEL_83;
      }
      outlined destroy of Any?((uint64_t)v291, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_82:
      char v96 = 0;
      goto LABEL_83;
    }
    if (!v303)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v300);
      goto LABEL_82;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v300, (uint64_t)&v346);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v291, (uint64_t)v345);
    uint64_t v106 = *((void *)&v347 + 1);
    uint64_t v273 = v348;
    unint64_t v272 = (unint64_t)__swift_project_boxed_opaque_existential_1(&v346, *((uint64_t *)&v347 + 1));
    long long v285 = v250;
    uint64_t v107 = *(void *)(v106 - 8);
    MEMORY[0x1F4188790](v272);
    uint64_t v109 = (char *)v250 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v345, (uint64_t)v343);
    uint64_t v110 = type metadata accessor for Optional();
    unint64_t v284 = (unint64_t)v250;
    uint64_t v111 = *(void *)(v110 - 8);
    MEMORY[0x1F4188790](v110);
    uint64_t v113 = (char *)v250 - v112;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    int v114 = swift_dynamicCast();
    uint64_t v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
    if (v114)
    {
      v115(v113, 0, 1, v106);
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v109, v113, v106);
      char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v106);
    }
    else
    {
      v115(v113, 1, 1, v106);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v113, v110);
      char v96 = 0;
    }
    uint64_t v95 = v274;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v345);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v346);
LABEL_83:
    outlined destroy of Any?((uint64_t)v353, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v355, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v306);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v311);
    outlined destroy of Any?((uint64_t)&v312, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v317, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t result = outlined destroy of Any?((uint64_t)&v322, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v96 & 1) == 0) {
      goto LABEL_115;
    }
LABEL_84:
    v94 += 2;
    ++v93;
    uint64_t v90 = v294;
    if (v97 == v292)
    {
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v357);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v116 = v253;
      unint64_t v71 = v254;
      uint64_t v53 = v253;
      uint64_t v25 = v288;
      uint64_t v72 = v256;
      if ((uint64_t)v263 >= (uint64_t)v290)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v53 = v116;
        goto LABEL_116;
      }
      goto LABEL_59;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)v311);
LABEL_114:
  outlined destroy of Any?((uint64_t)&v312, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v317, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v322, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_115:
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v357);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v53 = v262;
LABEL_116:
  char v117 = v270;
  long long v118 = *v270;
  long long v347 = v270[1];
  long long v348 = v270[2];
  long long v346 = v118;
  long long v119 = *v270;
  long long v120 = v270[1];
  _OWORD v353[2] = v348;
  v353[1] = v120;
  v353[0] = v119;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v353, (uint64_t)v354);
  outlined retain of Locale((uint64_t)v354);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v346);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v53, result)) {
    goto LABEL_297;
  }
  uint64_t v121 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v123 = v122;
  unint64_t v125 = v124;
  long long v127 = v126;
  outlined release of Locale((uint64_t)&v328);
  uint64_t v128 = v286;
  unint64_t v63 = *((void *)&v287 + 1);
  uint64_t v129 = (uint64_t *)v287;
  uint64_t v130 = v289;
  if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t v128 = (void *)v121;
    uint64_t v129 = v123;
    unint64_t v63 = v125;
    uint64_t v130 = v127;
  }
  long long v131 = v117[1];
  v345[0] = *v117;
  v345[1] = v131;
  v345[2] = v117[2];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(after:)();
  outlined release of Locale((uint64_t)&v329);
  long long v255 = v129;
  uint64_t v256 = (uint64_t)v128;
  long long v257 = v130;
  char v132 = static BigString.Index.< infix(_:_:)();
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v358);
  if (v132)
  {
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
    goto LABEL_305;
  }
  uint64_t v25 = v288;
LABEL_121:
  outlined retain of AttributedString.Runs((uint64_t)v358);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_279;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
  unint64_t v254 = v63;
  uint64_t v133 = *(void *)(v25 + 64);
  uint64_t v134 = *(void *)(v25 + 72);
  uint64_t v135 = *(void *)(v25 + 80);
  long long v285 = *(void **)(v25 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v133) {
    uint64_t v136 = v135;
  }
  else {
    uint64_t v136 = 0;
  }
  if (result < 0) {
    goto LABEL_281;
  }
  uint64_t v137 = result;
  if (v136 < result) {
    goto LABEL_281;
  }
  if (!v133 || result >= v135 || !*(_WORD *)(v133 + 16))
  {
    unint64_t v149 = swift_unknownObjectRetain();
    unint64_t v284 = specialized Rope._endPath.getter(v149);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v150 = 0;
    uint64_t v139 = 0;
    if (v133) {
      goto LABEL_150;
    }
    uint64_t v151 = 0;
LABEL_168:
    uint64_t v275 = v137 - v139;
    if (__OFSUB__(v137, v139))
    {
LABEL_282:
      __break(1u);
      goto LABEL_283;
    }
    long long v158 = *v270;
    v343[1] = v270[1];
    long long v344 = v270[2];
    v343[0] = v158;
    long long v159 = *v270;
    long long v160 = v270[1];
    _OWORD v355[2] = v344;
    v355[1] = v160;
    v355[0] = v159;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v355, (uint64_t)v356);
    outlined retain of Locale((uint64_t)v356);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v343);
    if (__OFSUB__(0, v139))
    {
LABEL_283:
      __break(1u);
      goto LABEL_284;
    }
    uint64_t v161 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v163 = v162;
    uint64_t v252 = v164;
    uint64_t v253 = v165;
    uint64_t result = outlined release of Locale((uint64_t)&v330);
    if (v151 >= v271)
    {
LABEL_284:
      __break(1u);
      goto LABEL_285;
    }
    if (v285 != *(void **)(v25 + 88))
    {
LABEL_285:
      __break(1u);
      goto LABEL_286;
    }
    v250[0] = v163;
    v250[1] = v161;
    uint64_t v166 = *(uint64_t **)(v25 + 64);
    uint64_t v167 = v150;
    if (v150)
    {
      unint64_t v168 = v284;
      unint64_t v169 = v150 + 24 * ((v284 >> ((4 * *(unsigned char *)(v150 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v170 = *(void *)(v169 + 40);
      *((void *)&v287 + 1) = *(void *)(v169 + 32);
      swift_bridgeObjectRetain();
      uint64_t v251 = v170;
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v171 = (uint64_t)v285;
      uint64_t v172 = (uint64_t)v285;
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v168 = v284;
      specialized Rope._Node.subscript.getter(v284, (uint64_t)v166);
      *((void *)&v287 + 1) = v173;
      uint64_t v251 = v174;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v166 = *(uint64_t **)(v25 + 64);
      uint64_t v172 = *(void *)(v25 + 88);
      uint64_t v171 = (uint64_t)v285;
    }
    uint64_t v273 = v151 + 1;
    uint64_t v293 = v315;
    *(void *)&long long v312 = v171;
    *((void *)&v312 + 1) = v168;
    long long v291 = (_OWORD *)((char *)v302 + 8);
    long long v263 = (uint64_t *)(v280 + 40);
    *(void *)&long long v313 = v167;
LABEL_176:
    if (v171 != v172) {
      goto LABEL_269;
    }
    uint64_t v266 = v172;
    if (v167)
    {
      unint64_t v175 = v284;
      unint64_t v176 = *(void *)(v167 + 24 * ((v284 >> ((4 * *(unsigned char *)(v167 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v175 = v284;
      unint64_t v176 = specialized Rope._Node.subscript.getter(v284, (uint64_t)v166);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v275, v176)) {
      goto LABEL_270;
    }
    unint64_t v262 = v275 + v176;
    if (!v166) {
      goto LABEL_271;
    }
    unint64_t v177 = ((-15 << ((4 * *((unsigned char *)v166 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v166 + 18) | ((unint64_t)*((unsigned __int16 *)v166 + 8) << ((4 * *((unsigned char *)v166 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
    if (v175 >= v177) {
      goto LABEL_271;
    }
    uint64_t v274 = v167;
    if (v167)
    {
      char v178 = (4 * *(unsigned char *)(v167 + 18) + 8) & 0x3C;
      unint64_t v179 = ((v175 >> v178) & 0xF) + 1;
      if (v179 < *(unsigned __int16 *)(v167 + 16))
      {
        unint64_t v272 = (v179 << v178) | ((-15 << v178) - 1) & v175;
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_191:
        uint64_t v166 = (uint64_t *)v313;
LABEL_195:
        uint64_t v190 = *((void *)&v287 + 1);
        if (v273 == v271)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
LABEL_236:
          if (v266 == *(void *)(v25 + 88))
          {
            if (v167)
            {
              unint64_t v219 = *(void *)(v167 + 24 * ((v175 >> ((4 * *(unsigned char *)(v167 + 18) + 8) & 0x3C)) & 0xF) + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v220 = *(void *)(v25 + 64);
              swift_unknownObjectRetain();
              unint64_t v219 = specialized Rope._Node.subscript.getter(v175, v220);
              swift_unknownObjectRelease();
            }
            uint64_t v221 = v270;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v222 = v275 + v219;
            if (!__OFADD__(v275, v219))
            {
              long long v223 = *v221;
              long long v224 = v221[2];
              long long v301 = v221[1];
              v302[0] = v224;
              long long v300 = v223;
              long long v225 = *v221;
              long long v313 = v221[1];
              long long v314 = v224;
              long long v312 = v225;
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v312, (uint64_t)&v317);
              outlined retain of Locale((uint64_t)&v317);
              BigString.utf8.getter();
              outlined release of Locale((uint64_t)&v300);
              uint64_t result = BigString.Index.utf8Offset.getter();
              if (!__OFSUB__(v222, result))
              {
                uint64_t v226 = BigString.UTF8View.index(_:offsetBy:)();
                uint64_t v228 = v227;
                uint64_t v230 = v229;
                uint64_t v232 = v231;
                outlined release of Locale((uint64_t)&v322);
                uint64_t v233 = v265;
                uint64_t v235 = v277;
                uint64_t v234 = v278;
                uint64_t v236 = v276;
                char v237 = static BigString.Index.< infix(_:_:)();
                if (v237) {
                  uint64_t v226 = v233;
                }
                else {
                  uint64_t v234 = v228;
                }
                if (v237)
                {
                  uint64_t v230 = v236;
                  uint64_t v232 = v235;
                }
                char v238 = static BigString.Index.< infix(_:_:)();
                uint64_t result = outlined release of AttributedString.Runs((uint64_t)v358);
                if ((v238 & 1) == 0)
                {
                  if (v281 == *(void *)(v288 + 88))
                  {
                    if (v269)
                    {
                      uint64_t v239 = *(void *)(v269 + 24 * ((v268 >> ((4 * *(unsigned char *)(v269 + 18) + 8) & 0x3C)) & 0xF) + 40);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      uint64_t v240 = *(void *)(v288 + 64);
                      swift_unknownObjectRetain();
                      specialized Rope._Node.subscript.getter(v268, v240);
                      uint64_t v239 = v241;
                      swift_unknownObjectRelease();
                    }
                    long long v243 = v255;
                    uint64_t v242 = v256;
                    outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v331);
                    uint64_t v244 = swift_bridgeObjectRetain();
                    uint64_t v245 = specialized _NativeDictionary.filter(_:)(v244, (uint64_t)v331);
                    swift_bridgeObjectRelease_n();
                    uint64_t v246 = v260;
                    *uint64_t v260 = v245;
                    v246[1] = v239;
                    unint64_t v247 = v254;
                    uint64_t v248 = v257;
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if ((result & 1) == 0)
                    {
                      char v249 = v259;
                      *uint64_t v259 = v242;
                      v249[1] = (uint64_t)v243;
                      v249[2] = v247;
                      v249[3] = (uint64_t)v248;
                      v249[4] = v226;
                      v249[5] = v234;
                      v249[6] = v230;
                      v249[7] = v232;
                      return result;
                    }
                    goto LABEL_291;
                  }
LABEL_290:
                  __break(1u);
LABEL_291:
                  __break(1u);
LABEL_292:
                  __break(1u);
LABEL_293:
                  __break(1u);
LABEL_294:
                  __break(1u);
LABEL_295:
                  __break(1u);
                  goto LABEL_296;
                }
LABEL_289:
                __break(1u);
                goto LABEL_290;
              }
LABEL_288:
              __break(1u);
              goto LABEL_289;
            }
LABEL_287:
            __break(1u);
            goto LABEL_288;
          }
LABEL_286:
          __break(1u);
          goto LABEL_287;
        }
        if ((void)v312 != *(void *)(v25 + 88)) {
          goto LABEL_272;
        }
        long long v285 = (void *)v312;
        long long v261 = v166;
        if (v166)
        {
          long long v191 = &v166[3 * ((v272 >> ((4 * *((unsigned char *)v166 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v192 = v191[4];
          uint64_t v193 = v191[5];
          swift_bridgeObjectRetain();
          uint64_t v264 = v193;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v194 = *(void *)(v25 + 64);
          swift_unknownObjectRetain();
          uint64_t v190 = *((void *)&v287 + 1);
          specialized Rope._Node.subscript.getter(v272, v194);
          uint64_t v264 = v195;
          uint64_t v192 = v196;
          swift_unknownObjectRelease();
        }
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v197 = 0;
        long long v198 = v263;
        uint64_t v294 = v192;
        while (1)
        {
          uint64_t v200 = v197 + 1;
          if (__OFADD__(v197, 1))
          {
            __break(1u);
LABEL_258:
            __break(1u);
            goto LABEL_259;
          }
          uint64_t v202 = *(v198 - 1);
          uint64_t v201 = *v198;
          if (*(void *)(v190 + 16))
          {
            swift_bridgeObjectRetain_n();
            unint64_t v203 = specialized __RawDictionaryStorage.find<A>(_:)(v202, v201);
            if (v204)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v190 + 56) + 72 * v203, (uint64_t)&v322);
            }
            else
            {
              uint64_t v326 = 0;
              long long v324 = 0u;
              long long v325 = 0u;
              long long v322 = 0u;
              long long v323 = 0u;
            }
            swift_bridgeObjectRelease();
            uint64_t v192 = v294;
            if (!*(void *)(v294 + 16))
            {
LABEL_210:
              uint64_t v321 = 0;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              goto LABEL_217;
            }
          }
          else
          {
            uint64_t v326 = 0;
            long long v324 = 0u;
            long long v325 = 0u;
            long long v322 = 0u;
            long long v323 = 0u;
            swift_bridgeObjectRetain();
            if (!*(void *)(v192 + 16)) {
              goto LABEL_210;
            }
          }
          swift_bridgeObjectRetain();
          unint64_t v205 = specialized __RawDictionaryStorage.find<A>(_:)(v202, v201);
          if (v206)
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v192 + 56) + 72 * v205, (uint64_t)&v317);
          }
          else
          {
            uint64_t v321 = 0;
            long long v319 = 0u;
            long long v320 = 0u;
            long long v317 = 0u;
            long long v318 = 0u;
          }
          swift_bridgeObjectRelease();
LABEL_217:
          uint64_t v166 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v322, (uint64_t)&v312, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v317, (uint64_t)v293, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!*((void *)&v313 + 1))
          {
            if (v316) {
              goto LABEL_234;
            }
            outlined destroy of Any?((uint64_t)&v312, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v317, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v322, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_204;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v312, (uint64_t)v311, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v316) {
            goto LABEL_233;
          }
          long long v207 = *((_OWORD *)v293 + 3);
          long long v308 = *((_OWORD *)v293 + 2);
          long long v309 = v207;
          uint64_t v310 = *((void *)v293 + 8);
          long long v208 = *((_OWORD *)v293 + 1);
          long long v306 = *(_OWORD *)v293;
          long long v307 = v208;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v311, (uint64_t)v305);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v306, (uint64_t)v304);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v305, (uint64_t)&v300, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v304, (uint64_t)v291, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (*((void *)&v301 + 1))
          {
            if (!v303)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v300);
LABEL_202:
              char v199 = 0;
              goto LABEL_203;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v300, (uint64_t)v297);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v291, (uint64_t)v296);
            uint64_t v209 = v298;
            *(void *)&long long v287 = v299;
            uint64_t v286 = __swift_project_boxed_opaque_existential_1(v297, v298);
            long long v290 = v250;
            uint64_t v210 = *(void *)(v209 - 8);
            MEMORY[0x1F4188790](v286);
            unint64_t v212 = (char *)v250 - ((v211 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v296, (uint64_t)&v295);
            uint64_t v213 = type metadata accessor for Optional();
            long long v289 = v250;
            uint64_t v214 = *(void *)(v213 - 8);
            MEMORY[0x1F4188790](v213);
            uint64_t v216 = (char *)v250 - v215;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v217 = swift_dynamicCast();
            uint64_t v218 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v210 + 56);
            if (v217)
            {
              v218(v216, 0, 1, v209);
              (*(void (**)(char *, char *, uint64_t))(v210 + 32))(v212, v216, v209);
              char v199 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v210 + 8))(v212, v209);
            }
            else
            {
              v218(v216, 1, 1, v209);
              (*(void (**)(char *, uint64_t))(v214 + 8))(v216, v213);
              char v199 = 0;
            }
            uint64_t v190 = *((void *)&v287 + 1);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v296);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v297);
            uint64_t v25 = v288;
          }
          else
          {
            if (v303)
            {
              outlined destroy of Any?((uint64_t)v291, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_202;
            }
            char v199 = 1;
          }
LABEL_203:
          outlined destroy of Any?((uint64_t)v304, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v305, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v306);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v311);
          outlined destroy of Any?((uint64_t)&v312, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v317, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = outlined destroy of Any?((uint64_t)&v322, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v199 & 1) == 0) {
            goto LABEL_235;
          }
LABEL_204:
          v198 += 2;
          ++v197;
          uint64_t v192 = v294;
          if (v200 == v292)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v357);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v166 = *(uint64_t **)(v25 + 64);
            uint64_t v172 = *(void *)(v25 + 88);
            uint64_t v275 = v262;
            uint64_t v171 = (uint64_t)v285;
            *(void *)&long long v312 = v285;
            *((void *)&v312 + 1) = v272;
            uint64_t v167 = (uint64_t)v261;
            unint64_t v284 = v272;
            *(void *)&long long v313 = v261;
            BOOL v41 = __OFADD__(v273++, 1);
            if (!v41) {
              goto LABEL_176;
            }
            __break(1u);
LABEL_233:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v311);
LABEL_234:
            outlined destroy of Any?((uint64_t)&v312, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v317, v166);
            outlined destroy of Any?((uint64_t)&v322, v166);
LABEL_235:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v357);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v167 = v274;
            unint64_t v175 = v284;
            goto LABEL_236;
          }
        }
      }
    }
    int v180 = *((unsigned __int8 *)v166 + 18);
    char v181 = (4 * v180 + 8) & 0x3C;
    uint64_t v182 = (v175 >> v181) & 0xF;
    *(void *)&long long v300 = v182;
    if (v180)
    {
      swift_unknownObjectRetain();
      char v183 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v166 + 3), (uint64_t *)&v300, (uint64_t)&v312, (uint64_t)v166, v180);
      swift_unknownObjectRelease();
      uint64_t v167 = v274;
      if (v183)
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v272 = *((void *)&v312 + 1);
        goto LABEL_191;
      }
    }
    else
    {
      uint64_t v184 = v182 + 1;
      if (v182 + 1 < (unint64_t)*((unsigned __int16 *)v166 + 8))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v272 = (v184 << v181) | ((-15 << v181) - 1) & v175;
        uint64_t v167 = v274;
        goto LABEL_195;
      }
    }
    int v185 = *((unsigned __int8 *)v166 + 18);
    uint64_t v186 = *((unsigned __int16 *)v166 + 8);
    uint64_t result = swift_unknownObjectRelease_n();
    char v187 = (4 * v185 + 8) & 0x3C;
    uint64_t v188 = ((-15 << v187) - 1) & v185;
    uint64_t v189 = v186 << v187;
    uint64_t v167 = v274;
    unint64_t v272 = v188 | v189;
    uint64_t v166 = 0;
    *(void *)&long long v312 = v266;
    goto LABEL_195;
  }
  uint64_t v294 = v134;
  uint64_t v138 = *(unsigned __int8 *)(v133 + 18);
  if (*(unsigned char *)(v133 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v139 = v137;
    uint64_t v140 = v133;
    while (1)
    {
      uint64_t v143 = *(unsigned __int16 *)(v140 + 16);
      if (!*(_WORD *)(v140 + 16)) {
        goto LABEL_134;
      }
      uint64_t v144 = *(void *)(v140 + 40);
      BOOL v41 = __OFSUB__(v139, v144);
      uint64_t v145 = v139 - v144;
      if (v41) {
        goto LABEL_267;
      }
      if (__OFADD__(v145, 1)) {
        goto LABEL_268;
      }
      if (v145 + 1 < 1)
      {
        uint64_t v143 = 0;
      }
      else
      {
        if (v143 == 1)
        {
          uint64_t v139 = v145;
LABEL_134:
          if (v139) {
            goto LABEL_264;
          }
          goto LABEL_135;
        }
        uint64_t v146 = (uint64_t *)(v140 + 64);
        uint64_t v147 = 1;
        while (1)
        {
          uint64_t v148 = *v146;
          v146 += 3;
          uint64_t v139 = v145 - v148;
          if (__OFSUB__(v145, v148)) {
            goto LABEL_260;
          }
          if (__OFADD__(v139, 1)) {
            goto LABEL_261;
          }
          if (v139 + 1 < 1) {
            break;
          }
          ++v147;
          uint64_t v145 = v139;
          if (v143 == v147) {
            goto LABEL_134;
          }
        }
        uint64_t v143 = v147;
        uint64_t v139 = v145;
      }
LABEL_135:
      char v141 = (4 * *(unsigned char *)(v140 + 18) + 8) & 0x3C;
      uint64_t v138 = ((-15 << v141) - 1) & v138 | (v143 << v141);
      uint64_t v142 = *(void *)(v140 + 24 + 24 * v143);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v140 = v142;
      if (!*(unsigned char *)(v142 + 18)) {
        goto LABEL_152;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v139 = v137;
  uint64_t v142 = v133;
LABEL_152:
  uint64_t v293 = (unsigned char *)v135;
  uint64_t v152 = *(unsigned __int16 *)(v142 + 16);
  if (*(_WORD *)(v142 + 16))
  {
    uint64_t v153 = *(void *)(v142 + 24);
    BOOL v41 = __OFSUB__(v139, v153);
    uint64_t v154 = v139 - v153;
    uint64_t v25 = v288;
    if (v41)
    {
LABEL_308:
      __break(1u);
      goto LABEL_309;
    }
    uint64_t v150 = v142;
    uint64_t v134 = v294;
    if (__OFADD__(v154, 1))
    {
LABEL_309:
      __break(1u);
      goto LABEL_310;
    }
    if (v154 + 1 < 1)
    {
      uint64_t v152 = 0;
    }
    else
    {
      if (v152 == 1)
      {
        uint64_t v139 = v154;
        goto LABEL_165;
      }
      uint64_t v155 = (uint64_t *)(v150 + 48);
      uint64_t v156 = 1;
      while (1)
      {
        uint64_t v157 = *v155;
        v155 += 3;
        uint64_t v139 = v154 - v157;
        if (__OFSUB__(v154, v157)) {
          goto LABEL_294;
        }
        if (__OFADD__(v139, 1)) {
          goto LABEL_295;
        }
        if (v139 + 1 < 1) {
          break;
        }
        ++v156;
        uint64_t v154 = v139;
        if (v152 == v156) {
          goto LABEL_165;
        }
      }
      uint64_t v152 = v156;
      uint64_t v139 = v154;
    }
LABEL_166:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v284 = v138 & 0xFFFFFFFFFFFFF0FFLL | (v152 << 8);
LABEL_150:
    swift_unknownObjectRetain();
    uint64_t v151 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v285, v284, v150, v133, v134);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_168;
  }
  uint64_t v150 = v142;
  uint64_t v25 = v288;
  uint64_t v134 = v294;
LABEL_165:
  if (!v139) {
    goto LABEL_166;
  }
LABEL_310:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(a1, a2, a3, (void (*)(_OWORD *, uint64_t, void))AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.NSAttributesSlice(uint64_t *a1)
{
  long long v2 = *(_OWORD *)(v1 + 176);
  long long v175 = *(_OWORD *)(v1 + 160);
  long long v176 = v2;
  uint64_t v3 = *(void *)(v1 + 192);
  uint64_t v135 = *(void *)(v1 + 200);
  uint64_t v177 = v3;
  long long v4 = *(_OWORD *)(v1 + 112);
  v172[6] = *(_OWORD *)(v1 + 96);
  v172[7] = v4;
  long long v5 = *(_OWORD *)(v1 + 144);
  long long v173 = *(_OWORD *)(v1 + 128);
  long long v174 = v5;
  long long v6 = *(_OWORD *)(v1 + 48);
  v172[2] = *(_OWORD *)(v1 + 32);
  v172[3] = v6;
  long long v7 = *(_OWORD *)(v1 + 80);
  v172[4] = *(_OWORD *)(v1 + 64);
  v172[5] = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  v172[0] = *(_OWORD *)v1;
  v172[1] = v8;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v121 = a1;
  uint64_t v13 = *((void *)&v173 + 1);
  long long v14 = v174;
  uint64_t v15 = v175;
  long long v141 = v176;
  uint64_t v142 = (uint64_t *)v3;
  outlined retain of AttributedString.Runs((uint64_t)v172);
  uint64_t v122 = v13;
  long long v123 = v14;
  uint64_t v124 = v15;
  uint64_t v16 = v9;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  uint64_t v134 = *(void *)(v135 + 16);
  if (!v134)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  uint64_t v18 = *(void *)(*(void *)&v172[0] + 64);
  uint64_t v19 = *(void *)(*(void *)&v172[0] + 72);
  uint64_t v126 = *(void *)&v172[0];
  uint64_t v20 = *(void *)(*(void *)&v172[0] + 80);
  uint64_t v139 = *(void *)(*(void *)&v172[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v133 = v11;
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v21 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  if (v18) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v21 < 0 || v22 < v21) {
    goto LABEL_131;
  }
  uint64_t v131 = v10;
  uint64_t v132 = v12;
  uint64_t v120 = v16;
  if (!(void)v14 || !*(_WORD *)(v18 + 16) || v21 >= v20)
  {
    unint64_t v35 = swift_unknownObjectRetain();
    unint64_t v36 = specialized Rope._endPath.getter(v35);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    if (!v18) {
      goto LABEL_117;
    }
    goto LABEL_32;
  }
  uint64_t v142 = (uint64_t *)v19;
  uint64_t v23 = *(unsigned __int8 *)(v18 + 18);
  if (*(unsigned char *)(v18 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v24 = v21;
    uint64_t v25 = v18;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v25 + 16);
      if (!*(_WORD *)(v25 + 16)) {
        goto LABEL_16;
      }
      uint64_t v29 = *(void *)(v25 + 40);
      BOOL v30 = __OFSUB__(v24, v29);
      unint64_t v31 = v24 - v29;
      if (v30) {
        goto LABEL_125;
      }
      if (__OFADD__(v31, 1)) {
        goto LABEL_126;
      }
      if ((uint64_t)(v31 + 1) <= 0)
      {
        uint64_t v28 = 0;
        goto LABEL_17;
      }
      if (v28 == 1) {
        break;
      }
      uint64_t v32 = (uint64_t *)(v25 + 64);
      uint64_t v33 = 1;
      while (1)
      {
        uint64_t v34 = *v32;
        v32 += 3;
        unint64_t v24 = v31 - v34;
        if (__OFSUB__(v31, v34))
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
        if (__OFADD__(v24, 1)) {
          goto LABEL_122;
        }
        if ((uint64_t)(v24 + 1) < 1) {
          break;
        }
        ++v33;
        unint64_t v31 = v24;
        if (v28 == v33) {
          goto LABEL_16;
        }
      }
      uint64_t v28 = v33;
      unint64_t v24 = v31;
LABEL_17:
      char v26 = (4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C;
      uint64_t v23 = ((-15 << v26) - 1) & v23 | (v28 << v26);
      uint64_t v27 = *(void *)(v25 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v25 = v27;
      if (!*(unsigned char *)(v27 + 18)) {
        goto LABEL_102;
      }
    }
    unint64_t v24 = v31;
LABEL_16:
    if (!v24) {
      goto LABEL_17;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v24 = v21;
  uint64_t v27 = v18;
LABEL_102:
  uint64_t v110 = *(unsigned __int16 *)(v27 + 16);
  uint64_t v125 = v27;
  if (v110)
  {
    uint64_t v111 = *(void *)(v27 + 24);
    BOOL v30 = __OFSUB__(v24, v111);
    unint64_t v37 = v24 - v111;
    if (v30) {
      goto LABEL_143;
    }
    if (__OFADD__(v37, 1))
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if ((uint64_t)(v37 + 1) <= 0)
    {
      uint64_t v110 = 0;
      goto LABEL_116;
    }
    if (v110 == 1)
    {
      unint64_t v24 = v37;
    }
    else
    {
      uint64_t v112 = (uint64_t *)(v125 + 48);
      for (uint64_t i = 1; i != v110; ++i)
      {
        uint64_t v113 = *v112;
        v112 += 3;
        unint64_t v24 = v37 - v113;
        if (__OFSUB__(v37, v113)) {
          goto LABEL_135;
        }
        if (__OFADD__(v24, 1))
        {
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if ((uint64_t)(v24 + 1) < 1) {
          goto LABEL_120;
        }
        unint64_t v37 = v24;
      }
    }
  }
  if (!v24)
  {
    while (1)
    {
LABEL_116:
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v37 = v23 & 0xFFFFFFFFFFFFF0FFLL;
      uint64_t v23 = v125;
      unint64_t v36 = v37 | (v110 << 8);
      uint64_t v19 = (uint64_t)v142;
      if (v18)
      {
LABEL_32:
        swift_unknownObjectRetain();
        uint64_t v138 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v139, v36, v23, v18, v19);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v39 = v21 - v24;
        if (!__OFSUB__(v21, v24)) {
          goto LABEL_33;
        }
      }
      else
      {
LABEL_117:
        uint64_t v138 = 0;
        unint64_t v39 = v21 - v24;
        if (!__OFSUB__(v21, v24))
        {
LABEL_33:
          uint64_t v40 = v126;
          if (v139 == *(void *)(v126 + 88))
          {
            unint64_t v127 = v39;
            unint64_t v128 = v36;
            if (v23)
            {
              uint64_t v41 = v23;
              unint64_t v42 = v23 + 24 * ((v36 >> ((4 * *(unsigned char *)(v23 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v43 = *(void *)(v42 + 32);
              uint64_t v44 = *(void *)(v42 + 40);
              swift_bridgeObjectRetain();
              uint64_t result = swift_bridgeObjectRetain();
              uint64_t v45 = v138;
            }
            else
            {
              uint64_t v46 = *(void *)(v126 + 64);
              swift_unknownObjectRetain();
              uint64_t v45 = v138;
              uint64_t v41 = 0;
              specialized Rope._Node.subscript.getter(v36, v46);
              uint64_t v44 = v47;
              uint64_t v43 = v48;
              uint64_t result = swift_unknownObjectRelease();
            }
            if (*((uint64_t *)&v172[0] + 1) < v45)
            {
              uint64_t v115 = *((void *)&v172[0] + 1);
              uint64_t v116 = v44;
              *((void *)&v141 + 1) = (char *)&v150 + 8;
              uint64_t v142 = &v160;
              long long v118 = (uint64_t *)(v135 + 40);
              unint64_t v49 = v128;
              *(void *)&long long v141 = v43;
              while (2)
              {
                uint64_t v50 = *(void *)(v40 + 64);
                uint64_t v51 = *(void *)(v40 + 88);
                *(void *)&long long v157 = v139;
                *((void *)&v157 + 1) = v49;
                *(void *)&long long v158 = v41;
                if (v139 == v51)
                {
                  uint64_t v138 = v45;
                  unint64_t v52 = v49;
                  if (v50)
                  {
                    unint64_t v53 = *(unsigned __int8 *)(v50 + 18);
                    uint64_t result = swift_unknownObjectRetain();
                    if (v52 <= v53)
                    {
LABEL_138:
                      __break(1u);
LABEL_139:
                      __break(1u);
                      goto LABEL_140;
                    }
                  }
                  else if (!v49)
                  {
                    goto LABEL_138;
                  }
                  unint64_t v54 = v52;
                  if (v41)
                  {
                    char v55 = (4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C;
                    if (((v52 >> v55) & 0xF) != 0)
                    {
                      unint64_t v56 = ((((v52 >> v55) & 0xF) - 1) << v55) | ((-15 << v55) - 1) & v52;
                      *((void *)&v157 + 1) = v56;
                      goto LABEL_51;
                    }
                  }
                  int v57 = *(unsigned __int8 *)(v50 + 18);
                  char v58 = (4 * v57 + 8) & 0x3C;
                  uint64_t v59 = (v54 >> v58) & 0xF;
                  *(void *)&long long v148 = v59;
                  if (v57)
                  {
                    swift_unknownObjectRetain();
                    char v60 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v50 + 16, v50 + 24, (uint64_t *)&v148, (uint64_t)&v157, v57);
                    uint64_t result = swift_unknownObjectRelease();
                    if (v60)
                    {
                      if ((void)v157 == v139)
                      {
                        uint64_t v41 = v158;
                        unint64_t v56 = *((void *)&v157 + 1);
                        if ((void)v158) {
                          goto LABEL_51;
                        }
LABEL_54:
                        swift_unknownObjectRetain();
                        unint64_t v128 = v56;
                        unint64_t v62 = specialized Rope._Node.subscript.getter(v56, v50);
                        swift_unknownObjectRelease();
                        uint64_t v125 = 0;
                        char v63 = 1;
                        goto LABEL_55;
                      }
LABEL_141:
                      __break(1u);
                    }
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
                    goto LABEL_144;
                  }
                  if (!v59) {
                    goto LABEL_142;
                  }
                  unint64_t v56 = ((v59 - 1) << v58) | ((-15 << v58) - 1) & v54;
                  *((void *)&v157 + 1) = v56;
                  *(void *)&long long v158 = v50;
                  uint64_t v41 = v50;
                  if (!v50) {
                    goto LABEL_54;
                  }
LABEL_51:
                  char v61 = (4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C;
                  unint64_t v128 = v56;
                  uint64_t v125 = v41;
                  unint64_t v62 = *(void *)(v41 + 24 * ((v56 >> v61) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  char v63 = 0;
LABEL_55:
                  swift_unknownObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  if (__OFSUB__(v127, v62)) {
                    goto LABEL_139;
                  }
                  if (v139 != *(void *)(v40 + 88))
                  {
LABEL_140:
                    __break(1u);
                    goto LABEL_141;
                  }
                  unint64_t v117 = v127 - v62;
                  if (v63)
                  {
                    uint64_t v64 = *(void *)(v40 + 64);
                    swift_unknownObjectRetain();
                    specialized Rope._Node.subscript.getter(v128, v64);
                    uint64_t v66 = v65;
                    uint64_t v119 = v67;
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    unint64_t v68 = v125 + 24 * ((v128 >> ((4 * *(unsigned char *)(v125 + 18) + 8) & 0x3C)) & 0xF);
                    uint64_t v66 = *(void *)(v68 + 32);
                    uint64_t v69 = *(void *)(v68 + 40);
                    swift_bridgeObjectRetain();
                    uint64_t v119 = v69;
                    swift_bridgeObjectRetain();
                  }
                  uint64_t v70 = v134;
                  uint64_t v71 = v141;
                  --v138;
                  uint64_t result = swift_bridgeObjectRetain();
                  uint64_t v72 = 0;
                  uint64_t v73 = v118;
                  uint64_t v140 = v66;
LABEL_65:
                  uint64_t v75 = v72 + 1;
                  if (__OFADD__(v72, 1)) {
                    goto LABEL_123;
                  }
                  uint64_t v76 = *(v73 - 1);
                  uint64_t v77 = *v73;
                  if (*(void *)(v71 + 16))
                  {
                    swift_bridgeObjectRetain_n();
                    unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v77);
                    if (v79)
                    {
                      outlined init with copy of AttributedString._AttributeValue(*(void *)(v71 + 56) + 72 * v78, (uint64_t)&v167);
                    }
                    else
                    {
                      uint64_t v171 = 0;
                      long long v169 = 0u;
                      long long v170 = 0u;
                      long long v167 = 0u;
                      long long v168 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*(void *)(v66 + 16))
                    {
LABEL_73:
                      swift_bridgeObjectRetain();
                      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v77);
                      if (v81)
                      {
                        outlined init with copy of AttributedString._AttributeValue(*(void *)(v66 + 56) + 72 * v80, (uint64_t)&v162);
                      }
                      else
                      {
                        uint64_t v166 = 0;
                        long long v164 = 0u;
                        long long v165 = 0u;
                        long long v162 = 0u;
                        long long v163 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      uint64_t v71 = v141;
LABEL_77:
                      swift_bridgeObjectRelease();
                      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v167, (uint64_t)&v157, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v162, (uint64_t)v142, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      if (*((void *)&v158 + 1))
                      {
                        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v157, (uint64_t)v156, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        if (!v161)
                        {
                          outlined destroy of AttributedString._AttributeValue((uint64_t)v156);
LABEL_94:
                          outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                          outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_95:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v40 = v126;
                          unint64_t v94 = v127;
                          goto LABEL_96;
                        }
                        long long v82 = *((_OWORD *)v142 + 3);
                        v154[2] = *((_OWORD *)v142 + 2);
                        v154[3] = v82;
                        uint64_t v155 = v142[8];
                        long long v83 = *((_OWORD *)v142 + 1);
                        v154[0] = *(_OWORD *)v142;
                        v154[1] = v83;
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v156, (uint64_t)v153);
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v154, (uint64_t)v152);
                        outlined init with copy of (Hashable & Sendable)?((uint64_t)v153, (uint64_t)&v148, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                        outlined init with copy of (Hashable & Sendable)?((uint64_t)v152, *((uint64_t *)&v141 + 1), &demangling cache variable for type metadata for (Hashable & Sendable)?);
                        if (*((void *)&v149 + 1))
                        {
                          if (v151)
                          {
                            outlined init with take of any PredicateExpression<Self.Output == B1>(&v148, (uint64_t)v145);
                            outlined init with take of any PredicateExpression<Self.Output == B1>(*((long long **)&v141 + 1), (uint64_t)v144);
                            uint64_t v84 = v146;
                            uint64_t v130 = v147;
                            uint64_t v129 = __swift_project_boxed_opaque_existential_1(v145, v146);
                            uint64_t v137 = &v114;
                            uint64_t v85 = *(void *)(v84 - 8);
                            MEMORY[0x1F4188790](v129);
                            uint64_t v87 = (char *)&v114 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
                            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v144, (uint64_t)&v143);
                            uint64_t v88 = type metadata accessor for Optional();
                            uint64_t v136 = &v114;
                            uint64_t v89 = *(void *)(v88 - 8);
                            MEMORY[0x1F4188790](v88);
                            unint64_t v91 = (char *)&v114 - v90;
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                            int v92 = swift_dynamicCast();
                            uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
                            if (v92)
                            {
                              v93(v91, 0, 1, v84);
                              (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v87, v91, v84);
                              char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
                              (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v84);
                            }
                            else
                            {
                              v93(v91, 1, 1, v84);
                              (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v88);
                              char v74 = 0;
                            }
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
                            uint64_t v70 = v134;
                            uint64_t v71 = v141;
                            goto LABEL_63;
                          }
                          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
LABEL_62:
                          char v74 = 0;
                        }
                        else
                        {
                          if (v151)
                          {
                            outlined destroy of Any?(*((uint64_t *)&v141 + 1), &demangling cache variable for type metadata for (Hashable & Sendable)?);
                            goto LABEL_62;
                          }
                          char v74 = 1;
                        }
LABEL_63:
                        outlined destroy of Any?((uint64_t)v152, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                        outlined destroy of Any?((uint64_t)v153, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                        outlined destroy of AttributedString._AttributeValue((uint64_t)v154);
                        outlined destroy of AttributedString._AttributeValue((uint64_t)v156);
                        outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        uint64_t result = outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        uint64_t v66 = v140;
                        if ((v74 & 1) == 0) {
                          goto LABEL_95;
                        }
                      }
                      else
                      {
                        if (v161) {
                          goto LABEL_94;
                        }
                        outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        uint64_t result = outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      }
                      v73 += 2;
                      ++v72;
                      if (v75 == v70)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t result = swift_bridgeObjectRelease();
                        unint64_t v94 = v117;
                        unint64_t v127 = v117;
                        uint64_t v45 = v138;
                        uint64_t v41 = v125;
                        uint64_t v40 = v126;
                        unint64_t v49 = v128;
                        if (v115 < v138) {
                          continue;
                        }
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        goto LABEL_96;
                      }
                      goto LABEL_65;
                    }
                  }
                  else
                  {
                    uint64_t v171 = 0;
                    long long v169 = 0u;
                    long long v170 = 0u;
                    long long v167 = 0u;
                    long long v168 = 0u;
                    swift_bridgeObjectRetain();
                    if (*(void *)(v66 + 16)) {
                      goto LABEL_73;
                    }
                  }
                  uint64_t v166 = 0;
                  long long v164 = 0u;
                  long long v165 = 0u;
                  long long v162 = 0u;
                  long long v163 = 0u;
                  goto LABEL_77;
                }
                break;
              }
LABEL_137:
              __break(1u);
              goto LABEL_138;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v94 = v127;
LABEL_96:
            long long v95 = *(_OWORD *)(v40 + 16);
            long long v96 = *(_OWORD *)(v40 + 48);
            long long v149 = *(_OWORD *)(v40 + 32);
            long long v150 = v96;
            long long v148 = v95;
            long long v97 = *(_OWORD *)(v40 + 16);
            long long v158 = *(_OWORD *)(v40 + 32);
            long long v159 = v96;
            long long v157 = v97;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v157, (uint64_t)&v162);
            outlined retain of Locale((uint64_t)&v162);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)&v148);
            uint64_t result = BigString.Index.utf8Offset.getter();
            if (!__OFSUB__(v94, result))
            {
              uint64_t v98 = BigString.UTF8View.index(_:offsetBy:)();
              uint64_t v100 = v99;
              uint64_t v102 = v101;
              uint64_t v104 = v103;
              outlined release of Locale((uint64_t)&v167);
              uint64_t v105 = v122;
              long long v107 = v123;
              uint64_t v106 = v124;
              if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
              {
                uint64_t v98 = v105;
                uint64_t v102 = *((void *)&v107 + 1);
                uint64_t v100 = v107;
                uint64_t v104 = v106;
              }
              char v108 = static BigString.Index.< infix(_:_:)();
              uint64_t result = outlined release of AttributedString.Runs((uint64_t)v172);
              if ((v108 & 1) == 0)
              {
                uint64_t v109 = v121;
                *uint64_t v121 = v98;
                v109[1] = v100;
                v109[2] = v102;
                v109[3] = v104;
                return result;
              }
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
              goto LABEL_136;
            }
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
      }
      __break(1u);
LABEL_120:
      uint64_t v110 = i;
      unint64_t v24 = v37;
    }
  }
LABEL_145:
  __break(1u);
  return result;
}

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.Runs.NSAttributesSlice@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 136);
  long long v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.Runs.NSAttributesSlice@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 168);
  long long v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice(uint64_t **a1, uint64_t *a2))(void **a1)
{
  long long v4 = (uint64_t *)malloc(0xB0uLL);
  *a1 = v4;
  AttributedString.Runs.NSAttributesSlice.subscript.getter(v4, v4 + 2, a2);
  uint64_t v5 = *v4;
  v4[10] = *v4;
  uint64_t v6 = v4[1];
  v4[20] = v5;
  v4[21] = v6;
  v4[11] = v6;
  long long v7 = *((_OWORD *)v4 + 2);
  long long v8 = *((_OWORD *)v4 + 3);
  *((_OWORD *)v4 + 6) = *((_OWORD *)v4 + 1);
  *((_OWORD *)v4 + 7) = v7;
  long long v9 = *((_OWORD *)v4 + 4);
  *((_OWORD *)v4 + 8) = v8;
  *((_OWORD *)v4 + 9) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString.Runs.NSAttributesSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[2];
  uint64_t v19 = a1[5];
  uint64_t v20 = a1[4];
  uint64_t v17 = a1[7];
  uint64_t v18 = a1[6];
  long long v4 = v2[11];
  v25[10] = v2[10];
  v25[11] = v4;
  _OWORD v25[12] = v2[12];
  long long v5 = v2[7];
  v25[6] = v2[6];
  v25[7] = v5;
  long long v6 = v2[9];
  v25[8] = v2[8];
  v25[9] = v6;
  long long v7 = v2[3];
  uint64_t v25[2] = v2[2];
  v25[3] = v7;
  long long v8 = v2[5];
  v25[4] = v2[4];
  v25[5] = v8;
  long long v9 = v2[1];
  v25[0] = *v2;
  v25[1] = v9;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v11 = v2[11];
    *(_OWORD *)(a2 + 224) = v2[10];
    *(_OWORD *)(a2 + 240) = v11;
    *(_OWORD *)(a2 + 256) = v2[12];
    long long v12 = v2[7];
    *(_OWORD *)(a2 + 160) = v2[6];
    *(_OWORD *)(a2 + 176) = v12;
    long long v13 = v2[9];
    *(_OWORD *)(a2 + 192) = v2[8];
    *(_OWORD *)(a2 + 208) = v13;
    long long v14 = v2[3];
    *(_OWORD *)(a2 + 96) = v2[2];
    *(_OWORD *)(a2 + 112) = v14;
    long long v15 = v2[5];
    *(_OWORD *)(a2 + 128) = v2[4];
    *(_OWORD *)(a2 + 144) = v15;
    long long v16 = v2[1];
    *(_OWORD *)(a2 + 64) = *v2;
    *(_OWORD *)(a2 + 80) = v16;
    *(void *)a2 = v24;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = v22;
    *(void *)(a2 + 24) = v21;
    *(void *)(a2 + 32) = v20;
    *(void *)(a2 + 40) = v19;
    *(void *)(a2 + 48) = v18;
    *(void *)(a2 + 56) = v17;
    return outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v25);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.Runs.NSAttributesSlice@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[9];
  long long v3 = v1[11];
  *(_OWORD *)&v30[32] = v1[10];
  *(_OWORD *)&v30[48] = v3;
  long long v4 = v1[11];
  *(_OWORD *)&v30[64] = v1[12];
  long long v5 = v1[5];
  long long v6 = v1[7];
  long long v28 = v1[6];
  long long v7 = v28;
  long long v29 = v6;
  long long v8 = v1[7];
  long long v9 = v1[9];
  *(_OWORD *)BOOL v30 = v1[8];
  long long v10 = *(_OWORD *)v30;
  *(_OWORD *)&v30[16] = v9;
  long long v11 = v1[1];
  long long v12 = v1[3];
  long long v24 = v1[2];
  long long v13 = v24;
  long long v25 = v12;
  long long v14 = v1[3];
  long long v15 = v1[5];
  long long v26 = v1[4];
  long long v16 = v26;
  long long v27 = v15;
  long long v17 = v1[1];
  v23[0] = *v1;
  long long v18 = v23[0];
  v23[1] = v17;
  a1[10] = *(_OWORD *)&v30[32];
  a1[11] = v4;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  long long v19 = v1[12];
  *a1 = v18;
  a1[1] = v11;
  long long v20 = *(_OWORD *)&v30[8];
  a1[12] = v19;
  a1[13] = v20;
  long long v21 = *(_OWORD *)&v30[40];
  a1[14] = *(_OWORD *)&v30[24];
  a1[15] = v21;
  a1[16] = *(_OWORD *)&v30[56];
  return outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v23);
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AttributedString.Runs.NSAttributesSlice()
{
  return static BigString.Index.== infix(_:_:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized BidirectionalCollection.index(_:offsetBy:)(*a1, a1[1], a1[2], a1[3], a2, a3);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  return specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a1[1], a1[2], a1[3], a2, *a3, a3[1], a3[2], a4, a3[3]);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t *a2)
{
  return specialized BidirectionalCollection._distance(from:to:)(*(void *)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *a2, a2[1], a2[2], a2[3]);
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString.Runs.NSAttributesSlice(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(a1, a2, a3, (void (*)(_OWORD *, uint64_t, void))AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(_OWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, void))
{
  long long v6 = *(_OWORD *)(v4 + 144);
  long long v7 = *(_OWORD *)(v4 + 176);
  long long v32 = *(_OWORD *)(v4 + 160);
  long long v33 = v7;
  long long v8 = *(_OWORD *)(v4 + 80);
  long long v9 = *(_OWORD *)(v4 + 112);
  long long v28 = *(_OWORD *)(v4 + 96);
  long long v29 = v9;
  long long v10 = *(_OWORD *)(v4 + 112);
  long long v11 = *(_OWORD *)(v4 + 144);
  long long v30 = *(_OWORD *)(v4 + 128);
  long long v31 = v11;
  long long v12 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)(v4 + 48);
  long long v24 = *(_OWORD *)(v4 + 32);
  long long v25 = v13;
  long long v14 = *(_OWORD *)(v4 + 48);
  long long v15 = *(_OWORD *)(v4 + 80);
  long long v26 = *(_OWORD *)(v4 + 64);
  long long v27 = v15;
  long long v16 = *(_OWORD *)(v4 + 16);
  v23[0] = *(_OWORD *)v4;
  v23[1] = v16;
  long long v17 = *(_OWORD *)(v4 + 176);
  _OWORD v21[12] = v32;
  v21[13] = v17;
  v21[8] = v28;
  v21[9] = v10;
  v21[10] = v30;
  v21[11] = v6;
  v21[4] = v24;
  v21[5] = v14;
  v21[6] = v26;
  v21[7] = v8;
  uint64_t v18 = *(void *)(v4 + 200);
  uint64_t v34 = *(void *)(v4 + 192);
  uint64_t v22 = *(void *)(v4 + 192);
  v21[2] = v23[0];
  v21[3] = v12;
  long long v19 = a1[1];
  v21[0] = *a1;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  a4(v21, v18, MEMORY[0x1E4FBC860]);
  return outlined release of AttributedString.Runs((uint64_t)v23);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.NSAttributesSlice(uint64_t *a1)
{
  long long v3 = *(_OWORD *)(v1 + 176);
  long long v199 = *(_OWORD *)(v1 + 160);
  long long v200 = v3;
  uint64_t v4 = *(void *)(v1 + 192);
  uint64_t v149 = *(void *)(v1 + 200);
  uint64_t v201 = v4;
  long long v5 = *(_OWORD *)(v1 + 112);
  long long v195 = *(_OWORD *)(v1 + 96);
  long long v196 = v5;
  long long v6 = *(_OWORD *)(v1 + 144);
  long long v197 = *(_OWORD *)(v1 + 128);
  long long v198 = v6;
  long long v7 = *(_OWORD *)(v1 + 48);
  v192[2] = *(_OWORD *)(v1 + 32);
  v192[3] = v7;
  long long v8 = *(_OWORD *)(v1 + 80);
  long long v193 = *(_OWORD *)(v1 + 64);
  long long v194 = v8;
  long long v9 = *(_OWORD *)(v1 + 16);
  v192[0] = *(_OWORD *)v1;
  v192[1] = v9;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v138 = *((void *)&v199 + 1);
  long long v139 = v200;
  uint64_t v140 = v4;
  outlined retain of AttributedString.Runs((uint64_t)v192);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_142;
  }
  uint64_t v148 = v10;
  uint64_t v143 = v13;
  uint64_t v144 = v12;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  uint64_t v152 = *(void *)(v149 + 16);
  if (!v152)
  {
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  unint64_t v128 = a1;
  uint64_t v15 = *(void *)&v192[0];
  uint64_t v17 = *(void *)(*(void *)&v192[0] + 64);
  uint64_t v16 = *(void *)(*(void *)&v192[0] + 72);
  uint64_t v18 = *(void *)(*(void *)&v192[0] + 80);
  uint64_t v147 = *(long long **)(*(void *)&v192[0] + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v17) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  if (result < 0) {
    goto LABEL_145;
  }
  uint64_t v20 = result;
  if (v19 < result) {
    goto LABEL_145;
  }
  uint64_t v136 = v15;
  uint64_t v132 = v11;
  if (!v17 || result >= v18 || !*(_WORD *)(v17 + 16))
  {
    unint64_t v33 = swift_unknownObjectRetain();
    unint64_t v34 = specialized Rope._endPath.getter(v33);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v35 = 0;
    uint64_t v22 = 0;
    if (!v17)
    {
      uint64_t v36 = 0;
LABEL_49:
      uint64_t v145 = v20 - v22;
      if (__OFSUB__(v20, v22))
      {
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
      long long v43 = *(_OWORD *)(v15 + 16);
      long long v44 = *(_OWORD *)(v15 + 48);
      v189[1] = *(_OWORD *)(v15 + 32);
      v189[2] = v44;
      v189[0] = v43;
      long long v45 = *(_OWORD *)(v15 + 16);
      v190[1] = *(_OWORD *)(v15 + 32);
      v190[2] = v44;
      v190[0] = v45;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v190, (uint64_t)v191);
      outlined retain of Locale((uint64_t)v191);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v189);
      if (__OFSUB__(0, v22))
      {
LABEL_147:
        __break(1u);
        goto LABEL_148;
      }
      uint64_t v124 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v125 = v46;
      uint64_t v126 = v48;
      uint64_t v127 = v47;
      uint64_t result = outlined release of Locale((uint64_t)&v188);
      uint64_t v135 = *((void *)&v193 + 1);
      if (v36 >= *((uint64_t *)&v193 + 1))
      {
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      unint64_t v49 = v147;
      if (v147 != *(long long **)(v15 + 88))
      {
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      unint64_t v146 = v34;
      uint64_t v50 = *(uint64_t **)(v15 + 64);
      if (v35)
      {
        unint64_t v51 = v146;
        unint64_t v52 = v35 + 24 * ((v146 >> ((4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v53 = *(void *)(v52 + 40);
        uint64_t v153 = *(void *)(v52 + 32);
        swift_bridgeObjectRetain();
        uint64_t v123 = v53;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v54 = (uint64_t)v147;
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v51 = v146;
        specialized Rope._Node.subscript.getter(v146, (uint64_t)v50);
        uint64_t v153 = v55;
        uint64_t v123 = v56;
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v50 = *(uint64_t **)(v15 + 64);
        uint64_t v54 = *(void *)(v15 + 88);
      }
      uint64_t v122 = (long long *)(v15 + 16);
      uint64_t v142 = v36 + 1;
      *(void *)&long long v173 = v147;
      *((void *)&v173 + 1) = v51;
      uint64_t v156 = (long long *)&v166;
      long long v157 = &v176;
      long long v174 = (uint64_t *)v35;
      uint64_t v134 = (uint64_t *)(v149 + 40);
LABEL_57:
      if (v49 != (long long *)v54) {
        goto LABEL_138;
      }
      uint64_t v141 = v54;
      if (v35)
      {
        unint64_t v57 = v146;
        unint64_t v58 = *(void *)(v35 + 24 * ((v146 >> ((4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v57 = v146;
        unint64_t v58 = specialized Rope._Node.subscript.getter(v146, (uint64_t)v50);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v59 = v145 + v58;
      if (__OFADD__(v145, v58)) {
        goto LABEL_139;
      }
      if (v50)
      {
        unint64_t v60 = ((-15 << ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v50 + 18) | ((unint64_t)*((unsigned __int16 *)v50 + 8) << ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C));
        uint64_t result = swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v60 = 0;
      }
      unint64_t v49 = &v164;
      if (v57 >= v60) {
        goto LABEL_140;
      }
      if (v35)
      {
        char v61 = (4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C;
        unint64_t v62 = ((v57 >> v61) & 0xF) + 1;
        if (v62 < *(unsigned __int16 *)(v35 + 16))
        {
          unint64_t v63 = (v62 << v61) | ((-15 << v61) - 1) & v57;
          uint64_t result = swift_unknownObjectRelease_n();
LABEL_72:
          uint64_t v50 = v174;
LABEL_79:
          if (v142 == v135)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
LABEL_120:
            if (v141 == *(void *)(v15 + 88))
            {
              if (v35)
              {
                unint64_t v102 = *(void *)(v35 + 24 * ((v57 >> ((4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v103 = *(void *)(v15 + 64);
                swift_unknownObjectRetain();
                unint64_t v102 = specialized Rope._Node.subscript.getter(v57, v103);
                unint64_t v49 = &v164;
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              unint64_t v104 = v145 + v102;
              if (!__OFADD__(v145, v102))
              {
                uint64_t v105 = v122;
                long long v106 = *v122;
                long long v107 = v122[2];
                v49[1] = v122[1];
                v49[2] = v107;
                long long v164 = v106;
                long long v108 = *v105;
                v49[20] = v105[1];
                v49[21] = v107;
                v49[19] = v108;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v178);
                outlined retain of Locale((uint64_t)&v178);
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)&v164);
                uint64_t result = BigString.Index.utf8Offset.getter();
                if (!__OFSUB__(v104, result))
                {
                  uint64_t v109 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v111 = v110;
                  uint64_t v113 = v112;
                  uint64_t v115 = v114;
                  outlined release of Locale((uint64_t)&v183);
                  uint64_t v116 = v138;
                  long long v118 = v139;
                  uint64_t v117 = v140;
                  if (static BigString.Index.< infix(_:_:)())
                  {
                    uint64_t v109 = v116;
                    uint64_t v113 = *((void *)&v118 + 1);
                    uint64_t v111 = v118;
                    uint64_t v115 = v117;
                  }
                  char v119 = static BigString.Index.< infix(_:_:)();
                  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v192);
                  if ((v119 & 1) == 0)
                  {
                    uint64_t v120 = v128;
                    *unint64_t v128 = v109;
                    v120[1] = v111;
                    v120[2] = v113;
                    v120[3] = v115;
                    return result;
                  }
                  goto LABEL_153;
                }
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
                goto LABEL_156;
              }
LABEL_151:
              __break(1u);
              goto LABEL_152;
            }
LABEL_150:
            __break(1u);
            goto LABEL_151;
          }
          uint64_t v71 = *(void *)(v15 + 88);
          uint64_t v147 = (long long *)v173;
          if ((void)v173 != v71) {
            goto LABEL_141;
          }
          uint64_t v133 = v35;
          unint64_t v130 = v63;
          unint64_t v131 = v59;
          uint64_t v129 = v50;
          if (v50)
          {
            uint64_t v72 = &v50[3 * ((v63 >> ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v73 = v72[4];
            uint64_t v74 = v72[5];
            swift_bridgeObjectRetain();
            uint64_t v137 = v74;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v75 = *(void *)(v15 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v63, v75);
            uint64_t v137 = v76;
            uint64_t v73 = v77;
            swift_unknownObjectRelease();
          }
          uint64_t v78 = v152;
          uint64_t v79 = v153;
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v80 = 0;
          char v81 = v134;
          uint64_t v158 = v73;
          while (1)
          {
            uint64_t v83 = v80 + 1;
            if (__OFADD__(v80, 1))
            {
              __break(1u);
LABEL_133:
              __break(1u);
              goto LABEL_134;
            }
            uint64_t v85 = *(v81 - 1);
            uint64_t v84 = *v81;
            if (*(void *)(v79 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
              if (v87)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v79 + 56) + 72 * v86, (uint64_t)&v183);
              }
              else
              {
                uint64_t v187 = 0;
                long long v185 = 0u;
                long long v186 = 0u;
                long long v183 = 0u;
                long long v184 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v73 = v158;
              if (!*(void *)(v158 + 16))
              {
LABEL_94:
                uint64_t v182 = 0;
                long long v180 = 0u;
                long long v181 = 0u;
                long long v178 = 0u;
                long long v179 = 0u;
                goto LABEL_101;
              }
            }
            else
            {
              uint64_t v187 = 0;
              long long v185 = 0u;
              long long v186 = 0u;
              long long v183 = 0u;
              long long v184 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v73 + 16)) {
                goto LABEL_94;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v88 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
            if (v89)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v73 + 56) + 72 * v88, (uint64_t)&v178);
            }
            else
            {
              uint64_t v182 = 0;
              long long v180 = 0u;
              long long v181 = 0u;
              long long v178 = 0u;
              long long v179 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_101:
            uint64_t v50 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v183, (uint64_t)&v173, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v178, (uint64_t)v157, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v175)
            {
              if (v177) {
                goto LABEL_118;
              }
              outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v178, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v183, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_88;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v173, (uint64_t)v172, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v177) {
              goto LABEL_117;
            }
            long long v90 = *((_OWORD *)v157 + 3);
            v170[2] = *((_OWORD *)v157 + 2);
            v170[3] = v90;
            uint64_t v171 = v157[8];
            long long v91 = *((_OWORD *)v157 + 1);
            v170[0] = *(_OWORD *)v157;
            v170[1] = v91;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v172, (uint64_t)v169);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v170, (uint64_t)v168);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v169, (uint64_t)&v164, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v168, (uint64_t)v156, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v165)
            {
              if (!v167)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v164);
LABEL_86:
                char v82 = 0;
                goto LABEL_87;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v164, (uint64_t)v161);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v156, (uint64_t)v160);
              uint64_t v92 = v162;
              uint64_t v151 = v163;
              long long v150 = __swift_project_boxed_opaque_existential_1(v161, v162);
              uint64_t v155 = &v121;
              uint64_t v93 = *(void *)(v92 - 8);
              MEMORY[0x1F4188790](v150);
              long long v95 = (char *)&v121 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v160, (uint64_t)&v159);
              uint64_t v96 = type metadata accessor for Optional();
              uint64_t v154 = &v121;
              uint64_t v97 = *(void *)(v96 - 8);
              MEMORY[0x1F4188790](v96);
              uint64_t v99 = (char *)&v121 - v98;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v100 = swift_dynamicCast();
              uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
              if (v100)
              {
                v101(v99, 0, 1, v92);
                (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v95, v99, v92);
                char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v92);
              }
              else
              {
                v101(v99, 1, 1, v92);
                (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
                char v82 = 0;
              }
              uint64_t v78 = v152;
              uint64_t v79 = v153;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
              unint64_t v49 = &v164;
            }
            else
            {
              if (v167)
              {
                outlined destroy of Any?((uint64_t)v156, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_86;
              }
              char v82 = 1;
            }
LABEL_87:
            outlined destroy of Any?((uint64_t)v168, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v169, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v170);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v172);
            outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v178, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v183, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v82 & 1) == 0) {
              goto LABEL_119;
            }
LABEL_88:
            v81 += 2;
            ++v80;
            uint64_t v73 = v158;
            if (v83 == v78)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v15 = v136;
              uint64_t v50 = *(uint64_t **)(v136 + 64);
              uint64_t v54 = *(void *)(v136 + 88);
              unint64_t v49 = v147;
              *(void *)&long long v173 = v147;
              *((void *)&v173 + 1) = v130;
              uint64_t v35 = (uint64_t)v129;
              uint64_t v145 = v131;
              unint64_t v146 = v130;
              long long v174 = v129;
              BOOL v28 = __OFADD__(v142++, 1);
              if (!v28) {
                goto LABEL_57;
              }
              __break(1u);
LABEL_117:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v172);
LABEL_118:
              outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v178, v50);
              outlined destroy of Any?((uint64_t)&v183, v50);
LABEL_119:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v15 = v136;
              uint64_t v35 = v133;
              unint64_t v57 = v146;
              goto LABEL_120;
            }
          }
        }
      }
      int v64 = *((unsigned __int8 *)v50 + 18);
      char v65 = (4 * v64 + 8) & 0x3C;
      uint64_t v66 = (v57 >> v65) & 0xF;
      *(void *)&long long v164 = v66;
      if (v64)
      {
        swift_unknownObjectRetain();
        char v67 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v50 + 3), (uint64_t *)&v164, (uint64_t)&v173, (uint64_t)v50, v64);
        uint64_t result = swift_unknownObjectRelease();
        if (v67)
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v63 = *((void *)&v173 + 1);
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v68 = v66 + 1;
        if (v66 + 1 < (unint64_t)*((unsigned __int16 *)v50 + 8))
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v63 = (v68 << v65) | ((-15 << v65) - 1) & v57;
          goto LABEL_79;
        }
      }
      if (v50)
      {
        int v69 = *((unsigned __int8 *)v50 + 18);
        uint64_t v70 = *((unsigned __int16 *)v50 + 8);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v63 = ((-15 << ((4 * v69 + 8) & 0x3C)) - 1) & v69 | (unint64_t)(v70 << ((4 * v69 + 8) & 0x3C));
      }
      else
      {
        unint64_t v63 = 0;
      }
      uint64_t v50 = 0;
      *(void *)&long long v173 = v141;
      goto LABEL_79;
    }
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v36 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v147, v34, v35, v17, v16);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  uint64_t v158 = v16;
  uint64_t v21 = *(unsigned __int8 *)(v17 + 18);
  if (*(unsigned char *)(v17 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v22 = v20;
    uint64_t v23 = v17;
    while (1)
    {
      uint64_t v26 = *(unsigned __int16 *)(v23 + 16);
      if (!*(_WORD *)(v23 + 16)) {
        break;
      }
      uint64_t v27 = *(void *)(v23 + 40);
      BOOL v28 = __OFSUB__(v22, v27);
      uint64_t v29 = v22 - v27;
      if (v28) {
        goto LABEL_136;
      }
      if (__OFADD__(v29, 1)) {
        goto LABEL_137;
      }
      if (v29 + 1 <= 0)
      {
        uint64_t v26 = 0;
        goto LABEL_16;
      }
      if (v26 == 1)
      {
        uint64_t v22 = v29;
        break;
      }
      long long v30 = (uint64_t *)(v23 + 64);
      uint64_t v31 = 1;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        uint64_t v22 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_133;
        }
        if (__OFADD__(v22, 1))
        {
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        if (v22 + 1 < 1) {
          break;
        }
        ++v31;
        uint64_t v29 = v22;
        if (v26 == v31) {
          goto LABEL_15;
        }
      }
      uint64_t v26 = v31;
      uint64_t v22 = v29;
LABEL_16:
      char v24 = (4 * *(unsigned char *)(v23 + 18) + 8) & 0x3C;
      uint64_t v21 = ((-15 << v24) - 1) & v21 | (v26 << v24);
      uint64_t v25 = *(void *)(v23 + 24 + 24 * v26);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v23 = v25;
      if (!*(unsigned char *)(v25 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_15:
    if (!v22) {
      goto LABEL_16;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v22 = v20;
  uint64_t v25 = v17;
LABEL_33:
  uint64_t v37 = *(unsigned __int16 *)(v25 + 16);
  uint64_t v35 = v25;
  if (*(_WORD *)(v25 + 16))
  {
    uint64_t v38 = *(void *)(v25 + 24);
    BOOL v28 = __OFSUB__(v22, v38);
    uint64_t v39 = v22 - v38;
    uint64_t v15 = v136;
    if (v28)
    {
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    if (__OFADD__(v39, 1))
    {
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    if (v39 + 1 <= 0)
    {
      uint64_t v37 = 0;
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v34 = v21 & 0xFFFFFFFFFFFFF0FFLL | (v37 << 8);
      uint64_t v16 = v158;
      goto LABEL_31;
    }
    if (v37 != 1)
    {
      uint64_t v40 = (uint64_t *)(v25 + 48);
      uint64_t v41 = 1;
      while (1)
      {
        uint64_t v42 = *v40;
        v40 += 3;
        uint64_t v22 = v39 - v42;
        if (__OFSUB__(v39, v42)) {
          goto LABEL_154;
        }
        if (__OFADD__(v22, 1)) {
          goto LABEL_155;
        }
        if (v22 + 1 < 1) {
          break;
        }
        ++v41;
        uint64_t v39 = v22;
        if (v37 == v41) {
          goto LABEL_46;
        }
      }
      uint64_t v37 = v41;
      uint64_t v22 = v39;
      goto LABEL_47;
    }
    uint64_t v22 = v39;
  }
  else
  {
    uint64_t v15 = v136;
  }
LABEL_46:
  if (!v22) {
    goto LABEL_47;
  }
LABEL_158:
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.NSAttributesSlice@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v2;
  long long v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v1 + 136);
  uint64_t v7 = *(void *)(v1 + 144);
  uint64_t v8 = *(void *)(v1 + 152);
  uint64_t v9 = *(void *)(v1 + 192);
  uint64_t v10 = *(void *)(v1 + 200);
  *(void *)(a1 + 128) = *(void *)(v1 + 128);
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = v7;
  *(void *)(a1 + 152) = v8;
  __n128 result = *(__n128 *)(v1 + 160);
  long long v12 = *(_OWORD *)(v1 + 176);
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v12;
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 200) = v10;
  *(void *)(a1 + 208) = v6;
  *(void *)(a1 + 216) = v7;
  *(void *)(a1 + 224) = v8;
  *(void *)(a1 + 232) = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.Runs.NSAttributesSlice()
{
  return specialized BidirectionalCollection._distance(from:to:)(*(void *)(v0 + 136), *(void **)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.NSAttributesSlice()
{
  long long v1 = v0[11];
  v9[10] = v0[10];
  v9[11] = v1;
  v9[12] = v0[12];
  long long v2 = v0[7];
  v9[6] = v0[6];
  v9[7] = v2;
  long long v3 = v0[9];
  v9[8] = v0[8];
  v9[9] = v3;
  long long v4 = v0[3];
  v9[2] = v0[2];
  v9[3] = v4;
  long long v5 = v0[5];
  v9[4] = v0[4];
  v9[5] = v5;
  long long v6 = v0[1];
  v9[0] = *v0;
  v9[1] = v6;
  uint64_t v7 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v9);
  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)v9);
  return v7;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = v2[11];
  long long v38 = v2[10];
  long long v39 = v4;
  uint64_t v40 = *((void *)v2 + 24);
  long long v5 = v2[7];
  long long v34 = v2[6];
  long long v35 = v5;
  long long v6 = v2[9];
  long long v36 = v2[8];
  long long v37 = v6;
  long long v7 = v2[3];
  long long v30 = v2[2];
  long long v31 = v7;
  long long v8 = v2[5];
  long long v32 = v2[4];
  long long v33 = v8;
  __n128 v9 = (__n128)v2[1];
  long long v28 = *v2;
  __n128 v29 = v9;
  int64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    outlined retain of AttributedString.Runs((uint64_t)&v28);
    uint64_t v27 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v12 = v27;
    uint64_t v13 = (void **)(a1 + 32);
    do
    {
      id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v13);
      uint64_t v16 = v15;
      unint64_t v18 = *(void *)(v27 + 16);
      unint64_t v17 = *(void *)(v27 + 24);
      if (v18 >= v17 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      }
      *(void *)(v27 + 16) = v18 + 1;
      uint64_t v19 = v27 + 16 * v18;
      *(void *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v16;
      ++v13;
      --v10;
    }
    while (v10);
  }
  else
  {
    outlined retain of AttributedString.Runs((uint64_t)&v28);
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  long long v20 = v39;
  *(_OWORD *)(a2 + 160) = v38;
  *(_OWORD *)(a2 + 176) = v20;
  uint64_t v21 = v40;
  long long v22 = v35;
  *(_OWORD *)(a2 + 96) = v34;
  *(_OWORD *)(a2 + 112) = v22;
  long long v23 = v37;
  *(_OWORD *)(a2 + 128) = v36;
  *(_OWORD *)(a2 + 144) = v23;
  long long v24 = v31;
  *(_OWORD *)(a2 + 32) = v30;
  *(_OWORD *)(a2 + 48) = v24;
  long long v25 = v33;
  *(_OWORD *)(a2 + 64) = v32;
  *(_OWORD *)(a2 + 80) = v25;
  __n128 result = v29;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a2 + 192) = v21;
  *(void *)(a2 + 200) = v12;
  return result;
}

BOOL specialized Collection<>._containsScalarConstraint.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1 - 1;
  long long v3 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v4 = *v3;
    v3 += 2;
    BOOL result = v4 != 0;
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    --v2;
  }
  while (!v6);
  return result;
}

uint64_t specialized Rope.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t specialized Rope.formIndex(before:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)result != a5) {
    goto LABEL_10;
  }
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(result + 8);
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 18) < v7) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!v7)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
LABEL_4:
  uint64_t v8 = *(void *)(result + 16);
  if (!v8 || (BOOL result = specialized closure #1 in Rope.formIndex(before:)(v8 + 16, result), (result & 1) == 0))
  {
    swift_unknownObjectRetain();
    char v9 = specialized Rope._Node.formPredecessor(of:)(v6, a2);
    BOOL result = swift_unknownObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x1F4184CD0]();
    }
  }
  return result;
}

uint64_t specialized Rope._Node.formPredecessor(of:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 18);
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = (4 * v4 + 8) & 0x3C;
  uint64_t v7 = (v5 >> v6) & 0xF;
  uint64_t v10 = v7;
  if (v4)
  {
    swift_unknownObjectRetain();
    char v8 = specialized closure #1 in Rope._Node.formPredecessor(of:)(a2 + 16, a2 + 24, &v10, a1, v4);
    swift_unknownObjectRelease();
  }
  else if (v7)
  {
    *(void *)(a1 + 8) = ((v7 - 1) << v6) | ((-15 << v6) - 1) & v5;
    *(void *)(a1 + 16) = a2;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t specialized closure #1 in Rope._Node.formPredecessor(of:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  if (*a3 < *(unsigned __int16 *)result)
  {
    uint64_t v10 = (uint64_t *)(a2 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = v10[2];
    swift_unknownObjectRetain();
    LOBYTE(v12) = specialized Rope._Node.formPredecessor(of:)(a4, v11, v12, v13);
    uint64_t result = swift_unknownObjectRelease();
    if (v12) {
      return 1;
    }
    uint64_t v9 = *a3;
  }
  uint64_t v14 = v9 - 1;
  if (v9 < 1) {
    return 0;
  }
  *a3 = v14;
  uint64_t v15 = *(void *)(a4 + 8) & ((-15 << ((4 * a5 + 8) & 0x3C)) - 1) | (v14 << ((4 * a5 + 8) & 0x3C));
  *(void *)(a4 + 8) = v15;
  uint64_t v16 = *(void *)(a2 + 24 * *a3);
  if (*(_WORD *)(v16 + 16))
  {
    uint64_t v17 = *(unsigned __int16 *)(v16 + 16) - 1;
    int v18 = *(unsigned __int8 *)(v16 + 18);
    *(void *)(a4 + 8) = ((-15 << ((4 * v18 + 8) & 0x3C)) - 1) & v15 | (v17 << ((4 * v18 + 8) & 0x3C));
    if (v18)
    {
      swift_unknownObjectRetain();
      uint64_t v19 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v16 + 24, v17, (uint64_t *)(a4 + 8));
      swift_unknownObjectRelease();
      uint64_t v16 = v19;
    }
    *(void *)(a4 + 16) = v16;
    return 1;
  }
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v99 = a2;
  uint64_t v2 = isStackAllocationSafe;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v93 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v4 = 8 * v93;
  int v100 = (void *)isStackAllocationSafe;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v94 = (unint64_t *)swift_slowAlloc();
      bzero(v94, v4);
      uint64_t v97 = 0;
      int64_t v26 = 0;
      uint64_t v27 = *(void *)(v2 + 64);
      uint64_t v95 = v2 + 64;
      uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
      if (v28 < 64) {
        uint64_t v29 = ~(-1 << v28);
      }
      else {
        uint64_t v29 = -1;
      }
      unint64_t v30 = v29 & v27;
      int64_t v96 = (unint64_t)(v28 + 63) >> 6;
      uint64_t v98 = &v102;
      while (1)
      {
        if (v30)
        {
          unint64_t v31 = __clz(__rbit64(v30));
          v30 &= v30 - 1;
          unint64_t v32 = v31 | (v26 << 6);
          uint64_t v12 = v100;
        }
        else
        {
          int64_t v33 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            goto LABEL_159;
          }
          uint64_t v12 = v100;
          if (v33 >= v96) {
            goto LABEL_86;
          }
          unint64_t v34 = *(void *)(v95 + 8 * v33);
          ++v26;
          if (!v34)
          {
            int64_t v26 = v33 + 1;
            if (v33 + 1 >= v96) {
              goto LABEL_86;
            }
            unint64_t v34 = *(void *)(v95 + 8 * v26);
            if (!v34)
            {
              int64_t v26 = v33 + 2;
              if (v33 + 2 >= v96) {
                goto LABEL_86;
              }
              unint64_t v34 = *(void *)(v95 + 8 * v26);
              if (!v34)
              {
                int64_t v35 = v33 + 3;
                if (v35 >= v96) {
                  goto LABEL_86;
                }
                unint64_t v34 = *(void *)(v95 + 8 * v35);
                if (!v34)
                {
                  while (1)
                  {
                    int64_t v26 = v35 + 1;
                    if (__OFADD__(v35, 1)) {
                      goto LABEL_162;
                    }
                    if (v26 >= v96) {
                      break;
                    }
                    unint64_t v34 = *(void *)(v95 + 8 * v26);
                    ++v35;
                    if (v34) {
                      goto LABEL_66;
                    }
                  }
LABEL_86:
                  if (!v97)
                  {
                    uint64_t v12 = (void *)MEMORY[0x1E4FBC868];
                    goto LABEL_152;
                  }
                  if (v97 == v12[2])
                  {
                    swift_retain();
                    goto LABEL_152;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  uint64_t v68 = static _DictionaryStorage.allocate(capacity:)();
                  int64_t v69 = 0;
                  unint64_t v70 = *v94;
                  uint64_t v71 = v68 + 64;
                  while (1)
                  {
                    if (v70)
                    {
                      unint64_t v75 = __clz(__rbit64(v70));
                      v70 &= v70 - 1;
                      unint64_t v76 = v75 | (v69 << 6);
                    }
                    else
                    {
                      int64_t v77 = v69 + 1;
                      if (__OFADD__(v69, 1)) {
                        goto LABEL_163;
                      }
                      if (v77 >= v93) {
                        goto LABEL_151;
                      }
                      unint64_t v78 = v94[v77];
                      ++v69;
                      if (!v78)
                      {
                        int64_t v69 = v77 + 1;
                        if (v77 + 1 >= v93) {
                          goto LABEL_151;
                        }
                        unint64_t v78 = v94[v69];
                        if (!v78)
                        {
                          int64_t v69 = v77 + 2;
                          if (v77 + 2 >= v93) {
                            goto LABEL_151;
                          }
                          unint64_t v78 = v94[v69];
                          if (!v78)
                          {
                            int64_t v69 = v77 + 3;
                            if (v77 + 3 >= v93) {
                              goto LABEL_151;
                            }
                            unint64_t v78 = v94[v69];
                            if (!v78)
                            {
                              int64_t v79 = v77 + 4;
                              if (v79 >= v93) {
                                goto LABEL_151;
                              }
                              unint64_t v78 = v94[v79];
                              if (!v78)
                              {
                                while (1)
                                {
                                  int64_t v69 = v79 + 1;
                                  if (__OFADD__(v79, 1)) {
                                    goto LABEL_165;
                                  }
                                  if (v69 >= v93) {
                                    break;
                                  }
                                  unint64_t v78 = v94[v69];
                                  ++v79;
                                  if (v78) {
                                    goto LABEL_141;
                                  }
                                }
LABEL_151:
                                uint64_t v12 = (void *)v68;
LABEL_152:
                                MEMORY[0x185309510](v94, -1, -1);
                                goto LABEL_153;
                              }
                              int64_t v69 = v79;
                            }
                          }
                        }
                      }
LABEL_141:
                      unint64_t v70 = (v78 - 1) & v78;
                      unint64_t v76 = __clz(__rbit64(v78)) + (v69 << 6);
                    }
                    uint64_t v80 = (uint64_t *)(v12[6] + 16 * v76);
                    uint64_t v82 = *v80;
                    uint64_t v81 = v80[1];
                    outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v76, (uint64_t)&v101);
                    long long v108 = v103;
                    long long v109 = v104;
                    uint64_t v110 = v105;
                    long long v106 = v101;
                    long long v107 = v102;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v83 = Hasher._finalize()();
                    uint64_t v84 = -1 << *(unsigned char *)(v68 + 32);
                    unint64_t v85 = v83 & ~v84;
                    unint64_t v86 = v85 >> 6;
                    if (((-1 << v85) & ~*(void *)(v71 + 8 * (v85 >> 6))) != 0)
                    {
                      unint64_t v72 = __clz(__rbit64((-1 << v85) & ~*(void *)(v71 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      char v87 = 0;
                      unint64_t v88 = (unint64_t)(63 - v84) >> 6;
                      do
                      {
                        if (++v86 == v88 && (v87 & 1) != 0) {
                          goto LABEL_158;
                        }
                        BOOL v89 = v86 == v88;
                        if (v86 == v88) {
                          unint64_t v86 = 0;
                        }
                        v87 |= v89;
                        uint64_t v90 = *(void *)(v71 + 8 * v86);
                      }
                      while (v90 == -1);
                      unint64_t v72 = __clz(__rbit64(~v90)) + (v86 << 6);
                    }
                    *(void *)(v71 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
                    uint64_t v73 = (void *)(*(void *)(v68 + 48) + 16 * v72);
                    *uint64_t v73 = v82;
                    v73[1] = v81;
                    uint64_t v74 = *(void *)(v68 + 56) + 72 * v72;
                    *(_OWORD *)(v74 + 16) = v107;
                    *(_OWORD *)(v74 + 32) = v108;
                    *(_OWORD *)(v74 + 48) = v109;
                    *(void *)(v74 + 64) = v110;
                    *(_OWORD *)uint64_t v74 = v106;
                    ++*(void *)(v68 + 16);
                    if (!--v97) {
                      goto LABEL_151;
                    }
                  }
                }
                int64_t v26 = v35;
              }
            }
          }
LABEL_66:
          unint64_t v30 = (v34 - 1) & v34;
          unint64_t v32 = __clz(__rbit64(v34)) + (v26 << 6);
        }
        long long v36 = (uint64_t *)(v12[6] + 16 * v32);
        uint64_t v38 = *v36;
        uint64_t v37 = v36[1];
        outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v32, (uint64_t)&v106);
        *(void *)&long long v101 = v38;
        *((void *)&v101 + 1) = v37;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)v98);
        long long v39 = *(void **)(v99 + 200);
        uint64_t v40 = (void *)v39[2];
        if (!v40) {
          goto LABEL_50;
        }
        BOOL v41 = v39[4] == v38 && v39[5] == v37;
        if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_83:
          swift_bridgeObjectRetain_n();
          outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v94 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
          BOOL v25 = __OFADD__(v97++, 1);
          if (v25)
          {
            __break(1u);
            goto LABEL_86;
          }
        }
        else
        {
          if (v40 != (void *)1)
          {
            uint64_t v42 = v39 + 7;
            uint64_t v43 = 1;
            do
            {
              uint64_t v12 = (void *)(v43 + 1);
              if (__OFADD__(v43, 1)) {
                goto LABEL_155;
              }
              BOOL v44 = *(v42 - 1) == v38 && *v42 == v37;
              if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_83;
              }
              v42 += 2;
              ++v43;
            }
            while (v12 != v40);
          }
LABEL_50:
          swift_bridgeObjectRetain_n();
          outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  v92[0] = v92;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v94 = (void *)((char *)v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v94, v4);
  uint64_t v97 = 0;
  int64_t v5 = 0;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v95 = v2 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v96 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v98 = &v102;
  do
  {
    while (1)
    {
      if (v9)
      {
        unint64_t v10 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v11 = v10 | (v5 << 6);
        uint64_t v12 = v100;
      }
      else
      {
        int64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_157;
        }
        uint64_t v12 = v100;
        if (v13 >= v96) {
          goto LABEL_42;
        }
        unint64_t v14 = *(void *)(v95 + 8 * v13);
        ++v5;
        if (!v14)
        {
          int64_t v5 = v13 + 1;
          if (v13 + 1 >= v96) {
            goto LABEL_42;
          }
          unint64_t v14 = *(void *)(v95 + 8 * v5);
          if (!v14)
          {
            int64_t v5 = v13 + 2;
            if (v13 + 2 >= v96) {
              goto LABEL_42;
            }
            unint64_t v14 = *(void *)(v95 + 8 * v5);
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v96) {
                goto LABEL_42;
              }
              unint64_t v14 = *(void *)(v95 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v5 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v5 >= v96) {
                    goto LABEL_42;
                  }
                  unint64_t v14 = *(void *)(v95 + 8 * v5);
                  ++v15;
                  if (v14) {
                    goto LABEL_22;
                  }
                }
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
                goto LABEL_164;
              }
              int64_t v5 = v15;
            }
          }
        }
LABEL_22:
        unint64_t v9 = (v14 - 1) & v14;
        unint64_t v11 = __clz(__rbit64(v14)) + (v5 << 6);
      }
      uint64_t v16 = (uint64_t *)(v12[6] + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v11, (uint64_t)&v106);
      *(void *)&long long v101 = v18;
      *((void *)&v101 + 1) = v17;
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)v98);
      uint64_t v19 = *(void **)(v99 + 200);
      long long v20 = (void *)v19[2];
      if (!v20) {
        goto LABEL_6;
      }
      BOOL v21 = v19[4] == v18 && v19[5] == v17;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      if (v20 != (void *)1)
      {
        long long v22 = v19 + 7;
        uint64_t v23 = 1;
        while (1)
        {
          uint64_t v12 = (void *)(v23 + 1);
          if (__OFADD__(v23, 1)) {
            break;
          }
          BOOL v24 = *(v22 - 1) == v18 && *v22 == v17;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_39;
          }
          v22 += 2;
          ++v23;
          if (v12 == v20) {
            goto LABEL_6;
          }
        }
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
LABEL_6:
      swift_bridgeObjectRetain_n();
      outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
      swift_bridgeObjectRelease();
    }
LABEL_39:
    swift_bridgeObjectRetain_n();
    outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
    swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v94 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    BOOL v25 = __OFADD__(v97++, 1);
  }
  while (!v25);
  __break(1u);
LABEL_42:
  if (v97)
  {
    if (v97 != v12[2])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      uint64_t v45 = static _DictionaryStorage.allocate(capacity:)();
      int64_t v46 = 0;
      unint64_t v47 = *v94;
      uint64_t v48 = v45 + 64;
      while (1)
      {
        if (v47)
        {
          unint64_t v52 = __clz(__rbit64(v47));
          v47 &= v47 - 1;
          unint64_t v53 = v52 | (v46 << 6);
        }
        else
        {
          int64_t v54 = v46 + 1;
          if (__OFADD__(v46, 1)) {
            goto LABEL_161;
          }
          if (v54 >= v93)
          {
LABEL_119:
            uint64_t v12 = (void *)v45;
            goto LABEL_153;
          }
          unint64_t v55 = v94[v54];
          ++v46;
          if (!v55)
          {
            int64_t v46 = v54 + 1;
            if (v54 + 1 >= v93) {
              goto LABEL_119;
            }
            unint64_t v55 = v94[v46];
            if (!v55)
            {
              int64_t v46 = v54 + 2;
              if (v54 + 2 >= v93) {
                goto LABEL_119;
              }
              unint64_t v55 = v94[v46];
              if (!v55)
              {
                int64_t v46 = v54 + 3;
                if (v54 + 3 >= v93) {
                  goto LABEL_119;
                }
                unint64_t v55 = v94[v46];
                if (!v55)
                {
                  int64_t v56 = v54 + 4;
                  if (v56 >= v93) {
                    goto LABEL_119;
                  }
                  unint64_t v55 = v94[v56];
                  if (!v55)
                  {
                    while (1)
                    {
                      int64_t v46 = v56 + 1;
                      if (__OFADD__(v56, 1)) {
                        break;
                      }
                      if (v46 >= v93) {
                        goto LABEL_119;
                      }
                      unint64_t v55 = v94[v46];
                      ++v56;
                      if (v55) {
                        goto LABEL_109;
                      }
                    }
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
                  }
                  int64_t v46 = v56;
                }
              }
            }
          }
LABEL_109:
          unint64_t v47 = (v55 - 1) & v55;
          unint64_t v53 = __clz(__rbit64(v55)) + (v46 << 6);
        }
        unint64_t v57 = (uint64_t *)(v12[6] + 16 * v53);
        uint64_t v59 = *v57;
        uint64_t v58 = v57[1];
        outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v53, (uint64_t)&v101);
        long long v108 = v103;
        long long v109 = v104;
        uint64_t v110 = v105;
        long long v106 = v101;
        long long v107 = v102;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v60 = Hasher._finalize()();
        uint64_t v61 = -1 << *(unsigned char *)(v45 + 32);
        unint64_t v62 = v60 & ~v61;
        unint64_t v63 = v62 >> 6;
        if (((-1 << v62) & ~*(void *)(v48 + 8 * (v62 >> 6))) != 0)
        {
          unint64_t v49 = __clz(__rbit64((-1 << v62) & ~*(void *)(v48 + 8 * (v62 >> 6)))) | v62 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v64 = 0;
          unint64_t v65 = (unint64_t)(63 - v61) >> 6;
          do
          {
            if (++v63 == v65 && (v64 & 1) != 0) {
              goto LABEL_156;
            }
            BOOL v66 = v63 == v65;
            if (v63 == v65) {
              unint64_t v63 = 0;
            }
            v64 |= v66;
            uint64_t v67 = *(void *)(v48 + 8 * v63);
          }
          while (v67 == -1);
          unint64_t v49 = __clz(__rbit64(~v67)) + (v63 << 6);
        }
        *(void *)(v48 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
        uint64_t v50 = (void *)(*(void *)(v45 + 48) + 16 * v49);
        *uint64_t v50 = v59;
        v50[1] = v58;
        uint64_t v51 = *(void *)(v45 + 56) + 72 * v49;
        *(_OWORD *)(v51 + 16) = v107;
        *(_OWORD *)(v51 + 32) = v108;
        *(_OWORD *)(v51 + 48) = v109;
        *(void *)(v51 + 64) = v110;
        *(_OWORD *)uint64_t v51 = v106;
        ++*(void *)(v45 + 16);
        if (!--v97) {
          goto LABEL_119;
        }
      }
    }
    swift_retain();
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC868];
  }
LABEL_153:
  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator(v99);
  return v12;
}

{
  void *v2;
  char v3;
  size_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  void *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  Swift::Int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  void *v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  Swift::Int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  void v110[3];
  int64_t v111;
  void *v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  long long v118 = a2;
  uint64_t v2 = (void *)isStackAllocationSafe;
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  uint64_t v111 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v4 = 8 * v111;
  char v119 = isStackAllocationSafe;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v113 = (unint64_t *)swift_slowAlloc();
      bzero(v113, v4);
      int64_t v26 = 0;
      uint64_t v27 = v2[8];
      uint64_t v114 = 0;
      uint64_t v115 = (uint64_t)(v2 + 8);
      uint64_t v28 = 1 << *((unsigned char *)v2 + 32);
      if (v28 < 64) {
        uint64_t v29 = ~(-1 << v28);
      }
      else {
        uint64_t v29 = -1;
      }
      unint64_t v30 = v29 & v27;
      uint64_t v116 = (unint64_t)(v28 + 63) >> 6;
      while (1)
      {
        if (v30)
        {
          uint64_t v120 = (v30 - 1) & v30;
          uint64_t v121 = v26;
          unint64_t v31 = __clz(__rbit64(v30)) | (v26 << 6);
        }
        else
        {
          unint64_t v32 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            goto LABEL_134;
          }
          if (v32 >= v116) {
            goto LABEL_60;
          }
          int64_t v33 = *(void *)(v115 + 8 * v32);
          unint64_t v34 = v26 + 1;
          if (!v33)
          {
            unint64_t v34 = v26 + 2;
            if (v26 + 2 >= v116) {
              goto LABEL_60;
            }
            int64_t v33 = *(void *)(v115 + 8 * v34);
            if (!v33)
            {
              unint64_t v34 = v26 + 3;
              if (v26 + 3 >= v116) {
                goto LABEL_60;
              }
              int64_t v33 = *(void *)(v115 + 8 * v34);
              if (!v33)
              {
                unint64_t v34 = v26 + 4;
                if (v26 + 4 >= v116) {
                  goto LABEL_60;
                }
                int64_t v33 = *(void *)(v115 + 8 * v34);
                if (!v33)
                {
                  int64_t v35 = v26 + 5;
                  if (v26 + 5 >= v116) {
                    goto LABEL_60;
                  }
                  int64_t v33 = *(void *)(v115 + 8 * v35);
                  if (!v33)
                  {
                    while (1)
                    {
                      unint64_t v34 = v35 + 1;
                      if (__OFADD__(v35, 1)) {
                        goto LABEL_140;
                      }
                      if (v34 >= v116) {
                        break;
                      }
                      int64_t v33 = *(void *)(v115 + 8 * v34);
                      ++v35;
                      if (v33) {
                        goto LABEL_56;
                      }
                    }
LABEL_60:
                    if (!v114)
                    {
                      uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
                      goto LABEL_130;
                    }
                    if (v114 == v2[2])
                    {
                      swift_retain();
                      goto LABEL_130;
                    }
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
                    int64_t v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
                    unint64_t v78 = 0;
                    int64_t v79 = *v113;
                    uint64_t v80 = v114;
                    uint64_t v81 = v77 + 8;
                    uint64_t v112 = v77;
                    while (1)
                    {
                      uint64_t v114 = v80;
                      if (v79)
                      {
                        uint64_t v120 = (v79 - 1) & v79;
                        uint64_t v121 = v78;
                        unint64_t v86 = __clz(__rbit64(v79)) | (v78 << 6);
                      }
                      else
                      {
                        char v87 = v78 + 1;
                        if (__OFADD__(v78, 1)) {
                          goto LABEL_139;
                        }
                        if (v87 >= v111) {
                          goto LABEL_129;
                        }
                        unint64_t v88 = v113[v87];
                        BOOL v89 = v78 + 1;
                        if (!v88)
                        {
                          BOOL v89 = v78 + 2;
                          if (v78 + 2 >= v111) {
                            goto LABEL_129;
                          }
                          unint64_t v88 = v113[v89];
                          if (!v88)
                          {
                            BOOL v89 = v78 + 3;
                            if (v78 + 3 >= v111) {
                              goto LABEL_129;
                            }
                            unint64_t v88 = v113[v89];
                            if (!v88)
                            {
                              BOOL v89 = v78 + 4;
                              if (v78 + 4 >= v111) {
                                goto LABEL_129;
                              }
                              unint64_t v88 = v113[v89];
                              if (!v88)
                              {
                                BOOL v89 = v78 + 5;
                                if (v78 + 5 >= v111) {
                                  goto LABEL_129;
                                }
                                unint64_t v88 = v113[v89];
                                if (!v88)
                                {
                                  uint64_t v90 = v78 + 6;
                                  if (v78 + 6 >= v111) {
                                    goto LABEL_129;
                                  }
                                  unint64_t v88 = v113[v90];
                                  if (!v88)
                                  {
                                    while (1)
                                    {
                                      BOOL v89 = v90 + 1;
                                      if (__OFADD__(v90, 1)) {
                                        goto LABEL_142;
                                      }
                                      if (v89 >= v111) {
                                        break;
                                      }
                                      unint64_t v88 = v113[v89];
                                      ++v90;
                                      if (v88) {
                                        goto LABEL_119;
                                      }
                                    }
LABEL_129:
                                    uint64_t v2 = v77;
LABEL_130:
                                    MEMORY[0x185309510](v113, -1, -1);
                                    return v2;
                                  }
                                  BOOL v89 = v78 + 6;
                                }
                              }
                            }
                          }
                        }
LABEL_119:
                        uint64_t v120 = (v88 - 1) & v88;
                        uint64_t v121 = v89;
                        unint64_t v86 = __clz(__rbit64(v88)) + (v89 << 6);
                      }
                      long long v91 = (uint64_t *)(v2[6] + 16 * v86);
                      int64_t v93 = *v91;
                      uint64_t v92 = v91[1];
                      uint64_t v94 = v2[7] + 48 * v86;
                      int64_t v96 = *(void *)v94;
                      uint64_t v95 = *(void *)(v94 + 8);
                      uint64_t v98 = *(void *)(v94 + 16);
                      uint64_t v97 = *(void *)(v94 + 24);
                      uint64_t v99 = *(void *)(v94 + 32);
                      int v100 = *(unsigned __int8 *)(v94 + 40);
                      Hasher.init(_seed:)();
                      swift_bridgeObjectRetain();
                      uint64_t v115 = v96;
                      uint64_t v116 = v98;
                      long long v118 = v95;
                      LODWORD(v117) = v100;
                      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v96, v95, v98, v97, v99, v100);
                      String.hash(into:)();
                      long long v101 = Hasher._finalize()();
                      int64_t v77 = v112;
                      long long v102 = -1 << *((unsigned char *)v112 + 32);
                      long long v103 = v101 & ~v102;
                      long long v104 = v103 >> 6;
                      if (((-1 << v103) & ~v81[v103 >> 6]) != 0)
                      {
                        uint64_t v82 = __clz(__rbit64((-1 << v103) & ~v81[v103 >> 6])) | v103 & 0x7FFFFFFFFFFFFFC0;
                      }
                      else
                      {
                        uint64_t v105 = 0;
                        long long v106 = (unint64_t)(63 - v102) >> 6;
                        do
                        {
                          if (++v104 == v106 && (v105 & 1) != 0) {
                            goto LABEL_133;
                          }
                          long long v107 = v104 == v106;
                          if (v104 == v106) {
                            long long v104 = 0;
                          }
                          v105 |= v107;
                          long long v108 = v81[v104];
                        }
                        while (v108 == -1);
                        uint64_t v82 = __clz(__rbit64(~v108)) + (v104 << 6);
                      }
                      *(void *)((char *)v81 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v82;
                      Swift::Int v83 = (void *)(v77[6] + 16 * v82);
                      *Swift::Int v83 = v93;
                      v83[1] = v92;
                      uint64_t v84 = v77[7] + 48 * v82;
                      unint64_t v85 = v118;
                      uint64_t v2 = (void *)v119;
                      *(void *)uint64_t v84 = v115;
                      *(void *)(v84 + 8) = v85;
                      *(void *)(v84 + 16) = v116;
                      *(void *)(v84 + 24) = v97;
                      *(void *)(v84 + 32) = v99;
                      *(unsigned char *)(v84 + 40) = v117;
                      ++v77[2];
                      uint64_t v80 = v114 - 1;
                      int64_t v79 = v120;
                      unint64_t v78 = v121;
                      if (v114 == 1) {
                        goto LABEL_129;
                      }
                    }
                  }
                  unint64_t v34 = v26 + 5;
                }
              }
            }
          }
LABEL_56:
          uint64_t v120 = (v33 - 1) & v33;
          uint64_t v121 = v34;
          unint64_t v31 = __clz(__rbit64(v33)) + (v34 << 6);
        }
        long long v36 = v2[7];
        uint64_t v117 = v31;
        uint64_t v37 = v36 + 48 * v31;
        uint64_t v38 = *(void *)v37;
        long long v39 = *(void *)(v37 + 8);
        uint64_t v40 = *(void *)(v37 + 16);
        BOOL v41 = *(void *)(v37 + 24);
        uint64_t v42 = *(void *)(v37 + 32);
        uint64_t v43 = *(unsigned char *)(v37 + 40);
        uint64_t v123 = v118;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, v43);
        type metadata accessor for AnyKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
        swift_dynamicCast();
        if (v43)
        {
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 1);
          swift_bridgeObjectRelease();
          uint64_t v2 = (void *)v119;
          unint64_t v30 = v120;
          int64_t v26 = v121;
LABEL_38:
          *(unint64_t *)((char *)v113 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v117;
          unint64_t v10 = __OFADD__(v114++, 1);
          if (v10) {
            goto LABEL_138;
          }
        }
        else
        {
          outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_retain();
          BOOL v44 = MEMORY[0x185302EC0](v38, v122);
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_bridgeObjectRelease();
          uint64_t v2 = (void *)v119;
          unint64_t v30 = v120;
          int64_t v26 = v121;
          if ((v44 & 1) == 0) {
            goto LABEL_38;
          }
        }
      }
    }
  }
  v110[1] = v110;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v113 = (void *)((char *)v110 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v113, v4);
  int64_t v5 = 0;
  uint64_t v6 = v2[8];
  uint64_t v114 = 0;
  uint64_t v115 = (uint64_t)(v2 + 8);
  uint64_t v7 = 1 << *((unsigned char *)v2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  uint64_t v116 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    uint64_t v120 = (v9 - 1) & v9;
    uint64_t v121 = v5;
    unint64_t v11 = __clz(__rbit64(v9)) | (v5 << 6);
LABEL_26:
    uint64_t v16 = v2[7];
    uint64_t v117 = v11;
    uint64_t v17 = v16 + 48 * v11;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    long long v20 = *(void *)(v17 + 16);
    BOOL v21 = *(void *)(v17 + 24);
    long long v22 = *(void *)(v17 + 32);
    uint64_t v23 = *(unsigned char *)(v17 + 40);
    uint64_t v123 = v118;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, v23);
    type metadata accessor for AnyKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
    swift_dynamicCast();
    BOOL v24 = v122;
    if (v23)
    {
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 1);
      swift_bridgeObjectRelease();
      uint64_t v2 = (void *)v119;
      unint64_t v9 = v120;
      int64_t v5 = v121;
LABEL_7:
      *(unint64_t *)((char *)v113 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v117;
      unint64_t v10 = __OFADD__(v114++, 1);
      if (v10) {
        goto LABEL_135;
      }
    }
    else
    {
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_retain();
      BOOL v25 = MEMORY[0x185302EC0](v18, v24);
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_bridgeObjectRelease();
      uint64_t v2 = (void *)v119;
      unint64_t v9 = v120;
      int64_t v5 = v121;
      if ((v25 & 1) == 0) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1)) {
    goto LABEL_132;
  }
  if (v12 >= v116) {
    goto LABEL_29;
  }
  int64_t v13 = *(void *)(v115 + 8 * v12);
  unint64_t v14 = v5 + 1;
  if (v13) {
    goto LABEL_25;
  }
  unint64_t v14 = v5 + 2;
  if (v5 + 2 >= v116) {
    goto LABEL_29;
  }
  int64_t v13 = *(void *)(v115 + 8 * v14);
  if (v13) {
    goto LABEL_25;
  }
  unint64_t v14 = v5 + 3;
  if (v5 + 3 >= v116) {
    goto LABEL_29;
  }
  int64_t v13 = *(void *)(v115 + 8 * v14);
  if (v13) {
    goto LABEL_25;
  }
  unint64_t v14 = v5 + 4;
  if (v5 + 4 >= v116) {
    goto LABEL_29;
  }
  int64_t v13 = *(void *)(v115 + 8 * v14);
  if (v13)
  {
LABEL_25:
    uint64_t v120 = (v13 - 1) & v13;
    uint64_t v121 = v14;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    goto LABEL_26;
  }
  int64_t v15 = v5 + 5;
  if (v5 + 5 >= v116) {
    goto LABEL_29;
  }
  int64_t v13 = *(void *)(v115 + 8 * v15);
  if (v13)
  {
    unint64_t v14 = v5 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_137;
    }
    if (v14 >= v116) {
      break;
    }
    int64_t v13 = *(void *)(v115 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_25;
    }
  }
LABEL_29:
  if (!v114) {
    return (void *)MEMORY[0x1E4FBC868];
  }
  if (v114 != v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
    uint64_t v45 = (void *)static _DictionaryStorage.allocate(capacity:)();
    int64_t v46 = 0;
    unint64_t v47 = *v113;
    uint64_t v48 = v114;
    unint64_t v49 = v45 + 8;
    uint64_t v112 = v45;
    while (1)
    {
      uint64_t v114 = v48;
      if (v47)
      {
        uint64_t v120 = (v47 - 1) & v47;
        uint64_t v121 = v46;
        int64_t v54 = __clz(__rbit64(v47)) | (v46 << 6);
      }
      else
      {
        unint64_t v55 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          goto LABEL_136;
        }
        if (v55 >= v111) {
          return v45;
        }
        int64_t v56 = v113[v55];
        unint64_t v57 = v46 + 1;
        if (!v56)
        {
          unint64_t v57 = v46 + 2;
          if (v46 + 2 >= v111) {
            return v45;
          }
          int64_t v56 = v113[v57];
          if (!v56)
          {
            unint64_t v57 = v46 + 3;
            if (v46 + 3 >= v111) {
              return v45;
            }
            int64_t v56 = v113[v57];
            if (!v56)
            {
              unint64_t v57 = v46 + 4;
              if (v46 + 4 >= v111) {
                return v45;
              }
              int64_t v56 = v113[v57];
              if (!v56)
              {
                unint64_t v57 = v46 + 5;
                if (v46 + 5 >= v111) {
                  return v45;
                }
                int64_t v56 = v113[v57];
                if (!v56)
                {
                  uint64_t v58 = v46 + 6;
                  if (v46 + 6 >= v111) {
                    return v45;
                  }
                  int64_t v56 = v113[v58];
                  if (!v56)
                  {
                    while (1)
                    {
                      unint64_t v57 = v58 + 1;
                      if (__OFADD__(v58, 1)) {
                        break;
                      }
                      if (v57 >= v111) {
                        return v45;
                      }
                      int64_t v56 = v113[v57];
                      ++v58;
                      if (v56) {
                        goto LABEL_85;
                      }
                    }
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
                  }
                  unint64_t v57 = v46 + 6;
                }
              }
            }
          }
        }
LABEL_85:
        uint64_t v120 = (v56 - 1) & v56;
        uint64_t v121 = v57;
        int64_t v54 = __clz(__rbit64(v56)) + (v57 << 6);
      }
      uint64_t v59 = (uint64_t *)(v2[6] + 16 * v54);
      uint64_t v61 = *v59;
      Swift::Int v60 = v59[1];
      unint64_t v62 = v2[7] + 48 * v54;
      unint64_t v63 = *(void *)v62;
      char v64 = *(void *)(v62 + 8);
      unint64_t v65 = *(void *)(v62 + 16);
      BOOL v66 = *(void *)(v62 + 24);
      uint64_t v67 = *(void *)(v62 + 32);
      uint64_t v68 = *(unsigned __int8 *)(v62 + 40);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      uint64_t v115 = v63;
      uint64_t v116 = v64;
      long long v118 = v67;
      LODWORD(v117) = v68;
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v63, v64, v65, v66, v67, v68);
      String.hash(into:)();
      int64_t v69 = Hasher._finalize()();
      uint64_t v45 = v112;
      unint64_t v70 = -1 << *((unsigned char *)v112 + 32);
      uint64_t v71 = v69 & ~v70;
      unint64_t v72 = v71 >> 6;
      if (((-1 << v71) & ~v49[v71 >> 6]) != 0)
      {
        uint64_t v50 = __clz(__rbit64((-1 << v71) & ~v49[v71 >> 6])) | v71 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_65;
      }
      uint64_t v73 = 0;
      uint64_t v74 = (unint64_t)(63 - v70) >> 6;
      do
      {
        if (++v72 == v74 && (v73 & 1) != 0)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        unint64_t v75 = v72 == v74;
        if (v72 == v74) {
          unint64_t v72 = 0;
        }
        v73 |= v75;
        unint64_t v76 = v49[v72];
      }
      while (v76 == -1);
      uint64_t v50 = __clz(__rbit64(~v76)) + (v72 << 6);
LABEL_65:
      *(void *)((char *)v49 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
      uint64_t v51 = (void *)(v45[6] + 16 * v50);
      *uint64_t v51 = v61;
      v51[1] = v60;
      unint64_t v52 = v45[7] + 48 * v50;
      unint64_t v53 = v116;
      *(void *)unint64_t v52 = v115;
      *(void *)(v52 + 8) = v53;
      *(void *)(v52 + 16) = v65;
      *(void *)(v52 + 24) = v66;
      uint64_t v2 = (void *)v119;
      *(void *)(v52 + 32) = v118;
      *(unsigned char *)(v52 + 40) = v117;
      ++v45[2];
      uint64_t v48 = v114 - 1;
      unint64_t v47 = v120;
      int64_t v46 = v121;
      if (v114 == 1) {
        return v45;
      }
    }
  }
  swift_retain();
  return v2;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in Rope._Node.formSuccessor(of:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)(a1 + 24 * *a2);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  swift_unknownObjectRetain();
  LOBYTE(v12) = specialized Rope._Node.formSuccessor(of:)(a3, v11, v12, v13);
  uint64_t result = swift_unknownObjectRelease();
  if (v12) {
    return 1;
  }
  uint64_t v15 = *a2 + 1;
  if (__OFADD__(*a2, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *a2 = v15;
  if (v15 >= *(unsigned __int16 *)(a4 + 16)) {
    return 0;
  }
  if (v15 < 0) {
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(a3 + 8) & ((-15 << ((4 * a5 + 8) & 0x3C)) - 1) | (v15 << ((4 * a5 + 8) & 0x3C));
  *(void *)(a3 + 8) = v16;
  uint64_t v17 = *(void *)(a1 + 24 * *a2);
  int v18 = *(unsigned __int8 *)(v17 + 18);
  if (((v18 + 1) >> 8))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  unint64_t v19 = ((-256 << (4 * ((v18 + 1) & 0xFu))) | 0xFF) & v16;
  *(void *)(a3 + 8) = v19;
  if (v18)
  {
    uint64_t v20 = (v19 >> ((4 * v18 + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    uint64_t v21 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v17 + 24, v20, v19);
    swift_unknownObjectRelease();
    uint64_t v17 = v21;
  }
  *(void *)(a3 + 16) = v17;
  return 1;
}

uint64_t base witness table accessor for Collection in AttributedString.Runs.AttributesSlice1<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice1<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice1<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice1<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs.AttributesSlice1<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs.AttributesSlice1<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice1<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in AttributedString.Runs.AttributesSlice2<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice2<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice2<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice2<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice2<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs.NSAttributesSlice>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.Runs.NSAttributesSlice> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs.NSAttributesSlice>);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs.NSAttributesSlice>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.Runs.NSAttributesSlice> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs.NSAttributesSlice>);
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator);
  }
  return result;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice1()
{
  return __swift_instantiateGenericMetadata();
}

__n128 __swift_memcpy248_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice1.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice2()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice2.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice3()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice3.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 80);
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice4()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice4.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 96);
}

uint64_t initializeWithCopy for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v3 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 216) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice5()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice5.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 88);
}

uint64_t destroy for AttributedString.Runs.AttributesSlice1()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v3 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v3;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  long long v10 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = v10;
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 248) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice5.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  uint64_t v5 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.NSAttributesSlice()
{
  return &type metadata for AttributedString.Runs.NSAttributesSlice;
}

uint64_t destroy for AttributedString.Runs.NSAttributesSlice.Iterator()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  long long v3 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  long long v10 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  uint64_t v5 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 240) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 240) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.NSAttributesSlice.Iterator()
{
  return &type metadata for AttributedString.Runs.NSAttributesSlice.Iterator;
}

void *specialized RangeReplaceableCollection.init(_contents:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = a2 != 1;
  uint64_t v10 = 1;
  if (a2 != 1) {
    uint64_t v10 = 2;
  }
  if (a4 != 1) {
    BOOL v9 = v10;
  }
  if (a6 == 1) {
    int64_t v11 = v9;
  }
  else {
    int64_t v11 = v9 + 1;
  }
  if (!v11)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a5, a6);
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0, MEMORY[0x1E4FBC860]);
  uint64_t v16 = v15;
  if (a2 == 1)
  {
    if (a4 == 1) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v17 = v15[2];
    unint64_t v18 = v15[3];
    swift_bridgeObjectRetain();
    if (v17 >= v18 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v17 + 1, 1, v16);
    }
    v16[2] = v17 + 1;
    unint64_t v19 = &v16[2 * v17];
    v19[4] = a1;
    v19[5] = a2;
    if (a4 == 1)
    {
LABEL_11:
      if (a6 == 1) {
        return v16;
      }
      goto LABEL_20;
    }
  }
  unint64_t v20 = v16[2];
  unint64_t v21 = v16[3];
  swift_bridgeObjectRetain();
  if (v20 >= v21 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v20 + 1, 1, v16);
  }
  v16[2] = v20 + 1;
  long long v22 = &v16[2 * v20];
  v22[4] = a3;
  v22[5] = a4;
  if (a6 != 1)
  {
LABEL_20:
    unint64_t v24 = v16[2];
    unint64_t v23 = v16[3];
    if (v24 >= v23 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v16);
    }
    v16[2] = v24 + 1;
    BOOL v25 = &v16[2 * v24];
    v25[4] = a5;
    v25[5] = a6;
  }
  return v16;
}

void *specialized RangeReplaceableCollection.init(_contents:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v11 = a2 != 1;
  uint64_t v12 = 1;
  if (a2 != 1) {
    uint64_t v12 = 2;
  }
  if (a4 != 1) {
    int64_t v11 = v12;
  }
  if (a6 != 1) {
    ++v11;
  }
  if (a8 == 1) {
    int64_t v13 = v11;
  }
  else {
    int64_t v13 = v11 + 1;
  }
  if (!v13)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a7, a8);
    return (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0, MEMORY[0x1E4FBC860]);
  unint64_t v19 = v18;
  if (a2 == 1)
  {
    if (a4 == 1) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v21 = v18[2];
    unint64_t v20 = v18[3];
    swift_bridgeObjectRetain();
    if (v21 >= v20 >> 1) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
    }
    _OWORD v19[2] = v21 + 1;
    long long v22 = &v19[2 * v21];
    v22[4] = a1;
    v22[5] = a2;
    if (a4 == 1)
    {
LABEL_13:
      if (a6 == 1) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }
  }
  unint64_t v24 = v19[2];
  unint64_t v23 = v19[3];
  swift_bridgeObjectRetain();
  if (v24 >= v23 >> 1) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v19);
  }
  _OWORD v19[2] = v24 + 1;
  BOOL v25 = &v19[2 * v24];
  v25[4] = a3;
  v25[5] = a4;
  if (a6 == 1)
  {
LABEL_14:
    if (a8 == 1) {
      return v19;
    }
    goto LABEL_26;
  }
LABEL_23:
  unint64_t v27 = v19[2];
  unint64_t v26 = v19[3];
  swift_bridgeObjectRetain();
  if (v27 >= v26 >> 1) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v19);
  }
  _OWORD v19[2] = v27 + 1;
  uint64_t v28 = &v19[2 * v27];
  v28[4] = a5;
  v28[5] = a6;
  if (a8 != 1)
  {
LABEL_26:
    unint64_t v30 = v19[2];
    unint64_t v29 = v19[3];
    if (v30 >= v29 >> 1) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v19);
    }
    _OWORD v19[2] = v30 + 1;
    unint64_t v31 = &v19[2 * v30];
    v31[4] = a7;
    v31[5] = a8;
  }
  return v19;
}

void *specialized RangeReplaceableCollection.init(_contents:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a9;
  int64_t v12 = a2 != 1;
  uint64_t v13 = 1;
  if (a2 != 1) {
    uint64_t v13 = 2;
  }
  if (a4 != 1) {
    int64_t v12 = v13;
  }
  if (a6 != 1) {
    ++v12;
  }
  if (a8 != 1) {
    ++v12;
  }
  if (a10 == 1) {
    int64_t v14 = v12;
  }
  else {
    int64_t v14 = v12 + 1;
  }
  if (!v14)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a9, a10);
    return (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0, MEMORY[0x1E4FBC860]);
  unint64_t v20 = v19;
  if (a2 == 1)
  {
    if (a4 == 1) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v21 = v19[2];
    unint64_t v22 = v19[3];
    swift_bridgeObjectRetain();
    if (v21 >= v22 >> 1) {
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v21 + 1, 1, v20);
    }
    _OWORD v20[2] = v21 + 1;
    unint64_t v23 = &v20[2 * v21];
    v23[4] = a1;
    v23[5] = a2;
    uint64_t v11 = a9;
    if (a4 == 1)
    {
LABEL_15:
      if (a6 == 1) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  unint64_t v24 = v20[2];
  unint64_t v25 = v20[3];
  swift_bridgeObjectRetain();
  if (v24 >= v25 >> 1) {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v24 + 1, 1, v20);
  }
  _OWORD v20[2] = v24 + 1;
  unint64_t v26 = &v20[2 * v24];
  v26[4] = a3;
  v26[5] = a4;
  if (a6 == 1)
  {
LABEL_16:
    if (a8 == 1) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_26:
  unint64_t v27 = v20[2];
  unint64_t v28 = v20[3];
  swift_bridgeObjectRetain();
  if (v27 >= v28 >> 1) {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v27 + 1, 1, v20);
  }
  _OWORD v20[2] = v27 + 1;
  unint64_t v29 = &v20[2 * v27];
  v29[4] = a5;
  v29[5] = a6;
  if (a8 == 1)
  {
LABEL_17:
    if (a10 == 1) {
      return v20;
    }
    goto LABEL_32;
  }
LABEL_29:
  unint64_t v30 = v20[2];
  unint64_t v31 = v20[3];
  swift_bridgeObjectRetain();
  if (v30 >= v31 >> 1) {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v30 + 1, 1, v20);
  }
  _OWORD v20[2] = v30 + 1;
  unint64_t v32 = &v20[2 * v30];
  v32[4] = a7;
  v32[5] = a8;
  if (a10 != 1)
  {
LABEL_32:
    unint64_t v34 = v20[2];
    unint64_t v33 = v20[3];
    if (v34 >= v33 >> 1) {
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v20);
    }
    _OWORD v20[2] = v34 + 1;
    int64_t v35 = &v20[2 * v34];
    v35[4] = v11;
    v35[5] = a10;
  }
  return v20;
}

double NSOperationQueue.SchedulerTimeType.date.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double NSOperationQueue.SchedulerTimeType.date.setter(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

uint64_t (*NSOperationQueue.SchedulerTimeType.date.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double NSOperationQueue.SchedulerTimeType.init(_:)@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double NSOperationQueue.SchedulerTimeType.distance(to:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2 = result;
  return result;
}

void NSOperationQueue.SchedulerTimeType.Stride.init(floatLiteral:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double NSOperationQueue.SchedulerTimeType.advanced(by:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2 = result;
  return result;
}

double NSOperationQueue.SchedulerTimeType.Stride.timeInterval.getter()
{
  return *(double *)v0;
}

double NSOperationQueue.SchedulerTimeType.Stride.magnitude.getter()
{
  return *(double *)v0;
}

void NSOperationQueue.SchedulerTimeType.Stride.magnitude.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*NSOperationQueue.SchedulerTimeType.Stride.magnitude.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  BOOL v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  uint64_t v10 = Double.init<A>(exactly:)((uint64_t)v9, a2);
  char v12 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  if (v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v10;
  }
  *(void *)a3 = v14;
  *(unsigned char *)(a3 + 8) = v12 & 1;
  return result;
}

BOOL static NSOperationQueue.SchedulerTimeType.Stride.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static NSOperationQueue.SchedulerTimeType.Stride.* infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 * *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.*= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 * *a1;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.+= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 + *a1;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.-= infix(_:_:)(double *a1, double *a2)
{
  double result = *a1 - *a2;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.seconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1;
  *a2 = (double)a1;
  return result;
}

void static NSOperationQueue.SchedulerTimeType.Stride.seconds(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double static NSOperationQueue.SchedulerTimeType.Stride.milliseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.microseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.nanoseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

BOOL static NSOperationQueue.SchedulerTimeType.Stride.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSOperationQueue.SchedulerTimeType.Stride@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return NSOperationQueue.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSOperationQueue.SchedulerTimeType.Stride(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void NSOperationQueue.SchedulerTimeType.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSOperationQueue.SchedulerTimeType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSOperationQueue.SchedulerTimeType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NSOperationQueue.SchedulerTimeType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

Swift::Int NSOperationQueue.SchedulerTimeType.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NSOperationQueue.SchedulerTimeType.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSOperationQueue.SchedulerTimeType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSOperationQueue.SchedulerTimeType@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return NSOperationQueue.SchedulerTimeType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSOperationQueue.SchedulerTimeType(void *a1)
{
  return NSOperationQueue.SchedulerTimeType.encode(to:)(a1);
}

uint64_t NSOperationQueue.DelayReadyOperation.CancellationContext.__deallocating_deinit()
{
  MEMORY[0x185309510](*(void *)(v0 + 16), -1, -1);
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

void NSOperationQueue.DelayReadyOperation.CancellationContext.cancel()()
{
  Swift::UInt64 v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1);
  uint64_t v2 = MEMORY[0x185309640](v0 + 24);
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    swift_unknownObjectWeakAssign();
    os_unfair_lock_unlock(v1);
    uint64_t v4 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
    uint64_t v5 = *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
    uint64_t v6 = *(void **)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue];
    *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0;

    *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0;
    swift_release();
    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for NSOperationQueue.DelayReadyOperation();
    objc_msgSendSuper2(&v7, sel_cancel);
  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

void protocol witness for Cancellable.cancel() in conformance NSOperationQueue.DelayReadyOperation.CancellationContext()
{
}

uint64_t one-time initialization function for readySchedulingQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v5 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v7[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type NSOperationQueue.DelayReadyOperation.CancellationContext and conformance NSOperationQueue.DelayReadyOperation.CancellationContext((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static NSOperationQueue.DelayReadyOperation.readySchedulingQueue = result;
  return result;
}

uint64_t NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v7 - 8);
  uint64_t v19 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x185301AD0](a1, a2);
  if (one-time initialization token for readySchedulingQueue != -1) {
    swift_once();
  }
  uint64_t v16 = static NSOperationQueue.DelayReadyOperation.readySchedulingQueue;
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_25;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type NSOperationQueue.DelayReadyOperation.CancellationContext and conformance NSOperationQueue.DelayReadyOperation.CancellationContext(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x185302AB0](v12, v9, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x185309640](a1 + 16);
  if (result)
  {
    uint64_t v2 = (void *)result;
    swift_getKeyPath();
    id v3 = v2;
    _bridgeKeyPathToString(_:)();
    uint64_t v4 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_willChangeValueForKey_, v4);

    swift_unknownObjectRelease();
    swift_release();
    *((unsigned char *)v3
    + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter) = 1;
    swift_getKeyPath();
    id v5 = v3;
    _bridgeKeyPathToString(_:)();
    uint64_t v6 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_didChangeValueForKey_, v6);

    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

void NSOperationQueue.DelayReadyOperation.main()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action);
  uint64_t v8 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action);
  if (v8)
  {
    uint64_t v9 = (void (*)(uint64_t))v7[1];
    *uint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v10 = static DispatchTime.now()();
    v8(v10);
    uint64_t v11 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
    uint64_t v12 = *(void **)(v0
                   + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue);
    if (v12)
    {
      Class v31 = ObjectType;
      uint64_t v13 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
      uint64_t v14 = *(void *)(v1
                      + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context);
      if (v14)
      {
        *(void *)(v1
                  + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue) = 0;
        *(void *)(v1 + v13) = 0;
        os_unfair_lock_t v30 = *(os_unfair_lock_t *)(v14 + 16);
        os_unfair_lock_lock(v30);
        v29[1] = v14 + 24;
        uint64_t v15 = (void *)MEMORY[0x185309640]();

        if (v15)
        {
          double v16 = *(double *)(v1
                          + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval);
          uint64_t v17 = v31;
          uint64_t v18 = objc_allocWithZone(v31);
          uint64_t v19 = (void (**)(uint64_t))&v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
          uint64_t v20 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
          uint64_t v21 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
          *uint64_t v19 = v8;
          v19[1] = v9;
          v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
          *(void *)&v18[v20] = v12;
          *(double *)&v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = v16;
          *(void *)&v18[v21] = v14;
          id v22 = v12;
          swift_retain();
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          v32.receiver = v18;
          v32.super_class = v17;
          id v23 = objc_msgSendSuper2(&v32, sel_init);
          swift_unknownObjectWeakAssign();
          unint64_t v24 = v22;
          objc_msgSend(v22, sel_addOperation_, v23);
          os_unfair_lock_unlock(v30);
          id v25 = v23;
          NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v6, v16);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          swift_release();

          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        }
        else
        {
          os_unfair_lock_unlock(v30);
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          swift_release();
        }
        return;
      }
      unint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      id v27 = v12;
      v26(v6, v3);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
    }
    unint64_t v28 = *(void **)(v1 + v11);
    *(void *)(v1 + v11) = 0;

    *(void *)(v1
              + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context) = 0;
    swift_release();
  }
}

id NSOperationQueue.DelayReadyOperation.isReady.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  id result = objc_msgSendSuper2(&v2, sel_isReady);
  if (result) {
    return (id)v0[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter];
  }
  return result;
}

id key path getter for NSOperationQueue.DelayReadyOperation.isReady : NSOperationQueue.DelayReadyOperation@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  v6.receiver = *a1;
  v6.super_class = (Class)type metadata accessor for NSOperationQueue.DelayReadyOperation();
  id result = objc_msgSendSuper2(&v6, sel_isReady);
  if (result) {
    char v5 = v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter];
  }
  else {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

id protocol witness for Cancellable.cancel() in conformance NSOperationQueue.DelayReadyOperation(objc_class *a1)
{
  uint64_t v3 = (char *)*v1;
  uint64_t v4 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  uint64_t v5 = *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  objc_super v6 = *(void **)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue];
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0;

  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0;
  swift_release();
  v8.receiver = v3;
  v8.super_class = a1;
  return [(objc_class *)&v8 cancel];
}

void NSOperationQueue.schedule(options:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  v10[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v10[5] = v6;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v10[3] = &block_descriptor_9;
  uint64_t v7 = _Block_copy(v10);
  objc_super v8 = self;
  swift_retain();
  id v9 = objc_msgSend(v8, sel_blockOperationWithBlock_, v7);
  _Block_release(v7);
  swift_release();
  objc_msgSend(v3, sel_addOperation_, v9);
}

uint64_t sub_181CA3488()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void NSOperationQueue.schedule(after:tolerance:options:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *a1;
  objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  id v9 = specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(a4, a5, (double *)&v10);
  swift_release();
  objc_msgSend(v6, sel_addOperation_, v9);
}

uint64_t type metadata accessor for NSOperationQueue.DelayReadyOperation()
{
  return self;
}

void NSOperationQueue.schedule(after:interval:tolerance:options:_:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *(void *)(v11 + 16) = v12;
  swift_unknownObjectWeakInit();
  *uint64_t v12 = 0;
  uint64_t v18 = v10;
  uint64_t v19 = v9;
  objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  swift_retain();
  id v13 = v5;
  id v14 = specialized NSOperationQueue.DelayReadyOperation.init(repeating:after:queue:interval:context:)(a3, a4, (double *)&v19, v5, &v18, v11);
  swift_release();

  swift_release();
  objc_msgSend(v13, sel_addOperation_, v14, v18, v19);
  uint64_t v19 = v11;
  uint64_t v15 = type metadata accessor for AnyCancellable();
  swift_allocObject();
  lazy protocol witness table accessor for type NSOperationQueue.DelayReadyOperation.CancellationContext and conformance NSOperationQueue.DelayReadyOperation.CancellationContext(&lazy protocol witness table cache variable for type NSOperationQueue.DelayReadyOperation.CancellationContext and conformance NSOperationQueue.DelayReadyOperation.CancellationContext, (void (*)(uint64_t))type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext);
  swift_retain();
  uint64_t v16 = AnyCancellable.init<A>(_:)();
  uint64_t v17 = MEMORY[0x1E4F1AB08];
  a5[3] = v15;
  a5[4] = v17;
  swift_release();

  *a5 = v16;
}

double NSOperationQueue.now.getter@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void NSOperationQueue.minimumTolerance.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for Scheduler.schedule(options:_:) in conformance NSOperationQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  v11[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v11[3] = &block_descriptor_32;
  objc_super v8 = _Block_copy(v11);
  uint64_t v9 = self;
  swift_retain();
  id v10 = objc_msgSend(v9, sel_blockOperationWithBlock_, v8);
  _Block_release(v8);
  swift_release();
  objc_msgSend(v6, sel_addOperation_, v10);
}

void protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance NSOperationQueue(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_super v8 = *v5;
  uint64_t v11 = *a1;
  id v9 = objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  id v10 = specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(a4, a5, (double *)&v11);
  swift_release();
  objc_msgSend(v8, sel_addOperation_, v10);
}

void protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance NSOperationQueue(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
}

id specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = *a3;
  id v13 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0;
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0;
  *id v13 = a1;
  v13[1] = a2;
  v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = 0;
  v20.receiver = v3;
  v20.super_class = ObjectType;
  swift_retain();
  id v14 = objc_msgSendSuper2(&v20, sel_init);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  id v15 = v14;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v16 = v12 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
  static DispatchTime.now()();
  NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v11, v16);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v15;
}

uint64_t type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext()
{
  return self;
}

id specialized NSOperationQueue.DelayReadyOperation.init(repeating:after:queue:interval:context:)(uint64_t a1, uint64_t a2, double *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v28 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = *a3;
  uint64_t v19 = *a5;
  objc_super v20 = &v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  uint64_t v21 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
  uint64_t v22 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
  *objc_super v20 = a1;
  v20[1] = a2;
  v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
  *(void *)&v7[v21] = a4;
  *(void *)&v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = v19;
  *(void *)&v7[v22] = a6;
  v30.receiver = v7;
  v30.super_class = ObjectType;
  swift_retain();
  id v23 = a4;
  swift_retain();
  id v24 = objc_msgSendSuper2(&v30, sel_init);
  swift_unknownObjectWeakAssign();
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  id v25 = v24;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v26 = v18 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
  static DispatchTime.now()();
  NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v17, v26);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v28);
  return v25;
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerTimeType()
{
  return &type metadata for NSOperationQueue.SchedulerTimeType;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerTimeType.Stride()
{
  return &type metadata for NSOperationQueue.SchedulerTimeType.Stride;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerOptions()
{
  return &type metadata for NSOperationQueue.SchedulerOptions;
}

void *type metadata accessor for NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  return &unk_1ECA4F6F0;
}

unsigned char *storeEnumTagSinglePayload for NSOperationQueue.SchedulerTimeType.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181CA41F4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_1ECA4F780;
}

uint64_t sub_181CA443C()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)()
{
  return closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(v0);
}

uint64_t lazy protocol witness table accessor for type NSOperationQueue.DelayReadyOperation.CancellationContext and conformance NSOperationQueue.DelayReadyOperation.CancellationContext(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double Date.init<A>(_:strategy:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  if (!v5)
  {
    double result = v12;
    *a5 = v12;
  }
  return result;
}

double Date.init<A, B>(_:strategy:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  uint64_t v19 = a6;
  uint64_t v12 = *(void *)(a4 - 8);
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  v20[0] = String.init<A>(_:)();
  v20[1] = v16;
  (*(void (**)(double *__return_ptr, void *, uint64_t, uint64_t))(a5 + 48))(&v21, v20, a3, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    double result = v21;
    *uint64_t v19 = v21;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BufferView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for BufferView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)double result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)double result = 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in BufferView<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>()
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>();
}

{
  swift_getWitnessTable();
  lazy protocol witness table accessor for type Int and conformance Int();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in BufferView<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized BufferView.withUnsafeRawPointer<A>(_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a2 <= 2 || (uint64_t result = strncmp(a1, "NaN", 3uLL), result))
  {
    uint64_t v10 = StaticString.description.getter();
    uint64_t v12 = v11;
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3, a5, a6);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v10;
    *(void *)(v18 + 8) = v12;
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v15;
    *(void *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = 0;
    *(unsigned char *)(v18 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized BufferView.withUnsafePointer<A>(_:)(const char *a1, size_t a2)
{
  return _stringshims_strncasecmp_l(a1, "0x", a2, 0);
}

uint64_t BufferView.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a1(a2, a3);
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1, a4);
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance BufferView<A>(void *a1@<X8>)
{
  BufferView.makeIterator()();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance BufferView<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance BufferView<A>(uint64_t a1)
{
  uint64_t v3 = v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  return specialized Collection._copyToContiguousArray()(v6, a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance BufferView<A>(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x185302440](a1, a2);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance BufferView<A>@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return BufferView.withContiguousStorageIfAvailable<A>(_:)(a1, *v3, v3[1], a2, a3);
}

uint64_t UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)@<X0>(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  if ((v6 & (unint64_t)(v6 + 1)) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v9 = isStackAllocationSafe;
  uint64_t v10 = *(void *)(a3 - 8);
  if (v6 > 0xF
    || *(uint64_t *)(v5 + 72) >= 1025
    && (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), !isStackAllocationSafe))
  {
    uint64_t v15 = (void *)swift_slowAlloc();
    size_t v16 = *(void *)(v10 + 64);
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v17 = v15;
      memcpy(v15, (const void *)(a2 + v9), v16);
      (*(void (**)(uint64_t, void *, uint64_t))(v10 + 16))(a4, v17, a3);
LABEL_14:
      JUMPOUT(0x185309510);
    }
    goto LABEL_12;
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v12 = (char *)&v18 - v11;
  size_t v13 = *(void *)(v10 + 64);
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  memcpy((char *)&v18 - v11, (const void *)(a2 + v9), v13);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 16))(a4, v12, a3);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance BufferView<A>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 + *(void *)(*(void *)(*(void *)(result + 16) - 8) + 72) * v2[1];
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance BufferView<A>(uint64_t *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *a1 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  a1[1] = v7;
  uint64_t result = (void (*)(void *))malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)result;
  uint64_t v9 = *a2;
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(v7 + 72);
  if (!v11)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 - v10 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_20;
  }
  if ((v9 - v10) / v11 < 0) {
    goto LABEL_18;
  }
  uint64_t v13 = v10 + v11 * v3[1] - v9;
  if (v11 == -1 && v13 == 0x8000000000000000) {
    goto LABEL_21;
  }
  if (v13 / v11 < 1) {
    goto LABEL_19;
  }
  int v15 = *(_DWORD *)(v7 + 80);
  if ((v15 & 0x10000) == 0)
  {
    UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v9, v6, (uint64_t)result);
    return AttributedString.Runs.AttributesSlice1.subscript.read;
  }
  if ((v15 & v9) == 0)
  {
    (*(void (**)(void (*)(void *), uint64_t, uint64_t))(v7 + 16))(result, *a2, v6);
    return AttributedString.Runs.AttributesSlice1.subscript.read;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance BufferView<A>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  if (!v8)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v4 - v6 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_20;
  }
  if ((v4 - v6) / v8 < 0) {
    goto LABEL_17;
  }
  if (v5 - v4 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_21;
  }
  uint64_t v10 = (v5 - v4) / v8;
  if (v10 < 0) {
    goto LABEL_18;
  }
  uint64_t v11 = v6 + v8 * v3[1] - v5;
  if (v8 == -1 && v11 == 0x8000000000000000) {
    goto LABEL_22;
  }
  if (v11 / v8 < 0) {
    goto LABEL_19;
  }
  int v12 = *(_DWORD *)(v7 + 80);
  if ((v12 & 0x10000) == 0 || (v12 & (v5 | v4)) == 0)
  {
    *a3 = v4;
    a3[1] = v10;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

double protocol witness for Collection.indices.getter in conformance BufferView<A>@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for BufferViewIndex();
  swift_getWitnessTable();
  Range.init(uncheckedBounds:)();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance BufferView<A>()
{
  return *(void *)(v0 + 8);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

void *protocol witness for Collection.index(after:) in conformance BufferView<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance BufferView<A>(void *result, uint64_t a2)
{
  *result += *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance BufferView<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result - *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance BufferView<A>(void *result, uint64_t a2)
{
  *result -= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

void *protocol witness for Collection.index(_:offsetBy:) in conformance BufferView<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = *result + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72) * a2;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance BufferView<A>()
{
  return MEMORY[0x1F41842A0]();
}

void *protocol witness for Collection.distance(from:to:) in conformance BufferView<A>(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72);
  if (v3)
  {
    uint64_t v4 = *a2 - *result;
    if (v4 != 0x8000000000000000 || v3 != -1) {
      return (void *)(v4 / v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t base witness table accessor for Collection in BufferView<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in BufferView<A>()
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>();
}

uint64_t base witness table accessor for Sequence in BufferView<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in BufferView<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BufferView<A>()
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BufferView<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  id v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

id _FileManagerImpl.createSymbolicLink(at:withDestinationURL:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  id v8 = *(id *)a2;
  id v7 = *(id *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  swift_retain();
  id v10 = v4;
  swift_retain();
  uint64_t v235 = v3;
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if (v13) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  v238._uint64_t countAndFlagsBits = (uint64_t)v10;
  v238._unint64_t object = v5;
  uint64_t v239 = v6;
  URL.scheme.getter();
  if (!v11)
  {
    swift_release();
    swift_release();

    goto LABEL_16;
  }
  id v232 = v7;
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    id v7 = v232;
    goto LABEL_10;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  id v7 = v232;
  if ((v14 & 1) == 0)
  {
LABEL_16:
    id v20 = v10;
    swift_retain_n();
    swift_retain_n();
    id v21 = v20;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v239 = v6;
      id v22 = v21;
      uint64_t v234 = v5;
      swift_retain();
      swift_retain();
      Swift::String v23 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v23._countAndFlagsBits;
      Swift::String v238 = v23;
      swift_bridgeObjectRetain();
      id v233 = v22;
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v23._object;
      }
      else
      {
        unint64_t object = (unint64_t)v23._object;
        if ((specialized BidirectionalCollection.last.getter(v23._countAndFlagsBits, (unint64_t)v23._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v238._countAndFlagsBits;
          unint64_t object = (unint64_t)v238._object;
        }
      }
      v236._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v39 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
      uint64_t v40 = v236._countAndFlagsBits;
      uint64_t v41 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v41 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v41)
      {
        v236._uint64_t countAndFlagsBits = countAndFlagsBits;
        v236._unint64_t object = (void *)object;
        MEMORY[0x1F4188790](v39);
        uint64_t v225 = (uint64_t)&v236;
        uint64_t v226 = v40;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v224, countAndFlagsBits, object);
        if (v42 == 1)
        {
          unint64_t v44 = (unint64_t)v236._object;
          Swift::Int v43 = v236._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, v44, v40);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v47 = v233;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v47 = v233;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v26 = objc_msgSend(v21, sel__parameterString);
      if (v26)
      {
        id v27 = v26;
        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        objc_super v30 = v29;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v31 = objc_msgSend(v21, sel_path)) != 0)
        {
          objc_super v32 = v31;
          id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          int64_t v35 = v34;

          v238._uint64_t countAndFlagsBits = (uint64_t)v33;
          v238._unint64_t object = v35;
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = 59;
          v36._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v37._uint64_t countAndFlagsBits = (uint64_t)v28;
          v37._unint64_t object = v30;
          String.append(_:)(v37);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v238._uint64_t countAndFlagsBits = 59;
          v238._unint64_t object = (void *)0xE100000000000000;
          v45._uint64_t countAndFlagsBits = (uint64_t)v28;
          v45._unint64_t object = v30;
          String.append(_:)(v45);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        goto LABEL_39;
      }
      id v46 = objc_msgSend(v21, sel_path);
      if (!v46)
      {
        swift_release();
        swift_release();

        goto LABEL_39;
      }
      unint64_t v47 = v46;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      swift_release();
      swift_release();
    }
LABEL_39:
    uint64_t v48 = self;
    uint64_t v49 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v50 = objc_msgSend(v48, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 262, v49, v21, 0, 0, 0, 0);
LABEL_40:
    v50;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }
LABEL_10:
  v238._uint64_t countAndFlagsBits = (uint64_t)v8;
  v238._unint64_t object = v7;
  uint64_t v239 = v9;
  URL.scheme.getter();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_43;
  }
  swift_retain();
  id v17 = v8;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v38 = objc_msgSend(v17, sel_isFileURL);
    swift_release();
    swift_release();

    if (v38) {
      goto LABEL_43;
    }
    goto LABEL_51;
  }
  v238._uint64_t countAndFlagsBits = (uint64_t)v17;
  v238._unint64_t object = v7;
  uint64_t v239 = v9;
  URL.scheme.getter();
  if (!v18)
  {
    swift_release();
    swift_release();

    goto LABEL_51;
  }
  id v230 = v8;
  uint64_t v234 = v5;
  Swift::String v19 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v19._countAndFlagsBits == 1701603686 && v19._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v5 = v234;
    id v8 = v230;
    goto LABEL_43;
  }
  char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v5 = v234;
  id v8 = v230;
  if ((v51 & 1) == 0)
  {
LABEL_51:
    id v68 = v17;
    swift_retain_n();
    swift_retain_n();
    int64_t v69 = v7;
    id v70 = v68;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v239 = v9;
      id v71 = v70;
      id v232 = v69;
      swift_retain();
      uint64_t v231 = v9;
      swift_retain();
      Swift::String v72 = URL.path(percentEncoded:)(1);
      uint64_t v73 = v72._countAndFlagsBits;
      Swift::String v238 = v72;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t v74 = (unint64_t)v72._object;
      }
      else
      {
        unint64_t v74 = (unint64_t)v72._object;
        if ((specialized BidirectionalCollection.last.getter(v72._countAndFlagsBits, (unint64_t)v72._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t v73 = v238._countAndFlagsBits;
          unint64_t v74 = (unint64_t)v238._object;
        }
      }
      v236._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v104 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
      uint64_t v105 = v236._countAndFlagsBits;
      uint64_t v106 = HIBYTE(v74) & 0xF;
      if ((v74 & 0x2000000000000000) == 0) {
        uint64_t v106 = v73 & 0xFFFFFFFFFFFFLL;
      }
      if (v106)
      {
        v236._uint64_t countAndFlagsBits = v73;
        v236._unint64_t object = (void *)v74;
        MEMORY[0x1F4188790](v104);
        uint64_t v225 = (uint64_t)&v236;
        uint64_t v226 = v105;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v224, v73, v74);
        if (v107 == 1)
        {
          unint64_t v108 = (unint64_t)v236._object;
          Swift::Int v109 = v236._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v109, v108, v105);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v87 = objc_msgSend(v70, sel__parameterString);
      if (v87)
      {
        unint64_t v88 = v87;
        id v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        long long v91 = v90;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v92 = objc_msgSend(v70, sel_path)) != 0)
        {
          int64_t v93 = v92;
          id v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
          int64_t v96 = v95;

          v238._uint64_t countAndFlagsBits = (uint64_t)v94;
          v238._unint64_t object = v96;
          swift_bridgeObjectRetain();
          v97._uint64_t countAndFlagsBits = 59;
          v97._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v97);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v98._uint64_t countAndFlagsBits = (uint64_t)v89;
          v98._unint64_t object = v91;
          String.append(_:)(v98);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v238._uint64_t countAndFlagsBits = 59;
          v238._unint64_t object = (void *)0xE100000000000000;
          v208._uint64_t countAndFlagsBits = (uint64_t)v89;
          v208._unint64_t object = v91;
          String.append(_:)(v208);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v209 = objc_msgSend(v70, sel_path);
        if (v209)
        {
          uint64_t v210 = v209;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    uint64_t v214 = self;
    uint64_t v215 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v216 = objc_msgSend(v214, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 518, v215, v70, 0, 0, 0, 0);
    goto LABEL_176;
  }
LABEL_43:
  id v230 = v8;
  id v232 = v10;
  swift_retain();
  swift_retain();
  uint64_t v234 = v5;
  uint64_t v231 = v9;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v239 = v6;
    id v229 = v232;
    swift_retain();
    swift_retain();
    Swift::String v52 = URL.path(percentEncoded:)(1);
    uint64_t v53 = v52._countAndFlagsBits;
    Swift::String v238 = v52;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t v54 = (unint64_t)v52._object;
    }
    else
    {
      unint64_t v54 = (unint64_t)v52._object;
      if ((specialized BidirectionalCollection.last.getter(v52._countAndFlagsBits, (unint64_t)v52._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v53 = v238._countAndFlagsBits;
        unint64_t v54 = (unint64_t)v238._object;
      }
    }
    v236._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v75 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
    uint64_t v76 = v236._countAndFlagsBits;
    uint64_t v77 = HIBYTE(v54) & 0xF;
    if ((v54 & 0x2000000000000000) == 0) {
      uint64_t v77 = v53 & 0xFFFFFFFFFFFFLL;
    }
    if (v77)
    {
      v236._uint64_t countAndFlagsBits = v53;
      v236._unint64_t object = (void *)v54;
      MEMORY[0x1F4188790](v75);
      uint64_t v225 = (uint64_t)&v236;
      uint64_t v226 = v76;
      swift_bridgeObjectRetain();
      uint64_t v78 = v235;
      int64_t v79 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v224, v53, v54);
      uint64_t v235 = v78;
      if (v80 == 1)
      {
        unint64_t v81 = (unint64_t)v236._object;
        Swift::Int v82 = v236._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v83 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, v81, v76);
        unint64_t v85 = v84;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v86 = v229;
        if (!v85) {
          goto LABEL_79;
        }
      }
      else
      {
        long long v103 = v79;
        unint64_t v85 = v80;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v83 = (uint64_t)v103;
        unint64_t v86 = v229;
        if (!v85)
        {
LABEL_79:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v83 = 0;
          unint64_t v85 = 0xE000000000000000;
          goto LABEL_80;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v83 = 0;
      unint64_t v85 = 0xE000000000000000;
      unint64_t v86 = v229;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_80:
    swift_release();
    swift_release();

    uint64_t v9 = v231;
    goto LABEL_81;
  }
  id v55 = objc_msgSend(v232, sel__parameterString);
  if (v55)
  {
    int64_t v56 = v55;
    id v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    uint64_t v59 = v58;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v60 = objc_msgSend(v232, sel_path)) != 0)
    {
      uint64_t v61 = v60;
      id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      uint64_t v63 = v9;
      unint64_t v65 = v64;

      v238._uint64_t countAndFlagsBits = (uint64_t)v62;
      v238._unint64_t object = v65;
      swift_bridgeObjectRetain();
      v66._uint64_t countAndFlagsBits = 59;
      v66._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      uint64_t v9 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v67._uint64_t countAndFlagsBits = (uint64_t)v57;
      v67._unint64_t object = v59;
      String.append(_:)(v67);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v238._uint64_t countAndFlagsBits = 59;
      v238._unint64_t object = (void *)0xE100000000000000;
      v99._uint64_t countAndFlagsBits = (uint64_t)v57;
      v99._unint64_t object = v59;
      String.append(_:)(v99);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v83 = v238._countAndFlagsBits;
    unint64_t v85 = (unint64_t)v238._object;
  }
  else
  {
    id v100 = objc_msgSend(v232, sel_path);
    if (v100)
    {
      long long v101 = v100;
      uint64_t v83 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
      unint64_t v85 = v102;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v83 = 0;
      unint64_t v85 = 0xE000000000000000;
    }
  }
LABEL_81:
  swift_retain();
  id v110 = v230;
  swift_retain();
  char v111 = _foundation_swift_url_feature_enabled();
  id v228 = v110;
  if (v111)
  {
    id v229 = (id)v83;
    id v230 = (id)v85;
    v238._uint64_t countAndFlagsBits = (uint64_t)v110;
    v238._unint64_t object = v7;
    uint64_t v239 = v9;
    id v227 = v110;
    swift_retain();
    swift_retain();
    Swift::String v112 = URL.path(percentEncoded:)(1);
    Swift::String v238 = v112;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v112._countAndFlagsBits, (unint64_t)v112._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v236._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v113 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
    uint64_t v114 = v236._countAndFlagsBits;
    uint64_t v116 = v238._countAndFlagsBits;
    uint64_t v115 = v238._object;
    unint64_t v117 = ((unint64_t)v238._object >> 56) & 0xF;
    if (((uint64_t)v238._object & 0x2000000000000000) == 0) {
      unint64_t v117 = v238._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v117)
    {
      Swift::String v236 = v238;
      MEMORY[0x1F4188790](v113);
      uint64_t v225 = (uint64_t)&v236;
      uint64_t v226 = v114;
      swift_bridgeObjectRetain();
      uint64_t v118 = v116;
      uint64_t v119 = v235;
      uint64_t v120 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v224, v118, (unint64_t)v115);
      uint64_t v235 = v119;
      if (v121 == 1)
      {
        unint64_t v123 = (unint64_t)v236._object;
        Swift::Int v122 = v236._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v124 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v122, v123, v114);
        unint64_t v126 = v125;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v124 = (uint64_t)v120;
        unint64_t v126 = v121;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v83 = (uint64_t)v229;
      if (!v126)
      {
        uint64_t v147 = v231;
        swift_release();
        swift_release();
        id v148 = v227;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v124 = 0;
        unint64_t v126 = 0xE000000000000000;
        goto LABEL_103;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v124 = 0;
      unint64_t v126 = 0xE000000000000000;
      uint64_t v83 = (uint64_t)v229;
    }
    uint64_t v147 = v231;
    swift_release();
    swift_release();
    id v148 = v227;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_103:
    swift_release();
    swift_release();

    uint64_t v9 = v147;
    unint64_t v85 = (unint64_t)v230;
    goto LABEL_104;
  }
  id v127 = objc_msgSend(v110, sel__parameterString);
  if (v127)
  {
    unint64_t v128 = v127;
    uint64_t v129 = v9;
    id v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
    unint64_t v131 = v110;
    uint64_t v133 = v132;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v134 = objc_msgSend(v131, sel_path)) != 0)
    {
      uint64_t v135 = v134;
      id v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
      id v229 = (id)v83;
      id v230 = (id)v85;
      uint64_t v137 = (uint64_t)v136;
      long long v139 = v138;

      v238._uint64_t countAndFlagsBits = v137;
      v238._unint64_t object = v139;
      swift_bridgeObjectRetain();
      v140._uint64_t countAndFlagsBits = 59;
      v140._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v140);
      uint64_t v83 = (uint64_t)v229;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v141._uint64_t countAndFlagsBits = (uint64_t)v130;
      v141._unint64_t object = v133;
      String.append(_:)(v141);
      uint64_t v9 = v129;
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      unint64_t v85 = (unint64_t)v230;
    }
    else
    {
      v238._uint64_t countAndFlagsBits = 59;
      v238._unint64_t object = (void *)0xE100000000000000;
      v142._uint64_t countAndFlagsBits = (uint64_t)v130;
      v142._unint64_t object = v133;
      String.append(_:)(v142);
      uint64_t v9 = v129;
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v124 = v238._countAndFlagsBits;
    unint64_t v126 = (unint64_t)v238._object;
  }
  else
  {
    id v143 = objc_msgSend(v110, sel_path);
    uint64_t v144 = v110;
    if (v143)
    {
      uint64_t v145 = v143;
      uint64_t v124 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
      unint64_t v126 = v146;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v124 = 0;
      unint64_t v126 = 0xE000000000000000;
    }
  }
LABEL_104:
  uint64_t v149 = HIBYTE(v85) & 0xF;
  if ((v85 & 0x2000000000000000) == 0) {
    uint64_t v149 = v83 & 0xFFFFFFFFFFFFLL;
  }
  if (!v149)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v157 = v232;
    uint64_t v158 = v234;
    swift_retain_n();
    swift_retain_n();
    id v21 = v157;
    if (!_foundation_swift_url_feature_enabled())
    {
      id v184 = objc_msgSend(v21, sel__parameterString);
      if (v184)
      {
        long long v185 = v184;
        id v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
        uint64_t v188 = v187;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v189 = objc_msgSend(v21, sel_path)) != 0)
        {
          uint64_t v190 = v189;
          id v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
          long long v193 = v192;

          v238._uint64_t countAndFlagsBits = (uint64_t)v191;
          v238._unint64_t object = v193;
          swift_bridgeObjectRetain();
          v194._uint64_t countAndFlagsBits = 59;
          v194._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v194);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v195._uint64_t countAndFlagsBits = (uint64_t)v186;
          v195._unint64_t object = v188;
          String.append(_:)(v195);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v238._uint64_t countAndFlagsBits = 59;
          v238._unint64_t object = (void *)0xE100000000000000;
          v212._uint64_t countAndFlagsBits = (uint64_t)v186;
          v212._unint64_t object = v188;
          String.append(_:)(v212);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_171;
      }
      id v213 = objc_msgSend(v21, sel_path);
      if (!v213)
      {
        swift_release();
        swift_release();

        goto LABEL_171;
      }
      id v159 = v213;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
      swift_release();
      swift_release();

LABEL_170:
LABEL_171:
      uint64_t v220 = self;
      uint64_t v221 = String._bridgeToObjectiveCImpl()();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      id v50 = objc_msgSend(v220, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v221, v21, 0, 0, 0, 0);
      goto LABEL_40;
    }
    v238._uint64_t countAndFlagsBits = (uint64_t)v21;
    v238._unint64_t object = v158;
    uint64_t v239 = v6;
    id v159 = v21;
    swift_retain();
    swift_retain();
    Swift::String v160 = URL.path(percentEncoded:)(1);
    Swift::String v238 = v160;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v160._countAndFlagsBits, (unint64_t)v160._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v236._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v161 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
    uint64_t v162 = v236._countAndFlagsBits;
    uint64_t v163 = v238._countAndFlagsBits;
    long long v164 = v238._object;
    unint64_t v165 = ((unint64_t)v238._object >> 56) & 0xF;
    if (((uint64_t)v238._object & 0x2000000000000000) == 0) {
      unint64_t v165 = v238._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v165)
    {
      uint64_t v166 = v159;
      Swift::String v236 = v238;
      MEMORY[0x1F4188790](v161);
      uint64_t v225 = (uint64_t)&v236;
      uint64_t v226 = v162;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v224, v163, (unint64_t)v164);
      if (v167 == 1)
      {
        unint64_t v169 = (unint64_t)v236._object;
        Swift::Int v168 = v236._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v168, v169, v162);
        uint64_t v171 = v170;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v171 = v167;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v159 = v166;
      if (!v171)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_169;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_169:
    swift_release();
    swift_release();
    goto LABEL_170;
  }
  uint64_t v150 = HIBYTE(v126) & 0xF;
  if ((v126 & 0x2000000000000000) == 0) {
    uint64_t v150 = v124 & 0xFFFFFFFFFFFFLL;
  }
  if (!v150)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v172 = v228;
    swift_retain_n();
    swift_retain_n();
    long long v173 = v7;
    id v70 = v172;
    if (_foundation_swift_url_feature_enabled())
    {
      v238._uint64_t countAndFlagsBits = (uint64_t)v70;
      v238._unint64_t object = v173;
      uint64_t v239 = v9;
      id v174 = v70;
      id v232 = v173;
      swift_retain();
      swift_retain();
      Swift::String v175 = URL.path(percentEncoded:)(1);
      Swift::String v238 = v175;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v175._countAndFlagsBits, (unint64_t)v175._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v236._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v176 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
      uint64_t v177 = v236._countAndFlagsBits;
      uint64_t v179 = v238._countAndFlagsBits;
      long long v178 = v238._object;
      unint64_t v180 = ((unint64_t)v238._object >> 56) & 0xF;
      if (((uint64_t)v238._object & 0x2000000000000000) == 0) {
        unint64_t v180 = v238._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v180)
      {
        Swift::String v236 = v238;
        MEMORY[0x1F4188790](v176);
        uint64_t v225 = (uint64_t)&v236;
        uint64_t v226 = v177;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v224, v179, (unint64_t)v178);
        if (v181 == 1)
        {
          unint64_t v183 = (unint64_t)v236._object;
          Swift::Int v182 = v236._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v182, v183, v177);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v196 = objc_msgSend(v70, sel__parameterString);
      if (v196)
      {
        long long v197 = v196;
        id v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
        long long v200 = v199;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v201 = objc_msgSend(v70, sel_path)) != 0)
        {
          uint64_t v202 = v201;
          id v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
          unint64_t v205 = v204;

          v238._uint64_t countAndFlagsBits = (uint64_t)v203;
          v238._unint64_t object = v205;
          swift_bridgeObjectRetain();
          v206._uint64_t countAndFlagsBits = 59;
          v206._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v206);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v207._uint64_t countAndFlagsBits = (uint64_t)v198;
          v207._unint64_t object = v200;
          String.append(_:)(v207);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v238._uint64_t countAndFlagsBits = 59;
          v238._unint64_t object = (void *)0xE100000000000000;
          v217._uint64_t countAndFlagsBits = (uint64_t)v198;
          v217._unint64_t object = v200;
          String.append(_:)(v217);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v218 = objc_msgSend(v70, sel_path);
        if (v218)
        {
          unint64_t v219 = v218;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    unint64_t v222 = self;
    uint64_t v223 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v216 = objc_msgSend(v222, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v223, v70, 0, 0, 0, 0);
LABEL_176:
    v216;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }
  uint64_t v151 = MEMORY[0x185309640](v233);
  if (v151)
  {
    uint64_t v152 = (void *)v151;
    uint64_t v153 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v154 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v238._uint64_t countAndFlagsBits = 0;
    unsigned __int8 v155 = objc_msgSend(v152, sel_createSymbolicLinkAtPath_withDestinationPath_error_, v153, v154, &v238);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v155) {
      return (id)v238._countAndFlagsBits;
    }
    if (v238._countAndFlagsBits)
    {
      (id)v238._countAndFlagsBits;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v211 = (id)_nilObjCError;
    }
    return (id)swift_willThrow();
  }
  LODWORD(v226) = 0;
  uint64_t v225 = 48;
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _FileManagerImpl.linkItem(atPath:toPath:)(Swift::String atPath, Swift::String toPath)
{
  uint64_t v3 = v2;
  unint64_t object = toPath._object;
  uint64_t countAndFlagsBits = toPath._countAndFlagsBits;
  uint64_t v6 = atPath._object;
  uint64_t v7 = atPath._countAndFlagsBits;
  uint64_t v8 = MEMORY[0x185309640](v3);
  if (v8)
  {
    char v12 = 0;
    uint64_t v13 = v8;
    MEMORY[0x1F4188790](v8);
    v11[2] = v7;
    v11[3] = v6;
    v11[4] = countAndFlagsBits;
    v11[5] = object;
    void v11[6] = v9;
    v11[7] = &v12;
    id v10 = v9;
    specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v11, v7, (unint64_t)v6);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

id _FileManagerImpl.linkItem(at:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  id v5 = *(id *)(a1 + 16);
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a2 + 16);
  swift_retain();
  id v9 = v3;
  swift_retain();
  id v224 = v5;
  if (!_foundation_swift_url_feature_enabled())
  {
    id v222 = v2;
    unsigned __int8 v12 = objc_msgSend(v9, sel_isFileURL);
    swift_release();
    swift_release();

    if (v12) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  v227._uint64_t countAndFlagsBits = (uint64_t)v9;
  v227._unint64_t object = v4;
  id v228 = v5;
  URL.scheme.getter();
  if (!v10)
  {
    swift_release();
    swift_release();

    goto LABEL_15;
  }
  id v222 = v2;
  Swift::String v11 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v11._countAndFlagsBits == 1701603686 && v11._object == (void *)0xE400000000000000)
  {
    id v5 = v224;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v5 = v224;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
LABEL_15:
    id v17 = v9;
    swift_retain_n();
    swift_retain_n();
    id v18 = v17;
    if (_foundation_swift_url_feature_enabled())
    {
      id v228 = v5;
      id v19 = v18;
      swift_retain();
      swift_retain();
      Swift::String v20 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v20._countAndFlagsBits;
      Swift::String v227 = v20;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v20._object;
      }
      else
      {
        unint64_t object = (unint64_t)v20._object;
        if ((specialized BidirectionalCollection.last.getter(v20._countAndFlagsBits, (unint64_t)v20._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v227._countAndFlagsBits;
          unint64_t object = (unint64_t)v227._object;
        }
      }
      v225._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v36 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      uint64_t v37 = v225._countAndFlagsBits;
      uint64_t v38 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v38 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v38)
      {
        id v222 = v19;
        v225._uint64_t countAndFlagsBits = countAndFlagsBits;
        v225._unint64_t object = (void *)object;
        MEMORY[0x1F4188790](v36);
        uint64_t v214 = (uint64_t)&v225;
        uint64_t v215 = v37;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v213, countAndFlagsBits, object);
        if (v39 == 1)
        {
          unint64_t v41 = (unint64_t)v225._object;
          Swift::Int v40 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v40, v41, v37);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v19 = v222;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v23 = objc_msgSend(v18, sel__parameterString);
      if (v23)
      {
        id v24 = v23;
        id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        id v27 = v26;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v28 = objc_msgSend(v18, sel_path)) != 0)
        {
          unint64_t v29 = v28;
          id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          objc_super v32 = v31;

          v227._uint64_t countAndFlagsBits = (uint64_t)v30;
          v227._unint64_t object = v32;
          swift_bridgeObjectRetain();
          v33._uint64_t countAndFlagsBits = 59;
          v33._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v33);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v34._uint64_t countAndFlagsBits = (uint64_t)v25;
          v34._unint64_t object = v27;
          String.append(_:)(v34);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v227._uint64_t countAndFlagsBits = 59;
          v227._unint64_t object = (void *)0xE100000000000000;
          v42._uint64_t countAndFlagsBits = (uint64_t)v25;
          v42._unint64_t object = v27;
          String.append(_:)(v42);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v43 = objc_msgSend(v18, sel_path);
        if (v43)
        {
          unint64_t v44 = v43;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    unint64_t v86 = self;
    uint64_t v87 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v88 = objc_msgSend(v86, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 262, v87, v18, 0, 0, 0, 0);
    goto LABEL_63;
  }
LABEL_10:
  swift_retain();
  id v14 = v6;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v35 = objc_msgSend(v14, sel_isFileURL);
    swift_release();
    swift_release();

    if (v35) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
  v227._uint64_t countAndFlagsBits = (uint64_t)v14;
  v227._unint64_t object = v7;
  id v228 = v8;
  URL.scheme.getter();
  if (!v15)
  {
    swift_release();
    swift_release();

    goto LABEL_43;
  }
  Swift::String v16 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v16._countAndFlagsBits == 1701603686 && v16._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    id v5 = v224;
    goto LABEL_39;
  }
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  id v5 = v224;
  if ((v45 & 1) == 0)
  {
LABEL_43:
    id v50 = v14;
    swift_retain_n();
    swift_retain_n();
    id v51 = v50;
    if (_foundation_swift_url_feature_enabled())
    {
      id v228 = v8;
      id v52 = v51;
      swift_retain();
      swift_retain();
      Swift::String v53 = URL.path(percentEncoded:)(1);
      uint64_t v54 = v53._countAndFlagsBits;
      Swift::String v227 = v53;
      swift_bridgeObjectRetain();
      id v224 = v52;
      if (String.count.getter() <= 1)
      {
        unint64_t v55 = (unint64_t)v53._object;
      }
      else
      {
        unint64_t v55 = (unint64_t)v53._object;
        if ((specialized BidirectionalCollection.last.getter(v53._countAndFlagsBits, (unint64_t)v53._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t v54 = v227._countAndFlagsBits;
          unint64_t v55 = (unint64_t)v227._object;
        }
      }
      v225._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v80 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      uint64_t v81 = v225._countAndFlagsBits;
      uint64_t v82 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000) == 0) {
        uint64_t v82 = v54 & 0xFFFFFFFFFFFFLL;
      }
      if (v82)
      {
        id v222 = v8;
        v225._uint64_t countAndFlagsBits = v54;
        v225._unint64_t object = (void *)v55;
        MEMORY[0x1F4188790](v80);
        uint64_t v214 = (uint64_t)&v225;
        uint64_t v215 = v81;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v213, v54, v55);
        if (v83 == 1)
        {
          unint64_t v84 = (unint64_t)v225._object;
          Swift::Int v85 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v85, v84, v81);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v101 = v224;
      }
      else
      {
        swift_bridgeObjectRelease();
        long long v101 = v224;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v56 = objc_msgSend(v51, sel__parameterString);
      if (v56)
      {
        id v57 = v56;
        id v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        id v60 = v59;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v61 = objc_msgSend(v51, sel_path)) != 0)
        {
          id v62 = v61;
          id v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
          unint64_t v65 = v64;

          v227._uint64_t countAndFlagsBits = (uint64_t)v63;
          v227._unint64_t object = v65;
          swift_bridgeObjectRetain();
          v66._uint64_t countAndFlagsBits = 59;
          v66._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v66);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v67._uint64_t countAndFlagsBits = (uint64_t)v58;
          v67._unint64_t object = v60;
          String.append(_:)(v67);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v227._uint64_t countAndFlagsBits = 59;
          v227._unint64_t object = (void *)0xE100000000000000;
          v98._uint64_t countAndFlagsBits = (uint64_t)v58;
          v98._unint64_t object = v60;
          String.append(_:)(v98);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v99 = objc_msgSend(v51, sel_path);
        if (v99)
        {
          id v100 = v99;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    uint64_t v107 = self;
    uint64_t v108 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v109 = objc_msgSend(v107, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 518, v108, v51, 0, 0, 0, 0);
    goto LABEL_88;
  }
LABEL_39:
  id v46 = v9;
  swift_retain();
  swift_retain();
  id v220 = v46;
  if (_foundation_swift_url_feature_enabled())
  {
    id v228 = v5;
    id v218 = v46;
    swift_retain();
    swift_retain();
    Swift::String v47 = URL.path(percentEncoded:)(1);
    uint64_t v48 = v47._countAndFlagsBits;
    Swift::String v227 = v47;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t v49 = (unint64_t)v47._object;
    }
    else
    {
      unint64_t v49 = (unint64_t)v47._object;
      if ((specialized BidirectionalCollection.last.getter(v47._countAndFlagsBits, (unint64_t)v47._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v48 = v227._countAndFlagsBits;
        unint64_t v49 = (unint64_t)v227._object;
      }
    }
    v225._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v89 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
    uint64_t v90 = v225._countAndFlagsBits;
    uint64_t v91 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000) == 0) {
      uint64_t v91 = v48 & 0xFFFFFFFFFFFFLL;
    }
    if (v91)
    {
      Swift::String v217 = v4;
      v225._uint64_t countAndFlagsBits = v48;
      v225._unint64_t object = (void *)v49;
      MEMORY[0x1F4188790](v89);
      uint64_t v214 = (uint64_t)&v225;
      uint64_t v215 = v90;
      swift_bridgeObjectRetain();
      uint64_t v92 = v223;
      uint64_t v221 = (uint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v213, v48, v49);
      uint64_t v223 = v92;
      if (v93 == (void *)1)
      {
        unint64_t v95 = (unint64_t)v225._object;
        Swift::Int v94 = v225._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v221 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v94, v95, v90);
        Swift::String v97 = v96;
        swift_bridgeObjectRelease();
      }
      else
      {
        Swift::String v97 = v93;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v5 = v224;
      uint64_t v106 = v220;
      uint64_t v4 = v217;
      unint64_t v219 = v97;
      if (!v97)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v221 = 0;
        unint64_t v219 = (void *)0xE000000000000000;
        id v46 = v106;
        id v104 = v218;
        goto LABEL_91;
      }
      id v46 = v220;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v221 = 0;
      unint64_t v219 = (void *)0xE000000000000000;
      id v5 = v224;
      id v46 = v220;
    }
    swift_release();
    swift_release();
    id v104 = v218;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_91:
    swift_release();
    swift_release();
    goto LABEL_92;
  }
  id v68 = objc_msgSend(v46, sel__parameterString);
  if (v68)
  {
    int64_t v69 = v68;
    id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    Swift::String v72 = v71;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v73 = objc_msgSend(v46, sel_path)) != 0)
    {
      unint64_t v74 = v73;
      id v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
      uint64_t v221 = (uint64_t)v70;
      uint64_t v77 = v76;

      v227._uint64_t countAndFlagsBits = (uint64_t)v75;
      v227._unint64_t object = v77;
      id v5 = v224;
      swift_bridgeObjectRetain();
      v78._uint64_t countAndFlagsBits = 59;
      v78._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v79._uint64_t countAndFlagsBits = v221;
      v79._unint64_t object = v72;
      String.append(_:)(v79);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v227._uint64_t countAndFlagsBits = 59;
      v227._unint64_t object = (void *)0xE100000000000000;
      v102._uint64_t countAndFlagsBits = (uint64_t)v70;
      v102._unint64_t object = v72;
      String.append(_:)(v102);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v221 = v227._countAndFlagsBits;
    unint64_t v219 = v227._object;
  }
  else
  {
    id v103 = objc_msgSend(v46, sel_path);
    if (v103)
    {
      id v104 = v103;
      uint64_t v221 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      unint64_t v219 = v105;
      swift_release();
      swift_release();

LABEL_92:
      goto LABEL_93;
    }
    swift_release();
    swift_release();

    uint64_t v221 = 0;
    unint64_t v219 = (void *)0xE000000000000000;
  }
LABEL_93:
  id v111 = v14;
  swift_retain();
  swift_retain();
  char v112 = _foundation_swift_url_feature_enabled();
  id v218 = v111;
  if (v112)
  {
    v227._uint64_t countAndFlagsBits = (uint64_t)v111;
    v227._unint64_t object = v7;
    id v228 = v8;
    id v216 = v111;
    swift_retain();
    swift_retain();
    Swift::String v113 = URL.path(percentEncoded:)(1);
    Swift::String v227 = v113;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v113._countAndFlagsBits, (unint64_t)v113._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v225._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v114 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
    uint64_t v115 = v225._countAndFlagsBits;
    uint64_t v116 = v227._countAndFlagsBits;
    unint64_t v117 = v227._object;
    unint64_t v118 = ((unint64_t)v227._object >> 56) & 0xF;
    if (((uint64_t)v227._object & 0x2000000000000000) == 0) {
      unint64_t v118 = v227._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v118)
    {
      Swift::String v217 = v4;
      Swift::String v225 = v227;
      MEMORY[0x1F4188790](v114);
      uint64_t v214 = (uint64_t)&v225;
      uint64_t v215 = v115;
      swift_bridgeObjectRetain();
      uint64_t v119 = v116;
      uint64_t v120 = v223;
      unint64_t v121 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v213, v119, (unint64_t)v117);
      uint64_t v223 = v120;
      if (v122 == 1)
      {
        unint64_t v123 = (unint64_t)v225._object;
        Swift::Int v124 = v225._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v125 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v124, v123, v115);
        unint64_t v127 = v126;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v125 = (uint64_t)v121;
        unint64_t v127 = v122;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v217;
      id v5 = v224;
      if (!v127)
      {
        swift_release();
        swift_release();
        id v145 = v216;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v125 = 0;
        unint64_t v127 = 0xE000000000000000;
        goto LABEL_115;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v125 = 0;
      unint64_t v127 = 0xE000000000000000;
      id v5 = v224;
    }
    swift_release();
    swift_release();
    id v145 = v216;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_115:
    swift_release();
    swift_release();

    uint64_t v147 = v221;
    id v146 = v222;
    unint64_t v148 = (unint64_t)v219;
    id v46 = v220;
    goto LABEL_120;
  }
  id v128 = objc_msgSend(v111, sel__parameterString);
  if (v128)
  {
    uint64_t v129 = v128;
    id v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
    uint64_t v132 = v131;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v133 = objc_msgSend(v111, sel_path)) != 0)
    {
      id v134 = v133;
      id v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
      uint64_t v137 = v136;

      v227._uint64_t countAndFlagsBits = (uint64_t)v135;
      v227._unint64_t object = v137;
      swift_bridgeObjectRetain();
      v138._uint64_t countAndFlagsBits = 59;
      v138._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v138);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v139._uint64_t countAndFlagsBits = (uint64_t)v130;
      v139._unint64_t object = v132;
      String.append(_:)(v139);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      id v46 = v220;
    }
    else
    {
      v227._uint64_t countAndFlagsBits = 59;
      v227._unint64_t object = (void *)0xE100000000000000;
      v140._uint64_t countAndFlagsBits = (uint64_t)v130;
      v140._unint64_t object = v132;
      String.append(_:)(v140);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v125 = v227._countAndFlagsBits;
    unint64_t v127 = (unint64_t)v227._object;
  }
  else
  {
    id v141 = objc_msgSend(v111, sel_path);
    if (v141)
    {
      Swift::String v142 = v141;
      id v143 = v111;
      uint64_t v125 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
      unint64_t v127 = v144;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v125 = 0;
      unint64_t v127 = 0xE000000000000000;
    }
  }
  uint64_t v147 = v221;
  id v146 = v222;
  unint64_t v148 = (unint64_t)v219;
LABEL_120:
  uint64_t v149 = HIBYTE(v148) & 0xF;
  if ((v148 & 0x2000000000000000) == 0) {
    uint64_t v149 = v147 & 0xFFFFFFFFFFFFLL;
  }
  if (!v149)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v156 = v46;
    swift_retain_n();
    swift_retain_n();
    id v18 = v156;
    if (_foundation_swift_url_feature_enabled())
    {
      v227._uint64_t countAndFlagsBits = (uint64_t)v18;
      v227._unint64_t object = v4;
      id v228 = v5;
      id v157 = v18;
      swift_retain();
      swift_retain();
      Swift::String v158 = URL.path(percentEncoded:)(1);
      Swift::String v227 = v158;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v158._countAndFlagsBits, (unint64_t)v158._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v225._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v159 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      uint64_t v160 = v225._countAndFlagsBits;
      uint64_t v161 = v227._countAndFlagsBits;
      uint64_t v162 = v227._object;
      unint64_t v163 = ((unint64_t)v227._object >> 56) & 0xF;
      if (((uint64_t)v227._object & 0x2000000000000000) == 0) {
        unint64_t v163 = v227._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v163)
      {
        Swift::String v225 = v227;
        MEMORY[0x1F4188790](v159);
        uint64_t v214 = (uint64_t)&v225;
        uint64_t v215 = v160;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v213, v161, (unint64_t)v162);
        if (v164 == 1)
        {
          unint64_t v166 = (unint64_t)v225._object;
          Swift::Int v165 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v165, v166, v160);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v178 = objc_msgSend(v18, sel__parameterString);
      if (v178)
      {
        uint64_t v179 = v178;
        id v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        Swift::Int v182 = v181;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v183 = objc_msgSend(v18, sel_path)) != 0)
        {
          id v184 = v183;
          id v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
          uint64_t v187 = v186;

          v227._uint64_t countAndFlagsBits = (uint64_t)v185;
          v227._unint64_t object = v187;
          swift_bridgeObjectRetain();
          v188._uint64_t countAndFlagsBits = 59;
          v188._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v188);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v189._uint64_t countAndFlagsBits = (uint64_t)v180;
          v189._unint64_t object = v182;
          String.append(_:)(v189);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v227._uint64_t countAndFlagsBits = 59;
          v227._unint64_t object = (void *)0xE100000000000000;
          v203._uint64_t countAndFlagsBits = (uint64_t)v180;
          v203._unint64_t object = v182;
          String.append(_:)(v203);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v204 = objc_msgSend(v18, sel_path);
        if (v204)
        {
          unint64_t v205 = v204;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v204);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    id v209 = self;
    uint64_t v210 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v88 = objc_msgSend(v209, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v210, v18, 0, 0, 0, 0);
LABEL_63:
    v88;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }
  uint64_t v150 = HIBYTE(v127) & 0xF;
  if ((v127 & 0x2000000000000000) == 0) {
    uint64_t v150 = v125 & 0xFFFFFFFFFFFFLL;
  }
  if (!v150)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v167 = v218;
    swift_retain_n();
    swift_retain_n();
    id v51 = v167;
    if (_foundation_swift_url_feature_enabled())
    {
      v227._uint64_t countAndFlagsBits = (uint64_t)v51;
      v227._unint64_t object = v7;
      id v228 = v8;
      id v168 = v51;
      swift_retain();
      swift_retain();
      Swift::String v169 = URL.path(percentEncoded:)(1);
      Swift::String v227 = v169;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v169._countAndFlagsBits, (unint64_t)v169._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v225._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v170 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      uint64_t v171 = v225._countAndFlagsBits;
      uint64_t v172 = v227._countAndFlagsBits;
      long long v173 = v227._object;
      unint64_t v174 = ((unint64_t)v227._object >> 56) & 0xF;
      if (((uint64_t)v227._object & 0x2000000000000000) == 0) {
        unint64_t v174 = v227._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v174)
      {
        id v224 = v168;
        Swift::String v225 = v227;
        id v222 = v8;
        MEMORY[0x1F4188790](v170);
        uint64_t v214 = (uint64_t)&v225;
        uint64_t v215 = v171;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v213, v172, (unint64_t)v173);
        if (v175 == 1)
        {
          unint64_t v176 = (unint64_t)v225._object;
          Swift::Int v177 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v177, v176, v171);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v168 = v224;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v190 = objc_msgSend(v51, sel__parameterString);
      if (v190)
      {
        id v191 = v190;
        id v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
        Swift::String v194 = v193;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v195 = objc_msgSend(v51, sel_path)) != 0)
        {
          id v196 = v195;
          id v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
          long long v199 = v198;

          v227._uint64_t countAndFlagsBits = (uint64_t)v197;
          v227._unint64_t object = v199;
          swift_bridgeObjectRetain();
          v200._uint64_t countAndFlagsBits = 59;
          v200._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v200);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v201._uint64_t countAndFlagsBits = (uint64_t)v192;
          v201._unint64_t object = v194;
          String.append(_:)(v201);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v227._uint64_t countAndFlagsBits = 59;
          v227._unint64_t object = (void *)0xE100000000000000;
          v206._uint64_t countAndFlagsBits = (uint64_t)v192;
          v206._unint64_t object = v194;
          String.append(_:)(v206);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v207 = objc_msgSend(v51, sel_path);
        if (v207)
        {
          Swift::String v208 = v207;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v207);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    id v211 = self;
    uint64_t v212 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v109 = objc_msgSend(v211, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v212, v51, 0, 0, 0, 0);
LABEL_88:
    v109;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }
  uint64_t v151 = MEMORY[0x185309640](v146);
  if (!v151)
  {
    LODWORD(v215) = 0;
    uint64_t v214 = 48;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181CA94E8);
  }
  uint64_t v152 = (void *)v151;
  uint64_t v153 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v154 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v227._uint64_t countAndFlagsBits = 0;
  unsigned __int8 v155 = objc_msgSend(v152, sel_linkItemAtPath_toPath_error_, v153, v154, &v227);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v155 & 1) == 0)
  {
    if (v227._countAndFlagsBits)
    {
      (id)v227._countAndFlagsBits;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v202 = (id)_nilObjCError;
    }
    return (id)swift_willThrow();
  }
  return (id)v227._countAndFlagsBits;
}

uint64_t Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
  if (v2 == 14)
  {
    char v3 = 1;
  }
  else if (Usage.rawValue.getter(v2) == 0x6469766F72507361 && v4 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    char v3 = 0;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v3 = v6 ^ 1;
  }
  return v3 & 1;
}

uint64_t Measurement<>.FormatStyle.skeletonForBaseUnit(_:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  id v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  swift_getObjectType();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v8 = v5;
  id v9 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  v17[0] = v8;
  v17[1] = v6;
  type metadata accessor for Measurement();
  Measurement<>.converted(to:)(v9, (double *)&v18);

  id v10 = v18;
  id v11 = NSDimension.skeleton.getter();
  char v13 = v12;

  if (v13)
  {
    LOBYTE(v18) = *v3;
    uint64_t v14 = *(int *)(a2 + 32);
    LOBYTE(v17[0]) = v3[*(int *)(a2 + 36)];
    uint64_t v15 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v11, v13, (unsigned __int8 *)&v18, (unsigned __int8 *)v17, (uint64_t)&v3[v14]);

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v15;
}

uint64_t static Measurement<>.FormatStyle.== infix(_:_:)(unsigned __int8 *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (long long *)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?));
  MEMORY[0x1F4188790](v6);
  id v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (long long *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v45 - v13;
  MEMORY[0x1F4188790](v15);
  id v18 = (char *)&v45 - v17;
  if (*a1 != *v16) {
    goto LABEL_13;
  }
  uint64_t v48 = v3;
  long long v19 = *(_OWORD *)(a1 + 8);
  long long v49 = *(_OWORD *)(v16 + 8);
  long long v50 = v19;
  Swift::String v20 = v16;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v50, (uint64_t)&v49) & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v21 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v22 = *(int *)(v21 + 32);
  id v46 = a1;
  uint64_t v23 = (uint64_t)&a1[v22];
  id v24 = (int *)v21;
  outlined init with copy of FloatingPointFormatStyle<Double>?(v23, (uint64_t)v18);
  uint64_t v25 = v24[8];
  Swift::String v47 = v20;
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)&v20[v25], (uint64_t)v14);
  uint64_t v26 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v18, (uint64_t)v8);
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v14, v26);
  id v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v27((uint64_t)v8, 1, v2) != 1)
  {
    outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v8, (uint64_t)v11);
    if (v27(v26, 1, v2) != 1)
    {
      outlined init with take of LocalePreferences?(v26, (uint64_t)v5, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      long long v37 = *v11;
      long long v49 = *v5;
      long long v50 = v37;
      if (specialized static Locale.== infix(_:_:)((uint64_t)&v50, (uint64_t)&v49))
      {
        specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)v11 + *(int *)(v2 + 36), (uint64_t)v5 + *(int *)(v2 + 36));
        char v39 = v38;
        outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        if ((v39 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_6;
      }
      outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v34 = (uint64_t)v8;
      Swift::String v33 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?;
LABEL_12:
      outlined destroy of Any?(v34, v33);
      goto LABEL_13;
    }
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
LABEL_11:
    Swift::String v33 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
    uint64_t v34 = (uint64_t)v8;
    goto LABEL_12;
  }
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if (v27(v26, 1, v2) != 1) {
    goto LABEL_11;
  }
  outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
LABEL_6:
  uint64_t v28 = v24[9];
  id v30 = v46;
  unint64_t v29 = v47;
  int v31 = v46[v28];
  int v32 = v47[v28];
  if (v31 == 14)
  {
    if (v32 == 14) {
      goto LABEL_24;
    }
  }
  else if (v32 != 14)
  {
    uint64_t v40 = Usage.rawValue.getter(v31);
    uint64_t v42 = v41;
    if (v40 == Usage.rawValue.getter(v32) && v42 == v43)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v29 = v47;
    }
    else
    {
      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v35 = 0;
      unint64_t v29 = v47;
      if ((v44 & 1) == 0) {
        return v35 & 1;
      }
    }
LABEL_24:
    char v35 = v30[v24[10]] ^ v29[v24[10]] ^ 1;
    return v35 & 1;
  }
LABEL_13:
  char v35 = 0;
  return v35 & 1;
}

unint64_t Measurement<>.FormatStyle.UnitWidth.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 3) {
    return 3;
  }
  return result;
}

uint64_t Measurement<>.FormatStyle.UnitWidth.Option.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB570];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = Measurement<>.FormatStyle.UnitWidth.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.Option@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.UnitWidth.Option.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.Option(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t Measurement<>.FormatStyle.UnitWidth.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.UnitWidth.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t Measurement<>.FormatStyle.UnitWidth.encode(to:)(void *a1, uint64_t a2)
{
  v9[1] = *(void *)(a2 + 16);
  type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v9 - v5;
  char v7 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = v7;
  type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option();
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

Swift::Int Measurement<>.FormatStyle.UnitWidth.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Measurement<>.FormatStyle.UnitWidth.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  char v11 = a2;
  type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v10 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v10;
    char v7 = v11;
    type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option();
    swift_getWitnessTable();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v4);
    *char v7 = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle.UnitWidth@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Measurement<>.FormatStyle.UnitWidth.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle.UnitWidth(void *a1, uint64_t a2)
{
  return Measurement<>.FormatStyle.UnitWidth.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.UnitWidth()
{
  return Hasher._finalize()();
}

void Measurement<>.FormatStyle.width.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Measurement<>.FormatStyle.width.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.width.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.numberFormatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of FloatingPointFormatStyle<Double>?(v2 + *(int *)(a1 + 32), a2);
}

uint64_t Measurement<>.FormatStyle.numberFormatStyle.setter(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of FloatingPointFormatStyle<Double>?(a1, v2 + *(int *)(a2 + 32));
}

uint64_t (*Measurement<>.FormatStyle.numberFormatStyle.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.usage.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 36));
  return result;
}

unsigned char *Measurement<>.FormatStyle.usage.setter(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.usage.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Measurement<>.FormatStyle.formatAsDescription(_:)(void **a1, uint64_t a2)
{
  char v3 = *a1;
  LOBYTE(v20) = *v2;
  uint64_t v4 = *(int *)(a2 + 32);
  unsigned __int8 v22 = v2[*(int *)(a2 + 36)];
  uint64_t v5 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(0, 0, (unsigned __int8 *)&v20, &v22, (uint64_t)&v2[v4]);
  uint64_t v7 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v5, v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (!v9)
  {
    uint64_t v7 = Double.description.getter();
    uint64_t v9 = v10;
  }
  uint64_t v20 = v7;
  uint64_t v21 = v9;
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 32;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  id v14 = objc_msgSend(v3, sel_symbol);
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  uint64_t v20 = v12;
  uint64_t v21 = v13;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = (uint64_t)v15;
  v18._unint64_t object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

void Measurement<>.FormatStyle.hash(into:)(uint64_t a1, int *a2)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  int *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  uint64_t v58;
  int v59;
  void v60[2];
  void *v61;
  void *v62;
  char *v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  unsigned char v70[144];
  char v71[8];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  char v88;
  void v89[18];
  unsigned char v90[144];
  unsigned char v91[152];

  char v3 = v2;
  int64_t v69 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  Swift::String v67 = *(void *)(v5 - 8);
  id v68 = v5;
  MEMORY[0x1F4188790](v5);
  Swift::String v66 = (uint64_t)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v2);
  uint64_t v10 = *((void *)v2 + 2);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if (v12(ObjectType, v10))
  {
    Swift::UInt8 v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    Swift::String v16 = v68;
    id v15 = v69;
    uint64_t v17 = v67;
    goto LABEL_57;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v14(v89, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v89, (uint64_t)v90, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v91, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v91) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v71[0] == 2)
  {
    Swift::String v18 = 0;
  }
  else
  {
    Swift::String v18 = v71[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v18);
  long long v19 = v72;
  if (!v72)
  {
    Hasher._combine(_:)(0);
    id v24 = v71;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v19 + 16));
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20)
  {
    outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v70, &demangling cache variable for type metadata for LocalePreferences?);
    id v24 = v70;
LABEL_20:
    outlined retain of LocalePreferences(v24);
    if (!v73) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v90, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v21 = v19 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v21 += 16;
    --v20;
  }
  while (v20);
  swift_bridgeObjectRelease();
  if (!v73)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v74) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v74)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unsigned __int8 v22 = v75;
    if (!v75) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v22);
    swift_bridgeObjectRelease();
    uint64_t v23 = v76;
    if (!v76) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unsigned __int8 v22 = v75;
  if (v75) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v23 = v76;
  if (!v76)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v23);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v25 = v78;
  id v27 = v79;
  uint64_t v26 = v80;
  uint64_t v28 = v81;
  id v63 = v9;
  char v64 = v77;
  id v61 = v81;
  id v62 = v79;
  if (v77)
  {
    unint64_t v29 = v79;
    id v30 = v80;
    int v31 = v77;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    v60[1] = v32;
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    Swift::String v33 = v25;
    uint64_t v34 = v29;
    char v35 = v30;
    uint64_t v36 = v30;
    long long v37 = v28;
    char v38 = v31;
    _CFObject.hash(into:)();
    unint64_t v65 = v25;
    if (v25)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      char v39 = v25;
      _CFObject.hash(into:)();

      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v40 = v28;
    uint64_t v41 = v25;
    uint64_t v42 = v27;
    char v35 = v26;
    uint64_t v43 = v26;
    unint64_t v65 = v25;
    if (v25) {
      goto LABEL_27;
    }
  }
  Hasher._combine(_:)(0);
LABEL_30:
  char v44 = v35;
  uint64_t v45 = v62;
  uint64_t v9 = v63;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v46 = v45;
    _CFObject.hash(into:)();

    if (v44) {
      goto LABEL_32;
    }
LABEL_35:
    Hasher._combine(_:)(0);
    uint64_t v48 = v61;
    if (v61) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  Hasher._combine(_:)(0);
  if (!v44) {
    goto LABEL_35;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  Swift::String v47 = v44;
  _CFObject.hash(into:)();

  uint64_t v48 = v61;
  if (v61)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v49 = v48;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  long long v49 = 0;
LABEL_37:
  long long v50 = v65;

  id v51 = v82;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v51);
    swift_bridgeObjectRelease();
    id v52 = v83;
    if (v83) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v84) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_44;
  }
  Hasher._combine(_:)(0);
  id v52 = v83;
  if (!v83) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v52);
  swift_bridgeObjectRelease();
  if (!v84) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_44:
  Swift::String v16 = v68;
  id v15 = v69;
  uint64_t v17 = v67;
  if (v85 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::String v53 = v85 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v86 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v54 = v86 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v87 == 2)
  {
    unint64_t v55 = 0;
  }
  else
  {
    unint64_t v55 = v87 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v88 == 2)
  {
    id v56 = 0;
  }
  else
  {
    id v57 = v88 & 1;
    Hasher._combine(_:)(1u);
    id v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v90, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v90, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_57:
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)&v3[v15[8]], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    id v58 = v66;
    outlined init with take of LocalePreferences?((uint64_t)v9, v66, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    outlined destroy of Any?(v58, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  uint64_t v59 = v3[v15[9]];
  if (v59 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v59);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v3[v15[10]]);
}

uint64_t Measurement<>.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874646977 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823AD810 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6567617375 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x635373656469685FLL && a2 == 0xEF656D614E656C61)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t Measurement<>.FormatStyle.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6874646977;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x6567617375;
      break;
    case 4:
      unint64_t result = 0x635373656469685FLL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.FormatStyle.CodingKeys(uint64_t a1)
{
  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  Hasher.init(_seed:)();
  FloatingPointParseStrategy.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  return Measurement<>.FormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Measurement<A><>.FormatStyle.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Measurement<>.FormatStyle.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t Measurement<>.FormatStyle.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v12 = a2;
  type metadata accessor for Measurement<>.FormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)&v11 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v7 = v13;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = *(unsigned char *)v7;
  char v16 = 0;
  type metadata accessor for Measurement<>.FormatStyle.UnitWidth();
  swift_getWitnessTable();
  uint64_t v8 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v8)
  {
    uint64_t v9 = v12;
    long long v15 = *(_OWORD *)(v7 + 8);
    char v16 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>(&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = *(unsigned char *)(v7 + *(int *)(v9 + 36));
    char v16 = 3;
    type metadata accessor for MeasurementFormatUnitUsage();
    swift_getWitnessTable();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Measurement<>.FormatStyle.hashValue.getter(int *a1)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  int *v13;
  uint64_t v14;
  Swift::UInt8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  uint64_t v51;
  int v52;
  uint64_t v54;
  void *v55;
  char *v56;
  id v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  unsigned char v64[144];
  char v65[8];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  char v82;
  void v83[18];
  unsigned char v84[144];
  unsigned char v85[144];
  unsigned char v86[80];

  BOOL v2 = v1;
  id v63 = a1;
  id v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v3 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  id v61 = (uint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v1);
  uint64_t v8 = *((void *)v1 + 2);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  if (v10(ObjectType, v8))
  {
    Swift::UInt8 v11 = 1;
LABEL_5:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease();
    uint64_t v14 = v62;
    uint64_t v13 = v63;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v12(v83, ObjectType, v8);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v83, (uint64_t)v84, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v84, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v85) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v84, (uint64_t)v65, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v65[0] == 2)
  {
    long long v15 = 0;
  }
  else
  {
    long long v15 = v65[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v15);
  char v16 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    uint64_t v21 = v65;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v16 + 16));
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    outlined init with take of LocalePreferences?((uint64_t)v84, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v21 = v64;
LABEL_20:
    outlined retain of LocalePreferences(v21);
    if (!v67) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v84, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  Swift::String v18 = v16 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v18 += 16;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  if (!v67)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v68) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v68)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    long long v19 = v69;
    if (!v69) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v86, v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = v70;
    if (!v70) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v19 = v69;
  if (v69) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v20 = v70;
  if (!v70)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v86, v20);
  swift_bridgeObjectRelease();
LABEL_25:
  unsigned __int8 v22 = v72;
  uint64_t v23 = v73;
  id v60 = v74;
  id v24 = v75;
  id v56 = v7;
  id v57 = v71;
  unint64_t v55 = v75;
  if (v71)
  {
    uint64_t v25 = v71;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v26 = v22;
    id v27 = v23;
    uint64_t v28 = v60;
    unint64_t v29 = v24;
    id v30 = v25;
    _CFObject.hash(into:)();
    id v58 = v3;
    if (v22)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      int v31 = v22;
      int v32 = v23;
      Swift::String v33 = v22;
      _CFObject.hash(into:)();

      uint64_t v23 = v32;
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v34 = v24;
    char v35 = v22;
    uint64_t v36 = v23;
    long long v37 = v60;
    id v58 = v3;
    if (v22) {
      goto LABEL_27;
    }
  }
  int v31 = v22;
  Hasher._combine(_:)(0);
LABEL_30:
  uint64_t v7 = v56;
  uint64_t v59 = v23;
  if (v23)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    char v38 = v23;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  char v39 = v31;
  uint64_t v3 = v58;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v40 = v60;
    _CFObject.hash(into:)();

    uint64_t v41 = v55;
    if (v55)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v42 = v41;
      _CFObject.hash(into:)();

      goto LABEL_38;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v41 = v55;
    if (v55) {
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v42 = 0;
LABEL_38:
  uint64_t v43 = v59;

  char v44 = v76;
  if (v44)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v86, v44);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v14 = v62;
  uint64_t v45 = v77;
  if (!v77)
  {
    Hasher._combine(_:)(0);
    if (v78) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v86, v45);
  swift_bridgeObjectRelease();
  if (!v78) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  uint64_t v13 = v63;
  if (v79 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    id v46 = v79 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }
  if (v80 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::String v47 = v80 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }
  if (v81 == 2)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = v81 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v48);
  if (v82 == 2)
  {
    long long v49 = 0;
  }
  else
  {
    long long v50 = v82 & 1;
    Hasher._combine(_:)(1u);
    long long v49 = v50;
  }
  Hasher._combine(_:)(v49);
  outlined retain of LocalePreferences?((uint64_t)v84, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v84, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)&v2[v13[8]], (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v14) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    id v51 = v61;
    outlined init with take of LocalePreferences?((uint64_t)v7, v61, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)((uint64_t)v86);
    outlined destroy of Any?(v51, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  id v52 = v2[v13[9]];
  if (v52 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v52);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v2[v13[10]]);
  return Hasher._finalize()();
}

uint64_t Measurement<>.FormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v34 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Measurement<>.FormatStyle.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v36 = a2;
  uint64_t v9 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v30 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  Swift::UInt8 v11 = (char *)&v27 - v10;
  uint64_t v13 = (char *)&v27 + *(int *)(v12 + 32) - v10;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  long long v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  char v38 = v13;
  v15(v13, 1, 1, v14);
  uint64_t v32 = *(int *)(v9 + 36);
  v11[v32] = 14;
  uint64_t v16 = *(int *)(v9 + 40);
  v11[v16] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  long long v37 = v8;
  uint64_t v17 = (uint64_t)v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of Any?((uint64_t)v38, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }
  else
  {
    uint64_t WitnessTable = v14;
    uint64_t v40 = a1;
    uint64_t v28 = v9;
    uint64_t v29 = v16;
    uint64_t v18 = v33;
    uint64_t v19 = (uint64_t)v34;
    type metadata accessor for Measurement<>.FormatStyle.UnitWidth();
    char v42 = 0;
    swift_getWitnessTable();
    uint64_t v20 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *Swift::UInt8 v11 = v41;
    char v42 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v11 + 8) = v41;
    LOBYTE(v41) = 2;
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>(&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointFormatStyle<Double>?(v19, (uint64_t)v38);
    type metadata accessor for MeasurementFormatUnitUsage();
    char v42 = 3;
    swift_getWitnessTable();
    uint64_t v21 = v37;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v11[v32] = v41;
    LOBYTE(v41) = 4;
    char v22 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v20);
    char v23 = v22 & 1;
    uint64_t v24 = v30;
    v11[v29] = v23;
    uint64_t v25 = v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v31, v11, v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v11, v25);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Measurement<>.FormatStyle.init(from:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle(void *a1, uint64_t a2)
{
  return Measurement<>.FormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle(uint64_t a1, int *a2)
{
  Hasher.init(_seed:)();
  Measurement<>.FormatStyle.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle(unsigned __int8 *a1)
{
  return static Measurement<>.FormatStyle.== infix(_:_:)(a1);
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle)
                                     + 40));
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.setter(char a1)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.hidesScaleName.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle)
              + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3);
  return Measurement<>.FormatStyle<>.hidesScaleName.modify;
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(int *)(result + 8)) = *(unsigned char *)(result + 12);
  return result;
}

uint64_t Measurement<>.FormatStyle<>.init(width:locale:usage:hidesScaleName:numberFormatStyle:)@<X0>(char *a1@<X0>, _OWORD *a2@<X1>, char *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10 = *a1;
  char v11 = *a3;
  uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  uint64_t v13 = a6 + v12[8];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v12[9];
  uint64_t v16 = v12[10];
  *(unsigned char *)(a6 + v16) = 0;
  *(unsigned char *)a6 = v10;
  *(_OWORD *)(a6 + 8) = *a2;
  *(unsigned char *)(a6 + v15) = v11;
  uint64_t result = outlined assign with take of FloatingPointFormatStyle<Double>?(a5, v13);
  *(unsigned char *)(a6 + v16) = a4;
  return result;
}

void Measurement<>.FormatStyle<>.ByteCount.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Measurement<>.FormatStyle<>.ByteCount.style.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Measurement<>.FormatStyle<>.ByteCount.allowedUnits.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *Measurement<>.FormatStyle<>.ByteCount.allowedUnits.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.allowedUnits.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle<>.ByteCount.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 17);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle<>.ByteCount.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  *(unsigned char *)a6 = *a1;
  *(void *)(a6 + 8) = v6;
  *(unsigned char *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 17) = a4;
  __n128 result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.format(_:)(double *a1)
{
  double v2 = *a1;
  double v3 = a1[1];
  char v4 = *v1;
  uint64_t v5 = (_WORD *)*((void *)v1 + 1);
  char v6 = v1[16];
  char v7 = v1[17];
  uint64_t v8 = self;
  long long v33 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  id v9 = objc_msgSend(v8, sel_bytes);
  specialized Measurement<>.converted(to:)(&v34, v9, *(void *)&v2, v3);

  char v10 = v34;
  char v11 = v35;
  LOBYTE(v34) = v4;
  uint64_t v35 = v5;
  LOBYTE(v36) = v6;
  BYTE1(v36) = v7;
  long long v37 = v33;
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)(v11, 0, 0x100000000, (uint64_t *)&v43, *(double *)&v11);
  swift_unknownObjectRelease_n();

  uint64_t v12 = v43;
  long long v13 = v43[1];
  long long v14 = v43[3];
  v45[1] = v43[2];
  v45[2] = v14;
  v45[0] = v13;
  swift_retain();
  outlined retain of Locale((uint64_t)v45);
  uint64_t v15 = BigString.startIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v45);
  long long v22 = v12[1];
  long long v23 = v12[3];
  v44[1] = v12[2];
  void v44[2] = v23;
  v44[0] = v22;
  long long v24 = v12[1];
  v46[1] = v12[2];
  v46[2] = v23;
  v46[0] = v24;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v46, (uint64_t)v47);
  outlined retain of Locale((uint64_t)v47);
  uint64_t v25 = BigString.endIndex.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  outlined release of Locale((uint64_t)v44);
  swift_release();
  uint64_t v34 = v12;
  uint64_t v35 = (_WORD *)v15;
  uint64_t v36 = v17;
  *(void *)&long long v37 = v19;
  *((void *)&v37 + 1) = v21;
  uint64_t v38 = v25;
  uint64_t v39 = v27;
  uint64_t v40 = v29;
  uint64_t v41 = v31;
  uint64_t v42 = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  return String.init<A>(_:)();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 17);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  unsigned char v43[144];
  unsigned char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[152];
  uint64_t vars8;

  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    char v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
    swift_unknownObjectRetain();
    v10(v62, ObjectType, v6);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
    {
      Hasher._combine(_:)(0);
      return swift_unknownObjectRelease();
    }
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      char v11 = 0;
    }
    else
    {
      char v11 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v11);
    uint64_t v12 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v12 + 16));
      long long v13 = *(void *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        long long v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          if (!v47) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v15 = v48;
          if (!v48) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v15 = v48;
        if (!v48)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          uint64_t v16 = v49;
          if (!v49)
          {
LABEL_18:
            Hasher._combine(_:)(0);
            goto LABEL_26;
          }
LABEL_25:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_26:
          uint64_t v19 = v50;
          uint64_t v18 = v51;
          uint64_t v21 = v52;
          uint64_t v20 = v53;
          long long v22 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            long long v23 = v18;
            long long v24 = v21;
            uint64_t v25 = v20;
            uint64_t v26 = v22;
            uint64_t v27 = v19;
            _CFObject.hash(into:)();
            if (v18) {
              goto LABEL_28;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v32 = v22;
            long long v33 = v18;
            uint64_t v34 = v21;
            uint64_t v35 = v20;
            if (v18)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v28 = v18;
              _CFObject.hash(into:)();

              if (v21) {
                goto LABEL_29;
              }
              goto LABEL_34;
            }
          }
          Hasher._combine(_:)(0);
          if (v21)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v29 = v21;
            _CFObject.hash(into:)();

            if (v20) {
              goto LABEL_30;
            }
            goto LABEL_35;
          }
LABEL_34:
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v30 = v20;
            _CFObject.hash(into:)();

            if (v22)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v31 = v22;
              _CFObject.hash(into:)();

              goto LABEL_37;
            }
LABEL_36:
            Hasher._combine(_:)(0);
            uint64_t v31 = 0;
LABEL_37:

            uint64_t v36 = v55;
            if (v36)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v36);
              swift_bridgeObjectRelease();
              long long v37 = v56;
              if (v56) {
                goto LABEL_39;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              long long v37 = v56;
              if (v56)
              {
LABEL_39:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v37);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_40:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_44:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v39);
                  }
                  if (v60 == 2)
                  {
                    uint64_t v40 = 0;
                  }
                  else
                  {
                    uint64_t v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v40);
                  if (v61 == 2)
                  {
                    uint64_t v41 = 0;
                  }
                  else
                  {
                    uint64_t v42 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v41 = v42;
                  }
                  Hasher._combine(_:)(v41);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_43:
                Hasher._combine(_:)(0);
                goto LABEL_44;
              }
            }
            Hasher._combine(_:)(0);
            if (v57) {
              goto LABEL_40;
            }
            goto LABEL_43;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v22) {
            goto LABEL_31;
          }
          goto LABEL_36;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        uint64_t v16 = v49;
        if (!v49) {
          goto LABEL_18;
        }
        goto LABEL_25;
      }
      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v17 = v43;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v17 = v44;
    }
    outlined retain of LocalePreferences(v17);
    if (!v46) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);

  return swift_unknownObjectRelease();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  unint64_t result = 0x656C797473;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x556465776F6C6C61;
      break;
    case 2:
      unint64_t result = 0x754F736C6C657073;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x656C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Measurement<>.FormatStyle<>.ByteCount.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys>);
  uint64_t v13 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::UInt8 v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *v1;
  uint64_t v12 = *((void *)v1 + 1);
  int v16 = v1[16];
  int v11 = v1[17];
  long long v10 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v6;
  char v17 = 0;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  uint64_t v7 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v7) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v5, v3);
  }
  uint64_t v9 = v13;
  *(void *)&long long v15 = v12;
  char v17 = 1;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v15) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v15) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  long long v15 = v10;
  char v17 = 4;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v5, v3);
}

Swift::Int Measurement<>.FormatStyle<>.ByteCount.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  unsigned char v43[144];
  unsigned char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[144];
  unsigned char v65[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    long long v10 = 0;
  }
  else
  {
    long long v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  int v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    int v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
    int v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    long long v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  long long v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v18 = v50;
  char v17 = v51;
  uint64_t v20 = v52;
  uint64_t v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v22 = v17;
    long long v23 = v20;
    long long v24 = v19;
    uint64_t v25 = v21;
    uint64_t v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = v21;
    uint64_t v32 = v17;
    long long v33 = v20;
    uint64_t v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v30 = 0;
LABEL_36:

  uint64_t v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys>);
  uint64_t v15 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v7 = v15;
    uint64_t v6 = v16;
    char v20 = 0;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v8 = v18;
    char v20 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v18;
    LOBYTE(v18) = 2;
    int v19 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v9;
    LOBYTE(v18) = 3;
    LOBYTE(v9) = KeyedDecodingContainer.decode(_:forKey:)();
    char v20 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v11 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v11);
    char v12 = v19 & 1;
    long long v13 = v18;
    *(unsigned char *)uint64_t v6 = v8;
    *(void *)(v6 + 8) = v14;
    *(unsigned char *)(v6 + 16) = v12;
    *(unsigned char *)(v6 + 17) = v9 & 1;
    *(_OWORD *)(v6 + 24) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.FormatStyle<>.ByteCount@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle<>.ByteCount.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle<>.ByteCount@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Measurement<>.FormatStyle<>.ByteCount.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle<>.ByteCount(void *a1)
{
  return Measurement<>.FormatStyle<>.ByteCount.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle<>.ByteCount()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  unsigned char v61[144];
  unsigned char v62[144];
  unsigned char v63[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    long long v10 = 0;
  }
  else
  {
    long long v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  uint64_t v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  char v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  uint64_t v17 = v48;
  uint64_t v16 = v49;
  int v19 = v50;
  long long v18 = v51;
  char v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v21 = v16;
    long long v22 = v19;
    long long v23 = v18;
    long long v24 = v20;
    uint64_t v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    uint64_t v31 = v16;
    uint64_t v32 = v19;
    long long v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  uint64_t v29 = 0;
LABEL_35:

  uint64_t v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    uint64_t v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  uint64_t v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v3 = 0;
  BOOL v4 = *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v4 && ((a1[16] ^ a2[16]) & 1) == 0 && ((a1[17] ^ a2[17]) & 1) == 0)
  {
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v7 = *(_OWORD *)(a2 + 24);
    long long v8 = v5;
    char v3 = specialized static Locale.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  }
  return v3 & 1;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.FormatStyle<>.ByteCount(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount);
  a1[2] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount);
  uint64_t result = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount);
  a1[3] = result;
  return result;
}

void type metadata accessor for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for Measurement<>.FormatStyle<>.ByteCount()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle<>.ByteCount()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount);
}

uint64_t sub_181CAF660@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 40));
  return result;
}

uint64_t sub_181CAF69C(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *(unsigned char *)(a2 + *(int *)(result + 40)) = v3;
  return result;
}

uint64_t sub_181CAF6D4()
{
  return 0;
}

void *initializeBufferWithCopyOfBuffer for Measurement<>.FormatStyle(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v7 = a3[8];
    long long v8 = (_OWORD *)(a1 + v7);
    uint64_t v9 = (_OWORD *)((char *)a2 + v7);
    swift_unknownObjectRetain();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v32 = v11;
      *long long v8 = *v9;
      uint64_t v14 = *(int *)(v10 + 36);
      uint64_t v15 = (char *)v8 + v14;
      uint64_t v16 = (char *)v9 + v14;
      v15[8] = v16[8];
      *(void *)uint64_t v15 = *(void *)v16;
      *(_OWORD *)(v15 + 57) = *(_OWORD *)(v16 + 57);
      long long v17 = *((_OWORD *)v16 + 3);
      long long v18 = *((_OWORD *)v16 + 1);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v17;
      *((_OWORD *)v15 + 1) = v18;
      v15[73] = v16[73];
      v15[76] = v16[76];
      *((_WORD *)v15 + 37) = *((_WORD *)v16 + 37);
      v15[77] = v16[77];
      uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v19 = v31[9];
      __dst = &v15[v19];
      char v20 = &v16[v19];
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_unknownObjectRetain();
      if (v30(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      uint64_t v24 = v31[10];
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      v15[v31[11]] = v16[v31[11]];
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v8, 0, 1, v10);
    }
    uint64_t v27 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v27) = *((unsigned char *)a2 + v27);
  }
  return v4;
}

uint64_t assignWithCopy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[8];
  long long v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    id v60 = a3;
    uint64_t v28 = v9[1];
    *long long v8 = *v9;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v8[1] = v28;
    uint64_t v29 = *(int *)(v10 + 36);
    uint64_t v30 = (char *)v8 + v29;
    uint64_t v31 = (char *)v9 + v29;
    LOBYTE(v29) = *((unsigned char *)v9 + v29 + 8);
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v29;
    long long v32 = *((_OWORD *)v31 + 1);
    long long v33 = *((_OWORD *)v31 + 2);
    long long v34 = *((_OWORD *)v31 + 3);
    *(_OWORD *)(v30 + 57) = *(_OWORD *)(v31 + 57);
    *((_OWORD *)v30 + 2) = v33;
    *((_OWORD *)v30 + 3) = v34;
    *((_OWORD *)v30 + 1) = v32;
    v30[73] = v31[73];
    LOWORD(v29) = *((_WORD *)v31 + 37);
    v30[76] = v31[76];
    *((_WORD *)v30 + 37) = v29;
    v30[77] = v31[77];
    id v58 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v35 = v58[9];
    uint64_t v36 = &v30[v35];
    long long v37 = &v31[v35];
    uint64_t v38 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
    __src = v36;
    LODWORD(v36) = v40(v36, 1, v38);
    int v41 = v40(v37, 1, v38);
    if (v36)
    {
      if (!v41)
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(__src, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(__src, 0, 1, v38);
        goto LABEL_18;
      }
      size_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      uint64_t v43 = __src;
    }
    else
    {
      if (!v41)
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 24))(__src, v37, v38);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v39 + 8))(__src, v38);
      size_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      uint64_t v43 = __src;
    }
    memcpy(v43, v37, v42);
LABEL_18:
    uint64_t v48 = v58[10];
    long long v49 = &v30[v48];
    long long v50 = &v31[v48];
    uint64_t v51 = *(void *)v50;
    v49[8] = v50[8];
    *(void *)long long v49 = v51;
    v30[v58[11]] = v31[v58[11]];
    a3 = v60;
    goto LABEL_19;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v59 = a3;
  *(_OWORD *)long long v8 = *(_OWORD *)v9;
  uint64_t v15 = *(int *)(v10 + 36);
  uint64_t v16 = (char *)v8 + v15;
  long long v17 = (char *)v9 + v15;
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  long long v19 = *((_OWORD *)v17 + 1);
  long long v20 = *((_OWORD *)v17 + 2);
  long long v21 = *((_OWORD *)v17 + 3);
  *(_OWORD *)(v16 + 57) = *(_OWORD *)(v17 + 57);
  *((_OWORD *)v16 + 2) = v20;
  *((_OWORD *)v16 + 3) = v21;
  *((_OWORD *)v16 + 1) = v19;
  v16[73] = v17[73];
  LOWORD(v18) = *((_WORD *)v17 + 37);
  v16[76] = v17[76];
  *((_WORD *)v16 + 37) = v18;
  v16[77] = v17[77];
  uint64_t v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v23 = *(int *)(v22 + 36);
  __dst = &v16[v23];
  uint64_t v57 = v22;
  uint64_t v24 = &v17[v23];
  uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v53 = *(void *)(v25 - 8);
  uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  swift_unknownObjectRetain();
  if (v54(v24, 1, v25))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dst, v24, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v25);
  }
  a3 = v59;
  uint64_t v44 = *(int *)(v57 + 40);
  uint64_t v45 = &v16[v44];
  id v46 = &v17[v44];
  uint64_t v47 = *(void *)v46;
  v45[8] = v46[8];
  *(void *)uint64_t v45 = v47;
  v16[*(int *)(v57 + 44)] = v17[*(int *)(v57 + 44)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_19:
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[8];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  long long v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    *uint64_t v7 = *v8;
    uint64_t v12 = *(int *)(v9 + 36);
    uint64_t v28 = v7;
    int v13 = (char *)v7 + v12;
    int v14 = (char *)v8 + v12;
    v13[8] = v14[8];
    *(void *)int v13 = *(void *)v14;
    *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
    long long v15 = *((_OWORD *)v14 + 3);
    long long v16 = *((_OWORD *)v14 + 1);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v15;
    *((_OWORD *)v13 + 1) = v16;
    v13[73] = v14[73];
    LOWORD(v12) = *((_WORD *)v14 + 37);
    v13[76] = v14[76];
    *((_WORD *)v13 + 37) = v12;
    v13[77] = v14[77];
    uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v17 = v27[9];
    __dst = &v13[v17];
    uint64_t v18 = &v14[v17];
    uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v22 = v27[10];
    uint64_t v23 = &v13[v22];
    uint64_t v24 = &v14[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    v13[v27[11]] = v14[v27[11]];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v28, 0, 1, v9);
  }
  uint64_t v25 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  return a1;
}

uint64_t assignWithTake for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[8];
  long long v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    uint64_t v54 = a3;
    uint64_t v27 = v9[1];
    *long long v8 = *v9;
    swift_unknownObjectRelease();
    v8[1] = v27;
    uint64_t v28 = *(int *)(v10 + 36);
    uint64_t v29 = (char *)v8 + v28;
    uint64_t v30 = (char *)v9 + v28;
    *(void *)uint64_t v29 = *(void *)((char *)v9 + v28);
    v29[8] = *((unsigned char *)v9 + v28 + 8);
    long long v31 = *(_OWORD *)((char *)v9 + v28 + 32);
    *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v9 + v28 + 16);
    *((_OWORD *)v29 + 2) = v31;
    *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v9 + v28 + 48);
    *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v9 + v28 + 57);
    v29[73] = *((unsigned char *)v9 + v28 + 73);
    v29[76] = *((unsigned char *)v9 + v28 + 76);
    *((_WORD *)v29 + 37) = *(_WORD *)((char *)v9 + v28 + 74);
    v29[77] = *((unsigned char *)v9 + v28 + 77);
    __dsta = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v32 = __dsta[9];
    long long v33 = &v29[v32];
    long long v34 = &v30[v32];
    uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v36 = *(void *)(v35 - 8);
    long long v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
    long long v49 = v33;
    LODWORD(v33) = v37(v33, 1, v35);
    int v38 = v37(v34, 1, v35);
    if (v33)
    {
      if (!v38)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v49, v34, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v49, 0, 1, v35);
        goto LABEL_18;
      }
      size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      uint64_t v40 = v49;
    }
    else
    {
      if (!v38)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v49, v34, v35);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v49, v35);
      size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      uint64_t v40 = v49;
    }
    memcpy(v40, v34, v39);
LABEL_18:
    uint64_t v44 = __dsta[10];
    uint64_t v45 = &v29[v44];
    id v46 = &v30[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    v29[__dsta[11]] = v30[__dsta[11]];
    a3 = v54;
    goto LABEL_19;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v53 = a3;
  *(_OWORD *)long long v8 = *(_OWORD *)v9;
  uint64_t v15 = *(int *)(v10 + 36);
  long long v16 = (char *)v8 + v15;
  uint64_t v17 = (char *)v9 + v15;
  v16[8] = v17[8];
  *(void *)long long v16 = *(void *)v17;
  *(_OWORD *)(v16 + 57) = *(_OWORD *)(v17 + 57);
  long long v18 = *((_OWORD *)v17 + 3);
  long long v19 = *((_OWORD *)v17 + 1);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  *((_OWORD *)v16 + 1) = v19;
  v16[73] = v17[73];
  LOWORD(v15) = *((_WORD *)v17 + 37);
  v16[76] = v17[76];
  *((_WORD *)v16 + 37) = v15;
  v16[77] = v17[77];
  uint64_t v20 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v21 = *(int *)(v20 + 36);
  __src = (int *)v20;
  __dst = &v16[v21];
  uint64_t v22 = &v17[v21];
  uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(__dst, v22, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
  }
  a3 = v53;
  uint64_t v41 = __src[10];
  size_t v42 = &v16[v41];
  uint64_t v43 = &v17[v41];
  *(void *)size_t v42 = *(void *)v43;
  v42[8] = v43[8];
  v16[__src[11]] = v17[__src[11]];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_19:
  uint64_t v47 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v47) = *(unsigned char *)(a2 + v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181CB06E4);
}

uint64_t sub_181CB06E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181CB07AC);
}

uint64_t sub_181CB07AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Measurement<>.FormatStyle<>.ByteCount.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CB0928);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Measurement<>.FormatStyle.UnitWidth.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181CB0A14);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys((unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized Measurement<>.FormatStyle.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t specialized Measurement<>.FormatStyle<>.ByteCount.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x556465776F6C6C61 && a2 == 0xEC0000007374696ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754F736C6C657073 && a2 == 0xED00006F72655A74 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001823AD830 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t one-time initialization function for logHandle()
{
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  logHandle = result;
  return result;
}

void NSURLSessionWebSocketTask.send(_:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F18E18]), sel_initWithString_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    uint64_t v21 = a2;
    uint64_t v22 = a3;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    long long v19 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
    uint64_t v20 = &block_descriptor_10;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_sendMessage_completionHandler_, v9, v10);
    _Block_release(v10);
  }
  else
  {
    switch(v8 >> 62)
    {
      case 1uLL:
        if (v7 >> 32 < (int)v7) {
          __break(1u);
        }
        outlined copy of Data._Representation(*(void *)a1, v8);
        uint64_t v11 = __DataStorage.bridgedReference(_:)((int)v7, v7 >> 32);
        goto LABEL_9;
      case 2uLL:
        uint64_t v12 = *(void *)(v7 + 16);
        uint64_t v13 = *(void *)(v7 + 24);
        outlined copy of NSURLSessionWebSocketTask.Message(*(void *)a1, v8, 0);
        swift_retain();
        swift_retain();
        int v14 = __DataStorage.bridgedReference(_:)(v12, v13);
        swift_release();
        swift_release();
        goto LABEL_10;
      case 3uLL:
        uint64_t v11 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
        goto LABEL_9;
      default:
        uint64_t aBlock = *(void *)a1;
        LOWORD(v18) = v8;
        BYTE2(v18) = BYTE2(v8);
        BYTE3(v18) = BYTE3(v8);
        BYTE4(v18) = BYTE4(v8);
        BYTE5(v18) = BYTE5(v8);
        uint64_t v11 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &aBlock, BYTE6(v8));
LABEL_9:
        int v14 = v11;
LABEL_10:
        id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F18E18]), sel_initWithData_, v14);

        uint64_t v21 = a2;
        uint64_t v22 = a3;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v18 = 1107296256;
        long long v19 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
        uint64_t v20 = &block_descriptor_3;
        long long v16 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v4, sel_sendMessage_completionHandler_, v15, v16);
        _Block_release(v16);

        outlined consume of NSURLSessionWebSocketTask.Message(v7, v8, 0);
        break;
    }
  }
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void NSURLSessionWebSocketTask.receive(completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v7[4] = partial apply for closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:);
  v7[5] = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  void v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSURLSessionWebSocketMessage?, @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_10;
  char v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_receiveMessageWithCompletionHandler_, v6);
  _Block_release(v6);
}

void closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)(void *a1, id a2, void (*a3)(id *))
{
  if (!a1)
  {
    if (a2)
    {
      id v18 = a2;
      unint64_t v19 = 0;
      __int16 v20 = 256;
      id v12 = a2;
      a3(&v18);

      return;
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    id v5 = a1;
    id v6 = objc_msgSend(v5, sel_type);
    if (v6 == (id)1)
    {
      id v7 = objc_msgSend(v5, sel_string);
      if (v7)
      {
        unint64_t v8 = v7;
        id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        unint64_t v11 = v10;

        id v18 = v9;
        unint64_t v19 = v11;
        __int16 v20 = 1;
        a3(&v18);
        swift_bridgeObjectRelease();

        return;
      }
      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if (!v6)
    {
      id v13 = objc_msgSend(v5, sel_data);
      if (v13)
      {
        id v14 = v13;
        id v15 = specialized Data.init(referencing:)(v14);
        unint64_t v17 = v16;

        id v18 = v15;
        unint64_t v19 = v17;
        __int16 v20 = 0;
        a3(&v18);

        outlined consume of Data._Representation((uint64_t)v15, v17);
        return;
      }
      goto LABEL_12;
    }
  }
LABEL_13:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSURLSessionWebSocketMessage?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id NSURLSessionTaskTransactionMetrics.localPort.getter()
{
  return NSURLSessionTaskTransactionMetrics.localPort.getter((SEL *)&selRef_localPort);
}

id NSURLSessionTaskTransactionMetrics.remotePort.getter()
{
  return NSURLSessionTaskTransactionMetrics.localPort.getter((SEL *)&selRef_remotePort);
}

id NSURLSessionTaskTransactionMetrics.localPort.getter(SEL *a1)
{
  id result = [v1 *a1];
  if (result)
  {
    int v3 = result;
    id v4 = objc_msgSend(result, sel_integerValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if (v6) {
      return v4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter()
{
  return NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter((SEL *)&selRef_negotiatedTLSProtocolVersion);
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSCipherSuite.getter()
{
  return NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter((SEL *)&selRef_negotiatedTLSCipherSuite);
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter(SEL *a1)
{
  id v2 = [v1 *a1];
  if (v2)
  {
    int v3 = v2;
    id v4 = objc_msgSend(v2, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if (v6) {
      LODWORD(v2) = v4;
    }
    else {
      LODWORD(v2) = 0;
    }
    char v7 = v6 ^ 1;
  }
  else
  {
    char v7 = 1;
  }
  return v2 & 0xFFFEFFFF | ((v7 & 1) << 16);
}

uint64_t closure #1 in URLSessionAsyncBytesDelegate.data()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state;
  outlined destroy of URLSessionAsyncBytesDelegate.State(a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  swift_storeEnumTagMultiPayload();
  unint64_t v8 = *(os_unfair_lock_s **)(a2
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  uint64_t v9 = swift_release();
  return a3(v9);
}

uint64_t closure #1 in NSURLSession.CancelState.cancel()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *(unsigned char *)id result = 1;
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *a2 = v2;
  return result;
}

uint64_t closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.data(for:delegate:), 0, 0);
}

uint64_t closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.data(from:delegate:), 0, 0);
}

uint64_t NSURLSession.upload(for:fromFile:delegate:)(void *a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(v4 + 104) = a3;
  *(void *)(v4 + 112) = v3;
  uint64_t v5 = *a2;
  *(void *)(v4 + 120) = *a1;
  *(void *)(v4 + 128) = v5;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 1);
  return MEMORY[0x1F4188298](NSURLSession.upload(for:fromFile:delegate:), 0, 0);
}

uint64_t NSURLSession.upload(for:fromFile:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 144);
  long long v9 = *(_OWORD *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  long long v8 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 152) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v4 = swift_initStackObject();
  *(void *)(v0 + 160) = v4;
  *(_DWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(inited + 16) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(void *)(v5 + 48) = v1;
  *(void *)(v5 + 56) = v2;
  *(void *)(v5 + 64) = inited;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v6 = v0;
  v6[1] = NSURLSession.upload(for:fromFile:delegate:);
  return MEMORY[0x1F4188148](v0 + 80, &async function pointer to partial apply for closure #1 in NSURLSession.upload(for:fromFile:delegate:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.upload(for:fromFile:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.upload(for:fromFile:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  swift_release();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v4(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  int v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.upload(for:fromFile:delegate:), 0, 0);
}

uint64_t closure #1 in NSURLSession.upload(for:fromFile:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 72);
  long long v7 = *(_OWORD *)(v0 + 40);
  long long v8 = *(_OWORD *)(v0 + 56);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v7;
  *(_OWORD *)(v2 + 48) = v8;
  *(void *)(v2 + 64) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  void *v3 = v0;
  v3[1] = closure #1 in NSURLSession.upload(for:fromFile:delegate:);
  uint64_t v5 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v5, 0, 0, 0xD00000000000001ELL, 0x80000001823ADBF0, partial apply for closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:), v2, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in NSURLSession.upload(for:fromFile:delegate:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1F4188790](v12));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  id v15 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_133;
  id v18 = _Block_copy(aBlock);
  id v19 = a4;
  swift_release();
  id v20 = objc_msgSend(a2, sel__uploadTaskWithRequest_fromFile_delegate_completionHandler_, v15, v19, v24, v18);
  _Block_release(v18);

  objc_msgSend(v20, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v20, sel_resume);
  uint64_t v21 = *(os_unfair_lock_s **)(v25 + 16);
  id v26 = v20;
  uint64_t v22 = v21 + 4;
  uint64_t v23 = v21 + 8;
  os_unfair_lock_lock(v21 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v22, (char *)aBlock);
  os_unfair_lock_unlock(v23);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v20, sel_cancel);
  }
}

uint64_t NSURLSession.upload(for:from:delegate:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[17] = *a1;
  return MEMORY[0x1F4188298](NSURLSession.upload(for:from:delegate:), 0, 0);
}

uint64_t NSURLSession.upload(for:from:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  long long v8 = *(_OWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  long long v7 = *(_OWORD *)(v0 + 128);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v5 = v0;
  v5[1] = NSURLSession.upload(for:from:delegate:);
  return MEMORY[0x1F4188148](v0 + 80, &async function pointer to partial apply for closure #1 in NSURLSession.upload(for:from:delegate:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.upload(for:from:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.upload(for:from:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.upload(for:from:delegate:), 0, 0);
}

void closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  id v29 = a2;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1F4188790](v11));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v14 = v32;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v28 = a1;
      if (a4 >> 32 < (int)a4) {
        __break(1u);
      }
      swift_retain();
      unint64_t v16 = __DataStorage.bridgedReference(_:)((int)a4, a4 >> 32);
      outlined consume of Data._Representation(a4, a5);
      a1 = v28;
      break;
    case 2uLL:
      uint64_t v17 = *(void *)(a4 + 16);
      uint64_t v18 = *(void *)(a4 + 24);
      swift_retain();
      swift_retain();
      unint64_t v16 = __DataStorage.bridgedReference(_:)(v17, v18);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      id v15 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t aBlock = a4;
      LOWORD(v34) = a5;
      BYTE2(v34) = BYTE2(a5);
      BYTE3(v34) = BYTE3(a5);
      BYTE4(v34) = BYTE4(a5);
      BYTE5(v34) = BYTE5(a5);
      id v15 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &aBlock, BYTE6(a5));
LABEL_7:
      unint64_t v16 = v15;
      break;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v20 + v19, (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  long long v37 = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  uint64_t v38 = v20;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v34 = 1107296256;
  uint64_t v35 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  uint64_t v36 = &block_descriptor_124;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_release();
  id v22 = objc_msgSend(v29, sel__uploadTaskWithRequest_fromData_delegate_completionHandler_, v14, v16, v30, v21);
  _Block_release(v21);

  objc_msgSend(v22, sel_set_callCompletionHandlerInline_, 1);
  id v23 = objc_msgSend(v22, sel_resume);
  MEMORY[0x1F4188790](v23);
  *(&v27 - 2) = (uint64_t)v22;
  uint64_t v25 = v24 + 4;
  id v26 = v24 + 8;
  os_unfair_lock_lock(v24 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v25, (char *)&aBlock);
  os_unfair_lock_unlock(v26);
  if ((aBlock & 1) == 0) {
    objc_msgSend(v22, sel_cancel);
  }
}

uint64_t NSURLSession.download(for:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v4[14] = a1;
  v4[15] = a3;
  uint64_t v5 = *a2;
  v4[16] = v3;
  v4[17] = v5;
  return MEMORY[0x1F4188298](NSURLSession.download(for:delegate:), 0, 0);
}

uint64_t NSURLSession.download(for:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  long long v7 = *(_OWORD *)(v0 + 128);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *uint64_t v5 = v0;
  v5[1] = NSURLSession.download(for:delegate:);
  return MEMORY[0x1F4188148](v0 + 56, &async function pointer to partial apply for closure #1 in NSURLSession.download(for:delegate:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.data(from:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.download(for:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(_OWORD *)(v0 + 64);
  *(void *)uint64_t v1 = *(void *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v2);
}

uint64_t closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(for:delegate:), 0, 0);
}

uint64_t closure #1 in NSURLSession.download(for:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  void *v4 = v0;
  v4[1] = closure #1 in NSURLSession.download(for:delegate:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000017, 0x80000001823ADBB0, partial apply for closure #1 in closure #1 in NSURLSession.download(for:delegate:), v3, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(for:delegate:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

void closure #1 in closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1F4188790](v9));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v12 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_115;
  id v15 = _Block_copy(aBlock);
  swift_release();
  id v16 = objc_msgSend(a2, sel__downloadTaskWithRequest_delegate_completionHandler_, v12, a4, v15);
  _Block_release(v15);

  objc_msgSend(v16, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v16, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v16, sel_resume);
  uint64_t v17 = *(os_unfair_lock_s **)(v21 + 16);
  id v22 = v16;
  uint64_t v18 = v17 + 4;
  unint64_t v19 = v17 + 8;
  os_unfair_lock_lock(v17 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v18, (char *)aBlock);
  os_unfair_lock_unlock(v19);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v16, sel_cancel);
  }
}

uint64_t closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(from:delegate:), 0, 0);
}

uint64_t NSURLSession.download(resumeFrom:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return MEMORY[0x1F4188298](NSURLSession.download(resumeFrom:delegate:), 0, 0);
}

uint64_t NSURLSession.download(resumeFrom:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  long long v8 = *(_OWORD *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 152) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v4 = swift_initStackObject();
  *(void *)(v0 + 160) = v4;
  *(_DWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(inited + 16) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  *(void *)(v5 + 16) = v1;
  *(_OWORD *)(v5 + 24) = v8;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = inited;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *uint64_t v6 = v0;
  v6[1] = NSURLSession.download(resumeFrom:delegate:);
  return MEMORY[0x1F4188148](v0 + 56, &async function pointer to partial apply for closure #1 in NSURLSession.download(resumeFrom:delegate:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.upload(for:fromFile:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.download(resumeFrom:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(_OWORD *)(v0 + 64);
  *(void *)uint64_t v1 = *(void *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v2);
}

uint64_t closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  void v6[2] = a1;
  v6[3] = a2;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(resumeFrom:delegate:), 0, 0);
}

uint64_t closure #1 in NSURLSession.download(resumeFrom:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v7 = *(_OWORD *)(v0 + 24);
  long long v8 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = v7;
  *(_OWORD *)(v2 + 32) = v8;
  *(void *)(v2 + 48) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  void *v3 = v0;
  v3[1] = closure #1 in NSURLSession.download(resumeFrom:delegate:);
  uint64_t v5 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v5, 0, 0, 0xD00000000000001ELL, 0x80000001823ADB40, partial apply for closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:), v2, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(resumeFrom:delegate:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  id v26 = a2;
  uint64_t v27 = a5;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v28 = a6;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      uint64_t v14 = __DataStorage.bridgedReference(_:)((int)a3, a3 >> 32);
      outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v14 = __DataStorage.bridgedReference(_:)(v15, v16);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      unint64_t v13 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t aBlock = a3;
      LOWORD(v30) = a4;
      BYTE2(v30) = BYTE2(a4);
      BYTE3(v30) = BYTE3(a4);
      BYTE4(v30) = BYTE4(a4);
      BYTE5(v30) = BYTE5(a4);
      unint64_t v13 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &aBlock, BYTE6(a4));
LABEL_7:
      uint64_t v14 = v13;
      break;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  long long v33 = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  uint64_t v34 = v18;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v30 = 1107296256;
  uint64_t v31 = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  uint64_t v32 = &block_descriptor_97;
  unint64_t v19 = _Block_copy(&aBlock);
  swift_release();
  id v20 = objc_msgSend(v26, sel__downloadTaskWithResumeData_delegate_completionHandler_, v14, v27, v19);
  _Block_release(v19);

  objc_msgSend(v20, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v20, sel_set_keepDownloadTaskFile_, 1);
  id v21 = objc_msgSend(v20, sel_resume);
  MEMORY[0x1F4188790](v21);
  *(&v25 - 2) = (uint64_t)v20;
  id v23 = v22 + 4;
  uint64_t v24 = v22 + 8;
  os_unfair_lock_lock(v22 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v23, (char *)&aBlock);
  os_unfair_lock_unlock(v24);
  if ((aBlock & 1) == 0) {
    objc_msgSend(v20, sel_cancel);
  }
}

uint64_t NSURLSession.AsyncBytes._Storage.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_cancel);

  outlined consume of Data?(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return swift_deallocClassInstance();
}

id NSURLSession.AsyncBytes.task.getter()
{
  return *(id *)(*(void *)v0 + 16);
}

uint64_t NSURLSession.AsyncBytes.Iterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NSURLSession.AsyncBytes.Iterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_unknownObjectRelease();
  void *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*NSURLSession.AsyncBytes.Iterator.buffer.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:), 0, 0);
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return MEMORY[0x1F4188148](v0 + 16, &async function pointer to partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v3[9] = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  v3[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:), 0, 0);
}

uint64_t closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v0[7] + 24);
  uint64_t v3 = *(os_unfair_lock_s **)(v2
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = (void *)(v2
                + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state);
  outlined init with copy of URLSessionAsyncBytesDelegate.State(v2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state, v1);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v6 = (uint64_t *)v0[10];
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      v0[11] = v8;
      uint64_t v9 = (void *)swift_task_alloc();
      v0[12] = v9;
      void v9[2] = v2;
      v9[3] = v7;
      v9[4] = v8;
      uint64_t v10 = (void *)swift_task_alloc();
      v0[13] = v10;
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
      void *v10 = v0;
      v10[1] = closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
      uint64_t result = MEMORY[0x1F4188160](v0 + 4, 0, 0, 0x292861746164, 0xE600000000000000, partial apply for closure #1 in URLSessionAsyncBytesDelegate.data(), v9, v11);
      break;
    case 3u:
      uint64_t v12 = *(void **)v0[10];
      if (v12)
      {
        id v13 = v12;
        outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v4);
        void *v4 = 0;
        swift_storeEnumTagMultiPayload();
        swift_retain();
        os_unfair_lock_unlock(v3 + 4);
        swift_release();
        swift_willThrow();
      }
      else
      {
        swift_retain();
        os_unfair_lock_unlock(v3 + 4);
        swift_release();
        uint64_t v15 = (void *)v0[6];
        *(void *)(v0[8] + 16) = *(void *)(v0[8] + 8);
        void *v15 = 0;
      }
      swift_task_dealloc();
      uint64_t v14 = (uint64_t (*)(void))v0[1];
      uint64_t result = v14();
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  swift_release();
  uint64_t v1 = v0[5];
  if (v1 >> 60 == 15)
  {
LABEL_11:
    uint64_t v14 = (void *)v0[6];
    *(void *)(v0[8] + 16) = *(void *)(v0[8] + 8);
    *uint64_t v14 = 0;
  }
  else
  {
    uint64_t v2 = v0[4];
    v0[2] = v2;
    v0[3] = v1;
    switch(v1 >> 62)
    {
      case 1uLL:
        LODWORD(v3) = HIDWORD(v2) - v2;
        if (__OFSUB__(HIDWORD(v2), v2))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          JUMPOUT(0x181CB4C20);
        }
        uint64_t v3 = (int)v3;
LABEL_7:
        if (v3 < 1)
        {
LABEL_10:
          outlined consume of Data?(v2, v1);
          goto LABEL_11;
        }
        uint64_t v8 = v0[7];
        uint64_t v7 = v0[8];
        Data._Representation.reserveCapacity(_:)(15);
        specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v0 + 2, v7);
        uint64_t v9 = v0[2];
        uint64_t v10 = v0[3];
        uint64_t v11 = *(void *)(v8 + 32);
        uint64_t v12 = *(void *)(v8 + 40);
        *(void *)(v8 + 32) = v9;
        *(void *)(v8 + 40) = v10;
        outlined copy of Data._Representation(v9, v10);
        outlined consume of Data?(v11, v12);
        switch(v10 >> 62)
        {
          case 1uLL:
            outlined consume of Data._Representation(v9, v10);
            LODWORD(v13) = HIDWORD(v9) - v9;
            if (__OFSUB__(HIDWORD(v9), v9)) {
              goto LABEL_24;
            }
            id v13 = (int)v13;
            break;
          case 2uLL:
            uint64_t v16 = *(void *)(v9 + 16);
            uint64_t v15 = *(void *)(v9 + 24);
            outlined consume of Data._Representation(v9, v10);
            id v13 = v15 - v16;
            if (!__OFSUB__(v15, v16)) {
              break;
            }
            __break(1u);
LABEL_17:
            outlined consume of Data._Representation(v9, v10);
            id v13 = 0;
            break;
          case 3uLL:
            goto LABEL_17;
          default:
            outlined consume of Data._Representation(v9, v10);
            id v13 = BYTE6(v10);
            break;
        }
        *(void *)v0[6] = v13;
        break;
      case 2uLL:
        uint64_t v5 = *(void *)(v2 + 16);
        uint64_t v4 = *(void *)(v2 + 24);
        uint64_t v6 = __OFSUB__(v4, v5);
        uint64_t v3 = v4 - v5;
        if (!v6) {
          goto LABEL_7;
        }
        goto LABEL_23;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v3 = BYTE6(v1);
        goto LABEL_7;
    }
  }
  swift_task_dealloc();
  unint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NSURLSession.AsyncBytes.Iterator.next()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](NSURLSession.AsyncBytes.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  void *v6;
  uint64_t v7;

  uint64_t v1 = v0[2];
  uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[3] = v6;
    *uint64_t v6 = v0;
    v6[1] = NSURLSession.AsyncBytes.Iterator.next();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    uint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
}

uint64_t NSURLSession.AsyncBytes.Iterator.next()(__int16 a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7(a1 & 0x1FF);
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(char **)(v1 + 8);
  if (v2 == *(char **)(v1 + 16))
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v0[4] = v7;
    *uint64_t v7 = v0;
    v7[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v4 = (unsigned char *)v0[2];
    unsigned char *v4 = v3;
    v4[1] = 0;
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator(__int16 a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    uint64_t v6 = *(unsigned char **)(v4 + 16);
    *uint64_t v6 = a1;
    v6[1] = HIBYTE(a1) & 1;
  }
  uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
  return v7();
}

uint64_t _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *uint64_t v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

uint64_t _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_(__int16 a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    **(void **)(v4 + 24) = v1;
  }
  else
  {
    uint64_t v7 = *(unsigned char **)(v4 + 16);
    *uint64_t v7 = a1;
    v7[1] = HIBYTE(a1) & 1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t NSURLSession.AsyncBytes.makeAsyncIterator()()
{
  uint64_t v1 = *v0;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  swift_retain();
  uint64_t v3 = swift_dynamicCastClassUnconditional();
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = &async function pointer to partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(void *)(v3 + 24) = v1;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v4);
  swift_release();
  return v2;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSURLSession.AsyncBytes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 32) = 0;
  swift_retain();
  uint64_t v5 = swift_dynamicCastClassUnconditional();
  uint64_t v6 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = &closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(void *)(v5 + 24) = v3;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v6);
  uint64_t result = swift_release();
  *a1 = v4;
  a1[1] = v4 + 33;
  a1[2] = v4 + 33;
  return result;
}

uint64_t NSURLSession.bytes(for:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v4[12] = a1;
  v4[13] = a3;
  uint64_t v5 = *a2;
  v4[14] = v3;
  v4[15] = v5;
  return MEMORY[0x1F4188298](NSURLSession.bytes(for:delegate:), 0, 0);
}

uint64_t NSURLSession.bytes(for:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  long long v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 128) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 136) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 144) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
  *uint64_t v5 = v0;
  v5[1] = NSURLSession.bytes(for:delegate:);
  return MEMORY[0x1F4188148](v0 + 80, &async function pointer to partial apply for closure #1 in NSURLSession.bytes(for:delegate:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.data(for:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.bytes(for:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = (void *)v0[12];
  swift_release();
  uint64_t v2 = v0[11];
  *uint64_t v1 = v0[10];
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.bytes(for:delegate:), 0, 0);
}

uint64_t closure #1 in NSURLSession.bytes(for:delegate:)()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = (void *)v0[9];
  objc_msgSend(*(id *)(v0[10] + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v4 = (void *)v0[6];
  id v5 = objc_msgSend(v3, sel__dataTaskWithRequest_delegate_, v4, v1);
  v0[13] = v5;

  uint64_t v6 = swift_task_alloc();
  v0[14] = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v2;
  long long v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  uint64_t v8 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLResponse);
  *long long v7 = v0;
  v7[1] = closure #1 in NSURLSession.bytes(for:delegate:);
  return MEMORY[0x1F4188160](v0 + 7, 0, 0, 0xD000000000000014, 0x80000001823ADAD0, partial apply for closure #1 in closure #1 in NSURLSession.bytes(for:delegate:), v6, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in NSURLSession.bytes(for:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in NSURLSession.bytes(for:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id closure #1 in NSURLSession.bytes(for:delegate:)()
{
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 56);
  type metadata accessor for NSURLSession.AsyncBytes._Storage();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = xmmword_18218FDB0;
  *(void *)(v3 + 16) = v1;
  id result = objc_msgSend(v1, sel__internalDelegate);
  if (result)
  {
    id v5 = *(uint64_t **)(v0 + 64);

    type metadata accessor for URLSessionAsyncBytesDelegate(0);
    *(void *)(v3 + 24) = swift_dynamicCastClassUnconditional();
    *id v5 = v3;
    v5[1] = v2;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v6();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16);
  v11(v10, a1, v6, v8);
  uint64_t v12 = (objc_class *)type metadata accessor for URLSessionAsyncBytesDelegate(0);
  id v13 = (char *)objc_allocWithZone(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)&v13[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock] = v14;
  ((void (*)(char *, unsigned char *, uint64_t))v11)(&v13[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state], v10, v6);
  type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  swift_storeEnumTagMultiPayload();
  v22.receiver = v13;
  v22.super_class = v12;
  id v15 = objc_msgSendSuper2(&v22, sel_init);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
  objc_msgSend(a2, sel_set_internalDelegate_, v15);

  objc_msgSend(a2, sel_resume);
  uint64_t v16 = *(os_unfair_lock_s **)(a3 + 16);
  id v20 = a2;
  unint64_t v17 = v16 + 4;
  uint64_t v18 = v16 + 8;
  os_unfair_lock_lock(v16 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)partial apply(v17, &v21);
  os_unfair_lock_unlock(v18);
  if ((v21 & 1) == 0) {
    objc_msgSend(a2, sel_cancel);
  }
}

uint64_t NSURLSession.bytes(from:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(v4 + 96) = a1;
  *(void *)(v4 + 104) = a3;
  uint64_t v5 = *a2;
  *(void *)(v4 + 112) = v3;
  *(void *)(v4 + 120) = v5;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 1);
  return MEMORY[0x1F4188298](NSURLSession.bytes(from:delegate:), 0, 0);
}

uint64_t NSURLSession.bytes(from:delegate:)()
{
  long long v8 = *(_OWORD *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  long long v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
  *uint64_t v5 = v0;
  v5[1] = NSURLSession.bytes(from:delegate:);
  return MEMORY[0x1F4188148](v0 + 80, &async function pointer to partial apply for closure #1 in NSURLSession.bytes(from:delegate:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.data(from:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.bytes(from:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = (void *)v0[12];
  swift_release();
  uint64_t v2 = v0[11];
  *uint64_t v1 = v0[10];
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t closure #1 in NSURLSession.bytes(from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[6] = a6;
  v7[7] = a7;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.bytes(from:delegate:), 0, 0);
}

uint64_t closure #1 in NSURLSession.bytes(from:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  id v2 = objc_msgSend(*(id *)(v0 + 32), sel__dataTaskWithURL_delegate_, *(void *)(v0 + 40), *(void *)(v0 + 48));
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  uint64_t v5 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLResponse);
  void *v4 = v0;
  v4[1] = closure #1 in NSURLSession.bytes(from:delegate:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD000000000000015, 0x80000001823ADA70, partial apply for closure #1 in closure #1 in NSURLSession.bytes(from:delegate:), v3, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = closure #1 in NSURLSession.bytes(from:delegate:);
  }
  else
  {
    swift_task_dealloc();
    id v2 = closure #1 in NSURLSession.bytes(from:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id closure #1 in NSURLSession.bytes(from:delegate:)()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 16);
  type metadata accessor for NSURLSession.AsyncBytes._Storage();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = xmmword_18218FDB0;
  *(void *)(v3 + 16) = v1;
  id result = objc_msgSend(v1, sel__internalDelegate);
  if (result)
  {
    uint64_t v5 = *(uint64_t **)(v0 + 24);

    type metadata accessor for URLSessionAsyncBytesDelegate(0);
    *(void *)(v3 + 24) = swift_dynamicCastClassUnconditional();
    *uint64_t v5 = v3;
    v5[1] = v2;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v6();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in NSURLSession.bytes(from:delegate:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16);
  v11(v10, a1, v6, v8);
  uint64_t v12 = (objc_class *)type metadata accessor for URLSessionAsyncBytesDelegate(0);
  id v13 = (char *)objc_allocWithZone(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)&v13[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock] = v14;
  ((void (*)(char *, unsigned char *, uint64_t))v11)(&v13[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state], v10, v6);
  type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  swift_storeEnumTagMultiPayload();
  v22.receiver = v13;
  v22.super_class = v12;
  id v15 = objc_msgSendSuper2(&v22, sel_init);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
  objc_msgSend(a2, sel_set_internalDelegate_, v15);

  objc_msgSend(a2, sel_resume);
  uint64_t v16 = *(os_unfair_lock_s **)(a3 + 16);
  id v20 = a2;
  unint64_t v17 = v16 + 4;
  uint64_t v18 = v16 + 8;
  os_unfair_lock_lock(v16 + 8);
  partial apply for closure #1 in NSURLSession.CancelState.activate(task:)(v17, &v21);
  os_unfair_lock_unlock(v18);
  if ((v21 & 1) == 0) {
    objc_msgSend(a2, sel_cancel);
  }
}

void closure #2 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  closure #1 in NSURLSession.CancelState.cancel()(v2, &v5);
  os_unfair_lock_unlock(v3);
  id v4 = v5;
  objc_msgSend(v5, sel_cancel);
}

uint64_t outlined copy of NSURLSessionWebSocketTask.Message(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  else {
    return outlined copy of Data._Representation(a1, a2);
  }
}

uint64_t outlined consume of NSURLSessionWebSocketTask.Message(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  else {
    return outlined consume of Data._Representation(a1, a2);
  }
}

void partial apply for closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)(void *a1, void *a2)
{
  closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)(a1, a2, *(void (**)(id *))(v2 + 16));
}

uint64_t sub_181CB6770()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #2 in NSURLSession.data(for:delegate:)()
{
  closure #2 in NSURLSession.data(for:delegate:)(v0);
}

uint64_t partial apply for closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1)
{
  long long v8 = *(_OWORD *)(v1 + 48);
  long long v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v9;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.upload(for:fromFile:delegate:), 0, 0);
}

uint64_t partial apply for closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1)
{
  long long v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.upload(for:from:delegate:), 0, 0);
}

uint64_t partial apply for closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(for:delegate:), 0, 0);
}

uint64_t partial apply for closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 32);
  long long v8 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v8;
  *(void *)(v5 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v5 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.download(resumeFrom:delegate:), 0, 0);
}

uint64_t partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  v4[3] = a1;
  v4[4] = v1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:), 0, 0);
}

uint64_t partial apply for closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 88) = v4;
  *(void *)(v6 + 96) = v5;
  *(_OWORD *)(v6 + 72) = v7;
  *(void *)(v6 + 64) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.bytes(for:delegate:), 0, 0);
}

uint64_t partial apply for closure #1 in NSURLSession.bytes(from:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 48) = v4;
  *(void *)(v6 + 56) = v5;
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 24) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.bytes(from:delegate:), 0, 0);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in NSURLSession.AsyncBytes.Iterator()
{
  return MEMORY[0x1E4FBC0F0];
}

unint64_t lazy protocol witness table accessor for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator;
  if (!lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator);
  }
  return result;
}

uint64_t destroy for NSURLSessionWebSocketTask.Message(uint64_t a1)
{
  return outlined consume of NSURLSessionWebSocketTask.Message(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of NSURLSessionWebSocketTask.Message(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of NSURLSessionWebSocketTask.Message(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of NSURLSessionWebSocketTask.Message(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of NSURLSessionWebSocketTask.Message(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NSURLSessionWebSocketTask.Message()
{
  return &type metadata for NSURLSessionWebSocketTask.Message;
}

uint64_t ObjC metadata update function for URLSessionAsyncBytesDelegate()
{
  return type metadata accessor for URLSessionAsyncBytesDelegate(0);
}

uint64_t type metadata accessor for URLSessionAsyncBytesDelegate(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for URLSessionAsyncBytesDelegate);
}

uint64_t type metadata completion function for URLSessionAsyncBytesDelegate()
{
  uint64_t result = type metadata accessor for URLSessionAsyncBytesDelegate.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for URLSessionAsyncBytesDelegate.State(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for URLSessionAsyncBytesDelegate.State);
}

ValueMetadata *type metadata accessor for NSURLSession.AsyncBytes()
{
  return &type metadata for NSURLSession.AsyncBytes;
}

uint64_t type metadata accessor for NSURLSession.AsyncBytes._Storage()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSession.AsyncBytes.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for NSURLSession.AsyncBytes.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for NSURLSession.AsyncBytes.Iterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSURLSession.AsyncBytes.Iterator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSURLSession.AsyncBytes.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSURLSession.AsyncBytes.Iterator()
{
  return &type metadata for NSURLSession.AsyncBytes.Iterator;
}

char *initializeBufferWithCopyOfBuffer for URLSessionAsyncBytesDelegate.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    unint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        break;
      case 2u:
        char v8 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v8;
        swift_retain();
        break;
      case 3u:
        uint64_t v9 = *a2;
        uint64_t v10 = v9;
        *(void *)a1 = v9;
        break;
      default:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for URLSessionAsyncBytesDelegate.State(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = &demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>;
      goto LABEL_4;
    case 1u:
      uint64_t v2 = &demangling cache variable for type metadata for CheckedContinuation<Data?, Error>;
LABEL_4:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
      int v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      int v5 = *a1;

      break;
    default:
      return;
  }
}

void *initializeWithCopy for URLSessionAsyncBytesDelegate.State(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      break;
    case 2u:
      uint64_t v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_retain();
      break;
    case 3u:
      uint64_t v6 = (void *)*a2;
      id v7 = v6;
      *a1 = v6;
      break;
    default:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for URLSessionAsyncBytesDelegate.State(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        break;
      case 2u:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        swift_retain();
        break;
      case 3u:
        id v7 = (void *)*a2;
        id v8 = v7;
        *a1 = v7;
        break;
      default:
        uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of URLSessionAsyncBytesDelegate.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for URLSessionAsyncBytesDelegate.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for URLSessionAsyncBytesDelegate.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for URLSessionAsyncBytesDelegate.State()
{
  type metadata accessor for CheckedContinuation<NSURLResponse, Error>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CheckedContinuation<Data?, Error>();
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for CheckedContinuation<NSURLResponse, Error>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>)
  {
    type metadata accessor for NSMorphologyPronoun(255, &lazy cache variable for type metadata for NSURLResponse);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
    }
  }
}

void type metadata accessor for CheckedContinuation<Data?, Error>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<Data?, Error>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<Data?, Error>);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for NSURLSession.CancelState.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSURLSession.CancelState.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t specialized URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:)(void *a1, uint64_t a2, void (**a3)(void, void))
{
  id v22 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t (**)())((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  id v13 = (id *)((char *)&v21 - v12);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  id v15 = *(os_unfair_lock_s **)(a2
                             + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  _Block_copy(a3);
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  swift_release();
  uint64_t v16 = a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state;
  outlined init with copy of URLSessionAsyncBytesDelegate.State(v16, (uint64_t)v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v13);
      goto LABEL_6;
    case 2u:
      swift_release();
      goto LABEL_6;
    case 3u:

LABEL_6:
      swift_retain();
      os_unfair_lock_unlock(v15 + 4);
      swift_release();
      a3[2](a3, 1);
      break;
    default:
      uint64_t v17 = v23;
      (*(void (**)(char *, id *, uint64_t))(v23 + 32))(v7, v13, v5);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURLSessionResponseDisposition) -> ();
      *(void *)(v18 + 24) = v14;
      char *v10 = partial apply for closure #1 in URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:);
      v10[1] = (uint64_t (*)())v18;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      outlined assign with take of URLSessionAsyncBytesDelegate.State((uint64_t)v10, v16);
      swift_retain();
      os_unfair_lock_unlock(v15 + 4);
      swift_release();
      id v24 = v22;
      id v19 = v22;
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v5);
      break;
  }
  return swift_release();
}

uint64_t specialized URLSessionAsyncBytesDelegate.urlSession(_:dataTask:_didReceive:completionHandler:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void (**a5)(void))
{
  uint64_t v59 = a2;
  unint64_t v60 = a3;
  id v63 = a1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  MEMORY[0x1F4188790](v7);
  id v56 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  MEMORY[0x1F4188790](v9);
  char v64 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  id v20 = (id *)((char *)&v55 - v19);
  uint64_t v21 = swift_allocObject();
  unint64_t v65 = a5;
  uint64_t v66 = v21;
  *(void *)(v21 + 16) = a5;
  id v22 = *(os_unfair_lock_s **)(a4
                             + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  _Block_copy(a5);
  swift_retain();
  os_unfair_lock_lock(v22 + 4);
  swift_release();
  uint64_t v23 = (uint64_t (**)())(a4
                       + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state);
  outlined init with copy of URLSessionAsyncBytesDelegate.State((uint64_t)v23, (uint64_t)v20);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, id *, uint64_t))(v12 + 32))(v14, v20, v11);
      outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v23);
      uint64_t v34 = (uint64_t (*)())v66;
      *uint64_t v23 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ();
      v23[1] = v34;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_retain();
      os_unfair_lock_unlock(v22 + 4);
      swift_release();
      uint64_t v67 = v59;
      unint64_t v68 = v60;
      outlined copy of Data._Representation(v59, v60);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return swift_release();
    case 2u:
      swift_release();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
      id v35 = objc_allocWithZone((Class)NSError);
      uint64_t v36 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v37 = objc_msgSend(v35, sel_initWithDomain_code_userInfo_, v36, -1, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v38 = objc_msgSend(v37, sel_domain);
      id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      if (v39 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") || v41 != v42)
      {
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v45) {
          goto LABEL_13;
        }
LABEL_21:
        __break(1u);
        JUMPOUT(0x181CB880CLL);
      }
      swift_bridgeObjectRelease_n();
LABEL_13:
      *uint64_t v17 = v37;
      swift_storeEnumTagMultiPayload();
      outlined assign with take of URLSessionAsyncBytesDelegate.State((uint64_t)v17, (uint64_t)v23);
      swift_retain();
      os_unfair_lock_unlock(v22 + 4);
      swift_release();
      if (one-time initialization token for logHandle != -1) {
        swift_once();
      }
      id v46 = (id)logHandle;
      uint64_t v47 = v56;
      Logger.init(_:)();
      uint64_t v48 = v63;
      long long v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        id v52 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 138412290;
        uint64_t v67 = (uint64_t)v48;
        uint64_t v53 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v52 = v48;

        _os_log_impl(&dword_181795000, v49, v50, "%@ received data before consuming", v51, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x185309510](v52, -1, -1);
        MEMORY[0x185309510](v51, -1, -1);
      }
      else
      {

        long long v49 = v48;
      }

      (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v58);
      v65[2]();
      [v48 cancel];
      return swift_release();
    case 3u:

      swift_retain();
      os_unfair_lock_unlock(v22 + 4);
      swift_release();
      v65[2]();
      return swift_release();
    default:
      uint64_t v25 = v61;
      uint64_t v24 = v62;
      (*(void (**)(char *, id *, uint64_t))(v61 + 32))(v64, v20, v62);
      outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v23);
      *uint64_t v23 = 0;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      os_unfair_lock_unlock(v22 + 4);
      swift_release();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
      id v26 = objc_allocWithZone((Class)NSError);
      uint64_t v27 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, -1, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v29 = objc_msgSend(v28, sel_domain);
      id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v32 = v31;

      if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v32 == v33)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) == 0)
        {
          __break(1u);
          goto LABEL_21;
        }
      }
      uint64_t v67 = (uint64_t)v28;
      uint64_t v44 = v64;
      CheckedContinuation.resume(throwing:)();
      v65[2]();
      objc_msgSend(v63, sel_cancel);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v44, v24);
      return swift_release();
  }
}

void specialized URLSessionAsyncBytesDelegate.urlSession(_:task:didCompleteWithError:)(void *a1)
{
  id v33 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  uint64_t v32 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (id *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(os_unfair_lock_s **)(v1
                             + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_release();
  uint64_t v13 = (void *)(v1
                 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state);
  outlined init with copy of URLSessionAsyncBytesDelegate.State((uint64_t)v13, (uint64_t)v11);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, id *, uint64_t))(v3 + 32))(v5, v11, v2);
      outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v13);
      *uint64_t v13 = 0;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      os_unfair_lock_unlock(v12 + 4);
      swift_release();
      uint64_t v17 = (void (**)(char *, uint64_t))(v3 + 8);
      if (v33)
      {
        *(void *)&long long v34 = v33;
        id v18 = v33;
        CheckedContinuation.resume(throwing:)();
      }
      else
      {
        long long v34 = xmmword_18218FDB0;
        CheckedContinuation.resume(returning:)();
      }
      (*v17)(v5, v2);
      break;
    case 2u:
      uint64_t v19 = (void (*)(uint64_t))*v11;
      outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v13);
      id v20 = v33;
      *uint64_t v13 = v33;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      id v21 = v20;
      os_unfair_lock_unlock(v12 + 4);
      uint64_t v22 = swift_release();
      v19(v22);
      swift_release();
      break;
    case 3u:

      break;
    default:
      uint64_t v14 = v32;
      (*(void (**)(char *, id *, uint64_t))(v32 + 32))(v8, v11, v6);
      outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v13);
      *uint64_t v13 = 0;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      os_unfair_lock_unlock(v12 + 4);
      swift_release();
      id v15 = v33;
      if (v33)
      {
        id v16 = v33;
      }
      else
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
        id v23 = objc_allocWithZone((Class)NSError);
        uint64_t v24 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v16 = objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, -1, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v25 = objc_msgSend(v16, sel_domain);
        id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        uint64_t v28 = v27;

        if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v28 == v29)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v14 = v32;
        }
        else
        {
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v14 = v32;
          if ((v30 & 1) == 0)
          {
            __break(1u);
            JUMPOUT(0x181CB8D00);
          }
        }
      }
      *(void *)&long long v34 = v16;
      id v31 = v15;
      CheckedContinuation.resume(throwing:)();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
      break;
  }
}

uint64_t outlined init with copy of URLSessionAsyncBytesDelegate.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_181CB8D74()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t outlined assign with take of URLSessionAsyncBytesDelegate.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURLSessionResponseDisposition) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:)()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  v4[3] = a1;
  v4[4] = v1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:), 0, 0);
}

{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

void partial apply for closure #1 in closure #1 in NSURLSession.bytes(from:delegate:)(uint64_t a1)
{
  closure #1 in closure #1 in NSURLSession.bytes(from:delegate:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1)
{
  closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(a1, v5, v4);
}

id partial apply for closure #2 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

uint64_t partial apply for closure #1 in URLSessionAsyncBytesDelegate.data()(uint64_t a1)
{
  return closure #1 in URLSessionAsyncBytesDelegate.data()(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1)
{
  closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_181CB90E0()
{
  return objectdestroy_93Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t sub_181CB90EC()
{
  return objectdestroy_93Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

void partial apply for closure #1 in closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1)
{
  closure #1 in closure #1 in NSURLSession.download(for:delegate:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_181CB9104()
{
  return objectdestroy_93Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:));
}

uint64_t sub_181CB9128()
{
  return objectdestroy_93Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

void partial apply for closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1)
{
  closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_181CB9148()
{
  return objectdestroy_93Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

uint64_t sub_181CB9154()
{
  return objectdestroy_93Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

uint64_t sub_181CB9160()
{
  return objectdestroy_93Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

void AttributedString.AttributeRunBoundaries.hash(into:)()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int AttributedString.AttributeRunBoundaries.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(a1, a2, MEMORY[0x1E4FBAF48]);
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.AttributeRunBoundaries()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(a1, a2, a3, MEMORY[0x1E4FBAF48]);
}

unint64_t AttributedString.AttributeRunBoundaries._constrainedScalar.getter()
{
  unint64_t v1 = v0[1];
  if (v1)
  {
    unint64_t v2 = *v0;
    swift_bridgeObjectRetain();
    unint64_t v3 = specialized Collection.first.getter(v2, v1);
    swift_bridgeObjectRelease();
    uint64_t v4 = HIDWORD(v3) & 1;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = 0;
    LOBYTE(v4) = 1;
  }
  return v5 | ((unint64_t)v4 << 32);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeInvalidationCondition._Storage(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(a1, a2, MEMORY[0x1E4FBB120]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  Hasher.init(_seed:)();
  if (v6)
  {
    Hasher._combine(_:)(1uLL);
    a3(v8, v5, v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.AttributeInvalidationCondition._Storage()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeInvalidationCondition._Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(a1, a2, a3, MEMORY[0x1E4FBB120]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  Hasher.init(_seed:)();
  if (v7)
  {
    Hasher._combine(_:)(1uLL);
    a4(v9, v6, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void static AttributedString.AttributeInvalidationCondition.textChanged.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t static AttributedString.AttributeInvalidationCondition.attributeChanged<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t static AttributedString.AttributeInvalidationCondition.attributeChanged<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 24))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

void AttributedString.AttributeInvalidationCondition.hash(into:)()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static AttributedString.AttributeInvalidationCondition.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

Swift::Int AttributedString.AttributeInvalidationCondition.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeInvalidationCondition()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeInvalidationCondition()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.AttributeInvalidationCondition._Storage(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t AttributedStringKey.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void AttributeDynamicLookup.subscript.getter()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  AttributeDynamicLookup.subscript.getter();
}

{
  AttributeDynamicLookup.subscript.getter();
}

uint64_t key path getter for ScopedAttributeContainer.subscript<A>(dynamicMember:) : <A><A1>ScopedAttributeContainer<A>AA1@<X0>(void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  BOOL v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ScopedAttributeContainer.subscript.getter(v5, v4, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t key path setter for ScopedAttributeContainer.subscript<A>(dynamicMember:) : <A><A1>ScopedAttributeContainer<A>AA1(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *a3;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v15 - v9, a1, v8);
  swift_retain();
  return ScopedAttributeContainer.subscript.setter(v10, v11, v13, v6);
}

void (*ScopedAttributeContainer.subscript.modify(void *a1, void *a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  v9[4] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v9[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v9[6] = malloc(v13);
  uint64_t v14 = malloc(v13);
  v9[7] = v14;
  AttributedString._AttributeStorage.subscript.getter(*v4, v10, a4, (uint64_t)v14);
  return ScopedAttributeContainer.subscript.modify;
}

void ScopedAttributeContainer.subscript.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(char **)(*(void *)a1 + 48);
  uint64_t v4 = *(char **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    uint64_t v7 = v2[2];
    double v8 = (void *)*v2;
    (*(void (**)(void, char *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    swift_retain();
    ScopedAttributeContainer.subscript.setter(v3, v8, v9, v7);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v10 = v2[2];
    uint64_t v11 = (void *)*v2;
    swift_retain();
    ScopedAttributeContainer.subscript.setter(v4, v11, v12, v10);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3)
  {
    if (!v4)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    return 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition);
  }
  return result;
}

uint64_t sub_181CB9E60()
{
  return 32;
}

__n128 sub_181CB9E6C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeRunBoundaries()
{
  return &type metadata for AttributedString.AttributeRunBoundaries;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeInvalidationCondition()
{
  return &type metadata for AttributedString.AttributeInvalidationCondition;
}

uint64_t dispatch thunk of static AttributedStringKey.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static AttributedStringKey.runBoundaries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static AttributedStringKey.inheritedByAddedText.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static AttributedStringKey.invalidationConditions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

void *initializeWithCopy for ScopedAttributeContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ScopedAttributeContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScopedAttributeContainer(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.AttributeRunBoundaries(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AttributedString.AttributeRunBoundaries(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *type metadata accessor for AttributedString.AttributeInvalidationCondition._Storage()
{
  return &unk_1ECA38060;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage);
  }
  return result;
}

void specialized Hasher.combine<A>(_:)(uint64_t a1)
{
  if (*(unsigned char *)a1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v4, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(a1 + 17) == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(a1 + 18) == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(a1 + 19) != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(a1 + 33) & 1) == 0) {
      goto LABEL_15;
    }
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
  Hasher._combine(_:)(0);
  if (*(unsigned char *)(a1 + 33)) {
    goto LABEL_23;
  }
LABEL_15:
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  Hasher._combine(_:)(1u);
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = 10;
    if (v5 < 10) {
      uint64_t v7 = v5;
    }
    if (v7 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v7;
    }
    MEMORY[0x185302340](103, 0xE100000000000000, v8);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_25:
  if (*(unsigned char *)(a1 + 34) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(a1 + 35) == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(a1 + 36) == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
  int v9 = *(unsigned __int8 *)(a1 + 37);
  if (v9 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v9);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(a1 + 38) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(a1 + 39) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  int v10 = *(unsigned __int8 *)(a1 + 48);
  if (v10 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    char v12 = v10 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(v1, v11, v12);
  }
  int v13 = *(unsigned __int8 *)(a1 + 49);
  if (v13 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v13);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t Date.IntervalFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.IntervalFormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.timeZone.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.timeZone.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.IntervalFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

int8x8_t Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, uint64_t a6@<X8>, int16x8_t a7@<Q0>)
{
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  uint64_t v10 = *a2;
  char v11 = *((unsigned char *)a2 + 8);
  long long v12 = *a3;
  long long v13 = *a4;
  long long v14 = *a5;
  char v15 = 3;
  char v51 = 3;
  uint64_t v52 = 0;
  int v53 = 50660863;
  uint64_t v54 = 0;
  __int16 v55 = 256;
  int v56 = 235472387;
  __int16 v57 = 514;
  uint64_t v58 = 0;
  __int16 v59 = 3327;
  if (v9)
  {
    char v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    char v20 = HIBYTE(v55);
    a7.i64[0] = 0x30005000500FFLL;
    char v21 = 1;
    char v22 = 12;
    char v23 = -1;
    char v24 = 2;
    char v25 = 14;
    char v26 = 6;
    char v27 = 9;
    char v28 = 3;
    char v29 = 2;
    if ((v11 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    char v21 = v20 & 1;
    goto LABEL_12;
  }
  uint64_t v35 = v8;
  long long v33 = v12;
  long long v34 = v13;
  long long v32 = v14;
  Date.FormatStyle.DateFieldCollection.collection(date:)(&v35, (uint64_t)v36);
  long long v14 = v32;
  long long v12 = v33;
  long long v13 = v34;
  char v28 = v36[0];
  uint64_t v18 = v37;
  v30.i32[0] = v38;
  a7 = (int16x8_t)vmovl_u8(v30);
  uint64_t v17 = v39;
  char v16 = v40;
  char v20 = v41;
  char v15 = v42;
  char v26 = v43;
  char v27 = v44;
  char v25 = v45;
  char v24 = v46;
  char v29 = v47;
  uint64_t v19 = v48;
  char v23 = v49;
  char v21 = v41;
  char v22 = v50;
  if (v11) {
    goto LABEL_8;
  }
LABEL_3:
  if (v10)
  {
    if (v10 == 3)
    {
      char v22 = 0;
    }
    else if (v10 != 2)
    {
      goto LABEL_11;
    }
    char v29 = 1;
LABEL_11:
    char v25 = 0;
    char v24 = 1;
  }
LABEL_12:
  *(_OWORD *)a6 = v12;
  *(_OWORD *)(a6 + 16) = v14;
  *(_OWORD *)(a6 + 32) = v13;
  *(unsigned char *)(a6 + 48) = v28;
  *(void *)(a6 + 56) = v18;
  int8x8_t result = vmovn_s16(a7);
  *(_DWORD *)(a6 + 64) = result.i32[0];
  *(void *)(a6 + 72) = v17;
  *(unsigned char *)(a6 + 80) = v16;
  *(unsigned char *)(a6 + 81) = v21;
  *(unsigned char *)(a6 + 82) = v15;
  *(unsigned char *)(a6 + 83) = v26;
  *(unsigned char *)(a6 + 84) = v27;
  *(unsigned char *)(a6 + 85) = v25;
  *(unsigned char *)(a6 + 86) = v24;
  *(unsigned char *)(a6 + 87) = v29;
  *(void *)(a6 + 88) = v19;
  *(unsigned char *)(a6 + 96) = v23;
  *(unsigned char *)(a6 + 97) = v22;
  return result;
}

uint64_t Date.IntervalFormatStyle.format(_:)(double *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  double v3 = *a1;
  double v2 = a1[1];
  char v4 = *(unsigned char *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 72);
  char v7 = *(unsigned char *)(v1 + 80);
  char v8 = *(unsigned char *)(v1 + 81);
  __int16 v9 = *(_WORD *)(v1 + 86);
  uint64_t v10 = *(void *)(v1 + 88);
  __int16 v11 = *(_WORD *)(v1 + 96);
  long long v12 = *(_OWORD *)(v1 + 16);
  v30[0] = *(_OWORD *)v1;
  v30[1] = v12;
  v30[2] = *(_OWORD *)(v1 + 32);
  char v31 = v4;
  uint64_t v32 = v5;
  int v33 = *(_DWORD *)(v1 + 64);
  uint64_t v34 = v6;
  char v35 = v7;
  char v36 = v8;
  int v37 = *(_DWORD *)(v1 + 82);
  __int16 v38 = v9;
  uint64_t v39 = v10;
  __int16 v40 = v11;
  if (!specialized static ICUDateIntervalFormatter.formatter(for:)((uint64_t)v30)
    || (uint64_t v13 = swift_retain_n(),
        MEMORY[0x1F4188790](v13),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v29, (uint64_t *)v30),
        uint64_t v15 = *((void *)&v30[0] + 1),
        uint64_t v14 = *(void *)&v30[0],
        swift_release_n(),
        !v15))
  {
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
    id v17 = objc_msgSend(v16, sel_description);

    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    *(void *)&v30[0] = v18;
    *((void *)&v30[0] + 1) = v20;
    v21._uint64_t countAndFlagsBits = 2108704;
    v21._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
    id v23 = objc_msgSend(v22, sel_description);

    id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    char v26 = v25;

    v27._uint64_t countAndFlagsBits = (uint64_t)v24;
    v27._unint64_t object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    return *(void *)&v30[0];
  }
  return v14;
}

uint64_t Date.IntervalFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 72);
  char v6 = *(unsigned char *)(v2 + 80);
  char v7 = *(unsigned char *)(v2 + 81);
  __int16 v8 = *(_WORD *)(v2 + 86);
  uint64_t v9 = *(void *)(v2 + 88);
  __int16 v10 = *(_WORD *)(v2 + 96);
  long long v11 = *(_OWORD *)(v2 + 16);
  long long v12 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v5;
  *(unsigned char *)(a2 + 80) = v6;
  *(unsigned char *)(a2 + 81) = v7;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v8;
  *(void *)(a2 + 88) = v9;
  *(_WORD *)(a2 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

void Date.IntervalFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unsigned char v56[144];
  unsigned char v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  void v75[18];
  unsigned char v76[144];
  unsigned char v77[144];
  _OWORD v78[3];
  __int16 v79;

  uint64_t v3 = *(void *)(v1 + 8);
  __int16 v55 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 40);
  long long v5 = *(_OWORD *)(v1 + 64);
  v78[0] = *(_OWORD *)(v1 + 48);
  v78[1] = v5;
  v78[2] = *(_OWORD *)(v1 + 80);
  Swift::String v79 = *(_WORD *)(v1 + 96);
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v3))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    swift_unknownObjectRelease();
    __int16 v10 = v55;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v9(v75, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76);
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v77) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v57);
  Hasher._combine(_:)(1u);
  if (v57[0] == 2)
  {
    long long v11 = 0;
  }
  else
  {
    long long v11 = v57[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  long long v12 = v58;
  if (!v58)
  {
    Hasher._combine(_:)(0);
    id v16 = v57;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v56);
    id v16 = v56;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    if (!v59) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v60) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = v61;
    if (!v61) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v60) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v15 = v61;
  if (!v61)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v15);
  swift_bridgeObjectRelease();
LABEL_23:
  id v17 = v62;
  int v53 = v4;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v19 = v63;
  id v18 = v64;
  uint64_t v20 = v65;
  Swift::String v21 = v66;
  id v22 = v67;
  char v50 = v65;
  char v51 = v67;
  if (v63)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v23 = v18;
    id v24 = v20;
    char v25 = v21;
    char v26 = v21;
    Swift::String v27 = v22;
    char v28 = v19;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v29 = v22;
    uint8x8_t v30 = v18;
    char v31 = v20;
    char v25 = v21;
    uint64_t v32 = v21;
  }
  uint64_t v52 = v19;
  uint64_t v54 = v18;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v33 = v18;
    _CFObject.hash(into:)();

    uint64_t v34 = v50;
    if (v50) {
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v34 = v50;
    if (v50)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      char v35 = v34;
      _CFObject.hash(into:)();

      if (v25) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      int v37 = v51;
      if (v51) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v25) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  char v36 = v25;
  _CFObject.hash(into:)();

  int v37 = v51;
  if (v51)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    __int16 v38 = v37;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  __int16 v38 = 0;
LABEL_38:

  uint64_t v39 = v68;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v4 = v53;
  __int16 v40 = v69;
  if (!v69)
  {
    Hasher._combine(_:)(0);
    if (v70) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (!v70) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  __int16 v10 = v55;
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v41 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v42 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v73 == 2)
  {
    char v43 = 0;
  }
  else
  {
    char v43 = v73 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  if (v74 == 2)
  {
    char v44 = 0;
  }
  else
  {
    char v45 = v74 & 1;
    Hasher._combine(_:)(1u);
    char v44 = v45;
  }
  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  char v46 = swift_getObjectType();
  char v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 112);
  swift_unknownObjectRetain();
  v47(a1, v46, v10);
  swift_unknownObjectRelease();
  uint64_t v48 = swift_getObjectType();
  char v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v49(a1, v48, v4);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v78);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.IntervalFormatStyle.CodingKeys()
{
  uint64_t result = 0x656C61636F6CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    case 2:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 3:
      uint64_t result = 0x736C6F626D7973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.IntervalFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.IntervalFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.IntervalFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.IntervalFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.IntervalFormatStyle.encode(to:)(void *a1)
{
  long long v5 = v1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.IntervalFormatStyle.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  __int16 v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v28 = v5[1];
  long long v25 = v5[2];
  int v40 = *((unsigned __int8 *)v5 + 48);
  uint64_t v27 = *((void *)v5 + 7);
  v4.i32[0] = *((_DWORD *)v5 + 16);
  uint64_t v19 = *((void *)v5 + 9);
  LODWORD(v9) = *((unsigned __int8 *)v5 + 81);
  int v20 = *((unsigned __int8 *)v5 + 80);
  int v21 = v9;
  v3.i32[0] = *(_DWORD *)((char *)v5 + 82);
  int v26 = *((unsigned __int8 *)v5 + 86);
  int v11 = *((unsigned __int8 *)v5 + 87);
  uint64_t v24 = *((void *)v5 + 11);
  LODWORD(v9) = *((unsigned __int8 *)v5 + 96);
  int v22 = v11;
  int v23 = v9;
  int v12 = *((unsigned __int8 *)v5 + 97);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v29 = *v5;
  char v41 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v27;
    char v14 = v40;
    int v18 = v12;
    char v15 = v26;
    long long v29 = v28;
    char v41 = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v29 = v25;
    char v41 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v29) = v14;
    *((void *)&v29 + 1) = v13;
    unsigned __int32 v30 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
    uint64_t v31 = v19;
    char v32 = v20;
    char v33 = v21;
    unsigned __int32 v34 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    char v35 = v15;
    char v36 = v22;
    uint64_t v37 = v24;
    char v38 = v23;
    char v39 = v18;
    char v41 = 3;
    lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Date.IntervalFormatStyle.hashValue.getter()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  void (*v42)(unsigned char *, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(unsigned char *, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned char v49[144];
  unsigned char v50[8];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  void v68[18];
  unsigned char v69[144];
  unsigned char v70[144];
  unsigned char v71[72];
  _OWORD v72[3];
  __int16 v73;

  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  long long v4 = *(_OWORD *)(v0 + 64);
  v72[0] = *(_OWORD *)(v0 + 48);
  v72[1] = v4;
  v72[2] = *(_OWORD *)(v0 + 80);
  id v73 = *(_WORD *)(v0 + 96);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  if (v6(ObjectType, v1))
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v8(v68, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v50);
  Hasher._combine(_:)(1u);
  if (v50[0] == 2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v50[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  __int16 v10 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
    char v14 = v50;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  int v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v49);
    char v14 = v49;
LABEL_19:
    outlined retain of LocalePreferences(v14);
    if (!v52) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v53) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = v54;
    if (!v54) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v53) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v13 = v54;
  if (!v54)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v13);
  swift_bridgeObjectRelease();
LABEL_23:
  char v15 = v55;
  char v47 = v2;
  uint64_t v48 = v3;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v17 = v56;
  id v16 = v57;
  uint64_t v19 = v58;
  int v18 = v59;
  int v20 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v21 = v16;
    int v22 = v19;
    int v23 = v18;
    uint64_t v24 = v20;
    long long v25 = v17;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    int v26 = v20;
    uint64_t v27 = v16;
    long long v28 = v19;
    long long v29 = v18;
  }
  char v46 = v17;
  if (v16)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unsigned __int32 v30 = v16;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v19)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v31 = v19;
      _CFObject.hash(into:)();

      if (v18) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      if (v20) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  char v32 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    char v33 = v20;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  char v33 = 0;
LABEL_38:

  unsigned __int32 v34 = v61;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v2 = v47;
  uint64_t v3 = v48;
  char v35 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v35);
  swift_bridgeObjectRelease();
  if (!v63) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v36 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v66 == 2)
  {
    char v38 = 0;
  }
  else
  {
    char v38 = v66 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v67 == 2)
  {
    char v39 = 0;
  }
  else
  {
    int v40 = v67 & 1;
    Hasher._combine(_:)(1u);
    char v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  char v41 = swift_getObjectType();
  char v42 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 112);
  swift_unknownObjectRetain();
  v42(v71, v41, v2);
  swift_unknownObjectRelease();
  char v43 = swift_getObjectType();
  char v44 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v44(v71, v43, v3);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v72);
  return Hasher._finalize()();
}

uint64_t Date.IntervalFormatStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.IntervalFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v39 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v28 = a2;
  long long v29 = v30;
  char v39 = 1;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  uint64_t v9 = v29;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = v9;
  long long v27 = v30;
  char v39 = 2;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  uint64_t v10 = v27;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24[1] = v10;
  long long v25 = v30;
  char v39 = 3;
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v12 = v30;
  uint64_t v13 = *((void *)&v30 + 1);
  uint64_t v14 = v32;
  char v15 = v33;
  char v16 = v34;
  __int16 v17 = v36;
  uint64_t v18 = v37;
  __int16 v19 = v38;
  int v20 = v31;
  int v21 = v35;
  int v22 = v28;
  long long v23 = v27;
  *long long v28 = v29;
  v22[1] = v23;
  _OWORD v22[2] = v25;
  *((unsigned char *)v22 + 48) = v12;
  *((void *)v22 + 7) = v13;
  *((_DWORD *)v22 + 16) = v20;
  *((void *)v22 + 9) = v14;
  *((unsigned char *)v22 + 80) = v15;
  *((unsigned char *)v22 + 81) = v16;
  *(_DWORD *)((char *)v22 + 82) = v21;
  *((_WORD *)v22 + 43) = v17;
  *((void *)v22 + 11) = v18;
  *((_WORD *)v22 + 48) = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.IntervalFormatStyle@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.IntervalFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.IntervalFormatStyle(void *a1)
{
  return Date.IntervalFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.IntervalFormatStyle()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v40;
  void (*v41)(unsigned char *, uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(unsigned char *, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  void v66[18];
  unsigned char v67[144];
  unsigned char v68[144];
  unsigned char v69[72];
  _OWORD v70[3];
  __int16 v71;

  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  long long v4 = *(_OWORD *)(v0 + 64);
  v70[0] = *(_OWORD *)(v0 + 48);
  v70[1] = v4;
  v70[2] = *(_OWORD *)(v0 + 80);
  id v71 = *(_WORD *)(v0 + 96);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  if (v6(ObjectType, v1))
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v8(v66, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v68) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)&v48);
  Hasher._combine(_:)(1u);
  if (v48 == 2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v48 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  uint64_t v10 = v49;
  if (!v49)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v48);
    if (!v50) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  int v11 = *(void *)(v10 + 16);
  if (!v11) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v51) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = v52;
    if (!v52) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v51) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v13 = v52;
  if (!v52)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v13);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v14 = v53;
  char v46 = v2;
  char v47 = v3;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  char v16 = v54;
  char v15 = v55;
  uint64_t v18 = v56;
  __int16 v17 = v57;
  __int16 v19 = v58;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v20 = v15;
    int v21 = v18;
    int v22 = v17;
    long long v23 = v19;
    uint64_t v24 = v16;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v25 = v19;
    uint64_t v26 = v15;
    long long v27 = v18;
    long long v28 = v17;
  }
  char v45 = v16;
  if (v15)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    long long v29 = v15;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v18)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      long long v30 = v18;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_31;
      }
LABEL_35:
      Hasher._combine(_:)(0);
      if (v19) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (!v17) {
    goto LABEL_35;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  int v31 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v32 = v19;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  uint64_t v32 = 0;
LABEL_37:

  char v33 = v59;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v2 = v46;
  uint64_t v3 = v47;
  char v34 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    if (v61) {
      goto LABEL_42;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v34);
  swift_bridgeObjectRelease();
  if (!v61) {
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v35 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    __int16 v36 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v64 == 2)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = v64 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v37);
  if (v65 == 2)
  {
    __int16 v38 = 0;
  }
  else
  {
    char v39 = v65 & 1;
    Hasher._combine(_:)(1u);
    __int16 v38 = v39;
  }
  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  int v40 = swift_getObjectType();
  char v41 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 112);
  swift_unknownObjectRetain();
  v41(v69, v40, v2);
  swift_unknownObjectRelease();
  char v42 = swift_getObjectType();
  char v43 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v43(v69, v42, v3);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v70);
  return Hasher._finalize()();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.IntervalFormatStyle@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Date.IntervalFormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.IntervalFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 72);
  char v6 = *(unsigned char *)(v2 + 80);
  char v7 = *(unsigned char *)(v2 + 81);
  __int16 v8 = *(_WORD *)(v2 + 86);
  uint64_t v9 = *(void *)(v2 + 88);
  __int16 v10 = *(_WORD *)(v2 + 96);
  long long v11 = *(_OWORD *)(v2 + 16);
  long long v12 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v5;
  *(unsigned char *)(a2 + 80) = v6;
  *(unsigned char *)(a2 + 81) = v7;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v8;
  *(void *)(a2 + 88) = v9;
  *(_WORD *)(a2 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.year()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  __int16 v3 = *(_WORD *)(v1 + 65);
  char v4 = *(unsigned char *)(v1 + 67);
  uint64_t v5 = *(void *)(v1 + 72);
  char v6 = *(unsigned char *)(v1 + 80);
  char v7 = *(unsigned char *)(v1 + 81);
  __int16 v8 = *(_WORD *)(v1 + 86);
  uint64_t v9 = *(void *)(v1 + 88);
  __int16 v10 = *(_WORD *)(v1 + 96);
  long long v11 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 3;
  *(_WORD *)(a1 + 65) = v3;
  *(unsigned char *)(a1 + 67) = v4;
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 81) = v7;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v8;
  *(void *)(a1 + 88) = v9;
  *(_WORD *)(a1 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.month(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  __int16 v6 = *(_WORD *)(v2 + 64);
  char v7 = *(unsigned char *)(v2 + 67);
  uint64_t v8 = *(void *)(v2 + 72);
  char v9 = *(unsigned char *)(v2 + 80);
  char v10 = *(unsigned char *)(v2 + 81);
  __int16 v11 = *(_WORD *)(v2 + 86);
  uint64_t v12 = *(void *)(v2 + 88);
  __int16 v13 = *(_WORD *)(v2 + 96);
  long long v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(unsigned char *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_WORD *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 66) = v3;
  *(unsigned char *)(a2 + 67) = v7;
  *(void *)(a2 + 72) = v8;
  *(unsigned char *)(a2 + 80) = v9;
  *(unsigned char *)(a2 + 81) = v10;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v11;
  *(void *)(a2 + 88) = v12;
  *(_WORD *)(a2 + 96) = v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.day()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  __int16 v4 = *(_WORD *)(v1 + 86);
  uint64_t v5 = *(void *)(v1 + 88);
  __int16 v6 = *(_WORD *)(v1 + 96);
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v4;
  *(void *)(a1 + 88) = v5;
  *(_WORD *)(a1 + 96) = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.weekday(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 72);
  char v7 = *(unsigned char *)(v2 + 80);
  char v8 = *(unsigned char *)(v2 + 81);
  char v9 = *(unsigned char *)(v2 + 82);
  uint64_t v10 = *(void *)(v2 + 88);
  __int16 v11 = *(_WORD *)(v2 + 96);
  long long v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(unsigned char *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v6;
  *(unsigned char *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 81) = v8;
  *(unsigned char *)(a2 + 82) = v9;
  *(unsigned char *)(a2 + 83) = v3;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(v2 + 84);
  *(void *)(a2 + 88) = v10;
  *(_WORD *)(a2 + 96) = v11;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.hour(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 72);
  char v7 = *(unsigned char *)(v2 + 80);
  char v8 = *(unsigned char *)(v2 + 81);
  __int16 v9 = *(_WORD *)(v2 + 82);
  char v10 = *(unsigned char *)(v2 + 84);
  __int16 v11 = *(_WORD *)(v2 + 86);
  uint64_t v12 = *(void *)(v2 + 88);
  __int16 v13 = *(_WORD *)(v2 + 96);
  long long v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(unsigned char *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v6;
  *(unsigned char *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 81) = v8;
  *(_WORD *)(a2 + 82) = v9;
  *(unsigned char *)(a2 + 84) = v10;
  *(unsigned char *)(a2 + 85) = v3;
  *(_WORD *)(a2 + 86) = v11;
  *(void *)(a2 + 88) = v12;
  *(_WORD *)(a2 + 96) = v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.minute()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 72);
  char v5 = *(unsigned char *)(v1 + 80);
  char v6 = *(unsigned char *)(v1 + 81);
  char v7 = *(unsigned char *)(v1 + 87);
  uint64_t v8 = *(void *)(v1 + 88);
  __int16 v9 = *(_WORD *)(v1 + 96);
  long long v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 81) = v6;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(unsigned char *)(a1 + 86) = 0;
  *(unsigned char *)(a1 + 87) = v7;
  *(void *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = v9;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.second()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 72);
  char v5 = *(unsigned char *)(v1 + 80);
  char v6 = *(unsigned char *)(v1 + 81);
  unsigned __int8 v7 = *(unsigned char *)(v1 + 86);
  uint64_t v8 = *(void *)(v1 + 88);
  __int16 v9 = *(_WORD *)(v1 + 96);
  long long v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 81) = v6;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v7;
  *(void *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = v9;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.timeZone(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(unsigned char *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 72);
  char v7 = *(unsigned char *)(v2 + 80);
  char v8 = *(unsigned char *)(v2 + 81);
  __int16 v9 = *(_WORD *)(v2 + 86);
  uint64_t v10 = *(void *)(v2 + 88);
  char v11 = *(unsigned char *)(v2 + 96);
  long long v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(unsigned char *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v6;
  *(unsigned char *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 81) = v8;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v9;
  *(void *)(a2 + 88) = v10;
  *(unsigned char *)(a2 + 96) = v11;
  *(unsigned char *)(a2 + 97) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

int8x8_t static FormatStyle<>.interval.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v19 = 0;
  char v20 = 1;
  uint64_t v17 = 0;
  char v18 = 1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  char v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v16);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v16;
  uint64_t v5 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *(void *)&long long v16 = v4;
  *((void *)&v16 + 1) = v5;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  char v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)&v15);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static TimeZoneCache.cache + 16;
  __int16 v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v8, (uint64_t *)&v14);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  uint64_t v10 = v14;
  uint64_t v11 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  *(void *)&long long v14 = v10;
  *((void *)&v14 + 1) = v11;
  return Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)((uint64_t)&v19, &v17, &v16, &v15, &v14, a1, v12);
}

uint64_t Range<>.formatted()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v27 = 0;
  char v28 = 1;
  uint64_t v25 = 0;
  char v26 = 1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static LocaleCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, (uint64_t *)v29);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  *(void *)&v12[0] = *(void *)&v29[0];
  *((void *)&v12[0] + 1) = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = static CalendarCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)v29);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v24[0] = v29[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static TimeZoneCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v7, (uint64_t *)v29);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  *(void *)&long long v23 = *(void *)&v29[0];
  *((void *)&v23 + 1) = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)((uint64_t)&v27, &v25, v12, v24, &v23, (uint64_t)v29, v9);
  v12[0] = v29[0];
  v12[1] = v29[1];
  v12[2] = v29[2];
  char v13 = v30;
  uint64_t v14 = v31;
  int v15 = v32;
  uint64_t v16 = v33;
  char v17 = v34;
  char v18 = v35;
  int v19 = v36;
  __int16 v20 = v37;
  uint64_t v21 = v38;
  __int16 v22 = v39;
  *(void *)&v24[0] = v1;
  *((void *)&v24[0] + 1) = v2;
  uint64_t v10 = Date.IntervalFormatStyle.format(_:)((double *)v24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v10;
}

uint64_t Range<>.formatted(date:time:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v30 = *a1;
  char v31 = 0;
  uint64_t v28 = v3;
  char v29 = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, (uint64_t *)v32);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  *(void *)&v15[0] = *(void *)&v32[0];
  *((void *)&v15[0] + 1) = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static CalendarCache.cache + 16;
  int16x8_t v9 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v8, (uint64_t *)v32);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  v27[0] = v32[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static TimeZoneCache.cache + 16;
  uint64_t v11 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v10, (uint64_t *)v32);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  *(void *)&long long v26 = *(void *)&v32[0];
  *((void *)&v26 + 1) = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_3(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
  Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)((uint64_t)&v30, &v28, v15, v27, &v26, (uint64_t)v32, v12);
  v15[0] = v32[0];
  v15[1] = v32[1];
  void v15[2] = v32[2];
  char v16 = v33;
  uint64_t v17 = v34;
  int v18 = v35;
  uint64_t v19 = v36;
  char v20 = v37;
  char v21 = v38;
  int v22 = v39;
  __int16 v23 = v40;
  uint64_t v24 = v41;
  __int16 v25 = v42;
  *(void *)&v27[0] = v4;
  *((void *)&v27[0] + 1) = v5;
  uint64_t v13 = Date.IntervalFormatStyle.format(_:)((double *)v27);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

uint64_t Range<>.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *v3;
  return (*(uint64_t (**)(long long *))(a3 + 48))(&v5);
}

BOOL specialized static Date.IntervalFormatStyle.== infix(_:_:)(long long *a1, long long *a2)
{
  long long v2 = a1[2];
  long long v3 = a1[4];
  long long v4 = a1[5];
  v15[0] = a1[3];
  v15[1] = v3;
  void v15[2] = v4;
  __int16 v16 = *((_WORD *)a1 + 48);
  __int16 v18 = *((_WORD *)a2 + 48);
  long long v5 = a2[5];
  v17[1] = a2[4];
  void v17[2] = v5;
  long long v9 = a2[2];
  long long v10 = v2;
  v17[0] = a2[3];
  long long v6 = *a1;
  long long v11 = a2[1];
  long long v12 = a1[1];
  long long v13 = *a2;
  long long v14 = v6;
  BOOL v7 = (specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0
    && (long long v13 = v11, v14 = v12, (specialized static TimeZone.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0)
    && (long long v13 = v9, v14 = v10, (specialized static Calendar.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0)
    && specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)((unsigned __int8 *)v15, (unsigned __int8 *)v17);
  return v7;
}

unint64_t lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.IntervalFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  a1[3] = result;
  return result;
}

uint64_t destroy for Date.IntervalFormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.IntervalFormatStyle(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v5 = a2[3];
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = a2[4];
  long long v7 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.IntervalFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  uint64_t v8 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  *(unsigned char *)(a1 + 87) = *(unsigned char *)(a2 + 87);
  uint64_t v9 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  return a1;
}

__n128 __swift_memcpy98_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Date.IntervalFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(a2 + 82);
  *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 86);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.IntervalFormatStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 98)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.IntervalFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 98) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 98) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.IntervalFormatStyle()
{
  return &type metadata for Date.IntervalFormatStyle;
}

unsigned char *storeEnumTagSinglePayload for Date.IntervalFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CBE508);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.IntervalFormatStyle.CodingKeys()
{
  return &unk_1ECA48180;
}

uint64_t specialized Date.IntervalFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736C6F626D7973 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x696C61636F4C7369;
    }
    else {
      uint64_t v3 = 0x726564726FLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEB0000000064657ALL;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x696C61636F4C7369;
      }
      else {
        uint64_t v6 = 0x726564726FLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEB0000000064657ALL;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x736E6F6974706FLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x736E6F6974706FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x656C61636F6CLL;
    }
    else {
      uint64_t v3 = 0x726564726FLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x656C61636F6CLL;
      }
      else {
        uint64_t v6 = 0x726564726FLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x736E6F6974706FLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x736E6F6974706FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1195853639;
    }
    else {
      uint64_t v3 = 0x4747474747;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1195853639;
      }
      else {
        uint64_t v6 = 0x4747474747;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE100000000000000;
    uint64_t v3 = 71;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE100000000000000;
  if (v3 != 71)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1431655765;
    }
    else {
      uint64_t v3 = 0x5555555555;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1431655765;
      }
      else {
        uint64_t v6 = 0x5555555555;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE100000000000000;
    uint64_t v3 = 85;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE100000000000000;
  if (v3 != 85)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 30583;
    }
    else {
      uint64_t v3 = 87;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE200000000000000;
    }
    else {
      unint64_t v4 = 0xE100000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 30583;
      }
      else {
        uint64_t v6 = 87;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE200000000000000;
      }
      else {
        unint64_t v7 = 0xE100000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE100000000000000;
    uint64_t v3 = 119;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE100000000000000;
  if (v3 != 119)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 17476;
    }
    else {
      uint64_t v3 = 4473924;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE200000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 17476;
      }
      else {
        uint64_t v6 = 4473924;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE200000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE100000000000000;
    uint64_t v3 = 68;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE100000000000000;
  if (v3 != 68)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC0000006E6F6974;
  uint64_t v3 = 0x61746E6573657270;
  uint64_t v4 = a1;
  unint64_t v5 = 0x61746E6573657270;
  unint64_t v6 = 0xEC0000006E6F6974;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x7974537374696E75;
      unint64_t v6 = 0xEA0000000000656CLL;
      break;
    case 2:
      unint64_t v6 = 0x80000001823A8D30;
      unint64_t v5 = 0xD000000000000015;
      break;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      unint64_t v5 = 0x656C61636F6CLL;
      break;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x7261646E656C6163;
      break;
    case 5:
      unint64_t v5 = 0x466465776F6C6C61;
      unint64_t v6 = 0xED000073646C6569;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEA0000000000656CLL;
      if (v5 == 0x7974537374696E75) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v2 = 0x80000001823A8D30;
      if (v5 != 0xD000000000000015) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x656C61636F6CLL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x7261646E656C6163;
      goto LABEL_15;
    case 5:
      unint64_t v2 = 0xED000073646C6569;
      if (v5 != 0x466465776F6C6C61) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v3) {
        goto LABEL_19;
      }
LABEL_16:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned int v7;
  unint64_t v8;
  const char *v9;
  unsigned int v10;
  char v11;

  unint64_t v2 = 0xD000000000000011;
  uint64_t v3 = 0x80000001823A8C80;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      uint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x656E6F5A656D6974;
      break;
    case 2:
      uint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x73646C656966;
      break;
    case 3:
      unint64_t v6 = "dateTimeSeparator";
      goto LABEL_6;
    case 4:
      unint64_t v5 = 0xD00000000000001ALL;
      unint64_t v6 = "includingFractionalSeconds";
LABEL_6:
      uint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 5:
      char v7 = 1702125924;
      goto LABEL_9;
    case 6:
      char v7 = 1701669236;
LABEL_9:
      unint64_t v5 = v7 | 0x6170655300000000;
      uint64_t v3 = 0xED0000726F746172;
      break;
    default:
      break;
  }
  char v8 = 0x80000001823A8C80;
  switch(a2)
  {
    case 1:
      char v8 = 0xE800000000000000;
      if (v5 == 0x656E6F5A656D6974) {
        goto LABEL_23;
      }
      goto LABEL_25;
    case 2:
      char v8 = 0xE600000000000000;
      if (v5 != 0x73646C656966) {
        goto LABEL_25;
      }
      goto LABEL_23;
    case 3:
      uint64_t v9 = "dateTimeSeparator";
      goto LABEL_17;
    case 4:
      unint64_t v2 = 0xD00000000000001ALL;
      uint64_t v9 = "includingFractionalSeconds";
LABEL_17:
      char v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      goto LABEL_18;
    case 5:
      long long v10 = 1702125924;
      goto LABEL_22;
    case 6:
      long long v10 = 1701669236;
LABEL_22:
      char v8 = 0xED0000726F746172;
      if (v5 == (v10 | 0x6170655300000000)) {
        goto LABEL_23;
      }
      goto LABEL_25;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_23:
      if (v3 == v8) {
        long long v11 = 1;
      }
      else {
LABEL_25:
      }
        long long v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 4539717;
  uint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 4539717;
  switch(v4)
  {
    case 1:
      uint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1162167621;
      break;
    case 2:
      uint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x4545454545;
      break;
    case 3:
      uint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x454545454545;
      break;
    case 4:
      uint64_t v3 = 0xE100000000000000;
      unint64_t v5 = 101;
      break;
    case 5:
      uint64_t v3 = 0xE200000000000000;
      unint64_t v5 = 25957;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1162167621) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x4545454545) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x454545454545) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE100000000000000;
      unint64_t v2 = 101;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE200000000000000;
      if (v5 != 25957) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  unint64_t v2 = 0xE900000000000065;
  uint64_t v3 = 0x6D614E6E65766967;
  uint64_t v4 = 0xE900000000000065;
  unint64_t v5 = a1;
  unint64_t v6 = 0x6D614E6E65766967;
  switch(v5)
  {
    case 1:
      char v7 = 0x796C696D6166;
      goto LABEL_4;
    case 2:
      char v7 = 0x656C6464696DLL;
LABEL_4:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0x614E000000000000;
      uint64_t v4 = 0xEA0000000000656DLL;
      break;
    case 3:
      unint64_t v6 = 0x66657250656D616ELL;
      goto LABEL_7;
    case 4:
      unint64_t v6 = 0x66667553656D616ELL;
LABEL_7:
      uint64_t v4 = 0xEA00000000007869;
      break;
    case 5:
      uint64_t v4 = 0xE800000000000000;
      unint64_t v6 = 0x656D616E6B63696ELL;
      break;
    case 6:
      unint64_t v6 = 0x6574696D696C6564;
      uint64_t v4 = 0xE900000000000072;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      char v8 = 0x796C696D6166;
      goto LABEL_13;
    case 2:
      char v8 = 0x656C6464696DLL;
LABEL_13:
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFLL | 0x614E000000000000;
      long long v10 = 25965;
      goto LABEL_17;
    case 3:
      uint64_t v9 = 0x66657250656D616ELL;
      goto LABEL_16;
    case 4:
      uint64_t v9 = 0x66667553656D616ELL;
LABEL_16:
      long long v10 = 30825;
LABEL_17:
      unint64_t v2 = v10 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000;
      if (v6 != v9) {
        goto LABEL_24;
      }
      goto LABEL_21;
    case 5:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x656D616E6B63696ELL;
      goto LABEL_20;
    case 6:
      unint64_t v2 = 0xE900000000000072;
      if (v6 != 0x6574696D696C6564) {
        goto LABEL_24;
      }
      goto LABEL_21;
    default:
LABEL_20:
      if (v6 != v3) {
        goto LABEL_24;
      }
LABEL_21:
      if (v4 == v2) {
        long long v11 = 1;
      }
      else {
LABEL_24:
      }
        long long v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
  }
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0xED00007373657264;
  uint64_t v3 = 0x6441664F6D726574;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6441664F6D726574;
  unint64_t v6 = 0xED00007373657264;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x65676175676E616CLL;
      break;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x736E756F6E6F7270;
      break;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v5 = 1919251317;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      if (v5 == 0x65676175676E616CLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x736E756F6E6F7270;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1919251317) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  unint64_t v2 = 0xD000000000000011;
  uint64_t v3 = 0x80000001823A8A10;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6974616D6D617267;
      uint64_t v3 = 0xEF657361436C6163;
      break;
    case 2:
      unint64_t v5 = 0x7053664F74726170;
      unint64_t v6 = 1751344485;
      goto LABEL_10;
    case 3:
      uint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x7265626D756ELL;
      break;
    case 4:
      unint64_t v5 = 0x72506D6F74737563;
      uint64_t v3 = 0xEE00736E756F6E6FLL;
      break;
    case 5:
      uint64_t v3 = 0x80000001823A8A60;
      break;
    case 6:
      unint64_t v5 = 0x546E756F6E6F7270;
      uint64_t v3 = 0xEB00000000657079;
      break;
    case 7:
      unint64_t v5 = 0x6E696D7265746564;
      uint64_t v3 = 0xED00006E6F697461;
      break;
    case 8:
      unint64_t v5 = 0x6574696E69666564;
      unint64_t v6 = 1936942446;
LABEL_10:
      uint64_t v3 = v6 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  char v7 = 0x80000001823A8A10;
  switch(a2)
  {
    case 1:
      char v7 = 0xEF657361436C6163;
      if (v5 == 0x6974616D6D617267) {
        goto LABEL_25;
      }
      goto LABEL_29;
    case 2:
      char v8 = 0x7053664F74726170;
      uint64_t v9 = 1751344485;
      goto LABEL_28;
    case 3:
      char v7 = 0xE600000000000000;
      if (v5 != 0x7265626D756ELL) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 4:
      char v7 = 0xEE00736E756F6E6FLL;
      if (v5 != 0x72506D6F74737563) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 5:
      char v7 = 0x80000001823A8A60;
      if (v5 != 0xD000000000000011) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 6:
      char v7 = 0xEB00000000657079;
      if (v5 != 0x546E756F6E6F7270) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 7:
      unint64_t v2 = 0x6E696D7265746564;
      char v7 = 0xED00006E6F697461;
      goto LABEL_24;
    case 8:
      char v8 = 0x6574696E69666564;
      uint64_t v9 = 1936942446;
LABEL_28:
      char v7 = v9 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      if (v5 != v8) {
        goto LABEL_29;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_29;
      }
LABEL_25:
      if (v3 == v7) {
        long long v10 = 1;
      }
      else {
LABEL_29:
      }
        long long v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

void Calendar.RecurrenceRule.End.date.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  BOOL v3 = *((unsigned char *)v1 + 8) != 0;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = 0;
  }
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
}

uint64_t Calendar.RecurrenceRule.End.occurrences.getter()
{
  if (v0[8] == 1) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t Calendar.RecurrenceRule.Month.init(_:isLeap:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = a2;
  return result;
}

uint64_t Calendar.RecurrenceRule.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Calendar.RecurrenceRule.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Calendar.RecurrenceRule.matchingPolicy.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *Calendar.RecurrenceRule.matchingPolicy.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.matchingPolicy.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Calendar.RecurrenceRule.repeatedTimePolicy.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

unsigned char *Calendar.RecurrenceRule.repeatedTimePolicy.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 17) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.repeatedTimePolicy.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Calendar.RecurrenceRule.Frequency.init(rawValue:)@<X0>(unint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = 0x5040302010006uLL >> (8 * result);
  if (result >= 7) {
    LOBYTE(v2) = 6;
  }
  *a2 = v2;
  return result;
}

uint64_t Calendar.RecurrenceRule.Frequency.rawValue.getter()
{
  return *v0 + 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Frequency@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return Calendar.RecurrenceRule.Frequency.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Frequency()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Frequency()
{
  return RawRepresentable<>.encode(to:)();
}

void Calendar.RecurrenceRule.frequency.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 18);
}

unsigned char *Calendar.RecurrenceRule.frequency.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 18) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.frequency.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.interval.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Calendar.RecurrenceRule.interval.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.interval.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End._End(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v4 == 1) {
      return *(void *)&v2 == *(void *)&v3;
    }
    return 0;
  }
  return v4 == 2 && *(void *)&v3 == 0;
}

uint64_t static Calendar.RecurrenceRule.End.afterOccurrences(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

void *static Calendar.RecurrenceRule.End.afterDate(_:)@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void static Calendar.RecurrenceRule.End.never.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
}

BOOL static Calendar.RecurrenceRule.End.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0;
  }
  return v4 == 1 && *(void *)&v2 == *(void *)&v3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0;
  }
  return v4 == 1 && *(void *)&v2 == *(void *)&v3;
}

void Calendar.RecurrenceRule.end.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t Calendar.RecurrenceRule.end.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 32) = *(void *)result;
  *(unsigned char *)(v1 + 40) = v2;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.end.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t static Calendar.RecurrenceRule.Weekday.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((char *)a1 + 8);
  uint64_t v6 = *a2;
  int v7 = *((char *)a2 + 8);
  if (v5 < 0)
  {
    if (v7 < 0 && v4 == v6) {
      return specialized == infix<A>(_:_:)(v5 & 0x7F, v7 & 0x7F);
    }
    return 0;
  }
  if (v7 < 0) {
    return 0;
  }
  return specialized == infix<A>(_:_:)(v4, v6);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Weekday(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((char *)a1 + 8);
  uint64_t v6 = *a2;
  int v7 = *((char *)a2 + 8);
  if (v5 < 0)
  {
    if (v7 < 0 && v4 == v6) {
      return specialized == infix<A>(_:_:)(v5 & 0x7F, v7 & 0x7F);
    }
    return 0;
  }
  if (v7 < 0) {
    return 0;
  }
  return specialized == infix<A>(_:_:)(v4, v6);
}

uint64_t Calendar.RecurrenceRule.Month.index.getter()
{
  return *(void *)v0;
}

uint64_t Calendar.RecurrenceRule.Month.index.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.Month.index.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.Month.isLeap.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Calendar.RecurrenceRule.Month.isLeap.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.Month.isLeap.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.Month.init(integerLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t static Calendar.RecurrenceRule.Month.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Month(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t Calendar.RecurrenceRule.seconds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.seconds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.seconds.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.minutes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.minutes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.minutes.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.hours.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.hours.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.hours.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.weekdays.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.weekdays.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.weekdays.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.daysOfTheMonth.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.daysOfTheMonth.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.daysOfTheMonth.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.daysOfTheYear.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.daysOfTheYear.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.daysOfTheYear.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.months.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.months.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.months.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.weeks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.weeks.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.weeks.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.setPositions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.setPositions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.setPositions.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Calendar.RecurrenceRule.init(calendar:frequency:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weeks:weekdays:hours:minutes:seconds:setPositions:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16)
{
  unsigned __int8 v16 = *a2;
  unint64_t v17 = *(void *)a4;
  unsigned __int8 v18 = *(unsigned char *)(a4 + 8);
  unsigned __int8 v19 = *a5;
  unsigned __int8 v20 = *a6;
  __n128 result = *a1;
  *a9 = *a1;
  a9[1].n128_u8[0] = v19;
  a9[1].n128_u8[1] = v20;
  a9[1].n128_u8[2] = v16;
  a9[1].n128_u64[1] = a3;
  a9[2].n128_u64[0] = v17;
  a9[2].n128_u8[8] = v18;
  a9[3].n128_u64[0] = a15;
  a9[3].n128_u64[1] = a14;
  a9[4].n128_u64[0] = a13;
  a9[4].n128_u64[1] = a12;
  a9[5].n128_u64[0] = a10;
  a9[5].n128_u64[1] = a8;
  a9[6].n128_u64[0] = a7;
  a9[6].n128_u64[1] = a11;
  a9[7].n128_u64[0] = a16;
  return result;
}

uint64_t Calendar.RecurrenceRule.recurrences(of:in:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *(unsigned char *)(v3 + 16);
  char v5 = *(unsigned char *)(v3 + 17);
  char v6 = *(unsigned char *)(v3 + 18);
  char v7 = *(unsigned char *)(v3 + 40);
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v9 = *(void *)(v3 + 56);
  uint64_t v10 = *(void *)(v3 + 64);
  uint64_t v11 = *(void *)(v3 + 72);
  uint64_t v12 = *(void *)(v3 + 80);
  uint64_t v13 = *(void *)(v3 + 88);
  uint64_t v15 = *(void *)(v3 + 96);
  uint64_t v14 = *(void *)(v3 + 104);
  uint64_t v16 = *(void *)(v3 + 112);
  char v18 = *(unsigned char *)(a2 + 16);
  *(void *)a3 = *a1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v3;
  *(unsigned char *)(a3 + 24) = v4;
  *(unsigned char *)(a3 + 25) = v5;
  *(unsigned char *)(a3 + 26) = v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 24);
  *(unsigned char *)(a3 + 48) = v7;
  *(void *)(a3 + 56) = v8;
  *(void *)(a3 + 64) = v9;
  *(void *)(a3 + 72) = v10;
  *(void *)(a3 + 80) = v11;
  *(void *)(a3 + 88) = v12;
  *(void *)(a3 + 96) = v13;
  *(void *)(a3 + 104) = v15;
  *(void *)(a3 + 112) = v14;
  *(void *)(a3 + 120) = v16;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)a2;
  *(unsigned char *)(a3 + 144) = v18;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.minutely(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a3;
  char v15 = *((unsigned char *)a3 + 8);
  char v16 = *a4;
  unsigned __int8 v17 = *a5;
  *(_OWORD *)a9 = *a1;
  *(unsigned char *)(a9 + 16) = v16;
  *(_WORD *)(a9 + 17) = v17;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v14;
  *(unsigned char *)(a9 + 40) = v15;
  *(void *)(a9 + 48) = a13;
  *(void *)(a9 + 56) = a12;
  *(void *)(a9 + 64) = a11;
  *(void *)(a9 + 72) = a10;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a7;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v18;
  *(void *)(a9 + 112) = a14;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.hourly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a3;
  char v15 = *((unsigned char *)a3 + 8);
  char v16 = *a4;
  char v17 = *a5;
  *(_OWORD *)a9 = *a1;
  *(unsigned char *)(a9 + 16) = v16;
  *(unsigned char *)(a9 + 17) = v17;
  *(unsigned char *)(a9 + 18) = 1;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v14;
  *(unsigned char *)(a9 + 40) = v15;
  *(void *)(a9 + 48) = a13;
  *(void *)(a9 + 56) = a12;
  *(void *)(a9 + 64) = a11;
  *(void *)(a9 + 72) = a10;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a7;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v18;
  *(void *)(a9 + 112) = a14;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.daily(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = *a3;
  char v14 = *((unsigned char *)a3 + 8);
  char v15 = *a4;
  char v16 = *a5;
  *(_OWORD *)a9 = *a1;
  *(unsigned char *)(a9 + 16) = v15;
  *(unsigned char *)(a9 + 17) = v16;
  *(unsigned char *)(a9 + 18) = 2;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v13;
  *(unsigned char *)(a9 + 40) = v14;
  *(void *)(a9 + 48) = a12;
  *(void *)(a9 + 56) = a11;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a8;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 88) = v17;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v17;
  *(void *)(a9 + 112) = a13;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.weekly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = *a3;
  char v13 = *((unsigned char *)a3 + 8);
  char v14 = *a4;
  char v15 = *a5;
  *(_OWORD *)a9 = *a1;
  *(unsigned char *)(a9 + 16) = v14;
  *(unsigned char *)(a9 + 17) = v15;
  *(unsigned char *)(a9 + 18) = 3;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v12;
  *(unsigned char *)(a9 + 40) = v13;
  *(void *)(a9 + 48) = a11;
  *(void *)(a9 + 56) = a10;
  *(void *)(a9 + 64) = a8;
  *(void *)(a9 + 72) = a7;
  uint64_t v16 = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 80) = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 88) = v16;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v16;
  *(void *)(a9 + 112) = a12;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.monthly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = *a3;
  char v14 = *((unsigned char *)a3 + 8);
  char v15 = *a4;
  char v16 = *a5;
  *(_OWORD *)a9 = *a1;
  *(unsigned char *)(a9 + 16) = v15;
  *(unsigned char *)(a9 + 17) = v16;
  *(unsigned char *)(a9 + 18) = 4;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v13;
  *(unsigned char *)(a9 + 40) = v14;
  *(void *)(a9 + 48) = a12;
  *(void *)(a9 + 56) = a11;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a8;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 88) = v17;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v17;
  *(void *)(a9 + 112) = a13;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.yearly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weeks:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15 = *a3;
  char v16 = *((unsigned char *)a3 + 8);
  char v17 = *a4;
  char v18 = *a5;
  *(_OWORD *)a9 = *a1;
  *(unsigned char *)(a9 + 16) = v17;
  *(unsigned char *)(a9 + 17) = v18;
  *(unsigned char *)(a9 + 18) = 5;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v15;
  *(unsigned char *)(a9 + 40) = v16;
  *(void *)(a9 + 48) = a14;
  *(void *)(a9 + 56) = a13;
  *(void *)(a9 + 64) = a12;
  *(void *)(a9 + 72) = a11;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a7;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = a10;
  *(void *)(a9 + 112) = a15;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.End.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E756F63;
  if (*v1) {
    uint64_t v2 = 0x6C69746E75;
  }
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  if (*v0) {
    return 0x6C69746E75;
  }
  else {
    return 0x746E756F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.End.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.End.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.End.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Calendar.RecurrenceRule.End.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.End.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v17 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (v15)
    {
      char v16 = 0;
      uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v11 = v10;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (v11)
      {
        uint64_t v9 = 0;
        char v12 = 2;
      }
      else
      {
        char v12 = 1;
      }
    }
    else
    {
      uint64_t v9 = v14;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      char v12 = 0;
    }
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 8) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.End.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.End.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  int v8 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8)
  {
    if (v8 == 1)
    {
      char v12 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
  }
  else
  {
    v10[1] = v7;
    char v11 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.End@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.End.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.End(void *a1)
{
  return Calendar.RecurrenceRule.End.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Weekday.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 110;
  if (!*v1) {
    uint64_t v2 = 0x7961646B656577;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE100000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  if (*v0) {
    return 110;
  }
  else {
    return 0x7961646B656577;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Weekday.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Calendar.RecurrenceRule.Weekday.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.Weekday.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v18 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v19;
    char v17 = 1;
    uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = v9 | 0x80;
    if (v13) {
      uint64_t v15 = v9;
    }
    else {
      uint64_t v15 = v11;
    }
    if (v13) {
      char v14 = 0;
    }
    *(void *)a2 = v15;
    *(unsigned char *)(a2 + 8) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.Weekday.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.Weekday.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  int v8 = *((char *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 < 0)
  {
    char v15 = 1;
    uint64_t v9 = v3;
    uint64_t v10 = v12[1];
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v10) {
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v9);
    }
    char v14 = v8 & 0x7F;
    char v13 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  }
  else
  {
    char v17 = v7;
    char v16 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
    uint64_t v9 = v3;
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Weekday@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.Weekday.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Weekday(void *a1)
{
  return Calendar.RecurrenceRule.Weekday.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Month.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Month.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Month.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1885431148;
  if (!*v1) {
    uint64_t v2 = 0x68746E6F6DLL;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  if (*v0) {
    return 1885431148;
  }
  else {
    return 0x68746E6F6DLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.Month.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Month.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  unint64_t object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._unint64_t object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Calendar.RecurrenceRule.Month.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.Month.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v13[0]) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v13[0]) = 1;
    char v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    uint64_t v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    char v10 = 0;
  }
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10 & 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.Month.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.Month.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    v10[0] = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v2)
    {
      v10[0] = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

unint64_t Calendar.RecurrenceRule.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x7261646E656C6163;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x636E657571657266;
      break;
    case 2:
      unint64_t result = 0x6C61767265746E69;
      break;
    case 3:
      unint64_t result = 6581861;
      break;
    case 4:
      unint64_t result = 0x676E69686374616DLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x7368746E6F6DLL;
      break;
    case 7:
    case 8:
      unint64_t result = 0x6854664F73796164;
      break;
    case 9:
      unint64_t result = 0x736B656577;
      break;
    case 10:
      unint64_t result = 0x737961646B656577;
      break;
    case 11:
      unint64_t result = 0x7372756F68;
      break;
    case 12:
      unint64_t result = 0x736574756E696DLL;
      break;
    case 13:
      unint64_t result = 0x73646E6F636573;
      break;
    case 14:
      unint64_t result = 0x7469736F50746573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t Calendar.RecurrenceRule.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x7261646E656C6163;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x636E657571657266;
      break;
    case 2:
      unint64_t result = 0x6C61767265746E69;
      break;
    case 3:
      unint64_t result = 6581861;
      break;
    case 4:
      unint64_t result = 0x676E69686374616DLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x7368746E6F6DLL;
      break;
    case 7:
    case 8:
      unint64_t result = 0x6854664F73796164;
      break;
    case 9:
      unint64_t result = 0x736B656577;
      break;
    case 10:
      unint64_t result = 0x737961646B656577;
      break;
    case 11:
      unint64_t result = 0x7372756F68;
      break;
    case 12:
      unint64_t result = 0x736574756E696DLL;
      break;
    case 13:
      unint64_t result = 0x73646E6F636573;
      break;
    case 14:
      unint64_t result = 0x7469736F50746573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Month@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.Month.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Month(void *a1)
{
  return Calendar.RecurrenceRule.Month.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.CodingKeys()
{
  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  return Calendar.RecurrenceRule.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Calendar.RecurrenceRule.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Calendar.RecurrenceRule.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v45 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v42 = v43;
  char v45 = 1;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v10 = v43;
  LOBYTE(v43) = 2;
  uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
  char v45 = 3;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v40 = v43;
  int v44 = BYTE8(v43);
  char v45 = 4;
  lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v39 = v43;
  char v45 = 5;
  lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v37 = v43;
  int v38 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month]);
  char v45 = 6;
  lazy protocol witness table accessor for type [Calendar.RecurrenceRule.Month] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Month] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month], (void (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v43;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  char v45 = 7;
  uint64_t v13 = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
  uint64_t v36 = v11;
  swift_bridgeObjectRetain();
  uint64_t v35 = v13;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v12;
  uint64_t v15 = v43;
  char v45 = 8;
  swift_bridgeObjectRetain();
  uint64_t v34 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v31 = a2;
  uint64_t v16 = v43;
  char v45 = 9;
  swift_bridgeObjectRetain();
  int v32 = v8;
  uint64_t v33 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday]);
  char v45 = 10;
  lazy protocol witness table accessor for type [Calendar.RecurrenceRule.Month] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Weekday] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday], (void (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v45 = 13;
  uint64_t v18 = v43;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v45 = 12;
  uint64_t v30 = v43;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v29 = 0;
  char v45 = 11;
  uint64_t v28 = v43;
  swift_bridgeObjectRetain();
  uint64_t v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v33);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if (!v29) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v45 = 14;
    uint64_t v27 = v43;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v33);
    uint64_t v35 = v43;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v26 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v36;
    swift_bridgeObjectRelease();
    __int16 v23 = v31;
    *char v31 = v42;
    *((unsigned char *)v23 + 16) = v39;
    *((unsigned char *)v23 + 17) = v37;
    *((unsigned char *)v23 + 18) = v38;
    uint64_t v24 = v40;
    *((void *)v23 + 3) = v41;
    *((void *)v23 + 4) = v24;
    *((unsigned char *)v23 + 40) = v44;
    *((void *)v23 + 6) = v30;
    *((void *)v23 + 7) = v20;
    *((void *)v23 + 8) = v27;
    *((void *)v23 + 9) = v21;
    *((void *)v23 + 10) = v16;
    *((void *)v23 + 11) = v15;
    *((void *)v23 + 12) = v22;
    *((void *)v23 + 13) = v17;
    *((void *)v23 + 14) = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
}

uint64_t Calendar.RecurrenceRule.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *((unsigned __int8 *)v3 + 16);
  int v30 = *((unsigned __int8 *)v3 + 17);
  int v31 = v9;
  LODWORD(v34) = *((unsigned __int8 *)v3 + 18);
  uint64_t v10 = *((void *)v3 + 3);
  uint64_t v32 = *((void *)v3 + 4);
  uint64_t v33 = v10;
  int v36 = *((unsigned __int8 *)v3 + 40);
  uint64_t v11 = *((void *)v3 + 7);
  uint64_t v22 = *((void *)v3 + 6);
  uint64_t v23 = v11;
  uint64_t v12 = *((void *)v3 + 9);
  uint64_t v24 = *((void *)v3 + 8);
  uint64_t v25 = v12;
  uint64_t v13 = *((void *)v3 + 11);
  uint64_t v27 = *((void *)v3 + 10);
  uint64_t v28 = v13;
  uint64_t v29 = *((void *)v3 + 12);
  uint64_t v14 = *((void *)v3 + 14);
  uint64_t v26 = *((void *)v3 + 13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v15 = *v3;
  uint64_t v16 = v5;
  long long v35 = v15;
  char v37 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v17 = v32;
  char v18 = v36;
  LOBYTE(v35) = (_BYTE)v34;
  char v37 = 1;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = 2;
  uint64_t v34 = v8;
  KeyedEncodingContainer.encode(_:forKey:)();
  *(void *)&long long v35 = v17;
  BYTE8(v35) = v18;
  char v37 = 3;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = v31;
  char v37 = 4;
  lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = v30;
  char v37 = 5;
  lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v29;
  char v37 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month]);
  lazy protocol witness table accessor for type [Calendar.RecurrenceRule.Month] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Month] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month], (void (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v28;
  char v37 = 7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
  uint64_t v33 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v27;
  char v37 = 8;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v26;
  char v37 = 9;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v25;
  char v37 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday]);
  lazy protocol witness table accessor for type [Calendar.RecurrenceRule.Month] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Weekday] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday], (void (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v24;
  char v37 = 11;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v23;
  char v37 = 12;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v22;
  char v37 = 13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = v14;
  char v37 = 14;
  uint64_t v20 = v33;
  uint64_t v19 = v34;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v19, v20);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Calendar.RecurrenceRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule(void *a1)
{
  return Calendar.RecurrenceRule.encode(to:)(a1);
}

uint64_t Calendar.RecurrenceRule.End.description.getter()
{
  if (!*(unsigned char *)(v0 + 8))
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *(double *)v0);
    id v4 = objc_msgSend(v3, sel_description);

    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    v8._uint64_t countAndFlagsBits = (uint64_t)v5;
    v8._unint64_t object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return 0x207265746641;
  }
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = 0x6572727563636F20;
    v2._unint64_t object = (void *)0xEE0029732865636ELL;
    String.append(_:)(v2);
    return 0x207265746641;
  }
  return 0x726576654ELL;
}

BOOL specialized static Calendar.RecurrenceRule.== infix(_:_:)(long long *a1, long long *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  int v3 = *((unsigned __int8 *)a1 + 17);
  int v4 = *((unsigned __int8 *)a1 + 18);
  uint64_t v5 = *((void *)a1 + 3);
  int v6 = *((unsigned __int8 *)a1 + 40);
  int v31 = (void *)*((void *)a1 + 6);
  double v32 = *((double *)a1 + 4);
  uint64_t v29 = (void *)*((void *)a1 + 7);
  uint64_t v27 = (void *)*((void *)a1 + 8);
  uint64_t v25 = *((void *)a1 + 9);
  uint64_t v23 = (void *)*((void *)a1 + 10);
  uint64_t v21 = (void *)*((void *)a1 + 11);
  uint64_t v19 = *((void *)a1 + 12);
  uint64_t v17 = (void *)*((void *)a1 + 13);
  long long v15 = (void *)*((void *)a1 + 14);
  int v7 = *((unsigned __int8 *)a2 + 16);
  int v8 = *((unsigned __int8 *)a2 + 17);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = *((void *)a2 + 3);
  double v33 = *((double *)a2 + 4);
  int v11 = *((unsigned __int8 *)a2 + 40);
  int v30 = (void *)*((void *)a2 + 6);
  uint64_t v28 = (void *)*((void *)a2 + 7);
  uint64_t v26 = (void *)*((void *)a2 + 8);
  uint64_t v24 = *((void *)a2 + 9);
  uint64_t v22 = (void *)*((void *)a2 + 10);
  uint64_t v20 = (void *)*((void *)a2 + 11);
  long long v12 = *a1;
  uint64_t v18 = *((void *)a2 + 12);
  uint64_t v16 = (void *)*((void *)a2 + 13);
  uint64_t v14 = (void *)*((void *)a2 + 14);
  long long v34 = *a2;
  long long v35 = v12;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v35, (uint64_t)&v34) & 1) == 0
    || v2 != v7
    || ((v3 ^ v8) & 1) != 0
    || v4 != v9
    || v5 != v10)
  {
    return 0;
  }
  if (v6)
  {
    if (v6 == 1)
    {
      if (v11 != 1 || *(void *)&v32 != *(void *)&v33) {
        return 0;
      }
    }
    else if (v11 != 2 || v33 != 0.0)
    {
      return 0;
    }
  }
  else if (v11 || v32 != v33)
  {
    return 0;
  }
  if (!specialized static Array<A>.== infix(_:_:)(v31, v30)
    || !specialized static Array<A>.== infix(_:_:)(v29, v28)
    || !specialized static Array<A>.== infix(_:_:)(v27, v26)
    || (specialized static Array<A>.== infix(_:_:)(v25, v24) & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)(v23, v22)
    || !specialized static Array<A>.== infix(_:_:)(v21, v20)
    || (specialized static Array<A>.== infix(_:_:)(v19, v18) & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)(v17, v16))
  {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v15, v14);
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Calendar.RecurrenceRule.Month] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for Calendar.RecurrenceRule()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule()
{
  return &type metadata for Calendar.RecurrenceRule;
}

unsigned char *storeEnumTagSinglePayload for Calendar.RecurrenceRule.Frequency(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CC57B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Frequency()
{
  return &type metadata for Calendar.RecurrenceRule.Frequency;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.End()
{
  return &type metadata for Calendar.RecurrenceRule.End;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.Weekday(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1F && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 31);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 2) & 0x1E | (*(unsigned __int8 *)(a1 + 8) >> 7)) ^ 0x1F;
  if (v3 >= 0x1E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Weekday(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1E)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 31;
    if (a3 >= 0x1F) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1F) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(unsigned char *)(result + 8) = 8 * (((-a2 >> 1) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for Calendar.RecurrenceRule.Weekday(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 7;
}

uint64_t destructiveProjectEnumData for Calendar.RecurrenceRule.Weekday(uint64_t result)
{
  *(unsigned char *)(result + 8) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for Calendar.RecurrenceRule.Weekday(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = *(unsigned char *)(result + 8) & 7 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Weekday()
{
  return &type metadata for Calendar.RecurrenceRule.Weekday;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.Month(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Month(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Month()
{
  return &type metadata for Calendar.RecurrenceRule.Month;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.End(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.End(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Calendar.RecurrenceRule.End._End(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for Calendar.RecurrenceRule.End._End(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for Calendar.RecurrenceRule.End._End()
{
  return &unk_1ECA2F6D8;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Calendar.RecurrenceRule.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CC5C18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.CodingKeys;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Month.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.Month.CodingKeys;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Calendar.RecurrenceRule.Month.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181CC5D40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.End.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.End.CodingKeys;
}

unint64_t specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Calendar.RecurrenceRule.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return 15;
  }
  else {
    return v3;
  }
}

uint64_t static DecodingError._typeMismatch(at:expectation:reality:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x756F662074756220;
  v7._unint64_t object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = specialized static DecodingError._typeDescription(of:)(a2);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x64616574736E6920;
  v9._unint64_t object = (void *)0xE90000000000002ELL;
  String.append(_:)(v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a3 = a1;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v10 = *MEMORY[0x1E4FBBA70];
  uint64_t v11 = type metadata accessor for DecodingError();
  long long v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104);

  return v12(a3, v10, v11);
}

uint64_t protocol witness for TopLevelEncoder.encode<A>(_:) in conformance JSONEncoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 272))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t protocol witness for TopLevelEncoder.encode<A>(_:) in conformance PropertyListEncoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t protocol witness for TopLevelDecoder.decode<A>(_:from:) in conformance JSONDecoder(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(**(void **)v4 + 320))(a1, *a2, a2[1], a3, a4);
}

uint64_t protocol witness for TopLevelDecoder.decode<A>(_:from:) in conformance PropertyListDecoder(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(**(void **)v4 + 152))(a1, *a2, a2[1], a3, a4);
}

uint64_t specialized static DecodingError._typeDescription(of:)(void *a1)
{
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  uint64_t v2 = v8;
  outlined destroy of Any?((uint64_t)&v7);
  if (!v2) {
    return 0x76206C6C756E2061;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
    unint64_t v3 = &v7;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    return 0x7265626D756E2061;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
  outlined init with take of Any(&v7, &v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    unint64_t v3 = (long long *)v6;
    goto LABEL_7;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return 0x676E697274732061;
  }
  else
  {
    outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      return 0x7961727261206E61;
    }
    else
    {
      outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        return 0x6F69746369642061;
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        swift_getDynamicType();
        return _typeName(_:qualified:)();
      }
    }
  }
}

void __swiftcall WeekendRange.init(onsetTime:ceaseTime:start:end:)(Foundation::WeekendRange *__return_ptr retstr, Swift::Double_optional onsetTime, Swift::Double_optional ceaseTime, Swift::Int start, Swift::Int end)
{
  retstr->onsetTime.value = *(Swift::Double *)&onsetTime.is_nil;
  retstr->onsetTime.is_nil = ceaseTime.is_nil;
  *(void *)&retstr->ceaseTime.value = start;
  retstr->ceaseTime.is_nil = end & 1;
  retstr->start = v5;
  retstr->end = v6;
}

uint64_t Calendar.debugDescription.getter()
{
  return Calendar.description.getter();
}

uint64_t Calendar.firstWeekday.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
}

uint64_t Calendar.minimumDaysInFirstWeek.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(ObjectType, v1);
}

uint64_t Calendar.minimumDaysInFirstWeek.setter(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(ObjectType, v3);
  if (result != a1)
  {
    v10[0] = 0;
    v10[1] = 0;
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v6 = (*(uint64_t (**)(void *, void *, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v3 + 112))(v10, v9, 0, 1, a1, 0, ObjectType, v3);
    uint64_t v8 = v7;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v1 = v6;
    v1[1] = v8;
  }
  return result;
}

uint64_t Calendar.minimumRange(of:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))(&v6, ObjectType, v3);
}

uint64_t Calendar.maximumRange(of:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))(&v6, ObjectType, v3);
}

uint64_t Calendar.range(of:in:for:)(char *a1, char *a2, double *a3)
{
  char v4 = *a2;
  double v5 = *a3;
  uint64_t v6 = *(void *)(v3 + 8);
  char v12 = *a1;
  char v11 = v4;
  if (v5 > 1.59271755e13) {
    double v5 = 1.59271755e13;
  }
  double v7 = fmax(v5, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v10 = v7;
  return (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v6 + 144))(&v12, &v11, &v10, ObjectType, v6);
}

Swift::Int_optional __swiftcall Calendar.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  char v5 = *(unsigned char *)in;
  double v6 = *v3;
  uint64_t v7 = *(void *)(v4 + 8);
  char v15 = *(unsigned char *)of;
  char v14 = v5;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v8 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v13 = v8;
  Swift::Int v10 = (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v7 + 152))(&v15, &v14, &v13, ObjectType, v7);
  Swift::Bool v12 = v11 & 1;
  result.value = v10;
  result.is_nil = v12;
  return result;
}

Swift::Bool __swiftcall Calendar.isDateInWeekend(_:)(Foundation::Date a1)
{
  double v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  if (*v1 > 1.59271755e13) {
    double v3 = 1.59271755e13;
  }
  double v5 = fmax(v3, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v8 = v5;
  return (*(uint64_t (**)(double *, uint64_t, uint64_t))(v4 + 168))(&v8, ObjectType, v4) & 1;
}

Foundation::DateInterval_optional __swiftcall Calendar.nextWeekend(startingAfter:direction:)(Foundation::Date startingAfter, Foundation::Calendar::SearchDirection direction)
{
  void (*v24)(long long *__return_ptr, double *, long long *, uint64_t, uint64_t);
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  long long v31;
  double v32;
  double v33;
  char v34;
  long long v35[18];
  double v36;
  double v37;
  char v38;
  double v39;
  uint64_t v40;
  __int16 v41;
  long long __dst[18];
  void __src[37];
  Foundation::DateInterval_optional result;

  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t *)direction;
  unsigned __int8 v7 = *v2;
  double v9 = *v4;
  uint64_t v8 = *((void *)v4 + 1);
  *(double *)__src = *v4;
  __src[1] = v8;
  unsigned __int8 v10 = Calendar.locale.getter(__dst);
  if (!*(void *)&__dst[0]
    || (uint64_t v13 = *((void *)&__dst[0] + 1),
        uint64_t ObjectType = swift_getObjectType(),
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 336))(__src, ObjectType, v13),
        unsigned __int8 v10 = swift_unknownObjectRelease(),
        (__src[6] & 1) != 0))
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
LABEL_4:
    *(unsigned char *)(v5 + 16) = 1;
    goto LABEL_34;
  }
  double v15 = *(double *)__src;
  char v16 = __src[1];
  double v17 = *(double *)&__src[2];
  char v18 = __src[3];
  uint64_t v19 = __src[5];
  __dst[0] = 0uLL;
  v35[0] = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)v35, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    __src[4],
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  *(double *)long long v35 = v9;
  *((void *)&v35[0] + 1) = v8;
  char v37 = *(double *)&v6;
  memcpy(__dst, __src, 0x11AuLL);
  LOBYTE(v36) = 0;
  uint64_t v41 = v7;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v37, __dst, (char *)&v36, (char *)&v41 + 1, (char *)&v41, (uint64_t)&v39);
  if (v40)
  {
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 16) = 1;
    goto LABEL_34;
  }
  double v20 = v39;
  if ((v16 & 1) == 0) {
    double v20 = v15 + v39;
  }
  LOBYTE(v39) = 3;
  double v21 = 1.59271755e13;
  if (v20 <= 1.59271755e13) {
    double v21 = v20;
  }
  double v22 = fmax(v21, -2.11845067e11);
  uint64_t v23 = swift_getObjectType();
  *(double *)long long v35 = v22;
  uint64_t v24 = *(void (**)(long long *__return_ptr, double *, long long *, uint64_t, uint64_t))(v8 + 160);
  v24(__dst, &v39, v35, v23, v8);
  if (__dst[1]) {
    uint64_t v25 = v20 + -1.0;
  }
  else {
    uint64_t v25 = *(double *)__dst;
  }
  v35[0] = 0uLL;
  int v39 = 0.0;
  uint64_t v40 = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v35, (uint64_t *)&v39, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    v19,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  int v39 = v9;
  uint64_t v40 = v8;
  int v36 = v25;
  memcpy(v35, __dst, 0x11AuLL);
  uint64_t v41 = 0;
  long long v34 = 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v36, v35, (char *)&v41 + 1, (char *)&v41, &v34, (uint64_t)&v37);
  if (v38)
  {
    outlined release of DateComponents((uint64_t)__dst);
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 16) = 1;
    goto LABEL_34;
  }
  uint64_t v26 = v37;
  if ((v18 & 1) != 0 || v17 <= 0.0)
  {
    LOBYTE(v37) = 3;
    if (v26 <= 1.59271755e13) {
      uint64_t v28 = v26;
    }
    else {
      uint64_t v28 = 1.59271755e13;
    }
    uint64_t v29 = fmax(v28, -2.11845067e11);
    int v30 = swift_getObjectType();
    int v39 = v29;
    v24(v35, &v37, (long long *)&v39, v30, v8);
    int v31 = v35[0];
    if (v35[1])
    {
      outlined release of DateComponents((uint64_t)__dst);
      unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
      *(_OWORD *)uint64_t v5 = v31;
      goto LABEL_4;
    }
    double v32 = *(double *)v35 + *((double *)v35 + 1);
    LOBYTE(v37) = 3;
    if (*(double *)v35 + *((double *)v35 + 1) <= 1.59271755e13) {
      double v33 = *(double *)v35 + *((double *)v35 + 1);
    }
    else {
      double v33 = 1.59271755e13;
    }
    int v39 = fmax(v33, -2.11845067e11);
    v24(v35, &v37, (long long *)&v39, v30, v8);
    outlined release of DateComponents((uint64_t)__dst);
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    if (v35[1]) {
      uint64_t v27 = v32 + -1.0;
    }
    else {
      uint64_t v27 = *(double *)v35;
    }
  }
  else
  {
    outlined release of DateComponents((uint64_t)__dst);
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    uint64_t v27 = v17 + v26;
  }
  if (v27 < v25)
  {
    __break(1u);
    JUMPOUT(0x181CC7110);
  }
  double v11 = v27 - v25;
  *(double *)uint64_t v5 = v25;
  *(double *)(v5 + 8) = v11;
  *(unsigned char *)(v5 + 16) = 0;
LABEL_34:
  result.value.duration = v12;
  result.value.start._time = v11;
  result.is_nil = v10;
  return result;
}

Swift::Bool __swiftcall Calendar.nextWeekend(startingAfter:start:interval:direction:)(Foundation::Date startingAfter, Foundation::Date *start, Swift::Double *interval, Foundation::Calendar::SearchDirection direction)
{
  uint64_t v5 = (void *)direction;
  v7._Swift::Double time = start->_time;
  long long v12 = *v4;
  Swift::Double time = v7._time;
  Calendar.nextWeekend(startingAfter:direction:)(v7, (Foundation::Calendar::SearchDirection)&time);
  char v8 = v15;
  if ((v15 & 1) == 0)
  {
    uint64_t v9 = v14;
    *(void *)interval = v13;
    *uint64_t v5 = v9;
  }
  return v8 ^ 1;
}

uint64_t Calendar.ComponentSet.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (char *)(a1 + 32);
    do
    {
      uint64_t v6 = *v5++;
      v4 |= qword_1821A0560[v6];
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t Calendar.ComponentSet.count.getter()
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t Calendar.Component.debugDescription.getter()
{
  uint64_t result = 6386277;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1918985593;
      break;
    case 2:
      uint64_t result = 0x68746E6F6DLL;
      break;
    case 3:
      uint64_t result = 7954788;
      break;
    case 4:
      uint64_t result = 1920298856;
      break;
    case 5:
      uint64_t result = 0x6574756E696DLL;
      break;
    case 6:
      uint64_t result = 0x646E6F636573;
      break;
    case 7:
      uint64_t result = 0x7961646B656577;
      break;
    case 8:
      uint64_t result = 0x4F7961646B656577;
      break;
    case 9:
      uint64_t result = 0x72657472617571;
      break;
    case 0xA:
      uint64_t v2 = 0x664F6B656577;
      goto LABEL_18;
    case 0xB:
      uint64_t result = 0x6559664F6B656577;
      break;
    case 0xC:
      uint64_t result = 0xD000000000000011;
      break;
    case 0xD:
      uint64_t result = 0x6F6365736F6E616ELL;
      break;
    case 0xE:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 0xF:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    case 0x10:
      uint64_t v2 = 0x7061654C7369;
LABEL_18:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x6F4D000000000000;
      break;
    case 0x11:
      uint64_t result = 0x616559664F796164;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static Calendar.SearchDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Foundation::Date_optional __swiftcall Calendar.date(bySetting:value:of:)(Foundation::Calendar::Component bySetting, Swift::Int value, Foundation::Date of)
{
  uint64_t v7 = v4;
  Swift::UInt v8 = *(unsigned __int8 *)bySetting;
  double v9 = *v3;
  uint64_t v10 = *v5;
  uint64_t v11 = v5[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  *(unsigned char *)(swift_allocObject() + 32) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v12 = static _SetStorage.allocate(capacity:)();
  uint64_t v13 = v12 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v16 = v14 & ~v15;
  unint64_t v17 = v16 >> 6;
  uint64_t v18 = *(void *)(v12 + 56 + 8 * (v16 >> 6));
  uint64_t v19 = 1 << v16;
  uint64_t v20 = *(void *)(v12 + 48);
  if (((1 << v16) & v18) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v20 + v16) == v8) {
    goto LABEL_12;
  }
  uint64_t v21 = ~v15;
  unint64_t v16 = (v16 + 1) & v21;
  unint64_t v17 = v16 >> 6;
  uint64_t v18 = *(void *)(v13 + 8 * (v16 >> 6));
  uint64_t v19 = 1 << v16;
  if ((v18 & (1 << v16)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v20 + v16) == v8) {
    goto LABEL_12;
  }
  unint64_t v16 = (v16 + 1) & v21;
  unint64_t v17 = v16 >> 6;
  uint64_t v18 = *(void *)(v13 + 8 * (v16 >> 6));
  uint64_t v19 = 1 << v16;
  if ((v18 & (1 << v16)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v20 + v16) == v8) {
    goto LABEL_12;
  }
  unint64_t v16 = (v16 + 1) & v21;
  unint64_t v17 = v16 >> 6;
  uint64_t v18 = *(void *)(v13 + 8 * (v16 >> 6));
  uint64_t v19 = 1 << v16;
  if ((v18 & (1 << v16)) != 0)
  {
    while (*(unsigned __int8 *)(v20 + v16) != v8)
    {
      unint64_t v16 = (v16 + 1) & v21;
      unint64_t v17 = v16 >> 6;
      uint64_t v18 = *(void *)(v13 + 8 * (v16 >> 6));
      uint64_t v19 = 1 << v16;
      if ((v18 & (1 << v16)) == 0) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    *(void *)(v13 + 8 * v17) = v19 | v18;
    *(unsigned char *)(v20 + v16) = v8;
    uint64_t v22 = *(void *)(v12 + 16);
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
      JUMPOUT(0x181CC798CLL);
    }
    *(void *)(v12 + 16) = v24;
  }
LABEL_12:
  swift_setDeallocating();
  swift_deallocClassInstance();
  v70[1] = v10;
  v70[2] = v11;
  uint64_t v25 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v25, v70);
  double v26 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v26 = v9;
  }
  *(void *)&__dst[0] = fmax(v26, -2.11845067e11);
  Calendar._dateComponents(_:from:)(v70, (double *)__dst, v39);
  swift_release();
  char v27 = outlined release of DateComponents((uint64_t)v39);
  switch(v8)
  {
    case 1uLL:
      if (v43) {
        goto LABEL_15;
      }
      if (v42 != value) {
        goto LABEL_57;
      }
      goto LABEL_60;
    case 2uLL:
      if (v45) {
        goto LABEL_15;
      }
      if (v44 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 3uLL:
      if (v47) {
        goto LABEL_15;
      }
      if (v46 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 4uLL:
      if (v51) {
        goto LABEL_15;
      }
      if (v50 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 5uLL:
      if (v53) {
        goto LABEL_15;
      }
      if (v52 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 6uLL:
      if (v55) {
        goto LABEL_15;
      }
      if (v54 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 7uLL:
      if (v59) {
        goto LABEL_15;
      }
      if (v58 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 8uLL:
      if (v61) {
        goto LABEL_15;
      }
      if (v60 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 9uLL:
      if (v63) {
        goto LABEL_15;
      }
      if (v62 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 0xAuLL:
      if (v65) {
        goto LABEL_15;
      }
      if (v64 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 0xBuLL:
      if (v67) {
        goto LABEL_15;
      }
      if (v66 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 0xCuLL:
      if (v69) {
        goto LABEL_15;
      }
      if (v68 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    case 0xDuLL:
      if (v57) {
        goto LABEL_15;
      }
      if (v56 != value) {
        goto LABEL_57;
      }
      goto LABEL_60;
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
      goto LABEL_15;
    case 0x11uLL:
      if (v49) {
        goto LABEL_15;
      }
      if (v48 == value) {
        goto LABEL_60;
      }
      goto LABEL_57;
    default:
      if (v41)
      {
LABEL_15:
        *(void *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 8) = 1;
      }
      else if (v40 == value)
      {
LABEL_60:
        *(double *)uint64_t v7 = v9;
        *(unsigned char *)(v7 + 8) = 0;
      }
      else
      {
LABEL_57:
        uint64_t v36 = 0;
        char v37 = 1;
        __dst[0] = 0uLL;
        v32[0] = 0;
        v32[1] = 0;
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v32, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1);
        LOBYTE(__dst[0]) = v8;
        v71.value = value;
        v71.is_nil = 0;
        DateComponents.setValue(_:for:)(v71, (Foundation::Calendar::Component)__dst);
        memcpy(__dst, __src, 0x11AuLL);
        v34[0] = v10;
        v34[1] = v11;
        double v33 = v9;
        memcpy(v32, __src, 0x11AuLL);
        __int16 v31 = 0;
        char v30 = 0;
        specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v33, v32, (char *)&v31 + 1, &v31, &v30, v34, &v36);
        char v27 = outlined release of DateComponents((uint64_t)__dst);
        char v29 = v37;
        *(void *)uint64_t v7 = v36;
        *(unsigned char *)(v7 + 8) = v29;
      }
      result.value = *(Foundation::Date *)&v28;
      result.is_nil = v27;
      return result;
  }
}

uint64_t Calendar.dates(byMatching:startingAt:in:matchingPolicy:repeatedTimePolicy:direction:)@<X0>(void *__src@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, unsigned char *a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X8>)
{
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v15 = *a2;
  LOBYTE(a4) = *a4;
  LOBYTE(a5) = *a5;
  LOBYTE(a6) = *a6;
  char v19 = *(unsigned char *)(a3 + 16);
  memcpy(&__srca[7], __src, 0x11AuLL);
  *(_OWORD *)a7 = *v7;
  *(void *)(a7 + 16) = v15;
  *(_OWORD *)(a7 + 24) = *(_OWORD *)a3;
  *(unsigned char *)(a7 + 40) = v19;
  memcpy((void *)(a7 + 41), __srca, 0x121uLL);
  *(unsigned char *)(a7 + 330) = (_BYTE)a4;
  *(unsigned char *)(a7 + 331) = (_BYTE)a5;
  *(unsigned char *)(a7 + 332) = (_BYTE)a6;
  swift_unknownObjectRetain();
  return outlined retain of DateComponents((uint64_t)__dst);
}

uint64_t static Calendar.Identifier.cldrKeywordKey.getter()
{
  return 24931;
}

void static Calendar.Identifier.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x7261646E656C6163;
  a1[1] = 0xE800000000000000;
}

void Calendar.Identifier.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

unint64_t Calendar.Identifier.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6169726F67657267;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7473696864647562;
      break;
    case 2:
      unint64_t result = 0x6573656E696863;
      break;
    case 3:
      unint64_t result = 0x636974706F63;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x776572626568;
      break;
    case 7:
      unint64_t result = 0x313036386F7369;
      break;
    case 8:
      unint64_t result = 0x6E6169646E69;
      break;
    case 9:
      unint64_t result = 0x63696D616C7369;
      break;
    case 10:
      unint64_t result = 0x4363696D616C7369;
      break;
    case 11:
      unint64_t result = 0x6573656E6170616ALL;
      break;
    case 12:
      unint64_t result = 0x6E616973726570;
      break;
    case 13:
      unint64_t result = 0x63696C6275706572;
      break;
    case 14:
      unint64_t result = 0x5463696D616C7369;
      break;
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.BuddhistCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.BuddhistCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.ChineseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.ChineseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.Identifier.CodingKeys()
{
  return Calendar.Identifier.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.Identifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Calendar.Identifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Calendar.Identifier.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.CopticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.CopticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.GregorianCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.GregorianCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.HebrewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.HebrewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IndianCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IndianCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicCivilCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicCivilCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicTabularCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicTabularCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.Iso8601CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.Iso8601CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.JapaneseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.JapaneseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.PersianCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.PersianCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.RepublicOfChinaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.RepublicOfChinaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Calendar.ComponentSet.rawValue.getter()
{
  return *(void *)v0;
}

Foundation::Calendar::ComponentSet __swiftcall Calendar.ComponentSet.init(rawValue:)(Foundation::Calendar::ComponentSet rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

Foundation::Calendar::ComponentSet __swiftcall Calendar.ComponentSet.init(single:)(Foundation::Calendar::Component single)
{
  *uint8x8_t v1 = qword_1821A0560[*(char *)single];
  LOBYTE(result.rawValue) = single;
  return result;
}

void static Calendar.ComponentSet.era.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static Calendar.ComponentSet.year.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static Calendar.ComponentSet.month.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static Calendar.ComponentSet.day.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static Calendar.ComponentSet.hour.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static Calendar.ComponentSet.minute.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static Calendar.ComponentSet.second.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static Calendar.ComponentSet.weekday.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static Calendar.ComponentSet.weekdayOrdinal.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static Calendar.ComponentSet.quarter.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static Calendar.ComponentSet.weekOfMonth.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

void static Calendar.ComponentSet.weekOfYear.getter(void *a1@<X8>)
{
  *a1 = 2048;
}

void static Calendar.ComponentSet.yearForWeekOfYear.getter(void *a1@<X8>)
{
  *a1 = 4096;
}

void static Calendar.ComponentSet.nanosecond.getter(void *a1@<X8>)
{
  *a1 = 0x2000;
}

void static Calendar.ComponentSet.calendar.getter(void *a1@<X8>)
{
  *a1 = 0x4000;
}

void static Calendar.ComponentSet.timeZone.getter(void *a1@<X8>)
{
  *a1 = 0x8000;
}

void static Calendar.ComponentSet.isLeapMonth.getter(void *a1@<X8>)
{
  *a1 = 0x10000;
}

void static Calendar.ComponentSet.dayOfYear.getter(void *a1@<X8>)
{
  *a1 = 0x40000;
}

uint64_t Calendar.ComponentSet.set.getter()
{
  uint64_t v1 = *v0;
  uint64_t v4 = MEMORY[0x1E4FBC870];
  if (v1)
  {
    specialized Set._Variant.insert(_:)(&v3, 0);
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }
  specialized Set._Variant.insert(_:)(&v3, 1uLL);
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  specialized Set._Variant.insert(_:)(&v3, 2uLL);
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  specialized Set._Variant.insert(_:)(&v3, 3uLL);
  if ((v1 & 0x10) == 0)
  {
LABEL_6:
    if ((v1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  specialized Set._Variant.insert(_:)(&v3, 4uLL);
  if ((v1 & 0x20) == 0)
  {
LABEL_7:
    if ((v1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  specialized Set._Variant.insert(_:)(&v3, 5uLL);
  if ((v1 & 0x40) == 0)
  {
LABEL_8:
    if ((v1 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  specialized Set._Variant.insert(_:)(&v3, 6uLL);
  if ((v1 & 0x80) == 0)
  {
LABEL_9:
    if ((v1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  specialized Set._Variant.insert(_:)(&v3, 7uLL);
  if ((v1 & 0x100) == 0)
  {
LABEL_10:
    if ((v1 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  specialized Set._Variant.insert(_:)(&v3, 8uLL);
  if ((v1 & 0x200) == 0)
  {
LABEL_11:
    if ((v1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  specialized Set._Variant.insert(_:)(&v3, 9uLL);
  if ((v1 & 0x400) == 0)
  {
LABEL_12:
    if ((v1 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  specialized Set._Variant.insert(_:)(&v3, 0xAuLL);
  if ((v1 & 0x800) == 0)
  {
LABEL_13:
    if ((v1 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  if ((v1 & 0x1000) == 0)
  {
LABEL_14:
    if ((v1 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  specialized Set._Variant.insert(_:)(&v3, 0xCuLL);
  if ((v1 & 0x2000) == 0)
  {
LABEL_15:
    if ((v1 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  specialized Set._Variant.insert(_:)(&v3, 0xDuLL);
  if ((v1 & 0x4000) == 0)
  {
LABEL_16:
    if ((v1 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  specialized Set._Variant.insert(_:)(&v3, 0xEuLL);
  if ((v1 & 0x8000) == 0)
  {
LABEL_17:
    if ((v1 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    specialized Set._Variant.insert(_:)(&v3, 0x10uLL);
    if ((v1 & 0x40000) == 0) {
      return v4;
    }
    goto LABEL_19;
  }
LABEL_36:
  specialized Set._Variant.insert(_:)(&v3, 0xFuLL);
  if ((v1 & 0x10000) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((v1 & 0x40000) != 0) {
LABEL_19:
  }
    specialized Set._Variant.insert(_:)(&v3, 0x11uLL);
  return v4;
}