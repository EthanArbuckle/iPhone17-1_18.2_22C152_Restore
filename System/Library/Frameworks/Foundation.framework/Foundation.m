uint64_t getEnumTagSinglePayload for Locale(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t __DataStorage._offset.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t __DataStorage._bytes.getter()
{
  return *(void *)(v0 + 16);
}

void destroy for __CharacterSetStorage.Backing(id *a1)
{
}

uint64_t storeEnumTagSinglePayload for Locale(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date()
{
  return &type metadata for Date;
}

uint64_t NSKeyValueAccessorHash(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

unsigned char *destructiveInjectEnumTag for PredicateExpressionCodingKeys(unsigned char *result, char a2)
{
  *result = a2;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UUID(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

ValueMetadata *type metadata accessor for TimeZone()
{
  return &type metadata for TimeZone;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 < *a2;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExpressionStructure.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

ValueMetadata *type metadata accessor for UUID()
{
  return &type metadata for UUID;
}

ValueMetadata *type metadata accessor for URL()
{
  return &type metadata for URL;
}

uint64_t NSNotFound.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t destroy for URLQueryItem()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance String()
{
  return String._bridgeToObjectiveCImpl()();
}

ValueMetadata *type metadata accessor for Locale()
{
  return &type metadata for Locale;
}

uint64_t NSKeyValueAccessorIsEqual(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  v3 = *(void **)(a1 + 16);
  if (v3 == *(void **)(a2 + 16)) {
    return 1;
  }
  else {
    return objc_msgSend(v3, "isEqual:");
  }
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  return &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy;
}

void *String.init(data:encoding:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return specialized String.init<A>(bytes:encoding:)(a1, a2, *a3);
}

CFTypeRef __karetain(int a1, CFTypeRef cf)
{
  return CFRetain(cf);
}

void *initializeWithCopy for URLQueryItem(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void __karelease(int a1, CFTypeRef cf)
{
}

void static String.Encoding.utf8.getter(void *a1@<X8>)
{
  *a1 = 4;
}

ValueMetadata *type metadata accessor for String.Encoding()
{
  return &type metadata for String.Encoding;
}

void *initializeBufferWithCopyOfBuffer for Measurement(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t protocol witness for _CalendarProtocol.localeIdentifier.getter in conformance _CalendarGregorian()
{
  if (!*(void *)(v0 + 88)) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t LocalePreferences.locale.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)()
{
  if (String.count.getter() >= 2)
  {
    swift_bridgeObjectRetain();
    unint64_t v1 = specialized Collection.prefix(_:)(2);
    unint64_t v3 = v2;
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    if ((specialized static StringProtocol.== infix<A>(_:_:)(31329, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(29804, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(29300, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(27758, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v0 = 0;
    }
    else
    {
      char v9 = specialized static StringProtocol.== infix<A>(_:_:)(27749, 0xE200000000000000, v1, v3, v5, v7);
      swift_bridgeObjectRelease();
      char v0 = v9 ^ 1;
    }
  }
  else
  {
    char v0 = 1;
  }
  return v0 & 1;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

void *_NS_os_log_callback(void *result, unsigned char *a2, unint64_t a3, unsigned char *a4)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v7 = result;
    v8 = (void *)MEMORY[0x185308110]();
    if (([v7 isProxy] & 1) != 0 || object_isClass(v7)) {
      uint64_t v7 = (void *)[v7 description];
    }
    if (_NSIsNSObject())
    {
      if (a4 && !*a4)
      {
        v12 = (__CFString *)[v7 description];
      }
      else
      {
        int v9 = _NSIsNSNumber() ^ 1;
        if (!a4) {
          LOBYTE(v9) = 1;
        }
        if ((v9 & 1) == 0) {
          *a4 = 0;
        }
        int v10 = _NSIsNSCFConstantString() ^ 1;
        if (!a4) {
          LOBYTE(v10) = 1;
        }
        if ((v10 & 1) == 0) {
          *a4 = 0;
        }
        v11 = (objc_class *)objc_opt_class();
        if (class_respondsToSelector(v11, sel_redactedDescription))
        {
          v12 = (__CFString *)[v7 redactedDescription];
          if (a4) {
            *a4 = 0;
          }
        }
        else
        {
          v12 = &stru_1ECA5C228;
        }
      }
      uint64_t v15 = [(__CFString *)v12 length];
      uint64_t v16 = v15;
      if (v15)
      {
        if (a3 >= 2
          && ((v17[0] = 0,
               (-[__CFString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v12, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", a2, a3 - 1, v17, 4, 2, 0, v15, 0) & 1) != 0)|| -[__CFString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v12, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", a2, a3 - 1, v17, 7, 2, 0,
                              v16,
                              0)))
        {
          a2[v17[0]] = 0;
          int v13 = 1;
        }
        else
        {
          int v13 = 0;
        }
      }
      else
      {
        int v13 = 1;
        if (a2)
        {
          int v14 = 1;
          if (a3) {
            *a2 = 0;
          }
          goto LABEL_32;
        }
      }
      int v14 = 1;
    }
    else
    {
      int v13 = 0;
      int v14 = 0;
    }
LABEL_32:
    return (void *)(v13 & v14);
  }
  return result;
}

void sub_1817984B0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1817984C4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1817984D0(_Unwind_Exception *a1)
{
}

CFTypeRef _NSDescriptionWithLocaleFunc(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v5 = (__CFString *)[a1 descriptionWithLocale:a2];
    }
    else {
      uint64_t v5 = (__CFString *)[a1 description];
    }
    uint64_t v2 = vars8;
  }
  else
  {
    uint64_t v5 = @"*nil*";
  }
  if (!v5) {
    uint64_t v5 = @"*nil description*";
  }
  return CFRetain(v5);
}

id @objc static NSLocale._current.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v0 = (void *)LocaleCache.currentNSLocale()();

  return v0;
}

uint64_t LocaleCache.currentNSLocale()()
{
  unint64_t v1 = (uint64_t *)&(*v0)[4];
  uint64_t v2 = *v0 + 31;
  swift_retain();
  os_unfair_lock_lock(v2);
  closure #1 in LocaleCache.currentNSLocale()(v1, v7);
  os_unfair_lock_unlock(v2);
  swift_release();
  uint64_t v3 = *(void *)&v7[0];
  if (*(void *)&v7[0]) {
    return v3;
  }
  LocaleCache.preferences()(v7);
  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v2);
  partial apply for closure #2 in LocaleCache.currentNSLocale()(&v6);
  os_unfair_lock_unlock(v2);
  swift_release();
  uint64_t v3 = v6;
  if (v6)
  {
    outlined release of LocalePreferences(v7);
    return v3;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id closure #1 in LocaleCache.currentNSLocale()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  LocaleCache.State.resetCurrentIfNeeded()();
  uint64_t v4 = (void *)a1[6];
  id v5 = v4;
  if (!v4)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      uint64_t v7 = a1[1];
      v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      int v9 = objc_allocWithZone(v8);
      uint64_t v10 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      v11 = &v9[OBJC_IVAR____NSSwiftLocale_locale];
      void *v11 = v6;
      v11[1] = v7;
      v9[v10] = 2;
      uint64_t v12 = String._bridgeToObjectiveCImpl()();
      v15.receiver = v9;
      v15.super_class = v8;
      swift_unknownObjectRetain_n();
      id v5 = objc_msgSendSuper2(&v15, sel_initWithLocaleIdentifier_, v12);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      a1[6] = (uint64_t)v5;
      id v13 = v5;
    }
    else
    {
      id v5 = 0;
    }
  }
  *a2 = v5;
  return v4;
}

Swift::Void __swiftcall LocaleCache.State.resetCurrentIfNeeded()()
{
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v2 = _CFTimeZoneGetNoteCount();
  BOOL v3 = __OFADD__(NoteCount, v2);
  uint64_t v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  Midnightuint64_t NoteCount = _CFCalendarGetMidnightNoteCount();
  BOOL v3 = __OFADD__(v4, MidnightNoteCount);
  uint64_t v6 = v4 + MidnightNoteCount;
  if (v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 == *(void *)(v0 + 96) && *(unsigned char *)(v0 + 104) != 1) {
    return;
  }
  swift_unknownObjectRelease();
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 96) = v6;
  *(unsigned char *)(v0 + 104) = 0;

  *(void *)(v0 + 48) = 0;
  if (!*MEMORY[0x1E4F1D200])
  {
LABEL_12:
    __break(1u);
    return;
  }

  _CFNotificationCenterInitializeDependentNotificationIfNecessary();
}

Class NSClassFromString(Class aClassName)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (aClassName)
  {
    Class v1 = aClassName;
    uint64_t v2 = [(objc_class *)aClassName length];
    if ([(objc_class *)v1 getCString:v5 maxLength:1000 encoding:4]&& strlen(v5) == v2)
    {
      BOOL v3 = v5;
      return objc_lookUpClass(v3);
    }
    if (!v2)
    {
LABEL_9:
      BOOL v3 = (const char *)[(objc_class *)v1 UTF8String];
      return objc_lookUpClass(v3);
    }
    uint64_t v4 = 0;
    while ([(objc_class *)v1 characterAtIndex:v4])
    {
      if (v2 == ++v4) {
        goto LABEL_9;
      }
    }
    return 0;
  }
  return aClassName;
}

SEL NSSelectorFromString(SEL aSelectorName)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (aSelectorName)
  {
    Class v1 = (char *)aSelectorName;
    uint64_t v2 = [(id)aSelectorName length];
    if ([v1 getCString:v5 maxLength:1000 encoding:4] && strlen(v5) == v2)
    {
      BOOL v3 = v5;
      return sel_registerName(v3);
    }
    if (!v2)
    {
LABEL_9:
      BOOL v3 = (const char *)[v1 UTF8String];
      return sel_registerName(v3);
    }
    uint64_t v4 = 0;
    while ([v1 characterAtIndex:v4])
    {
      if (v2 == ++v4) {
        goto LABEL_9;
      }
    }
    return 0;
  }
  return aSelectorName;
}

void newJSONString(void *a1, int a2, void *a3)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[3];
  uint64_t v6 = (const uint8_t *)*a1;
  uint8_t v7 = v6[v5];
  if (v7 != 34)
  {
    uint64_t v10 = a1[1] & 8;
    BOOL v11 = v7 != 39 || v10 == 0;
    if (!v11)
    {
      char v8 = 0;
      ++v5;
      char v9 = 1;
      goto LABEL_16;
    }
    if (a2 != 1 || !v10)
    {
      if (a3)
      {
        unint64_t v65 = a1[6];
        BOOL v31 = v5 >= v65;
        unint64_t v66 = v5 - v65;
        if (v31) {
          uint64_t v67 = v66;
        }
        else {
          uint64_t v67 = 0;
        }
        v68 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"String without surrounding quotes", a1[5], v67];
        v69 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
        v202 = @"NSDebugDescription";
        v203 = @"NSJSONSerializationErrorIndex";
        v197 = v68;
        v198 = v69;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
      }
      return;
    }
    if (((v7 & 0xDF) - 65) < 0x1Au
      || (v6[v5] - 36 <= 0x3B ? (BOOL v12 = ((1 << (v7 - 36)) & 0x900000000000001) == 0) : (BOOL v12 = 1), !v12))
    {
LABEL_15:
      char v9 = 0;
      uint64_t v13 = 1;
      char v8 = 1;
      goto LABEL_17;
    }
    if ((char)v6[(int)v5] > -65)
    {
      int32_t v99 = v5;
    }
    else
    {
      int32_t v99 = utf8_back1SafeBody(v6, 0, v5);
      uint64_t v6 = (const uint8_t *)*a1;
    }
    int v102 = (char)v6[v99];
    uint64_t v103 = v6[v99];
    if ((v102 & 0x80000000) == 0)
    {
LABEL_220:
      if (_MergedGlobals_141 != -1) {
        dispatch_once(&_MergedGlobals_141, &__block_literal_global_66);
      }
      if (!MEMORY[0x18530A360](qword_1EB1EDA88, v103))
      {
        if (a3)
        {
          unint64_t v104 = a1[3];
          unint64_t v105 = a1[6];
          BOOL v31 = v104 >= v105;
          uint64_t v106 = v104 - v105;
          if (v31) {
            uint64_t v107 = v106;
          }
          else {
            uint64_t v107 = 0;
          }
          v108 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Disallowed first character in JSON5 object key", a1[5], v107];
          v109 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
          v202 = @"NSDebugDescription";
          v203 = @"NSJSONSerializationErrorIndex";
          v197 = v108;
          v198 = v109;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
        }
        return;
      }
      goto LABEL_15;
    }
    uint64_t v123 = v99;
    uint64_t v124 = v99 + 1;
    uint64_t v125 = a1[2];
    if (v125 != v124)
    {
      if (v103 < 0xE0)
      {
        if (v103 < 0xC2) {
          goto LABEL_241;
        }
        int v134 = v103 & 0x1F;
      }
      else
      {
        if (v103 > 0xEF)
        {
          if (v103 > 0xF4) {
            goto LABEL_241;
          }
          unint64_t v136 = v6[v124];
          if (((_writeJSONBoolean_falseData[(v136 >> 4) + 5] >> (v103 + 16)) & 1) == 0) {
            goto LABEL_241;
          }
          uint64_t v124 = v123 + 2;
          if (v125 == v123 + 2) {
            goto LABEL_241;
          }
          unsigned int v133 = v6[v124] ^ 0x80;
          if (v133 > 0x3F) {
            goto LABEL_241;
          }
          LODWORD(v132) = v136 & 0x3F | ((v103 - 240) << 6);
        }
        else
        {
          uint64_t v132 = v102 & 0xF;
          if (((a00000000000000[v132] >> (v6[v124] >> 5)) & 1) == 0) {
            goto LABEL_241;
          }
          unsigned int v133 = v6[v124] & 0x3F;
        }
        LODWORD(v124) = v124 + 1;
        if (v125 == (int)v124) {
          goto LABEL_241;
        }
        uint64_t v124 = (int)v124;
        int v134 = v133 | (v132 << 6);
      }
      unsigned int v135 = v6[v124] ^ 0x80;
      if (v135 <= 0x3F)
      {
        uint64_t v103 = v135 | (v134 << 6);
        goto LABEL_220;
      }
    }
LABEL_241:
    if (a3)
    {
      unint64_t v126 = a1[3];
      unint64_t v127 = a1[6];
      BOOL v31 = v126 >= v127;
      uint64_t v128 = v126 - v127;
      if (v31) {
        uint64_t v129 = v128;
      }
      else {
        uint64_t v129 = 0;
      }
      v130 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unparseable UTF8 character", a1[5], v129];
      v131 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
      v202 = @"NSDebugDescription";
      v203 = @"NSJSONSerializationErrorIndex";
      v197 = v130;
      v198 = v131;
      *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
    }
    return;
  }
  char v8 = 0;
  char v9 = 0;
  ++v5;
LABEL_16:
  uint64_t v13 = 2;
LABEL_17:
  unint64_t v14 = a1[2];
  if (v14 <= v5)
  {
    if (a3)
    {
      unint64_t v29 = a1[3];
      unint64_t v30 = a1[6];
      BOOL v31 = v29 >= v30;
      uint64_t v32 = v29 - v30;
      if (v31) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      v34 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during string parse", a1[5], v33];
      v35 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
      v202 = @"NSDebugDescription";
      v203 = @"NSJSONSerializationErrorIndex";
      v197 = v34;
      v198 = v35;
      *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
    }
  }
  else
  {
    char v15 = 0;
    uint64_t v16 = (const uint8_t *)*a1;
    int v17 = -2128831035;
    unint64_t v18 = v5;
    while (1)
    {
      unsigned int v19 = v16[v18];
      if (v19 < 0x20) {
        break;
      }
      int v17 = 16777619 * (v17 ^ v19);
      if (v19 == 92)
      {
        if (v14 <= v18 + 1) {
          goto LABEL_51;
        }
        int v20 = v16[v18 + 1];
        if (v20 == 117)
        {
          unint64_t v21 = v18 + 6;
LABEL_52:
          char v15 = 1;
          goto LABEL_53;
        }
        if ((a1[1] & 8) == 0)
        {
LABEL_51:
          unint64_t v21 = v18 + 2;
          goto LABEL_52;
        }
        switch(v20)
        {
          case 10:
            unint64_t v21 = v18 + 2;
            break;
          case 13:
            unint64_t v21 = v18 + 2;
            if (v14 > v18 + 2 && v16[v21] == 10) {
              unint64_t v21 = v18 + 3;
            }
            break;
          case 120:
            unint64_t v21 = v18 + 4;
            goto LABEL_52;
          default:
            goto LABEL_51;
        }
        ++a1[5];
        a1[6] = v21;
        goto LABEL_52;
      }
      if (v19 == 39) {
        char v22 = v9;
      }
      else {
        char v22 = 0;
      }
      BOOL v24 = v7 == 34 && v19 == 34;
      if (v19 == 58) {
        char v25 = v8;
      }
      else {
        char v25 = 0;
      }
      if ((v25 & 1) != 0 || (v22 & 1) != 0 || v24) {
        goto LABEL_74;
      }
      char v26 = (v19 & 0x7F) == 0x20 ? v8 : 0;
      if (v26) {
        goto LABEL_74;
      }
      BOOL v11 = v19 == 47;
      char v27 = v8 ^ 1;
      unint64_t v21 = v18 + 1;
      if (!v11) {
        char v27 = 1;
      }
      if ((v27 & 1) == 0 && v14 > v21)
      {
        int v28 = v16[v21];
        if (v28 == 42 || v28 == 47) {
          goto LABEL_74;
        }
      }
LABEL_53:
      unint64_t v18 = v21;
      if (v14 <= v21)
      {
        if (a3)
        {
          unint64_t v70 = a1[3];
          unint64_t v71 = a1[6];
          BOOL v31 = v70 >= v71;
          uint64_t v72 = v70 - v71;
          if (v31) {
            uint64_t v73 = v72;
          }
          else {
            uint64_t v73 = 0;
          }
          v74 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unterminated string", a1[5], v73];
          v75 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
          v202 = @"NSDebugDescription";
          v203 = @"NSJSONSerializationErrorIndex";
          v197 = v74;
          v198 = v75;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
        }
        return;
      }
    }
    if (v19 == 10) {
      char v36 = v8;
    }
    else {
      char v36 = 0;
    }
    unint64_t v37 = v18;
    if (v36)
    {
LABEL_73:
      ++a1[5];
      a1[6] = v37;
LABEL_74:
      if (v18 == v5)
      {
        a1[3] = v5 + 1;
        if ((a1[1] & 2) != 0) {
          v38 = NSMutableString;
        }
        else {
          v38 = NSString;
        }
        id v76 = objc_alloc_init(v38);
        return;
      }
      unint64_t v39 = v18 - 1;
      uint64_t v40 = v18 - v5;
      __s2 = &v16[v5];
      uint64_t v193 = (uint64_t)(a1 + 7);
      uint64_t v41 = (uint64_t)&a1[4 * v17 + 7];
      if (*(_DWORD *)(v41 + 24) == v17 && *(void *)(v41 + 8) == v40 && !memcmp(*(const void **)v41, __s2, v18 - v5))
      {
        v100 = *(void **)(v193 + 32 * v17 + 16);
        if (v100)
        {
          a1[3] = v39 + v13;
          if ((a1[1] & 2) != 0)
          {
            [v100 mutableCopy];
          }
          else
          {
            id v101 = v100;
          }
          return;
        }
      }
      if (v15)
      {
        v192 = a3;
        v42 = malloc_type_malloc(v18 - v5, 0x100004077774924uLL);
        uint64_t v191 = v18 - v5;
        if (v5 < v18)
        {
          unint64_t v43 = v18 - v5;
          unint64_t v44 = 0;
          while (1)
          {
            if (v44 >= v43)
            {
              if (2 * v43 <= 6) {
                unint64_t v43 = 6;
              }
              else {
                v43 *= 2;
              }
              v197 = 0;
              v198 = (NSNumber *)&v197;
              uint64_t v199 = 0x2020000000;
              char v200 = 0;
              v195[0] = MEMORY[0x1E4F143A8];
              v195[1] = 3221225472;
              v195[2] = __newJSONString_block_invoke_2;
              v195[3] = &unk_1E51F9110;
              v195[4] = &v197;
              uint64_t v45 = MEMORY[0x185306D80](v42, v43, 762037687, v195);
              if (LOBYTE(v198[3].super.super.isa))
              {
                if (v192)
                {
                  unint64_t v110 = a1[3];
                  unint64_t v111 = a1[6];
                  v112 = [NSString alloc];
                  uint64_t v113 = v110 - v111;
                  if (v110 < v111) {
                    uint64_t v113 = 0;
                  }
                  v114 = [(NSString *)v112 initWithFormat:@"%@ around line %lu, column %lu.", @"Memory exhausted during parse of string.", a1[5], v113];
                  v115 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                  v201[0] = @"NSDebugDescription";
                  v201[1] = @"NSJSONSerializationErrorIndex";
                  v202 = (__CFString *)v114;
                  v203 = (__CFString *)v115;
                  void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v202 forKeys:v201 count:2]);
                }
                _Block_object_dispose(&v197, 8);
                return;
              }
              v42 = (unsigned char *)v45;
              _Block_object_dispose(&v197, 8);
            }
            v46 = (const uint8_t *)*a1;
            int v47 = *(unsigned __int8 *)(*a1 + v5);
            if (v47 == 92) {
              break;
            }
            v42[v44] = v47;
LABEL_157:
            ++v44;
            if (++v5 >= v18) {
              goto LABEL_192;
            }
          }
          if (v5 >= v39)
          {
            if (v192)
            {
              v117 = a1 + 3;
              unint64_t v116 = a1[3];
              unint64_t v118 = a1[6];
              BOOL v31 = v116 >= v118;
              uint64_t v119 = v116 - v118;
              if (v31) {
                uint64_t v120 = v119;
              }
              else {
                uint64_t v120 = 0;
              }
              v121 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unfinished control character", a1[5], v120];
              v122 = [[NSNumber alloc] initWithUnsignedInteger:*v117];
              v202 = @"NSDebugDescription";
              v203 = @"NSJSONSerializationErrorIndex";
              v197 = v121;
              v198 = v122;
              void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
            }
            goto LABEL_238;
          }
          unsigned int v48 = v46[v5 + 1];
          unint64_t v49 = v5 + 2;
          if (v48 > 0x61)
          {
            switch(v46[v5 + 1])
            {
              case 'n':
                goto LABEL_98;
              case 'o':
              case 'p':
              case 'q':
              case 's':
                goto LABEL_104;
              case 'r':
                char v50 = 13;
                goto LABEL_155;
              case 't':
                char v50 = 9;
                goto LABEL_155;
              case 'u':
                int v196 = 0;
                if ((parseJSONUnicodePointAtLocation(a1, v49, v18 - 1, &v196, v192) & 1) == 0) {
                  goto LABEL_238;
                }
                if ((a1[1] & 8) != 0 && !v196)
                {
                  free(v42);
                  if (v192)
                  {
                    v138 = a1 + 3;
                    unint64_t v137 = a1[3];
                    unint64_t v139 = a1[6];
                    BOOL v31 = v137 >= v139;
                    uint64_t v140 = v137 - v139;
                    if (v31) {
                      uint64_t v141 = v140;
                    }
                    else {
                      uint64_t v141 = 0;
                    }
                    v142 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unsupported escaped (unicode) null", a1[5], v141];
                    v143 = [[NSNumber alloc] initWithUnsignedInteger:*v138];
                    v202 = @"NSDebugDescription";
                    v203 = @"NSJSONSerializationErrorIndex";
                    v197 = v142;
                    v198 = v143;
                    void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                  }
                  return;
                }
                if ((v196 & 0xFC00) == 0xD800)
                {
                  if (v5 + 11 > v39)
                  {
                    a1[3] = v5;
                    if (v192)
                    {
                      unint64_t v154 = a1[6];
                      BOOL v31 = v5 >= v154;
                      unint64_t v155 = v5 - v154;
                      if (v31) {
                        uint64_t v156 = v155;
                      }
                      else {
                        uint64_t v156 = 0;
                      }
                      v157 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during string parse (expected low-surrogate code point but did not find one).", a1[5], v156];
                      v158 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                      v202 = @"NSDebugDescription";
                      v203 = @"NSJSONSerializationErrorIndex";
                      v197 = v157;
                      v198 = v158;
                      void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                    }
                    goto LABEL_238;
                  }
                  unint64_t v56 = v5 + *a1;
                  if (*(unsigned char *)(v56 + 6) != 92 || *(unsigned char *)(v56 + 7) != 117)
                  {
                    a1[3] = v5;
                    if (v192)
                    {
                      unint64_t v144 = a1[6];
                      BOOL v31 = v5 >= v144;
                      unint64_t v145 = v5 - v144;
                      if (v31) {
                        uint64_t v146 = v145;
                      }
                      else {
                        uint64_t v146 = 0;
                      }
                      v147 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Missing low code point in surrogate pair", a1[5], v146];
                      v148 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                      v202 = @"NSDebugDescription";
                      v203 = @"NSJSONSerializationErrorIndex";
                      v197 = v147;
                      v198 = v148;
                      void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                    }
LABEL_238:
                    free(v42);
                    return;
                  }
                  if ((parseJSONUnicodePointAtLocation(a1, v5 + 8, v18 - 1, (_WORD *)&v196 + 1, v192) & 1) == 0) {
                    goto LABEL_238;
                  }
                  if ((HIWORD(v196) & 0xFC00) != 0xDC00)
                  {
                    a1[3] = v5;
                    if (v192)
                    {
                      unint64_t v169 = a1[6];
                      BOOL v31 = v5 >= v169;
                      unint64_t v170 = v5 - v169;
                      if (v31) {
                        uint64_t v171 = v170;
                      }
                      else {
                        uint64_t v171 = 0;
                      }
                      v172 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Invalid surrogate pair in unicode escape sequence", a1[5], v171];
                      v173 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                      v202 = @"NSDebugDescription";
                      v203 = @"NSJSONSerializationErrorIndex";
                      v197 = v172;
                      v198 = v173;
                      void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                    }
                    goto LABEL_238;
                  }
                  v189 = [[NSString alloc] initWithBytesNoCopy:&v196 length:4 encoding:2483028224 freeWhenDone:0];
                  v201[0] = 0;
                  BOOL v57 = -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v189, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v42[v44], 6, v201, 4, 0, 0, [(NSString *)v189 length], 0);

                  if (!v57)
                  {
                    a1[3] = v5;
                    if (v192)
                    {
                      unint64_t v174 = a1[6];
                      BOOL v31 = v5 >= v174;
                      unint64_t v175 = v5 - v174;
                      if (v31) {
                        uint64_t v176 = v175;
                      }
                      else {
                        uint64_t v176 = 0;
                      }
                      v177 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unable to convert hex escape sequence (with high character) to UTF8-encoded character", a1[5], v176];
                      v178 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                      v202 = @"NSDebugDescription";
                      v203 = @"NSJSONSerializationErrorIndex";
                      v197 = v177;
                      v198 = v178;
                      void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                    }
                    goto LABEL_238;
                  }
                  uint64_t v58 = v201[0];
                  v5 += 10;
                }
                else
                {
                  v190 = [[NSString alloc] initWithBytesNoCopy:&v196 length:2 encoding:2483028224 freeWhenDone:0];
                  v201[0] = 0;
                  BOOL v64 = -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v190, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v42[v44], 6, v201, 4, 0, 0, [(NSString *)v190 length], 0);

                  if (!v64)
                  {
                    a1[3] = v5;
                    if (v192)
                    {
                      unint64_t v159 = a1[6];
                      BOOL v31 = v5 >= v159;
                      unint64_t v160 = v5 - v159;
                      if (v31) {
                        uint64_t v161 = v160;
                      }
                      else {
                        uint64_t v161 = 0;
                      }
                      v162 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unable to convert hex escape sequence (no high character) to UTF8-encoded character.", a1[5], v161];
                      v163 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                      v202 = @"NSDebugDescription";
                      v203 = @"NSJSONSerializationErrorIndex";
                      v197 = v162;
                      v198 = v163;
                      void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                    }
                    goto LABEL_238;
                  }
                  uint64_t v58 = v201[0];
                  v5 += 4;
                }
                unint64_t v44 = v44 + v58 - 1;
                break;
              default:
                if (v48 == 98)
                {
                  char v50 = 8;
                }
                else
                {
                  if (v48 != 102) {
                    goto LABEL_104;
                  }
                  char v50 = 12;
                }
                goto LABEL_155;
            }
            goto LABEL_156;
          }
          switch(v48)
          {
            case '""':
              char v50 = 34;
              break;
            case '/':
              char v50 = 47;
              break;
            case '\\':
              char v50 = 92;
              break;
            default:
LABEL_104:
              uint64_t v51 = a1[1];
              uint64_t v52 = v51 & 8;
              if (v48 == 120 && v52 != 0)
              {
                uint8_t v59 = v46[v49];
                uint8_t v60 = v46[v5 + 3];
                char v61 = v59 - 48;
                if ((v59 - 48) >= 0xAu
                  && (v59 - 65 <= 0x25 ? (BOOL v62 = ((1 << (v59 - 65)) & 0x3F0000003FLL) == 0) : (BOOL v62 = 1),
                      v62)
                  || (unsigned __int8 v63 = v60 - 48, (v60 - 48) >= 0xAu)
                  && (v60 - 65 > 0x25 || ((1 << (v60 - 65)) & 0x3F0000003FLL) == 0))
                {
                  a1[3] = v5;
                  if (v192)
                  {
                    unint64_t v184 = a1[6];
                    BOOL v31 = v5 >= v184;
                    unint64_t v185 = v5 - v184;
                    if (v31) {
                      uint64_t v186 = v185;
                    }
                    else {
                      uint64_t v186 = 0;
                    }
                    v187 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unable to convert hex ('x') escape sequence character", a1[5], v186];
                    v188 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                    v202 = @"NSDebugDescription";
                    v203 = @"NSJSONSerializationErrorIndex";
                    v197 = v187;
                    v198 = v188;
                    void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                  }
                  goto LABEL_238;
                }
                if ((v59 - 48) >= 0xAu)
                {
                  if ((v59 - 65) > 5u)
                  {
                    if ((v59 - 97) > 5u) {
                      goto LABEL_314;
                    }
                    char v61 = v59 - 87;
                  }
                  else
                  {
                    char v61 = v59 - 55;
                  }
                }
                if ((v60 - 48) >= 0xAu)
                {
                  if ((v60 - 65) > 5u)
                  {
                    if ((v60 - 97) > 5u)
                    {
LABEL_314:
                      __break(1u);
                      return;
                    }
                    unsigned __int8 v63 = v60 - 87;
                  }
                  else
                  {
                    unsigned __int8 v63 = v60 - 55;
                  }
                }
                if (!(v63 | (16 * v61)))
                {
                  a1[3] = v5;
                  if (v192)
                  {
                    unint64_t v149 = a1[6];
                    BOOL v31 = v5 >= v149;
                    unint64_t v150 = v5 - v149;
                    if (v31) {
                      uint64_t v151 = v150;
                    }
                    else {
                      uint64_t v151 = 0;
                    }
                    v152 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unsupported escaped (hex) null", a1[5], v151];
                    v153 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                    v202 = @"NSDebugDescription";
                    v203 = @"NSJSONSerializationErrorIndex";
                    v197 = v152;
                    v198 = v153;
                    void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                  }
                  goto LABEL_238;
                }
                v42[v44] = v63 | (16 * v61);
                v5 += 2;
                goto LABEL_156;
              }
              if (v48 != 39 || v52 == 0)
              {
                if (v48 == 48 && (v51 & 8) != 0)
                {
                  a1[3] = v5;
                  if (v192)
                  {
                    unint64_t v164 = a1[6];
                    BOOL v31 = v5 >= v164;
                    unint64_t v165 = v5 - v164;
                    if (v31) {
                      uint64_t v166 = v165;
                    }
                    else {
                      uint64_t v166 = 0;
                    }
                    v167 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unsupported escaped null", a1[5], v166];
                    v168 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                    v202 = @"NSDebugDescription";
                    v203 = @"NSJSONSerializationErrorIndex";
                    v197 = v167;
                    v198 = v168;
                    void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                  }
                  goto LABEL_238;
                }
                if (v48 != 10 || (v51 & 8) == 0)
                {
                  if (v48 != 13 || (v51 & 8) == 0)
                  {
                    a1[3] = v5;
                    if (v192)
                    {
                      unint64_t v179 = a1[6];
                      BOOL v31 = v5 >= v179;
                      unint64_t v180 = v5 - v179;
                      if (v31) {
                        uint64_t v181 = v180;
                      }
                      else {
                        uint64_t v181 = 0;
                      }
                      v182 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Invalid escape sequence", a1[5], v181];
                      v183 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
                      v202 = @"NSDebugDescription";
                      v203 = @"NSJSONSerializationErrorIndex";
                      v197 = v182;
                      v198 = v183;
                      void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
                    }
                    goto LABEL_238;
                  }
                  if (v49 < v39 && v46[v49] == 10) {
                    ++v5;
                  }
                }
LABEL_98:
                char v50 = 10;
              }
              else
              {
                char v50 = 39;
              }
              break;
          }
LABEL_155:
          v42[v44] = v50;
LABEL_156:
          ++v5;
          goto LABEL_157;
        }
        unint64_t v44 = 0;
LABEL_192:
        v79 = off_1E51F42C8;
        if ((a1[1] & 2) != 0) {
          v79 = off_1E51F3FE0;
        }
        v80 = (void *)[objc_alloc(*v79) initWithBytesNoCopy:v42 length:v44 encoding:4 freeWhenDone:1];
        if (!v80)
        {
          if (v192)
          {
            v93 = a1 + 3;
            unint64_t v92 = a1[3];
            unint64_t v94 = a1[6];
            BOOL v31 = v92 >= v94;
            uint64_t v95 = v92 - v94;
            if (v31) {
              uint64_t v96 = v95;
            }
            else {
              uint64_t v96 = 0;
            }
            v97 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unable to convert data to string", a1[5], v96];
            v98 = [[NSNumber alloc] initWithUnsignedInteger:*v93];
            v202 = @"NSDebugDescription";
            v203 = @"NSJSONSerializationErrorIndex";
            v197 = v97;
            v198 = v98;
            void *v192 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
          }
          goto LABEL_238;
        }
        a1[3] = v39 + v13;
        _setInCache(v193, v80, v17, (uint64_t)__s2, v191);
      }
      else
      {
        v77 = [[NSString alloc] initWithBytes:*a1 + v5 length:v18 - v5 encoding:4];
        if (v77)
        {
          a1[3] = v39 + v13;
          _setInCache(v193, v77, v17, (uint64_t)__s2, v40);
        }
        else if (a3)
        {
          unint64_t v86 = a1[3];
          unint64_t v87 = a1[6];
          BOOL v31 = v86 >= v87;
          uint64_t v88 = v86 - v87;
          if (v31) {
            uint64_t v89 = v88;
          }
          else {
            uint64_t v89 = 0;
          }
          v90 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unable to convert data to string", a1[5], v89];
          v91 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
          v202 = @"NSDebugDescription";
          v203 = @"NSJSONSerializationErrorIndex";
          v197 = v90;
          v198 = v91;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
        }
      }
    }
    else
    {
      char v78 = v8 ^ 1;
      if (v19 != 13) {
        char v78 = 1;
      }
      if ((v78 & 1) == 0)
      {
        unint64_t v37 = v18;
        if (v14 > v18 + 1)
        {
          if (v16[v18 + 1] == 10) {
            unint64_t v37 = v18 + 1;
          }
          else {
            unint64_t v37 = v18;
          }
        }
        goto LABEL_73;
      }
      a1[3] = v18;
      if (a3)
      {
        unint64_t v81 = a1[6];
        BOOL v31 = v18 >= v81;
        uint64_t v82 = v18 - v81;
        if (v31) {
          uint64_t v83 = v82;
        }
        else {
          uint64_t v83 = 0;
        }
        v84 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unescaped control character", a1[5], v83];
        v85 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
        v202 = @"NSDebugDescription";
        v203 = @"NSJSONSerializationErrorIndex";
        v197 = v84;
        v198 = v85;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v197 forKeys:&v202 count:2]);
      }
    }
  }
}

void sub_18179B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *_NSNewValue(float64x2_t *a1, char *__s1, NSZone *a3)
{
  value[2] = *MEMORY[0x1E4F143B8];
  long long v35 = 0uLL;
  float64x2_t v34 = 0uLL;
  float64x2_t v33 = 0uLL;
  float64x2_t v31 = 0u;
  float64x2_t v32 = 0u;
  float64x2_t v29 = 0u;
  float64x2_t v30 = 0u;
  float64x2_t v27 = 0u;
  float64x2_t v28 = 0u;
  float64x2_t v26 = 0u;
  float64x2_t v25 = 0uLL;
  if (!strcmp(__s1, "{_NSRange=II}"))
  {
    *(void *)&long long v7 = *(void *)&a1->f64[0];
    *((void *)&v7 + 1) = HIDWORD(*(void *)&a1->f64[0]);
    long long v35 = v7;
    char v8 = &_NSCachedTypeInfoRange64;
    a1 = (float64x2_t *)&v35;
LABEL_24:
    uint64_t v9 = 4;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{_NSRange=QQ}"))
  {
    char v8 = &_NSCachedTypeInfoRange64;
    goto LABEL_24;
  }
  if (!strcmp(__s1, "{CGPoint=ff}"))
  {
    float64x2_t v34 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    char v8 = &_NSCachedTypeInfoPoint64;
    a1 = &v34;
LABEL_27:
    uint64_t v9 = 1;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGPoint=dd}"))
  {
    char v8 = &_NSCachedTypeInfoPoint64;
    goto LABEL_27;
  }
  if (!strcmp(__s1, "{CGSize=ff}"))
  {
    float64x2_t v33 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    char v8 = &_NSCachedTypeInfoSize64;
    a1 = &v33;
LABEL_30:
    uint64_t v9 = 2;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGSize=dd}"))
  {
    char v8 = &_NSCachedTypeInfoSize64;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "{CGRect={CGPoint=ff}{CGSize=ff}}"))
  {
    float64x2_t v10 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    float64x2_t v31 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    float64x2_t v32 = v10;
    char v8 = &_NSCachedTypeInfoRect64;
    a1 = &v31;
LABEL_33:
    uint64_t v9 = 3;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    char v8 = &_NSCachedTypeInfoRect64;
    goto LABEL_33;
  }
  if (!strcmp(__s1, "{CGAffineTransform=ffffff}"))
  {
    float64x2_t v11 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    float64x2_t v28 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    float64x2_t v29 = v11;
    float64x2_t v30 = vcvtq_f64_f32(*(float32x2_t *)&a1[1].f64[0]);
    char v8 = &_NSCachedTypeInfoCGAffineTransform64;
    a1 = &v28;
LABEL_36:
    uint64_t v9 = 10;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGAffineTransform=dddddd}"))
  {
    char v8 = &_NSCachedTypeInfoCGAffineTransform64;
    goto LABEL_36;
  }
  if (!strcmp(__s1, "{UIEdgeInsets=ffff}"))
  {
    float64x2_t v12 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    float64x2_t v26 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    float64x2_t v27 = v12;
    char v8 = &_NSCachedTypeInfoUIEdgeInsets64;
    a1 = &v26;
LABEL_39:
    uint64_t v9 = 11;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{UIEdgeInsets=dddd}"))
  {
    char v8 = &_NSCachedTypeInfoUIEdgeInsets64;
    goto LABEL_39;
  }
  if (!strcmp(__s1, "{NSEdgeInsets=ffff}"))
  {
    float64x2_t v13 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    float64x2_t v26 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    float64x2_t v27 = v13;
    char v8 = &_NSCachedTypeInfoNSEdgeInsets64;
    a1 = &v26;
LABEL_42:
    uint64_t v9 = 12;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{NSEdgeInsets=dddd}"))
  {
    char v8 = &_NSCachedTypeInfoNSEdgeInsets64;
    goto LABEL_42;
  }
  if (!strcmp(__s1, "{NSDirectionalEdgeInsets=ffff}"))
  {
    float64x2_t v14 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    float64x2_t v26 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    float64x2_t v27 = v14;
    char v8 = &_NSCachedTypeInfoNSDirectionalEdgeInsets64;
    a1 = &v26;
LABEL_45:
    uint64_t v9 = 14;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{NSDirectionalEdgeInsets=dddd}"))
  {
    char v8 = &_NSCachedTypeInfoNSDirectionalEdgeInsets64;
    goto LABEL_45;
  }
  if (!strcmp(__s1, "{UIOffset=ff}"))
  {
    float64x2_t v25 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    char v8 = &_NSCachedTypeInfoUIOffset64;
    a1 = &v25;
LABEL_48:
    uint64_t v9 = 13;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{UIOffset=dd}"))
  {
    char v8 = &_NSCachedTypeInfoUIOffset64;
    goto LABEL_48;
  }
  value[0] = 0;
  value[1] = __s1;
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
  CFMutableSetRef v6 = (CFMutableSetRef)qword_1EB1ECD08;
  if (!qword_1EB1ECD08)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
    memset(&callBacks, 0, 32);
    callBacks.hash = (CFSetHashCallBack)cachedObjCTypeInfoHash;
    callBacks.equal = (CFSetEqualCallBack)cachedObjCTypeInfoIsEqual;
    CFMutableSetRef v6 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, &callBacks);
    os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
    if (qword_1EB1ECD08)
    {
      CFRelease(v6);
      CFMutableSetRef v6 = (CFMutableSetRef)qword_1EB1ECD08;
    }
    else
    {
      qword_1EB1ECD08 = (uint64_t)v6;
    }
  }
  char v8 = (uint64_t *)CFSetGetValue(v6, value);
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
  if (!v8)
  {
    callBacks.CFIndex version = 0;
    NSGetSizeAndAlignment(__s1, (NSUInteger *)&callBacks, 0);
    CFIndex version = callBacks.version;
    size_t v16 = strlen(__s1);
    int v17 = (char *)malloc_type_malloc(v16 + 17, 0x2CF71276uLL);
    BOOL v24 = v17;
    if (!v17) {
      return 0;
    }
    *(void *)int v17 = version;
    *((void *)v17 + 1) = v17 + 16;
    strlcpy(v17 + 16, __s1, v16 + 1);
    os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
    char v8 = (uint64_t *)CFSetGetValue((CFSetRef)qword_1EB1ECD08, value);
    if (v8)
    {
      free(v24);
    }
    else
    {
      CFSetSetValue((CFMutableSetRef)qword_1EB1ECD08, v24);
      char v8 = (uint64_t *)v24;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
  }
  uint64_t v9 = 0;
LABEL_57:
  unint64_t v18 = (objc_class *)__NSConcreteValueClass;
  if (!__NSConcreteValueClass)
  {
    unint64_t v18 = (objc_class *)self;
    __NSConcreteValueClass = (uint64_t)v18;
  }
  size_t v19 = *v8;
  int v20 = objc_msgSend(NSAllocateObject(v18, *v8, a3), "init");
  unint64_t v21 = v20;
  if (v20)
  {
    v20[2] = v8;
    v20[1] = v9;
    IndexedIvars = object_getIndexedIvars(v20);
    memmove(IndexedIvars, a1, v19);
  }
  return v21;
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  id Instance = class_createInstance(aClass, extraBytes);
  if (!Instance)
  {
    long long v7 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"*** NSAllocateObject(): attempt to allocate object of class '%s' failed", class_getName(aClass)), 0 reason userInfo];
    objc_exception_throw(v7);
  }
  unint64_t v5 = Instance;
  if (*MEMORY[0x1E4F1CBC0])
  {
    object_getClassName(Instance);
    __CFSetLastAllocationEventName();
  }
  return v5;
}

id _setInCache(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 32 * a3;
  float64x2_t v10 = *(void **)(v9 + 16);
  if (v10) {

  }
  id result = a2;
  *(void *)(v9 + 16) = result;
  *(_DWORD *)(v9 + 24) = a3;
  *(void *)uint64_t v9 = a4;
  *(void *)(v9 + 8) = a5;
  return result;
}

id partial apply for closure #2 in LocaleCache.currentNSLocale()@<X0>(void *a1@<X8>)
{
  return closure #2 in LocaleCache.currentNSLocale()(*(_OWORD **)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t parseJSONUnicodePointAtLocation(void *a1, unint64_t a2, unint64_t a3, _WORD *a4, void *a5)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  if (a2 + 3 > a3)
  {
    a1[3] = a2;
    if (a5)
    {
      unint64_t v7 = a1[6];
      BOOL v8 = a2 >= v7;
      uint64_t v9 = a2 - v7;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      float64x2_t v11 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Early end of unicode escape sequence", a1[5], v10];
      goto LABEL_7;
    }
    return 0;
  }
  int v15 = 0;
  uint64_t v16 = 16;
  while (1)
  {
    int v17 = *(unsigned __int8 *)(*a1 + a2);
    unsigned __int8 v18 = v17 - 48;
    if ((v17 - 48) >= 0xA) {
      break;
    }
LABEL_15:
    ++a2;
    v16 -= 4;
    v15 += v18 << v16;
    if (!v16)
    {
      *a4 = v15;
      return 1;
    }
  }
  if ((v17 - 65) <= 5)
  {
    unsigned __int8 v18 = v17 - 55;
    goto LABEL_15;
  }
  if ((v17 - 97) <= 5)
  {
    unsigned __int8 v18 = v17 - 87;
    goto LABEL_15;
  }
  a1[3] = a2;
  if (a5)
  {
    unint64_t v19 = a1[6];
    BOOL v8 = a2 >= v19;
    uint64_t v20 = a2 - v19;
    if (v8) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    float64x2_t v11 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Invalid hex digit in unicode escape sequence", a1[5], v21];
LABEL_7:
    float64x2_t v12 = v11;
    float64x2_t v13 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
    v22[0] = @"NSDebugDescription";
    v22[1] = @"NSJSONSerializationErrorIndex";
    v23[0] = v12;
    v23[1] = v13;
    *a5 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:2]);
  }
  return 0;
}

uint64_t getEnumTagSinglePayload for URLQueryItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for CharacterSet()
{
  return &type metadata for CharacterSet;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t partial apply for closure #1 in static String._unconditionallyBridgeFromObjectiveC(_:)(uint64_t result)
{
  if (result) {
    return _NSTaggedPointerStringGetBytes();
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for iovec(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ExpressionStructure.CodingKeys(unsigned char *result, char a2)
{
  *id result = a2 & 1;
  return result;
}

void *__swift_memcpy282_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x11AuLL);
}

void protocol witness for Hashable.hash(into:) in conformance Date()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)id result = v2;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1)
{
  return JSONDecoderImpl.KeyedContainer.contains(_:)(a1, *v1, v1[1], v1[2]);
}

uint64_t destroy for JSONDecoderImpl.KeyedContainer()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance NumberFormatStyleConfiguration.Notation.Option@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t Measurement.init(value:unit:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  return result;
}

ValueMetadata *type metadata accessor for Calendar()
{
  return &type metadata for Calendar;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 == *a2;
}

id *clearARCWeakAt(id *location)
{
  Swift::UInt64 v1 = location;
  if (*location) {
    location = (id *)objc_storeWeak(location, 0);
  }
  *Swift::UInt64 v1 = 0;
  return location;
}

uint64_t NSConcreteMapTable_reclaim(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 0;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 24;
  uint64_t v15 = a1 + 16;
  uint64_t v16 = a1 + 8;
  do
  {
    CFMutableSetRef v6 = (void *)MEMORY[0x185308110]();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 32) + 24))(*(void *)(a1 + 8) + v2, 0);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 64) + 24))(*(void *)(a1 + 40) + v2, 0);
    if (v7 | v8)
    {
      uint64_t v9 = v8;
      if (v7) {
        BOOL v10 = v8 == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        float64x2_t v12 = *(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 16);
        if (v12) {
          v12(v7, *(void *)(*(void *)(a1 + 24) + 8));
        }
        (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 48))(*(void *)(a1 + 8) + v2);
        *(unsigned char *)(a1 + 116) = 1;
        (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 32))(v7);
      }
      else
      {
        if (v7) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v8 == 0;
        }
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 32))(v7);
          (*(void (**)(uint64_t))(*(void *)(v5 + 40) + 32))(v9);
          ++v4;
        }
        else
        {
          float64x2_t v13 = *(void (**)(uint64_t, void))(*(void *)(v16 + 40) + 16);
          if (v13) {
            v13(v8, *(void *)(*(void *)(v15 + 8) + 8));
          }
          (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 48))(*(void *)(a1 + 40) + v2);
          *(unsigned char *)(a1 + 116) = 1;
          (*(void (**)(uint64_t))(*(void *)(v5 + 40) + 32))(v9);
        }
      }
    }
    ++v3;
    v2 += 8;
  }
  while (v3 < *(void *)(a1 + 80));
  return v4;
}

uint64_t hashProbe(void *a1, uint64_t a2, uint64_t *a3, unsigned char *a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(a1[3] + 16))(a2, *(void *)(a1[3] + 8));
  unint64_t v10 = (0x8D6271D7234E6D5ALL - v9) ^ ((v9 - 0x24FCFFB6D7ECFEF6) << 9);
  unint64_t v11 = (0x24FCFFB6D7ECFEF7 - v9 - v10) ^ (v10 >> 8);
  uint64_t v12 = (v9 - 0x24FCFFB6D7ECFEF6 - v10 - v11) ^ (v11 >> 38);
  unint64_t v13 = (v10 - v11 - v12) ^ (v12 << 23);
  unint64_t v14 = (v11 - v12 - v13) ^ (v13 >> 5);
  uint64_t v15 = (v12 - v13 - v14) ^ (v14 >> 35);
  unint64_t v16 = (v13 - v14 - v15) ^ (v15 << 49);
  unint64_t v17 = (v14 - v15 - v16) ^ (v16 >> 11);
  uint64_t v18 = (v15 - v16 - v17) ^ (v17 >> 12);
  uint64_t v26 = ((v17 - v18 - ((v16 - v17 - v18) ^ (v18 << 18))) ^ (((v16 - v17 - v18) ^ (v18 << 18)) >> 22)) & (a1[6] - 1);
  if (a4) {
    *a4 = 0;
  }
LABEL_3:
  for (uint64_t i = v26; ; uint64_t i = (a1[6] - 1) & (i + 1))
  {
    char v27 = 1;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, char *))(a1[4] + 24))(a1[1] + 8 * i, &v27);
    if (v20) {
      break;
    }
    if (v27) {
      return i;
    }
    if (a5)
    {
      (*(void (**)(uint64_t))(a1[4] + 48))(a1[1] + 8 * i);
      uint64_t v22 = a1[5];
      if (v22) {
        a1[5] = v22 - 1;
      }
      else {
        [a1 raiseCountUnderflowException];
      }
      [a1 rehashAround:i];
      goto LABEL_3;
    }
LABEL_9:
    ;
  }
  uint64_t v21 = v20;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(a1[3] + 24))(a2, v20, *(void *)(a1[3] + 8)))
  {
    (*(void (**)(uint64_t))(a1[4] + 32))(v21);
    goto LABEL_9;
  }
  uint64_t v23 = a1[4];
  if (a3)
  {
    (*(void (**)(uint64_t))(v23 + 40))(v21);
    *a3 = v21;
  }
  else
  {
    (*(void (**)(uint64_t))(v23 + 32))(v21);
  }
  if (a4) {
    *a4 = 1;
  }
  return i;
}

id startReadARCWeakAutoreleasingWithSentinelAt(id *a1, BOOL *a2)
{
  id v2 = *a1;
  if (a2) {
    *a2 = v2 == (id)1;
  }
  if ((unint64_t)v2 >= 2) {
    return objc_loadWeak(a1);
  }
  else {
    return 0;
  }
}

uint64_t probeGC(void *a1, unint64_t a2, unsigned char *a3, uint64_t *a4, int a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1[3];
  if (*(unsigned char *)(v7 + 1))
  {
    uint64_t v8 = a2;
  }
  else if (*(unsigned char *)v7)
  {
    uint64_t v8 = a2 >> 3;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(unint64_t, void))(v7 + 16))(a2, *(void *)(v7 + 8));
  }
  unint64_t v9 = (0x8D6271D7234E6D5ALL - v8) ^ ((v8 - 0x24FCFFB6D7ECFEF6) << 9);
  unint64_t v10 = (0x24FCFFB6D7ECFEF7 - (v8 + v9)) ^ (v9 >> 8);
  uint64_t v11 = (v8 - 0x24FCFFB6D7ECFEF6 - (v9 + v10)) ^ (v10 >> 38);
  unint64_t v12 = (v9 - (v10 + v11)) ^ (v11 << 23);
  unint64_t v13 = (v10 - (v11 + v12)) ^ (v12 >> 5);
  uint64_t v14 = (v11 - (v12 + v13)) ^ (v13 >> 35);
  unint64_t v15 = (v12 - (v13 + v14)) ^ (v14 << 49);
  unint64_t v16 = (v13 - (v14 + v15)) ^ (v15 >> 11);
  uint64_t v17 = (v14 - (v15 + v16)) ^ (v16 >> 12);
  uint64_t v18 = ((v16 - (v17 + ((v15 - (v16 + v17)) ^ (v17 << 18)))) ^ (((v15 - (v16 + v17)) ^ (v17 << 18)) >> 22)) & (a1[10] - 1);
  uint64_t v32 = v18;
  while (1)
  {
    char v34 = 1;
    unint64_t v19 = a1 + 1;
    uint64_t v20 = a1[4];
    int v21 = *(unsigned __int8 *)(v20 + 4);
    if (!*(unsigned char *)(v20 + 4)) {
      break;
    }
    uint64_t v22 = *(void *)(*v19 + 8 * v18);
    if (v22) {
      goto LABEL_9;
    }
LABEL_12:
    if (v34) {
      return v18;
    }
    if (a5)
    {
      (*(void (**)(uint64_t))(a1[4] + 48))(a1[1] + 8 * v18);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(a1[8] + 24))(a1[5] + 8 * v18, 0);
      uint64_t v24 = v23;
      float64x2_t v25 = *(void (**)(uint64_t, void))(a1[6] + 16);
      if (v25) {
        BOOL v26 = v23 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26) {
        v25(v23, *(void *)(a1[7] + 8));
      }
      (*(void (**)(uint64_t))(a1[8] + 32))(v24);
      (*(void (**)(uint64_t))(a1[8] + 48))(a1[5] + 8 * v18);
      uint64_t v27 = a1[9];
      if (v27) {
        a1[9] = v27 - 1;
      }
      else {
        [a1 raiseCountUnderflowException];
      }
      [a1 rehashAround:v18];
      uint64_t v18 = v32;
    }
    else
    {
LABEL_21:
      if (!v21) {
        (*(void (**)(uint64_t))(a1[4] + 32))(v22);
      }
      uint64_t v18 = (a1[10] - 1) & (v18 + 1);
    }
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, char *))(v20 + 24))(*v19 + 8 * v18, &v34);
  if (!v22) {
    goto LABEL_12;
  }
LABEL_9:
  if (!(*(unsigned int (**)(unint64_t, uint64_t, void))(a1[3] + 24))(a2, v22, *(void *)(a1[3] + 8)))goto LABEL_21; {
  if (a3)
  }
    *a3 = 1;
  if (a4)
  {
    *a4 = v22;
    if (!v21)
    {
      uint64_t v28 = (void (**)(uint64_t))(a1[4] + 40);
      goto LABEL_33;
    }
  }
  else if (!v21)
  {
    uint64_t v28 = (void (**)(uint64_t))(a1[4] + 32);
LABEL_33:
    (*v28)(v22);
  }
  return v18;
}

BOOL pointerEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t storePointerAt(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 8 * a2) = a3;
  return result;
}

uint64_t objectEqual(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return [a1 isEqual:a2];
  }
}

id startReadARCWeakAutoreleasingAt(id *a1, BOOL *a2)
{
  if (*a1)
  {
    id result = objc_loadWeak(a1);
    if (!a2) {
      return result;
    }
  }
  else
  {
    id result = 0;
    if (!a2) {
      return result;
    }
  }
  *a2 = result == 0;
  return result;
}

void *retainingAcquire(void *a1, const char *a2, int a3)
{
  if (a3) {
    return (void *)[a1 copy];
  }
  else {
    return a1;
  }
}

id storeARCWeakAt(uint64_t a1, uint64_t a2, id obj)
{
  unint64_t v3 = (id *)(a1 + 8 * a2);
  if (*v3 == (id)1) {
    id *v3 = 0;
  }
  return objc_storeWeak(v3, obj);
}

unint64_t pointerHash(unint64_t a1)
{
  return a1 >> 3;
}

uint64_t allocateInitialCapacity(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"*** NSHashTable unable to allocate memory -- allocation function failed" userInfo:0]);
  }
  return result;
}

uint64_t allocateInitialCapacity_0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"*** NSMapTable unable to allocate memory -- allocation function failed" userInfo:0]);
  }
  return result;
}

uint64_t allocateInitialCapacity_1(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"*** NSPointerArray unable to allocate memory -- allocation function failed" userInfo:0]);
  }
  return result;
}

void *allocateStorage(size_t a1)
{
  if (a1 >> 61) {
    return 0;
  }
  else {
    return malloc_type_calloc(a1, 8uLL, 0x80040B8603338uLL);
  }
}

uint64_t empty(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = (void *)result;
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(v3[3] + 24))(*v3 + v4, 0);
      uint64_t v6 = v5;
      if (v5)
      {
        uint64_t v7 = *(void (**)(uint64_t, void))(v3[1] + 16);
        if (v7) {
          v7(v5, *(void *)(v3[2] + 8));
        }
      }
      (*(void (**)(uint64_t))(v3[3] + 48))(*v3 + v4);
      uint64_t result = (*(uint64_t (**)(uint64_t))(v3[3] + 32))(v6);
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t empty_0(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = (void *)result;
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(v3[3] + 24))(*v3 + v4, 0);
      uint64_t v6 = v5;
      if (v5)
      {
        uint64_t v7 = *(void (**)(uint64_t, void))(v3[1] + 16);
        if (v7) {
          v7(v5, *(void *)(v3[2] + 8));
        }
      }
      (*(void (**)(uint64_t))(v3[3] + 32))(v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(v3[3] + 48))(*v3 + v4);
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t startReadPointerAt(uint64_t *a1, BOOL *a2)
{
  uint64_t result = *a1;
  if (a2) {
    *a2 = result == 0;
  }
  return result;
}

void *clearPointerAt(void *result)
{
  *uint64_t result = 0;
  return result;
}

id *clearARCWeakAtWithSentinel(id *location)
{
  Swift::UInt64 v1 = location;
  if ((unint64_t)*location >= 2) {
    location = (id *)objc_storeWeak(location, 0);
  }
  *Swift::UInt64 v1 = (id)1;
  return location;
}

uint64_t cStringHash(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();

  return MEMORY[0x1F40D8620](a1, v3);
}

uint64_t cStringHash_0(const char *a1)
{
  strlen(a1);

  return CFStringHashCString();
}

void *allocateStorageWithSentinel(unint64_t a1)
{
  if (a1 >> 61) {
    return 0;
  }
  uint64_t result = malloc_type_malloc(8 * a1, 0x80040B8603338uLL);
  if (result && a1)
  {
    for (uint64_t i = 0; i != a1; ++i)
      result[i] = 1;
  }
  return result;
}

uint64_t dealloc(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 24);
  if (v2)
  {
    uint64_t v4 = (uint64_t *)result;
    if (v2[3] && v2[6])
    {
      uint64_t result = empty_0(result, a2);
      uint64_t v2 = (void *)v4[3];
    }
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v2[2];
    if (v5)
    {
      uint64_t v6 = *v4;
      return v5(v6, a2);
    }
  }
  return result;
}

void freeWeakStorage(id *location, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = location;
    do
    {
      if ((unint64_t)*v4 >= 2) {
        objc_storeWeak(v4, 0);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  free(location);
}

unint64_t NSKeyValueShareableObservationInfoNSHTHash(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (objc_opt_class() != qword_1EB1ED260) {
    return *(void *)(a1 + 16);
  }
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      LOBYTE(v3) = CFArrayGetCount(*(CFArrayRef *)(v3 + 8)) & 0x3F;
    }
    else
    {
      uint64_t v4 = 0;
    }
    LODWORD(v9) = 0;
    long long v10 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&v35[16] = v10;
    uint64_t v11 = &v35[3];
    for (unint64_t i = 36; i > 7; i -= 4)
    {
      unsigned int v13 = *(v11 - 3) + 16 * v9;
      unsigned int v14 = *(v11 - 2) + 16 * (v13 ^ (16 * (v13 >> 28)));
      unsigned int v15 = *(v11 - 1) + 16 * (v14 ^ (16 * (v14 >> 28)));
      int v16 = *v11;
      v11 += 4;
      int v17 = v16 + 16 * (v15 ^ (16 * (v15 >> 28)));
      unint64_t v9 = (v17 ^ ((v17 & 0xF0000000) >> 24)) & ~(v17 & 0xF0000000);
    }
    return ((v9 << v3) | (v9 >> v3)) ^ v4;
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 16) + 8));
    CFIndex v6 = Count;
    size_t v7 = 8 * Count;
    if ((unint64_t)(8 * Count) < 0x81)
    {
      if (Count)
      {
        MEMORY[0x1F4188790](Count);
        uint64_t v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
        bzero(v8, v7);
      }
      else
      {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    }
    objc_msgSend(*(id *)(*(void *)(a1 + 16) + 8), "getObjects:range:", v8, 0, v6);
    uint64_t v2 = 0;
    if (v6)
    {
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = *(void *)(a1 + 72);
      while (v19 == v21)
      {
LABEL_31:
        if (++v19 == v6)
        {
          if (v7 > 0x80) {
            free(v8);
          }
          return v2;
        }
      }
      uint64_t v22 = *(void *)&v8[8 * v19];
      if (v22)
      {
        if ((*(unsigned char *)(v22 + 40) & 0x20) != 0) {
          uint64_t v23 = 8;
        }
        else {
          uint64_t v23 = 32;
        }
        uint64_t v24 = *(void *)(v22 + v23);
        if ((*(unsigned char *)(v22 + 40) & 0x20) != 0) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v24 = 0;
        if ((MEMORY[0x28] & 0x20) != 0)
        {
LABEL_25:
          uint64_t v25 = *(void *)(v22 + 32);
          goto LABEL_28;
        }
      }
      uint64_t v25 = 0;
LABEL_28:
      LODWORD(v26) = 0;
      long long v27 = *(_OWORD *)(v22 + 16);
      *(void *)uint64_t v35 = v24;
      *(_OWORD *)&v35[8] = v27;
      *(void *)&v35[24] = v25;
      uint64_t v28 = &v35[3];
      for (unint64_t j = 36; j > 7; j -= 4)
      {
        unsigned int v30 = *(v28 - 3) + 16 * v26;
        unsigned int v31 = *(v28 - 2) + 16 * (v30 ^ (16 * (v30 >> 28)));
        unsigned int v32 = *(v28 - 1) + 16 * (v31 ^ (16 * (v31 >> 28)));
        int v33 = *v28;
        v28 += 4;
        int v34 = v33 + 16 * (v32 ^ (16 * (v32 >> 28)));
        unint64_t v26 = (v34 ^ ((v34 & 0xF0000000) >> 24)) & ~(v34 & 0xF0000000);
      }
      v2 ^= (v26 << (v20 & 0x3F)) | (v26 >> (v20 & 0x3F));
      ++v20;
      goto LABEL_31;
    }
  }
  return v2;
}

uint64_t NSKeyValueShareableObservationInfoNSHTIsEqual(CFArrayRef *a1, CFArrayRef *a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return 1;
  }
  if (object_getClass(a1) == (Class)qword_1EB1ED260 || object_getClass(a2) == (Class)qword_1EB1ED260)
  {
    Class Class = object_getClass(a1);
    if (Class == (Class)qword_1EB1ED260) {
      unsigned int v14 = a2;
    }
    else {
      unsigned int v14 = a1;
    }
    if (Class == (Class)qword_1EB1ED260) {
      unsigned int v15 = a1;
    }
    else {
      unsigned int v15 = a2;
    }
    CFArrayRef v16 = v15[2];
    if (*((unsigned char *)v15 + 8))
    {
      if (v16) {
        unint64_t Count = [*((id *)v16 + 1) count];
      }
      else {
        unint64_t Count = 0;
      }
      uint64_t v25 = [(__CFArray *)v14[1] count];
      if (v25 == Count + 1)
      {
        if (Count >> 60) {
          goto LABEL_100;
        }
        unint64_t v26 = v25;
        if (Count <= 1) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = Count;
        }
        double v28 = MEMORY[0x1F4188790](v27);
        unsigned int v30 = (char *)&v74 - v29;
        uint64_t v76 = 0;
        if (Count >= 0x101)
        {
          unsigned int v30 = (char *)_CFCreateArrayStorage();
          uint64_t v24 = v30;
        }
        else
        {
          uint64_t v24 = 0;
        }
        CFArrayRef v36 = v15[2];
        if (v36) {
          objc_msgSend(*((id *)v36 + 1), "getObjects:range:", v30, 0, Count, v28);
        }
        if (v26 >> 60)
        {
          CFStringRef v70 = CFStringCreateWithFormat(0, 0, @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt", v28, v26);
          unint64_t v71 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v70 userInfo:0];
          CFRelease(v70);
          objc_exception_throw(v71);
        }
        if (v26 <= 1) {
          uint64_t v37 = 1;
        }
        else {
          uint64_t v37 = v26;
        }
        MEMORY[0x1F4188790](v37);
        unint64_t v39 = (char *)&v74 - v38;
        uint64_t v40 = 0;
        uint64_t v75 = 0;
        if (v26 >= 0x101)
        {
          uint64_t v40 = _CFCreateArrayStorage();
          unint64_t v39 = (char *)v40;
        }
        -[__CFArray getObjects:range:](v14[1], "getObjects:range:", v39, 0, v26);
        if (Count)
        {
          unint64_t v41 = Count;
          v42 = v39;
          while (*(void *)v30 == *(void *)v42)
          {
            v42 += 8;
            v30 += 8;
            if (!--v41) {
              goto LABEL_61;
            }
          }
        }
        else
        {
LABEL_61:
          uint64_t v43 = *(void *)&v39[8 * Count];
          if (*(CFArrayRef *)(v43 + 16) == v15[4]
            && v15[5] == (CFArrayRef)(*(unsigned char *)(v43 + 40) & 0xF)
            && *(CFArrayRef *)(v43 + 24) == v15[6])
          {
            CFArrayRef v44 = (*(unsigned char *)(v43 + 40) & 0x20) != 0 ? *(const __CFArray **)(v43 + 32) : 0;
            if (v44 == v15[7])
            {
              BOOL v31 = *(void *)(v43 + 8) == (void)v15[3];
              goto LABEL_95;
            }
          }
        }
        BOOL v31 = 0;
LABEL_95:
        unint64_t v66 = (void *)v40;
        goto LABEL_96;
      }
      return 0;
    }
    unint64_t Count = CFArrayGetCount(*((CFArrayRef *)v16 + 1));
    CFIndex v18 = CFArrayGetCount(v14[1]);
    if (v18 != Count - 1) {
      return 0;
    }
    if (Count >> 60) {
      goto LABEL_100;
    }
    unint64_t v19 = v18;
    if (Count <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = Count;
    }
    double v21 = MEMORY[0x1F4188790](v20);
    uint64_t v23 = (char *)&v74 - v22;
    uint64_t v76 = 0;
    if (Count >= 0x101)
    {
      uint64_t v23 = (char *)_CFCreateArrayStorage();
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v24 = 0;
    }
    objc_msgSend(*((id *)v15[2] + 1), "getObjects:range:", v23, 0, Count, v21);
    if (v19 >> 60)
    {
      CFStringRef v72 = CFStringCreateWithFormat(0, 0, @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt", v19);
      uint64_t v73 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v72 userInfo:0];
      CFRelease(v72);
      objc_exception_throw(v73);
    }
    if (v19 <= 1) {
      uint64_t v45 = 1;
    }
    else {
      uint64_t v45 = v19;
    }
    MEMORY[0x1F4188790](v45);
    int v47 = (char *)&v74 - v46;
    uint64_t v48 = 0;
    uint64_t v75 = 0;
    if (v19 >= 0x101)
    {
      uint64_t v48 = _CFCreateArrayStorage();
      int v47 = (char *)v48;
    }
    -[__CFArray getObjects:range:](v14[1], "getObjects:range:", v47, 0, v19);
    CFArrayRef v49 = v15[9];
    if (v49)
    {
      CFArrayRef v50 = v15[9];
      uint64_t v51 = v23;
      uint64_t v52 = v47;
      while (*(void *)v51 == *(void *)v52)
      {
        v52 += 8;
        v51 += 8;
        CFArrayRef v50 = (CFArrayRef)((char *)v50 - 1);
        if (!v50) {
          goto LABEL_78;
        }
      }
    }
    else
    {
LABEL_78:
      unint64_t v53 = Count + ~(unint64_t)v49;
      if (!v53)
      {
        BOOL v31 = 1;
        goto LABEL_91;
      }
      v54 = &v23[8 * (void)v49];
      if (*((void *)v54 + 1) == *(void *)&v47[8 * (void)v49])
      {
        uint64_t v59 = 0;
        uint8_t v60 = v54 + 16;
        uint64_t v61 = (uint64_t)&v47[8 * (void)v49 + 8];
        uint64_t v62 = Count - (void)v49 - 2;
        do
        {
          uint64_t v63 = v59;
          if (v62 == v59) {
            break;
          }
          uint64_t v64 = *(void *)&v60[8 * v59];
          uint64_t v65 = *(void *)(v61 + 8 * v59++);
        }
        while (v64 == v65);
        BOOL v31 = v63 + 1 >= v53;
        goto LABEL_91;
      }
    }
    BOOL v31 = 0;
LABEL_91:
    unint64_t v66 = (void *)v48;
LABEL_96:
    free(v66);
    free(v24);
    return v31;
  }
  unint64_t Count = CFArrayGetCount(a1[1]);
  CFIndex v5 = CFArrayGetCount(a2[1]);
  if (v5 != Count) {
    return 0;
  }
  if (Count >> 60)
  {
LABEL_100:
    CFStringRef v68 = CFStringCreateWithFormat(0, 0, @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt", Count);
    v69 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v68 userInfo:0];
    CFRelease(v68);
    objc_exception_throw(v69);
  }
  if (Count <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = Count;
  }
  if (Count >= 0x101) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = 8 * v7;
  double v9 = MEMORY[0x1F4188790](v5);
  uint64_t v11 = (uint64_t *)((char *)&v74 - v10);
  uint64_t v76 = 0;
  if (Count >= 0x101)
  {
    uint64_t v11 = (void *)_CFCreateArrayStorage();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v32 = -[__CFArray getObjects:range:](a1[1], "getObjects:range:", v11, 0, Count, v9);
  MEMORY[0x1F4188790](v32);
  int v33 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v34 = 0;
  uint64_t v75 = 0;
  if (Count < 0x101)
  {
    uint64_t v35 = v33;
  }
  else
  {
    int v34 = (void *)_CFCreateArrayStorage();
    uint64_t v35 = v34;
  }
  -[__CFArray getObjects:range:](a2[1], "getObjects:range:", v35, 0, Count);
  if (Count)
  {
    if (*v11 == *v35)
    {
      uint64_t v55 = 1;
      do
      {
        unint64_t v56 = v55;
        if (Count == v55) {
          break;
        }
        uint64_t v57 = v11[v55];
        uint64_t v58 = v35[v55++];
      }
      while (v57 == v58);
      BOOL v17 = v56 >= Count;
    }
    else
    {
      BOOL v17 = 0;
    }
  }
  else
  {
    BOOL v17 = 1;
  }
  free(v34);
  free(v12);
  return v17;
}

void sub_1817A0618(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_1817A0684()
{
}

uint64_t NSKeyValueProxyHash(void *a1)
{
  uint64_t v1 = [a1 _proxyLocator];
  return v1 ^ [v2 hash];
}

BOOL valueEqual(const void *a1, const void *a2, uint64_t (*a3)(void))
{
  size_t v6 = a3();
  return v6 == ((uint64_t (*)(const void *))a3)(a2) && memcmp(a1, a2, v6) == 0;
}

size_t cStringSize(const char *a1)
{
  return strlen(a1) + 1;
}

uint64_t NSKeyValueProxyIsEqual(void *a1, void *a2)
{
  uint64_t v3 = [a1 _proxyLocator];
  CFIndex v5 = v4;
  if (v3 != [a2 _proxyLocator]) {
    return 0;
  }
  if (v5 == v6) {
    return 1;
  }

  return [v5 isEqual:v6];
}

void *mallocAcquire(const void *a1, uint64_t (*a2)(const void *), int a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    size_t v4 = a2(a1);
    CFIndex v5 = malloc_type_calloc(1uLL, v4, 0x80CAF228uLL);
    memmove(v5, v3, v4);
    return v5;
  }
  return (void *)v3;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a2 >= *a1;
}

uint64_t __DataStorage._length.getter()
{
  return *(void *)(v0 + 24);
}

ValueMetadata *type metadata accessor for Data.Iterator()
{
  return &type metadata for Data.Iterator;
}

uint64_t getEnumTagSinglePayload for NSObject.KeyValueObservingPublisher(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void *initializeBufferWithCopyOfBuffer for JSONDecoderImpl.KeyedContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 >= *a2;
}

ValueMetadata *type metadata accessor for LocalizedStringResource()
{
  return &type metadata for LocalizedStringResource;
}

void _encodeObject(uint64_t a1, const void *a2, void *value, int a4)
{
  CFIndex v5 = value;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  valuea[0] = value;
  CFSetRef v8 = *(const __CFSet **)(a1 + 120);
  if (v8)
  {
    int v9 = CFSetContainsValue(v8, value);
    BOOL v10 = v9 != 0;
    CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 56);
    if (!v11)
    {
      if (v9) {
        goto LABEL_16;
      }
      goto LABEL_9;
    }
  }
  else
  {
    CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 56);
    if (!v11)
    {
LABEL_9:
      uint64_t v13 = [v5 replacementObjectForKeyedArchiver:a1];
      if (v13 && *(void *)(a1 + 24) && (objc_opt_respondsToSelector() & 1) != 0) {
        uint64_t v13 = [*(id *)(a1 + 24) archiver:a1 willEncodeObject:v13];
      }
      [(id)a1 replaceObject:v5 withObject:v13];
      CFIndex v5 = (void *)v13;
      goto LABEL_16;
    }
    BOOL v10 = 0;
  }
  int v12 = CFDictionaryContainsKey(v11, v5);
  if (!v10 && !v12) {
    goto LABEL_9;
  }
  if (v12)
  {
    CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), v5, (const void **)valuea);
    CFIndex v5 = valuea[0];
  }
LABEL_16:
  unsigned int v14 = (objc_class *)[v5 classForKeyedArchiver];
  if (v14 || (unsigned int v14 = (objc_class *)objc_opt_class()) != 0)
  {
    if ([(id)a1 requiresSecureCoding]) {
      [(id)a1 validateClassSupportsSecureCoding:v14];
    }
  }
  if (!v5)
  {
    unsigned int v16 = 0;
LABEL_29:
    CFTypeRef v19 = __NSKeyedArchiverUIDCreateCached(*MEMORY[0x1E4F1CF80], v16, a1);
    addValueToTopContainerE(a1, a2, v19);
    CFRelease(v19);
    return;
  }
  valuea[0] = 0;
  int ValueIfPresent = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), v5, (const void **)valuea);
  unsigned int v16 = valuea[0];
  if (ValueIfPresent) {
    BOOL v17 = LODWORD(valuea[0]) == -1;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17) {
    goto LABEL_29;
  }
  valuea[0] = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 72), v5, (const void **)valuea))
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v5);
    unsigned int v18 = valuea[0];
  }
  else
  {
    [*(id *)(a1 + 40) addObject:@"$null"];
    unsigned int v18 = [*(id *)(a1 + 40) count] - 1;
  }
  CFIndex v20 = v18;
  if (a4) {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), v5, (const void *)v18);
  }
  else {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v5, (const void *)v18);
  }
  uint64_t v21 = *MEMORY[0x1E4F1CF80];
  CFTypeRef v22 = __NSKeyedArchiverUIDCreateCached(*MEMORY[0x1E4F1CF80], v20, a1);
  addValueToTopContainerE(a1, a2, v22);
  CFRelease(v22);
  if ((a4 & 1) == 0)
  {
    uint64_t v23 = (__objc2_class *)v14;
    if (*class_getName(v14) == 37)
    {
      Name = class_getName(v14);
      uint64_t v23 = (__objc2_class *)objc_lookUpClass(Name + 1);
    }
    if (v23)
    {
      uint64_t v25 = (NSString *)[(id)a1 classNameForClass:v23];
      if (v25 || (uint64_t v25 = (NSString *)[(id)objc_opt_class() classNameForClass:v23]) != 0) {
        uint64_t v23 = (__objc2_class *)NSClassFromString(v25);
      }
    }
    _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v23, 1);
    if (v23 == (__objc2_class *)__NSStringClass)
    {
      if ([v5 length] != 5 || objc_msgSend(v5, "compare:", @"$null")) {
        goto LABEL_48;
      }
    }
    else if (v23 == NSNumber || v23 == (__objc2_class *)MEMORY[0x1E4F1C9B8])
    {
LABEL_48:
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), v20, v5);
      goto LABEL_122;
    }
    uint64_t v26 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    uint64_t v27 = objc_opt_new();
    _CFDictionarySetCapacity();
    [*(id *)(a1 + 32) addObject:v27];
    ++*(void *)(a1 + 112);

    unint64_t v28 = atomic_load((unint64_t *)(a1 + 16));
    if (v28 != *(void *)(a1 + 128)) {
      goto LABEL_125;
    }
    unint64_t v29 = atomic_load((unint64_t *)(a1 + 16));
    atomic_store(v29 & 0xFFFFFFFFFFFFFFFELL, (unint64_t *)(a1 + 16));
    unint64_t v30 = atomic_load((unint64_t *)(a1 + 16));
    *(void *)(a1 + 128) = v30;
    uint64_t v31 = [*(id *)(a1 + 32) count] - 1;
    if (v31 < 0) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v31];
    }
    [v5 encodeWithCoder:a1];
    uint64_t v33 = [*(id *)(a1 + 32) count] - 1;
    if (v33 < 0) {
      int v34 = 0;
    }
    else {
      int v34 = (const void *)[*(id *)(a1 + 32) objectAtIndexedSubscript:v33];
    }
    if ((const void *)v32 != v34)
    {
LABEL_114:
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), v20, v34);
      uint64_t v71 = [*(id *)(a1 + 32) count];
      [*(id *)(a1 + 32) removeObjectAtIndex:v71 - 1];
      if (v71 - 1 < 1)
      {
LABEL_121:
        *(void *)(a1 + 88) = v26;
LABEL_122:
        if (*(void *)(a1 + 24))
        {
          if (objc_opt_respondsToSelector()) {
            [*(id *)(a1 + 24) archiver:a1 didEncodeObject:v5];
          }
        }
        return;
      }
      CFTypeID v72 = CFGetTypeID((CFTypeRef)[*(id *)(a1 + 32) objectAtIndexedSubscript:v71 - 2]);
      unint64_t v73 = atomic_load((unint64_t *)(a1 + 16));
      uint64_t v74 = *(void *)(a1 + 128);
      if (v72 == 19)
      {
        if (v73 == v74)
        {
          unint64_t v75 = atomic_load((unint64_t *)(a1 + 16));
          unint64_t v76 = v75 | 1;
LABEL_120:
          atomic_store(v76, (unint64_t *)(a1 + 16));
          unint64_t v78 = atomic_load((unint64_t *)(a1 + 16));
          *(void *)(a1 + 128) = v78;
          goto LABEL_121;
        }
      }
      else if (v73 == v74)
      {
        unint64_t v77 = atomic_load((unint64_t *)(a1 + 16));
        unint64_t v76 = v77 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_120;
      }
LABEL_125:
      __NSPoisoned();
    }
    if (*class_getName(v14) == 37)
    {
      uint64_t v35 = class_getName(v14);
      unsigned int v14 = objc_lookUpClass(v35 + 1);
    }
    uint64_t v81 = v26;
    if (v14)
    {
      CFArrayRef v36 = (NSString *)[(id)a1 classNameForClass:v14];
      if (v36 || (CFArrayRef v36 = (NSString *)[(id)objc_opt_class() classNameForClass:v14]) != 0)
      {
        unsigned int v14 = NSClassFromString(v36);
        uint64_t v37 = v36;
        if (!v14) {
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      char v79 = 0;
      v42 = v14;
LABEL_76:
      _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v14, 1);
      char v43 = 0;
      goto LABEL_77;
    }
    uint64_t v37 = 0;
LABEL_65:
    CFDictionaryRef v38 = *(const __CFDictionary **)(a1 + 80);
    if (!v38) {
      goto LABEL_70;
    }
    unint64_t v39 = (objc_class *)CFDictionaryGetValue(v38, v37);
    if (v39)
    {
      unsigned int v14 = v39;
      Class Class = object_getClass(v39);
      isMetaClass Class = class_isMetaClass(Class);
      v42 = 0;
      char v43 = 1;
      char v79 = 1;
      if (!isMetaClass) {
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    if (!*(void *)(a1 + 80)) {
LABEL_70:
    }
      *(void *)(a1 + 80) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    unsigned int v14 = (objc_class *)objc_opt_new();
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), v37, v14);

    if (!v14)
    {
      unsigned int v44 = 0;
LABEL_79:
      CFTypeRef v45 = __NSKeyedArchiverUIDCreateCached(v21, v44, a1);
      addValueToTopContainerE(a1, @"$class", v45);
      CFRelease(v45);

      uint64_t v26 = v81;
      goto LABEL_114;
    }
    v42 = 0;
    char v43 = 1;
    char v79 = 1;
LABEL_77:
    char v80 = v43;
    valuea[0] = 0;
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), v14, (const void **)valuea)
      || (unsigned int v44 = valuea[0], LODWORD(valuea[0]) == -1))
    {
      valuea[0] = 0;
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 72), v14, (const void **)valuea))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v14);
        unsigned int v46 = valuea[0];
      }
      else
      {
        [*(id *)(a1 + 40) addObject:@"$null"];
        unsigned int v46 = [*(id *)(a1 + 40) count] - 1;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v14, (const void *)v46);
      CFTypeRef v47 = __NSKeyedArchiverUIDCreateCached(v21, v46, a1);
      addValueToTopContainerE(a1, @"$class", v47);
      CFRelease(v47);
      uint64_t v48 = objc_opt_new();
      _CFDictionarySetCapacity();
      [*(id *)(a1 + 32) addObject:v48];
      ++*(void *)(a1 + 112);

      unint64_t v49 = atomic_load((unint64_t *)(a1 + 16));
      if (v49 != *(void *)(a1 + 128)) {
        goto LABEL_125;
      }
      unint64_t v50 = atomic_load((unint64_t *)(a1 + 16));
      atomic_store(v50 & 0xFFFFFFFFFFFFFFFELL, (unint64_t *)(a1 + 16));
      unint64_t v51 = atomic_load((unint64_t *)(a1 + 16));
      *(void *)(a1 + 128) = v51;
      if (!v37) {
        uint64_t v37 = (NSString *)NSCopyStringFromClass(v14);
      }
      addValueToTopContainerE(a1, @"$classname", v37);

      if ((v79 & 1) == 0)
      {
        for (unint64_t i = (__CFArray *)objc_opt_new(); v42; v42 = (objc_class *)[(objc_class *)v42 superclass])
        {
          unint64_t v53 = NSCopyStringFromClass(v42);
          CFArrayAppendValue(i, v53);
        }
        addValueToTopContainerE(a1, @"$classes", i);
      }
      if (v80) {
        v54 = 0;
      }
      else {
        v54 = (void *)[(objc_class *)v14 classFallbacksForKeyedArchiver];
      }
      uint64_t v26 = v81;
      if ([v54 count])
      {
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        uint64_t v55 = [v54 countByEnumeratingWithState:&v83 objects:valuea count:16];
        if (v55)
        {
          uint64_t v56 = v55;
          uint64_t v57 = *(void *)v84;
          do
          {
            for (uint64_t j = 0; j != v56; ++j)
            {
              if (*(void *)v84 != v57) {
                objc_enumerationMutation(v54);
              }
              Class v59 = NSClassFromString(*(NSString **)(*((void *)&v83 + 1) + 8 * j));
              if (v59) {
                _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v59, 1);
              }
            }
            uint64_t v56 = [v54 countByEnumeratingWithState:&v83 objects:valuea count:16];
          }
          while (v56);
        }
        addValueToTopContainerE(a1, @"$classhints", v54);
        uint64_t v26 = v81;
      }
      uint8_t v60 = *(__CFArray **)(a1 + 40);
      uint64_t v61 = [*(id *)(a1 + 32) count] - 1;
      if (v61 < 0) {
        uint64_t v62 = 0;
      }
      else {
        uint64_t v62 = (const void *)[*(id *)(a1 + 32) objectAtIndexedSubscript:v61];
      }
      CFArraySetValueAtIndex(v60, v46, v62);
      uint64_t v63 = [*(id *)(a1 + 32) count];
      [*(id *)(a1 + 32) removeObjectAtIndex:v63 - 1];
      if (v63 - 1 >= 1)
      {
        CFTypeID v64 = CFGetTypeID((CFTypeRef)[*(id *)(a1 + 32) objectAtIndexedSubscript:v63 - 2]);
        unint64_t v65 = atomic_load((unint64_t *)(a1 + 16));
        uint64_t v66 = *(void *)(a1 + 128);
        if (v64 == 19)
        {
          if (v65 != v66) {
            goto LABEL_125;
          }
          unint64_t v67 = atomic_load((unint64_t *)(a1 + 16));
          unint64_t v68 = v67 | 1;
        }
        else
        {
          if (v65 != v66) {
            goto LABEL_125;
          }
          unint64_t v69 = atomic_load((unint64_t *)(a1 + 16));
          unint64_t v68 = v69 & 0xFFFFFFFFFFFFFFFELL;
        }
        atomic_store(v68, (unint64_t *)(a1 + 16));
        unint64_t v70 = atomic_load((unint64_t *)(a1 + 16));
        *(void *)(a1 + 128) = v70;
      }
      goto LABEL_114;
    }
    goto LABEL_79;
  }
}

void addValueToTopContainerE(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [*(id *)(a1 + 32) count] - 1;
  if (v6 < 0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (__CFArray *)[*(id *)(a1 + 32) objectAtIndexedSubscript:v6];
  }
  unint64_t v8 = atomic_load((unint64_t *)(a1 + 16));
  if (v8 != *(void *)(a1 + 128)) {
    __NSPoisoned();
  }
  char v9 = atomic_load((unint64_t *)(a1 + 16));
  if (v9)
  {
    CFArrayAppendValue(v7, a3);
    ++*(void *)(a1 + 112);
  }
  else
  {
    CFIndex Count = CFDictionaryGetCount(v7);
    CFDictionarySetValue(v7, a2, a3);
    *(void *)(a1 + 112) += 2;
    if (Count == CFDictionaryGetCount(v7))
    {
      CFDictionaryRef v11 = _NSOSLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138412290;
        uint64_t v13 = a2;
        _os_log_error_impl(&dword_181795000, v11, OS_LOG_TYPE_ERROR, "*** NSKeyedArchiver warning: replacing existing value for key '%@'; probable duplication of encoding keys in class hierarchy",
          (uint8_t *)&v12,
          0xCu);
      }
    }
  }
}

void sub_1817A3688(_Unwind_Exception *a1)
{
  free(*(void **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1817A392C(_Unwind_Exception *exception_object)
{
}

uint64_t _NSGetUsingKeyValueGetter(uint64_t a1, void *a2)
{
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions) {
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)&_NSKeyValueObserverRegistrationLock);
  }
  uint64_t v4 = a2[6];
  if (v4 == 2)
  {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a2[4];
    if (a2[5]) {
      uint64_t v8 = a2[5];
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v14 = a2[7];
    uint64_t v15 = a2[8];
    return v7(a1, v8, v14, v15);
  }
  else if (v4 == 1)
  {
    char v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))a2[4];
    if (a2[5]) {
      uint64_t v10 = a2[5];
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v16 = a2[7];
    return v9(a1, v10, v16);
  }
  else if (v4)
  {
    CFDictionaryRef v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2[4];
    if (a2[5]) {
      uint64_t v12 = a2[5];
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v17 = a2[7];
    uint64_t v18 = a2[8];
    uint64_t v19 = a2[9];
    return v11(a1, v12, v17, v18, v19);
  }
  else
  {
    CFIndex v5 = (uint64_t (*)(uint64_t, uint64_t))a2[4];
    if (a2[5]) {
      uint64_t v6 = a2[5];
    }
    else {
      uint64_t v6 = 0;
    }
    return v5(a1, v6);
  }
}

uint64_t _NSCoderCheckPotentiallyMangledClassNameAndWarn(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (uint64_t)class_getName((Class)result);
    if (*(unsigned char *)result == 95 && *(unsigned char *)(result + 1) == 84 && *(unsigned char *)(result + 2))
    {
      unsigned __int8 v4 = atomic_load(_NSCoderCheckPotentiallyMangledClassNameAndWarn_warningMethodIsAvailable);
      if ((v4 & 1) == 0)
      {
        uint64_t result = objc_opt_respondsToSelector();
        if ((result & 1) == 0) {
          return result;
        }
        atomic_store(1u, _NSCoderCheckPotentiallyMangledClassNameAndWarn_warningMethodIsAvailable);
      }
      return +[NSKeyedUnarchiver _swift_checkClassAndWarnForKeyedArchiving:v3 operation:a2 ^ 1u];
    }
  }
  return result;
}

CFTypeRef __NSKeyedArchiverUIDCreateCached(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 96);
  unint64_t v6 = *(void *)(a3 + 104);
  if (v5) {
    BOOL v7 = v6 > a2;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    LODWORD(v8) = 2 * v6;
    if (!v6) {
      LODWORD(v8) = 256;
    }
    if (v8 <= a2) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = v8;
    }
    *(void *)(a3 + 104) = v8;
    uint64_t v9 = MEMORY[0x185306D90](*MEMORY[0x1E4F1CFB0]);
    *(void *)(a3 + 96) = v9;
    bzero((void *)(v9 + 8 * v6), 8 * (*(void *)(a3 + 104) - v6));
    uint64_t v5 = *(void *)(a3 + 96);
  }
  uint64_t v10 = *(const void **)(v5 + 8 * a2);
  if (!v10)
  {
    uint64_t v10 = (const void *)_CFKeyedArchiverUIDCreate();
    *(void *)(*(void *)(a3 + 96) + 8 * a2) = v10;
  }

  return CFRetain(v10);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  if (!aSelector) {
    return 0;
  }
  Name = sel_getName(aSelector);
  if (!Name) {
    return 0;
  }
  uint64_t v2 = [[NSString alloc] initWithBytesNoCopy:Name length:strlen(Name) encoding:4 freeWhenDone:0];

  return v2;
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  if (!aClass) {
    return 0;
  }
  Name = class_getName(aClass);
  if (!Name) {
    return 0;
  }
  uint64_t v2 = [[NSString alloc] initWithBytesNoCopy:Name length:strlen(Name) encoding:4 freeWhenDone:0];

  return v2;
}

uint64_t NSCopyStringFromClass(objc_class *a1)
{
  if (!a1) {
    return 0;
  }
  Name = class_getName(a1);
  if (!Name) {
    return 0;
  }
  uint64_t v2 = Name;
  uint64_t v3 = [NSString alloc];
  size_t v4 = strlen(v2);

  return (uint64_t)[(NSString *)v3 initWithBytesNoCopy:v2 length:v4 encoding:4 freeWhenDone:0];
}

uint64_t _NSGetObjectGetAssignValueInIvar(uint64_t a1, int a2, Ivar v)
{
  return *(void *)(a1 + ivar_getOffset(v));
}

id _NSGetLongLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  uint64_t v8 = objc_msgSend(v5, "initWithLongLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

id _NSGetIntValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  uint64_t v8 = objc_msgSend(v5, "initWithInt:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

void _encodeDouble(uint64_t a1, const void *a2, double a3)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  *(double *)unint64_t v6 = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, v6);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

id _NSGetDoubleValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  uint64_t v8 = objc_msgSend(v5, "initWithDouble:");

  return v8;
}

id _NSGetUnsignedLongLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  uint64_t v8 = objc_msgSend(v5, "initWithUnsignedLongLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

NSValue *_NSGetRectValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);

  return +[NSValue valueWithRect:](NSValue, "valueWithRect:");
}

id _NSGetFloatValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  uint64_t v8 = objc_msgSend(v5, "initWithFloat:");

  return v8;
}

NSValue *_NSGetPointValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);

  return +[NSValue valueWithPoint:](NSValue, "valueWithPoint:");
}

NSValue *_NSGetSizeValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);

  return +[NSValue valueWithSize:](NSValue, "valueWithSize:");
}

void _encodeFloat(uint64_t a1, const void *a2, float a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

ValueMetadata *type metadata accessor for Calendar.Component()
{
  return &type metadata for Calendar.Component;
}

void *_NSXPCSerializationAddASCIIString(uint64_t a1, void *key, uint64_t a3, int a4)
{
  if (a3 && a4)
  {
    CFDictionaryRef Mutable = *(const __CFDictionary **)(a1 + 8240);
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
      *(void *)(a1 + 8240) = Mutable;
    }
    Value = CFDictionaryGetValue(Mutable, key);
    if (Value)
    {
      return _NSXPCSerializationAddReference(a1, (unint64_t)Value);
    }
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8240), key, *(const void **)(a1 + 8200));
  }
  unint64_t v10 = a3 + 1;
  _reserveSpace(a1, 1);
  char v11 = 15;
  if ((unint64_t)(a3 + 1) < 0xF) {
    char v11 = a3 + 1;
  }
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v11 | 0x70;
  if (v10 >= 0xF) {
    _NSXPCSerializationAddInteger(a1, a3 + 1);
  }
  _reserveSpace(a1, a3 + 1);
  uint64_t result = memmove((void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)), key, a3 + 1);
  *(void *)(a1 + 8200) += v10;
  return result;
}

void *_NSXPCSerializationAddInteger(uint64_t a1, unint64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  v7[0] = a2;
  if (HIDWORD(a2)) {
    int v3 = 8;
  }
  else {
    int v3 = 4;
  }
  if (a2 >= 0x10000) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 2;
  }
  if (a2 >= 0x100) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = 1;
  }
  _reserveSpace(a1, 1);
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v5 | 0x10;
  _reserveSpace(a1, v5);
  uint64_t result = memmove((void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)), v7, v5);
  *(void *)(a1 + 8200) += v5;
  return result;
}

void *_NSXPCSerializationAddReference(uint64_t a1, unint64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  v7[0] = a2;
  if (HIDWORD(a2)) {
    int v3 = 8;
  }
  else {
    int v3 = 4;
  }
  if (a2 >= 0x10000) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 2;
  }
  if (a2 >= 0x100) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = 1;
  }
  _reserveSpace(a1, 1);
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v5 | 0x80;
  _reserveSpace(a1, v5);
  uint64_t result = memmove((void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)), v7, v5);
  *(void *)(a1 + 8200) += v5;
  return result;
}

void _reserveSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8200);
  BOOL v3 = __CFADD__(v2, a2);
  unint64_t v4 = v2 + a2;
  if (v3)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v14 = *MEMORY[0x1E4F1C3C8];
    uint64_t v15 = @"Unable to allocate enough memory to encode data (overflow)";
    goto LABEL_21;
  }
  if (v4 <= *(void *)(a1 + 8208)) {
    return;
  }
  if ((float)v4 > 1.1529e19)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v14 = *MEMORY[0x1E4F1C3C8];
    uint64_t v15 = @"Unable to allocate enough memory to encode data (overflow 2)";
    goto LABEL_21;
  }
  unint64_t v6 = (unsigned char *)(a1 + 8248);
  float v7 = (float)v4 * 1.6;
  mach_vm_size_t v8 = (unint64_t)v7;
  if ((unint64_t)v7 <= 0x20000)
  {
    if (!*(unsigned char *)(a1 + 8249))
    {
      *(void *)(a1 + 8216) = MEMORY[0x185306D80](*(void *)(a1 + 8216), (unint64_t)v7, 3628536420, &__block_literal_global_92);
      *(void *)(a1 + 8208) = v8;
      return;
    }
    char v11 = malloc_type_malloc((unint64_t)v7, 0xC9AD6493uLL);
    if (v11)
    {
      uint64_t v12 = v11;
      memcpy(v11, *(const void **)(a1 + 8216), *(void *)(a1 + 8200));
      *(void *)(a1 + 8216) = v12;
      *(void *)(a1 + 8208) = v8;
      *(unsigned char *)(a1 + 8249) = 0;
      return;
    }
    goto LABEL_20;
  }
  __dst = 0;
  uint64_t v9 = v8 + *MEMORY[0x1E4F14B00] - 1;
  if (((unint64_t)v9 & -*MEMORY[0x1E4F14B00]) > v8) {
    mach_vm_size_t v8 = v9 & -*MEMORY[0x1E4F14B00];
  }
  unint64_t v10 = (vm_map_t *)MEMORY[0x1E4F14960];
  if (mach_vm_allocate(*MEMORY[0x1E4F14960], (mach_vm_address_t *)&__dst, v8, 687865857))
  {
LABEL_20:
    uint64_t v13 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v14 = *MEMORY[0x1E4F1C3C8];
    uint64_t v15 = @"Unable to allocate enough memory to encode data";
LABEL_21:
    objc_exception_throw((id)objc_msgSend(v13, "exceptionWithName:reason:userInfo:", v14, v15, 0, __dst, v17));
  }
  memmove(__dst, *(const void **)(a1 + 8216), *(void *)(a1 + 8200));
  if (*v6)
  {
    mach_vm_deallocate(*v10, *(void *)(a1 + 8216), *(void *)(a1 + 8208));
  }
  else if (!*(unsigned char *)(a1 + 8249))
  {
    free(*(void **)(a1 + 8216));
  }
  *(void *)(a1 + 8216) = __dst;
  *(void *)(a1 + 8208) = v8;
  *(_WORD *)unint64_t v6 = 1;
}

void *_NSXPCSerializationEndArrayWrite(void *a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[1024];
  if (!v1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Unbalanced end of array collection" userInfo:0]);
  }
  uint64_t v2 = a1[1025];
  uint64_t v3 = v1 - 1;
  a1[1024] = v3;
  uint64_t v4 = a1[v3];
  v6[0] = v2 - 1;
  return _replaceBytes(a1, v4, 8, v6);
}

void _appendZeroedBytes(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)) = 0;
  *(void *)(a1 + 8200) += 8;
}

void *_replaceBytes(void *result, uint64_t a2, int64_t a3, void *__src)
{
  long long v4 = a2 + (__int128)a3;
  if ((BYTE8(v4) & 1) == 0 && result[1025] >= (unint64_t)v4) {
    return memmove((void *)(result[1027] + a2), __src, a3);
  }
  return result;
}

void _NSXPCSerializationAddString(uint64_t a1, CFStringRef theString, int a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(theString);
  if (Length >= 1)
  {
    CFDictionaryRef Mutable = *(const __CFDictionary **)(a1 + 8232);
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
      *(void *)(a1 + 8232) = Mutable;
    }
    Value = CFDictionaryGetValue(Mutable, theString);
    if (Value)
    {
      _NSXPCSerializationAddReference(a1, (unint64_t)Value);
      return;
    }
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8232), theString, *(const void **)(a1 + 8200));
  }
  if (a3 && (v11[0] = 0, (uint64_t v9 = (char *)_stringIsASCII(theString, v11)) != 0))
  {
    _NSXPCSerializationAddASCIIString(a1, v9, v11[0], 0);
  }
  else
  {
    _reserveSpace(a1, 1);
    char v10 = 15;
    if (Length < 15) {
      char v10 = Length;
    }
    *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v10 | 0x60;
    if (Length >= 15) {
      _NSXPCSerializationAddInteger(a1, Length);
    }
    _reserveSpace(a1, 2 * Length);
    v13.location = 0;
    v13.length = Length;
    CFStringGetCharacters(theString, v13, (UniChar *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)));
    *(void *)(a1 + 8200) += 2 * Length;
  }
}

uint64_t _decodeObject(unint64_t *a1, const void *a2, void *a3)
{
  v15[1] = *(id *)MEMORY[0x1E4F143B8];
  v15[0] = 0;
  unint64_t v3 = atomic_load(a1 + 2);
  if (v3 != a1[17]) {
    __NSPoisoned();
  }
  unint64_t v7 = atomic_load(a1 + 2);
  atomic_store(v7 | 8, a1 + 2);
  unint64_t v8 = atomic_load(a1 + 2);
  a1[17] = v8;
  uint64_t v9 = (void *)MEMORY[0x185308110]();
  if (a1[10])
  {
    uint64_t v10 = _decodeObjectXML((uint64_t)a1, a2, v15);
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    if (!_decodeOffsetAndRef((objc_class *)a1, (uint64_t)a2, &v14, &v13))
    {
      uint64_t v11 = 0;
      goto LABEL_7;
    }
    uint64_t v10 = _decodeObjectBinary((uint64_t)a1, v13, (uint64_t)a2, (CFTypeRef *)v15);
  }
  uint64_t v11 = v10;
LABEL_7:
  *a3 = v15[0];
  return v11;
}

NSString *_decodeObject_0(uint64_t a1, __CFString *a2, uint64_t a3)
{
  unint64_t v3 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2) {
    long long v4 = a2;
  }
  else {
    long long v4 = @"<no key>";
  }
  size_t v5 = *(const void **)a3;
  if (!*(void *)a3) {
    return (NSString *)v3;
  }
  int v7 = *(_DWORD *)(a3 + 8);
  if (v7 == 255) {
    return (NSString *)v3;
  }
  HIDWORD(v9) = *(_DWORD *)(a3 + 8);
  LODWORD(v9) = v7 - 16;
  unint64_t v3 = 0;
  switch((v9 >> 4))
  {
    case 0u:
    case 1u:
    case 0xEu:
      [(id)a1 _validateAllowedClass:NSNumber forKey:v4 allowingInvocations:1];
      return (NSString *)_NSXPCSerializationNumberForObject((uint64_t *)(a1 + 24), (unint64_t *)a3);
    case 3u:
      [(id)a1 _validateAllowedClass:MEMORY[0x1E4F1C9B8] forKey:v4 allowingInvocations:1];
      return (NSString *)_NSXPCSerializationDataForObject((void *)(a1 + 24), (unint64_t *)a3);
    case 5u:
      [(id)a1 _validateAllowedClass:NSString forKey:v4 allowingInvocations:1];
      return (NSString *)_NSXPCSerializationStringForObject((void *)(a1 + 24), (char **)a3);
    case 6u:
      [(id)a1 _validateAllowedClass:NSString forKey:v4 allowingInvocations:1];
      uint64_t v12 = _NSXPCSerializationASCIIStringForObject((void *)(a1 + 24), (unint64_t *)a3);
      if (!v12) {
        return 0;
      }
      uint64_t result = +[NSString stringWithUTF8String:v12];
      break;
    case 7u:
      unint64_t v13 = (const void *)_NSXPCSerializationReferenceForObject((void *)(a1 + 24), (unint64_t *)a3);
      unsigned int v14 = _NSXPCSerializationTypeForReference((void *)(a1 + 24), (unint64_t)v13);
      if (v14 == 255)
      {
        uint64_t v27 = +[NSString stringWithFormat:@"decodeObjectForKey: Invalid reference marker for object with key %@", v4];
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v27 userInfo:0]);
      }
      unsigned int v15 = v14;
      Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v13);
      if (Value)
      {
        unint64_t v3 = Value;
        [(id)a1 _validateReusedReference:Value forKey:v4];
      }
      else
      {
        int v34 = v13;
        uint64_t v35 = v15;
        unint64_t v3 = (void *)_decodeObject_0(a1, v4, &v34);
        if (!v3)
        {
          uint64_t v32 = +[NSString stringWithFormat:@"decodeObjectForKey: Invalid reference object for reference with key %@", v4];
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v32 userInfo:0]);
        }
      }
      return (NSString *)v3;
    case 9u:
    case 0xDu:
      return (NSString *)v3;
    case 0xAu:
      [(id)a1 _validateAllowedClass:NSNumber forKey:v4 allowingInvocations:1];
      uint64_t v11 = 1;
      goto LABEL_16;
    case 0xBu:
      [(id)a1 _validateAllowedClass:NSNumber forKey:v4 allowingInvocations:1];
      uint64_t v11 = 0;
LABEL_16:
      return (NSString *)+[NSNumber numberWithBool:v11];
    default:
      uint64_t v17 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (++*(_DWORD *)(a1 + 2260) >= 0x110u) {
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectForKey: too many nested collections" userInfo:0]);
      }
      uint64_t v18 = *(void **)(a1 + 2248);
      *(void *)(a1 + 2248) = 0;
      *(void *)(a1 + 56 + 8 * *(unsigned int *)(a1 + 2260)) = a3;
      int v34 = 0;
      uint64_t v35 = 0;
      if (_NSXPCSerializationCreateObjectInDictionaryForASCIIKey((void *)(a1 + 24), (void *)a3, "$xpc", (uint64_t)&v34))
      {
        unint64_t v3 = objc_msgSend((id)a1, "_xpcObjectForIndex:", _NSXPCSerializationIntegerForObject((void *)(a1 + 24), (unint64_t *)&v34));
        [(id)a1 _validateAllowedXPCType:object_getClass(v3) forKey:v4];
      }
      else
      {
        v33[0] = 0;
        v33[1] = 0;
        if (!_NSXPCSerializationCreateObjectInDictionaryForASCIIKey((void *)(a1 + 24), (void *)a3, "$class", (uint64_t)v33))objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectForKey: class name missing" userInfo:0]); {
        uint64_t v19 = (const char *)_NSXPCSerializationASCIIStringForObject((void *)(a1 + 24), v33);
        }
        if (!v19) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectForKey: class name missing (2)" userInfo:0]);
        }
        CFIndex v20 = v19;
        Class v21 = objc_lookUpClass(v19);
        if (!v21)
        {
          unint64_t v28 = +[NSString stringWithFormat:@"decodeObjectForKey: class \"%s\" not loaded or does not exist", v20];
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v28 userInfo:0]);
        }
        [(id)a1 _validateAllowedClass:v21 forKey:v4 allowingInvocations:1];
        if (v18) {
          _removeAllowedClass(a1, v18);
        }
        CFTypeRef v22 = -[objc_class allocWithZone:](v21, "allocWithZone:", [(id)a1 zone]);
        if (!v22)
        {
          unint64_t v29 = +[NSString stringWithFormat:@"decodeObjectForKey: Class \"%s\" returned nil from +alloc while being decoded for key %@", v20, v4];
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v29 userInfo:0]);
        }
        uint64_t v23 = [(objc_class *)v22 initWithCoder:a1];
        if (!v23)
        {
          unint64_t v30 = +[NSString stringWithFormat:@"decodeObjectForKey: Object of class \"%s\" returned nil from -initWithCoder: while being decoded for key %@", v20, v4];
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v30 userInfo:0]);
        }
        uint64_t v24 = (void *)[(objc_class *)v23 awakeAfterUsingCoder:a1];
        unint64_t v3 = v24;
        if (!v24)
        {
          uint64_t v31 = +[NSString stringWithFormat:@"decodeObjectForKey: Object of class \"%s\" returned nil from -awakeAfterUsingCoder: while being decoded for key %@", v20, v4];
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v31 userInfo:0]);
        }
        id v25 = v24;
      }
      *(void *)(a1 + 16) = v17;
      --*(_DWORD *)(a1 + 2260);
      *(void *)(a1 + 2248) = 0;
      if (v3)
      {
        uint64_t v26 = *(__CFDictionary **)(a1 + 40);
        if (v26) {
          CFDictionaryAddValue(v26, v5, v3);
        }
      }
      return (NSString *)v3;
  }
  return result;
}

void sub_1817A7B70(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1817A78B4);
  }
  _Unwind_Resume(exc_buf);
}

NSString *_NSNewStringByAppendingStrings(malloc_zone_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9, uint64_t a10)
{
  v39[80] = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v38 = (size_t *)&a10;
  size_t v11 = a9;
  if (a9)
  {
    uint64_t v12 = 0;
    LOBYTE(v13) = 1;
    do
    {
      if (v12 == 40) {
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"Too many strings to append" userInfo:0]);
      }
      if (v13)
      {
        uint64_t v14 = [(id)v11 fastestEncoding];
        if (__NSDefaultStringEncodingFullyInited) {
          uint64_t v15 = _NSDefaultStringEncoding;
        }
        else {
          uint64_t v15 = _NSDefaultCStringEncoding();
        }
        BOOL v13 = v14 == v15;
      }
      else
      {
        BOOL v13 = 0;
      }
      v39[v12] = v11;
      uint64_t v16 = v12 + 1;
      uint64_t v17 = v38++;
      size_t v11 = *v17;
      ++v12;
    }
    while (*v17);
    uint64_t v18 = 0;
    uint64_t v19 = v16 - 1;
    while (1)
    {
      CFIndex v20 = (void *)v39[v18];
      if (v13)
      {
        uint64_t v21 = [v20 cStringLength];
        v39[v18 + 40] = v21;
        v11 += v21;
        if (v19 == v18)
        {
          uint64_t v37 = a1;
          if (v11)
          {
            uint64_t v24 = a1;
            if (!a1) {
              uint64_t v24 = malloc_default_zone();
            }
            id v25 = (char *)malloc_type_zone_malloc(v24, v11, 0x4A6F13AEuLL);
          }
          else
          {
            id v25 = 0;
          }
          uint64_t v28 = 0;
          uint64_t v36 = v25;
          do
          {
            unint64_t v29 = (void *)v39[v28];
            uint64_t v30 = v39[v28 + 40];
            if (__NSDefaultStringEncodingFullyInited) {
              uint64_t v31 = _NSDefaultStringEncoding;
            }
            else {
              uint64_t v31 = _NSDefaultCStringEncoding();
            }
            objc_msgSend(v29, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v25, v30, 0, v31, 0, 0, v30, 0);
            v25 += v30;
            ++v28;
          }
          while (v16 != v28);
          uint64_t v23 = v36;
          a1 = v37;
          return [+[NSString allocWithZone:a1] initWithCStringNoCopy:v23 length:v11 freeWhenDone:1];
        }
      }
      else
      {
        uint64_t v22 = [v20 length];
        v39[v18 + 40] = v22;
        v11 += v22;
        if (v19 == v18)
        {
          if ((v11 & 0x8000000000000000) != 0) {
            return 0;
          }
          if (v11)
          {
            uint64_t v26 = a1;
            if (!a1) {
              uint64_t v26 = malloc_default_zone();
            }
            uint64_t v27 = (char *)malloc_type_zone_malloc(v26, 2 * v11, 0x4A6F13AEuLL);
          }
          else
          {
            uint64_t v27 = 0;
          }
          uint64_t v33 = 0;
          int v34 = v27;
          do
          {
            uint64_t v35 = v39[v33 + 40];
            objc_msgSend((id)v39[v33], "getCharacters:range:", v34, 0, v35);
            v34 += 2 * v35;
            ++v33;
          }
          while (v16 != v33);
          return [+[NSString allocWithZone:a1] initWithCharactersNoCopy:v27 length:v11 freeWhenDone:1];
        }
      }
      ++v18;
    }
  }
  uint64_t v23 = 0;
  return [+[NSString allocWithZone:a1] initWithCStringNoCopy:v23 length:v11 freeWhenDone:1];
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForASCIIKey(void *a1, void *a2, char *__s, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___NSXPCSerializationCreateObjectInDictionaryForASCIIKey_block_invoke;
  v10[3] = &unk_1E51FEE20;
  v10[6] = strlen(__s);
  v10[7] = __s;
  v10[4] = &v11;
  v10[5] = a1;
  v10[8] = a4;
  if (_iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v10)) {
    BOOL v8 = *((unsigned char *)v12 + 24) != 0;
  }
  else {
    BOOL v8 = 0;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1817A8AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForKey(void *a1, void *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  CFIndex v12 = 0;
  BOOL v8 = _stringIsASCII(a3, &v12);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  CFIndex v11[2] = ___NSXPCSerializationCreateObjectInDictionaryForKey_block_invoke;
  v11[3] = &unk_1E51FEE48;
  v11[6] = a1;
  v11[7] = v8;
  v11[4] = a3;
  v11[5] = &v13;
  v11[8] = v12;
  v11[9] = a4;
  if (_iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v11)) {
    BOOL v9 = *((unsigned char *)v14 + 24) != 0;
  }
  else {
    BOOL v9 = 0;
  }
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1817A8C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _iterateDictionaryKeysAndValues(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = 0;
  v27[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2 + 8;
  uint64_t v6 = *a2 >= 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v6 << 63 >> 63;
  if (v7 == v6 && (v7 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = a1[1];
    if (v8 <= v5) {
      return 0;
    }
    unint64_t v9 = *(void *)(*a2 + *a1 + 1);
    if (v9 == v5) {
      return 1;
    }
    uint64_t result = 0;
    unint64_t v10 = *a2 + 9;
    uint64_t v11 = v5 == -1;
    uint64_t v12 = v11 << 63 >> 63;
    v27[0] = v10;
    if (v12 != v11 || v12 < 0 || v8 <= v10) {
      return result;
    }
    if (v9 < v10) {
      return 1;
    }
    while (1)
    {
      unint64_t v25 = v10;
      uint64_t v26 = 255;
      LODWORD(v26) = *(unsigned char *)(*a1 + v10) & 0xF0;
      unint64_t v23 = v10;
      unint64_t v24 = 0;
      if (v26 == 128)
      {
        if (!_getReferenceAtMarker(a1, &v23, v10, &v24)) {
          return 0;
        }
        unint64_t v14 = v23;
        if (!_getLastByteOfValueIncludingMarker(a1, v23, &v24)) {
          return 0;
        }
        unint64_t v25 = v10;
        LODWORD(v26) = *(unsigned char *)(*a1 + v14) & 0xF0;
      }
      if (!_getLastByteOfValueIncludingMarker(a1, v10, &v24)) {
        return 0;
      }
      unint64_t v15 = v24 + 1;
      uint64_t v16 = v24 == -1;
      uint64_t v17 = v16 << 63 >> 63;
      if (v17 != v16 || v17 < 0 || a1[1] <= v15) {
        return 0;
      }
      uint64_t v21 = v24 + 1;
      uint64_t v22 = 255;
      LODWORD(v22) = *(unsigned char *)(*a1 + v15) & 0xF0;
      if (!(*(unsigned int (**)(uint64_t, unint64_t *, uint64_t *))(a3 + 16))(a3, &v25, &v21)) {
        return 1;
      }
      uint64_t result = _getLastByteOfValueIncludingMarker(a1, v15, v27);
      if (!result) {
        break;
      }
      uint64_t result = 0;
      unint64_t v18 = v27[0] + 1;
      uint64_t v19 = v27[0] == -1;
      uint64_t v20 = v19 << 63 >> 63;
      ++v27[0];
      if (v20 != v19 || v20 < 0) {
        break;
      }
      if (a1[1] <= v18) {
        return 1;
      }
      if (v10 >= v18) {
        return 0;
      }
      unint64_t v10 = v18;
      if (v9 < v18) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t _getLastByteOfValueIncludingMarker(void *a1, unint64_t a2, unint64_t *a3)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[1];
  if (v3 <= a2) {
    return 0;
  }
  uint64_t result = 0;
  char v6 = *(unsigned char *)(*a1 + a2);
  int v7 = v6 & 0xF0;
  switch((v7 - 16) >> 4)
  {
    case 0u:
    case 7u:
    case 0xEu:
      unint64_t v9 = a2 + (v6 & 0xF);
      *a3 = v9;
      if (__CFADD__(a2, v6 & 0xF) || v9 >= a1[1]) {
        return 0;
      }
      goto LABEL_34;
    case 1u:
      if ((v6 & 0xF) == 3)
      {
        uint64_t result = 0;
        BOOL v19 = __CFADD__(a2, 8);
        unint64_t v13 = a2 + 8;
      }
      else
      {
        if ((v6 & 0xF) != 2) {
          return 0;
        }
        uint64_t result = 0;
        BOOL v19 = __CFADD__(a2, 4);
        unint64_t v13 = a2 + 4;
      }
      uint64_t v20 = v19;
      uint64_t v21 = v20 << 63 >> 63;
      *a3 = v13;
      if (v21 != v20 || v21 < 0) {
        return result;
      }
LABEL_33:
      if (a1[1] <= v13) {
        return 0;
      }
LABEL_34:
      uint64_t result = 1;
      break;
    case 3u:
    case 5u:
    case 6u:
      uint64_t v10 = v6 & 0xF;
      uint64_t v22 = v10;
      if ((v6 & 0xF) == 0) {
        goto LABEL_18;
      }
      if (v10 == 15)
      {
        v23[0] = a2 + 1;
        if (a2 + 1 >= v3) {
          return 0;
        }
        if (!_getIntAtMarker(a1, &v22, a2 + 1, v23)) {
          return 0;
        }
        a2 = v23[0];
        if (v23[0] >= a1[1]) {
          return 0;
        }
        uint64_t v10 = v22;
        if (v22 < 0) {
          return 0;
        }
      }
      uint64_t v11 = v10 << (v7 == 96);
      uint64_t v12 = v11 >> 63;
      BOOL v19 = __CFADD__(a2, v11);
      unint64_t v13 = a2 + v11;
      uint64_t v14 = v19 ? v12 + 1 : v12;
      uint64_t v15 = v14 << 63 >> 63;
      *a3 = v13;
      if (v15 != v14 || v15 < 0) {
        return 0;
      }
      goto LABEL_33;
    case 9u:
    case 0xCu:
      uint64_t result = 0;
      uint64_t v16 = a2 >= 0xFFFFFFFFFFFFFFF7;
      uint64_t v17 = v16 << 63 >> 63;
      if (v17 != v16 || v17 < 0 || v3 <= a2 + 9) {
        return result;
      }
      unint64_t v18 = *(void *)(a2 + *a1 + 1);
      *a3 = v18;
      if (v18 >= v3) {
        return 0;
      }
      goto LABEL_34;
    case 0xAu:
    case 0xBu:
    case 0xDu:
LABEL_18:
      *a3 = a2;
      goto LABEL_34;
    default:
      return result;
  }
  return result;
}

uint64_t _getIntAtMarker(void *a1, void *a2, unint64_t a3, unint64_t *a4)
{
  if (a1[1] <= a3) {
    return 0;
  }
  char v5 = *(unsigned char *)(*a1 + a3);
  if ((v5 & 0xF0) != 0x10) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = v5 & 0xF;
  BOOL v8 = __CFADD__(a3, v5 & 0xF);
  unint64_t v9 = a3 + (v5 & 0xF);
  uint64_t v10 = v8;
  uint64_t v11 = v10 << 63 >> 63;
  *a4 = v9;
  if (v11 == v10 && (v11 & 0x8000000000000000) == 0)
  {
    if (a1[1] > v9)
    {
      uint64_t v6 = 0;
      switch(v7)
      {
        case 1:
          uint64_t v6 = 1;
          __memcpy_chk();
          *a2 = 0;
          break;
        case 2:
        case 4:
        case 8:
          __memcpy_chk();
          *a2 = 0;
          uint64_t v6 = 1;
          break;
        default:
          return v6;
      }
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t _getASCIIStringAtMarker(void *a1, void *a2, unint64_t a3, uint64_t *a4, unint64_t *a5)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  v22[0] = a3;
  unint64_t v5 = a1[1];
  if (v5 <= a3) {
    return 0;
  }
  char v10 = *(unsigned char *)(*a1 + a3);
  if ((v10 & 0xF0) == 0x80)
  {
    uint64_t result = _getReferenceAtMarker(a1, v22, a3, a5);
    if (result) {
      return _getASCIIStringAtMarker(a1, a2, v22[0], a4, &v21);
    }
    return result;
  }
  if ((v10 & 0xF0) != 0x70) {
    return 0;
  }
  uint64_t v12 = v10 & 0xF;
  unint64_t v13 = a3 + 1;
  uint64_t v21 = v12;
  v22[0] = v13;
  if (v13 >= v5) {
    return 0;
  }
  if (v12 == 15)
  {
    uint64_t result = _getIntAtMarker(a1, &v21, v13, v22);
    if (!result) {
      return result;
    }
    uint64_t result = 0;
    unint64_t v13 = v22[0] + 1;
    uint64_t v14 = v22[0] == -1;
    uint64_t v15 = v14 << 63 >> 63;
    if (v15 != v14 || v15 < 0) {
      return result;
    }
    if (a1[1] <= v13) {
      return 0;
    }
    uint64_t v12 = v21;
  }
  BOOL v16 = v12 < 1;
  uint64_t v17 = v12 - 1;
  if (v16) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v18 = v13 + v17;
  uint64_t v19 = __CFADD__(v13, v17);
  uint64_t v20 = v19 << 63 >> 63;
  *a5 = v18;
  if (v20 == v19 && (v20 & 0x8000000000000000) == 0)
  {
    if (a1[1] > v18 && !*(unsigned char *)(*a1 + v18))
    {
      *a2 = *a1 + v13;
      *a4 = v17;
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _getReferenceAtMarker(void *a1, void *a2, unint64_t a3, unint64_t *a4)
{
  if (a1[1] <= a3) {
    return 0;
  }
  char v6 = *(unsigned char *)(*a1 + a3);
  if ((v6 & 0xF0) != 0x80) {
    return 0;
  }
  BOOL result = 0;
  int v8 = v6 & 0xF;
  BOOL v9 = __CFADD__(a3, v6 & 0xF);
  unint64_t v10 = a3 + (v6 & 0xF);
  uint64_t v11 = v9;
  uint64_t v12 = v11 << 63 >> 63;
  *a4 = v10;
  if (v12 != v11 || v12 < 0) {
    return result;
  }
  unint64_t v13 = a1[1];
  if (v13 <= v10) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v15 = (unsigned char *)*a1;
  switch(v8)
  {
    case 1:
    case 2:
    case 4:
    case 8:
      __memcpy_chk();
      *a2 = 0;
      if (!v13) {
        return 0;
      }
      int v16 = *v15 & 0xF0;
      BOOL result = (*v15 & 0xB0) != 0x80 && v16 != 176 && v16 != 224;
      break;
    default:
      return result;
  }
  return result;
}

const char *_stringIsASCII(const __CFString *a1, CFIndex *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  BOOL result = CFStringGetCStringPtr(a1, 0x600u);
  if (result) {
    goto LABEL_29;
  }
  memset(v22, 0, sizeof(v22));
  CFStringRef theString = a1;
  uint64_t v26 = 0;
  CFIndex v27 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  unint64_t v24 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unint64_t v25 = CStringPtr;
  if (!Length)
  {
LABEL_26:
    uint64_t v20 = (CFStringEncoding *)MEMORY[0x1E4F1CBA8];
    CFStringEncoding v21 = *MEMORY[0x1E4F1CBA8];
    if (*MEMORY[0x1E4F1CBA8] == -1)
    {
      __CFStringComputeEightBitStringEncoding();
      CFStringEncoding v21 = *v20;
    }
    BOOL result = CFStringGetCStringPtr(a1, v21);
    if (!result) {
      return result;
    }
LABEL_29:
    if (a2) {
      *a2 = Length;
    }
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 64;
  while (1)
  {
    uint64_t v12 = (unint64_t)v10 >= 4 ? 4 : v10;
    CFIndex v13 = v27;
    if (v27 > v10)
    {
      if (v24)
      {
        UniChar v14 = v24[v10 + v26];
      }
      else if (v25)
      {
        UniChar v14 = v25[v26 + v10];
      }
      else
      {
        if (v29 <= v10 || v9 > v10)
        {
          uint64_t v16 = v12 + v8;
          uint64_t v17 = v11 - v12;
          uint64_t v18 = v10 - v12;
          CFIndex v19 = v18 + 64;
          if (v18 + 64 >= v27) {
            CFIndex v19 = v27;
          }
          uint64_t v28 = v18;
          uint64_t v29 = v19;
          if (v27 >= v17) {
            CFIndex v13 = v17;
          }
          v31.length = v13 + v16;
          v31.location = v18 + v26;
          CFStringGetCharacters(theString, v31, (UniChar *)v22);
          uint64_t v9 = v28;
        }
        UniChar v14 = *((_WORD *)v22 + v10 - v9);
      }
      if (v14 > 0x7Eu) {
        return 0;
      }
    }
    ++v10;
    --v8;
    ++v11;
    if (Length == v10) {
      goto LABEL_26;
    }
  }
}

__CFString *_NSXPCSerializationStringForObject(void *a1, char **a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  long long v4 = 0;
  if (!v2) {
    return 0;
  }
  if (_getStringAtMarker(a1, &v4, v2, v5)) {
    return v4;
  }
  return 0;
}

uint64_t _getStringAtMarker(void *a1, __CFString **a2, char *a3, unint64_t *a4)
{
  unint64_t v5 = a3;
  key[1] = *(void **)MEMORY[0x1E4F143B8];
  key[0] = a3;
  CFDictionaryRef v8 = (const __CFDictionary *)a1[2];
  if (v8)
  {
    Value = (__CFString *)CFDictionaryGetValue(v8, a3);
    if (Value)
    {
LABEL_31:
      *a2 = Value;
      return 1;
    }
  }
  unint64_t v10 = a1[1];
  if (v10 <= (unint64_t)v5) {
    return 0;
  }
  char v11 = v5[*a1];
  int v12 = v11 & 0xF0;
  if (v12 == 112)
  {
    cStr = 0;
    uint64_t result = _getASCIIStringAtMarker(a1, &cStr, (unint64_t)v5, &numChars, a4);
    if (!result) {
      return result;
    }
    CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
LABEL_28:
    unint64_t v24 = (__CFString *)v14;
    unint64_t v25 = (__CFDictionary *)a1[2];
    if (v25) {
      CFDictionarySetValue(v25, v5, v24);
    }
    Value = v24;
    goto LABEL_31;
  }
  if (v12 == 128)
  {
    uint64_t result = _getReferenceAtMarker(a1, key, (unint64_t)v5, a4);
    if (result) {
      return _getStringAtMarker(a1, a2, key[0], &numChars);
    }
    return result;
  }
  if (v12 != 96) {
    return 0;
  }
  CFIndex v15 = v11 & 0xF;
  CFIndex numChars = v15;
  if ((v11 & 0xF) == 0)
  {
    *a4 = (unint64_t)v5;
    if (!a2) {
      return 1;
    }
    Value = &stru_1ECA5C228;
    goto LABEL_31;
  }
  key[0] = ++v5;
  if ((unint64_t)v5 >= v10) {
    return 0;
  }
  if (v15 != 15
    || (uint64_t result = _getIntAtMarker(a1, &numChars, (unint64_t)v5, (unint64_t *)key), result)
    && (result = 0, unint64_t v5 = (char *)key[0] + 1, v16 = key[0] == (void *)-1, v17 = v16 << 63 >> 63, v17 == v16)
    && (v17 & 0x8000000000000000) == 0
    && (uint64_t result = 0, a1[1] > (unint64_t)v5)
    && (CFIndex v15 = numChars, (numChars & 0x8000000000000000) == 0))
  {
    if (2 * v15 < 0) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v18 = 2 * v15 - 1;
    uint64_t v19 = v18 >> 63;
    BOOL v20 = __CFADD__(v5, v18);
    CFStringEncoding v21 = &v5[v18];
    uint64_t v22 = v20 ? v19 + 1 : v19;
    uint64_t v23 = v22 << 63 >> 63;
    *a4 = (unint64_t)v21;
    if (v23 == v22 && (v23 & 0x8000000000000000) == 0)
    {
      if (a1[1] > (unint64_t)v21)
      {
        if (!a2) {
          return 1;
        }
        CFStringRef v14 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], (const UniChar *)&v5[*a1], v15);
        goto LABEL_28;
      }
      return 0;
    }
  }
  return result;
}

unint64_t _classOverridesSelector(objc_class *a1, const char *a2)
{
  unint64_t result = (unint64_t)class_getMethodImplementation(a1, a2);
  if (result)
  {
    unint64_t v5 = (void (*)(void))result;
    Superclass = class_getSuperclass(a1);
    if (Superclass && (int v7 = Superclass, v5 == class_getMethodImplementation(Superclass, a2)))
    {
      Method InstanceMethod = class_getInstanceMethod(a1, a2);
      return InstanceMethod != class_getInstanceMethod(v7, a2);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t _NSXPCSerializationASCIIStringForObject(void *a1, unint64_t *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  uint64_t v4 = 0;
  if (!v2) {
    return 0;
  }
  if (_getASCIIStringAtMarker(a1, &v4, v2, &v5, v6)) {
    return v4;
  }
  return 0;
}

void _NSXPCSerializationStartDictionaryWrite(uint64_t *a1)
{
  if (a1[1024] >= 1024) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Data structure has too many nested collections to encode" userInfo:0]);
  }
  _reserveSpace((uint64_t)a1, 1);
  *(unsigned char *)(a1[1027] + a1[1025]) = -48;
  uint64_t v2 = a1[1025] + 1;
  a1[1025] = v2;
  uint64_t v3 = a1[1024];
  a1[1024] = v3 + 1;
  a1[v3] = v2;

  _appendZeroedBytes((uint64_t)a1);
}

void _NSXPCSerializationAddObjectRef(uint64_t a1, void *key)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(__CFDictionary **)(a1 + 8224);
  if (!v4)
  {
    keyCallBacks.CFIndex version = 0;
    *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E4F1D540] + 8);
    memset(&keyCallBacks.copyDescription, 0, 24);
    uint64_t v4 = CFDictionaryCreateMutable(0, 0, &keyCallBacks, 0);
    *(void *)(a1 + 8224) = v4;
  }
  CFDictionaryAddValue(v4, key, *(const void **)(a1 + 8200));
}

BOOL _decodeOffsetAndRef(objc_class *a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int OffsetForValueFromDictionary3 = __CFBinaryPlistGetOffsetForValueFromDictionary3();
  BOOL result = 0;
  if (OffsetForValueFromDictionary3)
  {
    if (_getUIDFromData(a1, (unsigned char *)(*((void *)a1 + 13) + *a3), *((void *)a1 + 13) + *((void *)a1 + 14) - 1, a4))
    {
      return *a4 != 0;
    }
    else
    {
      unint64_t v10 = _NSRuntimeIssuesLog();
      BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_FAULT);
      if (result)
      {
        *(_DWORD *)buf = 138543618;
        int v12 = _NSMethodExceptionProem(a1, sel_decodeObjectForKey_);
        __int16 v13 = 2114;
        uint64_t v14 = a2;
        _os_log_fault_impl(&dword_181795000, v10, OS_LOG_TYPE_FAULT, "%{public}@: value for key (%{public}@) is not an object. This will become an error in the future.", buf, 0x16u);
        return 0;
      }
    }
  }
  return result;
}

void _NSXPCSerializationStartArrayWrite(uint64_t *a1)
{
  if (a1[1024] >= 1024) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Data structure has too many nested collections to encode" userInfo:0]);
  }
  _reserveSpace((uint64_t)a1, 1);
  *(unsigned char *)(a1[1027] + a1[1025]) = -96;
  uint64_t v2 = a1[1025] + 1;
  a1[1025] = v2;
  uint64_t v3 = a1[1024];
  a1[1024] = v3 + 1;
  a1[v3] = v2;

  _appendZeroedBytes((uint64_t)a1);
}

uint64_t _NSXPCSerializationTypeForReference(void *a1, unint64_t a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (!a2 || !_getLastByteOfValueIncludingMarker(a1, a2, v8)) {
    return 255;
  }
  int v4 = *(unsigned char *)(*a1 + a2) & 0xF0;
  if ((*(unsigned char *)(*a1 + a2) & 0xB0) == 0x80 || v4 == 176 || v4 == 224) {
    return 0;
  }
  else {
    return *(unsigned char *)(*a1 + a2) & 0xF0;
  }
}

uint64_t _NSXPCSerializationReferenceForObject(void *a1, unint64_t *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = 0;
  if (_getReferenceAtMarker(a1, &v4, v2, v5)) {
    return v4;
  }
  else {
    return 0;
  }
}

void _NSXPCSerializationAddBool(uint64_t a1, int a2)
{
  _reserveSpace(a1, 1);
  if (a2) {
    char v4 = -80;
  }
  else {
    char v4 = -64;
  }
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v4;
}

Swift::Void __swiftcall _NSSwiftCalendar.encode(with:)(NSCoder with)
{
  unint64_t v2 = v1;
  char v4 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____NSSwiftCalendar__lock];
  uint64_t v5 = v4 + 4;
  uint64_t v6 = v4 + 8;
  os_unfair_lock_lock(v4 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v5, &v12);
  os_unfair_lock_unlock(v6);
  long long v11 = v12;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static CalendarCache.cache + 16;
  CFDictionaryRef v8 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v7, (uint64_t *)&v10);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  LOBYTE(v7) = specialized static Calendar.== infix(_:_:)((uint64_t)&v11, (uint64_t)&v10);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v7 & 1) == 0)
  {
    v9.receiver = v2;
    v9.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
    objc_msgSendSuper2(&v9, sel_encodeWithCoder_, with.super.isa);
  }
}

uint64_t _NSSwiftCalendar.classForCoder.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftCalendar__lock);
  unint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v2, &v11);
  os_unfair_lock_unlock(v3);
  long long v10 = v11;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static CalendarCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v4, (uint64_t *)&v9);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  char v6 = specialized static Calendar.== infix(_:_:)((uint64_t)&v10, (uint64_t)&v9);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v6) {
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for _NSAutoCalendar;
  }
  else {
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for NSCalendar;
  }
  return type metadata accessor for NSMorphologyPronoun(0, v7);
}

void _removeAllowedClass(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 2264 + 8 * *(void *)(a1 + 4440));
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v5 = (void *)[v4 mutableCopy];
    [v5 removeObject:a2];
  }
  else
  {
    if (v4 != a2) {
      return;
    }
    uint64_t v5 = 0;
  }
  *(void *)(a1 + 2264 + 8 * *(void *)(a1 + 4440)) = v5;
}

uint64_t AttributedString.Guts.description(in:)()
{
  uint64_t v190 = 0;
  unint64_t v191 = 0xE000000000000000;
  uint64_t v1 = swift_retain();
  AttributedString.Runs.init(_:in:)(v1, &v224);
  unint64_t v2 = v225;
  uint64_t v3 = v224;
  long long v140 = v233;
  uint64_t v4 = v233;
  if (v225 == (void *)v233)
  {
    outlined retain of AttributedString.Runs((uint64_t)&v224);
    uint64_t v5 = 0;
    goto LABEL_146;
  }
  uint64_t v6 = v226;
  uint64_t v7 = v227;
  uint64_t v8 = v228;
  uint64_t v9 = v229;
  uint64_t v138 = v231;
  uint64_t v139 = v230;
  long long v132 = v235;
  long long v133 = v234;
  long long v131 = v236;
  uint64_t v10 = v232;
  uint64_t v148 = v238;
  uint64_t v149 = v237;
  uint64_t v146 = v240;
  uint64_t v147 = v239;
  uint64_t v144 = v242;
  uint64_t v145 = v241;
  uint64_t v129 = (long long *)(v0 + 16);
  uint64_t v142 = v244;
  uint64_t v143 = v243;
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v224);
  uint64_t v141 = (long long *)(v3 + 16);
  uint64_t v136 = v7;
  uint64_t v137 = v6;
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  uint64_t v134 = v9;
  uint64_t v135 = v8;
  uint64_t v151 = v10;
  uint64_t v152 = v8;
  uint64_t v15 = v138;
  uint64_t v14 = v139;
  uint64_t v130 = v10;
  uint64_t v16 = (uint64_t)v2;
  unint64_t v155 = (void *)v3;
  uint64_t v127 = v4;
  uint64_t v128 = v2;
  while (2)
  {
    if (v16 >= v4) {
      goto LABEL_151;
    }
    v174._uint64_t countAndFlagsBits = v3;
    v174._unint64_t object = v2;
    *(void *)&long long v175 = v137;
    *((void *)&v175 + 1) = v136;
    *(void *)&long long v176 = v135;
    *((void *)&v176 + 1) = v134;
    *(void *)&long long v177 = v139;
    *((void *)&v177 + 1) = v138;
    *(_OWORD *)&v178[8] = v140;
    long long v179 = v133;
    long long v180 = v132;
    long long v181 = v131;
    *(void *)v178 = v130;
    uint64_t v182 = v149;
    uint64_t v183 = v148;
    uint64_t v184 = v147;
    uint64_t v185 = v146;
    uint64_t v186 = v145;
    uint64_t v187 = v144;
    uint64_t v188 = v143;
    uint64_t v189 = v142;
    uint64_t v161 = v12;
    uint64_t v163 = v16;
    v173[0] = v16;
    v173[1] = v12;
    unint64_t v156 = v13;
    v173[2] = v13;
    v173[3] = v152;
    v173[4] = v9;
    v173[5] = v14;
    v173[6] = v15;
    v173[7] = v151;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v173, &v165._countAndFlagsBits);
    if (v165._countAndFlagsBits != *(void *)(v3 + 88))
    {
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    unint64_t object = (unint64_t)v165._object;
    uint64_t v19 = *((void *)&v167 + 1);
    long long v21 = v168;
    uint64_t v20 = v169;
    if ((void)v166)
    {
      uint64_t v22 = v166 + 24 * (((unint64_t)v165._object >> ((4 * *(unsigned char *)(v166 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v23 = *(void *)(v22 + 32);
      unint64_t v153 = *(void *)(v22 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v24 = v169;
      uint64_t v25 = *(void *)(v3 + 64);
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v153 = specialized Rope._Node.subscript.getter(object, v25);
      uint64_t v23 = v26;
      uint64_t v20 = v24;
      swift_unknownObjectRelease();
    }
    uint64_t v27 = v148;
    uint64_t v28 = v146;
    char v29 = static BigString.Index.< infix(_:_:)();
    uint64_t v30 = v20;
    if (v29) {
      uint64_t v31 = v19;
    }
    else {
      uint64_t v31 = v149;
    }
    if (v29)
    {
      uint64_t v32 = *((void *)&v21 + 1);
      uint64_t v27 = v21;
    }
    else
    {
      uint64_t v32 = v147;
    }
    if (v29) {
      uint64_t v28 = v30;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    uint64_t v33 = result + v153;
    if (__OFADD__(result, v153)) {
      goto LABEL_153;
    }
    uint64_t v34 = BigString.Index.utf8Offset.getter();
    if (v34 >= v33) {
      uint64_t v35 = v33;
    }
    else {
      uint64_t v35 = v34;
    }
    long long v36 = *v141;
    long long v37 = v141[1];
    long long v215 = v141[2];
    v214[1] = v37;
    v214[0] = v36;
    long long v38 = *v141;
    long long v39 = v141[1];
    v216[2] = v215;
    v216[1] = v39;
    v216[0] = v38;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v216, (uint64_t)v217);
    outlined retain of Locale((uint64_t)v217);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v214);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v35, result)) {
      goto LABEL_154;
    }
    uint64_t v40 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    outlined release of Locale((uint64_t)v192);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
    uint64_t v197 = v31;
    uint64_t v198 = v27;
    uint64_t v199 = v32;
    uint64_t v200 = v28;
    uint64_t v201 = v40;
    uint64_t v202 = v42;
    uint64_t v203 = v44;
    uint64_t v204 = v46;
    unint64_t v48 = v155[8];
    uint64_t v47 = v155[9];
    uint64_t v154 = v155[10];
    uint64_t v49 = v152;
    uint64_t v50 = v161;
    uint64_t v150 = v155[11];
    if (v152 == 1 || v161 != v155[11])
    {
      if (v48) {
        uint64_t v55 = v155[9];
      }
      else {
        uint64_t v55 = 0;
      }
      if (v163 < 0 || v55 < v163)
      {
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
        goto LABEL_169;
      }
      if (v48 && v163 < v47 && *(_WORD *)(v48 + 16))
      {
        uint64_t v56 = v155[9];
        uint64_t v57 = *(unsigned __int8 *)(v48 + 18);
        if (*(unsigned char *)(v48 + 18))
        {
          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          uint64_t v58 = v163;
          unint64_t v59 = v48;
          while (1)
          {
            unint64_t v62 = *(unsigned __int16 *)(v59 + 16);
            if (*(_WORD *)(v59 + 16))
            {
              uint64_t v63 = *(void *)(v59 + 32);
              BOOL v64 = __OFSUB__(v58, v63);
              uint64_t v65 = v58 - v63;
              if (v64) {
                goto LABEL_149;
              }
              if (__OFADD__(v65, 1)) {
                goto LABEL_150;
              }
              if (v65 + 1 <= 0)
              {
                unint64_t v62 = 0;
                goto LABEL_41;
              }
              if (v62 != 1)
              {
                uint64_t v66 = *(void *)(v59 + 56);
                uint64_t v58 = v65 - v66;
                if (__OFSUB__(v65, v66)) {
                  goto LABEL_163;
                }
                if (__OFADD__(v58, 1)) {
                  goto LABEL_164;
                }
                if (v58 + 1 < 1)
                {
                  unint64_t v62 = 1;
                  uint64_t v58 = v65;
                  goto LABEL_41;
                }
                if (v62 == 2) {
                  goto LABEL_40;
                }
                uint64_t v67 = *(void *)(v59 + 80);
                BOOL v64 = __OFSUB__(v58, v67);
                uint64_t v65 = v58 - v67;
                if (v64) {
                  goto LABEL_167;
                }
                if (__OFADD__(v65, 1)) {
                  goto LABEL_168;
                }
                if (v65 + 1 < 1)
                {
                  unint64_t v62 = 2;
                  goto LABEL_41;
                }
                if (v62 != 3)
                {
                  uint64_t v68 = 3;
                  if (v62 > 3) {
                    uint64_t v68 = *(unsigned __int16 *)(v59 + 16);
                  }
                  unint64_t v69 = (void *)(v59 + 104);
                  uint64_t v70 = 3;
                  while (1)
                  {
                    if (v68 == v70) {
                      goto LABEL_159;
                    }
                    uint64_t v58 = v65 - *v69;
                    if (__OFSUB__(v65, *v69)) {
                      goto LABEL_160;
                    }
                    if (__OFADD__(v58, 1)) {
                      goto LABEL_161;
                    }
                    if (v58 + 1 < 1) {
                      break;
                    }
                    ++v70;
                    v69 += 3;
                    uint64_t v65 = v58;
                    if (v62 == v70) {
                      goto LABEL_40;
                    }
                  }
                  unint64_t v62 = v70;
                  uint64_t v58 = v65;
                  goto LABEL_41;
                }
              }
              uint64_t v58 = v65;
            }
LABEL_40:
            if (v58)
            {
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
              goto LABEL_152;
            }
LABEL_41:
            char v60 = (4 * *(unsigned char *)(v59 + 18) + 8) & 0x3C;
            uint64_t v57 = ((-15 << v60) - 1) & v57 | (v62 << v60);
            unint64_t v61 = *(void *)(v59 + 24 + 24 * v62);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v59 = v61;
            if (!*(unsigned char *)(v61 + 18)) {
              goto LABEL_73;
            }
          }
        }
        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain();
        uint64_t v58 = v163;
        unint64_t v61 = v48;
LABEL_73:
        uint64_t v71 = v61;
        uint64_t v72 = *(unsigned __int16 *)(v61 + 16);
        if (v72)
        {
          unint64_t v73 = v58 - 1;
          uint64_t v51 = v151;
          if (__OFSUB__(v58, 1))
          {
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
            goto LABEL_175;
          }
          if (__OFADD__(v73, 1)) {
            goto LABEL_171;
          }
          if (v58 <= 0)
          {
            uint64_t v72 = 0;
          }
          else
          {
            if (v72 == 1) {
              goto LABEL_97;
            }
            BOOL v64 = __OFSUB__(v73, 1);
            unint64_t v73 = v58 - 2;
            if (v64) {
              goto LABEL_174;
            }
            if (__OFADD__(v73, 1))
            {
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
              goto LABEL_177;
            }
            if (v58 - 1 < 1)
            {
              uint64_t v72 = 1;
            }
            else
            {
              if (v72 == 2) {
                goto LABEL_97;
              }
              BOOL v64 = __OFSUB__(v73, 1);
              unint64_t v73 = v58 - 3;
              if (v64) {
                goto LABEL_176;
              }
              if (__OFADD__(v73, 1))
              {
LABEL_177:
                __break(1u);
                return result;
              }
              if (v58 - 2 < 1)
              {
                uint64_t v72 = 2;
              }
              else
              {
                if (v72 == 3) {
                  goto LABEL_97;
                }
                uint64_t v74 = 0;
                if (v73 >= v72 - 4) {
                  unint64_t v75 = v72 - 4;
                }
                else {
                  unint64_t v75 = v58 - 3;
                }
                if (v75 >= v58 + 0x7FFFFFFFFFFFFFFDLL) {
                  unint64_t v75 = v58 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (1)
                {
                  if (v72 - 3 <= v75) {
                    goto LABEL_172;
                  }
                  if (v58 + 0x7FFFFFFFFFFFFFFDLL == v74) {
                    goto LABEL_173;
                  }
                  if (v73 == v74) {
                    break;
                  }
                  if (v72 - 3 == ++v74)
                  {
                    v73 -= v74;
                    goto LABEL_97;
                  }
                }
                uint64_t v72 = v58;
              }
            }
          }
        }
        else
        {
          unint64_t v73 = v58;
          uint64_t v51 = v151;
LABEL_97:
          if (v73)
          {
LABEL_169:
            __break(1u);
            goto LABEL_170;
          }
        }
        swift_unknownObjectRelease();
        uint64_t v49 = v71;
        swift_unknownObjectRelease();
        unint64_t v52 = v57 & 0xFFFFFFFFFFFFF0FFLL | (v72 << 8);
        uint64_t v47 = v56;
        uint64_t v50 = v150;
      }
      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v50 = v150;
        unint64_t v52 = specialized Rope._endPath.getter(v48);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v49 = 0;
        uint64_t v51 = v151;
        if (!v48)
        {
          uint64_t v53 = v47;
          goto LABEL_105;
        }
      }
      swift_unknownObjectRetain();
      uint64_t v53 = v47;
      uint64_t v54 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v50, v52, v49, v48, v47, v154);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_106;
    }
    uint64_t v51 = v151;
    if (v151 != 2)
    {
      uint64_t v53 = v155[9];
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v54 = result;
      unint64_t v52 = v156;
      goto LABEL_106;
    }
    unint64_t v52 = v156;
    if (v48)
    {
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v53 = v47;
      uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v161, v156, v152, v48, v47, v154);
      uint64_t v54 = result;
      goto LABEL_106;
    }
    uint64_t v53 = v155[9];
    uint64_t result = swift_retain();
LABEL_105:
    uint64_t v54 = 0;
LABEL_106:
    v174._uint64_t countAndFlagsBits = v50;
    v174._unint64_t object = (void *)v52;
    *(void *)&long long v175 = v49;
    if (__OFADD__(v163, 1))
    {
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    if (v50 != v150)
    {
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    uint64_t v164 = v163 + 1;
    if (v49)
    {
      unint64_t v76 = *(void *)(v49 + 24 * ((v52 >> ((4 * *(unsigned char *)(v49 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v76 = specialized Rope._Node.subscript.getter(v52, v48);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v64 = __OFADD__(v54, v76);
    unint64_t v77 = v54 + v76;
    if (v64)
    {
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v174, v48, v53, v154, v150);
    swift_unknownObjectRelease_n();
    uint64_t countAndFlagsBits = v174._countAndFlagsBits;
    v157 = v174._object;
    uint64_t v152 = v175;
    if (v51 != 2)
    {
      long long v94 = *v141;
      long long v95 = v141[1];
      long long v209 = v141[2];
      v208[1] = v95;
      v208[0] = v94;
      long long v96 = *v141;
      long long v97 = v141[1];
      v222[2] = v209;
      v222[1] = v97;
      v222[0] = v96;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v222, (uint64_t)v223);
      outlined retain of Locale((uint64_t)v223);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v208);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (!__OFSUB__(v77, result))
      {
        uint64_t v86 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v88 = v98;
        uint64_t v90 = v99;
        uint64_t v92 = v100;
        v93 = &v193;
        goto LABEL_116;
      }
      goto LABEL_166;
    }
    long long v78 = *v141;
    long long v79 = v141[1];
    long long v213 = v141[2];
    v212[1] = v79;
    v212[0] = v78;
    long long v80 = *v141;
    long long v81 = v141[1];
    v218[2] = v213;
    v218[1] = v81;
    v218[0] = v80;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v218, (uint64_t)v219);
    outlined retain of Locale((uint64_t)v219);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v212);
    long long v82 = *v141;
    long long v83 = v141[1];
    long long v211 = v141[2];
    v210[1] = v83;
    v210[0] = v82;
    long long v84 = *v141;
    long long v85 = v141[1];
    v220[2] = v211;
    v220[1] = v85;
    v220[0] = v84;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v220, (uint64_t)v221);
    outlined retain of Locale((uint64_t)v221);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v210);
    uint64_t v86 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    v93 = &v194;
LABEL_116:
    outlined release of Locale((uint64_t)v93);
    swift_release();
    uint64_t v151 = v92;
    uint64_t v158 = v90;
    uint64_t v159 = v88;
    uint64_t v160 = v86;
    long long v101 = v129[1];
    long long v205 = *v129;
    long long v206 = v101;
    long long v207 = v129[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v195);
    uint64_t v102 = MEMORY[0x185302030](v196);
    unint64_t v104 = v103;
    uint64_t v105 = v190 & 0xFFFFFFFFFFFFLL;
    if ((v191 & 0x2000000000000000) != 0) {
      uint64_t v105 = HIBYTE(v191) & 0xF;
    }
    if (v105)
    {
      v106._uint64_t countAndFlagsBits = 10;
      v106._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v106);
    }
    v172._uint64_t countAndFlagsBits = v102;
    v172._unint64_t object = v104;
    v107._uint64_t countAndFlagsBits = 32;
    v107._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v107);
    v171._uint64_t countAndFlagsBits = 0;
    v171._unint64_t object = (void *)0xE000000000000000;
    uint64_t v108 = v23 + 64;
    uint64_t v109 = 1 << *(unsigned char *)(v23 + 32);
    if (v109 < 64) {
      uint64_t v110 = ~(-1 << v109);
    }
    else {
      uint64_t v110 = -1;
    }
    unint64_t v111 = v110 & *(void *)(v23 + 64);
    int64_t v112 = (unint64_t)(v109 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v113 = 0;
    while (1)
    {
      if (v111)
      {
        unint64_t v114 = __clz(__rbit64(v111));
        v111 &= v111 - 1;
        unint64_t v115 = v114 | (v113 << 6);
        goto LABEL_125;
      }
      int64_t v124 = v113 + 1;
      if (__OFADD__(v113, 1))
      {
        __break(1u);
        goto LABEL_148;
      }
      if (v124 >= v112) {
        break;
      }
      unint64_t v125 = *(void *)(v108 + 8 * v124);
      ++v113;
      if (!v125)
      {
        int64_t v113 = v124 + 1;
        if (v124 + 1 >= v112) {
          break;
        }
        unint64_t v125 = *(void *)(v108 + 8 * v113);
        if (!v125)
        {
          int64_t v113 = v124 + 2;
          if (v124 + 2 >= v112) {
            break;
          }
          unint64_t v125 = *(void *)(v108 + 8 * v113);
          if (!v125)
          {
            int64_t v113 = v124 + 3;
            if (v124 + 3 >= v112) {
              break;
            }
            unint64_t v125 = *(void *)(v108 + 8 * v113);
            if (!v125)
            {
              int64_t v113 = v124 + 4;
              if (v124 + 4 >= v112) {
                break;
              }
              unint64_t v125 = *(void *)(v108 + 8 * v113);
              if (!v125)
              {
                int64_t v126 = v124 + 5;
                if (v126 >= v112) {
                  break;
                }
                unint64_t v125 = *(void *)(v108 + 8 * v126);
                if (!v125)
                {
                  while (1)
                  {
                    int64_t v113 = v126 + 1;
                    if (__OFADD__(v126, 1)) {
                      goto LABEL_162;
                    }
                    if (v113 >= v112) {
                      goto LABEL_4;
                    }
                    unint64_t v125 = *(void *)(v108 + 8 * v113);
                    ++v126;
                    if (v125) {
                      goto LABEL_144;
                    }
                  }
                }
                int64_t v113 = v126;
              }
            }
          }
        }
      }
LABEL_144:
      unint64_t v111 = (v125 - 1) & v125;
      unint64_t v115 = __clz(__rbit64(v125)) + (v113 << 6);
LABEL_125:
      unint64_t v116 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v115);
      uint64_t v118 = *v116;
      v117 = (void *)v116[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v23 + 56) + 72 * v115, (uint64_t)&v175);
      v174._uint64_t countAndFlagsBits = v118;
      v174._unint64_t object = v117;
      long long v167 = v176;
      long long v168 = v177;
      long long v169 = *(_OWORD *)v178;
      uint64_t v170 = *(void *)&v178[16];
      Swift::String v165 = v174;
      long long v166 = v175;
      Swift::String v119 = v174;
      swift_bridgeObjectRetain();
      String.append(_:)(v119);
      v120._uint64_t countAndFlagsBits = 2112800;
      v120._unint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v120);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v166, (uint64_t)v173);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v121._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v121);
      swift_bridgeObjectRelease();
      v122._uint64_t countAndFlagsBits = 10;
      v122._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v122);
      v123._uint64_t countAndFlagsBits = 9;
      v123._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?((uint64_t)&v165, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_4:
    swift_release();
    v174._uint64_t countAndFlagsBits = 2683;
    v174._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v171);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 125;
    v17._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    String.append(_:)(v174);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v172);
    uint64_t v3 = (uint64_t)v155;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = v127;
    unint64_t v2 = v128;
    uint64_t v12 = countAndFlagsBits;
    uint64_t v16 = v164;
    uint64_t v14 = v159;
    uint64_t v9 = v160;
    uint64_t v13 = (uint64_t)v157;
    uint64_t v15 = v158;
    if (v164 != v127) {
      continue;
    }
    break;
  }
  uint64_t v5 = v190;
LABEL_146:
  swift_release();
  outlined release of AttributedString.Runs((uint64_t)&v224);
  return v5;
}

BOOL cachedObjCTypeInfoIsEqual(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)) == 0;
}

uint64_t storeEnumTagSinglePayload for URLQueryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

BOOL cStringEqual(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance String(void *a1, void *a2)
{
  swift_bridgeObjectRelease();
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t destroy for IndexPath.Storage(uint64_t a1)
{
  return outlined consume of IndexPath.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

_OWORD *assignWithTake for Locale(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for IndexPath()
{
  return &type metadata for IndexPath;
}

void *assignWithCopy for Locale(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t outlined consume of IndexPath.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

double Measurement.value.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

BOOL static Date.> infix(_:_:)(double *a1, double *a2)
{
  return *a2 < *a1;
}

uint64_t type metadata instantiation function for NSObject.KVOSubscription()
{
  return MEMORY[0x1F41863F0]();
}

ValueMetadata *type metadata accessor for DateComponents()
{
  return &type metadata for DateComponents;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.UnicodeScalarView@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

Foundation::Date __swiftcall Date.init(timeIntervalSinceReferenceDate:)(Foundation::Date timeIntervalSinceReferenceDate)
{
  v1->_time = timeIntervalSinceReferenceDate._time;
  return timeIntervalSinceReferenceDate;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.VariableID()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for Locale.Language()
{
  return &type metadata for Locale.Language;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String._BlockSearchingOptions(void *a1, void *a2)
{
  return *a1 == *a2;
}

id Measurement.unit.getter()
{
  return *v0;
}

double Date.timeIntervalSince1970.getter()
{
  return *v0 + 978307200.0;
}

uint64_t storeEnumTagSinglePayload for iovec(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void sub_1817AD6E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1817AD6B4);
  }
  _Unwind_Resume(a1);
}

BOOL specialized static CGPoint._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGPoint(0);
  int v5 = strcmp(v4, "{CGPoint=dd}");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v5)
  {
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)(a2 + 16) = 0;
    objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return v5 == 0;
}

BOOL specialized static CGSize._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGSize(0);
  int v5 = strcmp(v4, "{CGSize=dd}");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v5)
  {
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)(a2 + 16) = 0;
    objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return v5 == 0;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void *__cdecl NSHashGet(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void * _Nonnull NSHashGet(NSHashTable * _Nonnull, const void * _Nullable)");
  }

  return [(NSHashTable *)table getItem:pointer];
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t Data.subscript.getter(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  switch(a3 >> 62)
  {
    case 1uLL:
      if (result >= a2 >> 32 || (int)a2 > result) {
        goto LABEL_17;
      }
      uint64_t v3 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v3)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v4 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v5 = __OFSUB__(result, v4);
      uint64_t v6 = result - v4;
      if (!v5) {
        return *(unsigned __int8 *)(v3 + v6);
      }
      __break(1u);
LABEL_10:
      if (*(void *)(a2 + 16) > result)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      if (*(void *)(a2 + 24) <= result)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      uint64_t v3 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v3)
      {
LABEL_23:
        __break(1u);
        return result;
      }
      uint64_t v7 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v5 = __OFSUB__(result, v7);
      uint64_t v6 = result - v7;
      if (v5) {
        goto LABEL_20;
      }
      return *(unsigned __int8 *)(v3 + v6);
    case 2uLL:
      goto LABEL_10;
    case 3uLL:
      __break(1u);
      goto LABEL_22;
    default:
      if (result < BYTE6(a3))
      {
        uint64_t v8 = a2;
        __int16 v9 = a3;
        char v10 = BYTE2(a3);
        char v11 = BYTE3(a3);
        char v12 = BYTE4(a3);
        char v13 = BYTE5(a3);
        return *((unsigned __int8 *)&v8 + result);
      }
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
  }
}

ValueMetadata *type metadata accessor for DateInterval()
{
  return &type metadata for DateInterval;
}

uint64_t getEnumTagSinglePayload for Locale.Language(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

xpc_object_t _xpcRetainCallback(int a1, xpc_object_t object)
{
  return xpc_retain(object);
}

uint64_t destroy for DebugStringConversionState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void _xpcReleaseCallback(int a1, xpc_object_t object)
{
}

uint64_t cachedObjCTypeInfoHash(uint64_t a1)
{
  Swift::UInt v1 = *(const char **)(a1 + 8);
  size_t v2 = strlen(v1);

  return MEMORY[0x1F40D8620](v1, v2);
}

uint64_t NSKeyValuePropertyHash(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return [*(id *)(a1 + 16) hash] ^ v1;
}

uint64_t getEnumTagSinglePayload for LocalizedStringResource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

BOOL _isEqualCString(char *__s1, char *a2)
{
  if (__s1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (__s1)
  {
    if (a2) {
      return strcmp(__s1, a2) == 0;
    }
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance String(void *a1, id *a2)
{
  swift_bridgeObjectRelease();
  *a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2[1] = v4;
  return 1;
}

char *NSScanner.scanUpToCharacters(from:)(uint64_t *a1)
{
  unint64_t v2 = v1;
  uint64_t v73 = *a1;
  id v3 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v74 = v1;
  if (!v3)
  {
    id v25 = objc_msgSend(v1, sel_string);
    unint64_t v26 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    unint64_t v28 = v27;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v29 = StringProtocol._toUTF16Index(_:)();
    unint64_t v30 = v29;
    uint64_t v31 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0) {
      uint64_t v31 = v26 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v32 = 4 * v31;
    if (4 * v31 != v29 >> 14)
    {
      uint64_t v33 = 0;
      do
      {
        BOOL result = (char *)String.Index.samePosition(in:)();
        if ((v34 & 1) == 0) {
          break;
        }
        uint64_t v35 = v33 + 1;
        if (__OFADD__(v33, 1))
        {
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        long long v36 = (char *)objc_msgSend(v74, sel__deprecated_scanLocation);
        BOOL v21 = __OFADD__(v36, v35);
        BOOL result = &v36[v35];
        if (v21) {
          goto LABEL_54;
        }
        unint64_t v30 = StringProtocol._toUTF16Index(_:)();
        ++v33;
      }
      while (v32 != v30 >> 14);
    }
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  id v4 = v3;
  objc_msgSend(v4, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v75;
  *(unsigned char *)(v5 + 24) = 0;

  id v6 = objc_msgSend(v2, sel_string);
  id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v72 = v7;

  id v8 = objc_msgSend(v2, sel_string);
  unint64_t v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  unint64_t v11 = v10;

  objc_msgSend(v2, sel__deprecated_scanLocation);
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v12 = StringProtocol._toUTF16Index(_:)();
  unint64_t v13 = v12;
  uint64_t v14 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v15 = 4 * v14;
  if (4 * v14 != v12 >> 14)
  {
    uint64_t v16 = 0;
    do
    {
      BOOL result = (char *)String.Index.samePosition(in:)();
      if ((v18 & 1) == 0) {
        break;
      }
      uint64_t v19 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v20 = (char *)objc_msgSend(v74, sel__deprecated_scanLocation);
      BOOL v21 = __OFADD__(v20, v19);
      BOOL result = &v20[v19];
      if (v21) {
        goto LABEL_52;
      }
      unint64_t v13 = StringProtocol._toUTF16Index(_:)();
      ++v16;
    }
    while (v15 != v13 >> 14);
  }
  swift_bridgeObjectRelease();
  unint64_t v22 = specialized Collection.suffix(from:)(v13, (uint64_t)v70, v72);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (v24 >> 14 != v22 >> 14)
  {
    swift_retain();
    unint64_t v30 = v22;
    while (1)
    {
      uint64_t v37 = Substring.subscript.getter();
      unint64_t v39 = v38;
      swift_retain();
      LOBYTE(v37) = specialized Sequence.allSatisfy(_:)(v37, v39, v5);
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0) {
        break;
      }
      unint64_t v30 = Substring.index(after:)();
      if (v24 >> 14 == v30 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    swift_release_n();
LABEL_32:
    uint64_t v40 = v74;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v40 = v74;
  id v41 = objc_msgSend(v74, sel_string);
  uint64_t v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  unint64_t v44 = v43;
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0) {
    uint64_t v45 = v42;
  }
  uint64_t v46 = v45 << 16;
  if ((v44 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0) {
    unint64_t v30 = v46 | 7;
  }
  else {
    unint64_t v30 = v46 | 0xB;
  }
LABEL_33:
  id v47 = objc_msgSend(v40, sel_string);
  uint64_t v48 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  unint64_t v50 = v49;

  swift_bridgeObjectRetain();
  unint64_t v51 = specialized Collection.suffix(from:)(v30, v48, v50);
  unint64_t v53 = v52;
  unint64_t v71 = v50;
  swift_bridgeObjectRelease();
  if (v53 >> 14 == v51 >> 14)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    uint64_t v58 = HIBYTE(v71) & 0xF;
    if ((v71 & 0x2000000000000000) == 0) {
      uint64_t v58 = v48;
    }
    uint64_t v59 = v58 << 16;
    if ((v71 & 0x1000000000000000) == 0 || (v48 & 0x800000000000000) != 0) {
      unint64_t v54 = v59 | 7;
    }
    else {
      unint64_t v54 = v59 | 0xB;
    }
  }
  else
  {
    swift_retain();
    unint64_t v54 = v51;
    while (1)
    {
      uint64_t v55 = Substring.subscript.getter();
      unint64_t v57 = v56;
      swift_retain();
      LOBYTE(v55) = specialized Sequence.allSatisfy(_:)(v55, v57, v73);
      swift_bridgeObjectRelease();
      if (v55) {
        break;
      }
      unint64_t v54 = Substring.index(after:)();
      if (v53 >> 14 == v54 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  if (v30 >> 14 == v54 >> 14)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  id v61 = objc_msgSend(v74, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v61);

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v62 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  BOOL result = (char *)objc_msgSend(v74, sel__deprecated_setScanLocation_, v62);
  if (v54 >> 14 >= v30 >> 14)
  {
    uint64_t v63 = String.subscript.getter();
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    swift_bridgeObjectRelease();
    uint64_t v60 = MEMORY[0x185301F50](v63, v65, v67, v69);
    swift_bridgeObjectRelease();
    return (char *)v60;
  }
LABEL_55:
  __break(1u);
  return result;
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    do
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        UTF32Char v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        UTF32Char v8 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v10 = v9;
      int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(a3 + 16), v8);
      BOOL v12 = IsLongCharacterMember != 0;
      v7 += v10;
      if (IsLongCharacterMember) {
        BOOL v13 = v7 < v4;
      }
      else {
        BOOL v13 = 0;
      }
    }
    while (v13);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v12 = 1;
  }
  swift_release();
  return v12;
}

Swift::String_optional __swiftcall NSScanner.scanString(_:)(Swift::String a1)
{
  unint64_t v2 = v1;
  id object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v4 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v101 = v1;
  uint64_t v98 = countAndFlagsBits;
  if (!v4)
  {
    id v27 = objc_msgSend(v1, sel_string);
    unint64_t v28 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    unint64_t v30 = v29;

    unint64_t v105 = v28;
    unint64_t v106 = v30;
    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v31 = StringProtocol._toUTF16Index(_:)();
    unint64_t v32 = v31;
    uint64_t v33 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0) {
      uint64_t v33 = v28 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v34 = 4 * v33;
    if (4 * v33 != v31 >> 14)
    {
      uint64_t v35 = 0;
      do
      {
        uint64_t v19 = (char *)String.Index.samePosition(in:)();
        if ((v20 & 1) == 0) {
          break;
        }
        uint64_t v36 = v35 + 1;
        if (__OFADD__(v35, 1))
        {
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        unint64_t v105 = v28;
        unint64_t v106 = v30;
        uint64_t v37 = (char *)objc_msgSend(v2, sel__deprecated_scanLocation);
        BOOL v23 = __OFADD__(v37, v36);
        uint64_t v19 = &v37[v36];
        if (v23) {
          goto LABEL_63;
        }
        unint64_t v32 = StringProtocol._toUTF16Index(_:)();
        ++v35;
      }
      while (v34 != v32 >> 14);
    }
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  id v5 = v4;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = *(void *)&v104[0];
  *(unsigned char *)(v6 + 24) = 0;

  id v7 = objc_msgSend(v2, sel_string);
  id v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v9 = v8;

  id v10 = objc_msgSend(v2, sel_string);
  unint64_t v11 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  unint64_t v13 = v12;

  unint64_t v105 = v11;
  unint64_t v106 = v13;
  objc_msgSend(v2, sel__deprecated_scanLocation);
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v14 = StringProtocol._toUTF16Index(_:)();
  unint64_t v15 = v14;
  uint64_t v16 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v17 = 4 * v16;
  if (4 * v16 != v14 >> 14)
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = (char *)String.Index.samePosition(in:)();
      if ((v20 & 1) == 0) {
        break;
      }
      uint64_t v21 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      unint64_t v105 = v11;
      unint64_t v106 = v13;
      unint64_t v22 = (char *)objc_msgSend(v101, sel__deprecated_scanLocation);
      BOOL v23 = __OFADD__(v22, v21);
      uint64_t v19 = &v22[v21];
      if (v23) {
        goto LABEL_61;
      }
      unint64_t v15 = StringProtocol._toUTF16Index(_:)();
      ++v18;
    }
    while (v17 != v15 >> 14);
  }
  swift_bridgeObjectRelease();
  unint64_t v24 = specialized Collection.suffix(from:)(v15, (uint64_t)v97, v9);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (v26 >> 14 != v24 >> 14)
  {
    swift_retain();
    unint64_t v32 = v24;
    while (1)
    {
      uint64_t v38 = Substring.subscript.getter();
      unint64_t v40 = v39;
      swift_retain();
      LOBYTE(v38) = specialized Sequence.allSatisfy(_:)(v38, v40, v6);
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0) {
        break;
      }
      unint64_t v32 = Substring.index(after:)();
      if (v26 >> 14 == v32 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    swift_release_n();
    unint64_t v2 = v101;
LABEL_32:
    uint64_t v47 = v98;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  unint64_t v2 = v101;
  id v41 = objc_msgSend(v101, sel_string);
  uint64_t v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  unint64_t v44 = v43;
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0) {
    uint64_t v45 = v42;
  }
  uint64_t v46 = v45 << 16;
  uint64_t v47 = v98;
  if ((v44 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0) {
    unint64_t v32 = v46 | 7;
  }
  else {
    unint64_t v32 = v46 | 0xB;
  }
LABEL_33:
  id v48 = objc_msgSend(v2, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v48);

  String.count.getter();
  id v49 = objc_msgSend(v2, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v49);

  swift_bridgeObjectRelease();
  unint64_t v50 = String.index(_:offsetBy:limitedBy:)();
  LOBYTE(v48) = v51;
  swift_bridgeObjectRelease();
  if (v48) {
    goto LABEL_56;
  }
  unint64_t v52 = v47;
  id v53 = objc_msgSend(v2, sel_string);
  id v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  uint64_t v56 = v55;

  uint64_t v19 = (char *)objc_msgSend(v2, sel_caseSensitive);
  if (v50 >> 14 < v32 >> 14)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  char v57 = (char)v19;
  uint64_t v96 = v19 ^ 1;
  if (objc_msgSend(v2, sel_locale))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v104, 0, sizeof(v104));
  }
  outlined init with take of Any?((uint64_t)v104, (uint64_t)&v105);
  if (!v107)
  {
    outlined destroy of Any?((uint64_t)&v105);
    goto LABEL_45;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_45:
    unint64_t v105 = v52;
    unint64_t v106 = (unint64_t)object;
LABEL_46:
    *(void *)&v104[0] = v54;
    *((void *)&v104[0] + 1) = v56;
    swift_bridgeObjectRetain();
    Substring.init<A>(_:)();
    unint64_t v66 = Substring.subscript.getter();
    unint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    *(void *)&v104[0] = v52;
    *((void *)&v104[0] + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v73 = Substring.init<A>(_:)();
    if (v57)
    {
      if (v70 != v75 || v72 != v76 || v66 >> 16 != v73 >> 16 || v68 >> 16 != v74 >> 16)
      {
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
        {
          LOBYTE(v95) = 1;
          char v77 = _stringCompareInternal(_:_:_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v77 & 1) == 0) {
            goto LABEL_58;
          }
          goto LABEL_56;
        }
LABEL_55:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    else if (specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v73, v74, v75, v76, 0, 0, v96, 0, 0, v66, v68, v70, v72))
    {
      goto LABEL_55;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_58:
    id v80 = objc_msgSend(v101, sel_string, v95);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v80);

    uint64_t v81 = String.subscript.getter();
    uint64_t v83 = v82;
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    swift_bridgeObjectRelease();
    id v88 = objc_msgSend(v101, sel_string);
    id v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    unint64_t v91 = v90;

    unint64_t v105 = (unint64_t)v89;
    unint64_t v106 = v91;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v92 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v101, sel__deprecated_setScanLocation_, v92);
    uint64_t v78 = MEMORY[0x185301F50](v81, v83, v85, v87);
    long long v79 = v93;
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  unint64_t v105 = v52;
  unint64_t v106 = (unint64_t)object;
  if (!v102) {
    goto LABEL_46;
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  uint64_t v58 = v56;
  *(void *)&v104[0] = v54;
  *((void *)&v104[0] + 1) = v56;
  StringProtocol._ephemeralString.getter();
  id v100 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v59 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  *(void *)&v104[0] = v54;
  *((void *)&v104[0] + 1) = v58;
  uint64_t v19 = (char *)StringProtocol._toUTF16Offsets(_:)();
  int64_t v60 = v20 - v19;
  if (__OFSUB__(v20, v19))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  id v61 = v19;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v63 = *(uint64_t (**)(uint64_t))(v103 + 488);
  swift_unknownObjectRetain();
  uint64_t v64 = (void *)v63(ObjectType);
  swift_unknownObjectRelease();
  id v65 = objc_msgSend(v100, sel_compare_options_range_locale_, v59, v96, v61, v60, v64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (!v65) {
    goto LABEL_58;
  }
LABEL_56:
  uint64_t v78 = 0;
  long long v79 = 0;
LABEL_59:
  uint64_t v19 = (char *)v78;
  uint64_t v20 = v79;
LABEL_66:
  result.value._id object = v20;
  result.value._uint64_t countAndFlagsBits = (uint64_t)v19;
  return result;
}

id static String._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return 0;
  }
  int isTaggedPointer = _objc_isTaggedPointer((unint64_t)a1);
  id v3 = a1;
  id v4 = v3;
  if (!isTaggedPointer)
  {
LABEL_6:
    if (__CFStringIsCF())
    {
    }
    else
    {
      id v7 = v4;
      uint64_t v8 = String.init(_nativeStorage:)();
      if (v9)
      {
        uint64_t v6 = v8;

        return (id)v6;
      }
      if (objc_msgSend(v7, sel_length)) {
        return (id)String.init(_cocoaString:)();
      }
    }
    return 0;
  }
  uint64_t TaggedPointerTag = _objc_getTaggedPointerTag((uint64_t)v3);
  if (TaggedPointerTag != 22)
  {
    if (TaggedPointerTag == 2)
    {
      MEMORY[0x1F4188790](TaggedPointerTag);
      uint64_t v6 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();

      return (id)v6;
    }
    goto LABEL_6;
  }
  id v10 = v4;
  id result = objc_msgSend(v10, sel_UTF8String);
  if (result)
  {
    id v12 = result;
    uint64_t v13 = MEMORY[0x185301F80]();
    if (v14)
    {
      uint64_t v6 = v13;

      return (id)v6;
    }
    id result = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithUTF8String_, v12);
    if (result)
    {
      unint64_t v15 = result;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t _objc_isTaggedPointer(unint64_t a1)
{
  return a1 >> 63;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t _objc_getTaggedPointerTag(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *MEMORY[0x1E4FBA8E0];
  if ((~a1 & 0xC000000000000007) == 0) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 ^ a1;
  do
  {
    if ((v3 & 7) == *(unsigned char *)(MEMORY[0x1E4FBA8D0] + v1)) {
      break;
    }
    ++v1;
  }
  while (v1 != 7);
  unint64_t v4 = v1 | v3;
  uint64_t v5 = v1 & 7;
  unsigned int v6 = (v4 >> 55) + 8;
  if (v5 == 7) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  int v226 = a7;
  int v227 = a5;
  unint64_t v19 = a10;
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  uint64_t v224 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x1F4188790](v224);
  v223 = (char *)&v188 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v202 = a11;
  unint64_t v211 = a11 >> 14;
  unint64_t v204 = a10 >> 14;
  if (a10 >> 14 >= a11 >> 14)
  {
    if (a6)
    {
      uint64_t v193 = 0;
      unint64_t v207 = a2 >> 14;
      unint64_t v212 = 0xE000000000000000;
      unint64_t v26 = a10;
      unint64_t v203 = a1;
      goto LABEL_203;
    }
    uint64_t v159 = 0;
LABEL_210:
    if ((a1 ^ a2) >> 14) {
      uint64_t v178 = -1;
    }
    else {
      uint64_t v178 = 0;
    }
    if (v211 != v19 >> 14) {
      uint64_t v178 = 1;
    }
    if (v178) {
      return v178;
    }
    else {
      return v159;
    }
  }
  uint64_t v196 = a13;
  uint64_t v195 = a12;
  unint64_t v207 = a2 >> 14;
  if (a2 >> 14 <= a1 >> 14)
  {
    uint64_t v159 = 0;
    if (a6)
    {
      uint64_t v193 = 0;
      unint64_t v212 = 0xE000000000000000;
      unint64_t v203 = a1;
      unint64_t v26 = a10;
LABEL_198:
      uint64_t v213 = a3;
      uint64_t v210 = a4;
      unint64_t v160 = Substring.subscript.getter();
      char v162 = Character.isExtendCharacter.getter(v160, v161);
      swift_bridgeObjectRelease();
      if (v162)
      {
        unint64_t v26 = Substring.index(after:)();
        if (v211 > v26 >> 14)
        {
          unint64_t v163 = Substring.subscript.getter();
          char v165 = Character.isExtendCharacter.getter(v163, v164);
          swift_bridgeObjectRelease();
          if (v165)
          {
            do
            {
              unint64_t v26 = Substring.index(after:)();
              if (v211 <= v26 >> 14) {
                break;
              }
              unint64_t v166 = Substring.subscript.getter();
              char v168 = Character.isExtendCharacter.getter(v166, v167);
              swift_bridgeObjectRelease();
            }
            while ((v168 & 1) != 0);
          }
        }
      }
      goto LABEL_203;
    }
    goto LABEL_210;
  }
  unint64_t v205 = a2;
  int v192 = a8;
  uint64_t v193 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v191 = a9;
  int v190 = v227 | a6 | v226;
  v222 = (void (**)(char *, uint64_t))(v20 + 8);
  unint64_t v212 = 0xE000000000000000;
  uint64_t v24 = 15;
  unint64_t v218 = 15;
  unint64_t v25 = 0xE000000000000000;
  unint64_t v203 = a1;
  unint64_t v26 = a10;
  unint64_t v27 = v204;
  unint64_t v189 = a10;
  uint64_t v210 = a4;
  uint64_t v213 = a3;
  int v225 = a6;
  while (1)
  {
    uint64_t v216 = v22;
    unint64_t v217 = v24;
    uint64_t v199 = v25 & 0x2000000000000000;
    uint64_t v198 = HIBYTE(v25) & 0xF;
    uint64_t v197 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v25 & 0x2000000000000000) != 0) {
      uint64_t v28 = HIBYTE(v25) & 0xF;
    }
    else {
      uint64_t v28 = v23 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v214 = a1;
    uint64_t v215 = v26;
    unint64_t v209 = v25;
    uint64_t v208 = v23;
    if (v28)
    {
      unint64_t v29 = String.subscript.getter();
      unint64_t v31 = v30;
      unint64_t v218 = String.index(after:)();
    }
    else
    {
      unint64_t v29 = Substring.subscript.getter();
      unint64_t v31 = v32;
    }
    unint64_t v33 = v212;
    uint64_t v206 = v212 & 0x2000000000000000;
    uint64_t v34 = HIBYTE(v212) & 0xF;
    uint64_t v35 = v216 & 0xFFFFFFFFFFFFLL;
    uint64_t v201 = v34;
    if ((v212 & 0x2000000000000000) == 0) {
      uint64_t v34 = v216 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v200 = v34;
    if (v34)
    {
      unint64_t v36 = v212;
      unint64_t v37 = v19;
      uint64_t v38 = String.subscript.getter();
      unint64_t v219 = v39;
      unint64_t v33 = v36;
      uint64_t v40 = String.index(after:)();
      unint64_t v41 = v38;
      unint64_t v19 = v37;
      unint64_t v217 = v40;
      goto LABEL_14;
    }
    uint64_t v52 = Substring.subscript.getter();
    unint64_t v41 = v52;
    unint64_t v219 = v53;
    if (v28 || (v192 & 1) == 0) {
      goto LABEL_14;
    }
    unint64_t v54 = v52;
    Character.wholeNumberValue.getter();
    if (v55) {
      break;
    }
    Character.wholeNumberValue.getter();
    if (v56) {
      break;
    }
    uint64_t v57 = 0;
    unint64_t v58 = v215;
    while (1)
    {
      Substring.subscript.getter();
      uint64_t v59 = Character.wholeNumberValue.getter();
      if (v60) {
        break;
      }
      uint64_t v61 = 10 * v57;
      if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63) {
        break;
      }
      BOOL v62 = __OFADD__(v61, v59);
      uint64_t v63 = v61 + v59;
      if (v62) {
        break;
      }
      uint64_t v64 = v63;
      unint64_t v58 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      uint64_t v65 = v64;
      uint64_t v57 = v64;
      if (v211 <= v58 >> 14) {
        goto LABEL_125;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = v57;
LABEL_125:
    uint64_t v221 = v65;
    uint64_t v215 = v58;
    uint64_t v111 = 0;
    unint64_t v70 = v214;
    uint64_t v22 = v216;
    unint64_t v112 = v203;
    while (1)
    {
      unint64_t v113 = v112;
      Substring.subscript.getter();
      uint64_t v114 = Character.wholeNumberValue.getter();
      if (v115) {
        break;
      }
      uint64_t v116 = 10 * v111;
      if ((unsigned __int128)(v111 * (__int128)10) >> 64 != (10 * v111) >> 63) {
        break;
      }
      uint64_t v117 = v116 + v114;
      if (__OFADD__(v116, v114)) {
        break;
      }
      unint64_t v70 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      unint64_t v112 = v113;
      uint64_t v111 = v117;
      if (v207 <= v70 >> 14) {
        goto LABEL_132;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v117 = v111;
LABEL_132:
    if (v221 != v117)
    {
      uint64_t v187 = v221;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v187 >= v117) {
        return v117 < v187;
      }
      else {
        return -1;
      }
    }
    if ((v191 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v26 = v215;
      unint64_t v19 = v189;
      goto LABEL_139;
    }
    unint64_t v19 = v189;
    uint64_t v118 = Substring.distance(from:to:)();
    uint64_t v119 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118 == v119)
    {
      unint64_t v26 = v215;
LABEL_139:
      unint64_t v25 = v209;
      uint64_t v23 = v208;
      a4 = v210;
      uint64_t v24 = v217;
      goto LABEL_66;
    }
    uint64_t v23 = v208;
    uint64_t v24 = v217;
    if (v118 < v119) {
      uint64_t v158 = -1;
    }
    else {
      uint64_t v158 = v119 < v118;
    }
    uint64_t v193 = v158;
    unint64_t v26 = v215;
    unint64_t v25 = v209;
    a4 = v210;
LABEL_66:
    unint64_t v27 = v26 >> 14;
    if (v26 >> 14 >= v211)
    {
      a2 = v205;
      a1 = v70;
      if ((v225 & 1) == 0) {
        goto LABEL_209;
      }
LABEL_203:
      if (v207 > a1 >> 14)
      {
        unint64_t v169 = Substring.subscript.getter();
        char v171 = Character.isExtendCharacter.getter(v169, v170);
        swift_bridgeObjectRelease();
        if (v171)
        {
          a1 = Substring.index(after:)();
          if (v207 > a1 >> 14)
          {
            unint64_t v172 = Substring.subscript.getter();
            char v174 = Character.isExtendCharacter.getter(v172, v173);
            swift_bridgeObjectRelease();
            if (v174)
            {
              do
              {
                a1 = Substring.index(after:)();
                if (v207 <= a1 >> 14) {
                  break;
                }
                unint64_t v175 = Substring.subscript.getter();
                char v177 = Character.isExtendCharacter.getter(v175, v176);
                swift_bridgeObjectRelease();
              }
              while ((v177 & 1) != 0);
            }
          }
        }
      }
      goto LABEL_209;
    }
    a1 = v70;
    a3 = v213;
    if (v207 <= v70 >> 14)
    {
      a2 = v205;
      if (v225) {
        goto LABEL_198;
      }
LABEL_209:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v19 = v26;
      uint64_t v159 = v193;
      goto LABEL_210;
    }
  }
  unint64_t v41 = v54;
LABEL_14:
  if (v204 >= v27)
  {
    unint64_t v42 = v219;
    uint64_t v43 = v35;
  }
  else
  {
    unint64_t v42 = v219;
    uint64_t v43 = v35;
    if (v225)
    {
      unint64_t v44 = v41;
      unint64_t v45 = v214;
      if (v28 || (v46 = Character.isExtendCharacter.getter(v29, v31), unint64_t v41 = v44, (v46 & 1) == 0))
      {
        int v47 = 0;
        int v49 = 0;
        uint64_t v48 = v43;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v41 = v44;
        int v47 = 1;
        unint64_t v29 = v44;
        unint64_t v31 = v42;
        uint64_t v48 = v43;
        int v49 = 1;
      }
      if (v206)
      {
        uint64_t v48 = v201;
        int v49 = v47;
      }
      if (v48 || (v50 = Character.isExtendCharacter.getter(v41, v219), unint64_t v41 = v44, (v50 & 1) == 0))
      {
        if (v49)
        {
          uint64_t v51 = Substring.index(before:)();
          unint64_t v41 = v44;
          unint64_t v45 = v51;
        }
        unint64_t v42 = v219;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v49 & 1) == 0) {
          uint64_t v215 = Substring.index(before:)();
        }
        unint64_t v41 = v29;
        unint64_t v42 = v31;
      }
      goto LABEL_42;
    }
  }
  unint64_t v45 = v214;
LABEL_42:
  unint64_t v219 = v42;
  if (v29 == v41 && v31 == v42 || (unint64_t v194 = v41, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v22 = v216;
    unint64_t v66 = v209;
    uint64_t v67 = v208;
    goto LABEL_46;
  }
  if ((v190 & 1) == 0)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_234;
    }
    goto LABEL_232;
  }
  unint64_t v78 = v194;
  if ((v191 & 1) != 0 && !v193)
  {
    unint64_t v79 = v194;
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      uint64_t v80 = -1;
    }
    else {
      uint64_t v80 = _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
    }
    uint64_t v193 = v80;
    unint64_t v78 = v79;
  }
  unint64_t v81 = v209;
  if (v28)
  {
    uint64_t v68 = v208;
    goto LABEL_79;
  }
  if ((Character.asciiValue.getter() & 0x100) == 0)
  {
    if (v226)
    {
      Swift::String v85 = String.lowercased()();
      uint64_t countAndFlagsBits = v85._countAndFlagsBits;
      unint64_t object = (unint64_t)v85._object;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t countAndFlagsBits = v29;
      unint64_t object = v31;
    }
LABEL_141:
    uint64_t v122 = specialized Collection.first.getter(countAndFlagsBits, object);
    if (v123)
    {
      unint64_t v124 = v122;
      unint64_t v125 = v123;
      uint64_t v68 = countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v218 = String.index(after:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = object & 0x2000000000000000;
      unint64_t v81 = object;
      uint64_t v83 = HIBYTE(object) & 0xF;
      uint64_t v84 = v68 & 0xFFFFFFFFFFFFLL;
      unint64_t v29 = v124;
      unint64_t v31 = v125;
      unint64_t v33 = v212;
      unint64_t v78 = v194;
LABEL_143:
      if (v82) {
        uint64_t v28 = v83;
      }
      else {
        uint64_t v28 = v84;
      }
      if (!v200 || v28)
      {
        uint64_t v221 = v28;
        if (v200)
        {
          unint64_t v126 = v81;
          uint64_t v22 = v216;
          if (v28)
          {
LABEL_150:
            uint64_t v127 = v33 & 0x2000000000000000;
            uint64_t v128 = HIBYTE(v33) & 0xF;
            uint64_t v43 = v22 & 0xFFFFFFFFFFFFLL;
            goto LABEL_156;
          }
LABEL_184:
          unint64_t v66 = v126;
          goto LABEL_50;
        }
        if (v28)
        {
          if (v29 == v78 && v31 == v219
            || (v129 = _stringCompareWithSmolCheck(_:_:expecting:)(), unint64_t v78 = v194, (v129 & 1) != 0))
          {
            uint64_t v22 = v216;
            uint64_t v127 = v206;
            uint64_t v128 = v201;
LABEL_156:
            if (v127) {
              uint64_t v130 = v128;
            }
            else {
              uint64_t v130 = v43;
            }
            if (v130)
            {
              uint64_t v131 = 4 * v28;
              unint64_t v69 = v81;
              if (4 * v28 != v218 >> 14)
              {
                unint64_t v214 = v45;
                uint64_t v220 = 4 * v130;
                unint64_t v132 = v217;
                do
                {
                  if (v220 == v132 >> 14) {
                    break;
                  }
                  uint64_t v136 = String.subscript.getter();
                  unint64_t v137 = v33;
                  uint64_t v139 = v138;
                  uint64_t v140 = v22;
                  unint64_t v141 = v137;
                  if (v136 == String.subscript.getter() && v139 == v142)
                  {
                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    char v133 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v133 & 1) == 0) {
                      goto LABEL_220;
                    }
                  }
                  unint64_t v134 = String.index(after:)();
                  uint64_t v22 = v140;
                  unint64_t v33 = v141;
                  unint64_t v132 = String.index(after:)();
                  unint64_t v218 = v134;
                  BOOL v135 = v131 == v134 >> 14;
                  uint64_t v28 = v221;
                }
                while (!v135);
                unint64_t v217 = v132;
                unint64_t v66 = v69;
                uint64_t v67 = v68;
                unint64_t v45 = v214;
                unint64_t v19 = v189;
LABEL_46:
                uint64_t v68 = v67;
                unint64_t v69 = v66;
                if (!v28)
                {
LABEL_51:
                  unint64_t v70 = v45;
                  unint64_t v71 = v19;
                  uint64_t v72 = HIBYTE(v33) & 0xF;
                  if ((v33 & 0x2000000000000000) == 0) {
                    uint64_t v72 = v22 & 0xFFFFFFFFFFFFLL;
                  }
                  unint64_t v73 = v66;
                  uint64_t v74 = v67;
                  if (v72)
                  {
                    uint64_t v24 = v217;
                    uint64_t v75 = v210;
                    if (v217 >> 14 == 4 * v72)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v67 = v74;
                      unint64_t v66 = v73;
                      uint64_t v22 = 0;
                      unint64_t v33 = 0xE000000000000000;
                      uint64_t v24 = 15;
                    }
                  }
                  else
                  {
                    uint64_t v75 = v210;
                    uint64_t v24 = v217;
                  }
                  uint64_t v76 = HIBYTE(v66) & 0xF;
                  if ((v66 & 0x2000000000000000) == 0) {
                    uint64_t v76 = v67 & 0xFFFFFFFFFFFFLL;
                  }
                  if (!v76) {
                    uint64_t v215 = Substring.index(after:)();
                  }
                  uint64_t v77 = HIBYTE(v33) & 0xF;
                  unint64_t v212 = v33;
                  if ((v33 & 0x2000000000000000) == 0) {
                    uint64_t v77 = v22 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v77)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    unint64_t v26 = v215;
                    unint64_t v25 = v73;
                    uint64_t v23 = v74;
                    unint64_t v19 = v71;
                    a4 = v75;
                  }
                  else
                  {
                    unint64_t v70 = Substring.index(after:)();
                    a4 = v75;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    unint64_t v26 = v215;
                    unint64_t v25 = v73;
                    uint64_t v23 = v74;
                    unint64_t v19 = v71;
                  }
                  goto LABEL_66;
                }
                goto LABEL_47;
              }
              unint64_t v19 = v189;
            }
            else
            {
              unint64_t v69 = v81;
            }
LABEL_47:
            if (v218 >> 14 == 4 * v28)
            {
              swift_bridgeObjectRelease();
              uint64_t v67 = 0;
              unint64_t v66 = 0xE000000000000000;
              unint64_t v218 = 15;
              goto LABEL_51;
            }
            unint64_t v66 = v69;
LABEL_50:
            uint64_t v67 = v68;
            goto LABEL_51;
          }
        }
        uint64_t v220 = v68;
        unint64_t v214 = v45;
        unint64_t v143 = v33;
        unint64_t v144 = v78;
        unint64_t v145 = v219;
        Swift::String v146 = Character._transform(toHalfWidth:stripDiacritics:caseFolding:)(v227 & 1, v225 & 1, v226 & 1);
        uint64_t v147 = specialized Collection.first.getter(v146._countAndFlagsBits, (unint64_t)v146._object);
        if (v148)
        {
          unint64_t v149 = v148;
          uint64_t v150 = v147;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          unint64_t v217 = String.index(after:)();
          swift_bridgeObjectRelease();
          uint64_t v151 = (uint64_t)v146._object & 0x2000000000000000;
          unint64_t v152 = ((unint64_t)v146._object >> 56) & 0xF;
          uint64_t v43 = v146._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          unint64_t v143 = (unint64_t)v146._object;
          uint64_t v216 = v146._countAndFlagsBits;
          uint64_t v153 = v150;
          unint64_t v145 = v149;
        }
        else
        {
          uint64_t v151 = v206;
          unint64_t v152 = v201;
          uint64_t v153 = v144;
        }
        if (v151) {
          unint64_t v154 = v152;
        }
        else {
          unint64_t v154 = v43;
        }
        unint64_t v126 = v81;
        uint64_t v68 = v220;
        if (v154)
        {
          if (v29 != v153 || (unint64_t v155 = v31, v31 != v145))
          {
            uint64_t v156 = v153;
            char v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v153 = v156;
            uint64_t v68 = v220;
            if ((v157 & 1) == 0) {
              goto LABEL_238;
            }
            unint64_t v155 = v145;
          }
          swift_bridgeObjectRelease();
          unint64_t v219 = v155;
          unint64_t v33 = v143;
          unint64_t v45 = v214;
          unint64_t v19 = v189;
          uint64_t v28 = v221;
          uint64_t v22 = v216;
          if (v221) {
            goto LABEL_150;
          }
          goto LABEL_184;
        }
LABEL_238:
        if (v29 == v153 && v31 == v145)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return 0;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_231:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_235;
        }
        char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_248:
        swift_bridgeObjectRelease();
        return v185 & 1;
      }
      if (v29 == v78 && v31 == v219)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return 0;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
LABEL_234:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_235:
        swift_bridgeObjectRelease();
        return -1;
      }
LABEL_232:
      char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_248;
    }
    swift_bridgeObjectRelease();
    unint64_t v81 = v209;
    uint64_t v68 = v208;
    unint64_t v33 = v212;
    unint64_t v78 = v194;
LABEL_79:
    uint64_t v82 = v199;
    uint64_t v83 = v198;
    uint64_t v84 = v197;
    goto LABEL_143;
  }
  uint64_t v188 = v43;
  unint64_t v214 = v45;
  unint64_t v88 = 0xE000000000000000;
  uint64_t v230 = 0;
  unint64_t v231 = 0xE000000000000000;
  uint64_t v221 = v29 & 0xFFFFFFFFFFFFLL;
  if ((v31 & 0x2000000000000000) != 0) {
    uint64_t v89 = HIBYTE(v31) & 0xF;
  }
  else {
    uint64_t v89 = v29 & 0xFFFFFFFFFFFFLL;
  }
  char v90 = v225;
  if (!v89)
  {
    uint64_t v120 = 0;
LABEL_137:
    uint64_t v228 = v120;
    unint64_t v229 = v88;
    uint64_t countAndFlagsBits = String.init<A>(_:)();
    unint64_t object = v121;
    unint64_t v45 = v214;
    unint64_t v19 = v189;
    uint64_t v43 = v188;
    goto LABEL_141;
  }
  uint64_t v220 = v31 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v91 = 0;
  while (1)
  {
    if ((v31 & 0x1000000000000000) != 0)
    {
      unsigned int v98 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v31 & 0x2000000000000000) != 0)
      {
        uint64_t v228 = v29;
        unint64_t v229 = v220;
      }
      else if ((v29 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v98 = _decodeScalar(_:startingAt:)();
    }
    unsigned int v100 = v98;
    uint64_t v101 = v99;
    if ((v227 & 1) != 0 && v98 >> 8 >= 0xFF && v98 < 0xFFEF) {
      break;
    }
    unsigned int v102 = v98;
    if ((v90 & 1) == 0) {
      goto LABEL_115;
    }
LABEL_106:
    uint64_t v103 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v100), 5);
    if (!v103 || ((*(unsigned __int8 *)(v103 + ((unsigned __int16)v100 >> 3)) >> (v100 & 7)) & 1) == 0)
    {
      uint64_t v104 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v102), 2);
      if (v104 && ((*(unsigned __int8 *)(v104 + ((unsigned __int16)v102 >> 3)) >> (v102 & 7)) & 1) != 0)
      {
        MEMORY[0x1F4188790](v104);
        uint64_t v105 = CFUniCharDecomposeCharacter();
        char v90 = v225;
        if (*((_DWORD *)&v188 - 64) < 0x510u && v105 > 0) {
          unsigned int v102 = *((_DWORD *)&v188 - 64);
        }
      }
LABEL_115:
      if (v226)
      {
        uint64_t v92 = v223;
        Unicode.Scalar.properties.getter();
        uint64_t v93 = Unicode.Scalar.Properties._caseFolded.getter();
        uint64_t v95 = v94;
        (*v222)(v92, v224);
        uint64_t v96 = v93;
        char v90 = v225;
        uint64_t v97 = v95;
      }
      else
      {
        if (v102 >= 0x80)
        {
          int v108 = (v102 & 0x3F) << 8;
          if (v102 >= 0x800)
          {
            int v109 = (v108 | (v102 >> 6) & 0x3F) << 8;
            int v110 = (((v109 | (v102 >> 12) & 0x3F) << 8) | (v102 >> 18)) - 2122219023;
            unsigned int v107 = (v109 | (v102 >> 12)) + 8487393;
            if (HIWORD(v102)) {
              unsigned int v107 = v110;
            }
          }
          else
          {
            unsigned int v107 = (v108 | (v102 >> 6)) + 33217;
          }
        }
        else
        {
          unsigned int v107 = v102 + 1;
        }
        uint64_t v228 = (v107 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v107) >> 3))));
        uint64_t v96 = MEMORY[0x185302020](&v228);
      }
      String.append(_:)(*(Swift::String *)&v96);
      swift_bridgeObjectRelease();
    }
    v91 += v101;
    if (v91 >= v89)
    {
      swift_bridgeObjectRelease();
      uint64_t v120 = v230;
      unint64_t v88 = v231;
      goto LABEL_137;
    }
  }
  LODWORD(v228) = v98;
  CFUniCharCompatibilityDecompose();
  unsigned int v102 = v228;
  if (v228 >> 11 == 27)
  {
    __break(1u);
    goto LABEL_229;
  }
  if (WORD1(v228) <= 0x10u)
  {
    if ((v90 & 1) == 0) {
      goto LABEL_115;
    }
    goto LABEL_106;
  }
  __break(1u);
LABEL_220:
  uint64_t v181 = String.subscript.getter();
  uint64_t v183 = v182;
  if (v181 == String.subscript.getter() && v183 == v184)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v179 = 0;
    goto LABEL_237;
  }
LABEL_229:
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_231;
  }
  char v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v179 = v186 & 1;
LABEL_237:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v179;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

{
  uint64_t v3;
  unsigned __int8 v4;

  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unint64_t v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t v4 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        unint64_t v4 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      }
      else {
        unint64_t v4 = *(unsigned char *)_StringObject.sharedUTF8.getter();
      }
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

{
  uint64_t v2;
  unsigned int v3;

  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    goto LABEL_9;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    LOWORD(v3) = String.UTF16View._foreignSubscript(position:)();
    return (unsigned __int16)v3 | ((v2 == 0) << 16);
  }
  uint64_t v3 = _StringGuts.fastUTF8Scalar(startingAt:)();
  if (HIWORD(v3))
  {
    uint64_t v3 = (unsigned __int16)((v3 + 67043328) >> 10) + 55296;
    if ((v3 & 0x10000) != 0)
    {
      __break(1u);
LABEL_9:
      LOWORD(v3) = 0;
    }
  }
  return (unsigned __int16)v3 | ((v2 == 0) << 16);
}

{
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = 1;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      unint64_t v4 = (int)a1;
      if ((int)a1 != a1 >> 32) {
        goto LABEL_15;
      }
      goto LABEL_8;
    case 2uLL:
      unint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      if (v4 != v5)
      {
        if (a2 >> 62 == 2)
        {
          if (v4 >= v5) {
            goto LABEL_23;
          }
          unsigned int v6 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v6) {
            goto LABEL_25;
          }
          id v7 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v8 = __OFSUB__(v4, v7);
          uint64_t v9 = v4 - v7;
          if (!v8) {
            goto LABEL_19;
          }
          __break(1u);
        }
LABEL_15:
        if (v4 < (int)a1 || v4 >= a1 >> 32)
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
        }
        unsigned int v6 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v6)
        {
          id v10 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v8 = __OFSUB__(v4, v10);
          uint64_t v9 = v4 - v10;
          if (!v8)
          {
LABEL_19:
            uint64_t v2 = 0;
            uint64_t v3 = *(unsigned char *)(v6 + v9);
            return v3 | (v2 << 8);
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x181EFFB00);
      }
LABEL_8:
      uint64_t v3 = 0;
      uint64_t v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      uint64_t v2 = (a2 & 0xFF000000000000) == 0;
      if ((a2 & 0xFF000000000000) != 0) {
        uint64_t v3 = a1;
      }
      else {
        uint64_t v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

const UInt8 *bytesInEncoding(void *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = [a1 length];
  unint64_t v11 = v10;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v12 = a5;
  uint64_t v13 = 4;
  if (a4) {
    uint64_t v13 = 6;
  }
  uint64_t v14 = v13 | a5;
  if (v10 > 0xA5
    || (objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", bytes, 1000, &v24, a2, v13 | v12, 0, v10, 0) & 1) == 0|| (uint64_t v15 = v24, bytes[v24] = 0, v16 = CFDataCreate(0, bytes, v15 + 1), BytePtr = CFDataGetBytePtr(v16), v18 = v16, !BytePtr))
  {
    if (objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", 0, 0x7FFFFFFFFFFFFFFELL, &v24, a2, v14, 0, v11, 0)&& (uint64_t v19 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:", v24 + 1), "mutableBytes")) != 0&& (BytePtr = (const UInt8 *)v19, objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v19, v24, &v23, a2,
                          v14,
                          0,
                          v11,
                          0))
      && v23 == v24)
    {
      BytePtr[v23] = 0;
    }
    else
    {
      if (a3)
      {
        uint64_t v21 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v22 = +[NSString stringWithFormat:@"Conversion to encoding %ld failed", a2];
        objc_exception_throw((id)objc_msgSend(v21, "exceptionWithName:reason:userInfo:", @"NSCharacterConversionException", v22, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a1, @"_NSString", 0)));
      }
      return 0;
    }
  }
  return BytePtr;
}

Swift::String __swiftcall Character._transform(toHalfWidth:stripDiacritics:caseFolding:)(Swift::Bool toHalfWidth, Swift::Bool stripDiacritics, Swift::Bool caseFolding)
{
  unint64_t v5 = v4;
  unint64_t v6 = v3;
  BOOL v44 = caseFolding;
  BOOL v45 = stripDiacritics;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v6 != 2573 || v5 != 0xE200000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (Character._isSingleScalar.getter())
    {
      unint64_t v11 = specialized Collection.first.getter(v6, v5);
      if ((v11 & 0x100000000) != 0)
      {
        __break(1u);
        goto LABEL_67;
      }
      if ((v11 & 0xFFFFFF80) == 0)
      {
        unint64_t v11 = specialized Collection.first.getter(v6, v5);
        if ((v11 & 0x100000000) == 0)
        {
          if ((v11 & 0xFFFFFF00) != 0) {
            __break(1u);
          }
          goto LABEL_9;
        }
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    unint64_t v16 = 0xE000000000000000;
    uint64_t v48 = 0;
    unint64_t v49 = 0xE000000000000000;
    uint64_t v40 = v6 & 0xFFFFFFFFFFFFLL;
    uint64_t v41 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) != 0) {
      uint64_t v17 = HIBYTE(v5) & 0xF;
    }
    else {
      uint64_t v17 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (!v17) {
      goto LABEL_64;
    }
    uint64_t v38 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v39 = v5 & 0xFFFFFFFFFFFFFFLL;
    CFDataRef v18 = (void (**)(char *, uint64_t))(v8 + 8);
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    unint64_t v43 = v6;
    while (1)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v25 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          uint64_t v46 = v6;
          unint64_t v47 = v39;
        }
        else if ((v6 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        uint64_t v25 = _decodeScalar(_:startingAt:)();
      }
      int v27 = v25;
      uint64_t v28 = v26;
      if (toHalfWidth)
      {
        if (v25 >> 8 < 0xFF || v25 > 0xFFEE)
        {
          unsigned int v29 = v25;
          if (!v45) {
            goto LABEL_47;
          }
        }
        else
        {
          LODWORD(v46) = v25;
          uint64_t v25 = CFUniCharCompatibilityDecompose();
          unsigned int v29 = v46;
          unint64_t v16 = v46 >> 11;
          if (v16 == 27) {
            goto LABEL_63;
          }
          unint64_t v16 = WORD1(v46);
          if (v16 > 0x10)
          {
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            uint64_t v36 = 0;
LABEL_59:
            uint64_t v46 = v36;
            unint64_t v47 = v16;
            uint64_t countAndFlagsBits = String.init<A>(_:)();
LABEL_60:
            unint64_t v6 = countAndFlagsBits;
            unint64_t v5 = (unint64_t)object;
            goto LABEL_61;
          }
          if (!v45) {
            goto LABEL_47;
          }
        }
      }
      else
      {
        unsigned int v29 = v25;
        if (!v45) {
          goto LABEL_47;
        }
      }
      if (BYTE2(v27) <= 0xEu)
      {
        uint64_t v30 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_1 + BYTE2(v27));
        if (v30)
        {
          if ((*(unsigned __int8 *)(v30 + ((unsigned __int16)v27 >> 3)) >> (v27 & 7))) {
            goto LABEL_19;
          }
        }
      }
      if (BYTE2(v29) > 2u
        || (uint64_t v31 = (uint64_t)*(&__CFUniCharCanonicalDecomposableCharacterSetBitmap_1 + BYTE2(v29))) == 0
        || ((*(unsigned __int8 *)(v31 + ((unsigned __int16)v29 >> 3)) >> (v29 & 7)) & 1) == 0)
      {
LABEL_47:
        if (!v44) {
          goto LABEL_48;
        }
        goto LABEL_17;
      }
      MEMORY[0x1F4188790](v25);
      if (CFUniCharDecomposeCharacter() >= 1 && *((_DWORD *)&v38 - 64) < 0x510u) {
        unsigned int v29 = *((_DWORD *)&v38 - 64);
      }
      unint64_t v6 = v43;
      if (!v44)
      {
LABEL_48:
        if (v29 > 0x7F)
        {
          int v33 = (v29 & 0x3F) << 8;
          if (v29 >= 0x800)
          {
            int v34 = (v33 | (v29 >> 6) & 0x3F) << 8;
            int v35 = (((v34 | (v29 >> 12) & 0x3F) << 8) | (v29 >> 18)) - 2122219023;
            unsigned int v32 = (v34 | (v29 >> 12)) + 8487393;
            if (HIWORD(v29)) {
              unsigned int v32 = v35;
            }
          }
          else
          {
            unsigned int v32 = (v33 | (v29 >> 6)) + 33217;
          }
        }
        else
        {
          unsigned int v32 = v29 + 1;
        }
        uint64_t v46 = (v32 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v32) >> 3))));
        uint64_t v23 = MEMORY[0x185302020](&v46);
        goto LABEL_18;
      }
LABEL_17:
      Unicode.Scalar.properties.getter();
      uint64_t v20 = Unicode.Scalar.Properties._caseFolded.getter();
      uint64_t v22 = v21;
      (*v18)(v10, v42);
      uint64_t v23 = v20;
      unint64_t v6 = v43;
      uint64_t v24 = v22;
LABEL_18:
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
LABEL_19:
      v19 += v28;
      if (v19 >= v17)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = v48;
        unint64_t v16 = v49;
        goto LABEL_59;
      }
    }
  }
LABEL_9:
  if (v44)
  {
    Swift::String v15 = String.lowercased()();
    unint64_t object = v15._object;
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
LABEL_61:
  unint64_t v11 = v6;
  uint64_t v12 = (void *)v5;
LABEL_68:
  result._unint64_t object = v12;
  result._uint64_t countAndFlagsBits = v11;
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    Swift::String result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t specialized Collection.suffix(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for AttributedString._AttributeValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSString()
{
  uint64_t v1 = *v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  AnyHashable.init<A>(_:)();
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance JSONDecoderImpl()
{
  return JSONDecoderImpl.decodeNil()();
}

BOOL JSONDecoderImpl.decodeNil()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    int v6 = *(unsigned __int8 *)(v3 + 24);
    return !(v5 | v4) && v6 == 160;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *destructiveInjectEnumTag for JSONEncoder.KeyEncodingStrategy(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *BOOL result = v2;
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance NSArray@<D0>(uint64_t a1@<X8>)
{
  return NSFastEnumerationIterator.init(_:)(*v1, a1);
}

BOOL static Date.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

void NSEndMapTableEnumeration(NSMapEnumerator *enumerator)
{
  if (enumerator)
  {
    enumerator->_sunint64_t i = enumerator->_pi;
    free(enumerator->_bs);
    enumerator->_bs = 0;
  }
  else
  {
    NSLog((NSString *)@"%s: state argument is NULL", "void NSEndMapTableEnumeration(NSMapEnumerator * _Nonnull)");
  }
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

uint64_t specialized JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = v9;
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v16 = a3 >> 5;
  if (v16 == 5)
  {
    if (!(a2 | a1) && a3 == 160)
    {
      uint64_t v17 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v19 = v18;
      *CFDataRef v18 = v110;
      if (a9 == -1)
      {
        _CodingPathNode.path.getter(a5);
      }
      else
      {
        outlined copy of _CodingKey(a6, a7, a8, a9);
        uint64_t v20 = _CodingPathNode.path.getter(a5);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v22 = swift_allocObject();
        *(void *)(inited + 32) = v22;
        *(void *)(v22 + 16) = a6;
        *(void *)(v22 + 24) = a7;
        *(void *)(v22 + 32) = a8;
        *(unsigned char *)(v22 + 40) = a9;
        uint64_t v127 = v20;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v127 = 0;
      unint64_t v128 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v38._uint64_t countAndFlagsBits = 0xD000000000000019;
      v38._unint64_t object = (void *)0x80000001823B3360;
      String.append(_:)(v38);
      v39._unint64_t object = (void *)0x80000001823B3460;
      v39._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v39);
      v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v40._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v40);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
      return swift_willThrow();
    }
    if (dynamic_cast_existential_2_conditional(a4))
    {
LABEL_16:
      uint64_t v30 = type metadata accessor for DecodingError();
      swift_allocError();
      unsigned int v32 = v31;
      *uint64_t v31 = v110;
      if (a9 == -1)
      {
        _CodingPathNode.path.getter(a5);
      }
      else
      {
        outlined copy of _CodingKey(a6, a7, a8, a9);
        uint64_t v33 = _CodingPathNode.path.getter(a5);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v34 = swift_initStackObject();
        *(_OWORD *)(v34 + 16) = xmmword_1821037E0;
        *(void *)(v34 + 56) = &type metadata for _CodingKey;
        *(void *)(v34 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v35 = swift_allocObject();
        *(void *)(v34 + 32) = v35;
        *(void *)(v35 + 16) = a6;
        *(void *)(v35 + 24) = a7;
        *(void *)(v35 + 32) = a8;
        *(unsigned char *)(v35 + 40) = a9;
        uint64_t v127 = v33;
        specialized Array.append<A>(contentsOf:)(v34);
      }
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      uint64_t v127 = 0xD000000000000035;
      unint64_t v128 = 0x80000001823B3300;
      uint64_t v36 = (void *)0xE800000000000000;
      uint64_t v37 = 0x676E697274732061;
      switch(v16)
      {
        case 1:
          uint64_t v36 = (void *)0xE600000000000000;
          uint64_t v37 = 0x7265626D756ELL;
          break;
        case 2:
          uint64_t v36 = (void *)0xE400000000000000;
          uint64_t v37 = 1819242338;
          break;
        case 3:
          uint64_t v36 = (void *)0xEC0000007972616ELL;
          uint64_t v37 = 0x6F69746369642061;
          break;
        case 4:
          uint64_t v37 = 0x7961727261206E61;
          break;
        case 5:
          uint64_t v36 = (void *)0xE400000000000000;
          uint64_t v37 = 1819047278;
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v41._uint64_t countAndFlagsBits = v37;
      v41._unint64_t object = v36;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._uint64_t countAndFlagsBits = 0x64616574736E6920;
      v42._unint64_t object = (void *)0xE90000000000002ELL;
      String.append(_:)(v42);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBA70], v30);
      return swift_willThrow();
    }
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v111 = dynamic_cast_existential_2_conditional(a4);
  uint64_t v112 = v23;
  if (!v111) {
    goto LABEL_92;
  }
  if (v16 != 3) {
    goto LABEL_16;
  }
  uint64_t v120 = MEMORY[0x1E4FBC868];
  if (a2 >= 0) {
    uint64_t v24 = a2;
  }
  else {
    uint64_t v24 = a2 + 1;
  }
  Dictionary.reserveCapacity(_:)(v24 >> 1);
  if (a9 != -1)
  {
    uint64_t v25 = (void *)swift_allocObject();
    v25[5] = &type metadata for _CodingKey;
    v25[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v26 = swift_allocObject();
    v25[2] = v26;
    uint64_t v28 = a7;
    uint64_t v27 = a8;
    *(void *)(v26 + 16) = a6;
    *(void *)(v26 + 24) = a7;
    *(void *)(v26 + 32) = a8;
    *(unsigned char *)(v26 + 40) = a9;
    v25[7] = a5;
    if (a5 >> 62)
    {
      if (a5 >> 62 != 1)
      {
        uint64_t v45 = 1;
LABEL_32:
        v25[8] = v45;
        a5 = (unint64_t)v25;
        goto LABEL_33;
      }
      unsigned int v29 = (uint64_t *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      unsigned int v29 = (uint64_t *)(a5 + 64);
    }
    uint64_t v44 = *v29;
    swift_retain();
    uint64_t v45 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
    }
    goto LABEL_32;
  }
  swift_retain();
  uint64_t v28 = a7;
  uint64_t v27 = a8;
LABEL_33:
  outlined copy of _CodingKey?(a6, v28, v27, a9);
  swift_retain();
  unint64_t v46 = a1;
  uint64_t v47 = JSONMap.loadValue(at:)(a1);
  if (v49 > 0xFDu)
  {
LABEL_34:
    swift_release();
    swift_release();
    uint64_t v127 = v120;
    return swift_dynamicCast();
  }
  uint64_t v50 = v47;
  uint64_t v51 = v48;
  unsigned __int8 v52 = v49;
  while (1)
  {
    uint64_t v55 = v10;
    Swift::Int v56 = JSONMap.offset(after:)(v46);
    uint64_t v57 = JSONMap.loadValue(at:)(v56);
    uint64_t v116 = v59;
    if (v58 > 0xFDu) {
      goto LABEL_91;
    }
    uint64_t v60 = v57;
    uint64_t v61 = v58;
    Swift::Int v114 = JSONMap.offset(after:)(v56);
    uint64_t v62 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v50, v51, v52, a5, 0, 0, 0, 255);
    if (v55) {
      goto LABEL_94;
    }
    uint64_t v64 = v62;
    uint64_t v65 = v63;
    uint64_t v66 = (*(uint64_t (**)(void))(v112 + 8))();
    uint64_t v68 = v67;
    uint64_t v129 = v66;
    uint64_t v130 = v67;
    __swift_allocate_boxed_opaque_existential_1(&v127);
    swift_bridgeObjectRetain();
    LOBYTE(v105) = 0;
    specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v60, v116, v61, v66, a5, v64, v65, 0, v105, v66, v68);
    uint64_t v10 = 0;
    swift_bridgeObjectRelease();
    uint64_t v69 = v129;
    unint64_t v70 = __swift_project_boxed_opaque_existential_1(&v127, v129);
    v126[3] = v69;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v126);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v69 - 8) + 16))(boxed_opaque_existential_1, v70, v69);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v119 = (void *)v120;
    swift_bridgeObjectRetain();
    unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v65);
    uint64_t v75 = *(void *)(v120 + 16);
    BOOL v76 = (v73 & 1) == 0;
    uint64_t v77 = v75 + v76;
    if (__OFADD__(v75, v76)) {
      goto LABEL_88;
    }
    char v78 = v73;
    if (*(void *)(v120 + 24) >= v77) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
    uint64_t v79 = v120;
    unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v65);
    if ((v78 & 1) != (v81 & 1)) {
      goto LABEL_95;
    }
    unint64_t v74 = v80;
LABEL_47:
    if (v78) {
      outlined init with take of Any((_OWORD *)(*(void *)(v79 + 56) + 32 * v74), v125);
    }
    else {
      memset(v125, 0, sizeof(v125));
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v125, (uint64_t)&v123, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v82 = v124;
    outlined destroy of Any?((uint64_t)&v123, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (!v82)
    {
      outlined destroy of Any?((uint64_t)v125, (uint64_t *)&demangling cache variable for type metadata for Any?);
      outlined init with copy of Any((uint64_t)v126, (uint64_t)v125);
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v125, (uint64_t)&v121, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v122)
    {
      outlined init with take of Any(&v121, &v123);
      if (v78)
      {
        outlined init with take of Any(&v123, (_OWORD *)(v119[7] + 32 * v74));
      }
      else
      {
        v119[(v74 >> 6) + 8] |= 1 << v74;
        uint64_t v83 = (uint64_t *)(v119[6] + 16 * v74);
        *uint64_t v83 = v64;
        v83[1] = v65;
        outlined init with take of Any(&v123, (_OWORD *)(v119[7] + 32 * v74));
        uint64_t v84 = v119[2];
        BOOL v85 = __OFADD__(v84, 1);
        uint64_t v86 = v84 + 1;
        if (v85) {
          goto LABEL_89;
        }
        v119[2] = v86;
        swift_bridgeObjectRetain();
      }
      unint64_t v46 = v114;
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v121, (uint64_t *)&demangling cache variable for type metadata for Any?);
      unint64_t v46 = v114;
      if (v78)
      {
        swift_arrayDestroy();
        specialized _NativeDictionary._delete(at:)(v74, (uint64_t)v119);
      }
    }
    outlined destroy of Any?((uint64_t)v125, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRelease();
    uint64_t v120 = (uint64_t)v119;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v127);
    uint64_t v50 = JSONMap.loadValue(at:)(v46);
    uint64_t v51 = v53;
    unsigned __int8 v52 = v54;
    if (v54 > 0xFDu) {
      goto LABEL_34;
    }
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v79 = v120;
    goto LABEL_47;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v87 = static _DictionaryStorage.copy(original:)();
  uint64_t v79 = v87;
  if (!*(void *)(v120 + 16))
  {
LABEL_85:
    swift_bridgeObjectRelease();
    uint64_t v119 = (void *)v79;
    goto LABEL_47;
  }
  unint64_t v88 = (char *)(v87 + 64);
  uint64_t v89 = (char *)(v120 + 64);
  unint64_t v90 = (unint64_t)((1 << *(unsigned char *)(v79 + 32)) + 63) >> 6;
  uint64_t v106 = v120 + 64;
  if (v79 != v120 || v88 >= &v89[8 * v90]) {
    memmove(v88, v89, 8 * v90);
  }
  int64_t v91 = 0;
  *(void *)(v79 + 16) = *(void *)(v120 + 16);
  uint64_t v92 = 1 << *(unsigned char *)(v120 + 32);
  if (v92 < 64) {
    uint64_t v93 = ~(-1 << v92);
  }
  else {
    uint64_t v93 = -1;
  }
  unint64_t v94 = v93 & *(void *)(v120 + 64);
  int64_t v107 = (unint64_t)(v92 + 63) >> 6;
  while (2)
  {
    if (v94)
    {
      uint64_t v109 = (v94 - 1) & v94;
      int64_t v117 = v91;
      unint64_t v95 = __clz(__rbit64(v94)) | (v91 << 6);
LABEL_67:
      uint64_t v96 = 16 * v95;
      uint64_t v97 = (uint64_t *)(*(void *)(v120 + 48) + 16 * v95);
      uint64_t v98 = v97[1];
      uint64_t v108 = *v97;
      uint64_t v99 = 32 * v95;
      outlined init with copy of Any(*(void *)(v120 + 56) + 32 * v95, (uint64_t)v125);
      unsigned int v100 = (void *)(*(void *)(v79 + 48) + v96);
      void *v100 = v108;
      v100[1] = v98;
      outlined init with take of Any(v125, (_OWORD *)(*(void *)(v79 + 56) + v99));
      swift_bridgeObjectRetain();
      unint64_t v94 = v109;
      uint64_t v10 = 0;
      int64_t v91 = v117;
      continue;
    }
    break;
  }
  int64_t v101 = v91 + 1;
  if (__OFADD__(v91, 1)) {
    goto LABEL_90;
  }
  if (v101 >= v107) {
    goto LABEL_85;
  }
  unint64_t v102 = *(void *)(v106 + 8 * v101);
  int64_t v103 = v91 + 1;
  if (v102) {
    goto LABEL_84;
  }
  int64_t v103 = v91 + 2;
  if (v91 + 2 >= v107) {
    goto LABEL_85;
  }
  unint64_t v102 = *(void *)(v106 + 8 * v103);
  if (v102) {
    goto LABEL_84;
  }
  int64_t v103 = v91 + 3;
  if (v91 + 3 >= v107) {
    goto LABEL_85;
  }
  unint64_t v102 = *(void *)(v106 + 8 * v103);
  if (v102) {
    goto LABEL_84;
  }
  int64_t v103 = v91 + 4;
  if (v91 + 4 >= v107) {
    goto LABEL_85;
  }
  unint64_t v102 = *(void *)(v106 + 8 * v103);
  if (v102)
  {
LABEL_84:
    uint64_t v109 = (v102 - 1) & v102;
    int64_t v117 = v103;
    unint64_t v95 = __clz(__rbit64(v102)) + (v103 << 6);
    goto LABEL_67;
  }
  uint64_t v104 = v91 + 5;
  if (v91 + 5 >= v107) {
    goto LABEL_85;
  }
  unint64_t v102 = *(void *)(v106 + 8 * v104);
  if (v102)
  {
    int64_t v103 = v91 + 5;
    goto LABEL_84;
  }
  while (1)
  {
    int64_t v103 = v104 + 1;
    if (__OFADD__(v104, 1)) {
      break;
    }
    if (v103 >= v107) {
      goto LABEL_85;
    }
    unint64_t v102 = *(void *)(v106 + 8 * v103);
    ++v104;
    if (v102) {
      goto LABEL_84;
    }
  }
LABEL_93:
  __break(1u);
LABEL_94:
  swift_unexpectedError();
  __break(1u);
LABEL_95:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of (Hashable & Sendable)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id @objc NSDictionary.subscript.getter(void *a1)
{
  swift_unknownObjectRetain();
  id v2 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  id v3 = objc_msgSend(v2, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  outlined init with take of Any?((uint64_t)v11, (uint64_t)v13);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t v4 = v14;
  if (v14)
  {
    uint64_t v5 = __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v6 = *(void *)(v4 - 8);
    MEMORY[0x1F4188790](v5);
    uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    uint64_t v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined consume of _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3 || a4 == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (a3 != v10 || a4 != MEMORY[0x1E4FBC840] + 8)
  {
    uint64_t v12 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v12)
    {
      if (*(uint64_t *)(*(void *)(a3 - 8) + 72) < 8 || *(void *)(*(void *)(a4 - 8) + 72) <= 7)
      {
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        lazy protocol witness table accessor for type NSObject and conformance NSObject();
        swift_unknownObjectRetain();
        unint64_t v14 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
        if (!v14)
        {
          unint64_t v15 = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
          unint64_t v14 = ~(v15 >> 1) & 0x4000000000000000 | v15;
        }
        unint64_t v16 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v14, a3, a4, a5);
        swift_bridgeObjectRelease();
        *a2 = v16;
        return v16 != 0;
      }
      else
      {
        id v21 = objc_msgSend(a1, sel_count);
        LOBYTE(v29[0]) = 1;
        v26[2] = a3;
        v26[3] = a4;
        v26[4] = a5;
        v26[5] = a1;
        uint64_t v27 = MEMORY[0x1F4188790](v21);
        uint64_t v28 = v29;
        uint64_t v22 = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(v27, a3 == v10, partial apply for closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:), (uint64_t)v26, a3, a4, a5);
        uint64_t v17 = LOBYTE(v29[0]);
        if (LOBYTE(v29[0]) != 1)
        {
          swift_release();
          uint64_t v22 = 0;
        }
        *a2 = v22;
      }
      return v17;
    }
    goto LABEL_15;
  }
  uint64_t v12 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v12)
  {
LABEL_15:
    *a2 = v12;
    return 1;
  }
  uint64_t v19 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v20 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v23 = v20[6];
  uint64_t v24 = v20[7];
  swift_retain();
  uint64_t result = (uint64_t)objc_msgSend(a1, sel__getObjects_andKeys_count_, v24, v23, v19);
  if (v19 < 1)
  {
    uint64_t v25 = v19;
    if (!v19)
    {
      uint64_t v17 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v25 = v19;
    v29[0] = 0;
    v29[1] = 0;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    uint64_t result = swift_unknownObjectRelease();
  }
  if (__OFSUB__(v19, v25)) {
    goto LABEL_34;
  }
  uint64_t result = swift_arrayDestroy();
  uint64_t v17 = 0;
LABEL_28:
  if (v19 >= 0)
  {
    v20[2] = 0;
    swift_release();
    if (v17)
    {
      *a2 = v20;
    }
    else
    {
      swift_release();
      *a2 = 0;
    }
    return v17;
  }
  __break(1u);
  __break(1u);
LABEL_34:
  __break(1u);
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = a3 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v8 = ~v4;
    do
    {
      uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v5);
      uint64_t v10 = *v9;
      BOOL v11 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (specialized static Dictionary<>.== infix(_:_:)(v10, a1))
      {
        uint64_t v12 = specialized static Set.== infix(_:_:)(v11, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v12) {
          return v5;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  unsigned char v6[72];
  uint64_t vars8;

  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v6, a1);
  specialized Set.hash(into:)((uint64_t)v6, a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)(Swift::Int a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  void (*v278)(long long *__return_ptr, void *);
  uint64_t v279;
  uint64_t v280;
  void *v281;
  unint64_t v282;
  unint64_t v283;
  int64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  long long v292;
  uint64_t v293;
  ValueMetadata *v294;
  unint64_t v295;
  unint64_t v296;

  uint64_t v6 = v5;
  unint64_t v8 = *a5;
  v296 = MEMORY[0x1E4FBC868];
  if (a2 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 + 1;
  }
  Swift::Int v10 = v9 >> 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : JSONMap.Value]);
  Dictionary.reserveCapacity(_:)(v10);
  if (!v8)
  {
    v279 = v5;
    unint64_t v14 = v296;
    swift_retain();
    uint64_t v15 = JSONMap.loadValue(at:)(a1);
    if (v17 > 0xFDu)
    {
      unint64_t v18 = v296;
LABEL_10:
      v296 = v18;
      swift_release();
      return v296;
    }
    uint64_t v156 = v15;
    uint64_t v157 = v16;
    unsigned __int8 v158 = v17;
    while (1)
    {
      Swift::Int v161 = JSONMap.offset(after:)(a1);
      uint64_t v162 = JSONMap.loadValue(at:)(v161);
      if (v164 > 0xFDu) {
        goto LABEL_236;
      }
      unsigned __int8 v165 = v164;
      v286 = v163;
      v289 = v162;
      Swift::Int v166 = JSONMap.offset(after:)(v161);
      uint64_t v167 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v156, v157, v158, a4, 0, 0, 0, 255);
      if (v279) {
        goto LABEL_245;
      }
      uint64_t v169 = v167;
      uint64_t v170 = v168;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v292 = v14;
      swift_bridgeObjectRetain();
      unint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)(v169, v170);
      uint64_t v174 = *(void *)(v14 + 16);
      BOOL v175 = (v172 & 1) == 0;
      uint64_t v176 = v174 + v175;
      if (__OFADD__(v174, v175))
      {
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }
      char v177 = v172;
      if (*(void *)(v14 + 24) >= v176)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v18 = v14;
          if (v172) {
            goto LABEL_134;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
          uint64_t v184 = static _DictionaryStorage.copy(original:)();
          unint64_t v18 = v184;
          if (*(void *)(v14 + 16))
          {
            char v185 = (char *)(v184 + 64);
            char v186 = (char *)(v14 + 64);
            unint64_t v187 = (unint64_t)((1 << *(unsigned char *)(v18 + 32)) + 63) >> 6;
            v282 = v14 + 64;
            if (v18 != v14 || v185 >= &v186[8 * v187]) {
              memmove(v185, v186, 8 * v187);
            }
            int64_t v188 = 0;
            *(void *)(v18 + 16) = *(void *)(v14 + 16);
            uint64_t v189 = 1 << *(unsigned char *)(v14 + 32);
            if (v189 < 64) {
              uint64_t v190 = ~(-1 << v189);
            }
            else {
              uint64_t v190 = -1;
            }
            unint64_t v191 = v190 & *(void *)(v14 + 64);
            v284 = (unint64_t)(v189 + 63) >> 6;
            while (1)
            {
              if (v191)
              {
                unint64_t v192 = __clz(__rbit64(v191));
                v191 &= v191 - 1;
                unint64_t v193 = v192 | (v188 << 6);
              }
              else
              {
                int64_t v204 = v188 + 1;
                if (__OFADD__(v188, 1)) {
                  goto LABEL_233;
                }
                if (v204 >= v284) {
                  break;
                }
                unint64_t v205 = *(void *)(v282 + 8 * v204);
                ++v188;
                if (!v205)
                {
                  int64_t v188 = v204 + 1;
                  if (v204 + 1 >= v284) {
                    break;
                  }
                  unint64_t v205 = *(void *)(v282 + 8 * v188);
                  if (!v205)
                  {
                    int64_t v188 = v204 + 2;
                    if (v204 + 2 >= v284) {
                      break;
                    }
                    unint64_t v205 = *(void *)(v282 + 8 * v188);
                    if (!v205)
                    {
                      int64_t v188 = v204 + 3;
                      if (v204 + 3 >= v284) {
                        break;
                      }
                      unint64_t v205 = *(void *)(v282 + 8 * v188);
                      if (!v205)
                      {
                        int64_t v206 = v204 + 4;
                        if (v206 >= v284) {
                          break;
                        }
                        unint64_t v205 = *(void *)(v282 + 8 * v206);
                        if (!v205)
                        {
                          while (1)
                          {
                            int64_t v188 = v206 + 1;
                            if (__OFADD__(v206, 1)) {
                              break;
                            }
                            if (v188 >= v284) {
                              goto LABEL_174;
                            }
                            unint64_t v205 = *(void *)(v282 + 8 * v188);
                            ++v206;
                            if (v205) {
                              goto LABEL_173;
                            }
                          }
LABEL_239:
                          __break(1u);
                          goto LABEL_240;
                        }
                        int64_t v188 = v206;
                      }
                    }
                  }
                }
LABEL_173:
                unint64_t v191 = (v205 - 1) & v205;
                unint64_t v193 = __clz(__rbit64(v205)) + (v188 << 6);
              }
              uint64_t v194 = 16 * v193;
              uint64_t v195 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v193);
              uint64_t v197 = *v195;
              uint64_t v196 = v195[1];
              uint64_t v198 = 24 * v193;
              uint64_t v199 = *(void *)(v14 + 56) + v198;
              char v200 = *(unsigned char *)(v199 + 16);
              uint64_t v201 = (void *)(*(void *)(v18 + 48) + v194);
              long long v202 = *(_OWORD *)v199;
              *uint64_t v201 = v197;
              v201[1] = v196;
              uint64_t v203 = *(void *)(v18 + 56) + v198;
              *(_OWORD *)uint64_t v203 = v202;
              *(unsigned char *)(v203 + 16) = v200;
              swift_bridgeObjectRetain();
            }
          }
LABEL_174:
          swift_bridgeObjectRelease();
          if (v177)
          {
LABEL_134:
            swift_bridgeObjectRelease();
            goto LABEL_135;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v176, isUniquelyReferenced_nonNull_native);
        unint64_t v18 = v292;
        unint64_t v178 = specialized __RawDictionaryStorage.find<A>(_:)(v169, v170);
        if ((v177 & 1) != (v179 & 1)) {
          goto LABEL_242;
        }
        unint64_t v173 = v178;
        if (v177) {
          goto LABEL_134;
        }
      }
      *(void *)(v18 + 8 * (v173 >> 6) + 64) |= 1 << v173;
      long long v180 = (uint64_t *)(*(void *)(v18 + 48) + 16 * v173);
      *long long v180 = v169;
      v180[1] = v170;
      uint64_t v181 = *(void *)(v18 + 56) + 24 * v173;
      *(void *)uint64_t v181 = v289;
      *(void *)(v181 + 8) = v286;
      *(unsigned char *)(v181 + 16) = v165;
      uint64_t v182 = *(void *)(v18 + 16);
      BOOL v130 = __OFADD__(v182, 1);
      uint64_t v183 = v182 + 1;
      if (v130) {
        goto LABEL_226;
      }
      *(void *)(v18 + 16) = v183;
LABEL_135:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v166;
      uint64_t v156 = JSONMap.loadValue(at:)(v166);
      uint64_t v157 = v159;
      unsigned __int8 v158 = v160;
      unint64_t v14 = v18;
      if (v160 > 0xFDu) {
        goto LABEL_10;
      }
    }
  }
  if (v8 != 1)
  {
    swift_retain();
    v278 = (void (*)(long long *__return_ptr, void *))v8;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v8);
    v281 = (void *)_CodingPathNode.path.getter(a4);
    uint64_t v19 = JSONMap.loadValue(at:)(a1);
    if (v21 > 0xFDu)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v278);
      return v296;
    }
    uint64_t v207 = v19;
    uint64_t v208 = v20;
    unsigned __int8 v209 = v21;
    while (1)
    {
      Swift::Int v212 = JSONMap.offset(after:)(a1);
      uint64_t v213 = JSONMap.loadValue(at:)(v212);
      v287 = v215;
      v290 = v213;
      if (v214 > 0xFDu) {
        goto LABEL_237;
      }
      unsigned __int8 v216 = v214;
      a1 = JSONMap.offset(after:)(v212);
      uint64_t v217 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v207, v208, v209, a4, 0, 0, 0, 255);
      if (v6) {
        goto LABEL_246;
      }
      uint64_t v219 = v217;
      uint64_t v220 = v218;
      uint64_t v221 = v281;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v281[2] + 1, 1, v281);
      }
      unint64_t v223 = v221[2];
      unint64_t v222 = v221[3];
      if (v223 >= v222 >> 1) {
        uint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v222 > 1), v223 + 1, 1, v221);
      }
      v294 = &type metadata for _CodingKey;
      v295 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v224 = swift_allocObject();
      *(void *)&v292 = v224;
      *(void *)(v224 + 16) = v219;
      *(void *)(v224 + 24) = v220;
      *(void *)(v224 + 32) = 0;
      *(unsigned char *)(v224 + 40) = 0;
      v221[2] = v223 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v292, (uint64_t)&v221[5 * v223 + 4]);
      v278(&v292, v221);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(&v292, (uint64_t)v294);
      uint64_t v225 = dispatch thunk of CodingKey.stringValue.getter();
      uint64_t v227 = v226;
      unint64_t v228 = v296;
      char v229 = swift_isUniquelyReferenced_nonNull_native();
      v296 = 0x8000000000000000;
      swift_bridgeObjectRetain();
      unint64_t v231 = specialized __RawDictionaryStorage.find<A>(_:)(v225, v227);
      uint64_t v232 = *(void *)(v228 + 16);
      BOOL v233 = (v230 & 1) == 0;
      uint64_t v234 = v232 + v233;
      if (__OFADD__(v232, v233)) {
        goto LABEL_224;
      }
      char v235 = v230;
      if (*(void *)(v228 + 24) >= v234)
      {
        if (v229)
        {
          unint64_t v236 = v228;
          uint64_t v6 = 0;
          if (v230) {
            goto LABEL_177;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
          uint64_t v243 = static _DictionaryStorage.copy(original:)();
          unint64_t v236 = v243;
          if (*(void *)(v228 + 16))
          {
            uint64_t v244 = (char *)(v243 + 64);
            v245 = (char *)(v228 + 64);
            unint64_t v246 = (unint64_t)((1 << *(unsigned char *)(v236 + 32)) + 63) >> 6;
            unint64_t v274 = v228 + 64;
            if (v236 != v228 || v244 >= &v245[8 * v246]) {
              memmove(v244, v245, 8 * v246);
            }
            int64_t v247 = 0;
            *(void *)(v236 + 16) = *(void *)(v228 + 16);
            uint64_t v248 = 1 << *(unsigned char *)(v228 + 32);
            if (v248 < 64) {
              uint64_t v249 = ~(-1 << v248);
            }
            else {
              uint64_t v249 = -1;
            }
            unint64_t v250 = v249 & *(void *)(v228 + 64);
            int64_t v276 = (unint64_t)(v248 + 63) >> 6;
            while (1)
            {
              if (v250)
              {
                unint64_t v251 = __clz(__rbit64(v250));
                v250 &= v250 - 1;
                unint64_t v252 = v251 | (v247 << 6);
              }
              else
              {
                int64_t v263 = v247 + 1;
                if (__OFADD__(v247, 1)) {
                  goto LABEL_234;
                }
                if (v263 >= v276) {
                  break;
                }
                unint64_t v264 = *(void *)(v274 + 8 * v263);
                ++v247;
                if (!v264)
                {
                  int64_t v247 = v263 + 1;
                  if (v263 + 1 >= v276) {
                    break;
                  }
                  unint64_t v264 = *(void *)(v274 + 8 * v247);
                  if (!v264)
                  {
                    int64_t v247 = v263 + 2;
                    if (v263 + 2 >= v276) {
                      break;
                    }
                    unint64_t v264 = *(void *)(v274 + 8 * v247);
                    if (!v264)
                    {
                      int64_t v247 = v263 + 3;
                      if (v263 + 3 >= v276) {
                        break;
                      }
                      unint64_t v264 = *(void *)(v274 + 8 * v247);
                      if (!v264)
                      {
                        int64_t v265 = v263 + 4;
                        if (v265 >= v276) {
                          break;
                        }
                        unint64_t v264 = *(void *)(v274 + 8 * v265);
                        if (!v264)
                        {
                          while (1)
                          {
                            int64_t v247 = v265 + 1;
                            if (__OFADD__(v265, 1)) {
                              break;
                            }
                            if (v247 >= v276) {
                              goto LABEL_221;
                            }
                            unint64_t v264 = *(void *)(v274 + 8 * v247);
                            ++v265;
                            if (v264) {
                              goto LABEL_220;
                            }
                          }
LABEL_240:
                          __break(1u);
                          goto LABEL_241;
                        }
                        int64_t v247 = v265;
                      }
                    }
                  }
                }
LABEL_220:
                unint64_t v250 = (v264 - 1) & v264;
                unint64_t v252 = __clz(__rbit64(v264)) + (v247 << 6);
              }
              uint64_t v253 = 16 * v252;
              v254 = (uint64_t *)(*(void *)(v228 + 48) + 16 * v252);
              uint64_t v256 = *v254;
              uint64_t v255 = v254[1];
              uint64_t v257 = 24 * v252;
              uint64_t v258 = *(void *)(v228 + 56) + v257;
              char v259 = *(unsigned char *)(v258 + 16);
              v260 = (void *)(*(void *)(v236 + 48) + v253);
              long long v261 = *(_OWORD *)v258;
              void *v260 = v256;
              v260[1] = v255;
              uint64_t v262 = *(void *)(v236 + 56) + v257;
              *(_OWORD *)uint64_t v262 = v261;
              *(unsigned char *)(v262 + 16) = v259;
              swift_bridgeObjectRetain();
            }
          }
LABEL_221:
          swift_bridgeObjectRelease();
          uint64_t v6 = 0;
          if (v235)
          {
LABEL_177:
            swift_bridgeObjectRelease();
            goto LABEL_178;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v234, v229);
        unint64_t v236 = v228;
        unint64_t v237 = specialized __RawDictionaryStorage.find<A>(_:)(v225, v227);
        if ((v235 & 1) != (v238 & 1)) {
          goto LABEL_242;
        }
        unint64_t v231 = v237;
        uint64_t v6 = 0;
        if (v235) {
          goto LABEL_177;
        }
      }
      *(void *)(v236 + 8 * (v231 >> 6) + 64) |= 1 << v231;
      uint64_t v239 = (uint64_t *)(*(void *)(v236 + 48) + 16 * v231);
      *uint64_t v239 = v225;
      v239[1] = v227;
      uint64_t v240 = *(void *)(v236 + 56) + 24 * v231;
      *(void *)uint64_t v240 = v290;
      *(void *)(v240 + 8) = v287;
      *(unsigned char *)(v240 + 16) = v216;
      uint64_t v241 = *(void *)(v236 + 16);
      BOOL v130 = __OFADD__(v241, 1);
      uint64_t v242 = v241 + 1;
      if (v130) {
        goto LABEL_227;
      }
      *(void *)(v236 + 16) = v242;
LABEL_178:
      v296 = v236;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v292);
      uint64_t v207 = JSONMap.loadValue(at:)(a1);
      uint64_t v208 = v210;
      unsigned __int8 v209 = v211;
      if (v211 > 0xFDu) {
        goto LABEL_12;
      }
    }
  }
  swift_retain();
  uint64_t v11 = JSONMap.loadValue(at:)(a1);
  if (v13 > 0xFDu)
  {
LABEL_7:
    swift_release();
    return v296;
  }
  uint64_t v23 = v11;
  uint64_t v24 = v12;
  unsigned __int8 v25 = v13;
  while (2)
  {
    Swift::Int v28 = JSONMap.offset(after:)(a1);
    uint64_t v29 = JSONMap.loadValue(at:)(v28);
    uint64_t v269 = v30;
    unsigned __int8 v268 = v31;
    if (v31 > 0xFDu) {
      goto LABEL_238;
    }
    uint64_t v32 = v29;
    Swift::Int v33 = JSONMap.offset(after:)(v28);
    uint64_t v34 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v23, v24, v25, a4, 0, 0, 0, 255);
    if (v6) {
      goto LABEL_244;
    }
    if ((v35 & 0x2000000000000000) != 0) {
      uint64_t v36 = HIBYTE(v35) & 0xF;
    }
    else {
      uint64_t v36 = v34 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v270 = v33;
    uint64_t v267 = v32;
    if (!v36)
    {
      uint64_t v41 = v34;
      uint64_t v42 = v35;
      goto LABEL_95;
    }
    unint64_t v37 = 0;
    v283 = 4 * v36;
    v285 = v35;
    unint64_t v38 = 15;
    v288 = v34;
    while (1)
    {
      if (String.subscript.getter() == 95 && v40 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0) {
        break;
      }
LABEL_25:
      unint64_t v38 = String.index(after:)();
      unint64_t v37 = v38 >> 14;
      if (v38 >> 14 == v283)
      {
        uint64_t v41 = v288;
        uint64_t v42 = v285;
LABEL_94:
        uint64_t v6 = 0;
        goto LABEL_95;
      }
    }
    unint64_t v43 = (unint64_t)String.index(before:)() >> 14;
    if (v37 >= v43) {
      goto LABEL_50;
    }
    if (String.subscript.getter() == 95 && v44 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v46 & 1) == 0) {
        goto LABEL_50;
      }
    }
    unint64_t v43 = (unint64_t)String.index(before:)() >> 14;
    if (v37 < v43)
    {
      if (String.subscript.getter() == 95 && v47 == 0xE100000000000000) {
        goto LABEL_44;
      }
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v48)
      {
        while (1)
        {
          unint64_t v43 = (unint64_t)String.index(before:)() >> 14;
          if (v37 >= v43) {
            break;
          }
          if (String.subscript.getter() == 95 && v49 == 0xE100000000000000)
          {
LABEL_44:
            swift_bridgeObjectRelease();
          }
          else
          {
            char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v50 & 1) == 0) {
              break;
            }
          }
        }
      }
    }
LABEL_50:
    if (v43 < v37) {
      goto LABEL_229;
    }
    unint64_t v51 = String.index(after:)();
    if (v283 < v51 >> 14) {
      goto LABEL_230;
    }
    unint64_t v266 = v51 >> 14;
    swift_bridgeObjectRetain();
    String.index(after:)();
    unint64_t v52 = String.subscript.getter();
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    unint64_t v55 = v54 >> 14;
    Swift::Int v56 = (void *)MEMORY[0x1E4FBC860];
    if (v54 >> 14 == v52 >> 14) {
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    unint64_t v57 = v52;
    unint64_t v58 = v52;
    unint64_t v59 = v52;
    v275 = (void *)MEMORY[0x1E4FBC860];
    while (2)
    {
      while (Substring.subscript.getter() != 95 || v61 != 0xE100000000000000)
      {
        char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v62) {
          goto LABEL_60;
        }
        unint64_t v57 = Substring.index(after:)();
        if (v55 == v57 >> 14) {
          goto LABEL_67;
        }
      }
      swift_bridgeObjectRelease();
LABEL_60:
      if (v57 >> 14 != v59 >> 14)
      {
        if (v57 >> 14 < v58 >> 14) {
          goto LABEL_243;
        }
        uint64_t v63 = Substring.subscript.getter();
        uint64_t v272 = v65;
        uint64_t v273 = v64;
        uint64_t v271 = v66;
        uint64_t v67 = v275;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v275[2] + 1, 1, v275);
        }
        unint64_t v69 = v67[2];
        unint64_t v68 = v67[3];
        if (v69 >= v68 >> 1) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v67);
        }
        v67[2] = v69 + 1;
        v275 = v67;
        uint64_t v60 = &v67[4 * v69];
        v60[4] = v63;
        v60[5] = v273;
        v60[6] = v272;
        v60[7] = v271;
      }
      unint64_t v57 = Substring.index(after:)();
      unint64_t v58 = v57;
      unint64_t v59 = v57;
      if (v55 != v57 >> 14) {
        continue;
      }
      break;
    }
LABEL_67:
    if (v55 == v59 >> 14)
    {
      swift_bridgeObjectRelease();
      Swift::Int v56 = v275;
    }
    else
    {
      Swift::Int v56 = v275;
      if (v55 < v58 >> 14) {
        goto LABEL_243;
      }
      uint64_t v70 = Substring.subscript.getter();
      uint64_t v72 = v71;
      uint64_t v74 = v73;
      uint64_t v76 = v75;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::Int v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v275[2] + 1, 1, v275);
      }
      unint64_t v78 = v56[2];
      unint64_t v77 = v56[3];
      if (v78 >= v77 >> 1) {
        Swift::Int v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v77 > 1), v78 + 1, 1, v56);
      }
      v56[2] = v78 + 1;
      uint64_t v79 = &v56[4 * v78];
      v79[4] = v70;
      v79[5] = v72;
      v79[6] = v74;
      v79[7] = v76;
    }
LABEL_75:
    swift_bridgeObjectRelease();
    if (v56[2] == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.index(after:)();
      uint64_t v80 = String.subscript.getter();
      uint64_t v82 = v81;
      uint64_t v84 = v83;
      uint64_t v86 = v85;
      swift_bridgeObjectRelease();
      uint64_t v41 = MEMORY[0x185301F50](v80, v82, v84, v86);
      uint64_t v42 = v87;
      goto LABEL_87;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v88 = swift_allocObject();
    *(_OWORD *)(v88 + 16) = xmmword_1821037E0;
    if (!v56[2]) {
      goto LABEL_231;
    }
    uint64_t v89 = (Swift::String *)v88;
    swift_bridgeObjectRetain();
    Swift::String v90 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    v89[2] = v90;
    uint64_t v91 = v56[2];
    if (!v91) {
      goto LABEL_232;
    }
    int64_t v92 = v91 - 1;
    if (v91 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v93 = MEMORY[0x1E4FBC860];
    }
    else
    {
      v291 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 0);
      uint64_t v93 = v291;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      unint64_t v94 = (ValueMetadata **)(v56 + 11);
      do
      {
        uint64_t v95 = (uint64_t)*(v94 - 1);
        uint64_t v96 = *v94;
        v292 = *(_OWORD *)(v94 - 3);
        v293 = v95;
        v294 = v96;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        Swift::String v97 = String._capitalized()();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        unint64_t v99 = *(void *)(v291 + 16);
        unint64_t v98 = *(void *)(v291 + 24);
        if (v99 >= v98 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
        }
        *(void *)(v291 + 16) = v99 + 1;
        *(Swift::String *)(v291 + 16 * v99 + 32) = v97;
        v94 += 4;
        --v92;
      }
      while (v92);
      swift_bridgeObjectRelease();
    }
    specialized Array.append<A>(contentsOf:)(v93);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v42 = v100;
LABEL_87:
    swift_bridgeObjectRelease();
    if (v38 >> 14)
    {
      uint64_t v101 = String.subscript.getter();
      uint64_t v102 = MEMORY[0x185301F50](v101);
      uint64_t v104 = v103;
      swift_bridgeObjectRelease();
      *(void *)&v292 = v102;
      *((void *)&v292 + 1) = v104;
      swift_bridgeObjectRetain();
      uint64_t v105 = v41;
      uint64_t v106 = v42;
      if (v266 != v283)
      {
        String.append(_:)(*(Swift::String *)&v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v112 = String.subscript.getter();
        uint64_t v113 = MEMORY[0x185301F50](v112);
        uint64_t v115 = v114;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v105 = v113;
        uint64_t v106 = v115;
      }
      String.append(_:)(*(Swift::String *)&v105);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = *((void *)&v292 + 1);
      uint64_t v41 = v292;
      goto LABEL_94;
    }
    uint64_t v6 = 0;
    if (v266 != v283)
    {
      uint64_t v107 = String.subscript.getter();
      uint64_t v108 = MEMORY[0x185301F50](v107);
      uint64_t v110 = v109;
      swift_bridgeObjectRelease();
      *(void *)&v292 = v41;
      *((void *)&v292 + 1) = v42;
      swift_bridgeObjectRetain();
      v111._uint64_t countAndFlagsBits = v108;
      v111._unint64_t object = v110;
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRetain();
    unint64_t v116 = v296;
    char v117 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v292 = v296;
    v296 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
    uint64_t v120 = *(void *)(v292 + 16);
    BOOL v121 = (v118 & 1) == 0;
    uint64_t v122 = v120 + v121;
    if (__OFADD__(v120, v121)) {
      goto LABEL_225;
    }
    char v123 = v118;
    if (*(void *)(v116 + 24) < v122)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v122, v117);
      unint64_t v124 = v292;
      unint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
      if ((v123 & 1) != (v126 & 1)) {
        goto LABEL_242;
      }
      unint64_t v119 = v125;
      if (v123) {
        goto LABEL_15;
      }
LABEL_102:
      *(void *)(v124 + 8 * (v119 >> 6) + 64) |= 1 << v119;
      uint64_t v127 = (uint64_t *)(*(void *)(v124 + 48) + 16 * v119);
      *uint64_t v127 = v41;
      v127[1] = v42;
      uint64_t v128 = *(void *)(v124 + 56) + 24 * v119;
      *(void *)uint64_t v128 = v267;
      *(void *)(v128 + 8) = v269;
      *(unsigned char *)(v128 + 16) = v268;
      uint64_t v129 = *(void *)(v124 + 16);
      BOOL v130 = __OFADD__(v129, 1);
      uint64_t v131 = v129 + 1;
      if (v130) {
        goto LABEL_228;
      }
      *(void *)(v124 + 16) = v131;
LABEL_16:
      v296 = v124;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v270;
      uint64_t v23 = JSONMap.loadValue(at:)(v270);
      uint64_t v24 = v26;
      unsigned __int8 v25 = v27;
      if (v27 > 0xFDu) {
        goto LABEL_7;
      }
      continue;
    }
    break;
  }
  if (v117)
  {
    unint64_t v124 = v116;
    if ((v118 & 1) == 0) {
      goto LABEL_102;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
  uint64_t v132 = static _DictionaryStorage.copy(original:)();
  unint64_t v124 = v132;
  if (!*(void *)(v116 + 16))
  {
LABEL_131:
    swift_bridgeObjectRelease();
    if ((v123 & 1) == 0) {
      goto LABEL_102;
    }
    goto LABEL_15;
  }
  v280 = v6;
  char v133 = (void *)(v132 + 64);
  unint64_t v134 = v116 + 64;
  unint64_t v135 = (unint64_t)((1 << *(unsigned char *)(v124 + 32)) + 63) >> 6;
  if (v124 != v116 || (unint64_t)v133 >= v134 + 8 * v135) {
    memmove(v133, (const void *)(v116 + 64), 8 * v135);
  }
  int64_t v136 = 0;
  *(void *)(v124 + 16) = *(void *)(v116 + 16);
  uint64_t v137 = 1 << *(unsigned char *)(v116 + 32);
  if (v137 < 64) {
    uint64_t v138 = ~(-1 << v137);
  }
  else {
    uint64_t v138 = -1;
  }
  unint64_t v139 = v138 & *(void *)(v116 + 64);
  int64_t v140 = (unint64_t)(v137 + 63) >> 6;
  while (2)
  {
    if (v139)
    {
      unint64_t v141 = __clz(__rbit64(v139));
      v139 &= v139 - 1;
      unint64_t v142 = v141 | (v136 << 6);
LABEL_113:
      uint64_t v143 = 16 * v142;
      unint64_t v144 = (uint64_t *)(*(void *)(v116 + 48) + 16 * v142);
      uint64_t v146 = *v144;
      uint64_t v145 = v144[1];
      uint64_t v147 = 24 * v142;
      uint64_t v148 = *(void *)(v116 + 56) + v147;
      char v149 = *(unsigned char *)(v148 + 16);
      uint64_t v150 = (void *)(*(void *)(v124 + 48) + v143);
      long long v151 = *(_OWORD *)v148;
      *uint64_t v150 = v146;
      v150[1] = v145;
      uint64_t v152 = *(void *)(v124 + 56) + v147;
      *(_OWORD *)uint64_t v152 = v151;
      *(unsigned char *)(v152 + 16) = v149;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v153 = v136 + 1;
  if (__OFADD__(v136, 1)) {
    goto LABEL_235;
  }
  uint64_t v6 = v280;
  if (v153 >= v140) {
    goto LABEL_131;
  }
  unint64_t v154 = *(void *)(v134 + 8 * v153);
  ++v136;
  if (v154) {
    goto LABEL_130;
  }
  int64_t v136 = v153 + 1;
  if (v153 + 1 >= v140) {
    goto LABEL_131;
  }
  unint64_t v154 = *(void *)(v134 + 8 * v136);
  if (v154) {
    goto LABEL_130;
  }
  int64_t v136 = v153 + 2;
  if (v153 + 2 >= v140) {
    goto LABEL_131;
  }
  unint64_t v154 = *(void *)(v134 + 8 * v136);
  if (v154) {
    goto LABEL_130;
  }
  int64_t v136 = v153 + 3;
  if (v153 + 3 >= v140) {
    goto LABEL_131;
  }
  unint64_t v154 = *(void *)(v134 + 8 * v136);
  if (v154)
  {
LABEL_130:
    unint64_t v139 = (v154 - 1) & v154;
    unint64_t v142 = __clz(__rbit64(v154)) + (v136 << 6);
    goto LABEL_113;
  }
  int64_t v155 = v153 + 4;
  if (v155 >= v140) {
    goto LABEL_131;
  }
  unint64_t v154 = *(void *)(v134 + 8 * v155);
  if (v154)
  {
    int64_t v136 = v155;
    goto LABEL_130;
  }
  while (1)
  {
    int64_t v136 = v155 + 1;
    if (__OFADD__(v155, 1)) {
      break;
    }
    if (v136 >= v140) {
      goto LABEL_131;
    }
    unint64_t v154 = *(void *)(v134 + 8 * v136);
    ++v155;
    if (v154) {
      goto LABEL_130;
    }
  }
LABEL_241:
  __break(1u);
LABEL_242:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_243:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_244:
  swift_unexpectedError();
  __break(1u);
LABEL_245:
  swift_unexpectedError();
  __break(1u);
LABEL_246:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t JSONMap.loadValue(at:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 41;
    v11._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v5 = v3 + 32;
  uint64_t v6 = *(void *)(v5 + 8 * a1);
  uint64_t result = 1;
  switch(v6)
  {
    case 0:
    case 8:
      if (a1 + 1 >= v4) {
        goto LABEL_20;
      }
      unint64_t v8 = a1 + 2;
      if (v8 >= v4) {
        goto LABEL_22;
      }
      uint64_t result = *(void *)(v5 + 8 * v8);
      break;
    case 1:
    case 9:
      if (a1 + 1 >= v4) {
        goto LABEL_21;
      }
      unint64_t v9 = a1 + 2;
      if (v9 >= v4) {
        goto LABEL_23;
      }
      uint64_t result = *(void *)(v5 + 8 * v9);
      break;
    case 2:
      return 0;
    case 3:
      return result;
    case 4:
      return 0;
    case 5:
      if (a1 + 2 >= v4) {
        goto LABEL_25;
      }
      return a1 + 3;
    case 6:
      if (a1 + 2 >= v4) {
        goto LABEL_24;
      }
      return a1 + 3;
    case 7:
      return 0;
    default:
      goto LABEL_26;
  }
  return result;
}

Swift::Int __swiftcall JSONMap.offset(after:)(Swift::Int after)
{
  if (after < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 41;
    v7._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v7);
LABEL_16:
    after = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return after;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3 <= after) {
    goto LABEL_12;
  }
  uint64_t v4 = v2 + 32;
  switch(*(void *)(v4 + 8 * after))
  {
    case 0:
    case 1:
    case 8:
    case 9:
      BOOL v5 = __OFADD__(after, 3);
      after += 3;
      if (!v5) {
        return after;
      }
      __break(1u);
LABEL_7:
      ++after;
      break;
    case 2:
    case 3:
    case 4:
      goto LABEL_7;
    case 5:
    case 6:
      if (after + 1 >= v3) {
        goto LABEL_13;
      }
      return *(void *)(v4 + 8 * (after + 1));
    case 7:
      _StringGuts.grow(_:)(68);
      v8._uint64_t countAndFlagsBits = 0xD000000000000041;
      v8._unint64_t object = (void *)0x80000001823AA6B0;
      String.append(_:)(v8);
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = 41;
      v10._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      goto LABEL_16;
    default:
      goto LABEL_14;
  }
  return after;
}

uint64_t specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v8;
  v34[20] = *MEMORY[0x1E4F143B8];
  if ((a3 & 0xE0) == 0xA0)
  {
    if (!(a2 | a1) && a3 == 160)
    {
      uint64_t v17 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v19 = v18;
      *unint64_t v18 = MEMORY[0x1E4FBB1A0];
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        uint64_t v20 = _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v22 = swift_allocObject();
        *(void *)(inited + 32) = v22;
        *(void *)(v22 + 16) = a5;
        *(void *)(v22 + 24) = a6;
        *(void *)(v22 + 32) = a7;
        *(unsigned char *)(v22 + 40) = a8;
        v34[0] = v20;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v34[0] = 0;
      v34[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v30._unint64_t object = (void *)0x80000001823B3360;
      v30._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v30);
      v31._uint64_t countAndFlagsBits = 0x676E69727453;
      v31._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v32._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v32);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
      return swift_willThrow();
    }
LABEL_9:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(a5, a6, a7, a8);
      uint64_t v26 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v27 = swift_initStackObject();
      *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
      *(void *)(v27 + 56) = &type metadata for _CodingKey;
      *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v28 = swift_allocObject();
      *(void *)(v27 + 32) = v28;
      *(void *)(v28 + 16) = a5;
      *(void *)(v28 + 24) = a6;
      *(void *)(v28 + 32) = a7;
      *(unsigned char *)(v28 + 40) = a8;
      v34[0] = v26;
      specialized Array.append<A>(contentsOf:)(v27);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB1A0], a3, v29);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  if (a3 > 0x1Fu) {
    goto LABEL_9;
  }
  uint64_t v23 = MEMORY[0x1F4188790](a1);
  uint64_t v24 = *(void *)(*(void *)(v10 + 32) + 24);
  MEMORY[0x1F4188790](v23);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v24 + 40));
  partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v24 + 16), v34);
  os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 40));
  swift_release();
  uint64_t result = swift_release();
  if (!v9) {
    return v34[0];
  }
  return result;
}

void *partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(void *result@<X0>, void *(*a2)(void *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(v11, *result + a3, a4);
    if (!v5)
    {
      uint64_t v10 = v11[1];
      *a5 = v11[0];
      a5[1] = v10;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v5 + 16), *(unsigned char *)(v5 + 17), a5);
}

uint64_t closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  if (a5)
  {
    uint64_t result = static String._tryFromUTF8(_:)();
    if (!v13)
    {
      unint64_t v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0;
      *(void *)(v19 + 40) = 0;
      *(unsigned char *)(v19 + 48) = 0;
      return swift_willThrow();
    }
  }
  else if (a6)
  {
    uint64_t result = static JSON5Scanner.stringValue(from:fullSource:)(a1, a2, a3, a4);
    if (v7) {
      return result;
    }
  }
  else
  {
    uint64_t result = static JSONScanner.stringValue(from:fullSource:)(a1, a2, a3, a4);
    if (v7) {
      return result;
    }
  }
  *a7 = result;
  a7[1] = v13;
  return result;
}

uint64_t closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)partial apply@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5);
}

uint64_t static JSONScanner.stringValue(from:fullSource:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (unsigned char *)(a1 + a2);
  BOOL v9 = (unsigned char *)a1;
  if (a2 >= 1)
  {
    do
    {
      unsigned int v10 = *v9;
      if (v10 == 92) {
        break;
      }
      if (v10 < 0x20) {
        break;
      }
      ++v9;
    }
    while (v9 < v8);
    if ((unint64_t)v9 < a1)
    {
      __break(1u);
      return v19[0];
    }
  }
  uint64_t result = static String._tryFromUTF8(_:)();
  if (v12)
  {
    v19[0] = result;
    v19[1] = v12;
    if (v8 != v9)
    {
      if (v8 < v9)
      {
        __break(1u);
        return result;
      }
      specialized static JSONScanner._slowpath_stringValue(from:appendingTo:fullSource:)(v9, v8 - v9, v19, a3, a4);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      return v19[0];
    }
  }
  else
  {
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v13;
    *(void *)(v18 + 8) = v15;
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0;
    *(unsigned char *)(v18 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

unsigned char *specialized static JSONScanner._slowpath_stringValue(from:appendingTo:fullSource:)(unsigned char *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  BOOL v9 = result;
  if (a2 < 1)
  {
    unint64_t v11 = (unint64_t)result;
LABEL_14:
    uint64_t v17 = static String._tryFromUTF8(_:)();
    if (v18)
    {
      String.append(_:)(*(Swift::String *)&v17);
      return (unsigned char *)swift_bridgeObjectRelease();
    }
    else
    {
LABEL_16:
      unint64_t v19 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11, a4, a5);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v24 = v19;
      *(void *)(v24 + 8) = v21;
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0;
      *(void *)(v24 + 40) = 0;
      *(unsigned char *)(v24 + 48) = 0;
      return (unsigned char *)swift_willThrow();
    }
  }
  else
  {
    unsigned int v10 = &result[a2];
    unint64_t v11 = (unint64_t)result;
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = *v12;
      if (v13 == 92)
      {
        if ((unint64_t)v12 < v11)
        {
          __break(1u);
LABEL_20:
          unint64_t v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v12, a4, a5);
          uint64_t v27 = v26;
          uint64_t v29 = v28;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v30 = v13;
          *(void *)(v30 + 8) = v25;
          *(void *)(v30 + 16) = v27;
          *(void *)(v30 + 24) = v29;
          *(void *)(v30 + 32) = 0;
          *(void *)(v30 + 40) = 0;
          *(unsigned char *)(v30 + 48) = 7;
          return (unsigned char *)swift_willThrow();
        }
        uint64_t v14 = static String._tryFromUTF8(_:)();
        if (!v15) {
          goto LABEL_16;
        }
        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        uint64_t result = v12 + 1;
        uint64_t v16 = v10 - (v12 + 1);
        if (((v12 + 1 - v9) | v16) < 0)
        {
          __break(1u);
          goto LABEL_22;
        }
        uint64_t result = specialized static JSONScanner.parseEscapeSequence(from:into:fullSource:)(result, v16, a3, a4, a5);
        if (v5) {
          return result;
        }
        unint64_t v11 = (unint64_t)result;
        uint64_t v12 = result;
      }
      else
      {
        if (v13 < 0x20) {
          goto LABEL_20;
        }
        ++v12;
      }
    }
    while (v12 < v10);
    if ((unint64_t)v12 >= v11) {
      goto LABEL_14;
    }
LABEL_22:
    __break(1u);
  }
  return result;
}

unsigned char *specialized static JSONScanner.parseEscapeSequence(from:into:fullSource:)(unsigned char *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *result;
    switch(*result)
    {
      case '""':
        goto LABEL_11;
      case '/':
        uint64_t v6 = 47;
        goto LABEL_11;
      case '\\':
        uint64_t v6 = 92;
        goto LABEL_11;
      case 'b':
        uint64_t v6 = 8;
        goto LABEL_11;
      case 'f':
        uint64_t v6 = 12;
        goto LABEL_11;
      case 'n':
        uint64_t v6 = 10;
        goto LABEL_11;
      case 'r':
        uint64_t v6 = 13;
        goto LABEL_11;
      case 't':
        uint64_t v6 = 9;
LABEL_11:
        v13._uint64_t countAndFlagsBits = v6;
        v13._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v13);
        uint64_t result = v5 + 1;
        break;
      case 'u':
        if (a2 >= 1) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = a2;
        }
        uint64_t result = specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)((unint64_t)&result[v14], a2 - v14, a3, a4, a5, 1);
        break;
      default:
        unint64_t v7 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
        uint64_t v9 = v8;
        uint64_t v11 = v10;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v12 = v6;
        *(void *)(v12 + 8) = v7;
        *(void *)(v12 + 16) = v9;
        *(void *)(v12 + 24) = v11;
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 40) = 0;
        *(unsigned char *)(v12 + 48) = 6;
        uint64_t result = (unsigned char *)swift_willThrow();
        break;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of AttributedString._AttributeValue(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AttributedString._AttributeValue(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  if (*(void *)(a1 + 48) != 1) {
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t JSONDecoderImpl.createTypeMismatchError(type:for:value:)@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W4>, void *a3@<X8>)
{
  *a3 = a1;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x756F662074756220;
  v6._unint64_t object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v6);
  uint64_t v7 = a2 >> 5;
  uint64_t v8 = (void *)0xE800000000000000;
  uint64_t v9 = 0x676E697274732061;
  switch(v7)
  {
    case 1:
      uint64_t v8 = (void *)0xE600000000000000;
      uint64_t v9 = 0x7265626D756ELL;
      break;
    case 2:
      uint64_t v8 = (void *)0xE400000000000000;
      uint64_t v9 = 1819242338;
      break;
    case 3:
      uint64_t v8 = (void *)0xEC0000007972616ELL;
      uint64_t v9 = 0x6F69746369642061;
      break;
    case 4:
      uint64_t v9 = 0x7961727261206E61;
      break;
    case 5:
      uint64_t v8 = (void *)0xE400000000000000;
      uint64_t v9 = 1819047278;
      break;
    default:
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v10._uint64_t countAndFlagsBits = v9;
  v10._unint64_t object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x64616574736E6920;
  v11._unint64_t object = (void *)0xE90000000000002ELL;
  String.append(_:)(v11);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v12 = *MEMORY[0x1E4FBBA70];
  uint64_t v13 = type metadata accessor for DecodingError();
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104);

  return v14(a3, v12, v13);
}

uint64_t partial apply for closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v5 + 32), *(uint64_t **)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 16), a5, *(void *)(v5 + 24));
}

uint64_t closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v71 = a6;
  uint64_t v18 = *(void *)(a8 - 8);
  unint64_t v58 = a7;
  uint64_t v59 = v18;
  MEMORY[0x1F4188790](a1);
  unint64_t v57 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  if (a5)
  {
    unint64_t v55 = (char *)&v52 - v25;
    uint64_t v56 = v24;
    uint64_t v27 = v26;
    uint64_t result = static String._tryFromUTF8(_:)();
    if (v29)
    {
      *a9 = result;
      a9[1] = v29;
      return result;
    }
    uint64_t v66 = a3;
    unint64_t v67 = a4;
    uint64_t v68 = a1;
    uint64_t v69 = a1;
    uint64_t v70 = a1 + a2;
    uint64_t v61 = 0;
    unint64_t v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v31._unint64_t object = (void *)0x80000001823B3080;
    v31._uint64_t countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v31);
    v60[0] = BufferReader.lineNumber.getter();
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    unint64_t v33 = v62;
    uint64_t v54 = v61;
    uint64_t v34 = v27;
    unint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
    uint64_t v36 = v55;
    uint64_t v37 = v56;
    v35(v55, v58, v56);
    v35(v22, (unint64_t)v36, v37);
    uint64_t v38 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v22, 1, a8) == 1)
    {
      char v39 = *(void (**)(char *, uint64_t))(v34 + 8);
      v39(v36, v37);
      v39(v22, v37);
      uint64_t v40 = v71;
      swift_retain();
LABEL_14:
      uint64_t v49 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v51 = v50;
      _CodingPathNode.path.getter((unint64_t)v40);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v49 - 8) + 104))(v51, *MEMORY[0x1E4FBBA78], v49);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_willThrow();
    }
    unint64_t v58 = v33;
    uint64_t v53 = a10;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    uint64_t v42 = v57;
    v41(v57, v22, a8);
    uint64_t v40 = (uint64_t *)swift_allocObject();
    uint64_t v43 = v53;
    v40[5] = a8;
    v40[6] = v43;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v40 + 2);
    v41((char *)boxed_opaque_existential_1, v42, a8);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v37);
    uint64_t v45 = v71;
    v40[7] = (uint64_t)v71;
    if ((unint64_t)v45 >> 62)
    {
      if ((unint64_t)v45 >> 62 != 1)
      {
        uint64_t v48 = 1;
LABEL_13:
        v40[8] = v48;
        goto LABEL_14;
      }
      char v46 = (uint64_t *)(((unint64_t)v45 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      char v46 = v45 + 8;
    }
    uint64_t v47 = *v46;
    uint64_t result = swift_retain();
    uint64_t v48 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
      return result;
    }
    goto LABEL_13;
  }
  uint64_t v61 = a3;
  unint64_t v62 = a4;
  uint64_t v63 = a1;
  uint64_t v64 = a1;
  uint64_t v65 = a1 + a2;
  uint64_t result = (uint64_t)specialized static XMLPlistScanner.parseString(with:generate:)(&v61, 1, (uint64_t)v60);
  if (!v10)
  {
    uint64_t v30 = v60[3];
    *a9 = v60[2];
    a9[1] = v30;
  }
  return result;
}

unint64_t partial apply for specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  return specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), a5);
}

void outlined consume of Result<stat, CocoaError>(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19) {
}
  }

uint64_t destroy for NSDecimal.FormatStyle(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x185309510);
  }
  return result;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance [A](void *a1, char **a2, uint64_t a3)
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t ___writeJSONObject_block_invoke_3(uint64_t a1)
{
  if ((_NSIsNSString() & 1) == 0) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Invalid (non-string) key in JSON dictionary" userInfo:0]);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

void sub_1817B6F88(_Unwind_Exception *a1)
{
}

BOOL _NSFileExistsAtPath(void *a1, uint64_t a2, uint64_t a3, stat *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)[objc_allocWithZone((Class)NSCheapMutableString) init];
  [v8 setContentsNoCopy:a2 length:a3 freeWhenDone:0 isUnicode:1];
  LODWORD(a3) = [a1 getFileSystemRepresentation:v10 maxLength:1026 withPath:v8];

  BOOL result = 0;
  if (a3) {
    return stat(v10, a4) == 0;
  }
  return result;
}

void _NSResolveSymlinksInPathUsingCache(unsigned __int16 *a1, uint64_t *a2, int a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a2)
  {
    memset(&v32, 0, sizeof(v32));
    uint64_t v5 = (void *)[objc_allocWithZone((Class)NSCheapMutableString) init];
    [v5 setContentsNoCopy:a1 length:v3 freeWhenDone:0 isUnicode:1];
    if ([+[NSFileManager defaultManager] getFileSystemRepresentation:__s maxLength:1025 withPath:v5])
    {
      size_t v27 = strlen(__s);

      if (a3) {
        goto LABEL_10;
      }
      if (*a2 < 1) {
        goto LABEL_10;
      }
      int v6 = *a1;
      if (v6 != 126 && v6 != 47) {
        goto LABEL_10;
      }
      long long v64 = 0u;
      long long v63 = 0u;
      long long v62 = 0u;
      long long v61 = 0u;
      long long v60 = 0u;
      long long v59 = 0u;
      long long v58 = 0u;
      long long v57 = 0u;
      long long v56 = 0u;
      long long v55 = 0u;
      long long v54 = 0u;
      long long v53 = 0u;
      long long v52 = 0u;
      long long v51 = 0u;
      long long v50 = 0u;
      long long v49 = 0u;
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      long long v45 = 0u;
      long long v44 = 0u;
      long long v43 = 0u;
      long long v42 = 0u;
      long long v41 = 0u;
      long long v40 = 0u;
      long long v39 = 0u;
      long long v38 = 0u;
      long long v37 = 0u;
      long long v36 = 0u;
      long long v35 = 0u;
      long long v34 = 0u;
      *(_OWORD *)__src = 0u;
      value[1] = 0;
      value[2] = 0;
      value[0] = (void *)0x800000000000005;
      if (getattrlist(__s, value, __src, 0x40CuLL, 0)
        || !*(_DWORD *)&__src[8]
        || (size_t v7 = (*(_DWORD *)&__src[8] - 1), v7 >= 0x401))
      {
LABEL_10:
        unint64_t v26 = 0;
        uint64_t v8 = __s;
        while (1)
        {
          uint64_t v9 = v8;
          uint64_t v10 = v8 - 1;
          int64_t v11 = v8 - __s;
          uint64_t v12 = 2 * (void)__s - (void)v8;
          uint64_t v13 = 1;
          do
          {
            uint64_t v14 = v13;
            int64_t v15 = v11;
            uint64_t v16 = v12;
            int v18 = *++v10;
            int v17 = v18;
            ++v13;
            ++v11;
            --v12;
          }
          while (v18 == 47);
          while (v17 && v17 != 47)
          {
            int v17 = v8[v14++];
            ++v15;
            --v16;
          }
          v8[v14 - 1] = 0;
          uint64_t v8 = &v8[v14 - 1];
          if (!a3) {
            goto LABEL_27;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_13);
          if (!qword_1EB1ECFD8)
          {
            os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13);
            goto LABEL_27;
          }
          value[0] = 0;
          int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1EB1ECFD8, __s, (const void **)value);
          os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13);
          if (ValueIfPresent) {
            BOOL v20 = value[0] == 0;
          }
          else {
            BOOL v20 = 1;
          }
          if (!v20)
          {
            if (v26 > 0x20) {
              return;
            }
            __strlcpy_chk();
            size_t v22 = strlen(__src);
            goto LABEL_39;
          }
          if (ValueIfPresent)
          {
LABEL_31:
            char *v8 = v17;
            if (!v17)
            {
              size_t v7 = v27;
              uint64_t v24 = (void **)a2;
              *a2 = 1024;
              uint64_t v25 = __s;
              goto LABEL_50;
            }
          }
          else
          {
LABEL_27:
            if (lstat(__s, &v32) < 0) {
              return;
            }
            if ((v32.st_mode & 0xF000) != 0xA000)
            {
              if (a3) {
                _addToStatCache(__s, 0);
              }
              goto LABEL_31;
            }
            if (v26 > 0x20) {
              return;
            }
            ssize_t v21 = readlink(__s, __src, 0x401uLL);
            if (v21 < 0) {
              return;
            }
            size_t v22 = v21;
            __src[v21] = 0;
            if (a3) {
              _addToStatCache(__s, __src);
            }
LABEL_39:
            v9[v14 - 1] = v17;
            if (__src[0] == 47) {
              uint64_t v23 = 0;
            }
            else {
              uint64_t v23 = v9 - __s + 1;
            }
            if ((uint64_t)(v27 + v22 + v23 - v15) > 1025) {
              return;
            }
            if ((uint64_t)(v27 - v15) >= 1) {
              memmove(&__s[v22 + v23], &v9[v14 - 1], v27 - v15);
            }
            ++v26;
            memmove(&__s[v23], __src, v22);
            *(unsigned char *)(v16 + v27 + v23 + v22) = 0;
            if (__src[0] == 47) {
              uint64_t v8 = __s;
            }
            else {
              uint64_t v8 = v9;
            }
            size_t v27 = v27 + v22 + v23 - v15;
          }
        }
      }
      uint64_t v25 = &__src[*(int *)&__src[4] + 4];
      uint64_t v24 = (void **)a2;
      *a2 = 1024;
LABEL_50:
      _convertToUnichars((unsigned __int16 *)v25, v7, a1, v24);
    }
    else
    {
    }
  }
}

uint64_t _NSGetFileSystemRepresentation(unsigned char *a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    *a1 = 0;
    return 0;
  }
  if ([a3 isEqual:&stru_1ECA5C228]) {
    return 0;
  }

  return objc_msgSend(a3, "__swiftFillFileSystemRepresentationWithPointer:maxLength:", a1, a2);
}

uint64_t _NSFileSystemRepresentationWithPath(__CFString *a1)
{
  if (!a1 || [(__CFString *)a1 isEqual:&stru_1ECA5C228])
  {
    uint64_t v8 = @"*** -[NSFileManager fileSystemRepresentationWithPath:]: nil or empty path argument";
LABEL_13:
    uint64_t v9 = +[NSString stringWithFormat:v8];
    uint64_t v10 = (void *)MEMORY[0x1E4F1CA00];
    int64_t v11 = (void *)MEMORY[0x1E4F1C3C8];
LABEL_14:
    objc_exception_throw((id)[v10 exceptionWithName:*v11 reason:v9 userInfo:0]);
  }
  size_t MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(a1);
  if (MaximumSizeOfFileSystemRepresentation == -1) {
    return 0;
  }
  size_t v3 = MaximumSizeOfFileSystemRepresentation;
  uint64_t v4 = malloc_type_malloc(MaximumSizeOfFileSystemRepresentation, 0x1EAC088BuLL);
  if (!v4)
  {
    uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"*** -[NSFileManager fileSystemRepresentationWithPath:]: unable to allocate memory for length (%ld)", v3);
    uint64_t v10 = (void *)MEMORY[0x1E4F1CA00];
    int64_t v11 = (void *)MEMORY[0x1E4F1C4A0];
    goto LABEL_14;
  }
  uint64_t v5 = v4;
  if (([(__CFString *)a1 __swiftFillFileSystemRepresentationWithPointer:v4 maxLength:v3] & 1) == 0)
  {
    free(v5);
    uint64_t v8 = @"*** -[NSFileManager fileSystemRepresentationWithPath:]: Unable to form file system representation for string";
    goto LABEL_13;
  }
  int v6 = (void *)[MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v5 length:strlen((const char *)v5) + 1];

  return [v6 bytes];
}

BOOL NSString.__swiftFillFileSystemRepresentation(pointer:maxLength:)(char *a1, uint64_t a2)
{
  size_t v3 = v2;
  int v6 = (void *)MEMORY[0x185306FE0]();
  id v7 = v3;
  uint64_t v8 = (unsigned __int16 *)objc_msgSend(v7, sel__fastCharacterContents);
  if (!v8)
  {
    if (objc_msgSend(v7, sel_fastestEncoding) != (id)1
      || (id v10 = v7, (v11 = (char *)objc_msgSend(v10, sel__fastCStringContents_, 0)) == 0))
    {
LABEL_15:
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)a1, a2, 1, (uint64_t)v17, v18);
      char v20 = v19;
      swift_bridgeObjectRelease();
      BOOL v9 = (v20 & 1) == 0;
      goto LABEL_16;
    }
    uint64_t v12 = v11;
    uint64_t v13 = (char *)objc_msgSend(v10, sel_length);
    if (!v13) {
      goto LABEL_23;
    }
    if (*v12)
    {
      if (v13 == (char *)1) {
        goto LABEL_23;
      }
      if (v12[1])
      {
        uint64_t v14 = 2;
        while (v13 != (char *)v14)
        {
          if (!v12[v14++])
          {
            uint64_t v16 = v14 - 1;
            if ((uint64_t)v13 >= v16) {
              goto LABEL_19;
            }
            __break(1u);
            goto LABEL_15;
          }
        }
        goto LABEL_23;
      }
      uint64_t v16 = 1;
    }
    else
    {
      uint64_t v16 = 0;
    }
LABEL_19:
    uint64_t v22 = v16 + 1;
    if ((char *)(v16 + 1) != v13)
    {
      uint64_t v23 = &v13[~v16];
      uint64_t v24 = &v12[v22];
      while (!*v24++)
      {
        if (!--v23) {
          goto LABEL_23;
        }
      }
LABEL_3:
      BOOL v9 = 0;
      goto LABEL_16;
    }
LABEL_23:
    int64_t v26 = specialized UnsafeMutableBufferPointer.initialize<A>(from:)(v29, v12, (int64_t)v13, a1, a2);
    if ((v29[0] == v29[1] || v29[0] == 0) && v26 < a2)
    {
      a1[v26] = 0;
      BOOL v9 = 1;
      goto LABEL_16;
    }
    goto LABEL_3;
  }
  BOOL v9 = 1;
  specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(1, (uint64_t)a1, a2, 1, v8, (uint64_t)objc_msgSend(v7, sel_length));
LABEL_16:
  return v9;
}

size_t specialized UnsafeMutableBufferPointer.initialize<A>(from:)(char **a1, char *__src, int64_t a3, char *__dst, int64_t a5)
{
  int v6 = __src;
  if (!a3 || !a5)
  {
    size_t v8 = 0;
    BOOL v9 = &__src[a3];
    if (!__src) {
      BOOL v9 = 0;
    }
    goto LABEL_12;
  }
  if (a3 >= a5) {
    size_t v8 = a5;
  }
  else {
    size_t v8 = a3;
  }
  if ((v8 & 0x8000000000000000) == 0 && (&__dst[v8] <= __src || &__src[v8] <= __dst))
  {
    memcpy(__dst, __src, v8);
    BOOL v9 = &v6[a3];
    v6 += v8;
LABEL_12:
    *a1 = v6;
    a1[1] = v9;
    return v8;
  }
  size_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(int a1, uint64_t a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  int v75 = a4;
  uint64_t v92 = a2;
  int v97 = a1;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = type metadata accessor for Unicode._NFD();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v76 = &v74[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v85 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v13 = *(void *)(v85 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v85);
  uint64_t v84 = &v74[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v83 = &v74[-v16];
  uint64_t v82 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v17 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v81 = &v74[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v93 = (uint64_t *)swift_allocObject();
  v93[2] = 0;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = a3;
  uint64_t v94 = v19;
  *(void *)(v19 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v91 = (char **)(v19 + 16);
  if (a5) {
    ssize_t v21 = &a5[a6];
  }
  else {
    ssize_t v21 = 0;
  }
  uint64_t v87 = v21;
  if (v20 < 1)
  {
    uint64_t v26 = 0;
    LOBYTE(v28) = 1;
    uint64_t v29 = v93;
LABEL_58:
    char v65 = v28;
    uint64_t v66 = v92;
    uint64_t v67 = v20;
    specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v94, v92, (uint64_t)v29, v20);
    if (v7)
    {
LABEL_69:
      swift_release();
      swift_release();
      return v29;
    }
    uint64_t v68 = v67;
    if (a5 && a5 != v87)
    {
LABEL_61:
      uint64_t v29 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      unsigned char *v69 = 0;
LABEL_68:
      swift_willThrow();
      goto LABEL_69;
    }
    if ((v65 & 1) == 0)
    {
      swift_release();
      swift_release();
      uint64_t v29 = (uint64_t *)(v26 + 1);
      if (!__OFADD__(v26, 1)) {
        return v29;
      }
      __break(1u);
      goto LABEL_69;
    }
    if (v75)
    {
      uint64_t v70 = v29;
      uint64_t v71 = v29[2];
      if (v71 >= v68) {
        goto LABEL_61;
      }
      *(unsigned char *)(v66 + v71) = 0;
      swift_release();
      uint64_t v29 = (uint64_t *)(v71 + 1);
      v70[2] = (uint64_t)v29;
    }
    else
    {
      swift_release();
      uint64_t v29 = (uint64_t *)v29[2];
    }
    swift_release();
    return v29;
  }
  uint64_t v22 = 0;
  unsigned int v23 = 0;
  int v24 = 0;
  uint64_t v25 = (void (**)(unsigned char *, uint64_t))(v17 + 8);
  uint64_t v26 = 0;
  uint64_t v79 = (void (**)(unsigned char *, uint64_t))(v13 + 8);
  uint64_t v80 = v25;
  uint64_t v27 = 24;
  if ((v97 & 1) == 0) {
    uint64_t v27 = 10;
  }
  unint64_t v78 = &v100[v27];
  unint64_t v77 = &v100[v27 + 1];
  int v28 = 1;
  uint64_t v29 = v93;
  uint64_t v88 = v20;
  while (1)
  {
    int v97 = v28;
    unsigned int v98 = v23;
    unsigned __int8 v99 = v24;
    if ((_BYTE)v24)
    {
      if ((v23 & 0xF800) != 0xD800)
      {
        LOWORD(v30) = v23;
        uint64_t v59 = v20;
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        size_t result = (uint64_t *)Locale.Language.components.modify();
        char v61 = *(unsigned char *)(v60 + 4);
        if (!v61) {
          goto LABEL_79;
        }
        *(_DWORD *)uint64_t v60 = *(unsigned __int16 *)(v60 + 2);
        *(unsigned char *)(v60 + 4) = v61 - 16;
        ((void (*)(void *, void))result)(v100, 0);
        unsigned int v30 = (unsigned __int16)v30;
        LOBYTE(v28) = v97;
        unsigned int v23 = v98;
        uint64_t v33 = v99;
        uint64_t v29 = v93;
        uint64_t v20 = v59;
        goto LABEL_26;
      }
      if (!a5) {
        goto LABEL_24;
      }
      Swift::String v31 = a5;
      if (a5 == v21) {
        goto LABEL_24;
      }
    }
    else
    {
      if (!a5 || a5 == v21) {
        goto LABEL_58;
      }
      unsigned int v30 = *a5;
      Swift::String v31 = a5 + 1;
      if ((v30 & 0xF800) != 0xD800)
      {
        uint64_t v33 = 0;
        ++a5;
        goto LABEL_26;
      }
      unsigned int v23 = v23 & 0xFFFF0000 | v30;
      int v24 = 16;
      ++a5;
      if (v31 == v21) {
        goto LABEL_24;
      }
    }
    a5 = v31 + 1;
    unsigned int v23 = (*v31 << v24) | ((-65535 << v24) - 1) & v23;
    int v32 = v24 + 16;
    if ((v24 + 16) >= 0x20u) {
      goto LABEL_23;
    }
    if (a5 == v21) {
      goto LABEL_20;
    }
    a5 = v31 + 2;
    unsigned int v23 = (v31[1] << v32) | ((-65535 << v32) - 1) & v23;
    int v32 = v24 + 32;
    if (v24 < 0xE0u)
    {
LABEL_23:
      int v24 = v32;
    }
    else if (a5 == v21 {
           || (a5 = v31 + 3,
    }
               unsigned int v23 = (v31[2] << v24) | ((-65535 << v24) - 1) & v23,
               int v32 = v24 + 48,
               v24 += 48,
               v24 < 0x20u))
    {
LABEL_20:
      int v24 = v32;
      if (!(_BYTE)v32) {
        goto LABEL_58;
      }
    }
LABEL_24:
    if ((v23 & 0xFC00FC00) != 0xDC00D800)
    {
      uint64_t v29 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      char v73 = 2;
      goto LABEL_67;
    }
    uint64_t v33 = (v24 - 32);
    unsigned int v30 = (HIWORD(v23) & 0x3FF | ((v23 & 0x3FF) << 10)) + 0x10000;
    unsigned int v23 = 0;
LABEL_26:
    BOOL v34 = v30 != 0;
    if (!v30) {
      uint64_t v26 = v22;
    }
    if (!((v30 == 0) | v28 & 1))
    {
      uint64_t v29 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      char v73 = 1;
LABEL_67:
      *uint64_t v72 = v73;
      goto LABEL_68;
    }
    uint64_t v95 = v33;
    unsigned int v96 = v23;
    if (v30 < 0x80)
    {
      uint64_t v43 = v92;
      uint64_t v44 = v7;
      uint64_t v45 = v20;
      specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v94, v92, (uint64_t)v29, v20);
      if (v44) {
        goto LABEL_69;
      }
      uint64_t v46 = v29[2];
      unsigned int v23 = v96;
      int v47 = v97;
      int v24 = v95;
      if (v46 >= v45) {
        goto LABEL_61;
      }
      uint64_t v20 = v45;
      *(unsigned char *)(v43 + v46) = v30;
      v29[2] = v46 + 1;
      uint64_t v7 = 0;
      goto LABEL_9;
    }
    uint64_t v89 = a5;
    uint64_t v90 = v26;
    uint64_t v35 = v7;
    long long v36 = v81;
    Unicode.Scalar.properties.getter();
    long long v37 = v83;
    Unicode.Scalar.Properties.canonicalCombiningClass.getter();
    (*v80)(v36, v82);
    long long v38 = v84;
    static Unicode.CanonicalCombiningClass.notReordered.getter();
    LOBYTE(v36) = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
    long long v39 = (uint64_t (*)(unsigned char *, uint64_t))*v79;
    long long v40 = v38;
    uint64_t v41 = v85;
    (*v79)(v40, v85);
    size_t result = (uint64_t *)v39(v37, v41);
    if (v36)
    {
      uint64_t v29 = v93;
      size_t result = (uint64_t *)specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v94, v92, (uint64_t)v93, v88);
      uint64_t v7 = v35;
      if (v35) {
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v7 = v35;
    }
    LODWORD(v100[0]) = 2;
    uint64_t v48 = HIWORD(v30);
    v100[1] = &__CFUniCharDecimalDigitCharacterSetBitmap;
    int v101 = 15;
    uint64_t v102 = &__CFUniCharLetterCharacterSetBitmap_0;
    int v103 = 2;
    uint64_t v104 = &__CFUniCharLowercaseLetterCharacterSetBitmap_1;
    int v105 = 2;
    uint64_t v106 = &__CFUniCharUppercaseLetterCharacterSetBitmap_1;
    int v107 = 15;
    uint64_t v108 = &__CFUniCharNonBaseCharacterSetBitmap_0;
    int v109 = 3;
    uint64_t v110 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap_0;
    int v111 = 15;
    uint64_t v112 = &__CFUniCharAlphanumericCharacterSetBitmap_0;
    int v113 = 2;
    uint64_t v114 = &__CFUniCharPunctuationCharacterSetBitmap_0;
    int v115 = 15;
    unint64_t v116 = &__CFUniCharLegalCharacterSetBitmap_0;
    int v117 = 1;
    char v118 = &__CFUniCharTitlecaseLetterCharacterSetBitmap_0;
    int v119 = 2;
    uint64_t v120 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap_0;
    int v121 = 2;
    uint64_t v122 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap_0;
    int v123 = 2;
    unint64_t v124 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap_0;
    int v125 = 2;
    char v126 = &__CFUniCharStrongRightToLeftCharacterSetBitmap_0;
    a5 = v89;
    uint64_t v26 = v90;
    ssize_t v21 = v87;
    if (v48 >= *v78)
    {
LABEL_44:
      long long v54 = *v91;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v86 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        long long v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v54 + 2) + 1, 1, v54);
      }
      unint64_t v57 = *((void *)v54 + 2);
      unint64_t v56 = *((void *)v54 + 3);
      uint64_t v20 = v88;
      unsigned int v23 = v96;
      int v47 = v97;
      int v24 = v95;
      if (v57 >= v56 >> 1)
      {
        long long v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v54);
        int v24 = v95;
        unsigned int v23 = v96;
        int v47 = v97;
        uint64_t v20 = v88;
        long long v54 = v58;
      }
      *((void *)v54 + 2) = v57 + 1;
      *(_DWORD *)&v54[4 * v57 + 32] = v30;
      NSNumber *v91 = v54;
      uint64_t v7 = v86;
      uint64_t v29 = v93;
      goto LABEL_9;
    }
    if (!*v77) {
      break;
    }
    uint64_t v49 = *(void *)(*v77 + 8 * v48);
    if (!v49 || ((*(unsigned __int8 *)(v49 + ((unsigned __int16)v30 >> 3)) >> (v30 & 7)) & 1) == 0) {
      goto LABEL_44;
    }
    int v50 = (v30 & 0x3F) << 8;
    if (v30 >= 0x800)
    {
      int v62 = (v50 | (v30 >> 6) & 0x3F) << 8;
      int v63 = ((v30 >> 18) | ((v62 | (v30 >> 12) & 0x3F) << 8)) - 2122219023;
      int v64 = (v62 | (v30 >> 12)) + 8487393;
      if (v48) {
        unsigned int v51 = v63;
      }
      else {
        unsigned int v51 = v64;
      }
    }
    else
    {
      unsigned int v51 = (v50 | (v30 >> 6)) + 33217;
    }
    v100[0] = (v51 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v51) >> 3))));
    uint64_t v52 = MEMORY[0x185302020](v100);
    long long v53 = v76;
    MEMORY[0x1853020B0](v52);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v53);
    uint64_t v29 = v93;
    uint64_t v20 = v88;
    unsigned int v23 = v96;
    int v47 = v97;
    int v24 = v95;
LABEL_9:
    int v28 = v34 & v47;
    uint64_t v22 = v29[2];
    if (v22 >= v20) {
      goto LABEL_58;
    }
  }
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (uint64_t *)(result + 16);
  if (*(void *)(*(void *)(result + 16) + 16))
  {
    specialized MutableCollection<>.sort(by:)((char **)(result + 16));
    size_t result = *v4;
    uint64_t v8 = *(void *)(*v4 + 16);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result + 32;
      while (1)
      {
        unsigned int v11 = *(_DWORD *)(v10 + 4 * v9);
        if (v11 > 0x7F)
        {
          int v19 = (*(_DWORD *)(v10 + 4 * v9) & 0x3F) << 8;
          if (v11 >= 0x800)
          {
            unsigned int v20 = v11 >> 12;
            int v21 = (v19 | (v11 >> 6) & 0x3F) << 8;
            unsigned int v22 = HIWORD(v11);
            size_t result = (v21 | (v11 >> 12) & 0x3F) << 8;
            int v23 = (result | (v11 >> 18)) - 2122219023;
            int v24 = (v21 | v20) + 8487393;
            unsigned int v12 = v22 ? v23 : v24;
          }
          else
          {
            unsigned int v12 = (v19 | (v11 >> 6)) + 33217;
          }
        }
        else
        {
          unsigned int v12 = v11 + 1;
        }
        if (!a2) {
          break;
        }
        uint64_t v13 = *(void *)(a3 + 16);
        uint64_t v14 = a4 - v13;
        if (__OFSUB__(a4, v13))
        {
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          break;
        }
        if (v14 < 4 - (__clz(v12) >> 3))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
          lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
          swift_allocError();
          *uint64_t v25 = 0;
          return swift_willThrow();
        }
        if (!v14) {
          goto LABEL_36;
        }
        size_t result = v12 >> 8;
        *(unsigned char *)(a2 + v13) = v12 - 1;
        if (v14 == 1)
        {
LABEL_15:
          if (result) {
            goto LABEL_36;
          }
          BOOL v17 = __OFADD__(v13, v14);
          uint64_t v18 = a4;
          if (v17) {
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v15 = 1;
          while (1)
          {
            if (v14 == v15)
            {
              __break(1u);
              goto LABEL_33;
            }
            if (v12 < 0x100) {
              break;
            }
            unsigned int v16 = result;
            *(unsigned char *)(a2 + v13 + v15) = result - 1;
            size_t result = result >> 8;
            ++v15;
            unsigned int v12 = v16;
            if (v14 == v15) {
              goto LABEL_15;
            }
          }
          BOOL v17 = __OFADD__(v13, v15);
          uint64_t v18 = v13 + v15;
          if (v17) {
            goto LABEL_34;
          }
        }
        ++v9;
        *(void *)(a3 + 16) = v18;
        if (v9 == v8) {
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
    }
    else
    {
LABEL_28:
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *v4;
      if (isUniquelyReferenced_nonNull_native)
      {
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v27 + 16));
      }
      else
      {
        *uint64_t v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v27 + 24) >> 1);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned char *v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;

  uint64_t v4 = (uint64_t *)(result + 16);
  if (*(void *)(*(void *)(result + 16) + 16))
  {
    specialized MutableCollection<>.sort(by:)((char **)(result + 16));
    size_t result = *v4;
    uint64_t v8 = *(void *)(*v4 + 16);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result + 32;
      while (1)
      {
        unsigned int v11 = *(_DWORD *)(v10 + 4 * v9);
        if (v11 > 0x7F)
        {
          int v19 = (*(_DWORD *)(v10 + 4 * v9) & 0x3F) << 8;
          if (v11 >= 0x800)
          {
            unsigned int v20 = v11 >> 12;
            int v21 = (v19 | (v11 >> 6) & 0x3F) << 8;
            unsigned int v22 = HIWORD(v11);
            size_t result = (v21 | (v11 >> 12) & 0x3F) << 8;
            int v23 = (result | (v11 >> 18)) - 2122219023;
            int v24 = (v21 | v20) + 8487393;
            unsigned int v12 = v22 ? v23 : v24;
          }
          else
          {
            unsigned int v12 = (v19 | (v11 >> 6)) + 33217;
          }
        }
        else
        {
          unsigned int v12 = v11 + 1;
        }
        if (!a2) {
          break;
        }
        uint64_t v13 = *(void *)(a3 + 16);
        uint64_t v14 = a4 - v13;
        if (__OFSUB__(a4, v13))
        {
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          break;
        }
        if (v14 < 4 - (__clz(v12) >> 3))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
          lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
          swift_allocError();
          *uint64_t v25 = 0;
          return swift_willThrow();
        }
        if (!v14) {
          goto LABEL_34;
        }
        uint64_t v15 = 0;
        ++v9;
        size_t result = a2 + v13;
        do
        {
          if (v14 == v15)
          {
            __break(1u);
            goto LABEL_31;
          }
          unsigned int v16 = v12;
          if (!v12)
          {
            uint64_t v14 = v15;
            goto LABEL_17;
          }
          *(unsigned char *)(result + v15) = v12 - 1;
          v12 >>= 8;
          ++v15;
        }
        while (v14 != v15);
        if (v16 > 0xFF) {
          goto LABEL_34;
        }
LABEL_17:
        BOOL v17 = __OFADD__(v13, v14);
        uint64_t v18 = v13 + v14;
        if (v17) {
          goto LABEL_32;
        }
        *(void *)(a3 + 16) = v18;
        if (v9 == v8) {
          goto LABEL_26;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
    }
    else
    {
LABEL_26:
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *v4;
      if (isUniquelyReferenced_nonNull_native)
      {
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v27 + 16));
      }
      else
      {
        *uint64_t v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v27 + 24) >> 1);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t String._decomposed(_:into:nullTerminated:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  unsigned int v11 = a1 & 1;
  swift_bridgeObjectRetain();
  if ((a6 & 0x1000000000000000) != 0)
  {
    a5 = static String._copying(_:)();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    a6 = v16;
    if ((v16 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v13 = HIBYTE(a6) & 0xF;
    v20[0] = a5;
    v20[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    int v14 = a4 & 1;
    unsigned int v12 = (unsigned __int8 *)v20;
    goto LABEL_8;
  }
  if ((a6 & 0x2000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((a5 & 0x1000000000000000) != 0)
  {
    unsigned int v12 = (unsigned __int8 *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v13 = a5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unsigned int v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    uint64_t v13 = v19;
  }
  int v14 = a4 & 1;
LABEL_8:
  uint64_t v17 = specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v11, a2, a3, v14, v12, v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(unsigned int a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  int v77 = a4;
  uint64_t v95 = a2;
  unsigned int v99 = a1;
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = type metadata accessor for Unicode._NFD();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v79 = &v76[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v87 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v13 = *(void *)(v87 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v87);
  uint64_t v86 = &v76[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v85 = &v76[-v16];
  uint64_t v84 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v17 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  uint64_t v83 = &v76[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned int v96 = (uint64_t *)swift_allocObject();
  v96[2] = 0;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = a3;
  uint64_t v93 = v19;
  *(void *)(v19 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v94 = (char **)(v19 + 16);
  if (a5) {
    int v21 = (char *)&a5[a6];
  }
  else {
    int v21 = 0;
  }
  if (a3 < 1)
  {
    uint64_t v22 = 0;
    LOBYTE(v27) = 1;
    uint64_t v28 = v93;
    uint64_t v29 = v96;
LABEL_9:
    uint64_t v30 = v22;
    uint64_t v31 = v20;
    specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v28, v95, (uint64_t)v29, v20);
    if (!v7)
    {
      if (a5 && a5 != (unsigned __int8 *)v21)
      {
LABEL_12:
        uint64_t v29 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        swift_allocError();
        *int v32 = 0;
LABEL_91:
        swift_willThrow();
        goto LABEL_92;
      }
      if (v27)
      {
        if (v77)
        {
          char v73 = v29;
          uint64_t v74 = v29[2];
          if (v74 < v31)
          {
            *(unsigned char *)(v95 + v74) = 0;
            swift_release();
            uint64_t v29 = (uint64_t *)(v74 + 1);
            v73[2] = (uint64_t)v29;
            goto LABEL_93;
          }
          goto LABEL_12;
        }
        swift_release();
        uint64_t v29 = (uint64_t *)v29[2];
LABEL_93:
        swift_release();
        return (uint64_t)v29;
      }
      swift_release();
      swift_release();
      uint64_t v29 = (uint64_t *)(v30 + 1);
      if (!__OFADD__(v30, 1)) {
        return (uint64_t)v29;
      }
      __break(1u);
    }
LABEL_92:
    swift_release();
    goto LABEL_93;
  }
  uint64_t v22 = 0;
  unsigned int v23 = 0;
  unsigned __int8 v24 = 0;
  uint64_t v25 = 0;
  uint64_t v81 = (void (**)(unsigned char *, uint64_t))(v13 + 8);
  uint64_t v82 = (void (**)(unsigned char *, uint64_t))(v17 + 8);
  uint64_t v26 = 24;
  if ((v99 & 1) == 0) {
    uint64_t v26 = 10;
  }
  uint64_t v80 = &v102[v26];
  unint64_t v78 = &v102[v26 + 1];
  int v27 = 1;
  uint64_t v28 = v93;
  uint64_t v29 = v96;
  uint64_t v91 = v20;
  uint64_t v92 = v21;
  while (1)
  {
    unsigned int v100 = v23;
    unsigned __int8 v101 = v24;
    if (v24)
    {
      if ((v23 & 0x80) == 0)
      {
        unsigned int v99 = v23;
        lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
        int v66 = v27;
        uint64_t v67 = v22;
        uint64_t v68 = (void (*)(void *, void))Locale.Language.components.modify();
        specialized RangeReplaceableCollection.remove(at:)(0);
        uint64_t v29 = v96;
        v68(v102, 0);
        uint64_t v22 = v67;
        int v27 = v66;
        uint64_t v20 = v91;
        unsigned int v41 = (v99 + 1);
        goto LABEL_49;
      }
      if (!a5) {
        goto LABEL_37;
      }
      long long v39 = a5;
      if (a5 == (unsigned __int8 *)v21) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!a5 || a5 == (unsigned __int8 *)v21) {
        goto LABEL_9;
      }
      int v38 = (char)*a5++;
      long long v39 = a5;
      int v40 = v38;
      if ((v38 & 0x80000000) == 0)
      {
        unsigned int v41 = v40 + 1;
        goto LABEL_49;
      }
      unsigned int v23 = v23 & 0xFFFFFF00 | v40;
      unsigned __int8 v24 = 8;
      if (a5 == (unsigned __int8 *)v21) {
        goto LABEL_37;
      }
    }
    a5 = v39 + 1;
    unsigned int v23 = ((-255 << v24) - 1) & v23 | (*v39 << v24);
    unsigned __int8 v42 = v24 + 8;
    if ((v24 + 8) < 0x20u)
    {
      if (a5 == (unsigned __int8 *)v21) {
        goto LABEL_33;
      }
      a5 = v39 + 2;
      unsigned int v23 = ((-255 << v42) - 1) & v23 | (v39[1] << v42);
      unsigned __int8 v42 = v24 + 16;
      if ((v24 + 16) <= 0x1Fu)
      {
        if (a5 == (unsigned __int8 *)v21) {
          goto LABEL_33;
        }
        a5 = v39 + 3;
        unsigned int v23 = ((-255 << v42) - 1) & v23 | (v39[2] << v42);
        unsigned __int8 v42 = v24 + 24;
        if ((v24 + 24) <= 0x1Fu)
        {
          if (a5 == (unsigned __int8 *)v21) {
            goto LABEL_33;
          }
          a5 = v39 + 4;
          unsigned int v23 = ((-255 << v42) - 1) & v23 | (v39[3] << v42);
          unsigned __int8 v42 = v24 + 32;
          if (v24 >= 0xE0u)
          {
            if (a5 == (unsigned __int8 *)v21
              || (unsigned int v23 = ((-255 << v24) - 1) & v23 | (v39[4] << v24), v42 = v24 + 40, (v24 + 40) < 0x20u))
            {
LABEL_33:
              unsigned __int8 v24 = v42;
              a5 = (unsigned __int8 *)v21;
              if (!v42)
              {
                a5 = (unsigned __int8 *)v21;
                goto LABEL_9;
              }
              goto LABEL_37;
            }
            a5 = v39 + 5;
          }
        }
      }
    }
    unsigned __int8 v24 = v42;
LABEL_37:
    if ((v23 & 0xC0E0) == 0x80C0)
    {
      if ((v23 & 0x1E) == 0) {
        goto LABEL_84;
      }
      unsigned int v43 = 16;
    }
    else if ((v23 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v23 & 0x200F) == 0 || (v23 & 0x200F) == 0x200D) {
        goto LABEL_84;
      }
      unsigned int v43 = 24;
    }
    else
    {
      if ((v23 & 0xC0C0C0F8) != 0x808080F0 || (v23 & 0x3007) == 0 || __rev16(v23 & 0x3007) > 0x400)
      {
LABEL_84:
        Unicode.UTF8.ForwardParser._invalidLength()();
        uint64_t v29 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        swift_allocError();
        char v72 = 2;
LABEL_90:
        *uint64_t v71 = v72;
        goto LABEL_91;
      }
      unsigned int v43 = 32;
    }
    unsigned int v100 = (unint64_t)v23 >> v43;
    unsigned __int8 v101 = v24 - v43;
    unsigned int v41 = ((1 << (v43 >> 1) << (v43 >> 1)) - 1) & (v23 + 16843009);
LABEL_49:
    uint64_t v44 = 4 - (__clz(v41) >> 3);
    switch(v44)
    {
      case 1:
        unsigned int v45 = v41 - 1;
        break;
      case 2:
        unsigned int v45 = (((v41 - 257) & 0x1F) << 6) | ((v41 - 257) >> 8) & 0x3F;
        break;
      case 3:
        unsigned int v45 = ((v41 - 65793) >> 2) & 0xFC0 | ((v41 - 65793) >> 16) & 0x3F | (((v41 - 65793) & 0xF) << 12);
        break;
      default:
        unsigned int v45 = ((v41 - 16843009) >> 10) & 0xFC0 | ((v41 - 16843009) >> 24) & 0x3F | ((((v41 - 16843009) >> 8) & 0x3F) << 12) & 0xFFE3FFFF | (((v41 - 16843009) & 7) << 18);
        break;
    }
    if (!v45) {
      uint64_t v22 = v25;
    }
    if (!((v45 == 0) | v27 & 1))
    {
      uint64_t v29 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
      swift_allocError();
      char v72 = 1;
      goto LABEL_90;
    }
    BOOL v97 = v45 != 0;
    unsigned int v99 = v100;
    uint64_t v98 = v101;
    if (v45 < 0x80)
    {
      uint64_t v55 = v7;
      uint64_t v56 = v28;
      uint64_t v57 = v28;
      uint64_t v58 = v95;
      uint64_t v59 = v20;
      specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v57, v95, (uint64_t)v29, v20);
      if (v55) {
        goto LABEL_92;
      }
      uint64_t v60 = v29[2];
      if (v60 >= v59)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        uint64_t v29 = (uint64_t *)swift_allocError();
        unsigned char *v75 = 0;
        swift_willThrow();
        swift_release();
        goto LABEL_93;
      }
      uint64_t v20 = v59;
      *(unsigned char *)(v58 + v60) = v45;
      v29[2] = v60 + 1;
      uint64_t v28 = v56;
      uint64_t v7 = 0;
      goto LABEL_16;
    }
    int v88 = v27;
    uint64_t v89 = a5;
    uint64_t v90 = v22;
    uint64_t v46 = v7;
    uint64_t v47 = v28;
    uint64_t v48 = v83;
    Unicode.Scalar.properties.getter();
    uint64_t v49 = v85;
    Unicode.Scalar.Properties.canonicalCombiningClass.getter();
    (*v82)(v48, v84);
    int v50 = v86;
    static Unicode.CanonicalCombiningClass.notReordered.getter();
    LOBYTE(v48) = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
    unsigned int v51 = (uint64_t (*)(unsigned char *, uint64_t))*v81;
    uint64_t v52 = v50;
    uint64_t v53 = v87;
    (*v81)(v52, v87);
    uint64_t result = v51(v49, v53);
    if (v48)
    {
      uint64_t v28 = v47;
      uint64_t v29 = v96;
      uint64_t result = specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v47, v95, (uint64_t)v96, v91);
      uint64_t v7 = v46;
      if (v46) {
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v28 = v47;
      uint64_t v7 = v46;
    }
    LODWORD(v102[0]) = 2;
    v102[1] = &__CFUniCharDecimalDigitCharacterSetBitmap;
    int v103 = 15;
    uint64_t v104 = &__CFUniCharLetterCharacterSetBitmap_0;
    int v105 = 2;
    uint64_t v106 = &__CFUniCharLowercaseLetterCharacterSetBitmap_1;
    int v107 = 2;
    uint64_t v108 = &__CFUniCharUppercaseLetterCharacterSetBitmap_1;
    int v109 = 15;
    uint64_t v110 = &__CFUniCharNonBaseCharacterSetBitmap_0;
    int v111 = 3;
    uint64_t v112 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap_0;
    int v113 = 15;
    uint64_t v114 = &__CFUniCharAlphanumericCharacterSetBitmap_0;
    int v115 = 2;
    unint64_t v116 = &__CFUniCharPunctuationCharacterSetBitmap_0;
    int v117 = 15;
    char v118 = &__CFUniCharLegalCharacterSetBitmap_0;
    int v119 = 1;
    uint64_t v120 = &__CFUniCharTitlecaseLetterCharacterSetBitmap_0;
    int v121 = 2;
    uint64_t v122 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap_0;
    int v123 = 2;
    unint64_t v124 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap_0;
    int v125 = 2;
    char v126 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap_0;
    int v127 = 2;
    uint64_t v128 = &__CFUniCharStrongRightToLeftCharacterSetBitmap_0;
    a5 = v89;
    uint64_t v22 = v90;
    int v27 = v88;
    if (BYTE2(v45) >= *v80)
    {
LABEL_71:
      int v62 = *v94;
      uint64_t v63 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v62 + 2) + 1, 1, v62);
      }
      unint64_t v65 = *((void *)v62 + 2);
      unint64_t v64 = *((void *)v62 + 3);
      uint64_t v20 = v91;
      unsigned int v23 = v99;
      unsigned __int8 v24 = v98;
      if (v65 >= v64 >> 1)
      {
        uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v62);
        unsigned __int8 v24 = v98;
        unsigned int v23 = v99;
        uint64_t v20 = v91;
        int v62 = v69;
      }
      *((void *)v62 + 2) = v65 + 1;
      *(_DWORD *)&v62[4 * v65 + 32] = v45;
      *uint64_t v94 = v62;
      uint64_t v7 = v63;
      int v21 = v92;
      uint64_t v28 = v93;
      uint64_t v29 = v96;
      goto LABEL_17;
    }
    if (!*v78) {
      break;
    }
    uint64_t v61 = *(void *)(*v78 + 8 * BYTE2(v45));
    if (!v61 || ((*(unsigned __int8 *)(v61 + ((unsigned __int16)v45 >> 3)) >> (v45 & 7)) & 1) == 0) {
      goto LABEL_71;
    }
    int v33 = (v45 & 0x3F) << 8;
    if (v45 >= 0x800)
    {
      int v70 = (v33 | (v45 >> 6) & 0x3F) << 8;
      if (HIWORD(v45))
      {
        int v34 = ((v70 | (v45 >> 12) & 0x3F) << 8) | (v45 >> 18);
        int v35 = -2122219023;
      }
      else
      {
        int v34 = v70 | (v45 >> 12);
        int v35 = 8487393;
      }
    }
    else
    {
      int v34 = v33 | (v45 >> 6);
      int v35 = 33217;
    }
    v102[0] = ((v34 + v35) + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8
                                                                          * (4 - (__clz(v34 + v35) >> 3))));
    uint64_t v36 = MEMORY[0x185302020](v102);
    long long v37 = v79;
    MEMORY[0x1853020B0](v36);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v37);
    uint64_t v29 = v96;
    uint64_t v20 = v91;
LABEL_16:
    int v21 = v92;
    unsigned int v23 = v99;
    unsigned __int8 v24 = v98;
LABEL_17:
    v27 &= v97;
    uint64_t v25 = v29[2];
    if (v25 >= v20) {
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x185302020);
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x185302020](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x185302020]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  int64_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 31;
  }
  v4[2] = a1;
  v4[3] = v6 & 0xFFFFFFFFFFFFFFFELL;
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 29;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 2);
  return v4;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void _convertToUnichars(unsigned __int16 *a1, size_t a2, void *a3, void **a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  *(_OWORD *)__src = 0u;
  if (_NSConvertToASCIIorUnicode2(a1, a2, 4uLL, 1, (uint64_t)&v7, 0) && (uint64_t v6 = __src[1]) != 0)
  {
    if ((uint64_t)*a4 < (uint64_t)__src[1]) {
      uint64_t v6 = *a4;
    }
    *a4 = v6;
    if ((_BYTE)v7) {
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"_convertToUnichars: Didn't get Unicode" userInfo:0]);
    }
    memmove(a3, __src[0], 2 * (void)v6);
    if (BYTE1(v7)) {
      free(__src[0]);
    }
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t _hashCString2(char *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  size_t v2 = strlen(a1);
  if (_NSConvertToASCIIorUnicode2((unsigned __int16 *)a1, v2, 4uLL, 1, (uint64_t)&v5, 0)
    && v6[1]
    && !(_BYTE)v5)
  {
    uint64_t v3 = CFStringHashCharacters();
    if (BYTE1(v5)) {
      free(v6[0]);
    }
  }
  else
  {
    strlen(a1);
    return CFStringHashCString();
  }
  return v3;
}

uint64_t _NSConvertToASCIIorUnicode2(unsigned __int16 *a1, size_t size, unint64_t encoding, char a4, uint64_t a5, malloc_zone_t *zone)
{
  *(unsigned char *)a5 = a4 ^ 1;
  *(unsigned char *)(a5 + 1) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 24) = 0;
  if (!size) {
    return 1;
  }
  uint64_t v6 = zone;
  unsigned __int8 v9 = a1;
  if (encoding == 10 || !encoding)
  {
    int v10 = *a1;
    BOOL v11 = v10 == 65534 || v10 == 65279;
    if (v11) {
      long long v12 = a1 + 1;
    }
    else {
      long long v12 = a1;
    }
    if (v11) {
      int v13 = *a1;
    }
    else {
      int v13 = 0;
    }
    size_t v14 = (size >> 1) - (v13 != 0);
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 24) = v14;
    if (v14 <= 0x1F8)
    {
      long long v15 = (_WORD *)(a5 + 32);
    }
    else
    {
      if (!zone) {
        uint64_t v6 = malloc_default_zone();
      }
      long long v15 = malloc_type_zone_malloc(v6, 2 * v14, 0x4A6F13AEuLL);
    }
    *(void *)(a5 + 16) = v15;
    *(unsigned char *)(a5 + 1) = v14 > 0x1F8;
    if (v13 == 65279)
    {
      memmove(v15, v12, 2 * v14);
    }
    else
    {
      for (; v14; --v14)
      {
        unsigned int v17 = *v12++;
        *v15++ = bswap32(v17) >> 16;
      }
    }
    return 1;
  }
  if (size >= 3
    && encoding == 4
    && *(unsigned __int8 *)a1 == 239
    && *((unsigned __int8 *)a1 + 1) == 187
    && *((unsigned __int8 *)a1 + 2) == 191)
  {
    if (size != 3)
    {
      unsigned __int8 v9 = (_BYTE)a1 + 3;
      goto LABEL_24;
    }
    return 1;
  }
LABEL_24:
  CFStringEncoding v16 = CFStringConvertNSStringEncodingToEncoding(encoding);
  if (v16 == -1)
  {
    if (encoding == 134217984)
    {
      if (_CFExecutableLinkedOnOrAfter()) {
        NSLog((NSString *)@"Incorrect NSStringEncoding value 0x%04lX detected. Assuming NSASCIIStringEncoding. Will stop this compatibility mapping behavior in the near future.", 134217984);
      }
      CFStringEncoding v16 = 1536;
    }
    else
    {
      CFStringEncoding v16 = -1;
    }
  }
  int IsEncodingAvailable = CFStringIsEncodingAvailable(v16);
  if (IsEncodingAvailable)
  {
    int v20 = __CFStringDecodeByteStream3();
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 24) = 0;
    unsigned __int8 v9 = v20 != 0;
    if (v20)
    {
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = a5 + 32;
      *(unsigned char *)(a5 + 1) = 0;
      memmove((void *)(a5 + 32), 0, 0);
    }
    else
    {
      *(unsigned char *)(a5 + 1) = 0;
      *(void *)(a5 + 24) = 0;
    }
  }
  return (IsEncodingAvailable != 0) & v9;
}

void _addToStatCache(const char *a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  CFDictionaryKeyCallBacks v7 = *(CFDictionaryKeyCallBacks *)byte_1ECA5C0B0;
  uint64_t v4 = strdup(a1);
  long long v5 = v4;
  if (a1 != a2)
  {
    if (a2) {
      long long v5 = strdup(a2);
    }
    else {
      long long v5 = 0;
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_13);
  CFDictionaryRef v6 = (const __CFDictionary *)qword_1EB1ECFD8;
  if (!qword_1EB1ECFD8)
  {
    CFDictionaryRef v6 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, &v7, 0);
    qword_1EB1ECFD8 = (uint64_t)v6;
  }
  if (CFDictionaryContainsKey(v6, v4))
  {
    free(v4);
    if (v4 != v5) {
      free(v5);
    }
  }
  else
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EB1ECFD8, v4, v5);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13);
}

void service_connection_handler_make_connection(void *a1, _xpc_connection_s *a2)
{
  uint64_t v4 = (void *)MEMORY[0x185308110]();
  long long v5 = (void *)-[NSXPCConnection _initWithPeerConnection:name:options:]([NSXPCConnection alloc], a2, (__CFString *)[a1 serviceName]);
  [a1 delegate];
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "delegate"), "listener:shouldAcceptNewConnection:", a1, v5) & 1) == 0)
  {
    [v5 invalidate];
  }
}

void Measurement<>.FormatStyle.UnitWidth.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t destroy for _PlistKeyedDecodingContainer()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t type metadata instantiation function for Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t URLParseInfo.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

void sub_1817BB56C(_Unwind_Exception *a1)
{
  free(v1);
  free(v2);
  _Unwind_Resume(a1);
}

void sub_1817BB92C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v3 = objc_begin_catch(exception_object);
      objc_exception_throw(v3);
    }
    objc_begin_catch(exception_object);
    free(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1817BBF50()
{
}

void sub_1817BBFCC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1817BBFA8);
  }
  JUMPOUT(0x1817BBFFCLL);
}

id coderAllocateClassForUnarchival(void *a1, objc_class *a2, unsigned char *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *a3 = 1;
  if ([a1 requiresSecureCoding])
  {
    if (qword_1EB1ECD28 != -1) {
      dispatch_once(&qword_1EB1ECD28, &__block_literal_global_747);
    }
    *(void *)buf = sel_classForKeyedArchiver;
    *(void *)&buf[8] = sel_classForArchiver;
    *(void *)&buf[16] = sel_classForCoder;
    Superclass = class_getSuperclass(a2);
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(const char **)&buf[v7 * 4];
      MethodIMP Implementation = class_getMethodImplementation(a2, v8);
      if (MethodImplementation != *(void (**)(void))&_MergedGlobals_41[v7 + 8]._os_unfair_lock_opaque) {
        break;
      }
      v7 += 2;
      if (v7 == 6) {
        goto LABEL_11;
      }
    }
    if (Superclass != (objc_class *)MEMORY[0x1E4FBA8A8]
      && MethodImplementation == class_getMethodImplementation(Superclass, v8))
    {
      *a3 = 0;
    }
  }
LABEL_11:
  if (*a3)
  {
    return objc_allocWithZone(a2);
  }
  else
  {
    BOOL v11 = _NSOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = a2;
      _os_log_fault_impl(&dword_181795000, v11, OS_LOG_TYPE_FAULT, "Class '%{public}@' unexpectedly found in possibly-altered archive. -[%{public}@ classForCoder] is inherited from a superclass and should likely have replaced this object at encode time. To be allowed in archives, it should override -classForCoder itself.", buf, 0x16u);
    }
    objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@: class '%@' unexpectedly found in possibly-altered archive. -[%@ classForCoder] is inherited from a superclass and should likely have replaced this object at encode time. To be allowed in archives, it should override -classForCoder itself", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), a2, a2);
    return 0;
  }
}

void sub_1817BCA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t _getUIDFromData(void *a1, unsigned char *a2, unint64_t a3, unint64_t *a4)
{
  char v4 = *a2;
  if ((*a2 & 0xF0) != 0x80) {
    return 0;
  }
  int v5 = v4 & 0xF;
  uint64_t v6 = (v4 & 0xF) + 2;
  if (__CFADD__(a2, v6) || (unint64_t)&a2[v6] > a3)
  {
    objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"overflow while attempting to read %lu bytes (uid)", v6);
    return 0;
  }
  uint64_t v7 = a2 + 1;
  switch(v5)
  {
    case 0:
      unint64_t v8 = *v7;
      break;
    case 1:
      unint64_t v8 = __rev16(*(unsigned __int16 *)(a2 + 1));
      break;
    case 3:
      unint64_t v8 = bswap32(*(_DWORD *)(a2 + 1));
      break;
    case 7:
      unint64_t v8 = bswap64(*(void *)(a2 + 1));
      break;
    default:
      unint64_t v8 = 0;
      uint64_t v10 = (v5 + 1);
      do
      {
        unsigned int v11 = *v7++;
        unint64_t v8 = v11 | (v8 << 8);
        --v10;
      }
      while (v10);
      break;
  }
  *a4 = v8;
  return 1;
}

BOOL _decodeObjectBinary(uint64_t a1, unsigned int a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (_decodeObjectReference(a1, 200, a3, a2, a4)) {
    return *a4 != 0;
  }
  uint64_t v39 = 0;
  CFTypeRef cf = 0;
  if (!__CFBinaryPlistGetOffsetForValueFromArray2()
    || (uint64_t v9 = *(void *)(a1 + 104), v10 = (unsigned __int8 *)(v9 + v39), __CFADD__(v9, v39))
    || v9 + *(void *)(a1 + 112) - 1 <= (unint64_t)v10)
  {
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@: object reference beyond limit or other data corruption", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
    goto LABEL_9;
  }
  unsigned int v11 = *v10 >> 4;
  BOOL v12 = v11 >= 5;
  unsigned int v13 = v11 - 5;
  if (v12 && v13 >= 2)
  {
    uint64_t v38 = 0;
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3()
      || (uint64_t v14 = *(void *)(a1 + 104), __CFADD__(v14, v38))
      || (unint64_t v15 = v14 + *(void *)(a1 + 112) - 1, v15 < v14 + v38))
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@: missing class information for object", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    unint64_t v37 = 0;
    _getUIDFromData((void *)a1, (unsigned char *)(v14 + v38), v15, &v37);
    if (!v37)
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@: null class for object", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if (!__CFBinaryPlistGetOffsetForValueFromArray2()
      || (unint64_t)(*(void *)(a1 + 104) + *(void *)(a1 + 112) - 1) < *(void *)(a1 + 104))
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@: bogus class information for object", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3()
      || (unint64_t)(*(void *)(a1 + 104) + *(void *)(a1 + 112) - 1) < *(void *)(a1 + 104))
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@: missing class name for class", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if ((__CFBinaryPlistCreateObject() & 1) == 0)
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@: corrupt data or object is too large to decode", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if ((_NSIsNSString() & 1) == 0)
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%@: cannot decode object of class (%@) for key (%@); the archive appears to be corrupt (non-string class name)",
        _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
        0,
        a3);
      goto LABEL_9;
    }
    __CFBinaryPlistGetOffsetForValueFromDictionary3();
    uint64_t v34 = *(void *)(a1 + 128);
    __CFBinaryPlistGetOffsetForValueFromDictionary3();
    CFStringEncoding v16 = (objc_class *)objc_msgSend((id)a1, "classForClassName:", 0, v34);
    if (v16) {
      goto LABEL_33;
    }
    CFStringEncoding v16 = (objc_class *)[(id)objc_opt_class() classForClassName:0];
    if (v16) {
      goto LABEL_33;
    }
    CFStringEncoding v16 = NSClassFromString(0);
    if (v16) {
      goto LABEL_33;
    }
    CFTypeRef v41 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v36 = [0 countByEnumeratingWithState:&v43 objects:value count:16];
    if (v36)
    {
      uint64_t v35 = *(void *)v44;
      while (2)
      {
        for (uint64_t i = 0; i != v36; ++i)
        {
          if (*(void *)v44 != v35) {
            objc_enumerationMutation(0);
          }
          long long v23 = *(NSString **)(*((void *)&v43 + 1) + 8 * i);
          if ((_NSIsNSString() & 1) == 0)
          {
            int v20 = +[NSString stringWithFormat:@"%@: data is corrupt or object is too large to decode", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_)];
            CFRelease(v41);
            goto LABEL_43;
          }
          CFStringEncoding v16 = NSClassFromString(v23);
          if (v16) {
            goto LABEL_63;
          }
        }
        uint64_t v36 = [0 countByEnumeratingWithState:&v43 objects:value count:16];
        if (v36) {
          continue;
        }
        break;
      }
    }
    CFStringEncoding v16 = 0;
LABEL_63:
    if (v41) {
      CFRelease(v41);
    }
    if (v16)
    {
LABEL_33:
      if (([*(id *)(a1 + 120) classNameAllowed:v16] & 1) == 0)
      {
        long long v18 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
        long long v19 = +[NSString stringWithFormat:@"%@: data to unarchive contains class (%@) which has not been allowed", v18, NSStringFromClass(v16)];
        goto LABEL_42;
      }
    }
    else
    {
      if (!*(void *)(a1 + 8) || (objc_opt_respondsToSelector() & 1) == 0)
      {
        CFStringEncoding v16 = 0;
        goto LABEL_35;
      }
      CFTypeRef v41 = 0;
      CFStringEncoding v16 = (objc_class *)[*(id *)(a1 + 8) unarchiver:a1 cannotDecodeObjectOfClassName:0 originalClasses:0];
      if (v41) {
        CFRelease(v41);
      }
      if (!v16) {
        goto LABEL_35;
      }
    }
    if (_coderValidateClassValidToMessageForUnarchiving(v16))
    {
LABEL_35:
      unsigned int v17 = (objc_class *)[(objc_class *)v16 classForKeyedUnarchiver];
      if (v17)
      {
        if ([(id)a1 requiresSecureCoding])
        {
          if (a3)
          {
            if (([(id)a1 validateAllowedClass:v17 forKey:a3] & 1) == 0) {
              goto LABEL_9;
            }
          }
          else
          {
            [(id)a1 validateClassSupportsSecureCoding:v17];
          }
        }
        _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v17, 0);
        uint64_t v21 = *(void *)(a1 + 120);
        if (-[NSCoder _isPossibleNestedCollectionClass:](a1, v17) && *(unsigned char *)(v21 + 40))
        {
          if (*(unsigned char *)(v21 + 41))
          {
            *(_WORD *)(v21 + 40) = 0;
            objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%1$@: value for key (%2$@) contains too many nested (%3$@)s", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), a3, 0);
            goto LABEL_9;
          }
          *(unsigned char *)(v21 + 41) = 1;
        }
        LOBYTE(v43) = 1;
        id v24 = coderAllocateClassForUnarchival((void *)a1, v17, &v43);
        CFTypeRef cf = v24;
        if ((_BYTE)v43)
        {
          int v25 = *(_DWORD *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = 0;
          uint64_t v26 = *(void *)(a1 + 72);
          uint64_t v27 = *(void *)(v26 + 32);
          *(void *)(v26 + 32) = v39;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)a2, v24);
          long long v28 = objc_msgSend((id)objc_msgSend((id)cf, "initWithCoder:", a1), "awakeAfterUsingCoder:", a1);
          long long v29 = v28;
          *(_DWORD *)(*(void *)(a1 + 120) + 16) = a2;
          *(void *)(*(void *)(a1 + 72) + 32) = v27;
          *(_DWORD *)(a1 + 64) = v25;
          CFTypeRef cf = v28;
          if (v28)
          {
            value[0] = v28;
            CFDictionaryRef v30 = *(const __CFDictionary **)(a1 + 32);
            if (v30 && CFDictionaryGetValueIfPresent(v30, v29, (const void **)value))
            {
              if (value[0] != v29)
              {

                id v31 = value[0];
              }
            }
            else
            {
              id v32 = v29;
              if (*(void *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
              {
                long long v33 = (void *)[*(id *)(a1 + 8) unarchiver:a1 didDecodeObject:v29];
                value[0] = v33;
              }
              else
              {
                long long v33 = value[0];
              }
              if (v33) {
                objc_msgSend((id)a1, "_replaceObject:withObject:", v29);
              }
              else {
                value[0] = v29;
              }
            }
            CFTypeRef cf = value[0];
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), value[0], (const void *)a2);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), (const void *)a2, cf);
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)a2);
          *a4 = cf;
          return 1;
        }
LABEL_9:
        BOOL result = 0;
        *a4 = 0;
        return result;
      }
      int v20 = 0;
LABEL_43:
      if (v20) {
        objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"%@", v20);
      }
      else {
        objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%1$@: cannot decode object of class (%2$@) for key (%3$@) because no class named \"%2$@\" was found; the class needs to be defined in source code or linked in from a library (ensure the class is part of the correct target). If the class was renamed, use setClassName:forClass: to add a class translation mapping to NSKeyedUnarchiver",
      }
          _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
          0,
          a3);
      goto LABEL_9;
    }
    long long v19 = +[NSString stringWithFormat:@"%@: unexpected non-objectlike class (%@)", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), 0];
LABEL_42:
    int v20 = v19;
    goto LABEL_43;
  }
  __CFBinaryPlistCreateObject();
  *a4 = 0;
  return 1;
}

void sub_1817BD840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v27 + 48), v28);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _decodeObjectReference(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  *a5 = 0;
  int v9 = [(id)a1 requiresSecureCoding];
  value[0] = 0;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), (const void *)a4, (const void **)value))
  {
    uint64_t result = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), (const void *)a4, (const void **)value);
    if (!result) {
      return result;
    }
    if (v9
      && ![(id)a1 _validateAllowedClassesContainsClassOfReference:value[0] forKey:a3])
    {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if (decodingCyclesIsAllowedForCoder(a1))
  {
LABEL_3:
    if (v9
      && (objc_msgSend((id)a1, "_validateAllowedClassesContainsClass:forKey:", objc_msgSend(value[0], "classForCoder"), a3) & 1) == 0)
    {
LABEL_14:
      unsigned int v11 = 0;
      goto LABEL_15;
    }
LABEL_9:
    unsigned int v11 = value[0];
LABEL_15:
    *a5 = v11;
    return 1;
  }
  unint64_t v12 = atomic_load((unint64_t *)(a1 + 16));
  if (v12 != *(void *)(a1 + 136)) {
    __NSPoisoned();
  }
  char v13 = atomic_load((unint64_t *)(a1 + 16));
  if ((v13 & 0x20) == 0 && !_os_feature_enabled_impl())
  {
    if (_decodeObjectReference_onceToken != -1) {
      dispatch_once(&_decodeObjectReference_onceToken, &__block_literal_global_729);
    }
    goto LABEL_3;
  }
  objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%@: object cycles are disallowed", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
  return 1;
}

BOOL _coderValidateClassValidToMessageForUnarchiving(objc_class *a1)
{
  if (!class_respondsToSelector(a1, sel_methodSignatureForSelector_)
    || !class_respondsToSelector(a1, sel_doesNotRecognizeSelector_))
  {
    return 0;
  }

  return class_respondsToSelector(a1, sel_forwardInvocation_);
}

void *_NSXPCSerializationIterateArrayObject(void *result, void *a2, uint64_t a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a2 + 8;
  uint64_t v4 = *a2 >= 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v4 << 63 >> 63;
  if (v5 == v4 && (v5 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = result;
    unint64_t v7 = result[1];
    if (v7 > v3)
    {
      unint64_t v8 = *(void *)(*a2 + *result + 1);
      if (v8 != v3)
      {
        unint64_t v9 = *a2 + 9;
        uint64_t v10 = v3 == -1;
        uint64_t v11 = v10 << 63 >> 63;
        v18[0] = v9;
        if (v11 == v10 && (v11 & 0x8000000000000000) == 0 && v7 > v9 && v8 >= v9)
        {
          do
          {
            unint64_t v16 = v9;
            uint64_t v17 = 255;
            if (v9 >= v7) {
              break;
            }
            LODWORD(v17) = *(unsigned char *)(*v6 + v9) & 0xF0;
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t *))(a3 + 16))(a3, &v16);
            if (!result) {
              break;
            }
            uint64_t result = (void *)_getLastByteOfValueIncludingMarker(v6, v9, v18);
            unint64_t v13 = v18[0] + 1;
            uint64_t v14 = v18[0] == -1;
            uint64_t v15 = v14 << 63 >> 63;
            ++v18[0];
            if (v15 != v14) {
              break;
            }
            if (v15 < 0) {
              break;
            }
            if (v9 >= v13) {
              break;
            }
            unint64_t v7 = v6[1];
            if (v7 <= v13) {
              break;
            }
            unint64_t v9 = v13;
          }
          while (v8 >= v13);
        }
      }
    }
  }
  return result;
}

uint64_t type metadata instantiation function for KeyPathComparator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t type metadata instantiation function for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t NSKeyValuePropertyIsEqual(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3 == *(void **)(a2 + 16)) {
    return 1;
  }
  else {
    return objc_msgSend(v3, "isEqual:");
  }
}

void protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl()
{
}

void specialized JSONDecoderImpl.decode(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    unint64_t v6 = *(void *)(v0 + 160);
    unsigned __int8 v7 = *(unsigned char *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v4, v5, v7, v6, 0, 0, 0, 255);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  void *v7;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    if ((*(unsigned char *)(v1 + 24 * v2 + 24) & 0xE0) == 0x40) {
      return;
    }
    uint64_t v3 = *(void *)(v0 + 160);
    swift_retain();
    _CodingPathNode.path.getter(v3);
    swift_release();
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      unint64_t v6 = *(unsigned char *)(v4 + 24 * v5 + 24);
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB390], v6, v7);
      swift_bridgeObjectRelease();
      swift_willThrow();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

double Date.timeIntervalSinceReferenceDate.getter()
{
  return *(double *)v0;
}

uint64_t getEnumTagSinglePayload for TermOfAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithInteger_, v1);
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  double v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithDouble_, v1);
}

uint64_t static Int64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id v6 = [a1 *a3];
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, v6);
  char v8 = static NSObject.== infix(_:_:)();

  if (v8)
  {
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return v8 & 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Double()
{
  double v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return objc_msgSend(v2, sel_initWithDouble_, v1);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5 = *v3;
  id v6 = objc_allocWithZone((Class)NSNumber);
  id v7 = *a3;

  return objc_msgSend(v6, v7, v5);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Bool()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return objc_msgSend(v2, sel_initWithBool_, v1);
}

uint64_t static Measurement.== infix<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  double v3 = *(double *)(a1 + 8);
  int v4 = *(void **)a2;
  double v5 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if (static NSObject.== infix(_:_:)()) {
    return v3 == v5;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    id v7 = (void *)result;
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result)
    {
      char v8 = (void *)result;
      ObjCClassFromObject = (void *)swift_getObjCClassFromObject();
      id v10 = v2;
      id v11 = v4;
      id v12 = objc_msgSend(ObjCClassFromObject, sel_baseUnit);
      id v13 = objc_msgSend((id)swift_getObjCClassFromObject(), sel_baseUnit);
      char v14 = static NSObject.== infix(_:_:)();

      if (v14)
      {
        id v15 = objc_msgSend(v7, sel_converter);
        objc_msgSend(v15, sel_baseUnitValueFromValue_, v3);
        double v3 = v16;

        id v17 = objc_msgSend(v8, sel_converter);
        objc_msgSend(v17, sel_baseUnitValueFromValue_, v5);
        double v5 = v18;

        return v3 == v5;
      }

      return 0;
    }
  }
  return result;
}

CFMutableDictionaryRef _fillDictionary(int *a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v9 = +[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 12)];
  if (v9) {
    [(__CFDictionary *)Mutable setObject:v9 forKey:@"NSFileSize"];
  }
  uint64_t v10 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)*((uint64_t *)a1 + 6) - *MEMORY[0x1E4F1CF78] + (double)*((uint64_t *)a1 + 7) * 0.000000001];
  if (v10) {
    [(__CFDictionary *)Mutable setObject:v10 forKey:@"NSFileModificationDate"];
  }
  id v11 = +[NSNumber numberWithUnsignedLong:a1[1] & 0xFFF];
  if (v11) {
    [(__CFDictionary *)Mutable setObject:v11 forKey:@"NSFilePosixPermissions"];
  }
  id v12 = +[NSNumber numberWithUnsignedLong:*((unsigned __int16 *)a1 + 3)];
  if (v12) {
    [(__CFDictionary *)Mutable setObject:v12 forKey:@"NSFileReferenceCount"];
  }
  id v13 = +[NSNumber numberWithUnsignedLong:*a1];
  if (v13) {
    [(__CFDictionary *)Mutable setObject:v13 forKey:@"NSFileSystemNumber"];
  }
  char v14 = +[NSNumber numberWithUnsignedLong:*((void *)a1 + 1)];
  if (v14) {
    [(__CFDictionary *)Mutable setObject:v14 forKey:@"NSFileSystemFileNumber"];
  }
  id v15 = __NSUserAccountNumberToName(a1[4]);
  if (v15) {
    [(__CFDictionary *)Mutable setObject:v15 forKey:@"NSFileOwnerAccountName"];
  }
  double v16 = __NSGroupAccountNumberToName(a1[5]);
  if (v16) {
    [(__CFDictionary *)Mutable setObject:v16 forKey:@"NSFileGroupOwnerAccountName"];
  }
  unsigned int v17 = *((unsigned __int16 *)a1 + 2);
  if ((v17 & 0x1000) != 0 || (uint64_t v18 = (v17 >> 13) - 1, v18 > 5)) {
    long long v19 = @"NSFileTypeUnknown";
  }
  else {
    long long v19 = off_1E51F80B0[v18];
  }
  [(__CFDictionary *)Mutable setObject:v19 forKey:@"NSFileType"];
  if ((a1[1] & 0xB000 | 0x4000) == 0x6000) {
    [(__CFDictionary *)Mutable setObject:+[NSNumber numberWithUnsignedLong:a1[6]] forKey:@"NSFileDeviceIdentifier"];
  }
  if (a2[16])
  {
    int v20 = +[NSNumber numberWithBool:*a2];
    if (v20) {
      [(__CFDictionary *)Mutable setObject:v20 forKey:@"NSFileExtensionHidden"];
    }
  }
  if ((a2[16] & 2) != 0)
  {
    uint64_t v21 = *((void *)a2 + 1);
    if (v21) {
      [(__CFDictionary *)Mutable setObject:v21 forKey:@"NSFileCreationDate"];
    }
  }
  int v22 = a1[29];
  if ((v22 & 0x20002) != 0)
  {
    [(__CFDictionary *)Mutable setObject:+[NSNumber numberWithInteger:1] forKey:@"NSFileImmutable"];
    int v22 = a1[29];
  }
  if ((v22 & 0x40004) != 0) {
    [(__CFDictionary *)Mutable setObject:+[NSNumber numberWithInteger:1] forKey:@"NSFileAppendOnly"];
  }
  [(__CFDictionary *)Mutable setObject:+[NSNumber numberWithUnsignedLong:a1[4]] forKey:@"NSFileOwnerAccountID"];
  [(__CFDictionary *)Mutable setObject:+[NSNumber numberWithUnsignedLong:a1[5]] forKey:@"NSFileGroupOwnerAccountID"];
  if (a3) {
    [(__CFDictionary *)Mutable setObject:a3 forKey:@"NSFileExtendedAttributes"];
  }
  int v23 = a4 - 1;
  if (a4 - 1) <= 6 && ((0x4Fu >> v23)) {
    [(__CFDictionary *)Mutable setObject:off_1E51F8040[v23] forKey:@"NSFileProtectionKey"];
  }
  return Mutable;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  id v8 = [a1 *a5];
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a6, v8);
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return v10 & 1;
}

void specialized static Bool._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, char *a2)
{
  if (!*MEMORY[0x1E4F1CFD0])
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*MEMORY[0x1E4F1CFD0] == a1)
  {
    char v4 = 1;
    goto LABEL_10;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  char v4 = 1;
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
  char v6 = static NSObject.== infix(_:_:)();

  if (v6)
  {
LABEL_10:
    *a2 = v4;
    return;
  }
  if (!*MEMORY[0x1E4F1CFC8])
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (*MEMORY[0x1E4F1CFC8] == a1)
  {
    char v4 = 0;
    goto LABEL_10;
  }
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
  char v8 = static NSObject.== infix(_:_:)();

  char v4 = 0;
  if (v8) {
    goto LABEL_10;
  }
}

uint64_t type metadata accessor for NSMorphologyPronoun(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

NSNumber *_NSXPCSerializationNumberForObject(uint64_t *a1, unint64_t *a2)
{
  v17[1] = *(double *)MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  unsigned int v4 = *(unsigned __int8 *)(*a1 + *a2);
  int v5 = v4 & 0xF0;
  if (v5 != 240)
  {
    if (v5 == 32)
    {
      if ((v4 & 0xF) == 3)
      {
        v17[0] = 0.0;
        if (_getDoubleAtMarker(a1, v17, v2, v16)) {
          return +[NSNumber numberWithDouble:v17[0]];
        }
      }
      else if ((v4 & 0xF) == 2)
      {
        LODWORD(v17[0]) = 0;
        if (_getFloatAtMarker(a1, v17, v2, v16))
        {
          LODWORD(v15) = LODWORD(v17[0]);
          return +[NSNumber numberWithFloat:v15];
        }
      }
    }
    else if (v5 == 16)
    {
      v17[0] = 0.0;
      if (_getIntAtMarker(a1, v17, v2, v16))
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
        id v7 = v17;
        CFNumberType v8 = kCFNumberSInt64Type;
        return (NSNumber *)CFNumberCreate(v6, v8, v7);
      }
    }
    return 0;
  }
  unint64_t v9 = a1[1];
  if (v4 < 0xF0 || v9 <= v2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v12 = v2 >= 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = v12 << 63 >> 63;
  if (v13 == v12 && (v13 & 0x8000000000000000) == 0 && v9 > v2 + 8)
  {
    unint64_t v14 = *(void *)(v2 + v3 + 1);
    v16[0] = 0;
    v16[1] = v14;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    id v7 = (double *)v16;
    CFNumberType v8 = kCFNumberMaxType|kCFNumberSInt8Type;
    return (NSNumber *)CFNumberCreate(v6, v8, v7);
  }
  return result;
}

id newJSONObject(uint64_t a1, char a2, id *a3)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    unint64_t v5 = *(void *)(a1 + 24);
LABEL_5:
    if (*(void *)(a1 + 16) <= v5 + 1)
    {
      if (a3)
      {
        unint64_t v7 = *(void *)(a1 + 48);
        BOOL v8 = v5 >= v7;
        uint64_t v9 = v5 - v7;
        if (v8) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        id v11 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", *(void *)(a1 + 40), v10];
        uint64_t v12 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
        v89[0] = @"NSDebugDescription";
        v89[1] = @"NSJSONSerializationErrorIndex";
        v90[0] = v11;
        v90[1] = v12;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v90 forKeys:v89 count:2]);
      }
    }
    else
    {
      *(void *)(a1 + 24) = v5 + 1;
      if (skipJSONWhitespace(a1, a3, 0))
      {
        unint64_t v5 = *(void *)(a1 + 24);
        if (*(unsigned char *)(*(void *)a1 + v5) == 125)
        {
          *(void *)(a1 + 24) = v5 + 1;
          if (*(unsigned char *)(a1 + 8)) {
            CFAllocatorRef v6 = (objc_class *)MEMORY[0x1E4F1CA60];
          }
          else {
            CFAllocatorRef v6 = (objc_class *)MEMORY[0x1E4F1C9E8];
          }
          return objc_alloc_init(v6);
        }
        int v87 = 0;
        goto LABEL_17;
      }
    }
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(*(void *)a1 + v5) == 123) {
    goto LABEL_5;
  }
  int v87 = 1;
LABEL_17:
  size_t v14 = 0;
  double v15 = (char *)v89;
  double v16 = v90;
  CFIndex v17 = 1;
  unint64_t v18 = 32;
  char v88 = 1;
  while (1)
  {
    unint64_t v19 = v17 - 1;
    if ((*(unsigned char *)(a1 + 8) & 8) != 0)
    {
      int v20 = 1;
    }
    else
    {
      if (*(unsigned char *)(*(void *)a1 + v5) != 34)
      {
        if (a3)
        {
          unint64_t v49 = *(void *)(a1 + 48);
          BOOL v8 = v5 >= v49;
          uint64_t v50 = v5 - v49;
          CFIndex v51 = v17 - 1;
          if (v8) {
            uint64_t v52 = v50;
          }
          else {
            uint64_t v52 = 0;
          }
          uint64_t v53 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"No string key for value in object", *(void *)(a1 + 40), v52];
          long long v54 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
          uint64_t v91 = @"NSDebugDescription";
          uint64_t v92 = @"NSJSONSerializationErrorIndex";
          uint64_t v93 = v53;
          uint64_t v94 = v54;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);

          unint64_t v19 = v51;
        }
        goto LABEL_51;
      }
      int v20 = 0;
    }
    newJSONString((void *)a1, v20, a3);
    if (!v21) {
      goto LABEL_51;
    }
    int v22 = v21;
    if ((skipJSONWhitespace(a1, a3, 0) & 1) == 0)
    {
LABEL_50:

LABEL_51:
      uint64_t v13 = 0;
      CFIndex v17 = v19;
      goto LABEL_91;
    }
    unint64_t v23 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)a1 + v23) != 58)
    {
      char v37 = v88;
      if (a3)
      {
        unint64_t v38 = *(void *)(a1 + 48);
        BOOL v8 = v23 >= v38;
        uint64_t v39 = v23 - v38;
        CFIndex v40 = v17 - 1;
        if (v8) {
          uint64_t v41 = v39;
        }
        else {
          uint64_t v41 = 0;
        }
        unsigned __int8 v42 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"No value for key in object", *(void *)(a1 + 40), v41];
        goto LABEL_66;
      }
LABEL_67:

      uint64_t v13 = 0;
      CFIndex v17 = v19;
      goto LABEL_92;
    }
    if (*(void *)(a1 + 16) <= v23 + 1)
    {
      char v37 = v88;
      if (a3)
      {
        unint64_t v43 = *(void *)(a1 + 48);
        BOOL v8 = v23 >= v43;
        uint64_t v44 = v23 - v43;
        CFIndex v40 = v17 - 1;
        if (v8) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = 0;
        }
        unsigned __int8 v42 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", *(void *)(a1 + 40), v45];
LABEL_66:
        long long v46 = v42;
        uint64_t v47 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
        uint64_t v91 = @"NSDebugDescription";
        uint64_t v92 = @"NSJSONSerializationErrorIndex";
        uint64_t v93 = v46;
        uint64_t v94 = v47;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);

        unint64_t v19 = v40;
        goto LABEL_67;
      }
      goto LABEL_67;
    }
    *(void *)(a1 + 24) = v23 + 1;
    if ((skipJSONWhitespace(a1, a3, 0) & 1) == 0) {
      goto LABEL_50;
    }
    id v24 = v16;
    CFArrayRef v25 = newJSONValue((_NSJSONRoundTrippingNumber *)a1, a3);
    if (!v25)
    {

      uint64_t v13 = 0;
      --v17;
      goto LABEL_91;
    }
    CFArrayRef v26 = v25;
    if (v19 >= v18)
    {
      CFIndex v85 = v17 - 1;
      __src = v15;
      v18 *= 2;
      if (v88)
      {
        uint64_t v27 = NSAllocateObjectArray(v18);
        long long v28 = (char *)NSAllocateObjectArray(v18);
        long long v29 = v28;
        if (!v28 || !v27)
        {
          free(v28);
          free(v27);

          if (a3)
          {
            unint64_t v73 = *(void *)(a1 + 24);
            unint64_t v74 = *(void *)(a1 + 48);
            BOOL v8 = v73 >= v74;
            uint64_t v75 = v73 - v74;
            if (v8) {
              uint64_t v76 = v75;
            }
            else {
              uint64_t v76 = 0;
            }
            int v77 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Memory exhausted during parse of dictionary.", *(void *)(a1 + 40), v76];
            unint64_t v78 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
            uint64_t v91 = @"NSDebugDescription";
            uint64_t v92 = @"NSJSONSerializationErrorIndex";
            uint64_t v93 = v77;
            uint64_t v94 = v78;
            *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
          }
          uint64_t v13 = 0;
          char v37 = 1;
LABEL_118:
          CFIndex v17 = v85;
          double v15 = __src;
          double v16 = v24;
          goto LABEL_92;
        }
        memmove(v27, v24, v14);
        memmove(v29, __src, v14);
      }
      else
      {
        long long v29 = NSReallocateObjectArray(v15, v18);
        CFDictionaryRef v30 = NSReallocateObjectArray(v24, v18);
        uint64_t v27 = v30;
        if (!v29 || !v30)
        {
          free(v29);
          free(v27);

          if (a3)
          {
            unint64_t v79 = *(void *)(a1 + 24);
            unint64_t v80 = *(void *)(a1 + 48);
            BOOL v8 = v79 >= v80;
            uint64_t v81 = v79 - v80;
            if (v8) {
              uint64_t v82 = v81;
            }
            else {
              uint64_t v82 = 0;
            }
            uint64_t v83 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Memory exhausted during parse of dictionary.", *(void *)(a1 + 40), v82];
            uint64_t v84 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
            uint64_t v91 = @"NSDebugDescription";
            uint64_t v92 = @"NSJSONSerializationErrorIndex";
            uint64_t v93 = v83;
            uint64_t v94 = v84;
            *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
          }
          char v37 = 0;
          uint64_t v13 = 0;
          goto LABEL_118;
        }
      }
      char v88 = 0;
      id v24 = v27;
      double v15 = v29;
    }
    *(void *)&v15[v14] = v22;
    v24[v14 / 8] = v26;
    double v16 = v24;
    if (!v87) {
      break;
    }
    if (!skipJSONWhitespace(a1, a3, 1)) {
      goto LABEL_70;
    }
    unint64_t v32 = *(void *)(a1 + 16);
    unint64_t v31 = *(void *)(a1 + 24);
    if (v32 <= v31) {
      goto LABEL_70;
    }
    if (*(unsigned char *)(*(void *)a1 + v31) != 44)
    {
      if (a3)
      {
        unint64_t v59 = *(void *)(a1 + 48);
        BOOL v8 = v31 >= v59;
        uint64_t v60 = v31 - v59;
        if (v8) {
          uint64_t v61 = v60;
        }
        else {
          uint64_t v61 = 0;
        }
        int v62 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Badly formed object", *(void *)(a1 + 40), v61];
        uint64_t v63 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
        uint64_t v91 = @"NSDebugDescription";
        uint64_t v92 = @"NSJSONSerializationErrorIndex";
        uint64_t v93 = v62;
        uint64_t v94 = v63;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
      }
LABEL_90:
      uint64_t v13 = 0;
LABEL_91:
      char v37 = v88;
      goto LABEL_92;
    }
    unint64_t v33 = v31 + 1;
    if (v32 <= v33) {
      goto LABEL_70;
    }
    *(void *)(a1 + 24) = v33;
    if (!skipJSONWhitespace(a1, a3, 1)) {
      goto LABEL_70;
    }
    unint64_t v5 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 16) <= v5) {
      goto LABEL_70;
    }
LABEL_49:
    ++v17;
    v14 += 8;
  }
  if (!skipJSONWhitespace(a1, a3, 0)) {
    goto LABEL_90;
  }
  unint64_t v34 = *(void *)(a1 + 24);
  int v35 = *(unsigned __int8 *)(*(void *)a1 + v34);
  if (v35 == 44)
  {
    if (*(void *)(a1 + 16) > v34 + 1)
    {
      *(void *)(a1 + 24) = v34 + 1;
      if (!skipJSONWhitespace(a1, a3, 0)) {
        goto LABEL_90;
      }
      unint64_t v5 = *(void *)(a1 + 24);
      if (*(unsigned char *)(*(void *)a1 + v5) == 125) {
        goto LABEL_70;
      }
      goto LABEL_49;
    }
    char v37 = v88;
    if (a3)
    {
      unint64_t v68 = *(void *)(a1 + 48);
      BOOL v8 = v34 >= v68;
      uint64_t v69 = v34 - v68;
      if (v8) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = 0;
      }
      uint64_t v58 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", *(void *)(a1 + 40), v70];
      goto LABEL_104;
    }
    goto LABEL_105;
  }
  if (v35 != 125)
  {
    char v37 = v88;
    if (a3)
    {
      unint64_t v55 = *(void *)(a1 + 48);
      BOOL v8 = v34 >= v55;
      uint64_t v56 = v34 - v55;
      if (v8) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = 0;
      }
      uint64_t v58 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Badly formed object", *(void *)(a1 + 40), v57];
LABEL_104:
      uint64_t v71 = v58;
      char v72 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
      uint64_t v91 = @"NSDebugDescription";
      uint64_t v92 = @"NSJSONSerializationErrorIndex";
      uint64_t v93 = v71;
      uint64_t v94 = v72;
      *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
    }
LABEL_105:
    uint64_t v13 = 0;
    goto LABEL_92;
  }
LABEL_70:
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v13 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithObjects:v24 forKeys:v15 count:v17];
    goto LABEL_91;
  }
  char v37 = v88;
  if (dyld_program_sdk_at_least()) {
    CFDictionaryRef v48 = (CFDictionaryRef)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithObjects:v24 forKeys:v15 count:v17];
  }
  else {
    CFDictionaryRef v48 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v15, (const void **)v24, v17, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v13 = (uint64_t)v48;
LABEL_92:
  if (v17)
  {
    unint64_t v64 = (void **)v16;
    unint64_t v65 = (void **)v15;
    do
    {
      int v66 = *v64++;

      uint64_t v67 = *v65++;
      --v17;
    }
    while (v17);
  }
  if ((v37 & 1) == 0)
  {
    free(v16);
    free(v15);
  }
  ++*(void *)(a1 + 24);
  return (id)v13;
}

uint64_t skipJSONWhitespace(uint64_t a1, void *a2, char a3)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  if (v6 > v7)
  {
    if ((*(unsigned char *)(a1 + 8) & 8) != 0)
    {
      while (1)
      {
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = v7 + 1;
        if (v6 <= v7 + 1) {
          int v20 = 0;
        }
        else {
          int v20 = *(unsigned __int8 *)(v18 + v19);
        }
        int v21 = *(unsigned __int8 *)(v18 + v7);
        switch(*(unsigned char *)(v18 + v7))
        {
          case 9:
          case 0xB:
          case 0xC:
            goto LABEL_31;
          case 0xA:
            goto LABEL_28;
          case 0xD:
            *(void *)(a1 + 24) = v19;
            if (v6 <= v19 || *(unsigned char *)(v18 + v19) != 10) {
              goto LABEL_35;
            }
            unint64_t v19 = v7 + 2;
LABEL_28:
            *(void *)(a1 + 24) = v19;
LABEL_35:
            ++*(void *)(a1 + 40);
            *(void *)(a1 + 48) = v19;
            goto LABEL_36;
          default:
            if (v21 == 160 || v21 == 32)
            {
LABEL_31:
              *(void *)(a1 + 24) = v19;
            }
            else
            {
              BOOL v22 = v6 > v19 && v21 == 47;
              int v23 = v22;
              if (v22 && v20 == 47)
              {
                *(void *)(a1 + 24) = v7 + 2;
                if ((skipJSON5Comment((uint64_t *)a1, 1, a2) & 1) == 0) {
                  return 0;
                }
              }
              else
              {
                if (v20 != 42) {
                  int v23 = 0;
                }
                if (v23 != 1) {
                  return 1;
                }
                *(void *)(a1 + 24) = v7 + 2;
                uint64_t result = skipJSON5Comment((uint64_t *)a1, 0, a2);
                if (!result) {
                  return result;
                }
              }
            }
LABEL_36:
            unint64_t v6 = *(void *)(a1 + 16);
            unint64_t v7 = *(void *)(a1 + 24);
            if (v6 <= v7) {
              goto LABEL_16;
            }
            break;
        }
      }
    }
    uint64_t v8 = *(void *)a1;
    do
    {
      unsigned int v9 = *(unsigned __int8 *)(v8 + v7);
      if (v9 > 0xC)
      {
        if (v9 != 32)
        {
          if (v9 != 13) {
            return 1;
          }
          unint64_t v10 = v7 + 1;
          *(void *)(a1 + 24) = v7 + 1;
          if (v6 > v7 + 1 && *(unsigned char *)(v8 + v10) == 10)
          {
            unint64_t v10 = v7 + 2;
            *(void *)(a1 + 24) = v7 + 2;
          }
          ++*(void *)(a1 + 40);
          *(void *)(a1 + 48) = v10;
          unint64_t v7 = v10;
          continue;
        }
      }
      else if (v9 != 9)
      {
        if (v9 != 10) {
          return 1;
        }
        *(void *)(a1 + 24) = ++v7;
        ++*(void *)(a1 + 40);
        *(void *)(a1 + 48) = v7;
        continue;
      }
      *(void *)(a1 + 24) = ++v7;
    }
    while (v6 > v7);
  }
LABEL_16:
  *(void *)(a1 + 24) = v6;
  if (a3) {
    return 1;
  }
  if (a2)
  {
    unint64_t v12 = *(void *)(a1 + 48);
    BOOL v13 = v6 >= v12;
    unint64_t v14 = v6 - v12;
    if (v13) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = 0;
    }
    double v16 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file", *(void *)(a1 + 40), v15];
    CFIndex v17 = [[NSNumber alloc] initWithUnsignedInteger:*(void *)(a1 + 24)];
    v24[0] = @"NSDebugDescription";
    v24[1] = @"NSJSONSerializationErrorIndex";
    v25[0] = v16;
    v25[1] = v17;
    *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:2]);
  }
  return 0;
}

CFArrayRef newJSONValue(_NSJSONRoundTrippingNumber *a1, id *a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (a1[1]._number >= (NSNumber *)0x201)
  {
    if (a2)
    {
      Class isa = a1[1].super.isa;
      Class v5 = a1[2].super.isa;
      BOOL v6 = isa >= v5;
      int64_t v7 = isa - v5;
      if (v6) {
        int64_t v8 = v7;
      }
      else {
        int64_t v8 = 0;
      }
      unsigned int v9 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Too many nested arrays or dictionaries", a1[1]._representation, v8];
      unint64_t v10 = [[NSNumber alloc] initWithUnsignedInteger:a1[1].super.isa];
      int v111 = @"NSDebugDescription";
      uint64_t v112 = @"NSJSONSerializationErrorIndex";
      __src = v9;
      uint64_t v108 = v10;
      *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__src forKeys:&v111 count:2]);
    }
    return 0;
  }
  Class v12 = a1->super.isa;
  unint64_t representation = (unint64_t)a1->_representation;
  Class v13 = a1[1].super.isa;
  if (representation <= (unint64_t)v13 + 1) {
    int v15 = 0;
  }
  else {
    int v15 = *((unsigned __int8 *)v13 + (void)v12 + 1);
  }
  int v16 = *((unsigned __int8 *)v13 + (void)v12);
  unint64_t v17 = (unint64_t)v13 + 2;
  if (representation <= v17) {
    int v18 = 0;
  }
  else {
    int v18 = *((unsigned __int8 *)v12 + v17);
  }
  id v106 = 0;
  unint64_t v19 = (void *)MEMORY[0x185308110]();
  if (v16 == 34) {
    goto LABEL_26;
  }
  if (v16 == 123)
  {
    ++a1[1]._number;
    CFArrayRef v23 = (const __CFArray *)newJSONObject(a1, 0, &v106);
LABEL_23:
    CFArrayRef v11 = v23;
    goto LABEL_33;
  }
  if (v16 != 91)
  {
    number = a1->_number;
    if ((number & 8) != 0 && v16 == 39)
    {
LABEL_26:
      newJSONString(a1, 0, &v106);
LABEL_27:
      CFArrayRef v11 = v25;
      goto LABEL_34;
    }
    if ((v16 - 102) <= 0xE && ((1 << (v16 - 102)) & 0x4101) != 0)
    {
      Class v36 = a1[1].super.isa;
      Class v37 = a1->super.isa;
      int v38 = *((unsigned __int8 *)a1->super.isa + (unint64_t)v36);
      switch(v38)
      {
        case 't':
          unint64_t v55 = (Class)((char *)v36 + 3);
          if (a1->_representation > (NSString *)((char *)v36 + 3))
          {
            a1[1].super.Class isa = v55;
            if (*((unsigned char *)v37 + (void)v36 + 1) == 114
              && *((unsigned char *)v37 + (void)v36 + 2) == 117
              && *((unsigned char *)v55 + (void)v37) == 101)
            {
              CFIndex v40 = (void *)*MEMORY[0x1E4F1CFD0];
              uint64_t v41 = (uint64_t)v36 + 4;
              goto LABEL_89;
            }
            a1[1].super.Class isa = v36;
            Class v64 = a1[2].super.isa;
            BOOL v6 = v36 >= v64;
            int64_t v65 = v36 - v64;
            if (v6) {
              int64_t v66 = v65;
            }
            else {
              int64_t v66 = 0;
            }
            uint64_t v60 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Something looked like a 'true' but wasn't", a1[1]._representation, v66];
LABEL_118:
            uint64_t v70 = v60;
            uint64_t v71 = [[NSNumber alloc] initWithUnsignedInteger:a1[1].super.isa];
            int v111 = @"NSDebugDescription";
            uint64_t v112 = @"NSJSONSerializationErrorIndex";
            __src = v70;
            uint64_t v108 = v71;
            id v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__src forKeys:&v111 count:2]);

            CFArrayRef v11 = 0;
            goto LABEL_34;
          }
          break;
        case 'n':
          uint64_t v56 = (Class)((char *)v36 + 3);
          if (a1->_representation > (NSString *)((char *)v36 + 3))
          {
            a1[1].super.Class isa = v56;
            if (*((unsigned char *)v37 + (void)v36 + 1) == 117
              && *((unsigned char *)v37 + (void)v36 + 2) == 108
              && *((unsigned char *)v56 + (void)v37) == 108)
            {
              CFIndex v40 = (void *)[MEMORY[0x1E4F1CA98] null];
              uint64_t v41 = (uint64_t)a1[1].super.isa + 1;
              goto LABEL_89;
            }
            a1[1].super.Class isa = v36;
            Class v67 = a1[2].super.isa;
            BOOL v6 = v36 >= v67;
            int64_t v68 = v36 - v67;
            if (v6) {
              int64_t v69 = v68;
            }
            else {
              int64_t v69 = 0;
            }
            uint64_t v60 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Something looked like a 'null' but wasn't", a1[1]._representation, v69];
            goto LABEL_118;
          }
          break;
        case 'f':
          uint64_t v39 = (Class)((char *)v36 + 4);
          if (a1->_representation > (NSString *)((char *)v36 + 4))
          {
            a1[1].super.Class isa = v39;
            if (*((unsigned char *)v37 + (void)v36 + 1) == 97
              && *((unsigned char *)v37 + (void)v36 + 2) == 108
              && *((unsigned char *)v37 + (void)v36 + 3) == 115
              && *((unsigned char *)v39 + (void)v37) == 101)
            {
              CFIndex v40 = (void *)*MEMORY[0x1E4F1CFC8];
              uint64_t v41 = (uint64_t)v36 + 5;
LABEL_89:
              a1[1].super.Class isa = (Class)v41;
LABEL_95:
              CFArrayRef v25 = v40;
              goto LABEL_27;
            }
            a1[1].super.Class isa = v36;
            Class v61 = a1[2].super.isa;
            BOOL v6 = v36 >= v61;
            int64_t v62 = v36 - v61;
            if (v6) {
              int64_t v63 = v62;
            }
            else {
              int64_t v63 = 0;
            }
            uint64_t v60 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Something looked like a 'false' but wasn't", a1[1]._representation, v63];
            goto LABEL_118;
          }
          break;
        default:
          CFIndex v40 = 0;
          goto LABEL_95;
      }
      Class v57 = a1[2].super.isa;
      BOOL v6 = v36 >= v57;
      int64_t v58 = v36 - v57;
      if (v6) {
        int64_t v59 = v58;
      }
      else {
        int64_t v59 = 0;
      }
      uint64_t v60 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", a1[1]._representation, v59];
      goto LABEL_118;
    }
    if ((v16 - 48) <= 9)
    {
      if ((number & 8) == 0 || (v15 & 0xFFFFFFDF) != 0x58) {
        goto LABEL_78;
      }
LABEL_161:
      CFArrayRef v25 = (const __CFArray *)newJSON5HexNumber(a1, &v106);
      goto LABEL_27;
    }
    if (v16 == 45)
    {
      if ((number & 8) != 0 && v15 == 48 && (v18 & 0xFFFFFFDF) == 0x58) {
        goto LABEL_161;
      }
      if (((number & 8) == 0 || v15 != 73) && v15 != 78) {
        goto LABEL_78;
      }
    }
    else if ((number & 8) != 0 && v16 == 43)
    {
      Class v72 = a1[1].super.isa;
      if (a1->_representation <= (NSString *)((char *)v72 + 1))
      {
        Class v88 = a1[2].super.isa;
        BOOL v6 = v72 >= v88;
        int64_t v89 = v72 - v88;
        if (v6) {
          int64_t v90 = v89;
        }
        else {
          int64_t v90 = 0;
        }
        uint64_t v91 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", a1[1]._representation, v90];
        uint64_t v92 = [[NSNumber alloc] initWithUnsignedInteger:a1[1].super.isa];
        int v111 = @"NSDebugDescription";
        uint64_t v112 = @"NSJSONSerializationErrorIndex";
        __src = v91;
        uint64_t v108 = v92;
        id v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__src forKeys:&v111 count:2]);
      }
      else
      {
        a1[1].super.Class isa = (Class)((char *)v72 + 1);
      }
      if (v15 == 48 && (v18 & 0xFFFFFFDF) == 0x58) {
        goto LABEL_161;
      }
      if (v15 != 78 && v15 != 73) {
        goto LABEL_78;
      }
    }
    else if (((number & 8) == 0 || v16 != 73) && ((number & 8) == 0 || v16 != 78))
    {
      if ((number & 8) == 0 || v16 != 46)
      {
        Class v73 = a1[1].super.isa;
        Class v74 = a1[2].super.isa;
        BOOL v6 = v73 >= v74;
        int64_t v75 = v73 - v74;
        if (v6) {
          int64_t v76 = v75;
        }
        else {
          int64_t v76 = 0;
        }
        uint64_t v60 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Invalid value", a1[1]._representation, v76];
        goto LABEL_118;
      }
LABEL_78:
      CFArrayRef v25 = (const __CFArray *)newJSONNumber((uint64_t)a1, &v106);
      goto LABEL_27;
    }
    CFArrayRef v25 = (const __CFArray *)newJSON5InfinityOrNaN((uint64_t *)a1, &v106);
    goto LABEL_27;
  }
  ++a1[1]._number;
  Class v20 = a1[1].super.isa;
  if (a1->_representation <= (NSString *)((char *)v20 + 1))
  {
    Class v26 = a1[2].super.isa;
    BOOL v6 = v20 >= v26;
    int64_t v27 = v20 - v26;
    if (v6) {
      int64_t v28 = v27;
    }
    else {
      int64_t v28 = 0;
    }
    long long v29 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", a1[1]._representation, v28];
    CFDictionaryRef v30 = [[NSNumber alloc] initWithUnsignedInteger:a1[1].super.isa];
    int v111 = @"NSDebugDescription";
    uint64_t v112 = @"NSJSONSerializationErrorIndex";
    __src = v29;
    uint64_t v108 = v30;
    id v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__src forKeys:&v111 count:2]);

    goto LABEL_32;
  }
  a1[1].super.Class isa = (Class)((char *)v20 + 1);
  if (!skipJSONWhitespace((uint64_t)a1, &v106, 0))
  {
LABEL_32:
    CFArrayRef v11 = 0;
    goto LABEL_33;
  }
  Class v21 = a1[1].super.isa;
  if (*((unsigned char *)a1->super.isa + (unint64_t)v21) == 93)
  {
    a1[1].super.Class isa = (Class)((char *)v21 + 1);
    if ((uint64_t)a1->_number) {
      BOOL v22 = (objc_class *)MEMORY[0x1E4F1CA48];
    }
    else {
      BOOL v22 = (objc_class *)MEMORY[0x1E4F1C978];
    }
    CFArrayRef v23 = (const __CFArray *)objc_alloc_init(v22);
    goto LABEL_23;
  }
  int v105 = v19;
  size_t v42 = 0;
  CFIndex v43 = 1;
  p_src = (char *)&__src;
  unint64_t v45 = 32;
  char v46 = 1;
  do
  {
    unint64_t v47 = v43 - 1;
    CFArrayRef v11 = (CFArrayRef)newJSONValue(a1, &v106);
    if (!v11)
    {
      char v53 = v46;
LABEL_147:
      CFIndex v43 = v47;
      goto LABEL_148;
    }
    if ((skipJSONWhitespace((uint64_t)a1, &v106, 0) & 1) == 0)
    {
      char v53 = v46;
LABEL_145:

LABEL_146:
      CFArrayRef v11 = 0;
      goto LABEL_147;
    }
    Class v48 = a1[1].super.isa;
    int v49 = *((unsigned __int8 *)a1->super.isa + (unint64_t)v48);
    if (v49 != 44)
    {
      if (v49 == 93)
      {
        int v50 = 1;
        goto LABEL_62;
      }
      char v53 = v46;
      Class v77 = a1[2].super.isa;
      BOOL v6 = v48 >= v77;
      int64_t v78 = v48 - v77;
      if (v6) {
        int64_t v79 = v78;
      }
      else {
        int64_t v79 = 0;
      }
      unint64_t v80 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Badly formed array", a1[1]._representation, v79];
      goto LABEL_144;
    }
    if (a1->_representation <= (NSString *)((char *)v48 + 1))
    {
      char v53 = v46;
      Class v81 = a1[2].super.isa;
      BOOL v6 = v48 >= v81;
      int64_t v82 = v48 - v81;
      if (v6) {
        int64_t v83 = v82;
      }
      else {
        int64_t v83 = 0;
      }
      unint64_t v80 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", a1[1]._representation, v83];
LABEL_144:
      uint64_t v84 = v80;
      CFIndex v85 = [[NSNumber alloc] initWithUnsignedInteger:a1[1].super.isa];
      int v109 = @"NSDebugDescription";
      uint64_t v110 = @"NSJSONSerializationErrorIndex";
      int v111 = (__CFString *)v84;
      uint64_t v112 = (__CFString *)v85;
      id v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v111 forKeys:&v109 count:2]);

      goto LABEL_145;
    }
    int v50 = 0;
    a1[1].super.Class isa = (Class)((char *)v48 + 1);
LABEL_62:
    if (v47 < v45) {
      goto LABEL_68;
    }
    v45 *= 2;
    if ((v46 & 1) == 0)
    {
      uint64_t v52 = NSReallocateObjectArray(p_src, v45);
      if (v52)
      {
        char v46 = 0;
        p_src = v52;
        goto LABEL_68;
      }
      free(p_src);

      Class v99 = a1[1].super.isa;
      Class v100 = a1[2].super.isa;
      BOOL v6 = v99 >= v100;
      int64_t v101 = v99 - v100;
      if (v6) {
        int64_t v102 = v101;
      }
      else {
        int64_t v102 = 0;
      }
      int v103 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Memory exhausted during parse of array.", a1[1]._representation, v102];
      uint64_t v104 = [[NSNumber alloc] initWithUnsignedInteger:a1[1].super.isa];
      int v109 = @"NSDebugDescription";
      uint64_t v110 = @"NSJSONSerializationErrorIndex";
      int v111 = (__CFString *)v103;
      uint64_t v112 = (__CFString *)v104;
      id v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v111 forKeys:&v109 count:2]);

      char v53 = 0;
      goto LABEL_146;
    }
    CFIndex v51 = (char *)NSAllocateObjectArray(v45);
    if (!v51)
    {

      Class v93 = a1[1].super.isa;
      Class v94 = a1[2].super.isa;
      BOOL v6 = v93 >= v94;
      int64_t v95 = v93 - v94;
      if (v6) {
        int64_t v96 = v95;
      }
      else {
        int64_t v96 = 0;
      }
      BOOL v97 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Memory exhausted during parse of array.", a1[1]._representation, v96];
      uint64_t v98 = [[NSNumber alloc] initWithUnsignedInteger:a1[1].super.isa];
      int v109 = @"NSDebugDescription";
      uint64_t v110 = @"NSJSONSerializationErrorIndex";
      int v111 = (__CFString *)v97;
      uint64_t v112 = (__CFString *)v98;
      id v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v111 forKeys:&v109 count:2]);

      CFArrayRef v11 = 0;
      char v53 = 1;
      CFIndex v43 = v47;
LABEL_148:
      unint64_t v19 = v105;
      if (!v43) {
        goto LABEL_151;
      }
      goto LABEL_149;
    }
    p_src = v51;
    memmove(v51, &__src, v42);
    char v46 = 0;
LABEL_68:
    *(void *)&p_src[v42] = v11;
    if (!skipJSONWhitespace((uint64_t)a1, &v106, 0))
    {
      char v53 = v46;
      CFArrayRef v11 = 0;
      goto LABEL_148;
    }
    ++v43;
    v42 += 8;
  }
  while (((*((unsigned char *)a1->super.isa + (unint64_t)a1[1].super.isa) != 93) & ~v50) != 0);
  char v53 = v46;
  --v43;
  if ((uint64_t)a1->_number)
  {
    CFArrayRef v11 = (CFArrayRef)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithObjects:p_src count:v43];
    goto LABEL_148;
  }
  unint64_t v19 = v105;
  if (dyld_program_sdk_at_least()) {
    CFArrayRef v54 = (CFArrayRef)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:p_src count:v43];
  }
  else {
    CFArrayRef v54 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)p_src, v43, MEMORY[0x1E4F1D510]);
  }
  CFArrayRef v11 = v54;
  if (v43)
  {
LABEL_149:
    uint64_t v86 = (void **)p_src;
    do
    {
      int v87 = *v86++;

      --v43;
    }
    while (v43);
  }
LABEL_151:
  if ((v53 & 1) == 0) {
    free(p_src);
  }
  ++a1[1].super.isa;
LABEL_33:
  --a1[1]._number;
LABEL_34:
  if (v106) {
    id v31 = v106;
  }
  id v32 = v106;
  if (a2 && v106) {
    *a2 = v106;
  }
  id v33 = v32;
  return v11;
}

_NSJSONRoundTrippingNumber *newJSONNumber(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)a1;
  BOOL v6 = (unsigned __int8 *)(*(void *)a1 + v4);
  int v7 = *v6;
  int v8 = v7;
  unint64_t v9 = v4;
  if (v7 == 45)
  {
    unint64_t v9 = v4 + 1;
    if (*(void *)(a1 + 16) <= v4 + 1)
    {
      if (a2)
      {
        unint64_t v14 = *(void *)(a1 + 48);
        BOOL v12 = v4 >= v14;
        unint64_t v13 = v4 - v14;
        goto LABEL_9;
      }
      return 0;
    }
    *(void *)(a1 + 24) = v9;
    int v8 = *(unsigned __int8 *)(v5 + v9);
    unsigned int v10 = v8 - 48;
    if ((*(unsigned char *)(a1 + 8) & 8) != 0)
    {
      if (v8 != 46 && v10 >= 0xA)
      {
LABEL_5:
        if (a2)
        {
          unint64_t v11 = *(void *)(a1 + 48);
          BOOL v12 = v9 >= v11;
          unint64_t v13 = v9 - v11;
LABEL_9:
          if (v12) {
            unint64_t v15 = v13;
          }
          else {
            unint64_t v15 = 0;
          }
          int v16 = [NSString alloc];
          uint64_t v17 = v3[5];
          uint64_t v97 = v15;
          int v18 = @"Number with minus sign but no digits";
LABEL_13:
          unint64_t v19 = [(NSString *)v16 initWithFormat:@"%@ around line %lu, column %lu.", v18, v17, v97];
          Class v20 = [[NSNumber alloc] initWithUnsignedInteger:v3[3]];
          int64_t v102 = @"NSDebugDescription";
          int v103 = @"NSJSONSerializationErrorIndex";
          uint64_t v98 = v19;
          Class v99 = v20;
          *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v98 forKeys:&v102 count:2]);

          return 0;
        }
        return 0;
      }
    }
    else if (v10 >= 0xA)
    {
      goto LABEL_5;
    }
  }
  if (v8 == 48)
  {
    ++v9;
    unint64_t v23 = *(void *)(a1 + 16);
    *(void *)(a1 + 24) = v9;
    if (v23 <= v9)
    {
      long long v29 = [NSNumber alloc];
      uint64_t v30 = 0;
      goto LABEL_33;
    }
    if (*(unsigned __int8 *)(v5 + v9) - 48 <= 9)
    {
      if (!a2) {
        return 0;
      }
      unint64_t v24 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v24;
      unint64_t v25 = v9 - v24;
      if (v12) {
        unint64_t v26 = v25;
      }
      else {
        unint64_t v26 = 0;
      }
      int v16 = [NSString alloc];
      uint64_t v17 = v3[5];
      uint64_t v97 = v26;
      int v18 = @"Number with leading zero";
      goto LABEL_13;
    }
  }
  else if ((v8 - 48) > 9)
  {
    if (v8 != 46 || (*(void *)(a1 + 8) & 8) == 0)
    {
      if (!a2) {
        return 0;
      }
      unint64_t v33 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v33;
      unint64_t v34 = v9 - v33;
      if (v12) {
        unint64_t v35 = v34;
      }
      else {
        unint64_t v35 = 0;
      }
      int v16 = [NSString alloc];
      uint64_t v17 = v3[5];
      uint64_t v97 = v35;
      int v18 = @"Malformed number";
      goto LABEL_13;
    }
    unint64_t v23 = *(void *)(a1 + 16);
    if (v23 <= v9 + 1)
    {
      if (!a2) {
        return 0;
      }
      unint64_t v57 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v57;
      unint64_t v58 = v9 - v57;
      if (v12) {
        unint64_t v59 = v58;
      }
      else {
        unint64_t v59 = 0;
      }
      int v16 = [NSString alloc];
      uint64_t v17 = v3[5];
      uint64_t v97 = v59;
      int v18 = @"Decimal point before EoF";
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(v5 + v9 + 1) - 48 >= 0xA)
    {
      if (!a2) {
        return 0;
      }
      unint64_t v70 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v70;
      unint64_t v71 = v9 - v70;
      if (v12) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = 0;
      }
      int v16 = [NSString alloc];
      uint64_t v17 = v3[5];
      uint64_t v97 = v72;
      int v18 = @"Decimal point with no digits";
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v23 = *(void *)(a1 + 16);
    unint64_t v27 = v9 + 1;
    do
    {
      unint64_t v9 = v27;
      *(void *)(a1 + 24) = v27;
      if (v23 <= v27) {
        break;
      }
      unsigned int v28 = *(unsigned __int8 *)(v5 + v27++) - 48;
    }
    while (v28 < 0xA);
  }
  if (v23 > v9 && *(unsigned char *)(v5 + v9) == 46)
  {
    unint64_t v36 = v9 + 1;
    if ((*(unsigned char *)(a1 + 8) & 8) == 0)
    {
      if (v23 <= v36)
      {
        unint64_t v36 = v9;
      }
      else
      {
        *(void *)(a1 + 24) = v36;
        if (*(unsigned __int8 *)(v5 + v36) - 48 <= 9)
        {
          unint64_t v37 = v9 + 2;
          while (v23 != v37)
          {
            *(void *)(a1 + 24) = v37;
            unsigned int v38 = *(unsigned __int8 *)(v5 + v37++) - 48;
            if (v38 >= 0xA) {
              goto LABEL_125;
            }
          }
LABEL_179:
          int v41 = 0;
          uint64_t v39 = 0;
          *(void *)(a1 + 24) = v23;
          char v40 = 1;
          unint64_t v9 = v23;
          goto LABEL_59;
        }
      }
      if (!a2) {
        return 0;
      }
      unint64_t v77 = *(void *)(a1 + 48);
      BOOL v12 = v36 >= v77;
      unint64_t v78 = v36 - v77;
      if (v12) {
        unint64_t v79 = v78;
      }
      else {
        unint64_t v79 = 0;
      }
      int v16 = [NSString alloc];
      uint64_t v17 = v3[5];
      uint64_t v97 = v79;
      int v18 = @"Number with decimal point but no additional digits";
      goto LABEL_13;
    }
    *(void *)(a1 + 24) = v36;
    if (v23 <= v36)
    {
      uint64_t v39 = 0;
      char v40 = 0;
    }
    else
    {
      if (*(unsigned __int8 *)(v5 + v36) - 48 <= 9)
      {
        unint64_t v37 = v9 + 2;
        while (v23 != v37)
        {
          *(void *)(a1 + 24) = v37;
          unsigned int v69 = *(unsigned __int8 *)(v5 + v37++) - 48;
          if (v69 >= 0xA)
          {
LABEL_125:
            int v41 = 0;
            uint64_t v39 = 0;
            unint64_t v9 = v37 - 1;
            char v40 = 1;
            goto LABEL_59;
          }
        }
        goto LABEL_179;
      }
      char v40 = 0;
      uint64_t v39 = -1;
    }
    int v41 = 1;
    ++v9;
    goto LABEL_59;
  }
  uint64_t v39 = 0;
  char v40 = 0;
  int v41 = 1;
LABEL_59:
  if (v23 <= v9 || (*(unsigned __int8 *)(v5 + v9) | 0x20) != 0x65)
  {
    if (!v41) {
      goto LABEL_100;
    }
    unint64_t v46 = 0;
    unint64_t v47 = (unsigned __int8 *)(v5 + v9 + v39 - 1);
    if (v7 == 45) {
      Class v48 = v6 + 1;
    }
    else {
      Class v48 = v6;
    }
    unint64_t v49 = 1;
    while (v47 >= v48)
    {
      BOOL v50 = 0;
      unint64_t v51 = 0;
      if (v49)
      {
        uint64_t v52 = *v47 - 48;
        if (*v47 != 48)
        {
          unint64_t v51 = v52 * v49;
          BOOL v50 = __CFADD__(v46, v52 * v49) || ((unint64_t)v52 * (unsigned __int128)v49) >> 64 != 0;
        }
      }
      --v47;
      int v54 = v49 > 0x1999999999999999 || v50;
      a1 = 10 * v49;
      if (v47 >= v48)
      {
        BOOL v55 = v49 == 0;
      }
      else
      {
        a1 = v49;
        BOOL v55 = 1;
      }
      v46 += v51;
      if (v55) {
        int v56 = v50;
      }
      else {
        int v56 = v54;
      }
      unint64_t v49 = a1;
      if (v56) {
        goto LABEL_100;
      }
    }
    if (v7 != 45)
    {
      id v31 = [[NSNumber alloc] initWithUnsignedLongLong:v46];
      goto LABEL_34;
    }
    if (v46 > 0x8000000000000000)
    {
LABEL_100:
      uint64_t v45 = 0;
      goto LABEL_101;
    }
    long long v29 = [NSNumber alloc];
    uint64_t v30 = -(uint64_t)v46;
LABEL_33:
    id v31 = [(NSNumber *)v29 initWithLongLong:v30];
LABEL_34:
    return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v31);
  }
  unint64_t v42 = v9 + 1;
  if (v23 <= v9 + 1)
  {
    if (!a2) {
      return 0;
    }
    unint64_t v66 = *(void *)(a1 + 48);
    BOOL v12 = v9 >= v66;
    unint64_t v67 = v9 - v66;
    if (v12) {
      unint64_t v68 = v67;
    }
    else {
      unint64_t v68 = 0;
    }
    int v16 = [NSString alloc];
    uint64_t v17 = v3[5];
    uint64_t v97 = v68;
    int v18 = @"Number with exponent followed by EoF";
    goto LABEL_13;
  }
  *(void *)(a1 + 24) = v42;
  int v43 = *(unsigned __int8 *)(v5 + v42);
  if (v43 != 45 && v43 != 43)
  {
    if ((v43 - 48) >= 0xA)
    {
      if (!a2) {
        return 0;
      }
      unint64_t v93 = *(void *)(a1 + 48);
      if (v9 >= v93) {
        unint64_t v94 = v42 - v93;
      }
      else {
        unint64_t v94 = 0;
      }
      int v16 = [NSString alloc];
      uint64_t v17 = v3[5];
      uint64_t v97 = v94;
      int v18 = @"Number with 'e' but no additional digits";
      goto LABEL_13;
    }
    uint64_t v45 = 2;
    unint64_t v44 = v9 + 1;
    goto LABEL_170;
  }
  unint64_t v44 = v9 + 2;
  if (v23 <= v44)
  {
LABEL_183:
    if (!a2) {
      return 0;
    }
    unint64_t v90 = *(void *)(a1 + 48);
    BOOL v12 = v42 >= v90;
    unint64_t v91 = v42 - v90;
    if (v12) {
      unint64_t v92 = v91;
    }
    else {
      unint64_t v92 = 0;
    }
    int v16 = [NSString alloc];
    uint64_t v17 = v3[5];
    uint64_t v97 = v92;
    int v18 = @"Number with '+' or '-' but no additional digits";
    goto LABEL_13;
  }
  *(void *)(a1 + 24) = v44;
  if (*(unsigned __int8 *)(v5 + v44) - 48 > 9)
  {
    unint64_t v42 = v44;
    goto LABEL_183;
  }
  uint64_t v45 = 3;
LABEL_170:
  unint64_t v9 = v44 + 1;
  while (1)
  {
    *(void *)(a1 + 24) = v9;
    if (v23 <= v9 || *(unsigned __int8 *)(v5 + v9) - 48 > 9) {
      break;
    }
    ++v45;
    ++v9;
    if (v45 == 6)
    {
      *(void *)(a1 + 24) = v4;
      if (!a2) {
        return 0;
      }
      unint64_t v87 = *(void *)(a1 + 48);
      BOOL v12 = v4 >= v87;
      unint64_t v88 = v4 - v87;
      if (v12) {
        unint64_t v89 = v88;
      }
      else {
        unint64_t v89 = 0;
      }
      int v16 = [NSString alloc];
      uint64_t v17 = v3[5];
      uint64_t v97 = v89;
      int v18 = @"Number wound up as NaN";
      goto LABEL_13;
    }
  }
LABEL_101:
  size_t v60 = v9 - v4;
  if (v9 == v4)
  {
    if (!a2) {
      return 0;
    }
    unint64_t v61 = v3[6];
    BOOL v12 = v4 >= v61;
    unint64_t v62 = v4 - v61;
    if (v12) {
      unint64_t v63 = v62;
    }
    else {
      unint64_t v63 = 0;
    }
    int v16 = [NSString alloc];
    uint64_t v17 = v3[5];
    uint64_t v97 = v63;
    int v18 = @"Invalid number";
    goto LABEL_13;
  }
  uint64_t v64 = 24;
  if (v7 == 45) {
    uint64_t v64 = 25;
  }
  if (v40)
  {
    if (v7 == 45 && v60 >= 4)
    {
      if (v6[1] != 48)
      {
LABEL_137:
        --v64;
        goto LABEL_138;
      }
      int v65 = v6[2];
    }
    else
    {
      if (v7 == 45 || v60 < 3 || *v6 != 48) {
        goto LABEL_137;
      }
      int v65 = v6[1];
    }
    if (v65 != 46) {
      goto LABEL_137;
    }
  }
  else
  {
    v64 -= 2;
  }
LABEL_138:
  if (v45 + v64 - 5 < v60) {
    goto LABEL_197;
  }
  MEMORY[0x1F4188790](a1);
  Class v73 = &v95;
  if (v60 >= 0x1A)
  {
    Class v73 = (uint64_t *)malloc_type_malloc(v60 + 1, 0xC3E660F6uLL);
    if (!v73)
    {
      qword_1E8EDF350 = (uint64_t)"Unable to allocate space to decode JSON number.";
      __break(1u);
      JUMPOUT(0x1817C2240);
    }
  }
  memcpy(v73, v6, v60);
  *((unsigned char *)v73 + v60) = 0;
  int v74 = *__error();
  *__error() = 0;
  uint64_t v98 = 0;
  double v75 = strtod_l((const char *)v73, &v98, 0);
  if (v75 == 0.0 && *v98 || v75 == INFINITY && *__error() == 34) {
    int64_t v76 = 0;
  }
  else {
    int64_t v76 = [[NSNumber alloc] initWithDouble:v75];
  }
  *__error() = v74;
  if (v73 != &v95) {
    free(v73);
  }
  if (!v76)
  {
LABEL_197:
    if (a2) {
      *a2 = 0;
    }
    unint64_t v80 = [[NSString alloc] initWithBytesNoCopy:*v3 + v4 length:v60 encoding:1 freeWhenDone:0];
    int64_t v76 = [[NSDecimalNumber alloc] initWithString:v80];

    uint64_t v98 = 0;
    Class v99 = 0;
    int v100 = 0;
    if (!v76 || ([(NSDecimalNumber *)v76 decimalValue], ((unsigned __int16)v98 & 0x1F00) == 0x1000))
    {
      v3[3] = v4;
      if (a2)
      {
        unint64_t v81 = v3[6];
        BOOL v12 = v4 >= v81;
        unint64_t v82 = v4 - v81;
        if (v12) {
          unint64_t v83 = v82;
        }
        else {
          unint64_t v83 = 0;
        }
        uint64_t v84 = [NSString alloc];
        uint64_t v96 = v3[5];
        CFIndex v85 = [(NSString *)v84 initWithFormat:@"%@ around line %lu, column %lu.", @"Number wound up as NaN", v96, v83];
        uint64_t v86 = [[NSNumber alloc] initWithUnsignedInteger:v3[3]];
        v101[0] = @"NSDebugDescription";
        v101[1] = @"NSJSONSerializationErrorIndex";
        int64_t v102 = (__CFString *)v85;
        int v103 = (__CFString *)v86;
        *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v102 forKeys:v101 count:2]);
      }
      return 0;
    }
  }
  return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v76);
}

_NSJSONRoundTrippingNumber *newJSONNumberCreateRoundTripping(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3 || (*(unsigned char *)(a1 + 9) & 0x10) == 0) {
    return (_NSJSONRoundTrippingNumber *)a3;
  }
  uint64_t v5 = [[NSString alloc] initWithBytes:*(void *)a1 + a2 length:*(void *)(a1 + 24) - a2 encoding:4];
  if (!v5)
  {
    qword_1E8EDF350 = (uint64_t)"Unable to allocate string from UTF-8 JSON data.";
    __break(1u);
    JUMPOUT(0x1817C23A4);
  }
  BOOL v6 = v5;
  int v7 = [[_NSJSONRoundTrippingNumber alloc] initWithNumber:a3 representation:v5];

  return v7;
}

double _NSXPCSerializationDoubleForObject(void *a1, unint64_t *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  if (!*a2) {
    return 0.0;
  }
  double v5 = 0.0;
  int DoubleAtMarker = _getDoubleAtMarker(a1, &v5, v2, v6);
  double result = v5;
  if (!DoubleAtMarker) {
    return 0.0;
  }
  return result;
}

uint64_t _getDoubleAtMarker(void *a1, void *a2, unint64_t a3, void *a4)
{
  if (a1[1] <= a3 || *(unsigned char *)(*a1 + a3) != 35) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3 >= 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v5 << 63 >> 63;
  *a4 = a3 + 8;
  if (v6 == v5 && (v6 & 0x8000000000000000) == 0)
  {
    if (a1[1] > a3 + 8)
    {
      *a2 = *(void *)(a3 + *a1 + 1);
      return 1;
    }
    return 0;
  }
  return v4;
}

uint64_t _decodeFloat(void *a1, const void *a2, float *a3)
{
  v9[1] = *(double *)MEMORY[0x1E4F143B8];
  v9[0] = 0.0;
  uint64_t result = _decodeDouble((uint64_t)a1, a2, v9);
  double v7 = v9[0];
  if (result)
  {
    uint64_t result = 1;
    if (fabs(v9[0]) != INFINITY && (v9[0] < -3.40282347e38 || v9[0] > 3.40282347e38))
    {
      objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E4F1C4A8], 4864, @"%@: value (%f) for key (%@) too large to fit in 32-bit float", _NSMethodExceptionProem((objc_class *)a1, sel_decodeFloatForKey_), *(void *)&v9[0], a2);
      uint64_t result = 0;
    }
  }
  float v8 = v7;
  *a3 = v8;
  return result;
}

uint64_t _decodeDouble(uint64_t a1, const void *a2, double *a3)
{
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 16));
  if (v3 != *(void *)(a1 + 136)) {
    __NSPoisoned();
  }
  unint64_t v7 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v7 | 8, (unint64_t *)(a1 + 16));
  unint64_t v8 = atomic_load((unint64_t *)(a1 + 16));
  *(void *)(a1 + 136) = v8;
  valuePtr[0] = 0;
  CFArrayRef v9 = *(const __CFArray **)(a1 + 80);
  if (!v9)
  {
    double v14 = 0.0;
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3())
    {
LABEL_22:
      uint64_t result = 0;
      goto LABEL_23;
    }
    unint64_t v15 = *(unsigned __int8 **)(a1 + 104);
    unint64_t v16 = (unint64_t)&v15[*(void *)(a1 + 112) - 1];
    int v17 = *v15;
    if (v17 == 35)
    {
      uint64_t v18 = 9;
      if ((unint64_t)v15 < 0xFFFFFFFFFFFFFFF7 && v16 >= (unint64_t)(v15 + 9))
      {
        double v14 = COERCE_DOUBLE(bswap64(*(void *)(v15 + 1)));
        goto LABEL_19;
      }
    }
    else
    {
      if (v17 != 34)
      {
LABEL_21:
        objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%@: value for key (%@) is not a 64-bit float", _NSMethodExceptionProem((objc_class *)a1, sel_decodeDoubleForKey_), a2);
        goto LABEL_22;
      }
      uint64_t v18 = 5;
      if ((unint64_t)v15 < 0xFFFFFFFFFFFFFFFBLL && v16 >= (unint64_t)(v15 + 5))
      {
        double v14 = COERCE_FLOAT(bswap32(*(_DWORD *)(v15 + 1)));
LABEL_19:
        uint64_t result = 1;
        goto LABEL_23;
      }
    }
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"overflow while attempting to read %lu bytes (float)", v18);
    goto LABEL_21;
  }
  CFIndex Count = CFArrayGetCount(v9);
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    id v13 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
  }
  else
  {
    Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
    id v19 = Value;
  }
  double v14 = 0.0;
  if (!Value) {
    goto LABEL_22;
  }
  if (CFGetTypeID(Value) != 22 || !CFNumberIsFloatType((CFNumberRef)Value)) {
    goto LABEL_21;
  }
  CFNumberGetValue((CFNumberRef)Value, kCFNumberFloat64Type, valuePtr);
  uint64_t result = 1;
  double v14 = *(double *)valuePtr;
LABEL_23:
  *a3 = v14;
  return result;
}

char *NSReallocateObjectArray(void *ptr, unint64_t a2)
{
  if (a2 >> 61)
  {
    unint64_t v11 = +[NSString stringWithFormat:@"*** attempt to allocate id buffer with too large of a count (%lu) -- possibly data is corrupt", a2];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v11 userInfo:0]);
  }
  if (ptr)
  {
    size_t v4 = malloc_size(ptr);
    unint64_t v5 = 8 * a2;
    size_t v6 = malloc_good_size(8 * a2);
    unint64_t v7 = malloc_default_zone();
    unint64_t v8 = (char *)malloc_type_zone_calloc(v7, 1uLL, v6, 0xCC510C36uLL);
    CFArrayRef v9 = v8;
    if (v8)
    {
      if (v4 >= v5) {
        size_t v4 = v5;
      }
      memmove(v8, ptr, v4);
      if (v6 > v4) {
        bzero(&v9[v4], v6 - v4);
      }
      free(ptr);
    }
    return v9;
  }
  else
  {
    return (char *)NSAllocateObjectArray(a2);
  }
}

NSString *__NSGroupAccountNumberToName(gid_t a1)
{
  uint64_t v1 = getgrgid(a1);
  if (!v1 || !v1->gr_name) {
    return 0;
  }

  return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
}

NSString *__NSUserAccountNumberToName(uid_t a1)
{
  uint64_t v1 = getpwuid(a1);
  if (!v1 || !v1->pw_name) {
    return 0;
  }

  return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
}

uint64_t getEnumTagSinglePayload for DateComponents(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 282)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t URL.scheme.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v7 = objc_msgSend(v1, sel_scheme);
    if (v7)
    {
      unint64_t v8 = v7;
      id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      return (uint64_t)v6;
    }
    return 0;
  }
  if (v2)
  {
    if (*(unsigned char *)(v2 + 48) != 1) {
      goto LABEL_6;
    }
    if (!v3) {
      return 0;
    }
    if ((*(unsigned char *)(v3 + 48) & 1) == 0)
    {
LABEL_6:
      uint64_t v5 = String.subscript.getter();
      id v6 = (id)MEMORY[0x185301F50](v5);
      swift_bridgeObjectRelease();
      return (uint64_t)v6;
    }
    return 0;
  }
  __break(1u);
  return result;
}

BOOL NSBOOLFromString(void *a1)
{
  if ([a1 isEqual:@"YES"]) {
    return 1;
  }
  uint64_t v3 = [a1 length];
  uint64_t v2 = 1;
  if (objc_msgSend(a1, "compare:options:range:", @"YES", 1, 0, v3))
  {
    uint64_t v2 = 1;
    if (objc_msgSend(a1, "compare:options:range:", @"Y", 1, 0, v3)) {
      return [a1 integerValue] != 0;
    }
  }
  return v2;
}

uint64_t _NSSortFunctionMany(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a3[4];
  if (v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = *a1;
    uint64_t v8 = *a2;
    unint64_t v9 = a3[3];
    uint64_t v28 = a3[4];
    uint64_t v29 = *a1;
    uint64_t v30 = *a2;
    do
    {
      if (v6 >= v9)
      {
        _NSInitializeCacheLine(v6, a3);
        ++v9;
      }
      uint64_t v10 = *a3;
      uint64_t v11 = *a3 + v5;
      BOOL v12 = *(uint64_t (**)(void, char *, void, void))(v11 + 16);
      if (v12)
      {
        uint64_t result = v12(*(void *)(v11 + 8), sel_compareObject_toObject_, *(void *)(a3[1] + 8 * v7), *(void *)(a3[1] + 8 * v8));
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(v10 + v5);
        unint64_t v15 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16 * v7);
        MethodIMP Implementation = *v15;
        if (!*v15)
        {
          uint64_t v17 = a3[1];
          uint64_t v18 = *(void *)(v17 + 8 * v29);
          if (*(void *)(v10 + v5 + 24)) {
            uint64_t v18 = objc_msgSend(*(id *)(v17 + 8 * v29), "valueForKeyPath:");
          }
          if (v18 == objc_msgSend(MEMORY[0x1E4F1CA98], "null", v28)) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = v18;
          }
          if (v19)
          {
            uint64_t v20 = v10 + v5;
            if (*(void *)(v10 + v5 + 40))
            {
              Class v21 = (objc_class *)objc_opt_class();
              MethodIMP Implementation = (uint64_t (*)(uint64_t, uint64_t, uint64_t))class_getMethodImplementation(v21, *(SEL *)(v20 + 40));
            }
            else
            {
              MethodIMP Implementation = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 8) + 32);
            }
          }
          else
          {
            MethodIMP Implementation = _NSNullCompare;
          }
          *unint64_t v15 = MethodImplementation;
          *(void *)(v14 + 16 * v29 + 8) = v19;
          uint64_t v8 = v30;
        }
        BOOL v22 = (void *)(v14 + 16 * v8);
        if (*v22)
        {
          unint64_t v23 = (void *)v22[1];
        }
        else
        {
          unint64_t v23 = *(void **)(a3[1] + 8 * v8);
          if (*(void *)(v10 + v5 + 24)) {
            unint64_t v23 = objc_msgSend(v23, "valueForKeyPath:");
          }
          if (v23 == objc_msgSend(MEMORY[0x1E4F1CA98], "null", v28)) {
            unint64_t v23 = 0;
          }
          unint64_t v24 = _NSNullCompare;
          if (v23)
          {
            uint64_t v25 = v10 + v5;
            if (*(void *)(v10 + v5 + 40))
            {
              unint64_t v26 = (objc_class *)objc_opt_class();
              unint64_t v24 = class_getMethodImplementation(v26, *(SEL *)(v25 + 40));
            }
            else
            {
              unint64_t v24 = *(void **)(*(void *)(v25 + 8) + 32);
            }
          }
          uint64_t v3 = v28;
          *BOOL v22 = v24;
          *(void *)(v14 + 16 * v30 + 8) = v23;
        }
        uint64_t v7 = v29;
        unint64_t v27 = (uint64_t *)(v10 + v5 + 40);
        if (MethodImplementation == _NSNullCompare) {
          unint64_t v27 = (uint64_t *)&selRef_compare_;
        }
        uint64_t result = _NSCompareObject(*(void *)(v14 + 16 * v29 + 8), (uint64_t)v23, (uint64_t)MethodImplementation, *v27, *(unsigned __int8 *)(v10 + v5 + 32), *(unsigned __int8 *)(v10 + v5 + 33));
        uint64_t v8 = v30;
        if (result) {
          return result;
        }
      }
      ++v6;
      v5 += 48;
    }
    while (v3 != v6);
  }
  return 0;
}

uint64_t _NSCompareObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a1 == a2) {
    return 0;
  }
  if (a1)
  {
    if (a2)
    {
      if (a4) {
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a3)(a1, a4);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
      }
      if (!a5) {
        return -result;
      }
    }
    else
    {
      uint64_t v9 = 1;
      if (((a5 ^ 1) & a6) == 0) {
        uint64_t v9 = -1;
      }
      if (a5 ^ 1 | a6) {
        return v9;
      }
      else {
        return 1;
      }
    }
  }
  else
  {
    uint64_t v8 = -1;
    if (((a5 ^ 1) & a6) == 0) {
      uint64_t v8 = 1;
    }
    if (a5 ^ 1 | a6) {
      return v8;
    }
    else {
      return -1;
    }
  }
  return result;
}

uint64_t _NSAppendPathExtension(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  if (a5 + *a2 + 1 > a3 || a5 >= 1 && *a4 == 47 || !_CFExtensionUniCharsIsValidToAppend()) {
    return 0;
  }
  if (*a2 >= 2)
  {
    uint64_t v9 = *a2 - 1;
    do
    {
      if (a1[v9] != 47) {
        break;
      }
      *a2 = v9;
      unint64_t v10 = v9-- + 1;
    }
    while (v10 > 2);
  }
  int v11 = _CFExecutableLinkedOnOrAfter();
  uint64_t v12 = *a2;
  if (!*a2) {
    return 0;
  }
  if (v12 == 2)
  {
    if (*a1 == 92 && a1[1] == 92) {
      return 0;
    }
    goto LABEL_23;
  }
  if (v12 != 1
    || ((uint64_t v13 = 0, v14 = *a1, !v11) ? (v15 = v14 == 126) : (v15 = 0),
        !v15 ? (char v16 = 0) : (char v16 = 1),
        v14 != 47 && (v16 & 1) == 0))
  {
LABEL_23:
    if (v11 || (uint64_t v17 = v12 - 1, v12 < 1) || *a1 != 126)
    {
LABEL_33:
      *a2 = v12 + 1;
      a1[v12] = 46;
      memmove(&a1[v12 + 1], a4, 2 * a5);
      *a2 += a5;
      return 1;
    }
    if ((unint64_t)v12 >= 2)
    {
      uint64_t v18 = a1 + 1;
      while (1)
      {
        int v19 = *v18++;
        if (v19 == 47) {
          break;
        }
        uint64_t v13 = 0;
        if (!--v17) {
          return v13;
        }
      }
      goto LABEL_33;
    }
    return 0;
  }
  return v13;
}

void *_NSFrameworkPathFromLibraryPath(void *result)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = objc_msgSend((id)objc_msgSend(result, "_stringByResolvingSymlinksInPathUsingCache:", 1), "stringByDeletingLastPathComponent");
    uint64_t v2 = (void *)[v1 pathExtension];
    if (!objc_msgSend(v2, "compare:options:range:", @"framework", 0, 0, objc_msgSend(v2, "length"))) {
      goto LABEL_6;
    }
    uint64_t v3 = (void *)[v1 stringByDeletingLastPathComponent];
    int v4 = (void *)[v3 lastPathComponent];
    uint64_t v5 = objc_msgSend(v4, "compare:options:range:", @"Versions", 0, 0, objc_msgSend(v4, "length"));
    uint64_t result = 0;
    if (!v5)
    {
      uint64_t v1 = (void *)[v3 stringByDeletingLastPathComponent];
      unint64_t v6 = (void *)[v1 pathExtension];
      if (!objc_msgSend(v6, "compare:options:range:", @"framework", 0, 0, objc_msgSend(v6, "length"))
        || (uint64_t v7 = objc_msgSend(v6, "compare:options:range:", @"axbundle", 0, 0, objc_msgSend(v6, "length")),
            uint64_t result = 0,
            !v7))
      {
LABEL_6:
        memset(&v8, 0, sizeof(v8));
        if ([v1 getFileSystemRepresentation:v9 maxLength:1024] && !stat(v9, &v8))
        {
          if (access(v9, 4))
          {
            getpid();
            sandbox_check();
          }
          else if ((v8.st_mode & 0xF000) == 0x4000)
          {
            return v1;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_1817C4A44(_Unwind_Exception *a1)
{
  free(*(void **)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t _NSExpandTildeInPath(uint64_t result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if ((uint64_t)*a2 >= 1)
  {
    uint64_t v3 = result;
    if (*(_WORD *)result == 126)
    {
      if (v2 < 2)
      {
        unint64_t v6 = 0;
        uint64_t v5 = 1;
      }
      else
      {
        uint64_t v5 = 1;
        while (*(_WORD *)(result + 2 * v5) != 47)
        {
          if (v2 == ++v5)
          {
            uint64_t v5 = *a2;
            break;
          }
        }
        if (v5 == 1) {
          unint64_t v6 = 0;
        }
        else {
          unint64_t v6 = +[NSString stringWithCharacters:result + 2 length:v5 - 1];
        }
      }
      uint64_t result = (uint64_t)NSHomeDirectoryForUser(v6);
      if (result)
      {
        uint64_t v7 = (void *)result;
        uint64_t result = [(id)result length];
        uint64_t v8 = *a2 - v5;
        if (v8 + result <= 1024)
        {
          uint64_t v9 = result;
          if ((uint64_t)*a2 > v5) {
            memmove((void *)(v3 + 2 * result), (const void *)(v3 + 2 * v5), 2 * v8);
          }
          uint64_t result = objc_msgSend(v7, "getCharacters:range:", v3, 0, v9);
          *a2 += v9 - v5;
        }
      }
    }
  }
  return result;
}

void _NSStandardizePathUsingCache(unsigned __int16 *a1, uint64_t *a2, int a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  _NSTransmutePathSlashes(a1, a2);
  uint64_t v6 = *a2;
  Class v48 = a2;
  if (*a2 < 2) {
    goto LABEL_9;
  }
  uint64_t v7 = v6 - 1;
  while (a1[v7] == 47)
  {
    *a2 = v7;
    uint64_t v8 = v7 - 1;
    unint64_t v9 = v7-- + 1;
    if (v9 <= 2)
    {
      BOOL v10 = 0;
      uint64_t v6 = v8 + 1;
      goto LABEL_10;
    }
  }
  uint64_t v6 = v7 + 1;
  if (v7 + 1 >= 2 && *a1 == 92) {
    BOOL v10 = a1[1] == 92;
  }
  else {
LABEL_9:
  }
    BOOL v10 = 0;
LABEL_10:
  int HasDotDot = _pathHasDotDot(a1, v6, v10);
  if (HasDotDot)
  {
    uint64_t v49 = v6;
    __memmove_chk();
    _NSResolveSymlinksInPathUsingCache((unsigned __int16 *)__src, &v49, a3);
    uint64_t v6 = v49;
    if (v49 > 1024) {
      return;
    }
    memmove(a1, __src, 2 * v49);
    uint64_t v12 = a2;
    *a2 = v6;
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = -2 * v6;
  uint64_t v14 = 3;
  if (!v10) {
    goto LABEL_17;
  }
LABEL_15:
  if (v6 > 4)
  {
    do
    {
      BOOL v15 = &a1[v6];
      if (*(v15 - 2) != 47 || *(v15 - 1) != 46)
      {
        if (v10)
        {
          uint64_t v14 = 3;
          goto LABEL_33;
        }
        goto LABEL_25;
      }
      v6 -= 2;
      uint64_t *v12 = v6;
      v13 += 4;
      if (v10) {
        goto LABEL_15;
      }
LABEL_17:
      ;
    }
    while (v6 >= 3);
    if (v6 != 2)
    {
      uint64_t v20 = a1 + 1;
      unint64_t v46 = a1 + 4;
      goto LABEL_103;
    }
LABEL_25:
    if (a1[1] == 47)
    {
      uint64_t v16 = 0;
      while (a1[v16] == 46)
      {
        uint64_t v17 = v16 + 2;
        int v18 = a1[v16 + 3];
        v16 += 2;
        if (v18 != 47) {
          goto LABEL_31;
        }
      }
      uint64_t v17 = v16;
      if (!v16) {
        goto LABEL_32;
      }
LABEL_31:
      uint64_t *v12 = v6 - v17;
      memmove(a1, &a1[v17], -(v13 + 2 * v17));
      uint64_t v12 = v48;
      uint64_t v14 = 0;
      uint64_t v6 = *v48;
    }
    else
    {
LABEL_32:
      uint64_t v14 = 0;
    }
  }
LABEL_33:
  if (v6 >= 3)
  {
    while (v14 < v6 - 2)
    {
      int v19 = &a1[v14];
      if (*v19 == 47 && v19[1] == 46 && a1[v14 + 2] == 47)
      {
        memmove(v19 + 1, v19 + 3, 2 * (v6 - v14) - 6);
        uint64_t v12 = v48;
        uint64_t v6 = *v48 - 2;
        *Class v48 = v6;
        --v14;
      }
      if (v6 < 3) {
        break;
      }
      ++v14;
    }
  }
  uint64_t v20 = a1 + 1;
  unint64_t v46 = a1 + 4;
  char v21 = HasDotDot ^ 1;
  if (v6 < 3) {
    char v21 = 1;
  }
  if ((v21 & 1) == 0)
  {
    int v47 = v10;
    while (1)
    {
      if (v10)
      {
        uint64_t v22 = 3;
        if ((unint64_t)v6 >= 4)
        {
          while (a1[v22] != 47)
          {
            if (v6 == ++v22)
            {
              uint64_t v22 = v6;
              break;
            }
          }
        }
        uint64_t v23 = v6 <= v22 + 1 ? v22 + 1 : v6;
        while (1)
        {
          uint64_t v24 = v22 + 1;
          if (v22 + 1 >= v6) {
            break;
          }
          int v25 = v20[v22++];
          if (v25 == 47) {
            goto LABEL_58;
          }
        }
        uint64_t v24 = v23;
      }
      else
      {
        uint64_t v24 = 0;
      }
LABEL_58:
      uint64_t v26 = v6 - 2;
      if (v24 >= v6 - 2)
      {
        BOOL v30 = 1;
      }
      else
      {
        unint64_t v27 = &a1[v24];
        do
        {
          if ((unint64_t)v6 >= 4
            && v24 < v6 - 4
            && *v27 == 47
            && a1[v24 + 1] == 46
            && a1[v24 + 2] == 46
            && a1[v24 + 3] == 47)
          {
            memmove(v27 + 1, v27 + 4, 2 * (v6 - v24) - 8);
            uint64_t v12 = v48;
            uint64_t v6 = *v48 - 3;
            *Class v48 = v6;
            uint64_t v28 = v24 - 1;
          }
          else
          {
            uint64_t v28 = v24;
          }
          if (v6 >= 3 && v28 == v6 - 3 && a1[v28] == 47)
          {
            uint64_t v29 = &a1[v28];
            if (v29[1] == 46 && v29[2] == 46)
            {
              v6 -= 2;
              uint64_t *v12 = v6;
            }
          }
          uint64_t v26 = v6 - 2;
          BOOL v30 = v6 > 2;
          if (v6 < 3) {
            break;
          }
          uint64_t v31 = v28 + 1;
          if (v31 >= v26) {
            break;
          }
        }
        while (v24 == v31);
      }
      if (v30 && v24 < v6)
      {
        while (v24 + 1 < v26)
        {
          uint64_t v32 = 0;
          unint64_t v33 = &a1[v24 + 3];
          size_t v34 = 2 * (v6 - 5 - v24);
          while (*(v33 - 2) != 47)
          {
            ++v33;
            ++v32;
            v34 -= 2;
            if (!(1 - v26 + v24 + v32)) {
              goto LABEL_96;
            }
          }
          uint64_t v35 = v24 + v32 + 1;
          if (v6 >= 4 && v35 < v6 - 4 && *(v33 - 1) == 46 && *v33 == 46 && v33[1] == 47)
          {
            uint64_t *v12 = v6 - v32 - 4;
            unint64_t v37 = v12;
            memmove(&v20[v24], v33 + 2, v34);
            uint64_t v6 = *v37;
            break;
          }
          if (!(v24 + v32 + 4 - v6) && a1[v6 - 3] == 47 && a1[v6 - 2] == 46 && a1[v6 - 1] == 46)
          {
            uint64_t *v12 = v24 + 1;
            uint64_t v6 = v24 + 1;
            break;
          }
          v24 += v32 + 1;
          if (v35 >= v6) {
            break;
          }
        }
      }
LABEL_96:
      BOOL v10 = v47;
      char v36 = _pathHasDotDot(a1, v6, v47);
      if (v6 <= 2) {
        break;
      }
      uint64_t v12 = v48;
      if ((v36 & 1) == 0) {
        goto LABEL_103;
      }
    }
    uint64_t v12 = v48;
  }
LABEL_103:
  _NSTransmutePathSlashes(a1, v12);
  uint64_t v38 = *v48;
  if (*v48 < 2) {
    return;
  }
  while (a1[v38 - 1] == 47)
  {
    *Class v48 = --v38;
    if ((unint64_t)(v38 + 1) <= 2) {
      return;
    }
  }
  memset(__src, 0, 144);
  if (v38 < 23)
  {
    if (v38 < 15)
    {
      if (v38 < 9 || *a1 != 47) {
        return;
      }
      int v39 = *v20;
      goto LABEL_157;
    }
    if (*a1 != 47) {
      return;
    }
    int v39 = *v20;
  }
  else
  {
    if (*a1 != 47) {
      return;
    }
    int v39 = *v20;
    if (v39 == 112)
    {
      if (a1[2] == 114
        && a1[3] == 105
        && *v46 == 118
        && a1[5] == 97
        && a1[6] == 116
        && a1[7] == 101
        && a1[8] == 47
        && a1[9] == 118
        && a1[10] == 97
        && a1[11] == 114
        && a1[12] == 47
        && a1[13] == 97
        && a1[14] == 117
        && a1[15] == 116
        && a1[16] == 111
        && a1[17] == 109
        && a1[18] == 111
        && a1[19] == 117
        && a1[20] == 110
        && a1[21] == 116)
      {
        char v40 = a1 + 22;
        if (a1[22] == 47)
        {
          if ((_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 22, v38 - 22) & 1) == 0)
          {
            BOOL v41 = _NSFileExistsAtPath(+[NSFileManager defaultManager], (uint64_t)(a1 + 22), *v48 - 22, __src);
            unint64_t v42 = v48;
            if (v41)
            {
              uint64_t v43 = *v48 - 22;
LABEL_168:
              uint64_t *v42 = v43;
              memmove(a1, v40, 2 * v43);
              return;
            }
          }
          return;
        }
      }
LABEL_158:
      if (a1[2] == 114 && a1[3] == 105 && *v46 == 118 && a1[5] == 97 && a1[6] == 116 && a1[7] == 101)
      {
        char v40 = a1 + 8;
        if (a1[8] == 47 && (_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 8, v38 - 8) & 1) == 0)
        {
          BOOL v45 = _NSFileExistsAtPath(+[NSFileManager defaultManager], (uint64_t)(a1 + 8), *v48 - 8, __src);
          unint64_t v42 = v48;
          if (v45)
          {
            uint64_t v43 = *v48 - 8;
            goto LABEL_168;
          }
        }
      }
      return;
    }
  }
  if (v39 != 118)
  {
LABEL_157:
    if (v39 != 112) {
      return;
    }
    goto LABEL_158;
  }
  if (a1[2] == 97
    && a1[3] == 114
    && *v46 == 47
    && a1[5] == 97
    && a1[6] == 117
    && a1[7] == 116
    && a1[8] == 111
    && a1[9] == 109
    && a1[10] == 111
    && a1[11] == 117
    && a1[12] == 110
    && a1[13] == 116)
  {
    char v40 = a1 + 14;
    if (a1[14] == 47 && (_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 14, v38 - 14) & 1) == 0)
    {
      BOOL v44 = _NSFileExistsAtPath(+[NSFileManager defaultManager], (uint64_t)(a1 + 14), *v48 - 14, __src);
      unint64_t v42 = v48;
      if (v44)
      {
        uint64_t v43 = *v48 - 14;
        goto LABEL_168;
      }
    }
  }
}

uint64_t _pathHasDotDot(unsigned __int16 *a1, uint64_t a2, int a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = *a1;
  BOOL v6 = v4 != 126 && v4 != 47;
  if (a2 != 1 && !v6)
  {
    if (a3)
    {
      uint64_t v7 = 3;
      if ((unint64_t)a2 >= 4)
      {
        while (a1[v7] != 47)
        {
          if (a2 == ++v7)
          {
            uint64_t v7 = a2;
            break;
          }
        }
      }
      uint64_t v8 = v7 + 1;
      if (a2 <= v7 + 1) {
        uint64_t v9 = v7 + 1;
      }
      else {
        uint64_t v9 = a2;
      }
      uint64_t v10 = v9 - 1;
      while (v8 < a2)
      {
        int v11 = a1[v8++];
        if (v11 == 47)
        {
          uint64_t v10 = v8 - 2;
          break;
        }
      }
      uint64_t v12 = v10 + 2;
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v12 < a2 - 1)
    {
      uint64_t v13 = v12 + 2;
      for (uint64_t i = &a1[v12 + 1]; ; ++i)
      {
        if (*(i - 1) != 46 || *i != 46) {
          goto LABEL_38;
        }
        if (a2 >= 3 && v13 == 2) {
          break;
        }
        if (v13 - 2 < 1 || *(i - 2) != 47) {
          goto LABEL_38;
        }
        if (v13 < a2)
        {
          int v15 = i[1];
LABEL_31:
          if (v15 == 47) {
            return 1;
          }
          goto LABEL_38;
        }
        if (v13 == a2) {
          return 1;
        }
LABEL_38:
        if (++v13 - a2 == 1) {
          return 0;
        }
      }
      int v15 = a1[2];
      goto LABEL_31;
    }
    return 0;
  }
  return v3;
}

BOOL _NSTransmutePathSlashes(_WORD *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 >= 2 && *a1 == 92) {
    uint64_t v3 = 2 * (a1[1] == 92);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 >= v2)
  {
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = v3;
    while (1)
    {
      int v5 = (unsigned __int16)a1[v3];
      if (v5 == 47) {
        break;
      }
      uint64_t v8 = v3 + 1;
      a1[v4] = v5;
LABEL_16:
      ++v4;
      uint64_t v3 = v8;
      if (v8 >= v2) {
        goto LABEL_20;
      }
    }
    a1[v4] = 47;
    if (v2 <= v3 + 1) {
      uint64_t v6 = v3 + 1;
    }
    else {
      uint64_t v6 = v2;
    }
    uint64_t v7 = v6 - 1;
    while (v7 != v3)
    {
      uint64_t v8 = v3 + 1;
      int v9 = (unsigned __int16)a1[++v3];
      if (v9 != 47) {
        goto LABEL_16;
      }
    }
    ++v4;
  }
LABEL_20:
  *a2 = v4;
  return v2 != v4;
}

uint64_t _NSAppendPathComponent(unsigned __int16 *a1, uint64_t *a2, int64_t a3, void *__src, int64_t a5)
{
  if (!a5) {
    return 1;
  }
  uint64_t v7 = *a2;
  if (*a2)
  {
    if (v7 == 1)
    {
      int v8 = 47;
      int v9 = a1;
    }
    else
    {
      if (v7 != 2 || (int v8 = *a1, v8 != 92))
      {
        BOOL v11 = 1;
LABEL_13:
        if (v7 + a5 + v11 > a3) {
          return 0;
        }
        if (v11)
        {
          a1[v7++] = 47;
          *a2 = v7;
        }
        goto LABEL_17;
      }
      int v9 = a1 + 1;
    }
    BOOL v11 = *v9 != v8;
    goto LABEL_13;
  }
  if (a5 > a3) {
    return 0;
  }
  uint64_t v7 = 0;
LABEL_17:
  memmove(&a1[v7], __src, 2 * a5);
  *a2 += a5;
  return 1;
}

uint64_t _NSStandardizePathRewriteAutomountIsPathExcluded(_WORD *a1, uint64_t a2)
{
  uint64_t v2 = _NSStandardizePathRewriteAutomountIsPathExcluded_exclusionList;
  uint64_t v3 = "/Applications";
  while (1)
  {
    char v4 = *v3;
    if (!*v3) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v6 = (unsigned __int8 *)(v3 + 1);
    while (a2 > (v5 * 2) >> 1 && (unsigned __int16)a1[v5] == (unsigned __int16)v4)
    {
      int v7 = *v6++;
      char v4 = v7;
      ++v5;
      if (!v7)
      {
        int v8 = &a1[v5];
        goto LABEL_9;
      }
    }
LABEL_11:
    int v9 = v2[1];
    ++v2;
    uint64_t v3 = v9;
    if (!v9) {
      return 0;
    }
  }
  int v8 = a1;
LABEL_9:
  if (a2 > v8 - a1 && *v8 != 47) {
    goto LABEL_11;
  }
  return 1;
}

NSFunctionExpression *CreateFunctionExpression(NSString *a1, void *a2)
{
  p_super = a1;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [@"tokenize" compare:a1 options:1];
  uint64_t v5 = [a2 count];
  if (v4)
  {
    if (v5 != 1 || [(NSString *)p_super hasSuffix:@":"])
    {
      int v6 = 0;
      goto LABEL_9;
    }
    int v7 = [(NSString *)[NSMutableString alloc] initWithString:p_super];
    p_super = &v7->super;
    int v8 = @":";
  }
  else
  {
    if (v5 != 2)
    {
      uint64_t v14 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v15 = *MEMORY[0x1E4F1C3C8];
      uint64_t v16 = @"Invalid number of parameters to tokenize";
      goto LABEL_22;
    }
    int v7 = [(NSString *)[NSMutableString alloc] initWithString:p_super];
    p_super = &v7->super;
    int v8 = @":using:";
  }
  [(NSMutableString *)v7 appendString:v8];
  int v6 = 1;
LABEL_9:
  int v9 = NSSelectorFromString(p_super);
  self;
  if ([*(id *)_CFPredicatePolicyData() objectForKey:p_super])
  {
    LOBYTE(v10) = 0;
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    self;
    BOOL v11 = _NSOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      int v18 = p_super;
      _os_log_fault_impl(&dword_181795000, v11, OS_LOG_TYPE_FAULT, "NSPredicate: Use of '%{public}@' as an NSExpression function is forbidden.", buf, 0xCu);
    }
    self;
    unint64_t v10 = ((unint64_t)_CFPredicatePolicyData_getFlags() >> 3) & 1;
    if (!v9) {
      goto LABEL_19;
    }
  }
  if (v10 & 1 | ((objc_opt_respondsToSelector() & 1) == 0))
  {
LABEL_19:
    uint64_t v13 = +[NSString stringWithFormat:@"Unable to parse function name '%@' into supported selector (%s) ", p_super, sel_getName(v9)];
    if (v6) {

    }
    uint64_t v14 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v15 = *MEMORY[0x1E4F1C3C8];
    uint64_t v16 = (__CFString *)v13;
LABEL_22:
    objc_exception_throw((id)[v14 exceptionWithName:v15 reason:v16 userInfo:0]);
  }
  if (v6) {

  }
  return [[NSFunctionExpression alloc] initWithSelector:v9 argumentArray:a2];
}

uint64_t _NSStartOfPathExtension(uint64_t a1, uint64_t a2)
{
  if (a2 >= 2)
  {
    uint64_t v3 = a2;
    do
    {
      uint64_t v2 = v3 - 1;
      if (v3 == 1) {
        break;
      }
      int v4 = *(unsigned __int16 *)(a1 - 4 + 2 * v3--);
    }
    while (v4 != 47);
  }
  else
  {
    uint64_t v2 = 0;
  }
  _CFGetPathExtensionRangesFromPathComponentUniChars();
  return v2 - 1;
}

NSString *__cdecl NSHomeDirectoryForUser(NSString *userName)
{
  uint64_t v1 = (void *)CFCopyHomeDirectoryURLForUser();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (void *)[v1 path];
    CFRelease(v2);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return (NSString *)[v3 stringByStandardizingPath];
}

BOOL static Measurement<>.FormatStyle.UnitWidth.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Foundation::Date __swiftcall Date.init(timeIntervalSince1970:)(Swift::Double timeIntervalSince1970)
{
  result._time = timeIntervalSince1970 + -978307200.0;
  *uint64_t v1 = result._time;
  return result;
}

BOOL _PlistUnkeyedDecodingContainer.isAtEnd.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48)) >= *(void *)(v1 + *(int *)(a1 + 44));
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2)
{
  return _PlistKeyedDecodingContainer.contains(_:)(a1, a2, *(void *)(v2 + 8));
}

void NSZoneFree(NSZone *zone, void *ptr)
{
  if (zone) {
    malloc_zone_free((malloc_zone_t *)zone, ptr);
  }
  else {
    free(ptr);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for IndexPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of IndexPath.Storage(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t outlined copy of IndexPath.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexSet()
{
  return &type metadata for IndexSet;
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = range1.location + range1.length;
  if (range1.location + range1.length <= range2.location + range2.length) {
    NSUInteger v2 = range2.location + range2.length;
  }
  if (range1.location >= range2.location) {
    range1.location = range2.location;
  }
  range1.length = v2 - range1.location;
  return range1;
}

BOOL __NSOperationImplicitObservationArrayEqualCallback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void Data._Representation.count.setter(int64_t a1)
{
  NSUInteger v2 = v1;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  unint64_t v4 = v2[1];
  unint64_t v5 = a1;
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v16 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v31 = v3;
      uint64_t v32 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      if (!(a1 | (v3 << 32))) {
        goto LABEL_31;
      }
      if (v3 << 32) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = a1 <= 14;
      }
      if (v17)
      {
        uint64_t v11 = specialized Data.InlineData.init(_:count:)(v3, v4 & 0x3FFFFFFFFFFFFFFFLL, a1);
        uint64_t v23 = v22;
        outlined consume of Data._Representation(v3, v4);
        unint64_t v14 = v23 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_47;
      }
      uint64_t v18 = (int)v3;
      if (__OFADD__(a1, (int)v3)) {
        goto LABEL_50;
      }
      if (a1 + (int)v3 > 2147483646)
      {
        uint64_t v27 = v3 >> 32;
        if (v27 < v18) {
          goto LABEL_52;
        }
        type metadata accessor for Data.RangeReference();
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v18;
        *(void *)(v28 + 24) = v27;
        uint64_t v29 = v28;
        uint64_t v30 = v16;
        Data.LargeSlice.count.setter(v5);
        uint64_t v11 = v29;
        uint64_t v26 = v30;
LABEL_44:
        unint64_t v14 = v26 | 0x8000000000000000;
        goto LABEL_47;
      }
      if (__OFSUB__(HIDWORD(v3), v3))
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
      }
      if (HIDWORD(v3) - v3 == a1) {
        return;
      }
LABEL_26:
      Data.InlineSlice.count.setter(v5);
      uint64_t v11 = v31;
      unint64_t v14 = v32 | 0x4000000000000000;
LABEL_47:
      *NSUInteger v2 = v11;
      v2[1] = v14;
      return;
    case 2uLL:
      uint64_t v31 = v3;
      uint64_t v32 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v9 = *(void *)(v3 + 16);
      if (a1)
      {
        if (v9) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = a1 <= 14;
        }
        if (v10)
        {
          uint64_t v11 = specialized Data.InlineData.init(_:count:)(v3, v4 & 0x3FFFFFFFFFFFFFFFLL, a1);
          uint64_t v13 = v12;
          swift_release();
          swift_release();
          unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_47;
        }
      }
      else if (!v9)
      {
LABEL_31:
        outlined consume of Data._Representation(v3, v4);
LABEL_32:
        uint64_t v11 = 0;
        unint64_t v14 = 0xC000000000000000;
        goto LABEL_47;
      }
      uint64_t v19 = *(void *)(v3 + 24);
      BOOL v20 = __OFSUB__(v19, v9);
      uint64_t v21 = v19 - v9;
      if (v20)
      {
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      if (v21 == a1) {
        return;
      }
LABEL_41:
      Data.LargeSlice.count.setter(v5);
      uint64_t v11 = v31;
      uint64_t v26 = v32;
      goto LABEL_44;
    case 3uLL:
      if (!a1) {
        return;
      }
      if (a1 < 15)
      {
        if (a1 < 0) {
          goto LABEL_53;
        }
        uint64_t v11 = 0;
        unint64_t v14 = (unint64_t)a1 << 48;
      }
      else
      {
        type metadata accessor for __DataStorage();
        uint64_t v15 = swift_allocObject();
        __DataStorage.init(length:)(v5);
        if (v5 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = 0;
          *(void *)(v11 + 24) = v5;
          unint64_t v14 = v15 | 0x8000000000000000;
        }
        else
        {
          uint64_t v11 = v5 << 32;
          unint64_t v14 = v15 | 0x4000000000000000;
        }
      }
      goto LABEL_47;
    default:
      uint64_t v29 = v3;
      LOWORD(v30) = v4;
      BYTE2(v30) = BYTE2(v4);
      unint64_t v6 = HIDWORD(v4);
      BYTE3(v30) = BYTE3(v4);
      unint64_t v7 = v4 >> 40;
      BYTE4(v30) = BYTE4(v4);
      BYTE5(v30) = BYTE5(v4);
      if (!a1) {
        goto LABEL_32;
      }
      if (a1 < 15)
      {
        if (a1 == BYTE6(v4)) {
          return;
        }
        if (a1 <= BYTE6(v4))
        {
          if (a1 < 0)
          {
LABEL_53:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
        }
        else
        {
          BYTE6(v30) = a1;
          bzero((char *)&v29 + BYTE6(v4), a1 - BYTE6(v4));
          LOBYTE(v6) = BYTE4(v30);
          LOBYTE(v7) = BYTE5(v30);
          LOBYTE(v5) = BYTE6(v30);
        }
        uint64_t v11 = v29;
        unint64_t v14 = v30 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v5 << 48);
        goto LABEL_47;
      }
      if ((unint64_t)a1 < 0x7FFFFFFF)
      {
        uint64_t v31 = v3;
        LOWORD(v32) = v4;
        BYTE2(v32) = BYTE2(v4);
        BYTE3(v32) = BYTE3(v4);
        BYTE4(v32) = BYTE4(v4);
        BYTE5(v32) = BYTE5(v4);
        type metadata accessor for __DataStorage();
        uint64_t v8 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v31, BYTE6(v4));
        LODWORD(v31) = 0;
        HIDWORD(v31) = BYTE6(v4);
        uint64_t v32 = v8;
        goto LABEL_26;
      }
      uint64_t v31 = v3;
      LOWORD(v32) = v4;
      BYTE2(v32) = BYTE2(v4);
      BYTE3(v32) = BYTE3(v4);
      BYTE4(v32) = BYTE4(v4);
      BYTE5(v32) = BYTE5(v4);
      type metadata accessor for __DataStorage();
      uint64_t v24 = swift_allocObject();
      __DataStorage.init(bytes:length:)((unint64_t)&v31, BYTE6(v4));
      type metadata accessor for Data.RangeReference();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = 0;
      *(void *)(v25 + 24) = BYTE6(v4);
      uint64_t v31 = v25;
      uint64_t v32 = v24;
      goto LABEL_41;
  }
}

void Data.InlineSlice.count.setter(uint64_t a1)
{
  Data.InlineSlice.ensureUniqueReference()();
  int v3 = *v1;
  uint64_t v4 = v1[1];
  int v5 = v4 - *v1;
  if (__OFSUB__(v4, *v1))
  {
    __break(1u);
    goto LABEL_15;
  }
  BOOL v6 = __OFSUB__(a1, v5);
  uint64_t v7 = a1 - v5;
  if (v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v7 >= 1)
  {
    uint64_t v8 = v4 + v7;
    if (__OFADD__(v4, v7))
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v8 < v4)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    __DataStorage.resetBytes(in:)(v4, v8);
LABEL_9:
    if (a1 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (a1 <= 0x7FFFFFFF)
      {
        int v10 = v3 + a1;
        if (!__OFADD__(v3, a1))
        {
          if (v10 >= v3)
          {
            *uint64_t v1 = v3;
            v1[1] = v10;
            return;
          }
          goto LABEL_19;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(*((void *)v1 + 1) + 24);
  if (!__OFADD__(v9, v7))
  {
    __DataStorage.setLength(_:)(v9 + v7);
    goto LABEL_9;
  }
LABEL_22:
  __break(1u);
}

void __DataStorage.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[5];
  Swift::Int v4 = a1 - v3;
  if (__OFSUB__(a1, v3))
  {
    __break(1u);
    goto LABEL_17;
  }
  Swift::Int v5 = a2 - v3;
  if (__OFSUB__(a2, v3))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v5 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (__OFSUB__(v5, v4))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v5 == v4) {
    return;
  }
  if (v2[3] >= v5)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  }
  else
  {
    if (v5 >= v2[4]) {
      __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v5, 0);
    }
    v2[3] = v5;
  }
  uint64_t v6 = v2[2];
  if (!v6)
  {
LABEL_20:
    __break(1u);
    return;
  }

  bzero((void *)(v6 + v4), v5 - v4);
}

uint64_t __DataStorage.init(capacity:)(uint64_t result)
{
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  if (result > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
  }
  else
  {
    int64_t v1 = result;
    if (one-time initialization token for vmOpsThreshold == -1) {
      goto LABEL_3;
    }
  }
  uint64_t result = swift_once();
LABEL_3:
  if (static __DataStorage.vmOpsThreshold > v1) {
    goto LABEL_10;
  }
  if (one-time initialization token for _pageSize != -1) {
    uint64_t result = swift_once();
  }
  Swift::Int v3 = _pageSize + v1;
  if (__OFADD__(_pageSize, v1))
  {
    __break(1u);
    goto LABEL_15;
  }
  BOOL v4 = __OFSUB__(v3, 1);
  Swift::Int v5 = v3 - 1;
  if (v4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (__OFSUB__(_pageSize, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int64_t v1 = v5 & ~(_pageSize - 1);
LABEL_10:
  *(void *)(v2 + 24) = 0;
  unsigned int v6 = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v6 + 1);
  uint64_t result = (uint64_t)malloc_type_malloc(v1, (unint64_t)v6 << 32);
  if (result)
  {
    *(void *)(v2 + 16) = result;
    *(unsigned char *)(v2 + 64) = 1;
    *(void *)(v2 + 32) = v1;
    *(void *)(v2 + 40) = 0;
    return v2;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t XMLPlistMap.Value.dataValue<A>(in:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a1;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v16);
  BOOL v20 = (char *)&v36 - v18;
  if (a4 >> 60 == 3)
  {
    MEMORY[0x1F4188790](v17);
    *(&v36 - 4) = a5;
    *(&v36 - 3) = a6;
    *(&v36 - 2) = a2;
    *(&v36 - 1) = a3;
    uint64_t v21 = *(void *)(v36 + 24);
    *(double *)&long long v23 = MEMORY[0x1F4188790](v22);
    *(&v36 - 4) = (uint64_t)partial apply for closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:);
    *(&v36 - 3) = v24;
    *((_OWORD *)&v36 - 1) = v23;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v21 + 40));
    uint64_t v25 = v37;
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v21 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 40));
    uint64_t result = swift_release();
    if (!v25) {
      return v40;
    }
  }
  else
  {
    uint64_t v36 = a6;
    unint64_t v37 = a4;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
    v27((char *)&v36 - v18, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v27)(v15, v20, v12);
    uint64_t v28 = v39;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v15, 1, a5) == 1)
    {
      uint64_t v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v15, v12);
      _CodingPathNode.path.getter(a2);
      v29(v20, v12);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v38, v15, a5);
      uint64_t v30 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v32 = v36;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      size_t v34 = v38;
      (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 16))(boxed_opaque_existential_1, v38, a5);
      uint64_t v40 = v30;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v34, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Data, v37, v35);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t static _BPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BPlistMap.Value.dataValue<A>(in:for:_:)(a2, a3, a4, a1, a5, a6);
}

uint64_t BPlistMap.Value.dataValue<A>(in:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  unint64_t v36 = a2;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v16);
  BOOL v20 = (char *)&v34 - v18;
  if (a4 >> 60 == 4)
  {
    uint64_t v21 = *(void *)(a1 + 64);
    *(double *)&long long v22 = MEMORY[0x1F4188790](v17);
    *(&v34 - 4) = (uint64_t)closure #1 in BPlistMap.Value.dataValue<A>(in:for:_:);
    *(&v34 - 3) = 0;
    *((_OWORD *)&v34 - 1) = v22;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v21 + 40));
    uint64_t v23 = v35;
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v21 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 40));
    if (v23)
    {
      uint64_t result = swift_release();
      __break(1u);
    }
    else
    {
      swift_release();
      return v38;
    }
  }
  else
  {
    uint64_t v35 = a4;
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
    v25((char *)&v34 - v18, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v25)(v15, v20, v12);
    uint64_t v26 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v15, 1, a5) == 1)
    {
      uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
      v27(v15, v12);
      _CodingPathNode.path.getter(v36);
      v27(v20, v12);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v11, v15, a5);
      uint64_t v28 = _CodingPathNode.path.getter(v36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v30 = v34;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v30;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(boxed_opaque_existential_1, v11, a5);
      uint64_t v38 = v28;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, a5);
    }
    uint64_t v32 = v35;
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Data, v32, v33);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

void *partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(void *result)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v4 = result[1];
  BOOL v5 = v4 < v2 + v3 || v4 < v2;
  if (!v5 && ((v2 | v3) & 0x8000000000000000) == 0 && v4 > v3) {
    return (void *)(*(uint64_t (**)(uint64_t))(v1 + 16))(*result + v3);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in BPlistMap.Value.dataValue<A>(in:for:_:)@<X0>(unsigned char *__src@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2)
  {
    if (a2 <= 14)
    {
      uint64_t result = specialized Data.InlineData.init(_:)(__src, &__src[a2]);
      unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      unint64_t v6 = (unint64_t)__DataStorage.init(bytes:length:)((unint64_t)__src, a2);
      if ((unint64_t)a2 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = a2;
        unint64_t v8 = v6 | 0x8000000000000000;
      }
      else
      {
        uint64_t result = a2 << 32;
        unint64_t v8 = v6 | 0x4000000000000000;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v8 = 0xC000000000000000;
  }
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t partial apply for closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:)(a1, a2, a3, a4, *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 16), *(void *)(v5 + 24), a5);
}

uint64_t closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (a2 < 1)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_55:
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    unint64_t v61 = &protocol witness table for <A> [A];
    uint64_t v59 = v16;
    uint64_t v38 = __swift_project_boxed_opaque_existential_1(&v59, v60);
    uint64_t v39 = (unsigned char *)(*v38 + 32);
    uint64_t v40 = &v39[*(void *)(*v38 + 16)];
    swift_bridgeObjectRetain();
    uint64_t v41 = specialized Data._Representation.init(_:)(v39, v40);
    uint64_t v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
    uint64_t result = swift_bridgeObjectRelease();
    *a9 = v41;
    a9[1] = v43;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = result;
    unint64_t v11 = result + a2;
    if (a3 + a4 - (result + a2) >= 0)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v58 = result - a3;
      uint64_t v16 = MEMORY[0x1E4FBC860];
      uint64_t v56 = result;
      unint64_t v57 = result + a2;
      while (1)
      {
        uint64_t v18 = (unsigned __int8 *)(v10 + v12);
        if (v11 < v10 + v12) {
          break;
        }
        if (v58 + v12 < 0) {
          goto LABEL_58;
        }
        if (v9 < 0) {
          goto LABEL_59;
        }
        unint64_t v19 = *v18;
        if (v19 == 61)
        {
          BOOL v20 = __OFADD__(v15++, 1);
          if (v20) {
            goto LABEL_62;
          }
        }
        else
        {
          if (v19 == 60) {
            goto LABEL_55;
          }
          uint64_t result = isspace(*v18);
          if (result) {
            uint64_t v15 = 0;
          }
        }
        if (one-time initialization token for dataDecodeTable != -1) {
          uint64_t result = swift_once();
        }
        if (*((void *)dataDecodeTable._rawValue + 2) <= v19)
        {
          swift_bridgeObjectRelease();
          _StringGuts.grow(_:)(59);
          v44._uint64_t countAndFlagsBits = 0xD000000000000023;
          v44._unint64_t object = (void *)0x80000001823AA800;
          String.append(_:)(v44);
          uint64_t v62 = a3;
          uint64_t v63 = a4;
          uint64_t v64 = v10;
          uint64_t v65 = v10 + v12;
          unint64_t v66 = v11;
          uint64_t v67 = BufferReader.lineNumber.getter();
          v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v45);
          swift_bridgeObjectRelease();
          v46._unint64_t object = (void *)0x80000001823AA830;
          v46._uint64_t countAndFlagsBits = 0xD000000000000014;
          String.append(_:)(v46);
          LOBYTE(v67) = v19;
          lazy protocol witness table accessor for type UInt8 and conformance UInt8();
          v47._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          type metadata accessor for DecodingError();
          swift_allocError();
          static DecodingError._dataCorrupted<A>(_:for:_:)(0, 0xE000000000000000, a5, a6, a7, a8, v48);
          swift_bridgeObjectRelease();
          return swift_willThrow();
        }
        uint64_t v21 = *((void *)dataDecodeTable._rawValue + v19 + 4);
        if ((v21 & 0x8000000000000000) == 0)
        {
          BOOL v20 = __OFADD__(v13++, 1);
          if (v20) {
            goto LABEL_60;
          }
          BOOL v20 = __OFADD__(v21, v14 << 6);
          unint64_t v14 = v21 + (v14 << 6);
          if (v20) {
            goto LABEL_61;
          }
          if ((v13 & 3) == 0)
          {
            if (v15)
            {
              if (v15 == 1)
              {
                int64_t v31 = *(void *)(v16 + 16);
                int64_t v32 = v31 + 2;
                if (__OFADD__(v31, 2)) {
                  goto LABEL_65;
                }
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if (!result || (unint64_t v33 = *(void *)(v16 + 24), v34 = v33 >> 1, (uint64_t)(v33 >> 1) < v32))
                {
                  if (v31 <= v32) {
                    int64_t v35 = v31 + 2;
                  }
                  else {
                    int64_t v35 = v31;
                  }
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v35, 1, (char *)v16);
                  uint64_t v16 = result;
                  unint64_t v33 = *(void *)(result + 24);
                  unint64_t v34 = v33 >> 1;
                }
                unint64_t v36 = *(void *)(v16 + 16);
                unint64_t v29 = v36 + 1;
                if (v34 <= v36)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v36 + 1, 1, (char *)v16);
                  uint64_t v16 = result;
                  unint64_t v33 = *(void *)(result + 24);
                  unint64_t v34 = v33 >> 1;
                }
                *(void *)(v16 + 16) = v29;
                *(unsigned char *)(v16 + v36 + 32) = BYTE2(v14);
                int64_t v30 = v36 + 2;
                if ((uint64_t)v34 < v30)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v30, 1, (char *)v16);
                  uint64_t v16 = result;
                }
                unint64_t v17 = v14 >> 8;
              }
              else
              {
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
                  uint64_t v16 = result;
                }
                unint64_t v17 = v14 >> 16;
                unint64_t v29 = *(void *)(v16 + 16);
                unint64_t v37 = *(void *)(v16 + 24);
                int64_t v30 = v29 + 1;
                if (v29 >= v37 >> 1)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v29 + 1, 1, (char *)v16);
                  uint64_t v16 = result;
                  unint64_t v17 = v14 >> 16;
                }
              }
            }
            else
            {
              int64_t v22 = *(void *)(v16 + 16);
              int64_t v23 = v22 + 3;
              if (__OFADD__(v22, 3)) {
                goto LABEL_63;
              }
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if (!result || (unint64_t v24 = *(void *)(v16 + 24), v25 = v24 >> 1, (uint64_t)(v24 >> 1) < v23))
              {
                if (v22 <= v23) {
                  int64_t v26 = v22 + 3;
                }
                else {
                  int64_t v26 = v22;
                }
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v26, 1, (char *)v16);
                uint64_t v16 = result;
                unint64_t v24 = *(void *)(result + 24);
                int64_t v25 = v24 >> 1;
              }
              unint64_t v27 = *(void *)(v16 + 16);
              unint64_t v28 = v27 + 1;
              if (v25 <= v27)
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v27 + 1, 1, (char *)v16);
                uint64_t v16 = result;
                unint64_t v24 = *(void *)(result + 24);
                int64_t v25 = v24 >> 1;
              }
              *(void *)(v16 + 16) = v28;
              *(unsigned char *)(v16 + v27 + 32) = BYTE2(v14);
              unint64_t v29 = v27 + 2;
              if (v25 < (uint64_t)(v27 + 2))
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v27 + 2, 1, (char *)v16);
                uint64_t v16 = result;
                unint64_t v24 = *(void *)(result + 24);
                int64_t v25 = v24 >> 1;
              }
              *(void *)(v16 + 16) = v29;
              *(unsigned char *)(v16 + v28 + 32) = BYTE1(v14);
              int64_t v30 = v27 + 3;
              if (v25 < (uint64_t)(v27 + 3))
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v27 + 3, 1, (char *)v16);
                uint64_t v16 = result;
              }
              LOBYTE(v17) = v14;
              uint64_t v10 = v56;
            }
            *(void *)(v16 + 16) = v30;
            *(unsigned char *)(v16 + v29 + 32) = v17;
            unint64_t v11 = v57;
          }
        }
        ++v12;
        --v9;
        if (v11 < v10 + v12 + 1) {
          goto LABEL_55;
        }
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
    }
    __break(1u);
LABEL_65:
    __break(1u);
  }
  return result;
}

uint64_t specialized Data.init(repeating:count:)(int a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = specialized Data.init(count:)(a2);
  uint64_t v6 = v4;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (void *)(v5 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      int64_t v9 = (int)v6;
      uint64_t v2 = v6 >> 32;
      if (result) {
        goto LABEL_27;
      }
      uint64_t v10 = v2 - (int)v6;
      if (v2 < (int)v6) {
        goto LABEL_39;
      }
      uint64_t v11 = v7[2];
      if (!v11) {
        goto LABEL_25;
      }
      uint64_t v12 = v7[5];
      BOOL v13 = __OFSUB__((int)v6, v12);
      uint64_t v14 = (int)v6 - v12;
      if (v13) {
        goto LABEL_41;
      }
      unint64_t v15 = v11 + v14;
      goto LABEL_26;
    case 2uLL:
      uint64_t v16 = (void *)(v5 & 0x3FFFFFFFFFFFFFFFLL);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v17 = *(void *)(v6 + 24);
      uint64_t v18 = v16[2];
      if (v18)
      {
        uint64_t v19 = v16[5];
        BOOL v13 = __OFSUB__(v10, v19);
        uint64_t v20 = v10 - v19;
        if (v13)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
        }
        int64_t v9 = v18 + v20;
        uint64_t v21 = v17 - v10;
        if (!__OFSUB__(v17, v10)) {
          goto LABEL_12;
        }
LABEL_24:
        __break(1u);
LABEL_25:
        unint64_t v15 = 0;
LABEL_26:
        type metadata accessor for __DataStorage();
        uint64_t v30 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v15, v10, 1, 0, 0, v9);
        uint64_t result = swift_release();
        uint64_t v7 = (void *)v30;
LABEL_27:
        if (v2 < v9) {
          goto LABEL_36;
        }
        uint64_t v31 = v7[2];
        if (v31)
        {
          uint64_t v32 = v7[5];
          BOOL v13 = __OFSUB__(v9, v32);
          uint64_t v33 = v9 - v32;
          if (!v13)
          {
            if (v7[3] >= v2 - v9) {
              size_t v34 = v2 - v9;
            }
            else {
              size_t v34 = v7[3];
            }
            memset((void *)(v31 + v33), a1, v34);
            return v6;
          }
          goto LABEL_38;
        }
        goto LABEL_43;
      }
      int64_t v9 = 0;
      uint64_t v21 = v17 - v10;
      if (__OFSUB__(v17, v10)) {
        goto LABEL_24;
      }
LABEL_12:
      type metadata accessor for __DataStorage();
      uint64_t v22 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v21, 1, 0, 0, v10);
      swift_release();
      uint64_t v16 = (void *)v22;
LABEL_13:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = *(void *)(v6 + 16);
      uint64_t v24 = *(void *)(v6 + 24);
      if ((result & 1) == 0)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v25 = swift_allocObject();
        *(void *)(v25 + 16) = v23;
        *(void *)(v25 + 24) = v24;
        uint64_t result = swift_release();
        uint64_t v6 = v25;
      }
      uint64_t v26 = v16[2];
      if (v26)
      {
        uint64_t v27 = v16[5];
        BOOL v13 = __OFSUB__(v23, v27);
        uint64_t v28 = v23 - v27;
        if (!v13)
        {
          if (!__OFSUB__(v24, v23))
          {
            if (v16[3] >= v24 - v23) {
              size_t v29 = v24 - v23;
            }
            else {
              size_t v29 = v16[3];
            }
            memset((void *)(v26 + v28), a1, v29);
            return v6;
          }
          goto LABEL_37;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    case 3uLL:
      return v6;
    default:
      uint64_t __b = v4;
      __int16 v36 = v5;
      char v37 = BYTE2(v5);
      char v38 = BYTE3(v5);
      char v39 = BYTE4(v5);
      char v40 = BYTE5(v5);
      char v41 = BYTE6(v5);
      memset(&__b, a1, BYTE6(v5));
      return __b;
  }
}

uint64_t specialized Data.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t __DataStorage.init(length:)(uint64_t result)
{
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  if (result > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_17:
    uint64_t result = swift_once();
    goto LABEL_5;
  }
  Swift::Int v1 = result;
  int64_t v3 = result;
  if (result <= 0x3FFFFFFF)
  {
    int64_t v3 = result + (result >> 2);
    if (__OFADD__(result, result >> 2))
    {
      __break(1u);
LABEL_19:
      uint64_t result = swift_once();
      goto LABEL_7;
    }
  }
  if (one-time initialization token for vmOpsThreshold != -1) {
    goto LABEL_17;
  }
LABEL_5:
  if (v3 < static __DataStorage.vmOpsThreshold) {
    goto LABEL_11;
  }
  if (one-time initialization token for _pageSize != -1) {
    goto LABEL_19;
  }
LABEL_7:
  Swift::Int v4 = _pageSize + v3;
  if (__OFADD__(_pageSize, v3))
  {
    __break(1u);
    goto LABEL_21;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  Swift::Int v6 = v4 - 1;
  if (v5)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFSUB__(_pageSize, 1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v3 = v6 & ~(_pageSize - 1);
LABEL_11:
  HIWORD(v7) = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v7 + 1);
  if (v1 > 0x20000) {
    uint64_t result = (uint64_t)malloc_type_calloc(1uLL, v3, (unint64_t)HIWORD(v7) << 48);
  }
  else {
    uint64_t result = (uint64_t)malloc_type_malloc(v3, (unint64_t)HIWORD(v7) << 48);
  }
  if (result)
  {
    *(unsigned char *)(v2 + 64) = v1 <= 0x20000;
    *(void *)(v2 + 16) = result;
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = 0;
    __DataStorage.setLength(_:)(v1);
    return v2;
  }
LABEL_23:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __DataStorage.setLength(_:)(Swift::Int a1)
{
  if (*(void *)(v1 + 32) < a1 || (uint64_t v3 = *(void *)(v1 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(a1, 1);
    goto LABEL_8;
  }
  Swift::Int v4 = *(void *)(v1 + 24);
  if (v4 >= a1 || *(unsigned char *)(v1 + 64) != 1)
  {
    if (v4 > a1) {
      *(unsigned char *)(v1 + 64) = 1;
    }
    goto LABEL_8;
  }
  if (!__OFSUB__(a1, v4))
  {
    bzero((void *)(v3 + v4), a1 - v4);
LABEL_8:
    *(void *)(v1 + 24) = a1;
    return;
  }
  __break(1u);
}

void Data._Representation.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, char *__src, int64_t __len)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *v4;
  unint64_t v6 = v4[1];
  unint64_t v8 = v4;
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v32 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v62 = v7;
      uint64_t v63 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v33 = v7 >> 32;
      uint64_t v34 = (v7 >> 32) + __len;
      if (__OFADD__(v7 >> 32, __len)) {
        goto LABEL_83;
      }
      uint64_t v35 = a2 - a1;
      if (__OFSUB__(a2, a1)) {
        goto LABEL_86;
      }
      BOOL v15 = __OFSUB__(v34, v35);
      uint64_t v36 = v34 - v35;
      if (v15) {
        goto LABEL_89;
      }
      if (v7 << 32) {
        goto LABEL_37;
      }
      if (v36)
      {
        if (v36 <= 14)
        {
          Data.InlineSlice.replaceSubrange(_:with:count:)(a1, a2, __src, __len);
          unsigned int v44 = HIDWORD(v62) - v62;
          if (!__OFSUB__(HIDWORD(v62), v62))
          {
            if ((v44 & 0x80000000) == 0 && v44 < 0x100)
            {
              *(void *)((char *)&__dst + 6) = 0;
              *(void *)&long long __dst = 0;
              BYTE14(__dst) = BYTE4(v62) - v62;
              if (SHIDWORD(v62) >= (int)v62)
              {
                if (!*(void *)(v63 + 16) || !__OFSUB__((int)v62, *(void *)(v63 + 40)))
                {
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  uint64_t v57 = DWORD2(__dst);
                  uint64_t v58 = BYTE12(__dst);
                  uint64_t v59 = BYTE13(__dst);
                  uint64_t v60 = BYTE14(__dst);
                  swift_release();
                  uint64_t *v8 = __dst;
                  v8[1] = v57 | (v58 << 32) | (v59 << 40) | (v60 << 48);
                  return;
                }
LABEL_97:
                __break(1u);
              }
              goto LABEL_95;
            }
            goto LABEL_99;
          }
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
LABEL_37:
        if (v36 <= 2147483646) {
          goto LABEL_38;
        }
        uint64_t v7 = (int)v7;
        if (v33 >= (int)v7)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v45 = swift_allocObject();
          *(void *)(v45 + 16) = v7;
          *(void *)(v45 + 24) = v33;
          *(void *)&long long __dst = v45;
          Data.LargeSlice.replaceSubrange(_:with:count:)(a1, a2, __src, __len);
          uint64_t v26 = __dst;
          uint64_t v46 = v32;
LABEL_71:
          unint64_t v37 = v46 | 0x8000000000000000;
          goto LABEL_72;
        }
        goto LABEL_90;
      }
      outlined consume of Data._Representation(v7, v6);
      goto LABEL_75;
    case 2uLL:
      uint64_t v18 = (void *)(v6 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v62 = *v4;
      uint64_t v63 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v19 = *(void *)(v7 + 24);
      uint64_t v20 = v19 + __len;
      if (__OFADD__(v19, __len)) {
        goto LABEL_81;
      }
      uint64_t v21 = a2 - a1;
      if (__OFSUB__(a2, a1)) {
        goto LABEL_85;
      }
      uint64_t v22 = v20 - v21;
      if (__OFSUB__(v20, v21)) {
        goto LABEL_88;
      }
      uint64_t v23 = *(void *)(v7 + 16);
      if (v23) {
        goto LABEL_13;
      }
      if (v22)
      {
        if (v22 <= 14)
        {
          if ((v22 & 0x8000000000000000) == 0)
          {
            *(void *)((char *)&__dst + 6) = 0;
            *(void *)&long long __dst = 0;
            BYTE14(__dst) = v22;
            if (__len < 1) {
              goto LABEL_46;
            }
            if (__src)
            {
              memmove((char *)&__dst + a1, __src, __len);
LABEL_46:
              uint64_t v38 = v18[2];
              if (v38)
              {
                uint64_t v39 = v18[5];
                BOOL v15 = __OFSUB__(0, v39);
                uint64_t v40 = -v39;
                if (v15)
                {
LABEL_96:
                  __break(1u);
                  goto LABEL_97;
                }
                char v41 = (char *)(v38 + v40);
                uint64_t v42 = v18[3];
                if (v42 >= v19) {
                  LODWORD(v42) = v19;
                }
                int v43 = v41 + v42;
              }
              else
              {
                char v41 = 0;
                int v43 = 0;
              }
              closure #1 in closure #1 in Data._Representation.replaceSubrange(_:with:count:)(v41, v43, a1, a2, (char *)&__dst, (uint64_t)&__dst + v22, v22);
              uint64_t v52 = __dst;
              uint64_t v53 = DWORD2(__dst);
              uint64_t v54 = BYTE12(__dst);
              uint64_t v55 = BYTE13(__dst);
              uint64_t v56 = BYTE14(__dst);
              swift_release();
              swift_release();
              uint64_t *v8 = v52;
              v8[1] = v53 | (v54 << 32) | (v55 << 40) | (v56 << 48);
              return;
            }
            __break(1u);
          }
LABEL_99:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
LABEL_13:
        if (v23 <= 2147483646 && v22 <= 2147483646)
        {
          if (v19 >= (uint64_t)0xFFFFFFFF80000000 && v23 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v19 <= 0x7FFFFFFF)
            {
              if ((int)v19 >= (int)v23)
              {
                LODWORD(__dst) = *(void *)(v7 + 16);
                DWORD1(__dst) = v19;
                *((void *)&__dst + 1) = v6 & 0x3FFFFFFFFFFFFFFFLL;
                swift_retain();
                Data.InlineSlice.replaceSubrange(_:with:count:)(a1, a2, __src, __len);
                swift_release();
                swift_release();
                uint64_t v27 = *((void *)&__dst + 1);
                uint64_t v26 = __dst;
LABEL_39:
                unint64_t v37 = v27 | 0x4000000000000000;
LABEL_72:
                uint64_t *v8 = v26;
                v8[1] = v37;
                return;
              }
LABEL_93:
              __break(1u);
              goto LABEL_94;
            }
LABEL_92:
            __break(1u);
            goto LABEL_93;
          }
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
LABEL_70:
        Data.LargeSlice.replaceSubrange(_:with:count:)(a1, a2, __src, __len);
        uint64_t v26 = v62;
        uint64_t v46 = v63;
        goto LABEL_71;
      }
      swift_release();
      swift_release();
      goto LABEL_75;
    case 3uLL:
      if (a2 | a1) {
        goto LABEL_82;
      }
      if (__len)
      {
        if (__len <= 14)
        {
          if (__src) {
            Swift::String v47 = &__src[__len];
          }
          else {
            Swift::String v47 = 0;
          }
          uint64_t v29 = specialized Data.InlineData.init(_:)(__src, v47);
          unint64_t v31 = v48 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          if (__src) {
            uint64_t v28 = &__src[__len];
          }
          else {
            uint64_t v28 = 0;
          }
          if ((unint64_t)__len > 0x7FFFFFFE)
          {
            uint64_t v29 = specialized Data.LargeSlice.init(_:)((unint64_t)__src, (uint64_t)v28);
            unint64_t v31 = v49 | 0x8000000000000000;
          }
          else
          {
            uint64_t v29 = (uint64_t)specialized Data.InlineSlice.init(_:)((unint64_t)__src, (uint64_t)v28);
            unint64_t v31 = v30 | 0x4000000000000000;
          }
        }
        *Swift::Int v4 = v29;
        v4[1] = v31;
      }
      return;
    default:
      LOWORD(__dst) = *v4;
      BYTE2(__dst) = BYTE2(v7);
      BYTE3(__dst) = BYTE3(v7);
      BYTE4(__dst) = BYTE4(v7);
      BYTE5(__dst) = BYTE5(v7);
      BYTE6(__dst) = BYTE6(v7);
      BYTE7(__dst) = HIBYTE(v7);
      WORD4(__dst) = v6;
      BYTE10(__dst) = BYTE2(v6);
      BYTE11(__dst) = BYTE3(v6);
      BYTE12(__dst) = BYTE4(v6);
      BYTE13(__dst) = BYTE5(v6);
      uint64_t v12 = BYTE6(v6);
      BYTE14(__dst) = BYTE6(v6);
      int64_t v13 = BYTE6(v6) + __len;
      if (__OFADD__(BYTE6(v6), __len))
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      uint64_t v14 = a2 - a1;
      if (__OFSUB__(a2, a1)) {
        goto LABEL_84;
      }
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v16 = v13 - v14;
      if (v15) {
        goto LABEL_87;
      }
      if (v16)
      {
        if (v16 <= 14)
        {
          Data.InlineData.replaceSubrange(_:with:count:)(a1, a2, __src, __len);
          uint64_t v26 = __dst;
          unint64_t v37 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          goto LABEL_72;
        }
        if ((unint64_t)v16 <= 0x7FFFFFFE)
        {
          uint64_t v62 = v7;
          LOWORD(v63) = v6;
          BYTE2(v63) = BYTE2(v6);
          BYTE3(v63) = BYTE3(v6);
          BYTE4(v63) = BYTE4(v6);
          BYTE5(v63) = BYTE5(v6);
          type metadata accessor for __DataStorage();
          uint64_t v17 = swift_allocObject();
          __DataStorage.init(bytes:length:)((unint64_t)&v62, v12);
          LODWORD(v62) = 0;
          HIDWORD(v62) = v12;
          uint64_t v63 = v17;
LABEL_38:
          Data.InlineSlice.replaceSubrange(_:with:count:)(a1, a2, __src, __len);
          uint64_t v26 = v62;
          uint64_t v27 = v63;
          goto LABEL_39;
        }
        uint64_t v62 = v7;
        LOWORD(v63) = v6;
        BYTE2(v63) = BYTE2(v6);
        BYTE3(v63) = BYTE3(v6);
        BYTE4(v63) = BYTE4(v6);
        BYTE5(v63) = BYTE5(v6);
        type metadata accessor for __DataStorage();
        uint64_t v50 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v62, v12);
        type metadata accessor for Data.RangeReference();
        uint64_t v51 = swift_allocObject();
        *(void *)(v51 + 16) = 0;
        *(void *)(v51 + 24) = v12;
        uint64_t v62 = v51;
        uint64_t v63 = v50;
        goto LABEL_70;
      }
LABEL_75:
      *(_OWORD *)unint64_t v8 = xmmword_1821115B0;
      return;
  }
}

void Data.InlineSlice.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v5 = *v4;
  if (v5 > a1)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v6 = v4;
  uint64_t v9 = v4[1];
  if (v9 < a2 || v5 > a2 || v9 < a1) {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native()) {
    goto LABEL_16;
  }
  uint64_t v15 = *v4;
  uint64_t v14 = v6[1];
  if ((int)v14 < (int)v15)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v16 = *((void *)v6 + 1);
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    unint64_t v21 = 0;
    goto LABEL_15;
  }
  uint64_t v18 = *(void *)(v16 + 40);
  BOOL v19 = __OFSUB__(v15, v18);
  uint64_t v20 = v15 - v18;
  if (!v19)
  {
    unint64_t v21 = v17 + v20;
LABEL_15:
    uint64_t v22 = v14 - v15;
    type metadata accessor for __DataStorage();
    uint64_t v23 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v22, 1, 0, 0, v15);
    *((void *)v6 + 1) = v23;
    swift_release();
LABEL_16:
    int v24 = *v6;
    uint64_t v25 = v6[1];
    if ((int)v25 >= *v6)
    {
      __DataStorage.replaceBytes(in:with:length:)(a1, a2, a3, a4);
      uint64_t v26 = a1 - a2 + v25;
      BOOL v19 = __OFADD__(v26, a4);
      uint64_t v27 = v26 + a4;
      if (!v19)
      {
        if (v27 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v27 <= 0x7FFFFFFF)
          {
            if (v24 <= (int)v27)
            {
              *unint64_t v6 = v24;
              v6[1] = v27;
              return;
            }
            goto LABEL_28;
          }
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void Data._Representation.subscript.setter(char a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      *(_OWORD *)uint64_t v2 = xmmword_1821115B0;
      if (v4 >> 32 <= a2 || (int)v4 > a2) {
        goto LABEL_38;
      }
      uint64_t v27 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_29;
      }
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        uint64_t v29 = *(void *)(v27 + 40);
        BOOL v14 = __OFSUB__((int)v4, v29);
        uint64_t v30 = (int)v4 - v29;
        if (v14)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
        }
        unint64_t v31 = v28 + v30;
      }
      else
      {
        unint64_t v31 = 0;
      }
      type metadata accessor for __DataStorage();
      uint64_t v32 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v31, (v4 >> 32) - (int)v4, 1, 0, 0, (int)v4);
      swift_release();
      uint64_t v27 = v32;
LABEL_29:
      __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
      uint64_t v33 = *(void *)(v27 + 16);
      if (v33)
      {
        uint64_t v34 = *(void *)(v27 + 40);
        BOOL v14 = __OFSUB__(a2, v34);
        uint64_t v35 = a2 - v34;
        if (!v14)
        {
          *(unsigned char *)(v33 + v35) = a1;
          unint64_t v25 = v27 | 0x4000000000000000;
          goto LABEL_32;
        }
        goto LABEL_40;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    case 2uLL:
      *(_OWORD *)uint64_t v2 = xmmword_1821115B0;
      if (*(void *)(v4 + 16) > a2) {
        goto LABEL_37;
      }
      if (*(void *)(v4 + 24) <= a2) {
        goto LABEL_39;
      }
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      uint64_t v11 = *(void *)(v4 + 16);
      uint64_t v10 = *(void *)(v4 + 24);
      uint64_t v12 = *(void *)(v9 + 16);
      if (!v12)
      {
        unint64_t v16 = 0;
        uint64_t v17 = v10 - v11;
        if (!__OFSUB__(v10, v11)) {
          goto LABEL_12;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v13 = *(void *)(v9 + 40);
      BOOL v14 = __OFSUB__(v11, v13);
      uint64_t v15 = v11 - v13;
      if (v14) {
        goto LABEL_43;
      }
      unint64_t v16 = v12 + v15;
      uint64_t v17 = v10 - v11;
      if (__OFSUB__(v10, v11)) {
        goto LABEL_35;
      }
LABEL_12:
      type metadata accessor for __DataStorage();
      uint64_t v18 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v17, 1, 0, 0, v11);
      swift_release();
      uint64_t v9 = v18;
LABEL_13:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v19 = *(void *)(v4 + 16);
        uint64_t v20 = *(void *)(v4 + 24);
        type metadata accessor for Data.RangeReference();
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = v19;
        *(void *)(v21 + 24) = v20;
        swift_release();
        uint64_t v4 = v21;
      }
      __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
      uint64_t v22 = *(void *)(v9 + 16);
      if (v22)
      {
        uint64_t v23 = *(void *)(v9 + 40);
        BOOL v14 = __OFSUB__(a2, v23);
        uint64_t v24 = a2 - v23;
        if (!v14)
        {
          *(unsigned char *)(v22 + v24) = a1;
          unint64_t v25 = v9 | 0x8000000000000000;
LABEL_32:
          *uint64_t v5 = v4;
          v5[1] = v25;
          return;
        }
        goto LABEL_41;
      }
LABEL_46:
      __break(1u);
LABEL_47:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return;
    case 3uLL:
      __break(1u);
      goto LABEL_45;
    default:
      uint64_t v36 = *v2;
      LOWORD(v37) = v3;
      BYTE2(v37) = BYTE2(v3);
      HIBYTE(v37) = BYTE3(v3);
      unsigned __int8 v38 = BYTE4(v3);
      unsigned __int8 v39 = BYTE5(v3);
      unsigned __int8 v40 = BYTE6(v3);
      if (a2 >= BYTE6(v3)) {
        goto LABEL_36;
      }
      if (a2 < 0 || (unint64_t)a2 > 0xD) {
        goto LABEL_47;
      }
      *((unsigned char *)&v36 + a2) = a1;
      unint64_t v8 = v37 | ((unint64_t)v38 << 32) | ((unint64_t)v39 << 40) | ((unint64_t)v40 << 48);
      *uint64_t v2 = v36;
      v2[1] = v8;
      return;
  }
}

void __DataStorage.replaceBytes(in:with:length:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v5 = v4[5];
  uint64_t v6 = a1 - v5;
  if (__OFSUB__(a1, v5))
  {
    __break(1u);
    goto LABEL_26;
  }
  BOOL v7 = __OFSUB__(a2, v5);
  uint64_t v8 = a2 - v5;
  if (v7)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v9 = v8 - v6;
  if (v8 < v6)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (__OFSUB__(v8, v6))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  Swift::Int v10 = v4[3];
  Swift::Int v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  Swift::Int v13 = v11 + a4;
  if (__OFADD__(v11, a4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (__OFSUB__(v13, v10))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v10 >= v13)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  }
  else
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v11 + a4, 0);
    v4[3] = v13;
  }
  uint64_t v15 = v4[2];
  if (!v15) {
    goto LABEL_34;
  }
  if (v13 == v10) {
    goto LABEL_16;
  }
  Swift::Int v16 = v10 - v6;
  if (__OFSUB__(v10, v6)) {
    goto LABEL_32;
  }
  if (__OFSUB__(v16, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return;
  }
  memmove((void *)(v15 + v6 + a4), (const void *)(v15 + v6 + v9), v16 - v9);
LABEL_16:
  if (a4)
  {
    uint64_t v17 = (void *)(v15 + v6);
    if (!a3)
    {
      bzero(v17, a4);
      if (v13 >= v10) {
        return;
      }
      goto LABEL_20;
    }
    memmove(v17, a3, a4);
  }
  if (v13 >= v10) {
    return;
  }
LABEL_20:

  __DataStorage.setLength(_:)(v13);
}

{
  BOOL v4;
  uint64_t v5;

  uint64_t v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= a1)
  {
    __DataStorage.replaceBytes(in:with:length:)(a1, v5, a3, a4);
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(Swift::Int growingTo, Swift::Bool clear)
{
  unint64_t object = v2;
  Swift::Int v4 = v2[4];
  if (v4) {
    BOOL v5 = v4 < growingTo;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return;
  }
  if (growingTo)
  {
    if (!v4)
    {
      size_t v25 = malloc_good_size(growingTo);
      LODWORD(v62) = 0;
      _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
      if (clear) {
        uint64_t v26 = malloc_type_calloc(1uLL, v25, (unint64_t)WORD1(v62) << 48);
      }
      else {
        uint64_t v26 = malloc_type_malloc(v25, (unint64_t)WORD1(v62) << 48);
      }
      uint64_t v28 = v26;
      unint64_t v29 = object[2];
      if (v29)
      {
        if (!v26)
        {
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
          goto LABEL_104;
        }
        specialized static __DataStorage.move(_:_:_:)((vm_address_t)v26, v29, object[3]);
        uint64_t v30 = object[2];
        if (v30)
        {
          unint64_t v31 = (void (*)(uint64_t, uint64_t))object[6];
          if (v31)
          {
            uint64_t v32 = object[3];
            swift_retain();
            v31(v30, v32);
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v31);
          }
          else
          {
            free((void *)object[2]);
          }
        }
      }
      uint64_t v51 = object[6];
      object[6] = 0;
      object[7] = 0;
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v51);
      object[3] = growingTo;
      object[4] = v25;
      object[2] = v28;
      BOOL v52 = 1;
LABEL_94:
      *((unsigned char *)object + 64) = v52;
      return;
    }
    if (one-time initialization token for vmOpsThreshold != -1) {
      swift_once();
    }
    char v8 = 1;
    if (static __DataStorage.vmOpsThreshold <= growingTo) {
      char v8 = 2;
    }
    Swift::Int v9 = growingTo >> v8;
    if (__OFSUB__(0x7FFFFFFFFFFFFFFFLL, v9))
    {
      __break(1u);
    }
    else
    {
      if (0x7FFFFFFFFFFFFFFFLL - v9 < growingTo) {
        Swift::Int v9 = 0;
      }
      BOOL v10 = __OFADD__(growingTo, v9);
      int64_t v11 = growingTo + v9;
      if (!v10)
      {
        if (v11 <= v4) {
          size_t v12 = v4;
        }
        else {
          size_t v12 = v11;
        }
        int64_t v13 = malloc_good_size(v12);
        BOOL v14 = clear && v13 > 0x20000;
        Swift::Int v15 = object[3];
        if (!object[2])
        {
          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          if (clear && v13 > 0x20000)
          {
            uint64_t v27 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)WORD1(v62) << 48);
            if (v27) {
              goto LABEL_84;
            }
          }
          else
          {
            uint64_t v27 = (char *)malloc_type_malloc(v13, (unint64_t)WORD1(v62) << 48);
            if (v27) {
              goto LABEL_84;
            }
          }
          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          if (clear && growingTo > 0x20000)
          {
            BOOL v14 = 1;
            uint64_t v27 = (char *)malloc_type_calloc(1uLL, growingTo, (unint64_t)WORD1(v62) << 48);
            goto LABEL_80;
          }
          uint64_t v50 = (char *)malloc_type_malloc(growingTo, (unint64_t)WORD1(v62) << 48);
LABEL_79:
          uint64_t v27 = v50;
          BOOL v14 = 0;
LABEL_80:
          if (!v27)
          {
            unint64_t v62 = 0;
            unint64_t v63 = 0xE000000000000000;
            _StringGuts.grow(_:)(41);
            swift_bridgeObjectRelease();
            unint64_t v62 = 0xD000000000000026;
            unint64_t v63 = 0x80000001823B34D0;
            v54._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t object = v54._object;
            String.append(_:)(v54);
            swift_bridgeObjectRelease();
            uint64_t v35 = &v62;
            v55._uint64_t countAndFlagsBits = 41;
            v55._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v55);
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_82;
          }
LABEL_84:
          char v57 = v15 < growingTo && clear || v14;
          if (v15 >= growingTo || !clear || v14) {
            goto LABEL_93;
          }
          goto LABEL_91;
        }
        if (v15)
        {
          if (growingTo == 0x8000000000000000 && v15 == -1) {
            goto LABEL_101;
          }
          BOOL v16 = growingTo / v15 > 3;
          if (growingTo / v15 <= 3 || !clear || v13 <= 0x20000) {
            goto LABEL_56;
          }
        }
        else if (!clear || v13 <= 0x20000)
        {
          BOOL v16 = 1;
LABEL_56:
          unsigned int v37 = (void (**)(uint64_t, uint64_t))(object + 6);
          if (object[6])
          {
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            unsigned __int8 v38 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
            if (v38)
            {
              unint64_t v39 = object[2];
              if (!v39)
              {
LABEL_106:
                __break(1u);
                goto LABEL_107;
              }
              uint64_t v27 = v38;
              specialized static __DataStorage.move(_:_:_:)((vm_address_t)v38, v39, v15);
              uint64_t v40 = object[2];
              if (v40)
              {
                uint64_t v41 = *v37;
                if (*v37)
                {
                  uint64_t v61 = object[3];
                  swift_retain();
                  v41(v40, v61);
                  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v41);
                }
                else
                {
                  free((void *)object[2]);
                }
              }
              uint64_t v58 = object[6];
              *unsigned int v37 = 0;
              object[7] = 0;
              outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v58);
              goto LABEL_89;
            }
          }
          else
          {
            uint64_t v42 = (void *)object[2];
            if (!v42)
            {
LABEL_107:
              __break(1u);
              goto LABEL_108;
            }
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            uint64_t v27 = (char *)malloc_type_realloc(v42, v13, (unint64_t)v62 << 32);
            if (v27)
            {
LABEL_89:
              char v57 = 0;
              if (v15 >= growingTo || !clear) {
                goto LABEL_93;
              }
LABEL_91:
              if (!__OFSUB__(growingTo, v15))
              {
                bzero(&v27[v15], growingTo - v15);
                char v57 = 0;
LABEL_93:
                object[2] = v27;
                object[4] = v13;
                BOOL v52 = (v57 & 1) == 0;
                goto LABEL_94;
              }
              goto LABEL_100;
            }
          }
          int64_t v43 = malloc_good_size(growingTo);
          int64_t v13 = v43;
          if (clear && v43 > 0x20000 && v16)
          {
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            unsigned int v44 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
            if (v44)
            {
              unint64_t v45 = object[2];
              if (v45)
              {
                uint64_t v27 = v44;
                specialized static __DataStorage.move(_:_:_:)((vm_address_t)v44, v45, v15);
                uint64_t v46 = object[2];
                if (v46)
                {
                  Swift::String v47 = *v37;
                  if (*v37)
                  {
                    uint64_t v48 = object[3];
                    swift_retain();
                    v47(v46, v48);
                    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v47);
                  }
                  else
                  {
                    free((void *)object[2]);
                  }
                }
                uint64_t v59 = object[6];
                *unsigned int v37 = 0;
                object[7] = 0;
                outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v59);
                char v57 = 1;
                goto LABEL_93;
              }
LABEL_109:
              __break(1u);
              return;
            }
          }
          uint64_t v49 = (void *)object[2];
          if (!v49)
          {
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          uint64_t v50 = (char *)malloc_type_realloc(v49, v13, (unint64_t)v62 << 32);
          goto LABEL_79;
        }
        LODWORD(v62) = 0;
        _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
        BOOL v16 = 1;
        uint64_t v33 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
        if (v33)
        {
          unint64_t v34 = object[2];
          if (!v34)
          {
LABEL_105:
            __break(1u);
            goto LABEL_106;
          }
          uint64_t v27 = v33;
          specialized static __DataStorage.move(_:_:_:)((vm_address_t)v33, v34, v15);
          uint64_t v35 = (unint64_t *)object[2];
          if (!v35) {
            goto LABEL_83;
          }
          uint64_t v36 = (void (*)(unint64_t *, uint64_t))object[6];
          if (v36)
          {
            uint64_t v60 = object[3];
            swift_retain();
            v36(v35, v60);
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v36);
LABEL_83:
            uint64_t v56 = object[6];
            object[6] = 0;
            object[7] = 0;
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v56);
            goto LABEL_84;
          }
LABEL_82:
          free(v35);
          goto LABEL_83;
        }
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  if (v4) {
    return;
  }
  size_t v18 = malloc_good_size(object[3]);
  LODWORD(v62) = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
  uint64_t v19 = malloc_type_malloc(v18, (unint64_t)v62 << 32);
  if (!v19) {
    goto LABEL_103;
  }
  unint64_t v20 = object[2];
  if (!v20)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v21 = v19;
  specialized static __DataStorage.move(_:_:_:)((vm_address_t)v19, v20, object[3]);
  uint64_t v22 = object[2];
  if (v22)
  {
    uint64_t v23 = (void (*)(uint64_t, uint64_t))object[6];
    if (v23)
    {
      uint64_t v24 = object[3];
      swift_retain();
      v23(v22, v24);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v23);
    }
    else
    {
      free((void *)object[2]);
    }
  }
  uint64_t v53 = object[6];
  object[6] = 0;
  object[7] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v53);
  object[2] = v21;
  object[4] = v18;
  *((unsigned char *)object + 64) = 0;
}

void *__DataStorage.init(bytes:length:)(unint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = 0;
  BOOL v5 = (void *)(v3 + 16);
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  if (a2 > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v2 = a2;
  *(void *)(v3 + 40) = 0;
  if (!a2)
  {
    *(unsigned char *)(v3 + 64) = 0;
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 32) = 0;
    *BOOL v5 = 0;
    return (void *)v3;
  }
  unint64_t v4 = a1;
  if (one-time initialization token for vmOpsThreshold != -1) {
    goto LABEL_13;
  }
LABEL_4:
  if (static __DataStorage.vmOpsThreshold <= v2)
  {
    *(void *)(v3 + 24) = v2;
    *(void *)(v3 + 32) = v2;
    *(unsigned char *)(v3 + 64) = 1;
    unsigned int v8 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v8 + 1);
    uint64_t result = malloc_type_malloc(v2, (unint64_t)v8 << 32);
    if (result)
    {
      *BOOL v5 = result;
      goto LABEL_10;
    }
  }
  else
  {
    *(void *)(v3 + 24) = v2;
    unsigned int v7 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v7 + 1);
    uint64_t result = malloc_type_malloc(v2, (unint64_t)v7 << 32);
    if (result)
    {
      *(void *)(v3 + 16) = result;
      *(void *)(v3 + 32) = v2;
      *(unsigned char *)(v3 + 64) = 1;
LABEL_10:
      specialized static __DataStorage.move(_:_:_:)((vm_address_t)result, v4, v2);
      return (void *)v3;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_WORD *_So30malloc_type_layout_semantics_ta_generic_data_setter(_WORD *result)
{
  *result |= 0x100u;
  return result;
}

vm_address_t specialized static __DataStorage.move(_:_:_:)(vm_address_t __dst, unint64_t __src, int64_t __len)
{
  vm_address_t v5 = __dst;
  if (one-time initialization token for vmOpsThreshold != -1) {
    long long __dst = swift_once();
  }
  if (static __DataStorage.vmOpsThreshold > __len)
  {
LABEL_8:
    if (__len < 1) {
      return __dst;
    }
    goto LABEL_9;
  }
  if (one-time initialization token for _pageSize != -1) {
    long long __dst = swift_once();
  }
  Swift::Int v6 = _pageSize - 1;
  if (__OFSUB__(_pageSize, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((v6 & (v5 | __src)) != 0) {
    goto LABEL_8;
  }
  if (!__src)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  vm_size_t v7 = __len & ~v6;
  vm_map_t v8 = _platform_mach_task_self();
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_24:
    long long __dst = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return __dst;
  }
  long long __dst = vm_copy(v8, __src, v7, v5);
  if (__dst) {
    long long __dst = (vm_address_t)memmove((void *)v5, (const void *)__src, v7);
  }
  BOOL v9 = __OFSUB__(__len, v7);
  __len -= v7;
  if (v9)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __src += v7;
  v5 += v7;
  if (__len < 1) {
    return __dst;
  }
LABEL_9:
  if (!__src)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  return (vm_address_t)memmove((void *)v5, (const void *)__src, __len);
}

uint64_t Data.InlineData.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, void *__src, size_t __len)
{
  uint64_t v5 = *(unsigned __int8 *)(v4 + 14);
  if (v5 < a1 || v5 < a2)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v8 = __OFSUB__(v5, v7);
  uint64_t v9 = v5 - v7;
  if (v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v10 = v9 + __len;
  if (__OFADD__(v9, __len))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (__OFSUB__(v10, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = (uint64_t)closure #1 in Data.InlineData.replaceSubrange(_:with:count:)((char *)v4, (int)v4 + 14, a1, a2, v10 - v5, __len, v5, __src);
  if ((v10 & 0x8000000000000000) == 0 && v10 < 0x100)
  {
    *(unsigned char *)(v4 + 14) = v10;
    return result;
  }
LABEL_17:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *closure #1 in Data.InlineData.replaceSubrange(_:with:count:)(char *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t __len, uint64_t a7, void *__src)
{
  uint64_t v8 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  size_t v12 = result;
  if (!a5) {
    goto LABEL_9;
  }
  if (!result)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(a3, __len)) {
    goto LABEL_17;
  }
  if (__OFADD__(a3, v8))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (__OFSUB__(a7, a3))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (__OFSUB__(a7 - a3, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = (char *)memmove(&result[a3 + __len], &result[a4], a7 - a4);
LABEL_9:
  if (!__len) {
    return result;
  }
  if (!v12) {
    goto LABEL_22;
  }
  if (!__src)
  {
LABEL_23:
    __break(1u);
    return result;
  }

  return (char *)memmove(&v12[a3], __src, __len);
}

uint64_t _platform_mach_task_self()
{
  return *MEMORY[0x1E4F14960];
}

void *initializeBufferWithCopyOfBuffer for _PlistKeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, JSONDecoderImpl.KeyedContainer.allKeys.getter);
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return *(void *)(v0 + 48);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AnyHashable()
{
  AnyHashable.base.getter();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  uint64_t v0 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0;
}

void static Measurement<>.FormatStyle.UnitWidth.abbreviated.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode()
{
  return &type metadata for Locale.LanguageCode;
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  id v2 = *v1;
}

uint64_t _NSSwiftTimeZone.secondsFromGMT.getter()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  uint64_t v4 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 40))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _CalendarGregorian.minimumDaysInFirstWeek.getter()
{
  if (*(unsigned char *)(v0 + 144) != 1) {
    return *(void *)(v0 + 136);
  }
  if (!*(void *)(v0 + 88)) {
    return 1;
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 344);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

Foundation::Date_optional __swiftcall Calendar.date(byAdding:value:to:wrappingComponents:)(Foundation::Calendar::Component byAdding, Swift::Int value, Foundation::Date to, Swift::Bool wrappingComponents)
{
  char v7 = v4;
  uint64_t v8 = v5;
  double v9 = *(double *)wrappingComponents;
  uint64_t v10 = *(void *)(v6 + 8);
  LOBYTE(__src[0]) = *(unsigned char *)byAdding;
  DateComponents.init(component:value:)(*(Swift::Int_optional *)&value, (unsigned __int8 *)__src, (uint64_t)__dst);
  outlined init with take of DateComponents?((uint64_t)__dst, (uint64_t)v16);
  outlined init with take of DateComponents?((uint64_t)v16, (uint64_t)__src);
  int v11 = _s10Foundation13URLComponentsV01_B0VSgWOg(__src);
  if (v11 == 1)
  {
    *(void *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 1;
  }
  else
  {
    if (v9 > 1.59271755e13) {
      double v9 = 1.59271755e13;
    }
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t ObjectType = swift_getObjectType();
    double v14 = fmax(v9, -2.11845067e11);
    (*(void (**)(unsigned char *, double *, void, uint64_t, uint64_t))(v10 + 200))(__dst, &v14, v7 & 1, ObjectType, v10);
    LOBYTE(v11) = outlined release of DateComponents?(v16);
  }
  result.value = *(Foundation::Date *)&v12;
  result.is_nil = v11;
  return result;
}

uint64_t static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined init with take of DateComponents?(a2, (uint64_t)v53);
  outlined release of DateComponents?(v53);
  __dst[0] = 0uLL;
  v51[0] = 0;
  v51[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v51, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  id v4 = objc_msgSend(a1, sel_calendar);
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v6 = swift_dynamicCastClass();
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
      uint64_t v8 = (_OWORD *)(v7 + 16);
      double v9 = (os_unfair_lock_s *)(v7 + 32);
      id v10 = v5;
      os_unfair_lock_lock(v9);
      closure #1 in _NSSwiftCalendar.calendar.getter(v8, __dst);
      os_unfair_lock_unlock(v9);

      uint64_t v11 = *((void *)&__dst[0] + 1);
      uint64_t v12 = *(void *)&__dst[0];
    }
    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v5;
      uint64_t v11 = lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (void (*)(uint64_t))type metadata accessor for _CalendarBridged);
    }
    *(void *)&__src[0] = v12;
    *((void *)&__src[0] + 1) = v11;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&__src[1])
    {
      __dst[0] = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
    swift_unknownObjectRelease();
  }
  id v13 = objc_msgSend(a1, sel_timeZone);
  if (v13)
  {
    double v14 = v13;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v15 = swift_dynamicCastClass();
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v17 = *(void *)(v15 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v14;
      uint64_t v17 = lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    }
    *(void *)&__src[1] = v16;
    *((void *)&__src[1] + 1) = v17;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(void *)&__src[0])
    {
      *(void *)&__dst[0] = v16;
      *((void *)&__dst[0] + 1) = v17;
      Calendar.timeZone.setter((uint64_t *)__dst);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease_n();
    }
  }
  if (objc_msgSend(a1, sel_era) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v18 = objc_msgSend(a1, sel_era);
    if (v18 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v19 = 0;
    }
    else {
      id v19 = v18;
    }
    *(void *)&__src[2] = v19;
    BYTE8(__src[2]) = v18 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_year) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v20 = objc_msgSend(a1, sel_year);
    if (v20 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v21 = 0;
    }
    else {
      id v21 = v20;
    }
    *(void *)&__src[3] = v21;
    BYTE8(__src[3]) = v20 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_month) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v22 = objc_msgSend(a1, sel_month);
    if (v22 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v23 = 0;
    }
    else {
      id v23 = v22;
    }
    *(void *)&__src[4] = v23;
    BYTE8(__src[4]) = v22 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_day) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v24 = objc_msgSend(a1, sel_day);
    if (v24 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v25 = 0;
    }
    else {
      id v25 = v24;
    }
    *(void *)&__src[5] = v25;
    BYTE8(__src[5]) = v24 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_hour) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v26 = objc_msgSend(a1, sel_hour);
    if (v26 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v27 = 0;
    }
    else {
      id v27 = v26;
    }
    *(void *)&__src[7] = v27;
    BYTE8(__src[7]) = v26 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_minute) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v28 = objc_msgSend(a1, sel_minute);
    if (v28 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v29 = 0;
    }
    else {
      id v29 = v28;
    }
    *(void *)&__src[8] = v29;
    BYTE8(__src[8]) = v28 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_second) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v30 = objc_msgSend(a1, sel_second);
    if (v30 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v31 = 0;
    }
    else {
      id v31 = v30;
    }
    *(void *)&__src[9] = v31;
    BYTE8(__src[9]) = v30 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_nanosecond) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v32 = objc_msgSend(a1, sel_nanosecond);
    if (v32 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v33 = 0;
    }
    else {
      id v33 = v32;
    }
    *(void *)&__src[10] = v33;
    BYTE8(__src[10]) = v32 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekday) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v34 = objc_msgSend(a1, sel_weekday);
    if (v34 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v35 = 0;
    }
    else {
      id v35 = v34;
    }
    *(void *)&__src[11] = v35;
    BYTE8(__src[11]) = v34 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekdayOrdinal) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v36 = objc_msgSend(a1, sel_weekdayOrdinal);
    if (v36 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v37 = 0;
    }
    else {
      id v37 = v36;
    }
    *(void *)&__src[12] = v37;
    BYTE8(__src[12]) = v36 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_quarter) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v38 = objc_msgSend(a1, sel_quarter);
    if (v38 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v39 = 0;
    }
    else {
      id v39 = v38;
    }
    *(void *)&__src[13] = v39;
    BYTE8(__src[13]) = v38 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekOfMonth) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v40 = objc_msgSend(a1, sel_weekOfMonth);
    if (v40 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v41 = 0;
    }
    else {
      id v41 = v40;
    }
    *(void *)&__src[15] = v41;
    BYTE8(__src[15]) = v40 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v42 = objc_msgSend(a1, sel_weekOfYear);
    if (v42 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v43 = 0;
    }
    else {
      id v43 = v42;
    }
    *(void *)&char __src[16] = v43;
    BYTE8(__src[16]) = v42 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_yearForWeekOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v44 = objc_msgSend(a1, sel_yearForWeekOfYear);
    if (v44 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v45 = 0;
    }
    else {
      id v45 = v44;
    }
    *(void *)&__src[17] = v45;
    BYTE8(__src[17]) = v44 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_dayOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v46 = objc_msgSend(a1, sel_dayOfYear);
    if (v46 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v47 = 0;
    }
    else {
      id v47 = v46;
    }
    *(void *)&__src[6] = v47;
    BYTE8(__src[6]) = v46 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (__NSDateComponentsIsLeapMonthSet(a1)) {
    BYTE9(__src[17]) = objc_msgSend(a1, sel_isLeapMonth);
  }
  if (__NSDateComponentsWeek(a1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)&stat __src[14] = __NSDateComponentsWeek(a1);
    BYTE8(__src[14]) = 0;
  }
  memcpy(__dst, __src, 0x11AuLL);
  destructiveProjectEnumData for PredicateCodableError(__dst, v48);
  outlined init with take of DateComponents?((uint64_t)__dst, a2);
  return 1;
}

uint64_t *outlined release of DateComponents?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of DateComponents?(uint64_t result)
{
  if (result != 1)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t _CalendarGregorian.date(byAdding:to:wrappingComponents:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  if (a3) {
    uint64_t result = _s10Foundation18_CalendarGregorianC4date19byAddingAndWrapping2toAA4DateVAA0J10ComponentsV_AHtAA0cB5ErrorOYKF(a1, (double *)&v7, (uint64_t)v6, (double *)&v8);
  }
  else {
    uint64_t result = _s10Foundation18_CalendarGregorianC4date33byAddingAndCarryingOverComponents2toAA4DateVAA0lJ0V_AHtAA0cB5ErrorOYKF(a1, (double *)&v7, (uint64_t)v6, (double *)&v8);
  }
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 8) = 0;
  return result;
}

uint64_t _s10Foundation18_CalendarGregorianC4date33byAddingAndCarryingOverComponents2toAA4DateVAA0lJ0V_AHtAA0cB5ErrorOYKF@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  uint64_t v196 = *(void *)(a1 + 80);
  uint64_t v195 = *(void *)(a1 + 96);
  char v184 = *(unsigned char *)(a1 + 104);
  char v185 = *(unsigned char *)(a1 + 88);
  uint64_t v180 = *(void *)(a1 + 112);
  uint64_t v178 = *(void *)(a1 + 128);
  char v181 = *(unsigned char *)(a1 + 136);
  char v182 = *(unsigned char *)(a1 + 120);
  uint64_t v176 = *(void *)(a1 + 144);
  char v179 = *(unsigned char *)(a1 + 152);
  uint64_t v174 = *(void *)(a1 + 160);
  int v177 = *(unsigned __int8 *)(a1 + 168);
  char v183 = *(unsigned char *)(a1 + 184);
  uint64_t v190 = *(void *)(a1 + 176);
  uint64_t v191 = *(void *)(a1 + 192);
  uint64_t v189 = *(void *)(a1 + 224);
  int v186 = *(unsigned __int8 *)(a1 + 232);
  char v187 = *(unsigned char *)(a1 + 200);
  uint64_t v192 = *(void *)(a1 + 240);
  double v10 = *a2;
  char v188 = *(unsigned char *)(a1 + 248);
  char v11 = *(unsigned char *)(a1 + 280);
  uint64_t v194 = *(void *)(a1 + 256);
  int v193 = *(unsigned __int8 *)(a1 + 264);
  uint64_t v12 = *(void *)(a1 + 272);
  uint64_t v13 = v4;
  if (*(void *)(a1 + 16))
  {
    long long v198 = *(_OWORD *)(a1 + 16);
    if (*(unsigned char *)(a1 + 56)) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v198 = *(_OWORD *)(v4 + 104);
    swift_unknownObjectRetain();
    if (v7)
    {
LABEL_3:
      swift_unknownObjectRetain();
      double v14 = *(double *)&v198;
      uint64_t v15 = v5;
      if (v11) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  LOBYTE(v201) = 1;
  *(double *)int64_t v204 = v10;
  double v14 = *(double *)&v198;
  __dst[0] = v198;
  swift_unknownObjectRetain();
  _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v201, (double *)v204, v6, (double *)__dst, (uint64_t)__src, v205);
  if (v5) {
    goto LABEL_247;
  }
  uint64_t v15 = 0;
  double v10 = v205[0];
  if (v11)
  {
LABEL_4:
    if (v9) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
LABEL_9:
  LOBYTE(v201) = 12;
  *(double *)int64_t v204 = v10;
  *(double *)long long __dst = v14;
  *((void *)&__dst[0] + 1) = *((void *)&v198 + 1);
  _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v201, (double *)v204, v12, (double *)__dst, (uint64_t)__src, v205);
  if (v15) {
    goto LABEL_247;
  }
  uint64_t v15 = 0;
  double v10 = v205[0];
  if ((v9 & 1) == 0)
  {
LABEL_11:
    LOBYTE(v201) = 2;
    *(double *)int64_t v204 = v10;
    *(double *)long long __dst = v14;
    *((void *)&__dst[0] + 1) = *((void *)&v198 + 1);
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v201, (double *)v204, v8, (double *)__dst, (uint64_t)__src, v205);
    if (v15) {
      goto LABEL_247;
    }
    uint64_t v15 = 0;
    double v10 = v205[0];
  }
LABEL_13:
  uint64_t v16 = v195;
  char v17 = v193;
  if (!v194) {
    char v17 = 1;
  }
  if (v17)
  {
    uint64_t v18 = *((void *)&v198 + 1);
    goto LABEL_59;
  }
  double v19 = fmod(v10, 1.0);
  if (v19 >= 0.0) {
    double v20 = v10 - v19;
  }
  else {
    double v20 = v10 - v19 + -1.0;
  }
  if (v19 >= 0.0) {
    double v21 = v19;
  }
  else {
    double v21 = v19 + 1.0;
  }
  uint64_t v22 = unk_1ECA58750;
  if ((unk_1ECA58750 & ~qword_1ECA58748) == 0) {
    uint64_t v22 = 0;
  }
  uint64_t v23 = qword_1ECA58758;
  if ((qword_1ECA58758 & ~(v22 | qword_1ECA58748)) == 0) {
    uint64_t v23 = 0;
  }
  *(void *)&v205[0] = v23 | v22 | qword_1ECA58748;
  *(double *)int64_t v204 = v10;
  __dst[0] = *(_OWORD *)(v4 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v205, (double *)v204, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if (BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9])) {
    goto LABEL_289;
  }
  uint64_t v25 = *(void *)&__dst[7];
  uint64_t v26 = *(void *)&__dst[8];
  uint64_t v27 = *(void *)&__dst[9];
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  uint64_t v28 = 3600 * v25;
  if ((unsigned __int128)(v25 * (__int128)3600) >> 64 != (3600 * v25) >> 63)
  {
    __break(1u);
    goto LABEL_255;
  }
  uint64_t v29 = 60 * v26;
  if ((unsigned __int128)(v26 * (__int128)60) >> 64 != (60 * v26) >> 63)
  {
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }
  BOOL v30 = __OFADD__(v28, v29);
  uint64_t v31 = v28 + v29;
  if (v30)
  {
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  uint64_t v32 = v31 + v27;
  if (__OFADD__(v31, v27))
  {
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }
  double v33 = (double)v194 * 604800.0 + v20;
  uint64_t v34 = unk_1ECA58788;
  if ((unk_1ECA58788 & ~qword_1ECA58780) == 0) {
    uint64_t v34 = 0;
  }
  uint64_t v35 = qword_1ECA58790;
  if ((qword_1ECA58790 & ~(v34 | qword_1ECA58780)) == 0) {
    uint64_t v35 = 0;
  }
  *(void *)&double v201 = v35 | v34 | qword_1ECA58780;
  double v199 = v33;
  v204[0] = *(_OWORD *)(v13 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v201, &v199, (uint64_t *)v204, v205);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)memcpy(v204, v205, 0x11AuLL);
  if (BYTE8(v204[7]) & 1) != 0 || (BYTE8(v204[8]) & 1) != 0 || (BYTE8(v204[9])) {
    goto LABEL_290;
  }
  uint64_t v36 = *(void *)&v204[7];
  uint64_t v37 = *(void *)&v204[8];
  uint64_t v38 = *(void *)&v204[9];
  uint64_t result = outlined release of DateComponents((uint64_t)v204);
  uint64_t v39 = 3600 * v36;
  if ((unsigned __int128)(v36 * (__int128)3600) >> 64 != (3600 * v36) >> 63) {
    goto LABEL_258;
  }
  uint64_t v40 = 60 * v37;
  if ((unsigned __int128)(v37 * (__int128)60) >> 64 != (60 * v37) >> 63)
  {
LABEL_260:
    __break(1u);
    goto LABEL_261;
  }
  BOOL v30 = __OFADD__(v39, v40);
  uint64_t v41 = v39 + v40;
  if (v30)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  BOOL v30 = __OFADD__(v41, v38);
  uint64_t v42 = v41 + v38;
  if (v30)
  {
LABEL_263:
    __break(1u);
    goto LABEL_264;
  }
  double v43 = (double)v32;
  if ((double)v32 == (double)v42)
  {
    uint64_t v18 = *((void *)&v198 + 1);
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    double v201 = v33;
    uint64_t v18 = *((void *)&v198 + 1);
    id v45 = *(uint64_t (**)(double *, uint64_t, void))(*((void *)&v198 + 1) + 40);
    uint64_t v46 = v45(&v201, ObjectType, *((void *)&v198 + 1));
    double v201 = v10;
    uint64_t result = v45(&v201, ObjectType, *((void *)&v198 + 1));
    if (v46 == result)
    {
      double v14 = *(double *)&v198;
    }
    else
    {
      uint64_t v47 = result;
      uint64_t v48 = result - v46;
      if (__OFSUB__(result, v46))
      {
LABEL_282:
        __break(1u);
        goto LABEL_283;
      }
      double v49 = v33 + (double)v48;
      double v201 = v49;
      double v14 = *(double *)&v198;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v48)) == v43)
      {
        double v33 = v49;
      }
      else if (v47 >= v46)
      {
        double v33 = v49;
      }
    }
    uint64_t v16 = v195;
  }
  if (v194 >= 1)
  {
    double v208 = v33;
    double v199 = v14;
    uint64_t v200 = v18;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v208, (uint64_t)&v199, (uint64_t)&v201);
    if ((v203 & 1) == 0) {
      double v33 = v33 - v202;
    }
  }
  double v10 = v21 + v33 + 0.0;
LABEL_59:
  char v50 = v188;
  if (!v192) {
    char v50 = 1;
  }
  if (v50) {
    goto LABEL_102;
  }
  double v51 = fmod(v10, 1.0);
  if (v51 >= 0.0) {
    double v52 = v10 - v51;
  }
  else {
    double v52 = v10 - v51 + -1.0;
  }
  if (v51 >= 0.0) {
    double v53 = v51;
  }
  else {
    double v53 = v51 + 1.0;
  }
  uint64_t v54 = unk_1ECA587C0;
  if ((unk_1ECA587C0 & ~qword_1ECA587B8) == 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = qword_1ECA587C8;
  if ((qword_1ECA587C8 & ~(v54 | qword_1ECA587B8)) == 0) {
    uint64_t v55 = 0;
  }
  *(void *)&v205[0] = v55 | v54 | qword_1ECA587B8;
  *(double *)int64_t v204 = v10;
  __dst[0] = *(_OWORD *)(v13 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v205, (double *)v204, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if (BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9])) {
    goto LABEL_291;
  }
  uint64_t v56 = *(void *)&__dst[7];
  uint64_t v57 = *(void *)&__dst[8];
  uint64_t v58 = *(void *)&__dst[9];
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  uint64_t v59 = 3600 * v56;
  if ((unsigned __int128)(v56 * (__int128)3600) >> 64 != (3600 * v56) >> 63) {
    goto LABEL_259;
  }
  uint64_t v60 = 60 * v57;
  if ((unsigned __int128)(v57 * (__int128)60) >> 64 != (60 * v57) >> 63)
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }
  BOOL v30 = __OFADD__(v59, v60);
  uint64_t v61 = v59 + v60;
  if (v30)
  {
LABEL_264:
    __break(1u);
    goto LABEL_265;
  }
  BOOL v30 = __OFADD__(v61, v58);
  uint64_t v62 = v61 + v58;
  if (v30)
  {
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  double v63 = (double)v192 * 604800.0 + v52;
  uint64_t v64 = unk_1ECA587F8;
  if ((unk_1ECA587F8 & ~qword_1ECA587F0) == 0) {
    uint64_t v64 = 0;
  }
  uint64_t v65 = qword_1ECA58800;
  if ((qword_1ECA58800 & ~(v64 | qword_1ECA587F0)) == 0) {
    uint64_t v65 = 0;
  }
  *(void *)&double v201 = v65 | v64 | qword_1ECA587F0;
  double v199 = v63;
  v204[0] = *(_OWORD *)(v13 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v201, &v199, (uint64_t *)v204, v205);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)memcpy(v204, v205, 0x11AuLL);
  if (BYTE8(v204[7]) & 1) != 0 || (BYTE8(v204[8]) & 1) != 0 || (BYTE8(v204[9])) {
    goto LABEL_292;
  }
  uint64_t v66 = *(void *)&v204[7];
  uint64_t v67 = *(void *)&v204[8];
  uint64_t v68 = *(void *)&v204[9];
  uint64_t result = outlined release of DateComponents((uint64_t)v204);
  uint64_t v69 = 3600 * v66;
  if ((unsigned __int128)(v66 * (__int128)3600) >> 64 != (3600 * v66) >> 63) {
    goto LABEL_266;
  }
  uint64_t v70 = 60 * v67;
  if ((unsigned __int128)(v67 * (__int128)60) >> 64 != (60 * v67) >> 63)
  {
LABEL_268:
    __break(1u);
    goto LABEL_269;
  }
  BOOL v30 = __OFADD__(v69, v70);
  uint64_t v71 = v69 + v70;
  if (v30)
  {
LABEL_270:
    __break(1u);
    goto LABEL_271;
  }
  BOOL v30 = __OFADD__(v71, v68);
  uint64_t v72 = v71 + v68;
  if (v30)
  {
LABEL_271:
    __break(1u);
    goto LABEL_272;
  }
  if ((double)v62 != (double)v72)
  {
    uint64_t v73 = swift_getObjectType();
    double v201 = v63;
    int v74 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v18 + 40);
    uint64_t v75 = v74(&v201, v73, v18);
    double v201 = v10;
    uint64_t result = v74(&v201, v73, v18);
    if (v75 != result)
    {
      uint64_t v76 = result;
      uint64_t v77 = result - v75;
      if (__OFSUB__(result, v75))
      {
LABEL_283:
        __break(1u);
        goto LABEL_284;
      }
      double v78 = v63 + (double)v77;
      double v201 = v78;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v77)) == (double)v62)
      {
        double v63 = v78;
      }
      else if (v76 >= v75)
      {
        double v63 = v78;
      }
    }
    uint64_t v16 = v195;
  }
  if (v192 >= 1)
  {
    double v208 = v63;
    double v199 = v14;
    uint64_t v200 = v18;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v208, (uint64_t)&v199, (uint64_t)&v201);
    if ((v203 & 1) == 0) {
      double v63 = v63 - v202;
    }
  }
  double v10 = v53 + v63 + 0.0;
LABEL_102:
  char v79 = v187;
  if (!v191) {
    char v79 = 1;
  }
  if (v79)
  {
    uint64_t v80 = v196;
    goto LABEL_146;
  }
  double v81 = fmod(v10, 1.0);
  if (v81 >= 0.0) {
    double v82 = v10 - v81;
  }
  else {
    double v82 = v10 - v81 + -1.0;
  }
  if (v81 >= 0.0) {
    double v83 = v81;
  }
  else {
    double v83 = v81 + 1.0;
  }
  uint64_t v84 = unk_1ECA58830;
  if ((unk_1ECA58830 & ~qword_1ECA58828) == 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = qword_1ECA58838;
  if ((qword_1ECA58838 & ~(v84 | qword_1ECA58828)) == 0) {
    uint64_t v85 = 0;
  }
  *(void *)&v205[0] = v85 | v84 | qword_1ECA58828;
  *(double *)int64_t v204 = v10;
  __dst[0] = *(_OWORD *)(v13 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v205, (double *)v204, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if (BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9])) {
    goto LABEL_293;
  }
  uint64_t v86 = *(void *)&__dst[7];
  uint64_t v87 = *(void *)&__dst[8];
  uint64_t v88 = *(void *)&__dst[9];
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  uint64_t v89 = 3600 * v86;
  if ((unsigned __int128)(v86 * (__int128)3600) >> 64 != (3600 * v86) >> 63) {
    goto LABEL_267;
  }
  uint64_t v90 = 60 * v87;
  if ((unsigned __int128)(v87 * (__int128)60) >> 64 != (60 * v87) >> 63)
  {
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  BOOL v30 = __OFADD__(v89, v90);
  uint64_t v91 = v89 + v90;
  if (v30)
  {
LABEL_272:
    __break(1u);
    goto LABEL_273;
  }
  BOOL v30 = __OFADD__(v91, v88);
  uint64_t v92 = v91 + v88;
  if (v30)
  {
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
    goto LABEL_276;
  }
  double v93 = (double)v191 * 604800.0 + v82;
  uint64_t v94 = unk_1ECA58868;
  if ((unk_1ECA58868 & ~qword_1ECA58860) == 0) {
    uint64_t v94 = 0;
  }
  uint64_t v95 = qword_1ECA58870;
  if ((qword_1ECA58870 & ~(v94 | qword_1ECA58860)) == 0) {
    uint64_t v95 = 0;
  }
  *(void *)&double v201 = v95 | v94 | qword_1ECA58860;
  double v199 = v93;
  v204[0] = *(_OWORD *)(v13 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v201, &v199, (uint64_t *)v204, v205);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)memcpy(v204, v205, 0x11AuLL);
  if (BYTE8(v204[7]) & 1) != 0 || (BYTE8(v204[8]) & 1) != 0 || (BYTE8(v204[9])) {
    goto LABEL_294;
  }
  uint64_t v96 = *(void *)&v204[7];
  uint64_t v97 = *(void *)&v204[8];
  uint64_t v98 = *(void *)&v204[9];
  uint64_t result = outlined release of DateComponents((uint64_t)v204);
  uint64_t v99 = 3600 * v96;
  if ((unsigned __int128)(v96 * (__int128)3600) >> 64 != (3600 * v96) >> 63) {
    goto LABEL_274;
  }
  uint64_t v100 = 60 * v97;
  if ((unsigned __int128)(v97 * (__int128)60) >> 64 != (60 * v97) >> 63)
  {
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }
  BOOL v30 = __OFADD__(v99, v100);
  uint64_t v101 = v99 + v100;
  if (v30)
  {
LABEL_277:
    __break(1u);
    goto LABEL_278;
  }
  BOOL v30 = __OFADD__(v101, v98);
  uint64_t v102 = v101 + v98;
  if (v30)
  {
LABEL_280:
    __break(1u);
    goto LABEL_281;
  }
  double v103 = (double)v92;
  BOOL v104 = (double)v92 == (double)v102;
  uint64_t v80 = v196;
  if (!v104)
  {
    uint64_t v105 = swift_getObjectType();
    double v201 = v93;
    id v106 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v18 + 40);
    uint64_t v107 = v106(&v201, v105, v18);
    double v201 = v10;
    uint64_t result = v106(&v201, v105, v18);
    if (v107 != result)
    {
      uint64_t v108 = result;
      uint64_t v109 = result - v107;
      if (__OFSUB__(result, v107))
      {
LABEL_284:
        __break(1u);
        goto LABEL_285;
      }
      double v110 = v93 + (double)v109;
      double v201 = v110;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v109)) == v103)
      {
        double v93 = v110;
      }
      else if (v108 >= v107)
      {
        double v93 = v110;
      }
    }
    uint64_t v16 = v195;
    uint64_t v80 = v196;
  }
  if (v191 >= 1)
  {
    double v208 = v93;
    double v199 = v14;
    uint64_t v200 = v18;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v208, (uint64_t)&v199, (uint64_t)&v201);
    if ((v203 & 1) == 0) {
      double v93 = v93 - v202;
    }
  }
  double v10 = v83 + v93 + 0.0;
LABEL_146:
  if ((v193 & ~v186) != 1 || !v189) {
    goto LABEL_177;
  }
  double v111 = fmod(v10, 1.0);
  if (v111 >= 0.0) {
    double v112 = v10 - v111;
  }
  else {
    double v112 = v10 - v111 + -1.0;
  }
  if (v111 >= 0.0) {
    double v113 = v111;
  }
  else {
    double v113 = v111 + 1.0;
  }
  uint64_t v114 = unk_1ECA588A0;
  if ((unk_1ECA588A0 & ~qword_1ECA58898) == 0) {
    uint64_t v114 = 0;
  }
  uint64_t v115 = qword_1ECA588A8;
  if ((qword_1ECA588A8 & ~(v114 | qword_1ECA58898)) == 0) {
    uint64_t v115 = 0;
  }
  *(void *)&v205[0] = v115 | v114 | qword_1ECA58898;
  *(double *)int64_t v204 = v10;
  __dst[0] = *(_OWORD *)(v13 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v205, (double *)v204, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if (BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9])) {
    goto LABEL_295;
  }
  uint64_t v116 = *(void *)&__dst[7];
  uint64_t v117 = *(void *)&__dst[8];
  uint64_t v118 = *(void *)&__dst[9];
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  uint64_t v119 = 3600 * v116;
  if ((unsigned __int128)(v116 * (__int128)3600) >> 64 != (3600 * v116) >> 63) {
    goto LABEL_275;
  }
  uint64_t v120 = 60 * v117;
  if ((unsigned __int128)(v117 * (__int128)60) >> 64 != (60 * v117) >> 63)
  {
LABEL_278:
    __break(1u);
    goto LABEL_279;
  }
  BOOL v30 = __OFADD__(v119, v120);
  uint64_t v121 = v119 + v120;
  if (v30)
  {
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
  BOOL v30 = __OFADD__(v121, v118);
  uint64_t v122 = v121 + v118;
  if (v30)
  {
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
  v123._time = (double)v189 * 604800.0;
  double v124 = v123._time + v112;
  double v125 = (double)v122;
  v205[0] = v124;
  if (_CalendarGregorian.timeInDay(for:)(v123) == (double)v122) {
    goto LABEL_173;
  }
  uint64_t v126 = swift_getObjectType();
  v205[0] = v124;
  int v127 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v18 + 40);
  uint64_t v128 = v127(v205, v126, v18);
  v205[0] = v10;
  uint64_t result = v127(v205, v126, v18);
  if (v128 != result)
  {
    uint64_t v129 = result;
    uint64_t v130 = result - v128;
    if (!__OFSUB__(result, v128))
    {
      double v131 = v124 + (double)v130;
      v205[0] = v131;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v130)) == v125)
      {
        double v124 = v131;
      }
      else if (v129 >= v128)
      {
        double v124 = v131;
      }
      goto LABEL_172;
    }
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }
LABEL_172:
  uint64_t v16 = v195;
LABEL_173:
  uint64_t v80 = v196;
  if (v189 >= 1)
  {
    double v201 = v124;
    *(double *)int64_t v204 = v14;
    *((void *)&v204[0] + 1) = v18;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v201, (uint64_t)v204, (uint64_t)v205);
    if ((LOBYTE(v205[2]) & 1) == 0) {
      double v124 = v124 - v205[1];
    }
  }
  double v10 = v113 + v124 + 0.0;
LABEL_177:
  char v132 = v185;
  if (!v80) {
    char v132 = 1;
  }
  if (v132)
  {
    uint64_t v133 = v190;
    goto LABEL_199;
  }
  double v134 = fmod(v10, 1.0);
  double v135 = v10 - v134;
  if (v134 < 0.0) {
    double v135 = v10 - v134 + -1.0;
  }
  double v136 = (double)v80;
  if (v134 >= 0.0) {
    double v137 = v134;
  }
  else {
    double v137 = v134 + 1.0;
  }
  double v138 = v136 * 86400.0 + v135;
  *(double *)__src = v10;
  v139._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v136 * 86400.0));
  *(double *)__src = v138;
  if (v139._time == _CalendarGregorian.timeInDay(for:)(v139))
  {
    uint64_t v133 = v190;
    goto LABEL_195;
  }
  uint64_t v140 = swift_getObjectType();
  *(double *)__src = v138;
  unint64_t v141 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v18 + 40);
  uint64_t v142 = v141(__src, v140, v18);
  *(double *)__src = v10;
  uint64_t result = v141(__src, v140, v18);
  if (v142 != result)
  {
    uint64_t v143 = result;
    uint64_t v144 = result - v142;
    if (!__OFSUB__(result, v142))
    {
      double v145 = v138 + (double)v144;
      *(double *)__src = v145;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v144)) == v139._time)
      {
        double v138 = v145;
      }
      else if (v143 >= v142)
      {
        double v138 = v145;
      }
      goto LABEL_194;
    }
LABEL_286:
    __break(1u);
    goto LABEL_287;
  }
LABEL_194:
  uint64_t v133 = v190;
  uint64_t v16 = v195;
LABEL_195:
  if (v196 >= 1)
  {
    v205[0] = v138;
    *(double *)long long __dst = v14;
    *((void *)&__dst[0] + 1) = v18;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v205, (uint64_t)__dst, (uint64_t)__src);
    if ((__src[1] & 1) == 0) {
      double v138 = v138 - *((double *)__src + 1);
    }
  }
  double v10 = v137 + v138 + 0.0;
LABEL_199:
  char v146 = v184;
  if (!v16) {
    char v146 = 1;
  }
  if ((v146 & 1) == 0)
  {
    double v147 = fmod(v10, 1.0);
    double v148 = v10 - v147;
    if (v147 < 0.0) {
      double v148 = v10 - v147 + -1.0;
    }
    double v149 = (double)v16;
    if (v147 >= 0.0) {
      double v150 = v147;
    }
    else {
      double v150 = v147 + 1.0;
    }
    double v151 = v149 * 86400.0 + v148;
    *(double *)__src = v10;
    v152._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v149 * 86400.0));
    *(double *)__src = v151;
    if (v152._time == _CalendarGregorian.timeInDay(for:)(v152))
    {
      uint64_t v133 = v190;
      if (v16 < 1) {
        goto LABEL_219;
      }
      goto LABEL_217;
    }
    uint64_t v153 = swift_getObjectType();
    *(double *)__src = v151;
    unint64_t v154 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v18 + 40);
    uint64_t v155 = v154(__src, v153, v18);
    *(double *)__src = v10;
    uint64_t result = v154(__src, v153, v18);
    if (v155 == result)
    {
LABEL_216:
      uint64_t v133 = v190;
      if (v195 < 1)
      {
LABEL_219:
        double v10 = v150 + v151 + 0.0;
        goto LABEL_220;
      }
LABEL_217:
      v205[0] = v151;
      *(double *)long long __dst = v14;
      *((void *)&__dst[0] + 1) = v18;
      _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v205, (uint64_t)__dst, (uint64_t)__src);
      if ((__src[1] & 1) == 0) {
        double v151 = v151 - *((double *)__src + 1);
      }
      goto LABEL_219;
    }
    uint64_t v156 = result;
    uint64_t v157 = result - v155;
    if (!__OFSUB__(result, v155))
    {
      double v158 = v151 + (double)v157;
      *(double *)__src = v158;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v157)) == v152._time)
      {
        double v151 = v158;
      }
      else if (v156 >= v155)
      {
        double v151 = v158;
      }
      goto LABEL_216;
    }
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
    return result;
  }
LABEL_220:
  char v159 = v183;
  if (!v133) {
    char v159 = 1;
  }
  if ((v159 & 1) == 0)
  {
    double v160 = fmod(v10, 1.0);
    double v161 = v10 - v160;
    if (v160 < 0.0) {
      double v161 = v10 - v160 + -1.0;
    }
    double v162 = (double)v133;
    if (v160 >= 0.0) {
      double v163 = v160;
    }
    else {
      double v163 = v160 + 1.0;
    }
    double v164 = v162 * 86400.0 + v161;
    *(double *)__src = v10;
    v165._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v162 * 86400.0));
    *(double *)__src = v164;
    if (v165._time == _CalendarGregorian.timeInDay(for:)(v165)) {
      goto LABEL_235;
    }
    uint64_t v166 = swift_getObjectType();
    *(double *)__src = v164;
    uint64_t v167 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v18 + 40);
    uint64_t v168 = v167(__src, v166, v18);
    *(double *)__src = v10;
    uint64_t result = v167(__src, v166, v18);
    if (v168 == result) {
      goto LABEL_235;
    }
    uint64_t v169 = result;
    uint64_t v170 = result - v168;
    if (!__OFSUB__(result, v168))
    {
      double v171 = v164 + (double)v170;
      *(double *)__src = v171;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v170)) == v165._time)
      {
        double v164 = v171;
      }
      else if (v169 >= v168)
      {
        double v164 = v171;
      }
LABEL_235:
      if (v190 >= 1)
      {
        v205[0] = v164;
        *(double *)long long __dst = v14;
        *((void *)&__dst[0] + 1) = v18;
        _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v205, (uint64_t)__dst, (uint64_t)__src);
        if ((__src[1] & 1) == 0) {
          double v164 = v164 - *((double *)__src + 1);
        }
      }
      double v10 = v163 + v164 + 0.0;
      goto LABEL_239;
    }
    goto LABEL_288;
  }
LABEL_239:
  if ((v182 & 1) == 0)
  {
    LOBYTE(v201) = 4;
    *(double *)int64_t v204 = v10;
    *(double *)long long __dst = v14;
    *((void *)&__dst[0] + 1) = v18;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v201, (double *)v204, v180, (double *)__dst, (uint64_t)__src, v205);
    if (v15) {
      goto LABEL_247;
    }
    uint64_t v15 = 0;
    double v10 = v205[0];
  }
  if ((v181 & 1) == 0)
  {
    LOBYTE(v201) = 5;
    *(double *)int64_t v204 = v10;
    *(double *)long long __dst = v14;
    *((void *)&__dst[0] + 1) = v18;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v201, (double *)v204, v178, (double *)__dst, (uint64_t)__src, v205);
    if (!v15)
    {
      uint64_t v15 = 0;
      double v10 = v205[0];
      goto LABEL_245;
    }
LABEL_247:
    uint64_t result = swift_unknownObjectRelease();
LABEL_248:
    char v172 = __src[2];
    long long v173 = __src[1];
    *(_OWORD *)a3 = __src[0];
    *(_OWORD *)(a3 + 16) = v173;
    *(unsigned char *)(a3 + 32) = v172;
    return result;
  }
LABEL_245:
  if ((v179 & 1) == 0)
  {
    LOBYTE(v201) = 6;
    *(double *)int64_t v204 = v10;
    *(double *)long long __dst = v14;
    *((void *)&__dst[0] + 1) = v18;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v201, (double *)v204, v176, (double *)__dst, (uint64_t)__src, v205);
    if (v15) {
      goto LABEL_247;
    }
    uint64_t v15 = 0;
    double v10 = v205[0];
  }
  if (v177)
  {
    uint64_t result = swift_unknownObjectRelease();
    *a4 = v10;
  }
  else
  {
    LOBYTE(v201) = 13;
    *(double *)int64_t v204 = v10;
    *(double *)long long __dst = v14;
    *((void *)&__dst[0] + 1) = v18;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v201, (double *)v204, v174, (double *)__dst, (uint64_t)__src, v205);
    uint64_t result = swift_unknownObjectRelease();
    if (v15) {
      goto LABEL_248;
    }
    *a4 = v205[0];
  }
  return result;
}

Swift::Double __swiftcall _CalendarGregorian.timeInDay(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = unk_1ECA3B768;
  if ((unk_1ECA3B768 & ~qword_1ECA3B760) == 0) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = qword_1ECA3B770;
  if ((qword_1ECA3B770 & ~(v4 | qword_1ECA3B760)) == 0) {
    uint64_t v5 = 0;
  }
  uint64_t v17 = v5 | v4 | qword_1ECA3B760;
  uint64_t v16 = v3;
  long long v15 = *(_OWORD *)(v2 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v17, (double *)&v16, (uint64_t *)&v15, v18);
  swift_unknownObjectRelease();
  if (v20 & 1) != 0 || (v22 & 1) != 0 || (v24) {
    goto LABEL_17;
  }
  uint64_t v7 = v19;
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  outlined release of DateComponents((uint64_t)v18);
  uint64_t v10 = 3600 * v7;
  if ((unsigned __int128)(v7 * (__int128)3600) >> 64 != (3600 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v11 = 60 * v8;
  if ((unsigned __int128)(v8 * (__int128)60) >> 64 != (60 * v8) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  BOOL v12 = __OFADD__(v10, v11);
  uint64_t v13 = v10 + v11;
  if (!v12)
  {
    BOOL v12 = __OFADD__(v13, v9);
    uint64_t v14 = v13 + v9;
    if (!v12) {
      return (double)v14;
    }
    goto LABEL_16;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void *_CalendarGregorian.dateComponents(_:from:in:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = v4;
  uint64_t v10 = *a1;
  double v11 = *a2;
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  uint64_t ObjectType = swift_getObjectType();
  *(double *)double v124 = v11;
  double v15 = v11 + (double)(*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v13 + 40))(v124, ObjectType, v13);
  double v16 = floor(v15);
  double v17 = *(double *)(v4 + 72);
  double v18 = 86400.0;
  double v19 = remainder(v16, 86400.0);
  if (v19 < 0.0) {
    double v19 = v19 + 86400.0;
  }
  double v20 = v19 / 3600.0;
  if (v19 / 3600.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_225;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }
  long double v21 = fmod(v19, 3600.0);
  double v7 = v21 / 60.0;
  if (v21 / 60.0 <= -9.22337204e18)
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  double v18 = fmod(v21, 60.0);
  if (v18 <= -9.22337204e18)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  if (v18 >= 9.22337204e18)
  {
LABEL_229:
    __break(1u);
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }
  double v15 = (v15 - v16) * 1000000000.0;
  if ((~*(void *)&v15 & 0x7FF0000000000000) == 0
    || (*(void *)&v18 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_230;
  }
  if ((*(void *)&v20 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v7 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_230;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_231:
    __break(1u);
    goto LABEL_232;
  }
  if (v15 >= 9.22337204e18)
  {
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }
  double v24 = floor(v16 / 86400.0 + 2451910.5 + 0.5);
  if (v24 > 2130706430.0 || v24 < -2130706430.0)
  {
    *(void *)&v124[0] = 18;
    *((double *)v124 + 1) = v16;
    v124[1] = 0uLL;
LABEL_47:
    LOBYTE(v124[2]) = 1;
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    swift_willThrowTypedImpl();
    LOBYTE(v40) = 0;
    uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
    Swift::Int v119 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v116 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v112 = 0x7FFFFFFFFFFFFFFFLL;
    Swift::Int v114 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_48;
  }
  if ((~*(void *)&v24 & 0x7FF0000000000000) == 0) {
    goto LABEL_233;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_235:
    __break(1u);
LABEL_236:
    __break(1u);
LABEL_237:
    uint64_t v43 = swift_once();
    goto LABEL_72;
  }
  uint64_t v26 = (uint64_t)v24;
  uint64_t v27 = specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)((uint64_t)v24, v16 < v17);
  uint64_t v5 = v27;
  uint64_t v30 = *(void *)(v8 + 64);
  uint64_t v31 = v27 & 3;
  BOOL v32 = (v27 & 3) == 0 && v27 < v30;
  if (v27 >= v30 && v31 == 0)
  {
    BOOL v34 = __ROR8__(0x8F5C28F5C28F5C29 * v27 + 0x51EB851EB851EB0, 4) < 0xA3D70A3D70A3D7uLL;
    BOOL v32 = __ROR8__(0x8F5C28F5C28F5C29 * v27 + 0x51EB851EB851EB8, 2) > 0x28F5C28F5C28F5CuLL || v34;
  }
  uint64_t v35 = v28 - 2;
  if (__OFSUB__(v28, 2)) {
    goto LABEL_236;
  }
  uint64_t v36 = v27 + 4716;
  if (__OFADD__(v27, 4716))
  {
LABEL_46:
    v124[0] = xmmword_1821A0620;
    v124[1] = xmmword_18210C780;
    goto LABEL_47;
  }
  if (__OFSUB__(12, v35))
  {
    __break(1u);
    goto LABEL_239;
  }
  uint64_t v37 = (14 - v28) / 12;
  BOOL v38 = __OFSUB__(v36, v37);
  uint64_t v39 = v36 - v37;
  if (v38)
  {
LABEL_239:
    __break(1u);
    goto LABEL_240;
  }
  if (__OFSUB__(v35, 1))
  {
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  if (__OFADD__(v28 - 3, 12))
  {
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
  if ((unsigned __int128)(v39 * (__int128)1461) >> 64 != (1461 * v39) >> 63) {
    goto LABEL_46;
  }
  Swift::Int v58 = v29 + 1461 * v39 / 4;
  if (__OFADD__(v29, 1461 * v39 / 4))
  {
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }
  BOOL v38 = __OFSUB__(v58, 1);
  Swift::Int v59 = v58 - 1;
  if (v38)
  {
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }
  BOOL v38 = __OFSUB__(v59, 1401);
  Swift::Int v60 = v59 - 1401;
  if (v38)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  int v61 = 26215 * (__int16)(153 * ((__int16)(v28 + 9) % 12) + 2);
  BOOL v38 = __OFADD__(v60, (int)((v61 >> 17) + (v61 >> 31)));
  Swift::Int v62 = v60 + (int)((v61 >> 17) + (v61 >> 31));
  if (v38)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  uint64_t v63 = 3 * ((v39 + 184) / 100);
  Swift::Int v64 = v62 - v63 / 4;
  if (__OFSUB__(v62, v63 / 4))
  {
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }
  uint64_t v65 = v64 + 38;
  if (__OFADD__(v64, 38))
  {
LABEL_248:
    __break(1u);
    goto LABEL_249;
  }
  if (v27 >= v30)
  {
    if ((v27 & 3) != 0)
    {
      uint64_t v67 = &outlined read-only object #0 of _CalendarGregorian.dateComponents(_:from:in:);
      goto LABEL_152;
    }
    if (__ROR8__(0x8F5C28F5C28F5C29 * v27 + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL)
    {
      uint64_t v67 = &outlined read-only object #1 of _CalendarGregorian.dateComponents(_:from:in:);
      goto LABEL_152;
    }
    uint64_t v66 = 400;
  }
  else
  {
    uint64_t v66 = 4;
  }
  if (v27 % v66) {
    uint64_t v67 = &outlined read-only object #0 of _CalendarGregorian.dateComponents(_:from:in:);
  }
  else {
    uint64_t v67 = &outlined read-only object #1 of _CalendarGregorian.dateComponents(_:from:in:);
  }
LABEL_152:
  uint64_t v117 = v31;
  uint64_t v118 = v65;
  Swift::Int v119 = v29;
  BOOL v111 = v32;
  uint64_t v116 = v28;
  unint64_t v71 = v28 - 1;
  if (v28 < 1)
  {
LABEL_249:
    __break(1u);
    goto LABEL_250;
  }
  uint64_t v115 = v13;
  if (v71 >= v67[2])
  {
LABEL_250:
    __break(1u);
    goto LABEL_251;
  }
  uint64_t v40 = (uint64_t)a4;
  uint64_t v13 = *(void *)(v8 + 56);
  uint64_t v72 = v67[v71 + 4];
  swift_bridgeObjectRelease();
  int64_t v121 = v72 + v119;
  if (__OFADD__(v72, v119))
  {
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
    goto LABEL_253;
  }
  if (v5 != v30)
  {
    a4 = (void *)v40;
    uint64_t v77 = v26 + 1;
    if (!__OFADD__(v26, 1)) {
      goto LABEL_160;
    }
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }
  a4 = (void *)v40;
  if (v118 >= v13)
  {
    uint64_t v74 = v5 - 1;
    if (__OFSUB__(v5, 1))
    {
LABEL_259:
      __break(1u);
      goto LABEL_260;
    }
    uint64_t v75 = ((unsigned __int128)(v74 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v74;
    uint64_t v76 = v74 / 400 + (v75 >> 6) + ((unint64_t)v75 >> 63) + 2;
    BOOL v38 = __OFADD__(v121, v76);
    v121 += v76;
    if (v38)
    {
LABEL_260:
      __break(1u);
      goto LABEL_261;
    }
  }
  uint64_t v77 = v26 + 1;
  if (__OFADD__(v26, 1)) {
    goto LABEL_189;
  }
LABEL_160:
  uint64_t v78 = v77 % 7;
  if (v78 >= 0) {
    uint64_t v79 = v78;
  }
  else {
    uint64_t v79 = v78 + 7;
  }
  uint64_t v80 = _CalendarGregorian.firstWeekday.getter();
  if (__OFSUB__(v79 + 8, v80)) {
    goto LABEL_252;
  }
  Swift::Int v109 = v79 + 1;
  uint64_t v81 = v79 + 1 - v121;
  LOBYTE(v40) = v111;
  if (__OFSUB__(v79 + 1, v121))
  {
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  uint64_t v113 = v79 + 8 - v80;
  uint64_t v82 = v81 + 7001;
  if (__OFADD__(v81, 7001))
  {
LABEL_254:
    __break(1u);
    goto LABEL_255;
  }
  uint64_t v83 = _CalendarGregorian.firstWeekday.getter();
  uint64_t v84 = v82 - v83;
  if (__OFSUB__(v82, v83))
  {
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }
  int64_t v85 = v121 - 1;
  if (__OFSUB__(v121, 1))
  {
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  uint64_t v73 = (uint64_t)((unsigned __int128)(v84 * (__int128)0x4924924924924925) >> 64) >> 1;
  uint64_t v86 = v84 % 7;
  BOOL v38 = __OFADD__(v85, v84 % 7);
  int64_t v87 = v85 + v84 % 7;
  if (v38)
  {
LABEL_257:
    __break(1u);
    goto LABEL_258;
  }
  uint64_t v88 = v87 / 7;
  if (*(unsigned char *)(v8 + 144) != 1)
  {
    uint64_t v40 = *(void *)(v8 + 136);
LABEL_173:
    BOOL v90 = 7 - v86 < v40;
    LOBYTE(v40) = v111;
    if (v90) {
      goto LABEL_175;
    }
    goto LABEL_174;
  }
  if (*(void *)(v8 + 88))
  {
    uint64_t v89 = *(void *)(v8 + 96);
    uint64_t v118 = v87 / 7;
    uint64_t v105 = swift_getObjectType();
    BOOL v104 = *(uint64_t (**)(uint64_t, uint64_t))(v89 + 344);
    swift_unknownObjectRetain();
    uint64_t v40 = v104(v105, v89);
    swift_unknownObjectRelease();
    uint64_t v88 = v118;
    goto LABEL_173;
  }
LABEL_174:
  ++v88;
LABEL_175:
  if (v88)
  {
    uint64_t v118 = v88;
    uint64_t v13 = v115;
    if (v5 >= v30)
    {
      if (v117) {
        goto LABEL_186;
      }
      if (__ROR8__(0x8F5C28F5C28F5C29 * v5 + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL)
      {
LABEL_194:
        Swift::Int v94 = 366;
        goto LABEL_195;
      }
      uint64_t v91 = 400;
    }
    else
    {
      uint64_t v91 = 4;
    }
    if (!(v5 % v91)) {
      goto LABEL_194;
    }
LABEL_186:
    Swift::Int v94 = 365;
LABEL_195:
    if (v121 < v94 - 5)
    {
      uint64_t v117 = v5;
LABEL_219:
      Swift::Int v96 = v109;
      goto LABEL_220;
    }
    uint64_t v73 = v113 % 7;
    uint64_t v97 = (v113 % 7 - v121 + v94) % 7;
    if (v97 >= 0) {
      uint64_t v13 = (v113 % 7 - v121 + v94) % 7;
    }
    else {
      uint64_t v13 = v97 + 7;
    }
    if (*(unsigned char *)(v8 + 144) != 1)
    {
      uint64_t v40 = *(void *)(v8 + 136);
LABEL_204:
      uint64_t v100 = v118;
      BOOL v90 = 6 - v13 < v40;
      LOBYTE(v40) = v111;
      if (!v90) {
        goto LABEL_213;
      }
      goto LABEL_206;
    }
    if (*(void *)(v8 + 88))
    {
      uint64_t v98 = *(void *)(v8 + 96);
      uint64_t v99 = swift_getObjectType();
      id v106 = *(uint64_t (**)(uint64_t, uint64_t))(v98 + 344);
      uint64_t v108 = v99;
      swift_unknownObjectRetain();
      uint64_t v40 = v106(v108, v98);
      swift_unknownObjectRelease();
      uint64_t v73 = v113 % 7;
      goto LABEL_204;
    }
LABEL_212:
    uint64_t v100 = v118;
    if (v13 <= 5)
    {
LABEL_213:
      int64_t v101 = v121 + 7;
      uint64_t v13 = v115;
      if (__OFADD__(v121, 7))
      {
LABEL_262:
        __break(1u);
        goto LABEL_263;
      }
      BOOL v38 = __OFSUB__(v101, v73);
      Swift::Int v102 = v101 - v73;
      if (v38)
      {
LABEL_263:
        __break(1u);
        goto LABEL_264;
      }
      if (v94 >= v102)
      {
        uint64_t v103 = v5;
      }
      else
      {
        uint64_t v100 = 1;
        uint64_t v103 = v5 + 1;
      }
      uint64_t v117 = v103;
      uint64_t v118 = v100;
      goto LABEL_219;
    }
LABEL_206:
    uint64_t v117 = v5;
    uint64_t v13 = v115;
    goto LABEL_219;
  }
  uint64_t v77 = v5 - 1;
  uint64_t v13 = v115;
  if (__OFSUB__(v5, 1))
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }
  uint64_t v117 = v5 - 1;
  if (v77 < v30)
  {
    uint64_t v92 = 4;
    int64_t v93 = v121;
    Swift::Int v94 = v109;
    goto LABEL_183;
  }
LABEL_190:
  int64_t v93 = v121;
  Swift::Int v94 = v109;
  if ((v77 & 3) != 0) {
    goto LABEL_191;
  }
  uint64_t v73 = v117;
  if (__ROR8__(0x8F5C28F5C28F5C29 * v117 + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL) {
    goto LABEL_209;
  }
  uint64_t v92 = 400;
LABEL_183:
  uint64_t v73 = v117;
  if (!(v117 % v92))
  {
LABEL_209:
    Swift::Int v95 = v93 + 366;
    if (!__OFADD__(v93, 366)) {
      goto LABEL_192;
    }
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }
LABEL_191:
  Swift::Int v95 = v93 + 365;
  if (__OFADD__(v93, 365)) {
    goto LABEL_211;
  }
LABEL_192:
  uint64_t v118 = _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(v95, v95, v94);
  Swift::Int v96 = v94;
LABEL_220:
  Swift::Int v114 = _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(v119, v119, v96);
  if (__OFSUB__(v119, 1))
  {
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }
  uint64_t v112 = (v119 - 1) / 7 + 1;
  unint64_t v42 = v121;
  uint64_t v41 = v109;
LABEL_48:
  long long v123 = 0uLL;
  long long v122 = 0uLL;
  uint64_t v43 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v123, (uint64_t *)&v122, 0, 1, 0, 1, 0, 1, (uint64_t)v124, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1);
  if ((v10 & 0x4000) == 0)
  {
    if ((v10 & 0x8000) == 0) {
      goto LABEL_50;
    }
LABEL_75:
    *(void *)&v124[1] = v12;
    *((void *)&v124[1] + 1) = v13;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(void *)&v124[0])
    {
      *(void *)&long long v123 = v12;
      *((void *)&v123 + 1) = v13;
      Calendar.timeZone.setter((uint64_t *)&v123);
      if (v10) {
        goto LABEL_77;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      if (v10) {
        goto LABEL_77;
      }
    }
LABEL_51:
    if ((v10 & 2) == 0) {
      goto LABEL_52;
    }
    goto LABEL_78;
  }
  uint64_t v107 = a4;
  Swift::Int v109 = v41;
  unint64_t v120 = v42;
  char v110 = v40;
  uint64_t v6 = v13;
  if (one-time initialization token for cache != -1) {
    goto LABEL_237;
  }
LABEL_72:
  uint64_t v46 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](v43);
  swift_retain_n();
  os_unfair_lock_lock(v46 + 15);
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v46[4], &v123);
  os_unfair_lock_unlock(v46 + 15);
  swift_release_n();
  *(void *)&long long v122 = v12;
  *((void *)&v122 + 1) = v6;
  uint64_t v13 = v6;
  swift_unknownObjectRetain();
  Calendar.timeZone.setter((uint64_t *)&v122);
  long long v47 = v123;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v124[0] = v47;
  if (*(void *)&v124[1])
  {
    long long v122 = v124[1];
    swift_unknownObjectRetain();
    Calendar.timeZone.setter((uint64_t *)&v122);
  }
  swift_unknownObjectRelease();
  a4 = v107;
  uint64_t v41 = v109;
  LOBYTE(v40) = v110;
  unint64_t v42 = v120;
  if ((v10 & 0x8000) != 0) {
    goto LABEL_75;
  }
LABEL_50:
  if ((v10 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_77:
  *(void *)&v124[2] = v5 > 0;
  BYTE8(v124[2]) = 0;
  if ((v10 & 2) == 0)
  {
LABEL_52:
    if ((v10 & 4) == 0) {
      goto LABEL_53;
    }
    goto LABEL_84;
  }
LABEL_78:
  if (v5 <= 0)
  {
    BOOL v38 = __OFSUB__(1, v5);
    uint64_t v5 = 1 - v5;
    if (v38) {
      goto LABEL_242;
    }
  }
  if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v5;
  }
  *(void *)&v124[3] = v48;
  BYTE8(v124[3]) = v5 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 4) == 0)
  {
LABEL_53:
    if ((v10 & 8) == 0) {
      goto LABEL_54;
    }
    goto LABEL_87;
  }
LABEL_84:
  uint64_t v49 = v116;
  if (v116 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v49 = 0;
  }
  *(void *)&v124[4] = v49;
  BYTE8(v124[4]) = v116 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 8) == 0)
  {
LABEL_54:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_90;
  }
LABEL_87:
  Swift::Int v50 = v119;
  if (v119 == 0x7FFFFFFFFFFFFFFFLL) {
    Swift::Int v50 = 0;
  }
  *(void *)&v124[5] = v50;
  BYTE8(v124[5]) = v119 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x40000) == 0)
  {
LABEL_55:
    if ((v10 & 0x10) == 0) {
      goto LABEL_56;
    }
    goto LABEL_94;
  }
LABEL_90:
  if (v42 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v51 = 0;
  }
  else {
    unint64_t v51 = v42;
  }
  *(void *)&v124[6] = v51;
  BYTE8(v124[6]) = v42 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x10) == 0)
  {
LABEL_56:
    if ((v10 & 0x20) == 0) {
      goto LABEL_57;
    }
    goto LABEL_97;
  }
LABEL_94:
  uint64_t v52 = (uint64_t)v20;
  if ((uint64_t)v20 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v52 = 0;
  }
  *(void *)&v124[7] = v52;
  BYTE8(v124[7]) = (uint64_t)v20 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x20) == 0)
  {
LABEL_57:
    if ((v10 & 0x40) == 0) {
      goto LABEL_58;
    }
    goto LABEL_100;
  }
LABEL_97:
  uint64_t v53 = (uint64_t)v7;
  if ((uint64_t)v7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v53 = 0;
  }
  *(void *)&v124[8] = v53;
  BYTE8(v124[8]) = (uint64_t)v7 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x40) == 0)
  {
LABEL_58:
    if ((v10 & 0x80) == 0) {
      goto LABEL_59;
    }
    goto LABEL_103;
  }
LABEL_100:
  uint64_t v54 = (uint64_t)v18;
  if ((uint64_t)v18 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v54 = 0;
  }
  *(void *)&v124[9] = v54;
  BYTE8(v124[9]) = (uint64_t)v18 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x80) == 0)
  {
LABEL_59:
    if ((v10 & 0x100) == 0) {
      goto LABEL_60;
    }
    goto LABEL_107;
  }
LABEL_103:
  if (v41 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v41;
  }
  *(void *)&v124[11] = v55;
  BYTE8(v124[11]) = v41 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x100) == 0)
  {
LABEL_60:
    if ((v10 & 0x200) == 0) {
      goto LABEL_61;
    }
    goto LABEL_110;
  }
LABEL_107:
  uint64_t v56 = v112;
  if (v112 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v56 = 0;
  }
  *(void *)&v124[12] = v56;
  BYTE8(v124[12]) = v112 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x200) == 0)
  {
LABEL_61:
    if ((v10 & 0x400) == 0) {
      goto LABEL_62;
    }
    goto LABEL_140;
  }
LABEL_110:
  if (v40)
  {
    if ((uint64_t)v42 >= 91)
    {
      if (v42 >= 0xB6)
      {
        if (v42 >= 0x112)
        {
          if (v42 >= 0x16F) {
            goto LABEL_264;
          }
          goto LABEL_138;
        }
LABEL_134:
        uint64_t v57 = 3;
        goto LABEL_139;
      }
LABEL_121:
      uint64_t v57 = 2;
      goto LABEL_139;
    }
LABEL_117:
    uint64_t v57 = 1;
    goto LABEL_139;
  }
  if ((uint64_t)v42 < 90) {
    goto LABEL_117;
  }
  if (v42 < 0xB5) {
    goto LABEL_121;
  }
  if (v42 < 0x111) {
    goto LABEL_134;
  }
  if (v42 >= 0x16E)
  {
LABEL_264:
    Swift::Double result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_138:
  uint64_t v57 = 4;
LABEL_139:
  *(void *)&v124[13] = v57;
  BYTE8(v124[13]) = 0;
  if ((v10 & 0x400) == 0)
  {
LABEL_62:
    if ((v10 & 0x800) == 0) {
      goto LABEL_63;
    }
    goto LABEL_143;
  }
LABEL_140:
  Swift::Int v68 = v114;
  if (v114 == 0x7FFFFFFFFFFFFFFFLL) {
    Swift::Int v68 = 0;
  }
  *(void *)&v124[15] = v68;
  BYTE8(v124[15]) = v114 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x800) == 0)
  {
LABEL_63:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_64;
    }
LABEL_146:
    uint64_t v70 = v117;
    if (v117 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v70 = 0;
    }
    *(void *)&v124[17] = v70;
    BYTE8(v124[17]) = v117 == 0x7FFFFFFFFFFFFFFFLL;
    if ((v10 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_65;
  }
LABEL_143:
  uint64_t v69 = v118;
  if (v118 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v69 = 0;
  }
  *(void *)&v124[16] = v69;
  BYTE8(v124[16]) = v118 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v10 & 0x1000) != 0) {
    goto LABEL_146;
  }
LABEL_64:
  if ((v10 & 0x2000) != 0)
  {
LABEL_65:
    uint64_t v44 = (uint64_t)v15;
    if ((uint64_t)v15 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v44 = 0;
    }
    *(void *)&v124[10] = v44;
    BYTE8(v124[10]) = (uint64_t)v15 == 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_68:
  if ((v10 & 0x10004) != 0) {
    BYTE9(v124[17]) = 0;
  }
  return memcpy(a4, v124, 0x11AuLL);
}

uint64_t _CalendarGregorian.firstWeekday.getter()
{
  void (*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  if (*((unsigned char *)v0 + 128) != 1) {
    return v0[15];
  }
  if (!v0[11]) {
    return 1;
  }
  uint64_t v1 = v0[12];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 328);
  swift_unknownObjectRetain();
  v3(&v9, ObjectType, v1);
  uint64_t v4 = v9;
  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }
  uint64_t v0 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Collection<>.firstIndex(of:)(v4, (uint64_t)v0);
  double v7 = v6;
  Swift::Double result = swift_bridgeObjectRelease();
  if (v7)
  {
    __break(1u);
    return result;
  }
  swift_unknownObjectRelease();
  Swift::Double result = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return v0[15];
  }
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 32;
  uint64_t v5 = qword_182108428[a1];
  while (qword_182108428[*(char *)(v4 + v3)] != v5)
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    if (v6) {
      return v3;
    }
    if (v2 == ++v3) {
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleICU@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.firstDayOfWeek.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);

  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.firstDayOfWeek.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in _LocaleICU.firstDayOfWeek.getter(a1, v2, a2);
}

uint64_t closure #1 in _LocaleICU.firstDayOfWeek.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(result + 208);
  if (v4 != 7) {
    goto LABEL_25;
  }
  uint64_t v6 = result;
  v7._uint64_t countAndFlagsBits = specialized static Locale.keywordValue(identifier:key:)();
  if (!v7._object || (Swift::Double result = Locale.Weekday.init(rawValue:)(v7, v19), LOBYTE(v4) = v19[0], v19[0] == 7))
  {
    outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v18);
    outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v19);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v19) != 1)
    {
      if (v20)
      {
        _LocaleICU._lockedCalendarIdentifier(_:)(v6, &v15);
        uint64_t v8 = v15;
        outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v16);
        uint64_t v9 = v17;
        if (v17)
        {
          if (*(void *)(v17 + 16))
          {
            Swift::Double result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
            if (v10)
            {
              uint64_t v11 = *(void *)(*(void *)(v9 + 56) + 8 * result);
              if (v11 < (uint64_t)0xFFFFFFFF80000000)
              {
LABEL_27:
                __break(1u);
                goto LABEL_28;
              }
              if (v11 > 0x7FFFFFFF)
              {
LABEL_28:
                __break(1u);
                goto LABEL_29;
              }
              if ((int)v11 > 0 && v11 < 8)
              {
                if (one-time initialization token for weekdays == -1)
                {
LABEL_22:
                  if ((unint64_t)v11 > *((void *)static Locale.Weekday.weekdays + 2)) {
                    __break(1u);
                  }
                  LOBYTE(v4) = *((unsigned char *)static Locale.Weekday.weekdays + v11 + 31);
                  goto LABEL_24;
                }
LABEL_29:
                Swift::Double result = swift_once();
                goto LABEL_22;
              }
            }
          }
        }
      }
    }
    v16[0] = 0;
    String.utf8CString.getter();
    LODWORD(v11) = ucal_open();
    swift_release();
    if (v16[0] > 0 || (unsigned int Attribute = ucal_getAttribute(), Attribute - 8 < 0xFFFFFFF9))
    {
      *(unsigned char *)(v6 + 208) = 0;
      *a3 = 0;
      return ucal_close();
    }
    unsigned int v13 = Attribute;
    if (one-time initialization token for weekdays != -1) {
      swift_once();
    }
    if (*((void *)static Locale.Weekday.weekdays + 2) >= (unint64_t)v13)
    {
      char v14 = *((unsigned char *)static Locale.Weekday.weekdays + v13 + 31);
      *(unsigned char *)(v6 + 208) = v14;
      *a3 = v14;
      return ucal_close();
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_24:
  *(unsigned char *)(v6 + 208) = v4;
LABEL_25:
  *a3 = v4;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.minimumDaysInFirstWeek.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  return closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter(*(long long *)&a1, a2);
}

uint64_t closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter@<X0>(long long a1@<X1:X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 280) == 1)
  {
    int v4 = (unsigned char *)(a1 + 280);
    outlined init with take of LocalePreferences?(*((void *)&a1 + 1) + 32, (uint64_t)v8);
    outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) == 1
      || (_LocaleICU._lockedCalendarIdentifier(_:)(v2, &v7),
          *(Swift::Int_optional *)&a1 = _LocaleICU.forceMinDaysInFirstWeek(_:)((Foundation::Calendar::Identifier)&v7),
          (BYTE8(a1) & 1) != 0))
    {
      int v7 = 0;
      String.utf8CString.getter();
      ucal_open();
      swift_release();
      if (v7 <= 0) {
        uint64_t Attribute = (int)ucal_getAttribute();
      }
      else {
        uint64_t Attribute = 1;
      }
      *(void *)(v2 + 272) = Attribute;
      *int v4 = 0;
      *a2 = Attribute;
      *(void *)&a1 = ucal_close();
    }
    else
    {
      *(void *)(v2 + 272) = a1;
      *int v4 = 0;
      *a2 = a1;
    }
  }
  else
  {
    *a2 = *(void *)(a1 + 272);
  }
  return a1;
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  *(_WORD *)(a9 + 280) = 513;
  uint64_t v34 = *a2;
  uint64_t v35 = a2[1];
  *(void *)(a9 + 32) = 0;
  long long v36 = *a1;
  *(unsigned char *)(a9 + 40) = 1;
  *(void *)(a9 + 48) = 0;
  *(unsigned char *)(a9 + 56) = 1;
  *(void *)(a9 + 64) = 0;
  *(unsigned char *)(a9 + 72) = 1;
  *(void *)(a9 + 80) = 0;
  *(unsigned char *)(a9 + 88) = 1;
  *(void *)(a9 + 96) = 0;
  *(unsigned char *)(a9 + 104) = 1;
  *(void *)(a9 + 112) = 0;
  *(unsigned char *)(a9 + 120) = 1;
  *(void *)(a9 + 128) = 0;
  *(unsigned char *)(a9 + 136) = 1;
  *(void *)(a9 + 144) = 0;
  *(unsigned char *)(a9 + 152) = 1;
  *(void *)(a9 + 160) = 0;
  *(unsigned char *)(a9 + 168) = 1;
  *(void *)(a9 + 176) = 0;
  *(unsigned char *)(a9 + 184) = 1;
  *(void *)(a9 + 192) = 0;
  *(unsigned char *)(a9 + 200) = 1;
  *(void *)(a9 + 208) = 0;
  *(unsigned char *)(a9 + 216) = 1;
  *(void *)(a9 + 224) = 0;
  *(unsigned char *)(a9 + 232) = 1;
  *(void *)(a9 + 240) = 0;
  *(unsigned char *)(a9 + 248) = 1;
  *(void *)(a9 + 256) = 0;
  *(unsigned char *)(a9 + 264) = 1;
  *(void *)(a9 + 272) = 0;
  *(_OWORD *)a9 = v36;
  *(void *)(a9 + 16) = v34;
  *(void *)(a9 + 24) = v35;
  if (v34 && (void)v36)
  {
    v60[0] = v34;
    v60[1] = v35;
    uint64_t v37 = a7;
    swift_unknownObjectRetain();
    Calendar.timeZone.setter(v60);
    a7 = v37;
  }
  BOOL v38 = a3 == 0x7FFFFFFFFFFFFFFFLL;
  if ((a4 & 1) == 0 && a3 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = a3;
  }
  uint64_t v56 = v39;
  if ((a6 & 1) == 0 && a5 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = a5;
  }
  uint64_t v55 = v40;
  BOOL v41 = a7 == 0x7FFFFFFFFFFFFFFFLL;
  if ((a8 & 1) == 0 && a7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = a7;
  }
  uint64_t v54 = v42;
  if ((a11 & 1) == 0 && a10 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = a10;
  }
  if ((a13 & 1) == 0 && a12 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = a12;
  }
  if ((a15 & 1) == 0 && a14 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = a14;
  }
  if ((a17 & 1) == 0 && a16 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = a16;
  }
  if ((a19 & 1) == 0 && a18 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = a18;
  }
  if ((a21 & 1) == 0 && a20 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = a20;
  }
  if ((a23 & 1) == 0 && a22 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = a22;
  }
  if ((a25 & 1) == 0 && a24 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = a24;
  }
  if ((a27 & 1) == 0 && a26 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v51 = 0;
  }
  else {
    uint64_t v51 = a26;
  }
  uint64_t v52 = a28;
  *(unsigned char *)(a9 + 264) = a29 & 1 | (a28 == 0x7FFFFFFFFFFFFFFFLL);
  if ((a29 & 1) == 0 && a28 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v52 = 0;
  }
  *(unsigned char *)(a9 + 280) = a31 & 1 | (a30 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 32) = v56;
  *(unsigned char *)(a9 + 40) = (a4 | v38) & 1;
  *(void *)(a9 + 48) = v55;
  *(unsigned char *)(a9 + 56) = a6 & 1 | (a5 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 64) = v54;
  *(unsigned char *)(a9 + 72) = (a8 | v41) & 1;
  *(void *)(a9 + 80) = v43;
  *(unsigned char *)(a9 + 88) = a11 & 1 | (a10 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 112) = v44;
  *(unsigned char *)(a9 + 120) = a13 & 1 | (a12 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 128) = v45;
  *(unsigned char *)(a9 + 136) = a15 & 1 | (a14 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 144) = result;
  *(unsigned char *)(a9 + 152) = a17 & 1 | (a16 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 160) = v47;
  *(unsigned char *)(a9 + 168) = a19 & 1 | (a18 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 176) = v48;
  *(unsigned char *)(a9 + 184) = a21 & 1 | (a20 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 192) = v49;
  *(unsigned char *)(a9 + 200) = a23 & 1 | (a22 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 208) = v50;
  *(unsigned char *)(a9 + 216) = a25 & 1 | (a24 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 240) = v51;
  *(unsigned char *)(a9 + 248) = a27 & 1 | (a26 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 256) = v52;
  if ((a31 & 1) == 0 && a30 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = a30;
  }
  *(void *)(a9 + 272) = v53;
  *(unsigned char *)(a9 + 104) = 1;
  *(void *)(a9 + 96) = 0;
  return result;
}

uint64_t protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in _TimeZoneICU.secondsFromGMT(for:)((uint64_t *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _TimeZoneICU.secondsFromGMT(for:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _TimeZoneICU.secondsFromGMT(for:)(a1, *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in _TimeZoneICU.secondsFromGMT(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*a1)
  {
LABEL_2:
    ucal_setMillis();
    int v4 = ucal_get();
    uint64_t result = ucal_get();
    if (!__OFADD__(v4, result))
    {
      *a3 = (v4 + (int)result) / 1000;
      return result;
    }
LABEL_10:
    __break(1u);
  }
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8)[2] >> 31)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a1 = v9;
    goto LABEL_2;
  }
  *a3 = 0;
  return result;
}

Swift::Int __swiftcall _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(Swift::Int desiredDay, Swift::Int dayOfPeriod, Swift::Int weekday)
{
  Swift::Int result = _CalendarGregorian.firstWeekday.getter();
  Swift::Int v8 = weekday - result;
  if (__OFSUB__(weekday, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v9 = __OFSUB__(v8, dayOfPeriod);
  Swift::Int v10 = v8 - dayOfPeriod;
  if (v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  BOOL v9 = __OFADD__(v10, 1);
  Swift::Int v11 = v10 + 1;
  if (v9)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v12 = v11 % 7;
  if (v12 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v12 + 7;
  }
  Swift::Int v14 = desiredDay + v13;
  if (__OFADD__(desiredDay, v13)) {
    goto LABEL_19;
  }
  BOOL v9 = __OFSUB__(v14, 1);
  Swift::Int v15 = v14 - 1;
  if (!v9)
  {
    Swift::Int v16 = v15 / 7;
    if (*(unsigned char *)(v3 + 144) == 1)
    {
      if (!*(void *)(v3 + 88)) {
        return ++v16;
      }
      uint64_t v17 = *(void *)(v3 + 96);
      uint64_t ObjectType = swift_getObjectType();
      double v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 344);
      swift_unknownObjectRetain();
      uint64_t v20 = v19(ObjectType, v17);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v20 = *(void *)(v3 + 136);
    }
    if (7 - v13 < v20) {
      return v16;
    }
    return ++v16;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)(uint64_t result, char a2)
{
  uint64_t v2 = result + 1401;
  if (__OFADD__(result, 1401))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2) {
    goto LABEL_7;
  }
  if ((unint64_t)(result - 0x2000000000000000) >> 62 != 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (__OFADD__(274277, 4 * result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  BOOL v3 = __OFADD__(v2, 3 * ((4 * result + 274277) / 146097) / 4);
  uint64_t v4 = v2 + 3 * ((4 * result + 274277) / 146097) / 4;
  if (v3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  BOOL v3 = __OFSUB__(v4, 38);
  uint64_t v2 = v4 - 38;
  if (!v3)
  {
LABEL_7:
    if ((unint64_t)(v2 - 0x2000000000000000) >> 62 == 3)
    {
      uint64_t v5 = (4 * v2) | 3;
      unint64_t v6 = 5 * ((v5 % 1461 + (v5 % 1461 < 0 ? 0x5B5uLL : 0)) >> 2);
      if ((uint64_t)(v6 + 2) < 0)
      {
        unint64_t v7 = ~((-3 - v6) / 0x99);
        if ((v2 & 0x8000000000000000) == 0) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v7 = (v6 + 2) / 0x99;
        if ((v2 & 0x8000000000000000) == 0)
        {
LABEL_10:
          unint64_t v8 = v5 / 0x5B5uLL;
LABEL_13:
          char v9 = v7 + 2;
          uint64_t v10 = (unsigned __int128)((uint64_t)(v7 + 2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          return (13 - (v9 - 12 * ((v10 >> 1) + (v10 < 0)))) / 0xCu + v8 - 4716;
        }
      }
      unint64_t v8 = ~((-4 - 4 * v2) / 0x5B5uLL);
      goto LABEL_13;
    }
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
  return result;
}

Swift::Int_optional __swiftcall _LocaleICU.forceMinDaysInFirstWeek(_:)(Foundation::Calendar::Identifier a1)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) != 1
    && (uint64_t v3 = v10) != 0
    && *(void *)(v10 + 16)
    && (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    Swift::Bool v6 = 0;
    Swift::Int v7 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  }
  else
  {
    Swift::Int v7 = 0;
    Swift::Bool v6 = 1;
  }
  result.value = v7;
  result.is_nil = v6;
  return result;
}

uint64_t storeEnumTagSinglePayload for LocalizedStringResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)Swift::Int_optional result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

BOOL NSShouldRetainWithZone(id anObject, NSZone *requestedZone)
{
  uint64_t v3 = (NSZone *)malloc_zone_from_ptr(anObject);
  uint64_t v4 = v3;
  if (requestedZone) {
    return v3 == requestedZone;
  }
  Swift::Bool v6 = malloc_default_zone();
  BOOL result = 1;
  if (v4 && v4 != (NSZone *)v6) {
    return 0;
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UUID()
{
  return Hasher._finalize()();
}

uint64_t UUID.hash(into:)()
{
  return Hasher.combine(bytes:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSObject(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance NSObject(a1, a2, (SEL *)&selRef_debugDescription);
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  double v1 = *v0;
  id v2 = objc_allocWithZone(MEMORY[0x1E4F1C9C8]);

  return (NSDate)objc_msgSend(v2, sel_initWithTimeIntervalSinceReferenceDate_, v1);
}

ValueMetadata *type metadata accessor for AttributedString()
{
  return &type metadata for AttributedString;
}

void static NumberFormatStyleConfiguration.SignDisplayStrategy.automatic.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 1;
}

ValueMetadata *type metadata accessor for Calendar.Identifier()
{
  return &type metadata for Calendar.Identifier;
}

uint64_t _MutableHandle.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

_WORD *NSKVOPendingNotificationRetain(uint64_t a1, _WORD *a2)
{
  BOOL result = a2;
  ++*a2;
  return result;
}

ValueMetadata *type metadata accessor for NSScanner.NumberRepresentation()
{
  return &type metadata for NSScanner.NumberRepresentation;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

NSConstantValueExpression *HandleUnaryMinus(void *a1)
{
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v2 = (void *)[a1 constantValue];
  if (!_NSIsNSNumber()) {
    goto LABEL_20;
  }
  int v3 = *(char *)[v2 objCType];
  if (v3 <= 80)
  {
    if (v3 == 67 || v3 == 73 || v3 == 76) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  if ((v3 - 99) > 0x10)
  {
LABEL_14:
    if (v3 == 81 || v3 == 83)
    {
LABEL_16:
      uint64_t v4 = [NSNumber alloc];
      uint64_t v5 = [v2 unsignedLongLongValue];
      goto LABEL_17;
    }
LABEL_22:
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"Unrecognized numeric type while processing unary minus syntax." userInfo:0]);
  }
  if (((1 << (v3 - 99)) & 0x14241) != 0)
  {
    uint64_t v4 = [NSNumber alloc];
    uint64_t v5 = [v2 longLongValue];
LABEL_17:
    uint64_t v9 = [(NSNumber *)v4 initWithLongLong:-v5];
    goto LABEL_18;
  }
  if (v3 != 100)
  {
    if (v3 == 102)
    {
      Swift::Bool v6 = [NSNumber alloc];
      [v2 floatValue];
      *(float *)&double v8 = 0.0 - v7;
      uint64_t v9 = [(NSNumber *)v6 initWithFloat:v8];
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v17 = [NSNumber alloc];
  [v2 doubleValue];
  uint64_t v9 = [(NSNumber *)v17 initWithDouble:0.0 - v18];
LABEL_18:
  uint64_t v10 = (void *)v9;
  if (v9)
  {
    Swift::Int v11 = [[NSConstantValueExpression alloc] initWithObject:v9];

    return v11;
  }
LABEL_20:
  uint64_t v13 = [[NSNumber alloc] initWithLongLong:0];
  Swift::Int v14 = [[NSConstantValueExpression alloc] initWithObject:v13];
  Swift::Int v15 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v14, a1, 0);
  FunctionExpression = CreateFunctionExpression((NSString *)@"from:subtract:", v15);

  return (NSConstantValueExpression *)FunctionExpression;
}

void sub_1817D07F0(_Unwind_Exception *a1)
{
}

id NSExpression.init(format:_:)()
{
  uint64_t v0 = getVaList(_:)();
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v2 = objc_msgSend(ObjCClassFromMetadata, sel_expressionWithFormat_arguments_, String._bridgeToObjectiveCImpl()(), v0);
  swift_unknownObjectRelease();
  return v2;
}

void sub_1817D1470(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v3 = objc_begin_catch(exception_object);
      objc_exception_throw(v3);
    }
    objc_begin_catch(exception_object);
    free(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void *_NSKVONotifyingCreateInfoWithOriginalClass(Class cls)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&_NSKeyValueObserverRegistrationLock);
  }
  SEL Name = (char *)class_getName(cls);
  if (strchr(Name, 46)) {
    id v3 = @"..NSKVONotifying_%s";
  }
  else {
    id v3 = @"NSKVONotifying_%s";
  }
  uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, Name);
  ClassPair = objc_allocateClassPair(cls, [(NSString *)v4 UTF8String], 0x30uLL);
  if (ClassPair)
  {
    Swift::Bool v6 = ClassPair;
    objc_registerClassPair(ClassPair);
    IndexedIvars = object_getIndexedIvars(v6);
    void *IndexedIvars = cls;
    IndexedIvars[1] = v6;
    IndexedIvars[2] = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D050]);
    IndexedIvars[3] = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
    IndexedIvars[4] = 0;
    if (qword_1EB1ED2B0 != -1) {
      dispatch_once(&qword_1EB1ED2B0, &__block_literal_global_18);
    }
    BOOL v8 = class_getMethodImplementation((Class)*IndexedIvars, sel_willChangeValueForKey_) != (IMP)qword_1EB1ED2B8
      || class_getMethodImplementation((Class)*IndexedIvars, sel_didChangeValueForKey_) != (IMP)qword_1EB1ED2C0;
    *((unsigned char *)IndexedIvars + 40) = v8;
    NSKVONotifyingSetMethodImplementation((Class *)IndexedIvars, sel__isKVOA, (void (*)(void))NSKVOIsAutonotifying, 0);
    NSKVONotifyingSetMethodImplementation((Class *)IndexedIvars, sel_dealloc, (void (*)(void))NSKVODeallocate, 0);
    NSKVONotifyingSetMethodImplementation((Class *)IndexedIvars, sel_class, (void (*)(void))NSKVOClass, 0);
  }
  else
  {
    if (qword_1EB1ED2A8 != -1) {
      dispatch_once(&qword_1EB1ED2A8, &__block_literal_global_13);
    }
    uint64_t v9 = qword_1EB1ED2A0;
    if (os_log_type_enabled((os_log_t)qword_1EB1ED2A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v4;
      _os_log_error_impl(&dword_181795000, v9, OS_LOG_TYPE_ERROR, "KVO failed to allocate class pair for name %{public}@, automatic key-value observing will not work for this class", buf, 0xCu);
    }
    return 0;
  }
  return IndexedIvars;
}

objc_method *NSKVONotifyingSetMethodImplementation(Class *a1, const char *a2, void (*a3)(void), const void *a4)
{
  BOOL result = class_getInstanceMethod(*a1, a2);
  if (result)
  {
    TypeEncoding = method_getTypeEncoding(result);
    if (a4)
    {
      os_unfair_recursive_lock_lock_with_options();
      CFDictionarySetValue(a1[3], a2, a4);
      os_unfair_recursive_lock_unlock();
    }
    uint64_t v10 = a1[1];
    return (objc_method *)class_addMethod(v10, a2, a3, TypeEncoding);
  }
  return result;
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return +[NSString stringWithFormat:@"{{%.*g, %.*g}, {%.*g, %.*g}}", 17, *(void *)&aRect.origin.x, 17, *(void *)&aRect.origin.y, 17, *(void *)&aRect.size.width, 17, *(void *)&aRect.size.height];
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return +[NSString stringWithFormat:@"{%.*g, %.*g}", 17, *(void *)&aSize.width, 17, *(void *)&aSize.height];
}

void setProtocolMetadata(Protocol *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    outCFIndex Count = 0;
    uint64_t v4 = protocol_copyProtocolList(a1, &outCount);
    if (v4)
    {
      uint64_t v5 = v4;
      if (outCount)
      {
        unint64_t v6 = 0;
        uint64_t v7 = _MergedGlobals_156;
        do
        {
          if (v7 != -1) {
            dispatch_once(&_MergedGlobals_156, &__block_literal_global_88);
          }
          BOOL v8 = v5[v6];
          if (v8 == (Protocol *)qword_1EB1EDF28)
          {
            uint64_t v7 = -1;
          }
          else
          {
            setProtocolMetadata(v8, a2);
            uint64_t v7 = _MergedGlobals_156;
          }
          ++v6;
        }
        while (v6 < outCount);
      }
      free(v5);
    }
    uint64_t v9 = protocol_copyMethodDescriptionList(a1, 1, 1, &outCount);
    if (v9)
    {
      uint64_t v10 = v9;
      setProtocolMetdataWithMethods(a1, a2, (uint64_t)v9, outCount);
      free(v10);
    }
    Swift::Int v11 = protocol_copyMethodDescriptionList(a1, 0, 1, &outCount);
    if (v11)
    {
      uint64_t v12 = v11;
      setProtocolMetdataWithMethods(a1, a2, (uint64_t)v11, outCount);
      free(v12);
    }
  }
}

uint64_t setProtocolContextFlush(uint64_t result)
{
  if (*(_DWORD *)(result + 8))
  {
    uint64_t v1 = result;
    BOOL result = class_addMethodsBulk();
    *(_DWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance JSONDecoderImpl(uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.decode<A>(_:)(a1, a2);
}

uint64_t JSONDecoderImpl.decode<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 24 * v4;
    unint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    unint64_t v8 = *(void *)(v2 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v10 = (ValueMetadata *)result;
    swift_retain();
    specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v6, v7, v9, v10, v8, 0, 0, 0, 255, a2);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for URLQueryItem()
{
  return &type metadata for URLQueryItem;
}

uint64_t destroy for URLComponents()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Data()
{
  return Data.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)() & 1;
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

ValueMetadata *type metadata accessor for PredicateExpressions.VariableID()
{
  return &type metadata for PredicateExpressions.VariableID;
}

void static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v6 = _ContiguousArrayBuffer._asCocoaArray()();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      unint64_t v8 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
      outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      unint64_t v8 = __DataStorage.bridgedReference(_:)(v10, v9);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v7 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      *(void *)&v16[0] = a1;
      WORD4(v16[0]) = a2;
      BYTE10(v16[0]) = BYTE2(a2);
      BYTE11(v16[0]) = BYTE3(a2);
      BYTE12(v16[0]) = BYTE4(a2);
      BYTE13(v16[0]) = BYTE5(a2);
      uint64_t v7 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v16, BYTE6(a2));
LABEL_7:
      unint64_t v8 = v7;
      break;
  }
  *(void *)&v16[0] = 0;
  id v11 = __NSKeyedUnarchiverSecureUnarchiveObjectOfClasses(v6, (uint64_t)v8, (uint64_t)v16);
  swift_unknownObjectRelease();

  uint64_t v12 = *(void **)&v16[0];
  if (v11)
  {
    id v13 = *(id *)&v16[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    id v14 = v12;
  }
  outlined init with take of Any?((uint64_t)v16, a3);
  if (v12)
  {
    id v15 = v12;
    swift_willThrow();
    outlined destroy of Any?(a3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  switch(v1 >> 62)
  {
    case 1uLL:
      if (v0 >> 32 < (int)v0) {
        __break(1u);
      }
      swift_retain();
      uint64_t v5 = __DataStorage.bridgedReference(_:)((int)v3, v3 >> 32);
      outlined consume of Data._Representation(v3, v2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v6 = *(void *)(v0 + 16);
      uint64_t v7 = *(void *)(v0 + 24);
      swift_retain();
      swift_retain();
      uint64_t v5 = __DataStorage.bridgedReference(_:)(v6, v7);
      swift_release();
      swift_release();
LABEL_6:
      result.super.Class isa = (Class)v5;
      break;
    case 3uLL:
      id v8 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
      result.super.Class isa = (Class)objc_msgSend(v8, sel_init);
      break;
    default:
      uint64_t v9 = v0;
      __int16 v10 = v1;
      char v11 = BYTE2(v1);
      char v12 = BYTE3(v1);
      char v13 = BYTE4(v1);
      char v14 = BYTE5(v1);
      result.super.Class isa = (Class)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v9, BYTE6(v1));
      break;
  }
  return result;
}

char *__DataStorage.bridgedReference(_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    id v3 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
    return (char *)objc_msgSend(v3, sel_init);
  }
  else
  {
    id v7 = objc_allocWithZone((Class)type metadata accessor for __NSSwiftData());
    swift_retain();
    id v8 = (char *)objc_msgSend(v7, sel_init);
    *(void *)&v8[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = v2;
    uint64_t v9 = v8;
    swift_release();
    __int16 v10 = &v9[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
    *(void *)__int16 v10 = a1;
    *((void *)v10 + 1) = a2;
    v10[16] = 0;

    return v9;
  }
}

uint64_t type metadata accessor for __NSSwiftData()
{
  return self;
}

void *_NSXPCSerializationAddData(uint64_t a1, CFDataRef theData)
{
  CFIndex Length = CFDataGetLength(theData);
  unint64_t v5 = Length;
  if (Length < 15)
  {
    char v6 = Length | 0x40;
    _reserveSpace(a1, 1);
    *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v6;
  }
  else
  {
    _reserveSpace(a1, 1);
    *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = 79;
    _NSXPCSerializationAddInteger(a1, v5);
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex v8 = CFDataGetLength(theData);
  _reserveSpace(a1, v8);
  NSData result = memmove((void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)), BytePtr, v8);
  *(void *)(a1 + 8200) += v8;
  return result;
}

uint64_t String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = a1;
  uint64_t v7 = type metadata accessor for UTF32EndianAdaptor();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v59 - v8;
  uint64_t v62 = a4;
  uint64_t v10 = type metadata accessor for UTF16EndianAdaptor();
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)&v59 - v11;
  uint64_t v61 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  Swift::Int v16 = (char *)&v59 - v15;
  MEMORY[0x1F4188790](v17);
  MEMORY[0x1F4188790](v18);
  char v22 = (char *)&v59 - v21;
  uint64_t v23 = *a2;
  if (*a2 > 2415919359)
  {
    char v34 = 1;
    if (v23 > 2550137087)
    {
      uint64_t v24 = v63;
      if (v23 != 2550137088)
      {
        if (v23 != 2617245952) {
          goto LABEL_34;
        }
        char v34 = 0;
      }
LABEL_18:
      MEMORY[0x1F4188790](v19);
      *((unsigned char *)&v59 - 16) = v34;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      if (v65 < 2)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v9, v24, a3);
        v9[*(int *)(v7 + 36)] = v34;
        swift_getWitnessTable();
        uint64_t v35 = specialized String.init<A, B>(_validating:as:)((uint64_t)v9, v7);
        if (!v36) {
          return 0;
        }
        return v35;
      }
      return v64;
    }
    uint64_t v24 = v63;
    if (v23 != 2415919360)
    {
      if (v23 != 2483028224) {
        goto LABEL_34;
      }
      char v34 = 0;
    }
LABEL_30:
    MEMORY[0x1F4188790](v19);
    *((unsigned char *)&v59 - 16) = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    if (v65 < 2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v12, v24, a3);
      v12[*(int *)(v10 + 36)] = v34;
      swift_getWitnessTable();
      uint64_t v35 = specialized String.init<A, B>(_validating:as:)((uint64_t)v12, v10);
      if (!v46) {
        return 0;
      }
      return v35;
    }
    return v64;
  }
  if (v23 > 9)
  {
    if (v23 != 10)
    {
      uint64_t v24 = v63;
      if (v23 == 2348810496)
      {
        char v34 = 2;
        goto LABEL_18;
      }
LABEL_34:
      Swift::Int v60 = v20;
      MEMORY[0x1F4188790](v19);
      *(&v59 - 2) = v23;
      MEMORY[0x1F4188790](v47);
      *(&v59 - 2) = (uint64_t)partial apply for makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:);
      *(&v59 - 1) = v48;
      uint64_t v50 = v49;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      uint64_t v26 = v64;
      unint64_t v51 = v65;
      uint64_t v52 = v61;
      uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
      v53(v50, v24, a3);
      if (v51 == 1)
      {
        v53((uint64_t)v60, v50, a3);
        uint64_t v54 = dispatch thunk of Sequence._copyToContiguousArray()();
        id v55 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v54 + 32, *(void *)(v54 + 16), v23);
        if (v55)
        {
          uint64_t v56 = v55;
          uint64_t v26 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, a3);
          return v26;
        }
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, a3);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, a3);
        if (v51) {
          return v26;
        }
      }
      return 0;
    }
    char v34 = 2;
    uint64_t v24 = v63;
    goto LABEL_30;
  }
  if (v23 != 1)
  {
    uint64_t v24 = v63;
    if (v23 == 4)
    {
      Swift::Int v60 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      uint64_t v26 = v64;
      unint64_t v25 = v65;
      uint64_t v27 = v61;
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
      v28(v16, v24, a3);
      if (v25 == 1)
      {
        v28(v60, (uint64_t)v16, a3);
        uint64_t v29 = dispatch thunk of Sequence._copyToContiguousArray()();
        uint64_t v30 = (unsigned __int8 *)(v29 + 32);
        uint64_t v31 = *(void *)(v29 + 16);
        uint64_t v32 = static String._tryFromUTF8(_:)();
        if (v33)
        {
          uint64_t v26 = v32;
          swift_release();
          (*(void (**)(char *, uint64_t))(v27 + 8))(v16, a3);
          return v26;
        }
        uint64_t v26 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v30, v31);
        unint64_t v25 = v57;
        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v16, a3);
      if (v25) {
        return v26;
      }
      return 0;
    }
    goto LABEL_34;
  }
  Swift::Int v60 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v37 = v63;
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  uint64_t v26 = v64;
  unint64_t v38 = v65;
  uint64_t v39 = v61;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v40(v22, v37, a3);
  if (v38 == 1)
  {
    v40(v60, (uint64_t)v22, a3);
    uint64_t v41 = dispatch thunk of Sequence._copyToContiguousArray()();
    uint64_t v26 = specialized String.init<A, B>(_validating:as:)((char *)(v41 + 32), *(void *)(v41 + 16));
    unint64_t v38 = v42;
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v22, a3);
  if (!v38)
  {
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if (static String.compatibility1 == 1)
    {
      v40(v60, v63, a3);
      uint64_t v43 = dispatch thunk of Sequence._copyToContiguousArray()();
      id v44 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v43 + 32, *(void *)(v43 + 16), 1);
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v26 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        swift_release();

        return v26;
      }
      swift_release();
    }
    return 0;
  }
  return v26;
}

uint64_t destroy for Data._Representation(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t Data.subdata(in:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      if ((int)a3 != a3 >> 32) {
        goto LABEL_7;
      }
      return 0;
    case 2uLL:
      if (*(void *)(a3 + 16) != *(void *)(a3 + 24)) {
        goto LABEL_7;
      }
      return 0;
    case 3uLL:
      return v4;
    default:
      if ((a4 & 0xFF000000000000) == 0) {
        return 0;
      }
LABEL_7:
      if (__OFSUB__(a2, a1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (a2 == a1) {
        return 0;
      }
      uint64_t result = Data._Representation.subscript.getter(a1, a2, a3, a4);
      uint64_t v7 = result;
      unint64_t v8 = v6;
      switch(v6 >> 62)
      {
        case 1uLL:
          uint64_t v11 = (result >> 32) - (int)result;
          if (result >> 32 < (int)result) {
            goto LABEL_28;
          }
          uint64_t v12 = v6 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v13 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (v13)
          {
            uint64_t v14 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            if (!__OFSUB__((int)result, v14))
            {
              uint64_t v10 = (uint64_t *)(v13 + (int)result - v14);
              if (*(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v11) {
                uint64_t v9 = (v7 >> 32) - (int)v7;
              }
              else {
                uint64_t v9 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
              }
LABEL_23:
              uint64_t v4 = specialized Data.init(bytes:count:)(v10, v9);
              outlined consume of Data._Representation(v7, v8);
              return v4;
            }
LABEL_30:
            __break(1u);
          }
          __break(1u);
LABEL_32:
          if (!__OFSUB__(v13, v12)) {
            __break(1u);
          }
LABEL_34:
          __break(1u);
          return result;
        case 2uLL:
          uint64_t v12 = *(void *)(result + 16);
          uint64_t v13 = *(void *)(result + 24);
          uint64_t v15 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v15) {
            goto LABEL_32;
          }
          uint64_t v16 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v17 = __OFSUB__(v12, v16);
          uint64_t v18 = v12 - v16;
          if (v17) {
            goto LABEL_29;
          }
          BOOL v17 = __OFSUB__(v13, v12);
          uint64_t v19 = v13 - v12;
          if (v17) {
            goto LABEL_34;
          }
          uint64_t v10 = (uint64_t *)(v15 + v18);
          if (*(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v19) {
            uint64_t v9 = v19;
          }
          else {
            uint64_t v9 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          goto LABEL_23;
        case 3uLL:
          outlined consume of Data._Representation(result, v6);
          return 0;
        default:
          uint64_t v20 = result;
          __int16 v21 = v6;
          char v22 = BYTE2(v6);
          char v23 = BYTE3(v6);
          char v24 = BYTE4(v6);
          uint64_t v9 = BYTE6(v6);
          char v25 = BYTE5(v8);
          uint64_t v10 = &v20;
          goto LABEL_23;
      }
  }
}

uint64_t Data._Representation.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a3;
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_23;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 16);
      if (v8 > a1) {
        goto LABEL_42;
      }
      uint64_t v9 = *(void *)(a3 + 24);
      if (v9 < a2 || v8 > a2 || v9 < a1) {
        goto LABEL_45;
      }
      if (a1) {
        goto LABEL_14;
      }
      if (!a2) {
        return 0;
      }
      if (a2 <= 14)
      {
        swift_retain();
        swift_retain();
        uint64_t v13 = specialized Data.InlineData.init(_:count:)(v5, a4 & 0x3FFFFFFFFFFFFFFFLL, a2);
        swift_release();
        swift_release();
        return v13;
      }
LABEL_14:
      if (a1 > 2147483646 || a2 > 2147483646)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v5 = swift_allocObject();
        *(void *)(v5 + 16) = a1;
        *(void *)(v5 + 24) = a2;
        swift_retain();
        return v5;
      }
      if (a1 < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_47;
      }
      if ((int)a2 >= (int)a1) {
        goto LABEL_29;
      }
      __break(1u);
LABEL_20:
      if (__OFSUB__(a2, a1)) {
        goto LABEL_43;
      }
      if (!(a2 | a1)) {
        return v5;
      }
      __break(1u);
LABEL_23:
      if (a3 >> 32 < a2 || (int)a3 > a2 || a3 >> 32 < a1 || (int)a3 > a1) {
        goto LABEL_44;
      }
      if (!a1)
      {
        if (!a2) {
          return 0;
        }
        if (a2 <= 14)
        {
          outlined copy of Data._Representation(a3, a4);
          uint64_t v12 = specialized Data.InlineData.init(_:count:)(v5, a4 & 0x3FFFFFFFFFFFFFFFLL, a2);
          outlined consume of Data._Representation(v5, a4);
          return v12;
        }
      }
      if ((int)a2 < (int)a1) {
        goto LABEL_46;
      }
LABEL_29:
      swift_retain();
      return a1 | ((unint64_t)a2 << 32);
    case 3uLL:
      goto LABEL_20;
    default:
      if (a2 > BYTE6(a4))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
      }
      if (a1) {
        return specialized Data.InlineSlice.init(_:range:)(a3, a4 & 0xFFFFFFFFFFFFFFLL, a1, a2);
      }
      if ((a2 & 0x8000000000000000) == 0) {
        return v5;
      }
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Data._Representation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

void *specialized String.init<A>(bytes:encoding:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 > 2415919359)
  {
    if (a3 > 2550137087)
    {
      if (a3 == 2550137088)
      {
        uint64_t v14 = 1;
        goto LABEL_26;
      }
      if (a3 == 2617245952)
      {
        uint64_t v14 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      if (a3 == 2415919360)
      {
        uint64_t v14 = 1;
        goto LABEL_22;
      }
      if (a3 == 2483028224)
      {
        uint64_t v14 = 0;
        goto LABEL_22;
      }
    }
LABEL_30:
    id v26 = specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a3);
    uint64_t v13 = v27;
    if (!v27) {
      return (void *)v13;
    }
    if (v27 != 1) {
      return v26;
    }
    outlined copy of Data._Representation(a1, a2);
    uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
    id v29 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v28 + 32, *(void *)(v28 + 16), a3);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v13 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      swift_release();

      goto LABEL_34;
    }
    swift_release();
    outlined consume of Data._Representation(a1, a2);
    return 0;
  }
  if (a3 > 9)
  {
    uint64_t v14 = 2;
    if (a3 != 10)
    {
      if (a3 != 2348810496) {
        goto LABEL_30;
      }
LABEL_26:
      uint64_t v20 = specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2, v14);
      if (v24 < 2)
      {
        outlined copy of Data._Representation(a1, a2);
        uint64_t v22 = specialized String.init<A, B>(_validating:as:)(a1, a2, v14);
        if (!v25) {
          return 0;
        }
        return (void *)v22;
      }
      return v20;
    }
LABEL_22:
    uint64_t v20 = specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2, v14);
    if (v21 < 2)
    {
      outlined copy of Data._Representation(a1, a2);
      uint64_t v22 = specialized String.init<A, B>(_validating:as:)(a1, a2, v14);
      if (!v23) {
        return 0;
      }
      return (void *)v22;
    }
    return v20;
  }
  if (a3 != 1)
  {
    if (a3 == 4)
    {
      unint64_t v6 = specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
      if (v7 == 1)
      {
        outlined copy of Data._Representation(a1, a2);
        uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
        uint64_t v9 = (unsigned __int8 *)(v8 + 32);
        uint64_t v10 = *(void *)(v8 + 16);
        uint64_t v11 = static String._tryFromUTF8(_:)();
        if (v12)
        {
          uint64_t v13 = v11;
          swift_release();
LABEL_34:
          outlined consume of Data._Representation(a1, a2);
          return (void *)v13;
        }
        uint64_t v13 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v9, v10);
        uint64_t v35 = v34;
        swift_release();
        outlined consume of Data._Representation(a1, a2);
        if (v35) {
          return (void *)v13;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t)v6;
        if (v7) {
          return (void *)v13;
        }
      }
      return 0;
    }
    goto LABEL_30;
  }
  uint64_t v15 = specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
  if (v16 != 1)
  {
    uint64_t v13 = v15;
    if (v16) {
      return (void *)v13;
    }
    goto LABEL_38;
  }
  outlined copy of Data._Representation(a1, a2);
  uint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v13 = specialized String.init<A, B>(_validating:as:)((char *)(v17 + 32), *(void *)(v17 + 16));
  uint64_t v19 = v18;
  swift_release();
  outlined consume of Data._Representation(a1, a2);
  if (!v19)
  {
LABEL_38:
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if (static String.compatibility1)
    {
      outlined copy of Data._Representation(a1, a2);
      uint64_t v31 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      outlined consume of Data._Representation(a1, a2);
      id v32 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v31 + 32, *(void *)(v31 + 16), 1);
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v13 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        swift_release();

        return (void *)v13;
      }
      swift_release();
    }
    return 0;
  }
  return (void *)v13;
}

void (*specialized Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2))(unsigned char *, void)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 >= (int)a1)
      {
        uint64_t v7 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v7)
        {
          outlined copy of Data._Representation(a1, a2);
          uint64_t v11 = static String._tryFromUTF8(_:)();
          if (v14)
          {
LABEL_31:
            uint64_t v28 = v11;
            outlined consume of Data._Representation(a1, a2);
            return (void (*)(unsigned char *, void))v28;
          }
          uint64_t v13 = 0;
LABEL_30:
          uint64_t v11 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v13, v14);
          goto LABEL_31;
        }
        uint64_t v8 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)a1, v8))
        {
          uint64_t v9 = (unsigned __int8 *)(v7 + (int)a1 - v8);
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a1 >> 32) - (int)a1) {
            uint64_t v10 = (a1 >> 32) - (int)a1;
          }
          else {
            uint64_t v10 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          outlined copy of Data._Representation(a1, a2);
          uint64_t v11 = static String._tryFromUTF8(_:)();
          if (v12) {
            goto LABEL_31;
          }
          uint64_t v13 = v9;
          uint64_t v14 = v10;
          goto LABEL_30;
        }
LABEL_36:
        __break(1u);
      }
      __break(1u);
      goto LABEL_34;
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
      uint64_t v17 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v17)
      {
        uint64_t v18 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v19 = __OFSUB__(v15, v18);
        uint64_t v20 = v15 - v18;
        if (v19)
        {
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        BOOL v19 = __OFSUB__(v16, v15);
        uint64_t v21 = v16 - v15;
        if (!v19)
        {
          uint64_t v22 = (unsigned __int8 *)(v17 + v20);
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v21) {
            uint64_t v23 = v21;
          }
          else {
            uint64_t v23 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          swift_retain();
          swift_retain();
          uint64_t v24 = static String._tryFromUTF8(_:)();
          if (v25) {
            goto LABEL_27;
          }
          id v26 = v22;
          uint64_t v27 = v23;
          goto LABEL_26;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      if (__OFSUB__(v16, v15)) {
        goto LABEL_34;
      }
      swift_retain();
      swift_retain();
      uint64_t v24 = static String._tryFromUTF8(_:)();
      if (!v27)
      {
        id v26 = 0;
LABEL_26:
        uint64_t v24 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v26, v27);
      }
LABEL_27:
      uint64_t v28 = v24;
      swift_release();
      swift_release();
      return (void (*)(unsigned char *, void))v28;
    case 3uLL:
      memset(v30, 0, 14);
      uint64_t v4 = static String._tryFromUTF8(_:)();
      if (!v6) {
        return specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)v30, v6);
      }
      return (void (*)(unsigned char *, void))v4;
    default:
      v30[0] = a1;
      LOWORD(v30[1]) = a2;
      BYTE2(v30[1]) = BYTE2(a2);
      BYTE3(v30[1]) = BYTE3(a2);
      BYTE4(v30[1]) = BYTE4(a2);
      BYTE5(v30[1]) = BYTE5(a2);
      uint64_t v4 = static String._tryFromUTF8(_:)();
      if (v5) {
        return (void (*)(unsigned char *, void))v4;
      }
      uint64_t v6 = BYTE6(a2);
      return specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)v30, v6);
  }
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t specialized Data.init(bytes:count:)(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)__src, a2);
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v2 = __src;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!__src) {
    goto LABEL_4;
  }
  char v3 = (_BYTE)a2 - (_BYTE)__src;
  if (a2 - __src >= 256)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_4:
    char v3 = 0;
  }
  memset(__dst, 0, sizeof(__dst));
  char v6 = v3;
  if (v2 && a2 != v2) {
    memcpy(__dst, v2, a2 - v2);
  }
  return *(void *)__dst;
}

id static Data._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  id v2 = specialized Data.init(referencing:)(v1);

  return v2;
}

id specialized Data.init(referencing:)(void *a1)
{
  id result = objc_msgSend(a1, sel_length);
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if (objc_msgSend(a1, sel_respondsToSelector_, sel__providesConcreteBacking)) {
      objc_msgSend(a1, sel__providesConcreteBacking);
    }
    objc_msgSend(a1, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSData();
    swift_dynamicCast();
    id v4 = v9;
    id v5 = objc_msgSend(v4, sel_bytes);
    id v6 = objc_msgSend(v4, sel_length);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v4;
    type metadata accessor for __DataStorage();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0;
    *(unsigned char *)(v8 + 64) = 0;
    *(void *)(v8 + 16) = v5;
    *(void *)(v8 + 24) = v6;
    *(void *)(v8 + 48) = destructiveProjectEnumData for PredicateCodableError;
    *(void *)(v8 + 56) = v7;
    return (id)specialized Data._Representation.init(_:count:)((void *)v8, v3);
  }
  return result;
}

uint64_t type metadata accessor for __DataStorage()
{
  return self;
}

uint64_t specialized Data._Representation.init(_:count:)(void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    swift_release();
    return 0;
  }
  uint64_t v2 = a2;
  if (a2 > 14)
  {
    if ((unint64_t)a2 <= 0x7FFFFFFE) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = v2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v4 = a1[2];
  if (v4)
  {
    uint64_t v5 = a1[5];
    BOOL v6 = __OFSUB__(0, v5);
    uint64_t v7 = -v5;
    if (!v6)
    {
      uint64_t v8 = (char *)(v4 + v7);
      if (a1[3] < v2) {
        uint64_t v2 = a1[3];
      }
      id v9 = &v8[v2];
      goto LABEL_14;
    }
LABEL_20:
    __break(1u);
  }
  id v9 = 0;
  uint64_t v8 = 0;
  LOBYTE(v2) = 0;
LABEL_14:
  memset(__dst, 0, sizeof(__dst));
  char v12 = v2;
  if (v4 && v9 != v8) {
    memcpy(__dst, v8, v9 - v8);
  }
  uint64_t v3 = *(void *)__dst;
  swift_release();
  return v3;
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

void sub_1817D58E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

uint64_t __NSSwiftData.bytes.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (!v2) {
      return 47824;
    }
    uint64_t v3 = *(void *)(v1 + 40);
    BOOL v4 = __OFSUB__(0, v3);
    uint64_t v5 = -v3;
    if (!v4)
    {
      if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range + 16) & 1) == 0) {
        return v2 + v5 + *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range);
      }
      goto LABEL_9;
    }
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

id _NSXPCSerializationDataForObject(void *a1, unint64_t *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v4 = a1[1];
  if (v4 <= v2) {
    return 0;
  }
  char v5 = *(unsigned char *)(*a1 + v2);
  if ((v5 & 0xF0) != 0x40) {
    return 0;
  }
  uint64_t v6 = v5 & 0xF;
  uint64_t v14 = v6;
  if ((v5 & 0xF) != 0)
  {
    unint64_t v7 = v2 + 1;
    v15[0] = v2 + 1;
    if (v2 + 1 < v4)
    {
      if (v6 != 15
        || _getIntAtMarker(a1, &v14, v2 + 1, v15)
        && (unint64_t v7 = v15[0] + 1, v8 = v15[0] == -1, v9 = v8 << 63 >> 63, v9 == v8)
        && (v9 & 0x8000000000000000) == 0
        && (unint64_t v4 = a1[1], v4 > v7)
        && (uint64_t v6 = v14, (v14 & 0x8000000000000000) == 0))
      {
        uint64_t v10 = (v6 - 1) >> 63;
        if (__CFADD__(v7, v6 - 1)) {
          ++v10;
        }
        uint64_t v11 = v10 << 63 >> 63;
        BOOL v12 = v11 != v10;
        if (v4 > v7 + v6 - 1 && !v12 && (v11 & 0x8000000000000000) == 0) {
          return (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:*a1 + v7 length:v6];
        }
      }
    }
    return 0;
  }
  return (id)[MEMORY[0x1E4F1C9B8] data];
}

uint64_t type metadata accessor for UTF16EndianAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UTF32EndianAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

void _NSMutableDataGrowBytes(uint64_t a1, const char *a2, size_t a3, int a4)
{
  char v8 = 1;
  if (a3 >> 19) {
    char v8 = 2;
  }
  size_t v9 = a3 >> v8;
  if (__CFADD__(v9, a3)) {
    size_t v9 = 0;
  }
  size_t v10 = v9 + a3;
  if (*(void *)(a1 + 24) <= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = *(void *)(a1 + 24);
  }
  unint64_t v12 = [(id)a1 length];
  if (v11 > 0x20000) {
    int v13 = a4;
  }
  else {
    int v13 = 0;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v37 = a2;
    int v38 = a4;
    int v14 = [(id)a1 _canUseRealloc];
    int v15 = v14;
    if (v12) {
      BOOL v16 = a3 / v12 > 3;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = v14 ^ 1;
    if ((v13 & v16 & 1) != 0 || v17)
    {
      uint64_t v18 = malloc_default_zone();
      unint64_t v19 = (unint64_t)malloc_type_zone_calloc(v18, 1uLL, v11, 0x8B297409uLL);
      if (v19)
      {
        uint64_t v20 = (char *)v19;
        unint64_t v21 = *(void *)(a1 + 32);
        if (v12 < 0x80000)
        {
          size_t v23 = v12;
          if (!v12)
          {
LABEL_43:
            a4 = v38;
LABEL_55:
            objc_msgSend((id)a1, "_freeBytes", v23);
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v22 = (void *)MEMORY[0x1E4F14B00];
          if (((*MEMORY[0x1E4F14B00] - 1) & (v21 | v19)) != 0
            || (malloc_default_zone(), malloc_zone_claimed_address()))
          {
            unint64_t v19 = (unint64_t)v20;
            size_t v23 = v12;
          }
          else
          {
            NSUInteger v34 = v12 & -*v22;
            NSCopyMemoryPages((const void *)v21, v20, v34);
            v21 += v34;
            unint64_t v19 = (unint64_t)&v20[v34];
            size_t v23 = v12 - v34;
            if (v12 == v34) {
              goto LABEL_43;
            }
          }
        }
        memmove((void *)v19, (const void *)v21, v23);
        goto LABEL_43;
      }
    }
    if (v15)
    {
      uint64_t v24 = MEMORY[0x185306D80](*(void *)(a1 + 32), v11, 4236463649, 0);
      if (v24)
      {
        uint64_t v20 = (char *)v24;
        int v13 = 0;
        a4 = v38;
        goto LABEL_58;
      }
      if (a3 > 0x20000) {
        int v13 = v38;
      }
      else {
        int v13 = 0;
      }
      int v32 = v13 & v16;
      a4 = v38;
      if ((v32 | v17) != 1)
      {
LABEL_50:
        uint64_t v20 = (char *)MEMORY[0x185306D80](*(void *)(a1 + 32), a3, 1384482078, 0);
        int v13 = 0;
        size_t v11 = a3;
        if (v20) {
          goto LABEL_58;
        }
        goto LABEL_70;
      }
    }
    else
    {
      a4 = v38;
      if (a3 > 0x20000) {
        int v13 = v38;
      }
      else {
        int v13 = 0;
      }
    }
    uint64_t v27 = malloc_default_zone();
    unint64_t v28 = (unint64_t)malloc_type_zone_calloc(v27, 1uLL, a3, 0x8B297409uLL);
    if (!v28)
    {
      if (!v15) {
        goto LABEL_70;
      }
      goto LABEL_50;
    }
    uint64_t v20 = (char *)v28;
    unint64_t v29 = *(void *)(a1 + 32);
    if (v12 < 0x80000)
    {
      size_t v23 = v12;
      if (!v12)
      {
LABEL_54:
        size_t v11 = a3;
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v30 = (void *)MEMORY[0x1E4F14B00];
      if (((*MEMORY[0x1E4F14B00] - 1) & (v29 | v28)) != 0
        || (malloc_default_zone(), malloc_zone_claimed_address()))
      {
        unint64_t v28 = (unint64_t)v20;
        size_t v23 = v12;
      }
      else
      {
        NSUInteger v35 = v12 & -*v30;
        NSCopyMemoryPages((const void *)v29, v20, v35);
        v29 += v35;
        unint64_t v28 = (unint64_t)&v20[v35];
        size_t v23 = v12 - v35;
        a4 = v38;
        if (!v23) {
          goto LABEL_54;
        }
      }
    }
    memmove((void *)v28, (const void *)v29, v23);
    goto LABEL_54;
  }
  uint64_t v25 = malloc_default_zone();
  if (v13) {
    id v26 = (char *)malloc_type_zone_calloc(v25, 1uLL, v11, 0x8B297409uLL);
  }
  else {
    id v26 = (char *)malloc_type_zone_malloc(v25, v11, 0x8B37E73CuLL);
  }
  uint64_t v20 = v26;
  if (!v26)
  {
    uint64_t v37 = a2;
    if (a4)
    {
      uint64_t v31 = malloc_default_zone();
      if (a3 > 0x20000)
      {
        int v13 = 1;
        uint64_t v20 = (char *)malloc_type_zone_calloc(v31, 1uLL, a3, 0x8B297409uLL);
        if (v20) {
          goto LABEL_58;
        }
LABEL_70:
        uint64_t v36 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: unable to allocate memory for length (%lu)", _NSMethodExceptionProem((objc_class *)a1, v37), a3), 0 reason userInfo];
        objc_exception_throw(v36);
      }
    }
    else
    {
      uint64_t v31 = malloc_default_zone();
    }
    uint64_t v20 = (char *)malloc_type_zone_malloc(v31, a3, 0x8B37E73CuLL);
    int v13 = 0;
    if (v20) {
      goto LABEL_58;
    }
    goto LABEL_70;
  }
LABEL_58:
  if (a3 > v12 && a4 && (v13 & 1) == 0) {
    bzero(&v20[v12], a3 - v12);
  }
  *(void *)(a1 + 32) = v20;
  *(void *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 8) &= ~4u;
  if (v13) {
    char v33 = 0;
  }
  else {
    char v33 = 2;
  }
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) & 0xFD | v33;
}

unint64_t specialized Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  uint64_t v6 = BYTE6(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v8, v6);
  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if ((int)a4 < (int)a3) {
    goto LABEL_10;
  }
  return a3 | ((unint64_t)a4 << 32);
}

uint64_t specialized Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0 && a3 < 0x100)
  {
    if ((int)a1 > a1 >> 32)
    {
      __break(1u);
    }
    else if (!*(void *)(a2 + 16) || !__OFSUB__((int)a1, *(void *)(a2 + 40)))
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      return 0;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if ((a3 & 0x8000000000000000) != 0 || a3 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (*(void *)(a2 + 16))
    {
      if (__OFSUB__(*(void *)(a1 + 16), *(void *)(a2 + 40))) {
        __break(1u);
      }
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    return 0;
  }
  return result;
}

__CFString *NSStringFromBOOL(int a1)
{
  if (a1) {
    return @"YES";
  }
  else {
    return @"NO";
  }
}

id static Date._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    uint64_t result = objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSFastEnumerationIterator()
{
  return &type metadata for NSFastEnumerationIterator;
}

BOOL static Calendar.Identifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _NSDefaultFileSystemEncoding()
{
  return 4;
}

uint64_t __CharacterSetStorage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _NSScanIntFromString(void *a1, void *a2, int *a3, unint64_t *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)c = 0u;
  long long v44 = 0u;
  memset(v45, 0, sizeof(v45));
  long long v43 = 0u;
  unint64_t v6 = *a4;
  unint64_t v7 = [a1 length];
  *((void *)&v44 + 1) = v7;
  *(void *)&v45[0] = v6;
  *(void *)&long long v44 = a1;
  if (v7 <= v6)
  {
    *(void *)&long long v43 = 0;
    int v9 = 0xFFFF;
  }
  else
  {
    if (v7 - v6 >= 0x20) {
      uint64_t v8 = 32;
    }
    else {
      uint64_t v8 = v7 - v6;
    }
    *(void *)&long long v43 = v8;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v6, v8);
    int v9 = WORD4(v45[0]);
  }
  LOWORD(c[2]) = v9;
  *((void *)&v43 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        uint64_t v10 = *((void *)&v43 + 1);
        if (*((void *)&v43 + 1) - 1 >= (unint64_t)v43) {
          break;
        }
        if (*((void *)&v43 + 1) >= (unint64_t)v43)
        {
          uint64_t v12 = *(void *)&v45[0] + v43;
          if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
          {
            if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
              uint64_t v13 = 32;
            }
            else {
              uint64_t v13 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
            }
            *(void *)&v45[0] += v43;
            *(void *)&long long v43 = v13;
            objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v12, v13);
            LOWORD(c[2]) = WORD4(v45[0]);
            *((void *)&v43 + 1) = 1;
            continue;
          }
          *((void *)&v43 + 1) = v43 + 1;
          __int16 v11 = -1;
        }
        else
        {
          ++*((void *)&v43 + 1);
          __int16 v11 = *((_WORD *)v45 + v10 + 4);
        }
        LOWORD(c[2]) = v11;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    int v9 = LOWORD(c[2]);
  }
  BOOL v42 = v9 == 45;
  if (v9 != 45 && v9 != 43) {
    goto LABEL_45;
  }
  uint64_t v14 = *((void *)&v43 + 1);
  if (*((void *)&v43 + 1) >= (unint64_t)v43)
  {
    uint64_t v16 = *(void *)&v45[0] + v43;
    if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
    {
      if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
        uint64_t v17 = 32;
      }
      else {
        uint64_t v17 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
      }
      *(void *)&v45[0] += v43;
      *(void *)&long long v43 = v17;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v16, v17);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((void *)&v43 + 1) = 1;
      if (!a2) {
        goto LABEL_45;
      }
      goto LABEL_33;
    }
    *((void *)&v43 + 1) = v43 + 1;
    __int16 v15 = -1;
  }
  else
  {
    ++*((void *)&v43 + 1);
    __int16 v15 = *((_WORD *)v45 + v14 + 4);
  }
  LOWORD(c[2]) = v15;
  if (!a2) {
    goto LABEL_45;
  }
LABEL_33:
  if (objc_msgSend(a2, "characterIsMember:"))
  {
    do
    {
      uint64_t v18 = *((void *)&v43 + 1);
      if (*((void *)&v43 + 1) - 1 >= (unint64_t)v43) {
        break;
      }
      if (*((void *)&v43 + 1) >= (unint64_t)v43)
      {
        uint64_t v20 = *(void *)&v45[0] + v43;
        if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
        {
          if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
            uint64_t v21 = 32;
          }
          else {
            uint64_t v21 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
          }
          *(void *)&v45[0] += v43;
          *(void *)&long long v43 = v21;
          objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v20, v21);
          LOWORD(c[2]) = WORD4(v45[0]);
          *((void *)&v43 + 1) = 1;
          continue;
        }
        *((void *)&v43 + 1) = v43 + 1;
        __int16 v19 = -1;
      }
      else
      {
        ++*((void *)&v43 + 1);
        __int16 v19 = *((_WORD *)v45 + v18 + 4);
      }
      LOWORD(c[2]) = v19;
    }
    while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
  }
LABEL_45:
  uint64_t v22 = LOWORD(c[2]);
  size_t v23 = (NSCharacterSet *)isADigit_set;
  if (!isADigit_set)
  {
    size_t v23 = +[NSCharacterSet decimalDigitCharacterSet];
    isADigit_set = (uint64_t)v23;
  }
  uint64_t result = [(NSCharacterSet *)v23 characterIsMember:v22];
  if (result)
  {
    unsigned int v39 = result;
    int v25 = 0;
    while (1)
    {
      if (v25 > 214748363)
      {
        if (v25 != 214748364) {
          goto LABEL_54;
        }
        uint64_t v26 = LOWORD(c[2]) - 48;
        if (v26 > 9) {
          uint64_t v26 = u_charDigitValue(LOWORD(c[2]));
        }
        if (v26 - v42 >= 7)
        {
LABEL_54:
          while (1)
          {
            uint64_t v27 = *((void *)&v43 + 1);
            if (*((void *)&v43 + 1) >= (unint64_t)v43)
            {
              uint64_t v29 = *(void *)&v45[0] + v43;
              if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
              {
                if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
                  uint64_t v30 = 32;
                }
                else {
                  uint64_t v30 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
                }
                *(void *)&v45[0] += v43;
                *(void *)&long long v43 = v30;
                objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v29, v30);
                uint64_t v28 = WORD4(v45[0]);
                LOWORD(c[2]) = WORD4(v45[0]);
                *((void *)&v43 + 1) = 1;
                goto LABEL_63;
              }
              *((void *)&v43 + 1) = v43 + 1;
              uint64_t v28 = 0xFFFFLL;
            }
            else
            {
              ++*((void *)&v43 + 1);
              uint64_t v28 = *((unsigned __int16 *)v45 + v27 + 4);
            }
            LOWORD(c[2]) = v28;
LABEL_63:
            uint64_t v31 = (NSCharacterSet *)isADigit_set;
            if (!isADigit_set)
            {
              uint64_t v31 = +[NSCharacterSet decimalDigitCharacterSet];
              isADigit_set = (uint64_t)v31;
            }
            if (![(NSCharacterSet *)v31 characterIsMember:v28])
            {
              if (v42) {
                int v25 = 0x80000000;
              }
              else {
                int v25 = 0x7FFFFFFF;
              }
              uint64_t v32 = LOWORD(c[2]);
              BOOL v42 = 0;
              goto LABEL_81;
            }
          }
        }
      }
      unsigned int v33 = LOWORD(c[2]) - 48;
      if (v33 > 9) {
        unsigned int v33 = u_charDigitValue(LOWORD(c[2]));
      }
      int v25 = v33 + 10 * v25;
      uint64_t v34 = *((void *)&v43 + 1);
      if (*((void *)&v43 + 1) < (unint64_t)v43) {
        break;
      }
      uint64_t v35 = *(void *)&v45[0] + v43;
      if (*((void *)&v44 + 1) <= *(void *)&v45[0] + (void)v43)
      {
        *((void *)&v43 + 1) = v43 + 1;
        uint64_t v32 = 0xFFFFLL;
        goto LABEL_80;
      }
      if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
        uint64_t v36 = 32;
      }
      else {
        uint64_t v36 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
      }
      *(void *)&v45[0] += v43;
      *(void *)&long long v43 = v36;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v35, v36);
      uint64_t v32 = WORD4(v45[0]);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((void *)&v43 + 1) = 1;
LABEL_81:
      uint64_t v37 = (NSCharacterSet *)isADigit_set;
      if (!isADigit_set)
      {
        uint64_t v37 = +[NSCharacterSet decimalDigitCharacterSet];
        isADigit_set = (uint64_t)v37;
      }
      if (![(NSCharacterSet *)v37 characterIsMember:v32])
      {
        if (a3)
        {
          if (v42) {
            int v38 = -v25;
          }
          else {
            int v38 = v25;
          }
          *a3 = v38;
        }
        *a4 = *(void *)&v45[0] + *((void *)&v43 + 1) - 1;
        return v39;
      }
    }
    ++*((void *)&v43 + 1);
    uint64_t v32 = *((unsigned __int16 *)v45 + v34 + 4);
LABEL_80:
    LOWORD(c[2]) = v32;
    goto LABEL_81;
  }
  return result;
}

uint64_t _NSScanLongLongFromString(void *a1, void *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)c = 0u;
  long long v44 = 0u;
  memset(v45, 0, sizeof(v45));
  long long v43 = 0u;
  unint64_t v6 = *a4;
  unint64_t v7 = [a1 length];
  *((void *)&v44 + 1) = v7;
  *(void *)&v45[0] = v6;
  *(void *)&long long v44 = a1;
  if (v7 <= v6)
  {
    *(void *)&long long v43 = 0;
    int v9 = 0xFFFF;
  }
  else
  {
    if (v7 - v6 >= 0x20) {
      uint64_t v8 = 32;
    }
    else {
      uint64_t v8 = v7 - v6;
    }
    *(void *)&long long v43 = v8;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v6, v8);
    int v9 = WORD4(v45[0]);
  }
  LOWORD(c[2]) = v9;
  *((void *)&v43 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        uint64_t v10 = *((void *)&v43 + 1);
        if (*((void *)&v43 + 1) - 1 >= (unint64_t)v43) {
          break;
        }
        if (*((void *)&v43 + 1) >= (unint64_t)v43)
        {
          uint64_t v12 = *(void *)&v45[0] + v43;
          if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
          {
            if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
              uint64_t v13 = 32;
            }
            else {
              uint64_t v13 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
            }
            *(void *)&v45[0] += v43;
            *(void *)&long long v43 = v13;
            objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v12, v13);
            LOWORD(c[2]) = WORD4(v45[0]);
            *((void *)&v43 + 1) = 1;
            continue;
          }
          *((void *)&v43 + 1) = v43 + 1;
          __int16 v11 = -1;
        }
        else
        {
          ++*((void *)&v43 + 1);
          __int16 v11 = *((_WORD *)v45 + v10 + 4);
        }
        LOWORD(c[2]) = v11;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    int v9 = LOWORD(c[2]);
  }
  BOOL v42 = v9 == 45;
  if (v9 != 45 && v9 != 43) {
    goto LABEL_45;
  }
  uint64_t v14 = *((void *)&v43 + 1);
  if (*((void *)&v43 + 1) >= (unint64_t)v43)
  {
    uint64_t v16 = *(void *)&v45[0] + v43;
    if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
    {
      if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
        uint64_t v17 = 32;
      }
      else {
        uint64_t v17 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
      }
      *(void *)&v45[0] += v43;
      *(void *)&long long v43 = v17;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v16, v17);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((void *)&v43 + 1) = 1;
      if (!a2) {
        goto LABEL_45;
      }
      goto LABEL_33;
    }
    *((void *)&v43 + 1) = v43 + 1;
    __int16 v15 = -1;
  }
  else
  {
    ++*((void *)&v43 + 1);
    __int16 v15 = *((_WORD *)v45 + v14 + 4);
  }
  LOWORD(c[2]) = v15;
  if (!a2) {
    goto LABEL_45;
  }
LABEL_33:
  if (objc_msgSend(a2, "characterIsMember:"))
  {
    do
    {
      uint64_t v18 = *((void *)&v43 + 1);
      if (*((void *)&v43 + 1) - 1 >= (unint64_t)v43) {
        break;
      }
      if (*((void *)&v43 + 1) >= (unint64_t)v43)
      {
        uint64_t v20 = *(void *)&v45[0] + v43;
        if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
        {
          if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
            uint64_t v21 = 32;
          }
          else {
            uint64_t v21 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
          }
          *(void *)&v45[0] += v43;
          *(void *)&long long v43 = v21;
          objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v20, v21);
          LOWORD(c[2]) = WORD4(v45[0]);
          *((void *)&v43 + 1) = 1;
          continue;
        }
        *((void *)&v43 + 1) = v43 + 1;
        __int16 v19 = -1;
      }
      else
      {
        ++*((void *)&v43 + 1);
        __int16 v19 = *((_WORD *)v45 + v18 + 4);
      }
      LOWORD(c[2]) = v19;
    }
    while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
  }
LABEL_45:
  uint64_t v22 = LOWORD(c[2]);
  size_t v23 = (NSCharacterSet *)isADigit_set;
  if (!isADigit_set)
  {
    size_t v23 = +[NSCharacterSet decimalDigitCharacterSet];
    isADigit_set = (uint64_t)v23;
  }
  uint64_t result = [(NSCharacterSet *)v23 characterIsMember:v22];
  if (result)
  {
    unsigned int v39 = result;
    uint64_t v25 = 0;
    while (1)
    {
      if (v25 > 0xCCCCCCCCCCCCCCBLL)
      {
        if (v25 != 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_54;
        }
        uint64_t v26 = LOWORD(c[2]) - 48;
        if (v26 > 9) {
          uint64_t v26 = u_charDigitValue(LOWORD(c[2]));
        }
        if (v26 - v42 >= 7)
        {
LABEL_54:
          while (1)
          {
            uint64_t v27 = *((void *)&v43 + 1);
            if (*((void *)&v43 + 1) >= (unint64_t)v43)
            {
              uint64_t v29 = *(void *)&v45[0] + v43;
              if (*((void *)&v44 + 1) > *(void *)&v45[0] + (void)v43)
              {
                if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
                  uint64_t v30 = 32;
                }
                else {
                  uint64_t v30 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
                }
                *(void *)&v45[0] += v43;
                *(void *)&long long v43 = v30;
                objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v29, v30);
                uint64_t v28 = WORD4(v45[0]);
                LOWORD(c[2]) = WORD4(v45[0]);
                *((void *)&v43 + 1) = 1;
                goto LABEL_63;
              }
              *((void *)&v43 + 1) = v43 + 1;
              uint64_t v28 = 0xFFFFLL;
            }
            else
            {
              ++*((void *)&v43 + 1);
              uint64_t v28 = *((unsigned __int16 *)v45 + v27 + 4);
            }
            LOWORD(c[2]) = v28;
LABEL_63:
            uint64_t v31 = (NSCharacterSet *)isADigit_set;
            if (!isADigit_set)
            {
              uint64_t v31 = +[NSCharacterSet decimalDigitCharacterSet];
              isADigit_set = (uint64_t)v31;
            }
            if (![(NSCharacterSet *)v31 characterIsMember:v28])
            {
              if (v42) {
                uint64_t v25 = 0x8000000000000000;
              }
              else {
                uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
              }
              uint64_t v32 = LOWORD(c[2]);
              BOOL v42 = 0;
              goto LABEL_81;
            }
          }
        }
      }
      uint64_t v33 = LOWORD(c[2]) - 48;
      if (v33 > 9) {
        uint64_t v33 = u_charDigitValue(LOWORD(c[2]));
      }
      uint64_t v25 = v33 + 10 * v25;
      uint64_t v34 = *((void *)&v43 + 1);
      if (*((void *)&v43 + 1) < (unint64_t)v43) {
        break;
      }
      uint64_t v35 = *(void *)&v45[0] + v43;
      if (*((void *)&v44 + 1) <= *(void *)&v45[0] + (void)v43)
      {
        *((void *)&v43 + 1) = v43 + 1;
        uint64_t v32 = 0xFFFFLL;
        goto LABEL_80;
      }
      if (*((void *)&v44 + 1) - (*(void *)&v45[0] + (void)v43) >= 0x20uLL) {
        uint64_t v36 = 32;
      }
      else {
        uint64_t v36 = *((void *)&v44 + 1) - (*(void *)&v45[0] + v43);
      }
      *(void *)&v45[0] += v43;
      *(void *)&long long v43 = v36;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v35, v36);
      uint64_t v32 = WORD4(v45[0]);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((void *)&v43 + 1) = 1;
LABEL_81:
      uint64_t v37 = (NSCharacterSet *)isADigit_set;
      if (!isADigit_set)
      {
        uint64_t v37 = +[NSCharacterSet decimalDigitCharacterSet];
        isADigit_set = (uint64_t)v37;
      }
      if (![(NSCharacterSet *)v37 characterIsMember:v32])
      {
        if (a3)
        {
          if (v42) {
            uint64_t v38 = -v25;
          }
          else {
            uint64_t v38 = v25;
          }
          *a3 = v38;
        }
        *a4 = *(void *)&v45[0] + *((void *)&v43 + 1) - 1;
        return v39;
      }
    }
    ++*((void *)&v43 + 1);
    uint64_t v32 = *((unsigned __int16 *)v45 + v34 + 4);
LABEL_80:
    LOWORD(c[2]) = v32;
    goto LABEL_81;
  }
  return result;
}

uint64_t _NSAttributeDictionaryClass()
{
  uint64_t result = attributeDictionaryClass;
  if (!attributeDictionaryClass)
  {
    uint64_t result = (uint64_t)objc_lookUpClass("NSAttributeDictionary");
    attributeDictionaryClass Class = result;
    if (!result)
    {
      uint64_t result = self;
      attributeDictionaryClass Class = result;
    }
  }
  return result;
}

void sub_1817DB15C(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_1817DB178(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1817DB184);
}

void sub_1817DB360()
{
  if (v0) {
    objc_end_catch();
  }
  _Unwind_Resume(v1);
}

void sub_1817DB378(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(v2);
}

uint64_t blockForLocation(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)&__NSRLEArrayLock);
  unint64_t v6 = *(void *)(a1 + 16);
  if (a2 <= v6 >> 1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&__NSRLEArrayLock);
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 36);
    os_unfair_lock_unlock((os_unfair_lock_t)&__NSRLEArrayLock);
    if (v6 > a2)
    {
      uint64_t v8 = (uint64_t *)(a1 + 16 * v7 + 24);
      do
      {
        uint64_t v9 = *v8;
        v8 -= 2;
        v6 -= v9;
        --v7;
      }
      while (v7 && v6 > a2);
      goto LABEL_10;
    }
  }
  uint64_t v10 = a1 + 16 * v7--;
  __int16 v11 = (uint64_t *)(v10 + 40);
  unint64_t v12 = v6;
  do
  {
    unint64_t v6 = v12;
    uint64_t v13 = *v11;
    v11 += 2;
    v12 += v13;
    ++v7;
  }
  while (v12 <= a2);
LABEL_10:
  os_unfair_lock_lock((os_unfair_lock_t)&__NSRLEArrayLock);
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 36) = v7;
  os_unfair_lock_unlock((os_unfair_lock_t)&__NSRLEArrayLock);
  if (a3)
  {
    unint64_t v14 = *(void *)(a1 + 16 * v7 + 40);
    *a3 = v6;
    a3[1] = v14;
  }
  return v7;
}

void NSKeyValueWillChangeWithPerThreadPendingNotifications(void *a1, uint64_t a2, int a3, void (*a4)(long long *__return_ptr, uint64_t, uint64_t, void, void, uint64_t, char *), uint64_t a5, uint64_t a6)
{
  void (*v31)(long long *__return_ptr, uint64_t, uint64_t, void, void, uint64_t, char *);
  uint64_t v32;
  CFTypeRef v33[2];
  uint64_t v34;
  uint64_t v35;

  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v10 = (uint64_t)_NSKeyValueRetainedObservationInfoForObject(a1, 0);
  uint64_t v11 = [a1 _implicitObservationInfo];
  uint64_t v12 = v11;
  if (v10)
  {
    uint64_t v11 = [*(id *)(v10 + 8) count];
    uint64_t v13 = v11;
    if (v12)
    {
LABEL_3:
      uint64_t v11 = [*(id *)(v12 + 8) count];
      uint64_t v14 = v11;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (v11) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v29 = a2;
  uint64_t v15 = v14 + v13;
  MEMORY[0x1F4188790](v11);
  uint64_t v17 = (uint64_t *)((char *)&v29 - v16);
  if (v10) {
    _NSKeyValueObservationInfoGetObservances(v10, (uint64_t)&v29 - v16, v13);
  }
  int v30 = a3;
  if (v12) {
    _NSKeyValueObservationInfoGetObservances(v12, (uint64_t)&v17[v13], v14);
  }
  uint64_t v18 = a6;
  if (v15)
  {
    __int16 v19 = (id **)v17;
    uint64_t v20 = v14 + v13;
    do
    {
      if (-[NSKeyValueObservance retainedObserver](*v19))
      {
        uint64_t v21 = *v19;
        if (*v19)
        {
          if (((_BYTE)v21[5] & 0x20) != 0) {
            uint64_t v21 = (id *)v21[4];
          }
          else {
            uint64_t v21 = 0;
          }
        }
      }
      else
      {
        uint64_t v21 = 0;
        *__int16 v19 = 0;
      }
      uint64_t v22 = v21;
      ++v19;
      --v20;
    }
    while (v20);
  }
  os_unfair_recursive_lock_unlock();
  if (v10 | v12)
  {
    v33[1] = (CFTypeRef)1;
    uint64_t v23 = v29;
    uint64_t v24 = v18;
    uint64_t v25 = v18;
    int v26 = v30;
    v33[0] = NSKVOCopyPendingNotificationStack(a1, v29, v25, v30, 1);
    uint64_t v34 = v10;
    if (v10) {
      NSKeyValueWillChange((uint64_t)a1, v23, v26, v17, v13, v31, v32, (void (*)(uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t))NSKeyValuePushPendingNotificationPerThread, (uint64_t)v33, v24);
    }
    if (v12)
    {
      uint64_t v34 = 0;
      NSKeyValueWillChange((uint64_t)a1, v23, v26, &v17[v13], v14, v31, v32, (void (*)(uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t))NSKeyValuePushPendingNotificationPerThread, (uint64_t)v33, v24);
    }
    if (!CFArrayGetCount((CFArrayRef)v33[0])) {
      NSKVOPendingNotificationStackRemove(a1, v23, v24, v26);
    }
    CFRelease(v33[0]);
  }
  for (; v15; --v15)
  {
    if (!*v17) {
      goto LABEL_33;
    }
    isClass Class = object_isClass((id)*v17);
    uint64_t v28 = *v17;
    if (!isClass)
    {

      uint64_t v28 = *v17;
    }
    if (!v28) {
      goto LABEL_35;
    }
    if ((*(unsigned char *)(v28 + 40) & 0x20) != 0) {
      uint64_t v28 = *(void *)(v28 + 32);
    }
    else {
LABEL_33:
    }
      uint64_t v28 = 0;
LABEL_35:

    ++v17;
  }
}

void *_NSKeyValueRetainedObservationInfoForObject(void *a1, uint64_t a2)
{
  os_unfair_lock_lock(&NSKeyValueObservationInfoLock);
  os_unfair_lock_assert_owner(&NSKeyValueObservationInfoLock);
  if (a2) {
    unint64_t v4 = (void *)(*(uint64_t (**)(void *, char *))(a2 + 16))(a1, sel_observationInfo);
  }
  else {
    unint64_t v4 = (void *)[a1 observationInfo];
  }
  char v5 = v4;
  id v6 = v4;
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  return v5;
}

void NSKeyValueWillChange(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, void (*a6)(long long *__return_ptr, uint64_t, uint64_t, void, void, uint64_t, char *), uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v27 = a7;
  v39[1] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (void *)_NSKeyValueDebugger();
  if (v16) {
    [v16 _object:a1 trackChangeForKeyOrKeys:a2 operation:0];
  }
  v39[0] = 0;
  if (!a5)
  {
    int v26 = 0;
    goto LABEL_29;
  }
  do
  {
    uint64_t v17 = *a4;
    if (a10) {
      BOOL v18 = v17 == a10;
    }
    else {
      BOOL v18 = 1;
    }
    int v19 = v18;
    if (v17) {
      BOOL v20 = v19 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      unsigned __int8 v38 = 0;
      uint64_t v21 = *(void **)(v17 + 16);
      if (a3)
      {
        uint64_t v22 = [v21 keyPathIfAffectedByValueForMemberOfKeys:a2];
        unsigned __int8 v38 = 0;
        if (!v22) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v22 = [v21 keyPathIfAffectedByValueForKey:a2 exactMatch:&v38];
        if (!v22) {
          goto LABEL_26;
        }
      }
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      if (objc_msgSend(*(id *)(v17 + 16), "object:withObservance:willChangeValueForKeyOrKeys:recurse:forwardingValues:", a1, v17, a2, 1, &v36, v27))
      {
        char v35 = 0;
        id v34 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        a6(&v32, a1, v22, v38, *(unsigned char *)(v17 + 40) & 0xF, v27, &v35);
        long long v29 = v32;
        long long v30 = v33;
        id v31 = v34;
        a8(a1, a2, v17, &v29, v36, v37, a9);
        if ((*(unsigned char *)(v17 + 40) & 8) != 0)
        {
          if ((*(unsigned char *)(v17 + 40) & 0x20) != 0) {
            uint64_t v23 = *(void *)(v17 + 32);
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = *(void **)(v17 + 8);
          uint64_t v25 = *(void *)(v17 + 24);
          long long v29 = v32;
          long long v30 = v33;
          id v31 = v34;
          NSKeyValueNotifyObserver(v24, v22, a1, v25, v23, 1, &v29, v39);
        }
        if (v35)
        {
        }
      }
    }
LABEL_26:
    ++a4;
    --a5;
  }
  while (a5);
  int v26 = (void *)v39[0];
LABEL_29:
}

uint64_t _NSKeyValueDebugger()
{
  if (qword_1EB1ED908 != -1) {
    dispatch_once(&qword_1EB1ED908, &__block_literal_global_57);
  }
  return qword_1EB1ED900;
}

uint64_t NSKeyValueWillChangeBySetting@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, void *a4@<X4>, unsigned char *a5@<X5>, void *a6@<X8>)
{
  if ((a3 & 2) != 0)
  {
    if (a4)
    {
      uint64_t result = [a4 objectForKey:a2];
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = [a1 valueForKeyPath:a2];
      if (result) {
        goto LABEL_6;
      }
    }
    uint64_t result = [MEMORY[0x1E4F1CA98] null];
    goto LABEL_6;
  }
  uint64_t result = 0;
LABEL_6:
  *a6 = 1;
  a6[1] = result;
  a6[3] = 0;
  a6[4] = 0;
  a6[2] = 0;
  *a5 = 0;
  return result;
}

void NSKeyValuePushPendingNotificationPerThread(void *a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, uint64_t a7)
{
  char v11 = *(unsigned char *)(a7 + 8);
  uint64_t v12 = *(void **)(a7 + 16);
  uint64_t v13 = *a4;
  uint64_t v14 = (void *)a4[1];
  uint64_t v15 = (void *)a4[2];
  BOOL v20 = (void *)a4[3];
  uint64_t v21 = (void *)a4[4];
  uint64_t v16 = malloc_default_zone();
  uint64_t v17 = malloc_type_zone_calloc(v16, 1uLL, 0x60uLL, 0xC2E5A2B2uLL);
  *(_WORD *)uint64_t v17 = 1;
  v17[1] = a1;
  double v17[2] = [a2 copy];
  *((unsigned char *)v17 + 2) = v11;
  v17[3] = v12;
  v17[4] = a3;
  v17[5] = v13;
  v17[6] = v14;
  v17[7] = v15;
  v17[8] = v20;
  v17[9] = v21;
  v17[10] = a5;
  v17[11] = a6;
  id v18 = *(id *)(v17[4] + 8);
  CFArrayAppendValue(*(CFMutableArrayRef *)a7, v17);
  NSKVOPendingNotificationRelease(v19, v17);
  *(unsigned char *)(a7 + 8) = 0;
}

void NSKVOPendingNotificationRelease(uint64_t a1, void *a2)
{
  int v2 = (__int16)--*(_WORD *)a2;
  if (v2 <= 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    if (v4) {

    }
    free(a2);
  }
}

void NSKVOPendingNotificationStackRemove(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  if ((a4 & 1) == 0)
  {
    uint64_t v8 = (__CFDictionary *)[a1 _pendingChangeNotificationsArrayForKey:a2 create:0];
    if (!v8) {
      return;
    }
    goto LABEL_6;
  }
  uint64_t v7 = (__CFDictionary **)_CFGetTSD();
  if (v7)
  {
    uint64_t v8 = *v7;
    if (*v7)
    {
LABEL_6:
      if (CFDictionaryGetCount(v8) >= 1)
      {
        v9[0] = a1;
        v9[1] = a2;
        double v9[2] = a3;
        CFDictionaryRemoveValue(v8, v9);
      }
    }
  }
}

void NSKeyValueDidChangeWithPerThreadPendingNotifications(void *a1, uint64_t a2, char a3, void (*a4)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _OWORD *), uint64_t a5)
{
  void v13[3] = *MEMORY[0x1E4F143B8];
  CFArrayRef v10 = (const __CFArray *)NSKVOCopyPendingNotificationStack(a1, a2, a5, a3, 0);
  if (v10)
  {
    CFArrayRef v11 = v10;
    if (CFArrayGetCount(v10) >= 1)
    {
      id v12 = a1;
      v13[0] = v11;
      v13[1] = 0;
      v13[2] = a5;
      NSKeyValueDidChange((uint64_t)a1, a2, a3, a4, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t *, long long *, uint64_t *, CFTypeRef *, uint64_t))NSKeyValuePopPendingNotificationPerThread, (uint64_t)v13);
      if (!CFArrayGetCount(v11)) {
        NSKVOPendingNotificationStackRemove(a1, a2, a5, a3);
      }
    }
    CFRelease(v11);
  }
}

CFTypeRef NSKVOCopyPendingNotificationStack(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v5 = a5;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a4) {
    CFDictionaryRef v9 = NSKVOPendingPerThreadNotificationStack(a5);
  }
  else {
    CFDictionaryRef v9 = (const __CFDictionary *)[a1 _pendingChangeNotificationsArrayForKey:a2 create:a5];
  }
  CFDictionaryRef v10 = v9;
  if (!v9 || (v5 & 1) == 0 && CFDictionaryGetCount(v9) < 1) {
    return 0;
  }
  *(void *)&long long v17 = a1;
  *((void *)&v17 + 1) = a2;
  uint64_t v18 = a3;
  Value = CFDictionaryGetValue(v10, &v17);
  if (!Value)
  {
    if (v5)
    {
      Value = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, &NSKVOPendingNotificationArrayCallbacks);
      id v12 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
      uint64_t v13 = v18;
      *(_OWORD *)id v12 = v17;
      *((void *)v12 + 2) = v13;
      id v14 = *((id *)v12 + 1);
      id v15 = *((id *)v12 + 2);
      CFDictionarySetValue(v10, v12, Value);
      CFRelease(Value);
    }
  }
  if (Value) {
    return CFRetain(Value);
  }
  else {
    return 0;
  }
}

CFMutableDictionaryRef NSKVOPendingPerThreadNotificationStack(char a1)
{
  int v2 = (CFMutableDictionaryRef *)_CFGetTSD();
  if (!v2)
  {
    if ((a1 & 1) == 0) {
      return 0;
    }
    int v5 = malloc_default_zone();
    uint64_t v3 = (CFMutableDictionaryRef *)malloc_type_zone_calloc(v5, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
    CFMutableDictionaryRef result = *v3;
    if (*v3) {
      return result;
    }
LABEL_7:
    CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, &NSKVOPendingNotificationStackIdentifierCallbacks, MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef *v3 = result;
    return result;
  }
  uint64_t v3 = v2;
  CFMutableDictionaryRef result = *v2;
  if (!result && (a1 & 1) != 0) {
    goto LABEL_7;
  }
  return result;
}

void NSKeyValueDidChange(uint64_t a1, uint64_t a2, char a3, void (*a4)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _OWORD *), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t *, long long *, uint64_t *, CFTypeRef *, uint64_t), uint64_t a7)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  id v14 = (void *)_NSKeyValueDebugger();
  if (v14) {
    [v14 _object:a1 trackChangeForKeyOrKeys:a2 operation:1];
  }
  uint64_t v35 = 0;
  v36[0] = 0;
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  CFTypeRef cf2 = 0;
  int v15 = a6(a1, a2, &v35, &v32, &v30, &cf2, a7);
  uint64_t v16 = 0;
  if (v15)
  {
    do
    {
      objc_msgSend(*(id *)(v35 + 16), "object:withObservance:didChangeValueForKeyOrKeys:recurse:forwardingValues:", a1, v35, cf2, 1, v30, v31);
      long long v17 = (const void *)[*(id *)(v35 + 16) keyPath];
      uint64_t v18 = (uint64_t)v17;
      if (a3) {
        int v19 = 0;
      }
      else {
        int v19 = CFEqual(v17, cf2);
      }
      uint64_t v20 = *(unsigned char *)(v35 + 40) & 0xF;
      v24[0] = v32;
      v24[1] = v33;
      uint64_t v25 = v34;
      a4(&v26, a1, v18, a5, v19 != 0, v20, v24);
      long long v32 = v26;
      long long v33 = v27;
      uint64_t v34 = v28;
      uint64_t v21 = *(void **)(v35 + 8);
      uint64_t v22 = *(void *)(v35 + 24);
      if ((*(unsigned char *)(v35 + 40) & 0x20) != 0) {
        uint64_t v23 = *(void *)(v35 + 32);
      }
      else {
        uint64_t v23 = 0;
      }
      long long v26 = v32;
      long long v27 = v33;
      uint64_t v28 = v34;
      NSKeyValueNotifyObserver(v21, v18, a1, v22, v23, 0, &v26, v36);
    }
    while ((a6(a1, a2, &v35, &v32, &v30, &cf2, a7) & 1) != 0);
    uint64_t v16 = (void *)v36[0];
  }
}

CFIndex NSKeyValuePopPendingNotificationPerThread(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _OWORD *a5, uint64_t *a6, uint64_t a7)
{
  CFArrayRef v14 = *(const __CFArray **)a7;
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)a7);
  if (result)
  {
    CFIndex v16 = result;
    long long v27 = a6;
    long long v17 = *(unsigned __int8 **)(a7 + 8);
    if (!v17) {
      goto LABEL_14;
    }
    int v18 = v17[2];
    CFIndex v16 = result - 1;
    if (v17 != CFArrayGetValueAtIndex(v14, result - 1)) {
      __assert_rtn("NSKeyValuePopPendingNotificationPerThread", "NSKeyValueObserving.m", 980, "moreParameters->mostRecentEntry == CFArrayGetValueAtIndex(stack, stackCount - 1)");
    }
    CFArrayRemoveValueAtIndex(v14, v16);
    if (!v18)
    {
LABEL_14:
      do
      {
        if (v16-- < 1) {
          break;
        }
        CFArrayRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(v14, v16);
        if (*((void *)ValueAtIndex + 1) != a1
          || (uint64_t v20 = ValueAtIndex, ![*((id *)ValueAtIndex + 2) isEqual:a2])
          || (uint64_t v21 = *(void *)(a7 + 16)) != 0 && *((void *)v20 + 4) != v21)
        {
          __assert_rtn("NSKeyValuePopPendingNotificationPerThread", "NSKeyValueObserving.m", 1001, "currentEntry->observable==inObservable && [currentEntry->triggerKeyOrKeys isEqual:inTriggerKeyOrKeys] && (!moreParameters->onlyObservanceToMatchOrNil || (currentEntry->observance==moreParameters->onlyObservanceToMatchOrNil))");
        }
        uint64_t v22 = *((void *)v20 + 3);
        if (!v22
          || _NSKeyValueCheckObservationInfoForPendingNotification(*((void **)v20 + 1), *((void *)v20 + 4), v22))
        {
          *a3 = *((void *)v20 + 4);
          long long v25 = *(_OWORD *)(v20 + 40);
          long long v26 = *(_OWORD *)(v20 + 56);
          *(void *)(a4 + 32) = *((void *)v20 + 9);
          *(_OWORD *)a4 = v25;
          *(_OWORD *)(a4 + 16) = v26;
          *a5 = *((_OWORD *)v20 + 5);
          *long long v27 = a2;
          *(void *)(a7 + 8) = v20;
          return 1;
        }
        int v23 = v20[2];
        CFArrayRemoveValueAtIndex(v14, v16);
      }
      while (!v23);
    }
    return 0;
  }
  return result;
}

uint64_t NSKeyValueNotifyObserver(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (objc_opt_respondsToSelector()) {
    return [a1 _observeValueForKeyPath:a2 ofObject:a3 changeKind:*a7 oldValue:a7[1] newValue:a7[2] indexes:a7[3] context:a4];
  }
  long long v17 = (void *)*a8;
  if (*a8)
  {
    long long v18 = *((_OWORD *)a7 + 1);
    long long v23 = *(_OWORD *)a7;
    long long v24 = v18;
    uint64_t v25 = a7[4];
    [v17 setDetailsNoCopy:&v23 originalObservable:a5];
    int v19 = (NSKeyValueChangeDictionary *)*a8;
  }
  else
  {
    uint64_t v20 = [NSKeyValueChangeDictionary alloc];
    long long v21 = *((_OWORD *)a7 + 1);
    long long v23 = *(_OWORD *)a7;
    long long v24 = v21;
    uint64_t v25 = a7[4];
    int v19 = [(NSKeyValueChangeDictionary *)v20 initWithDetailsNoCopy:&v23 originalObservable:a5 isPriorNotification:a6];
    *a8 = (uint64_t)v19;
  }
  uint64_t v22 = [(NSKeyValueChangeDictionary *)v19 retainCount];
  uint64_t result = NSKVONotify(a1, a2, a3, *a8, a4);
  if (v22 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t result = [(id)*a8 retainCount];
    if (result != v22) {
      return [(id)*a8 retainObjects];
    }
  }
  return result;
}

void *NSKeyValueDidChangeBySetting@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (!a2)
  {
    if (a3) {
      __assert_rtn("NSKeyValueDidChangeBySetting", "NSKeyValueObserving.m", 617, "inObservedKeyPath");
    }
  }
  long long v7 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 16) = v7;
  *(void *)(a6 + 32) = *(void *)(a5 + 32);
  if (a4)
  {
    if (a3)
    {
      uint64_t result = (void *)[a3 objectForKeyedSubscript:a2];
      if (result)
      {
LABEL_7:
        *(void *)(a6 + 16) = result;
        return result;
      }
    }
    else
    {
      uint64_t result = (void *)[result valueForKeyPath:a2];
      if (result) {
        goto LABEL_7;
      }
    }
    uint64_t result = (void *)[MEMORY[0x1E4F1CA98] null];
    goto LABEL_7;
  }
  return result;
}

void sub_1817DE670(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1817DE2ECLL);
  }
  _Unwind_Resume(a1);
}

void __NSOQSchedule(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = (os_unfair_lock_s *)(a1 + 8);
    memset(__src, 0, sizeof(__src));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    int v3 = *(_DWORD *)(a1 + 168);
    int v4 = *(_DWORD *)(a1 + 172);
    uint64_t v5 = (v3 - v4);
    if (v3 <= v4)
    {
      os_unfair_lock_unlock(v2);
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v26 = v2;
      unint64_t v27 = 32;
      ptr = __src;
      do
      {
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 500));
        if ((v8 & 1) != 0 || v6 >= 6) {
          break;
        }
        CFDictionaryRef v9 = &v2[2 * ((uint64_t)(char)(__NSOperationPrios[v6] + ((__NSOperationPrios[v6] >> 13) & 3)) >> 2)
               + 4];
        CFDictionaryRef v10 = *(os_unfair_lock_s **)&v9[6]._os_unfair_lock_opaque;
        uint64_t v30 = v9 + 6;
        if (v10)
        {
          CFArrayRef v11 = 0;
          uint64_t v28 = v9 + 18;
          while (1)
          {
            unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a1 + 500));
            if (v12) {
              goto LABEL_36;
            }
            uint64_t v13 = v10;
            CFDictionaryRef v10 = *(os_unfair_lock_s **)&v10[6]._os_unfair_lock_opaque;
            int v14 = atomic_load((unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 1);
            if (v14 == 80) {
              break;
            }
LABEL_31:
            if (v10) {
              BOOL v23 = v5 == 0;
            }
            else {
              BOOL v23 = 1;
            }
            CFArrayRef v11 = v13;
            if (v23) {
              goto LABEL_36;
            }
          }
          unsigned __int8 v15 = atomic_load((unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 3);
          if ((v15 & 1) == 0)
          {
            os_unfair_lock_lock(v13 + 58);
            uint64_t v16 = *(void *)&v13[14]._os_unfair_lock_opaque;
            os_unfair_lock_unlock(v13 + 58);
            if (!v16)
            {
              if (v7 + 1 <= v27)
              {
                int v19 = ptr;
              }
              else
              {
                size_t v17 = malloc_good_size(8 * v27 + 8);
                unint64_t v27 = v17 >> 3;
                size_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
                if (ptr == __src)
                {
                  int v19 = malloc_type_malloc(v18, 0x80040B8603338uLL);
                  memmove(v19, __src, 8 * v7);
                }
                else
                {
                  int v19 = malloc_type_realloc(ptr, v18, 0x80040B8603338uLL);
                }
              }
              ptr = v19;
              *((void *)v19 + v7++) = v13;
            }
            goto LABEL_31;
          }
          uint64_t v20 = v11 + 6;
          if (!v11) {
            uint64_t v20 = v30;
          }
          *(void *)&v20->_os_unfair_lock_opaque = v10;
          if (!v10) {
            *(void *)&v28->_os_unfair_lock_opaque = v11;
          }
          *(void *)&v13[6]._os_unfair_lock_opaque = 0;
          atomic_store(0x88u, (unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 1);
          ++*(_DWORD *)(a1 + 172);
          if (*(unsigned char *)(a1 + 506))
          {
            long long v21 = MEMORY[0x1E4F14428];
            goto LABEL_22;
          }
          long long v21 = *(NSObject **)(a1 + 176);
          if (v21) {
LABEL_22:
          }
            dispatch_retain(v21);
          else {
            long long v21 = oq_synthesize_backing_queue(a1);
          }
          os_unfair_lock_lock(v13 + 58);
          uint64_t v22 = _Block_copy(*(const void **)&v13[28]._os_unfair_lock_opaque);
          os_unfair_lock_unlock(v13 + 58);
          if (object_getClass(v13) == (Class)_NSBarrierOperation) {
            dispatch_barrier_async(v21, v22);
          }
          else {
            dispatch_async(v21, v22);
          }
          --v5;
          dispatch_release(v21);
          _Block_release(v22);
          uint64_t v13 = v11;
          goto LABEL_31;
        }
LABEL_36:
        ++v6;
        int v2 = v26;
      }
      while (v5 > 0);
      os_unfair_lock_unlock(v2);
      if (v7)
      {
        long long v24 = (id *)ptr;
        do
        {
          if ([*v24 isReady]) {
            atomic_store(1u, (unsigned __int8 *)*v24 + 239);
          }
          id v25 = *v24++;

          --v7;
        }
        while (v7);
      }
      if (ptr != __src) {
        free(ptr);
      }
    }
  }
}

void op_invalidate_queue_and_schedule_locked(uint64_t a1)
{
  int v2 = (os_unfair_lock_s *)(a1 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 232));
  int v3 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  int v4 = *(const void **)(a1 + 112);
  id v5 = *(id *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  os_unfair_lock_unlock(v2);

  if (v4) {
    _Block_release(v4);
  }
}

void __addOperations(objc_class *a1, const char *a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (!(a3 | a4) || a4 && ![(id)a4 count]) {
    return;
  }
  uint64_t v60 = 0;
  uint64_t v61 = &v60;
  uint64_t v62 = 0x3052000000;
  uint64_t v63 = __Block_byref_object_copy__11;
  uint64_t v64 = __Block_byref_object_dispose__11;
  uint64_t v65 = 0;
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x3052000000;
  v59[3] = __Block_byref_object_copy__11;
  v59[4] = __Block_byref_object_dispose__11;
  v59[5] = 0;
  uint64_t v55 = 0;
  uint64_t v56 = &v55;
  uint64_t v57 = 0x2020000000;
  uint64_t v58 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x2020000000;
  uint64_t v54 = 0;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  long long v44 = ____addOperations_block_invoke;
  uint64_t v45 = &unk_1E51F97C0;
  uint64_t v46 = a1;
  uint64_t v47 = &v51;
  uint64_t v48 = &v55;
  uint64_t v49 = v59;
  uint64_t v50 = &v60;
  if (a3)
  {
    ____addOperations_block_invoke(v43, a3);
  }
  else
  {
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v10 = [(id)a4 countByEnumeratingWithState:&v67 objects:v66 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v68;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v68 != v11) {
            objc_enumerationMutation((id)a4);
          }
          v44(v43, *(void *)(*((void *)&v67 + 1) + 8 * i));
        }
        uint64_t v10 = [(id)a4 countByEnumeratingWithState:&v67 objects:v66 count:16];
      }
      while (v10);
    }
  }
  if (v56[3])
  {
    for (uint64_t j = v61[5]; j; v61[5] = j)
    {
      uint64_t v21 = j;
      uint64_t j = *(void *)(j + 16);
      op_invalidate_queue_and_schedule_locked(v21);
      *(void *)(v61[5] + 8) = 0;
      uint64_t v22 = v61;
      *(void *)(v61[5] + 16) = 0;
      char v23 = 72;
      atomic_compare_exchange_strong((atomic_uchar *volatile)(v22[5] + 237), (unsigned __int8 *)&v23, 0);
    }
    if (a4)
    {
      long long v24 = _NSMethodExceptionProem(a1, a2);
      uint64_t v25 = v56[3];
      uint64_t v26 = "s are";
      if (v25 == 1) {
        uint64_t v26 = " is";
      }
      unint64_t v27 = +[NSString stringWithFormat:@"%@: %lu (of %lu) operation%s finished, executing, or already in a queue, and cannot be enqueued", v24, v25, v52[3] + v25, v26];
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v27 userInfo:0]);
    }
    int v28 = atomic_load((unsigned __int8 *)(a3 + 237));
    HIDWORD(v30) = v28;
    LODWORD(v30) = v28 - 216;
    int v29 = v30 >> 2;
    if ((v29 - 6) >= 2)
    {
      if (v29) {
        BOOL v31 = v29 == 2;
      }
      else {
        BOOL v31 = 1;
      }
      if (!v31)
      {
        uint64_t v34 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: operation is already enqueued on a queue", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
        objc_exception_throw(v34);
      }
      uint64_t v32 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: operation is executing and cannot be enqueued", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
      objc_exception_throw(v32);
    }
    long long v33 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: operation is finished and cannot be enqueued", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
    objc_exception_throw(v33);
  }
  uint64_t v13 = 0;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  uint64_t v36 = ____addOperations_block_invoke_5;
  uint64_t v37 = &unk_1E51F97E8;
  char v42 = a5;
  unsigned __int8 v38 = a1;
  unsigned int v39 = &v51;
  uint64_t v40 = &v60;
  uint64_t v41 = v59;
  int v14 = 1;
  do
  {
    while (1)
    {
      int v15 = v14;
      uint64_t v16 = _NSOperationQueueOperationsAndOperationCountKeys[v13];
      if (v16 == @"operations") {
        break;
      }
      if (v16 == @"operationCount")
      {
        size_t v17 = (unsigned __int8 *)a1 + 504;
        goto LABEL_21;
      }
      int v14 = 0;
      uint64_t v13 = 1;
      if ((v15 & 1) == 0) {
        goto LABEL_25;
      }
    }
    size_t v17 = (unsigned __int8 *)a1 + 503;
LABEL_21:
    int v18 = atomic_load(v17);
    BOOL v19 = v18 != 0;
    if (v18) {
      break;
    }
    int v14 = 0;
    uint64_t v13 = 1;
  }
  while (((v15 ^ 1) & 1) == 0);
  if (v19)
  {
    [(objc_class *)a1 _changeValueForKeys:_NSOperationQueueOperationsAndOperationCountKeys count:2 maybeOldValuesDict:0 maybeNewValuesDict:0 usingBlock:v35];
    goto LABEL_26;
  }
LABEL_25:
  v36((uint64_t)v35);
LABEL_26:
  if ((a5 & 1) == 0) {
    __NSOQSchedule((uint64_t)a1);
  }
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  _Block_object_dispose(v59, 8);
  _Block_object_dispose(&v60, 8);
}

void sub_1817DF8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void ____addOperations_block_invoke(void *a1, uint64_t a2)
{
  char v3 = 0;
  block[6] = *MEMORY[0x1E4F143B8];
  atomic_compare_exchange_strong((atomic_uchar *volatile)(a2 + 237), (unsigned __int8 *)&v3, 0x48u);
  if (v3)
  {
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
  else
  {
    ++*(void *)(*(void *)(a1[5] + 8) + 24);
    if (*(void *)(*(void *)(a1[6] + 8) + 24))
    {
      char v5 = 72;
      atomic_compare_exchange_strong((atomic_uchar *volatile)(a2 + 237), (unsigned __int8 *)&v5, 0);
    }
    else
    {
      id v6 = (id)a2;
      atomic_store([(id)a2 isReady], (unsigned __int8 *)(a2 + 239));
      dispatch_qos_class_t v7 = atomic_load((unsigned __int8 *)(a2 + 241));
      if (v7)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ____addOperations_block_invoke_2;
        block[3] = &unk_1E51F6678;
        block[4] = a1[4];
        block[5] = a2;
        dispatch_block_t v8 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v7, 0, block);
      }
      else
      {
        uint64_t v9 = a1[4];
        if (oq_get_property_qos(v9))
        {
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = ____addOperations_block_invoke_4;
          aBlock[3] = &unk_1E51F6678;
          aBlock[4] = v9;
          aBlock[5] = a2;
          dispatch_block_t v8 = _Block_copy(aBlock);
        }
        else
        {
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 3221225472;
          unint64_t v15[2] = ____addOperations_block_invoke_3;
          v15[3] = &unk_1E51F6678;
          v15[4] = v9;
          v15[5] = a2;
          dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, v15);
        }
      }
      dispatch_block_t v10 = v8;
      uint64_t v11 = (void *)a1[4];
      os_unfair_lock_lock((os_unfair_lock_t)(a2 + 232));
      if (*(void *)(a2 + 32)) {
        __assert_rtn("iop_set_queue_and_adopt_schedule_locked", "NSOperation.m", 316, "iop->__queue == nil");
      }
      *(void *)(a2 + 32) = v11;
      if (*(void *)(a2 + 112)) {
        __assert_rtn("iop_set_queue_and_adopt_schedule_locked", "NSOperation.m", 318, "iop->__schedule == nil");
      }
      *(void *)(a2 + 112) = v10;
      *(void *)(a2 + 104) = voucher_copy();
      os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 232));
      *(void *)(a2 + 8) = *(void *)(*(void *)(a1[7] + 8) + 40);
      *(void *)(a2 + 16) = 0;
      uint64_t v12 = *(void *)(*(void *)(a1[7] + 8) + 40);
      if (v12) {
        uint64_t v13 = (void *)(v12 + 16);
      }
      else {
        uint64_t v13 = (void *)(*(void *)(a1[8] + 8) + 40);
      }
      *uint64_t v13 = a2;
      *(void *)(*(void *)(a1[7] + 8) + 40) = a2;
    }
  }
}

uint64_t oq_get_property_qos(uint64_t a1)
{
  int v1 = atomic_load((unsigned __int8 *)(a1 + 502));
  uint64_t v2 = 5;
  if (v1 > 20)
  {
    if (v1 == 21) {
      return -1;
    }
    uint64_t v3 = 25;
    if (v1 == 33) {
      uint64_t v2 = 33;
    }
    BOOL v4 = v1 == 25;
  }
  else
  {
    if (!v1) {
      return 0;
    }
    uint64_t v3 = 9;
    if (v1 == 17) {
      uint64_t v2 = 17;
    }
    BOOL v4 = v1 == 9;
  }
  if (v4) {
    return v3;
  }
  else {
    return v2;
  }
}

void ____addOperations_block_invoke_5(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(a1 + 32) + 144), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), memory_order_relaxed);
  }
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
    *(void *)(v2 + 8) = v3;
    if (!v3) {
      uint64_t v3 = *(void *)(a1 + 32);
    }
    *(void *)(v3 + 16) = v2;
    *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    do
    {
      if (!*(unsigned char *)(a1 + 64))
      {
        for (uint64_t i = *(void **)(*(void *)(a1 + 32) + 72); i; uint64_t i = (void *)i[3])
          iop_addDependency((unsigned __int8 *)(v2 + 8), i, (void *)v2);
      }
      char v5 = 72;
      atomic_compare_exchange_strong((atomic_uchar *volatile)(v2 + 237), (unsigned __int8 *)&v5, 0x50u);
      int v6 = *(unsigned __int8 *)(v2 + 238);
      if (v6 == 255)
      {
        if (*(_DWORD *)(*(void *)(a1 + 32) + 168) == 1)
        {
          int v6 = 0;
        }
        else
        {
          int property_qos = op_get_property_qos(v2);
          int v6 = 0;
          if (property_qos > 16)
          {
            if (property_qos > 24)
            {
              if (property_qos == 25)
              {
                int v6 = 4;
              }
              else
              {
                if (property_qos != 33) {
                  goto LABEL_35;
                }
                int v6 = 8;
              }
            }
            else if (property_qos == 17)
            {
              int v6 = 252;
            }
            else if (property_qos != 21)
            {
              goto LABEL_35;
            }
          }
          else if ((property_qos + 1) >= 2)
          {
            if (property_qos != 5 && property_qos != 9)
            {
LABEL_35:
              __break(1u);
              return;
            }
            int v6 = 248;
          }
        }
      }
      *(void *)(v2 + 24) = 0;
      uint64_t v7 = 8 * ((int)((v6 + (((char)v6 >> 13) & 3)) << 24) >> 26) + 16;
      uint64_t v8 = *(void *)(a1 + 32) + v7;
      uint64_t v9 = *(void *)(v8 + 80);
      dispatch_block_t v10 = (uint64_t *)(v8 + 32);
      if (v9) {
        dispatch_block_t v10 = (uint64_t *)(v9 + 24);
      }
      *dispatch_block_t v10 = v2;
      *(void *)(*(void *)(a1 + 32) + v7 + 80) = v2;
      uint64_t v2 = *(void *)(v2 + 16);
    }
    while (v2);
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v12 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
    os_unfair_lock_unlock(v12);
  }
}

uint64_t __NSOPERATION_IS_INVOKING_MAIN__(void *a1)
{
  return [a1 main];
}

uint64_t op_get_property_qos(uint64_t a1)
{
  int v1 = atomic_load((unsigned __int8 *)(a1 + 241));
  uint64_t v2 = 5;
  if (v1 > 20)
  {
    if (v1 == 21) {
      return -1;
    }
    uint64_t v3 = 25;
    if (v1 == 33) {
      uint64_t v2 = 33;
    }
    BOOL v4 = v1 == 25;
  }
  else
  {
    if (!v1) {
      return 0;
    }
    uint64_t v3 = 9;
    if (v1 == 17) {
      uint64_t v2 = 17;
    }
    BOOL v4 = v1 == 9;
  }
  if (v4) {
    return v3;
  }
  else {
    return v2;
  }
}

NSObject *oq_synthesize_backing_queue(uint64_t a1)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  int v1 = *(NSObject **)(a1 + 184);
  if (!v1)
  {
    dispatch_qos_class_t v3 = atomic_load((unsigned __int8 *)(a1 + 502));
    if (v3) {
      BOOL v4 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], v3, 0);
    }
    else {
      BOOL v4 = MEMORY[0x1E4F14430];
    }
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 501));
    if (v5) {
      BOOL v4 = dispatch_queue_attr_make_with_overcommit();
    }
    int v1 = dispatch_queue_create(0, v4);
    if (*(unsigned char *)(a1 + 200)) {
      goto LABEL_21;
    }
    v8[0] = 0;
    objc_msgSend(*(id *)(a1 + 192), "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", a1 + 200, 299, v8, 4, 0, 0, objc_msgSend(*(id *)(a1 + 192), "length"), 0);
    *(unsigned char *)(a1 + 8 + v8[0] + 192) = 0;
    __strlcat_chk();
    int v6 = atomic_load((unsigned __int8 *)(a1 + 502));
    if (v6 <= 16)
    {
      if (v6 && v6 != 5 && v6 != 9) {
        goto LABEL_20;
      }
    }
    else if (v6 > 24)
    {
      if (v6 != 33 && v6 != 25) {
        goto LABEL_20;
      }
    }
    else if (v6 != 17 && v6 != 21)
    {
      goto LABEL_20;
    }
    __strlcat_chk();
LABEL_20:
    __strlcat_chk();
LABEL_21:
    dispatch_queue_set_label_nocopy();
    *(void *)(a1 + 184) = v1;
  }
  dispatch_retain(v1);
  return v1;
}

uint64_t NSKVONotify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions) {
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)&_NSKeyValueObserverRegistrationLock);
  }

  return [a1 observeValueForKeyPath:a2 ofObject:a3 change:a4 context:a5];
}

uint64_t NSKeyValuePopPendingNotificationLocal(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _OWORD *a5, void *a6, uint64_t *a7)
{
  uint64_t v13 = a7[1];
  if (v13 < 1) {
    return 0;
  }
  while (1)
  {
    uint64_t v14 = *a7;
    uint64_t v15 = v13 - 1;
    a7[1] = v13 - 1;
    uint64_t v16 = (uint64_t *)(v14 + 80 * (v13 - 1));
    if (!v16[8] || _NSKeyValueCheckObservationInfoForPendingNotification(a1, *v16, a7[5])) {
      break;
    }

    uint64_t v17 = v14 + 80 * v15;
    uint64_t v13 = a7[1];
    if (v13 <= 0) {
      return 0;
    }
  }
  *a3 = *v16;
  uint64_t v19 = v14 + 80 * v15;
  long long v20 = *(_OWORD *)(v19 + 8);
  long long v21 = *(_OWORD *)(v19 + 24);
  *(void *)(a4 + 32) = *(void *)(v19 + 40);
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v21;
  *a5 = *(_OWORD *)(v19 + 48);
  *a6 = *(void *)(v19 + 72);
  uint64_t v22 = *(void *)(v19 + 16);
  a7[2] = *(void *)(*v16 + 8);
  a7[3] = v22;
  a7[4] = *(void *)(v19 + 48);
  return 1;
}

uint64_t _NSKeyValueCheckObservationInfoForPendingNotification(void *a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_lock(&NSKeyValueObservationInfoLock);
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) + 8);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(void *, char *))(v6 + 16))(a1, sel_observationInfo);
    if (v7) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = [a1 observationInfo];
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (v7 == a3) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = [*(id *)(v7 + 8) containsObject:a2];
  }
LABEL_8:
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  return v8;
}

uint64_t NSKeyValuePushPendingNotificationLocal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = [*(id *)(a7 + 48) containsObject:*(void *)(a3 + 8)];
  if ((result & 1) == 0)
  {
    uint64_t v14 = *(void *)(a7 + 24);
    if (v14 == *(void *)a7)
    {
      uint64_t v15 = 2 * v14;
      if (*(unsigned char *)(a7 + 8))
      {
        size_t v16 = 160 * v14;
        uint64_t v17 = malloc_default_zone();
        int v18 = (char *)malloc_type_zone_calloc(v17, 1uLL, v16, 0xC2E5A2B2uLL);
        memmove(v18, *(const void **)(a7 + 16), 80 * *(void *)a7);
        *(void *)(a7 + 16) = v18;
        *(unsigned char *)(a7 + 8) = 0;
      }
      else
      {
        int v18 = (char *)NSReallocateScannedUncollectable(*(void **)(a7 + 16), 160 * v14);
        *(void *)(a7 + 16) = v18;
      }
      *(void *)a7 = v15;
      uint64_t v14 = *(void *)(a7 + 24);
    }
    else
    {
      int v18 = *(char **)(a7 + 16);
    }
    *(void *)(a7 + 24) = v14 + 1;
    uint64_t v19 = &v18[80 * v14];
    *(void *)uint64_t v19 = a3;
    uint64_t v20 = *(void *)(a4 + 32);
    long long v21 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v19 + 8) = *(_OWORD *)a4;
    *((void *)v19 + 5) = v20;
    *(_OWORD *)(v19 + 24) = v21;
    id v22 = *((id *)v19 + 2);
    *((void *)v19 + 6) = a5;
    *((void *)v19 + 7) = a6;
    id v23 = a5;
    *((void *)v19 + 8) = *(unsigned __int8 *)(a7 + 32);
    *((void *)v19 + 9) = a2;
    long long v24 = *(void **)(*(void *)v19 + 8);
    return (uint64_t)v24;
  }
  return result;
}

void __iop_setCompletionBlock_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)[*(id *)(a1 + 32) copy];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224));
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = *(void **)(v3 + 56);
  if (*(void **)(a1 + 32) == v4)
  {

    id v5 = 0;
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else
  {
    *(void *)(v3 + 56) = v2;
    id v5 = v4;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 224));
}

char *__iop_setName_block_invoke(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  free(*(void **)(v2 + 88));
  if (v1) {
    uint64_t result = strdup((const char *)[v1 UTF8String]);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(v2 + 88) = result;
  return result;
}

void __iop_setQueuePriority_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 232));
  BOOL v4 = *(os_unfair_lock_s **)(v1 + 32);
  if (v4)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 232));
    uint64_t v3 = v4 + 2;
    os_unfair_lock_lock(v4 + 2);
    int v5 = *(unsigned __int8 *)(v1 + 238);
    if (v5 != 255) {
      goto LABEL_5;
    }
    if (v4[42]._os_unfair_lock_opaque == 1)
    {
      int v5 = 0;
      goto LABEL_5;
    }
    int property_qos = op_get_property_qos(v1);
    int v5 = 0;
    if (property_qos <= 16)
    {
      if ((property_qos + 1) < 2) {
        goto LABEL_5;
      }
      if (property_qos == 5 || property_qos == 9)
      {
        int v5 = 248;
        goto LABEL_5;
      }
LABEL_35:
      __break(1u);
      return;
    }
    if (property_qos > 24)
    {
      if (property_qos == 25)
      {
        int v5 = 4;
      }
      else
      {
        if (property_qos != 33) {
          goto LABEL_35;
        }
        int v5 = 8;
      }
    }
    else if (property_qos == 17)
    {
      int v5 = 252;
    }
    else if (property_qos != 21)
    {
      goto LABEL_35;
    }
LABEL_5:
    if (v5 != v2)
    {
      uint64_t v6 = 0;
      *(unsigned char *)(v1 + 238) = v2;
      uint64_t v7 = ((uint64_t)(char)(v5 + (((char)v5 >> 13) & 3)) >> 2) + 2;
      uint64_t v8 = &v3[2 * v7];
      uint64_t v11 = *(void *)&v8[6]._os_unfair_lock_opaque;
      uint64_t v9 = v8 + 6;
      uint64_t v10 = v11;
      while (v10)
      {
        uint64_t v12 = v6;
        uint64_t v6 = (os_unfair_lock_s *)v10;
        uint64_t v10 = *(void *)(v10 + 24);
        if (v6 == (os_unfair_lock_s *)v1)
        {
          uint64_t v13 = v12 + 6;
          if (!v12) {
            uint64_t v13 = v9;
          }
          *(void *)&v13->_os_unfair_lock_opaque = v10;
          if (!v10) {
            *(void *)&v3[2 * v7 + 18]._os_unfair_lock_opaque = v12;
          }
          *(void *)(v1 + 24) = 0;
          uint64_t v14 = &v3[2 * ((int)((v2 + (((char)v2 >> 13) & 3)) << 24) >> 26)];
          uint64_t v15 = *(void *)&v14[22]._os_unfair_lock_opaque;
          if (v15) {
            size_t v16 = (uint64_t *)(v15 + 24);
          }
          else {
            size_t v16 = (uint64_t *)&v14[10];
          }
          *size_t v16 = v1;
          *(void *)&v14[22]._os_unfair_lock_opaque = v1;
          goto LABEL_18;
        }
      }
    }
    goto LABEL_18;
  }
  *(unsigned char *)(v1 + 238) = v2;
LABEL_18:

  os_unfair_lock_unlock(v3);
}

void *NSKeyValueDidChangeBySetMutation@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v7 = *(_OWORD *)(a6 + 16);
  if (a4)
  {
    *(_OWORD *)a7 = *(_OWORD *)a6;
    *(_OWORD *)(a7 + 16) = v7;
    *(void *)(a7 + 32) = *(void *)(a6 + 32);
  }
  else
  {
    v8[0] = *(_OWORD *)a6;
    v8[1] = v7;
    uint64_t v9 = *(void *)(a6 + 32);
    return NSKeyValueDidChangeBySetting(result, a2, a3, a5, (uint64_t)v8, a7);
  }
  return result;
}

uint64_t NSKeyValueWillChangeByOrderedToManyMutation@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unsigned char *a6@<X5>, void *a7@<X8>)
{
  if (a3)
  {
    uint64_t v13 = a5[1];
    uint64_t v14 = _CFGetTSD();
    if (v14 && (uint64_t v15 = v14, v16 = _CFGetTSD(), v15 == a2) && (void *)v16 == a1)
    {
      uint64_t v17 = 0;
      char v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      _CFSetTSD();
      _CFSetTSD();
      uint64_t v17 = [a1 valueForKey:a2];
      _CFSetTSD();
      _CFSetTSD();
      if (v17 && _NSIsNSOrderedSet())
      {
        uint64_t v21 = *a5;
        if (*a5 != 4 && v21 != 2)
        {
          uint64_t v19 = 0;
          char v18 = 1;
          if ((a4 & 2) == 0) {
            goto LABEL_20;
          }
LABEL_19:
          if (v21 != 2)
          {
            id v23 = (void *)v17;
            if ((v18 & 1) == 0) {
              id v23 = (void *)[a1 valueForKey:a2];
            }
            uint64_t result = [v23 objectsAtIndexes:v13];
            uint64_t v21 = *a5;
            goto LABEL_24;
          }
LABEL_20:
          uint64_t result = 0;
LABEL_24:
          uint64_t v24 = v17 & (a4 << 58 >> 63);
          if (result) {
            uint64_t v24 = result;
          }
          *a7 = v21;
          a7[1] = v24;
          a7[2] = 0;
          a7[3] = v13;
          a7[4] = v19;
          goto LABEL_27;
        }
        uint64_t v22 = [(id)v17 count];
        uint64_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:8 * v22];
        objc_msgSend((id)v17, "getObjects:range:", objc_msgSend(v19, "mutableBytes"), 0, v22);
      }
      else
      {
        uint64_t v19 = 0;
      }
      char v18 = 1;
    }
    uint64_t v21 = *a5;
    if ((a4 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if ((a4 & 2) != 0)
  {
    uint64_t result = [a1 valueForKeyPath:a2];
    if (!result) {
      uint64_t result = [MEMORY[0x1E4F1CA98] null];
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a7 = 1;
  a7[1] = result;
  a7[3] = 0;
  a7[4] = 0;
  a7[2] = 0;
LABEL_27:
  *a6 = 0;
  return result;
}

__n128 NSKeyValueDidChangeByOrderedToManyMutation@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, char a5@<W4>, long long *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    long long v18 = a6[1];
    long long v32 = *a6;
    long long v33 = v18;
    uint64_t v34 = (void (*)(uint64_t))*((void *)a6 + 4);
    NSKeyValueDidChangeBySetting(a1, a2, a3, a5, (uint64_t)&v32, a7);
    return result;
  }
  id v12 = (id)*((void *)a6 + 3);
  uint64_t v13 = _CFGetTSD();
  if (v13 && (uint64_t v14 = v13, v15 = _CFGetTSD(), v14 == a2) && (void *)v15 == a1)
  {
    uint64_t v16 = 0;
    char v17 = 0;
    if ((a5 & 1) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    _CFSetTSD();
    _CFSetTSD();
    uint64_t v16 = (void *)[a1 valueForKey:a2];
    _CFSetTSD();
    _CFSetTSD();
    if (v16 && _NSIsNSOrderedSet())
    {
      uint64_t v20 = *(void *)a6;
      if (*(void *)a6 == 4)
      {
        *(void *)&long long v32 = 0;
        *((void *)&v32 + 1) = &v32;
        *(void *)&long long v33 = 0x3052000000;
        *((void *)&v33 + 1) = __Block_byref_object_copy__9;
        uint64_t v34 = __Block_byref_object_dispose__9;
        uint64_t v35 = 0;
        uint64_t v21 = [*((id *)a6 + 4) bytes];
        v31[0] = MEMORY[0x1E4F143A8];
        v31[1] = 3221225472;
        v31[2] = __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke;
        v31[3] = &unk_1E51F8E08;
        v31[6] = &v32;
        v31[7] = v21;
        v31[4] = v16;
        v31[5] = v12;
        [v12 enumerateIndexesUsingBlock:v31];
        uint64_t v22 = *(void **)(*((void *)&v32 + 1) + 40);
        if (v22) {
          id v12 = v22;
        }

        *((void *)a6 + 4) = 0;
        _Block_object_dispose(&v32, 8);
        uint64_t v20 = *(void *)a6;
      }
      if (v20 == 2)
      {
        *(void *)&long long v32 = 0;
        *((void *)&v32 + 1) = &v32;
        *(void *)&long long v33 = 0x3052000000;
        *((void *)&v33 + 1) = __Block_byref_object_copy__9;
        uint64_t v34 = __Block_byref_object_dispose__9;
        uint64_t v35 = 0;
        uint64_t v23 = [*((id *)a6 + 4) bytes];
        unint64_t v24 = [*((id *)a6 + 4) length];
        uint64_t v25 = [v16 count];
        v30[0] = 0;
        v30[1] = v30;
        v30[2] = 0x2020000000;
        void v30[3] = 0;
        v29[0] = MEMORY[0x1E4F143A8];
        v29[1] = 3221225472;
        v29[2] = __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke_2;
        v29[3] = &unk_1E51F8E30;
        v29[8] = v24 >> 3;
        v29[9] = v23;
        v29[10] = v25;
        v29[6] = v30;
        v29[7] = &v32;
        void v29[4] = v16;
        v29[5] = v12;
        [v12 enumerateIndexesUsingBlock:v29];
        uint64_t v26 = *(void **)(*((void *)&v32 + 1) + 40);
        if (v26) {
          id v12 = v26;
        }

        *((void *)a6 + 4) = 0;
        _Block_object_dispose(v30, 8);
        _Block_object_dispose(&v32, 8);
      }
    }
    char v17 = 1;
    if ((a5 & 1) == 0) {
      goto LABEL_20;
    }
  }
  if (*(void *)a6 != 3)
  {
    if ((v17 & 1) == 0) {
      uint64_t v16 = (void *)[a1 valueForKey:a2];
    }
    uint64_t v27 = [v16 objectsAtIndexes:v12];
    goto LABEL_24;
  }
LABEL_20:
  uint64_t v27 = 0;
LABEL_24:
  __n128 result = (__n128)a6[1];
  *(_OWORD *)a7 = *a6;
  *(__n128 *)(a7 + 16) = result;
  uint64_t v28 = *((void *)a6 + 4);
  *(void *)(a7 + 24) = v12;
  *(void *)(a7 + 32) = v28;
  *(void *)(a7 + 16) = v27;
  return result;
}

void sub_1817E1B60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

char *protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, double a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance URLComponents.CodingKeys()
{
  return *v0;
}

uint64_t destructiveInjectEnumTag for _FTSSequence.Iterator.State(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t type metadata instantiation function for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

xpc_object_t _NSXPCSerializationCreateWriteData(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8224);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 8224) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 8232);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 8232) = 0;
  }
  BOOL v4 = *(const void **)(a1 + 8240);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 8240) = 0;
  }
  int v5 = *(const void **)(a1 + 8216);
  if (*(unsigned char *)(a1 + 8248))
  {
    uint64_t v6 = dispatch_data_create(v5, *(void *)(a1 + 8208), 0, (dispatch_block_t)*MEMORY[0x1E4F14408]);
    xpc_object_t v7 = xpc_data_create_with_dispatch_data(v6);
    dispatch_release(v6);
  }
  else
  {
    xpc_object_t v7 = xpc_data_create(v5, *(void *)(a1 + 8200));
    if (!*(unsigned char *)(a1 + 8249)) {
      free(*(void **)(a1 + 8216));
    }
  }
  return v7;
}

void *_NSXPCSerializationAddInvocationWithOnlyObjectArgumentsArray(SEL *a1, uint64_t a2, unsigned char *a3, uint64_t *a4)
{
  _NSXPCSerializationStartArrayWrite(a4);
  for (; a2; --a2)
  {
    if (objc_opt_isKindOfClass()) {
      _NSXPCSerializationAddNull((uint64_t)a4);
    }
    else {
      _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, "@", a1);
    }
    ++a1;
  }

  return _NSXPCSerializationEndArrayWrite(a4);
}

void _NSXPCSerializationAddNull(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = -32;
}

void _NSXPCSerializationAddNumber(uint64_t a1, CFNumberRef number)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if ((CFNumberRef)*MEMORY[0x1E4F1CFD0] == number)
  {
    int v4 = 1;
  }
  else
  {
    if ((CFNumberRef)*MEMORY[0x1E4F1CFC8] != number)
    {
      if (CFNumberIsFloatType(number))
      {
        if (CFNumberGetByteSize(number) > 4)
        {
          double valuePtr = 0.0;
          CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr);
          _NSXPCSerializationAddDouble(a1, valuePtr);
        }
        else
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
          _NSXPCSerializationAddFloat(a1, *(float *)&valuePtr);
        }
      }
      else if (_CFNumberGetType2() == 17)
      {
        double valuePtr = 0.0;
        uint64_t v6 = 0;
        CFNumberGetValue(number, kCFNumberMaxType|kCFNumberSInt8Type, &valuePtr);
        _NSXPCSerializationAddUnsignedInteger(a1, v6);
      }
      else
      {
        double valuePtr = 0.0;
        CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
        _NSXPCSerializationAddInteger(a1, *(unint64_t *)&valuePtr);
      }
      return;
    }
    int v4 = 0;
  }

  _NSXPCSerializationAddBool(a1, v4);
}

void _NSXPCSerializationAddDouble(uint64_t a1, double a2)
{
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = 35;
  _reserveSpace(a1, 8);
  *(double *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)) = a2;
  *(void *)(a1 + 8200) += 8;
}

void *_NSXPCSerializationAddInvocationArgumentsArray(void *a1, void *a2, unsigned char *a3, uint64_t *a4, int a5)
{
  LODWORD(v5) = a5;
  v19[1] = *(SEL **)MEMORY[0x1E4F143B8];
  int v10 = [a2 numberOfArguments];
  _NSXPCSerializationStartArrayWrite(a4);
  if (v10 > (int)v5)
  {
    uint64_t v11 = v10;
    if (v10 > (unint64_t)(int)v5)
    {
      uint64_t v5 = (int)v5;
      while (1)
      {
        id v12 = (_WORD *)[a2 _argInfo:v5];
        uint64_t v13 = v12;
        __int16 v14 = v12[17];
        if ((v14 & 0x80) != 0)
        {
          uint64_t v13 = *(unsigned char **)v12;
          __int16 v14 = *(_WORD *)(*(void *)v12 + 34);
        }
        if (v14 < 0) {
          break;
        }
        if ((v14 & 0x1000) != 0)
        {
          v19[0] = 0;
          [a1 getArgument:v19 atIndex:v5];
          if (!v19[0]) {
            break;
          }
          _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, (unsigned char *)(*(void *)v13 + 37), v19[0]);
        }
        else
        {
          double v15 = MEMORY[0x1F4188790](v12);
          char v17 = (SEL *)((char *)v19 - ((v16 + 15) & 0x1FFFFFFF0));
          objc_msgSend(a1, "getArgument:atIndex:", v17, v5, v15);
          _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, v13 + 37, v17);
        }
LABEL_12:
        if (v11 == ++v5) {
          return _NSXPCSerializationEndArrayWrite(a4);
        }
      }
      _NSXPCSerializationAddNull((uint64_t)a4);
      goto LABEL_12;
    }
  }
  return _NSXPCSerializationEndArrayWrite(a4);
}

uint64_t _NSXPCSerializationStartRead(void *a1, void *a2, uint64_t a3)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  data = xpc_dictionary_get_data(a1, "root", v9);
  size_t v6 = v9[0];
  if (data) {
    BOOL v7 = (int64_t)v9[0] < 9;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  *a2 = data;
  a2[1] = v6;
  if (*data != 0x37317473696C7062) {
    return 0;
  }
  a2[2] = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
  *(_DWORD *)(a3 + 8) = 255;
  *(void *)a3 = 8;
  *(_DWORD *)(a3 + 8) = *(unsigned char *)(*a2 + 8) & 0xF0;
  return 1;
}

void sub_1817E30DC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1817E30F4(_Unwind_Exception *a1)
{
}

void sub_1817E31D0(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1817E31EC(_Unwind_Exception *a1)
{
}

void sub_1817E384C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1817E3878(_Unwind_Exception *a1)
{
}

void sub_1817E3884(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1817E3890);
}

BOOL isMethodFromNSObjectProtocol(Protocol *a1, const char *a2, BOOL a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (&unk_1ECABBAE8 != (_UNKNOWN *)a1)
  {
    outCFIndex Count = 0;
    size_t v6 = protocol_copyProtocolList(a1, &outCount);
    if (v6)
    {
      unint64_t v7 = outCount;
      if (!outCount)
      {
LABEL_13:
        free(v6);
        return 0;
      }
      if (*v6 != (Protocol *)&unk_1ECABBAE8)
      {
        uint64_t v8 = 1;
        while (outCount != v8)
        {
          uint64_t v9 = v6[v8++];
          if (v9 == (Protocol *)&unk_1ECABBAE8)
          {
            unint64_t v10 = v8 - 1;
            free(v6);
            if (v10 < v7) {
              goto LABEL_15;
            }
            return 0;
          }
        }
        goto LABEL_13;
      }
      free(v6);
LABEL_15:
      if (!containsMethod(a1, a2, a3))
      {
        outCFIndex Count = 0;
        id v12 = protocol_copyProtocolList(a1, &outCount);
        if (v12)
        {
          uint64_t v13 = v12;
          if (outCount)
          {
            for (unint64_t i = 0; i < outCount; ++i)
            {
              uint64_t v15 = isMethodFromNSObjectProtocol(v13[i], a2, a3);
              if (v15) {
                break;
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          free(v13);
          return v15;
        }
      }
    }
    return 0;
  }

  return containsMethod(a1, a2, a3);
}

void setProtocolMetadataWithSignature(const char *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  if (qword_1EB1EDF30 != -1) {
    dispatch_once(&qword_1EB1EDF30, &__block_literal_global_235_0);
  }
  if (a5) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 2;
  }
  unint64_t v11 = [a3 numberOfArguments];
  if (v11 < v10)
  {
    if (a5) {
      uint64_t v26 = @"reply block of method";
    }
    else {
      uint64_t v26 = @"method";
    }
    uint64_t v25 = +[NSString stringWithFormat:@"NSXPCInterface: Too few arguments to %@ (%s / %s)", v26, a2, sel_getName(a1)];
LABEL_44:
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v25 userInfo:0]);
  }
  unint64_t v12 = v11;
  if ((a5 & 1) == 0)
  {
    uint64_t v13 = (_WORD *)[a3 _argInfo:-1];
    __int16 v14 = v13[17];
    if ((v14 & 0x80) != 0) {
      __int16 v14 = *(_WORD *)(*(void *)v13 + 34);
    }
    if ((v14 & 0x2000) != 0) {
      *(void *)(a4 + 32) = [a3 _classForObjectAtArgumentIndex:-1];
    }
  }
  id v28 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v10 < v12)
  {
    char v15 = 0;
    while (1)
    {
      uint64_t v16 = (_WORD *)[a3 _argInfo:v10];
      __int16 v17 = v16[17];
      if ((v17 & 0x80) != 0) {
        __int16 v17 = *(_WORD *)(*(void *)v16 + 34);
      }
      if ((v17 & 0x2000) == 0) {
        goto LABEL_26;
      }
      if (v17 < 0) {
        break;
      }
      uint64_t v18 = [a3 _classForObjectAtArgumentIndex:v10];
      if (!v18)
      {
        if ([a3 _protocolsForObjectAtArgumentIndex:v10]) {
          goto LABEL_26;
        }
LABEL_30:
        uint64_t v21 = qword_1EB1EDF38;
        goto LABEL_27;
      }
      uint64_t v19 = v18;
      if ([(id)qword_1EB1EDF40 containsObject:v18]) {
        goto LABEL_30;
      }
      uint64_t v20 = v28;
      uint64_t v21 = v19;
LABEL_28:
      [v20 addObject:v21];
      if (v12 == ++v10) {
        goto LABEL_31;
      }
    }
    if (a5)
    {
      uint64_t v25 = +[NSString stringWithFormat:@"NSXPCInterface: Blocks as arguments to the reply block of method (%s / %s) are not allowed", a2, sel_getName(a1), v27];
      goto LABEL_44;
    }
    if (v15)
    {
      uint64_t v25 = +[NSString stringWithFormat:@"NSXPCInterface: Only one reply block is allowed per selector (%s / %s)", a2, sel_getName(a1), v27];
      goto LABEL_44;
    }
    uint64_t v22 = [a3 _signatureForBlockAtArgumentIndex:v10];
    if (!v22)
    {
      uint64_t v25 = +[NSString stringWithFormat:@"NSXPCInterface: Unable to get block signature from Protocol data (%s / %s). Use of clang is required for NSXPCInterface.", a2, sel_getName(a1), v27];
      goto LABEL_44;
    }
    uint64_t v23 = (void *)v22;
    *(_DWORD *)(a4 + 40) = v10;

    *(void *)a4 = v23;
    char v15 = 1;
    setProtocolMetadataWithSignature(a1, a2, v23, a4, 1);
LABEL_26:
    uint64_t v21 = [MEMORY[0x1E4F1CAD0] set];
LABEL_27:
    uint64_t v20 = v28;
    goto LABEL_28;
  }
LABEL_31:
  if (a5) {
    uint64_t v24 = 8;
  }
  else {
    uint64_t v24 = 16;
  }

  *(void *)(a4 + v24) = [v28 copy];
}

BOOL selectorInProtocol(SEL aSel, Protocol *p)
{
  SEL name = protocol_getMethodDescription(p, aSel, 1, 1).name;
  if (!name) {
    SEL name = protocol_getMethodDescription(p, aSel, 0, 1).name;
  }
  return name != 0;
}

BOOL containsMethod(Protocol *a1, const char *a2, BOOL isRequiredMethod)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  outCFIndex Count = 0;
  int v4 = protocol_copyMethodDescriptionList(a1, isRequiredMethod, 1, &outCount);
  if (!v4) {
    return 0;
  }
  if (outCount)
  {
    if (v4->name == a2)
    {
      BOOL v9 = 1;
    }
    else
    {
      uint64_t v5 = v4 + 1;
      uint64_t v6 = 1;
      do
      {
        unint64_t v7 = v6;
        if (outCount == v6) {
          break;
        }
        SEL name = v5->name;
        ++v5;
        ++v6;
      }
      while (name != a2);
      BOOL v9 = v7 < outCount;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  free(v4);
  return v9;
}

uint64_t _NSXPCSerializationDecodeInvocationArgumentArray(void *a1, void *a2, void *a3, uint64_t *a4, void *a5, void *a6)
{
  uint64_t v36 = a3;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = [a2 numberOfArguments];
  uint64_t result = [a2 _argInfo:0];
  if (*(__int16 *)(result + 34) < 0) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = 2;
  }
  uint64_t v35 = v13;
  if ((int)v13 < (int)v11)
  {
    uint64_t v14 = *a5;
    unint64_t v15 = *a5 + 9;
    uint64_t v16 = *a5 >= 0xFFFFFFFFFFFFFFF7;
    uint64_t v17 = v16 << 63 >> 63;
    if (v17 != v16 || v17 < 0 || a4[1] <= v15) {
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find array of NSInvocation arguments but there were no entries" userInfo:0]);
    }
    uint64_t v34 = a5;
    unint64_t v18 = *(void *)(v14 + *a4 + 1);
    unint64_t v38 = v15;
    unint64_t v39 = v18;
    uint64_t v19 = v11;
    if (v11 > (unint64_t)v35)
    {
      uint64_t v20 = v35;
      do
      {
        if (v15 > v39 || v15 >= a4[1]) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find entry in array of NSInvocation arguments but there were no entries" userInfo:0]);
        }
        char v21 = *(unsigned char *)(*a4 + v15);
        unint64_t v22 = [a2 _argInfo:v20];
        unint64_t v23 = v22;
        if ((*(_WORD *)(v22 + 34) & 0x80) != 0) {
          unint64_t v23 = *(void *)v22;
        }
        if (a6 && (unint64_t v22 = [a6 count], v22 > v20 - v35))
        {
          unint64_t v22 = objc_msgSend(a6, "objectAtIndex:");
          uint64_t v24 = v22;
        }
        else
        {
          uint64_t v24 = 0;
        }
        if ((*(_WORD *)(v23 + 34) & 0x1000) != 0)
        {
          if ((v21 & 0xF0) == 0xE0)
          {
            [a1 setArgument:&_NSXPCSerializationDecodeInvocationArgumentArray_argument atIndex:v20];
          }
          else
          {
            uint64_t v37 = 0;
            unint64_t v27 = v23;
            do
            {
              unint64_t v28 = v27;
              if ((*(_WORD *)(v27 + 34) & 0x1000) == 0) {
                break;
              }
              unint64_t v27 = *(void *)v27;
            }
            while (*(void *)v28);
            unint64_t v29 = *(unsigned int *)(v28 + 16);
            unint64_t v30 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:v29];
            uint64_t v37 = (unsigned char *)[v30 mutableBytes];
            [a1 _addAttachedObject:v30];
            _NSXPCSerializationDecodeTypedObjCValuesFromArray(v36, a4, (unsigned char *)(*(void *)v23 + 37), v37, v29, 0, (uint64_t)v34, &v38, (uint64_t)a1, v24);
            [a1 setArgument:&v37 atIndex:v20];
          }
        }
        else
        {
          MEMORY[0x1F4188790](v22);
          uint64_t v26 = (char *)&v33 - ((v25 + 15) & 0x1FFFFFFF0);
          _NSXPCSerializationDecodeTypedObjCValuesFromArray(v36, a4, (unsigned char *)(v23 + 37), v26, v25, 0, (uint64_t)v34, &v38, (uint64_t)a1, v24);
          [a1 setArgument:v26 atIndex:v20];
        }
        uint64_t result = _getLastByteOfValueIncludingMarker(a4, v38, &v38);
        unint64_t v15 = v38 + 1;
        uint64_t v31 = v38 == -1;
        uint64_t v32 = v31 << 63 >> 63;
        ++v38;
        if (v32 != v31 || v32 < 0) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Overflow of array data" userInfo:0]);
        }
        ++v20;
      }
      while (v20 != v19);
    }
  }
  return result;
}

void sub_1817E4454(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Exception while decoding argument %ld (#%ld of invocation):\n%@\nException: %@", v3 - *(void *)(v4 - 128), v3, objc_msgSend(v2, "debugDescription"), objc_msgSend(objc_begin_catch(exception_object), "debugDescription")), 0 reason userInfo];
    objc_exception_throw(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1817E44FC()
{
}

uint64_t _NSXPCSerializationDecodeTypedObjCValuesFromArray(void *a1, uint64_t *a2, unsigned char *a3, unsigned char *a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)_xpc_skipAttributesOfType(a3);
  int v18 = *(char *)result;
  if (v18 > 90)
  {
    switch(*(unsigned char *)result)
    {
      case 'c':
        uint64_t v53 = 0;
        unint64_t v21 = *a8;
        if (*a8 > a8[1] || v21 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v21) & 0xF0;
        if (!a5) {
          goto LABEL_104;
        }
        uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) charValue];
LABEL_59:
        *a4 = result;
        return result;
      case 'd':
        uint64_t v53 = 0;
        unint64_t v35 = *a8;
        if (*a8 > a8[1] || v35 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v35) & 0xF0;
        if (a5 <= 7) {
          goto LABEL_104;
        }
        uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) doubleValue];
        *(void *)a4 = v36;
        return result;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_108;
      case 'f':
        uint64_t v53 = 0;
        unint64_t v37 = *a8;
        if (*a8 > a8[1] || v37 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v37) & 0xF0;
        if (a5 <= 3) {
          goto LABEL_104;
        }
        uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) floatValue];
        *(_DWORD *)a4 = v38;
        return result;
      case 'i':
        uint64_t v53 = 0;
        unint64_t v39 = *a8;
        if (*a8 > a8[1] || v39 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v39) & 0xF0;
        if (a5 <= 3) {
          goto LABEL_104;
        }
        uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) intValue];
        goto LABEL_89;
      case 'l':
        uint64_t v53 = 0;
        unint64_t v40 = *a8;
        if (*a8 > a8[1] || v40 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v40) & 0xF0;
        if (a5 <= 7) {
          goto LABEL_104;
        }
        uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) longValue];
        goto LABEL_98;
      case 'q':
        uint64_t v53 = 0;
        unint64_t v41 = *a8;
        if (*a8 > a8[1] || v41 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v41) & 0xF0;
        if (a5 <= 7) {
          goto LABEL_104;
        }
        uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) longLongValue];
        goto LABEL_98;
      case 's':
        uint64_t v53 = 0;
        unint64_t v42 = *a8;
        if (*a8 > a8[1] || v42 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v42) & 0xF0;
        if (a5 <= 1) {
          goto LABEL_104;
        }
        uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) shortValue];
        goto LABEL_84;
      default:
        if (v18 != 91 && v18 != 123) {
          goto LABEL_108;
        }
        return _xpc_walkDataStructure((int)a1, 0, (int)a2, (char *)result, (int)a3, (int)a4, a5, 0, a9, a10, a7, (uint64_t)a8);
    }
  }
  if (v18 > 72)
  {
    if (v18 > 80)
    {
      if (v18 == 81)
      {
        uint64_t v53 = 0;
        unint64_t v44 = *a8;
        if (*a8 <= a8[1] && v44 < a2[1])
        {
          unint64_t v52 = *a8;
          LODWORD(v53) = *(unsigned char *)(*a2 + v44) & 0xF0;
          if (a5 > 7)
          {
            uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) unsignedLongLongValue];
            goto LABEL_98;
          }
          goto LABEL_104;
        }
      }
      else
      {
        if (v18 != 83) {
          goto LABEL_108;
        }
        uint64_t v53 = 0;
        unint64_t v30 = *a8;
        if (*a8 <= a8[1] && v30 < a2[1])
        {
          unint64_t v52 = *a8;
          LODWORD(v53) = *(unsigned char *)(*a2 + v30) & 0xF0;
          if (a5 > 1)
          {
            uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) unsignedShortValue];
LABEL_84:
            *(_WORD *)a4 = result;
            return result;
          }
          goto LABEL_104;
        }
      }
    }
    else if (v18 == 73)
    {
      uint64_t v53 = 0;
      unint64_t v43 = *a8;
      if (*a8 <= a8[1] && v43 < a2[1])
      {
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v43) & 0xF0;
        if (a5 > 3)
        {
          uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) unsignedIntValue];
LABEL_89:
          *(_DWORD *)a4 = result;
          return result;
        }
        goto LABEL_104;
      }
    }
    else
    {
      if (v18 != 76)
      {
LABEL_108:
        uint64_t v51 = +[NSString stringWithFormat:@"decodeDataAt:ofObjCType: undecodable type (%s)", a3];
        uint64_t v49 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v50 = (__CFString *)*MEMORY[0x1E4F1C3A8];
        goto LABEL_105;
      }
      uint64_t v53 = 0;
      unint64_t v22 = *a8;
      if (*a8 <= a8[1] && v22 < a2[1])
      {
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v22) & 0xF0;
        if (a5 > 7)
        {
          uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) unsignedLongValue];
          goto LABEL_98;
        }
        goto LABEL_104;
      }
    }
LABEL_103:
    uint64_t v49 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v50 = @"NSInvalidUnarchiveOperationException";
    uint64_t v51 = @"Expected to find entry in array of NSInvocation arguments but there were no entries";
    goto LABEL_105;
  }
  switch(*(unsigned char *)result)
  {
    case ':':
      uint64_t v53 = 0;
      unint64_t v19 = *a8;
      if (*a8 <= a8[1] && v19 < a2[1])
      {
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v19) & 0xF0;
        if (a5 > 7)
        {
          uint64_t v20 = (const char *)_NSXPCSerializationASCIIStringForObject(a2, &v52);
          uint64_t result = (uint64_t)sel_registerName(v20);
LABEL_98:
          *(void *)a4 = result;
          return result;
        }
        goto LABEL_104;
      }
      uint64_t v49 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v50 = @"NSInvalidUnarchiveOperationException";
      uint64_t v51 = @"Expected to find SEL entry in array of NSInvocation arguments but there were no entries";
      goto LABEL_105;
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case 'A':
      goto LABEL_108;
    case '@':
      uint64_t v53 = 0;
      unint64_t v31 = *a8;
      if (*a8 <= a8[1] && v31 < a2[1])
      {
        unint64_t v52 = *a8;
        LODWORD(v53) = *(unsigned char *)(*a2 + v31) & 0xF0;
        if (a5 > 7)
        {
          uint64_t v32 = (void *)[a1 _decodeObjectOfClasses:a10 atObject:&v52];
          unint64_t v29 = v32;
          *(void *)a4 = v32;
          if (a9)
          {
            unint64_t v28 = (void *)a9;
            return [v28 _addAttachedObject:v29];
          }
          return (uint64_t)v32;
        }
LABEL_104:
        uint64_t v49 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v50 = @"NSInvalidUnarchiveOperationException";
        uint64_t v51 = @"Size of available buffer is not big enough to hold the decoded data";
        goto LABEL_105;
      }
      uint64_t v49 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v50 = @"NSInvalidUnarchiveOperationException";
      uint64_t v51 = @"Expected to find entry in array for an object but there was no entry";
      goto LABEL_105;
    case 'B':
      unint64_t v33 = *a8;
      if (*a8 > a8[1] || v33 >= a2[1]) {
        goto LABEL_103;
      }
      if (!a5) {
        goto LABEL_104;
      }
      if (v33) {
        LOBYTE(v33) = *(unsigned __int8 *)(*a2 + v33) == 176;
      }
      *a4 = v33;
      return result;
    case 'C':
      uint64_t v53 = 0;
      unint64_t v34 = *a8;
      if (*a8 > a8[1] || v34 >= a2[1]) {
        goto LABEL_103;
      }
      unint64_t v52 = *a8;
      LODWORD(v53) = *(unsigned char *)(*a2 + v34) & 0xF0;
      if (!a5) {
        goto LABEL_104;
      }
      uint64_t result = [(NSNumber *)_NSXPCSerializationNumberForObject(a2, &v52) unsignedCharValue];
      goto LABEL_59;
    default:
      if (v18 == 35)
      {
        uint64_t v53 = 0;
        unint64_t v45 = *a8;
        if (*a8 <= a8[1] && v45 < a2[1])
        {
          unint64_t v52 = *a8;
          LODWORD(v53) = *(unsigned char *)(*a2 + v45) & 0xF0;
          uint64_t v46 = (const char *)_NSXPCSerializationASCIIStringForObject(a2, &v52);
          if (a5 > 7)
          {
            uint64_t result = (uint64_t)objc_lookUpClass(v46);
            goto LABEL_98;
          }
          goto LABEL_104;
        }
        goto LABEL_103;
      }
      if (v18 != 42) {
        goto LABEL_108;
      }
      uint64_t v53 = 0;
      unint64_t v23 = *a8;
      if (*a8 > a8[1] || v23 >= a2[1]) {
        goto LABEL_103;
      }
      if (a5 <= 7) {
        goto LABEL_104;
      }
      if (v23 && *(unsigned __int8 *)(*a2 + v23) == 176)
      {
LABEL_99:
        *(void *)a4 = 0;
        return result;
      }
      _getLastByteOfValueIncludingMarker(a2, v23, a8);
      unint64_t v24 = *a8 + 1;
      uint64_t v25 = *a8 == -1;
      uint64_t v26 = v25 << 63 >> 63;
      *a8 = v24;
      if (v26 != v25 || v26 < 0)
      {
        uint64_t v49 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v50 = @"NSInvalidUnarchiveOperationException";
        uint64_t v51 = @"Unexpected EoF while decoding pointer";
LABEL_105:
        objc_exception_throw((id)[v49 exceptionWithName:v50 reason:v51 userInfo:0]);
      }
      if (a8[1] < v24 || a2[1] <= v24)
      {
        uint64_t v49 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v50 = @"NSInvalidUnarchiveOperationException";
        uint64_t v51 = @"Missing data after non-null entry";
        goto LABEL_105;
      }
      unint64_t v52 = v24;
      LODWORD(v53) = *(unsigned char *)(*a2 + v24) & 0xF0;
      uint64_t result = (uint64_t)_NSXPCSerializationDataForObject(a2, &v52);
      if (!result) {
        goto LABEL_99;
      }
      unint64_t v27 = (void *)result;
      uint64_t result = [(id)result length];
      if (!result) {
        goto LABEL_99;
      }
      if (a9)
      {
        *(void *)a4 = [v27 bytes];
        unint64_t v28 = (void *)a9;
        unint64_t v29 = v27;
        return [v28 _addAttachedObject:v29];
      }
      uint64_t v47 = [v27 length];
      uint64_t v48 = malloc_type_malloc(v47 + 1, 0x3111E7A1uLL);
      uint64_t result = [v27 getBytes:v48 length:v47];
      *(void *)a4 = v48;
      v48[v47] = 0;
      return result;
  }
}

void _NSXPCSerializationAddTypedObjCValuesToArray(unsigned char *a1, uint64_t a2, unsigned char *a3, SEL *a4)
{
  uint64_t v8 = _xpc_skipAttributesOfType(a3);
  int v9 = *v8;
  if (v9 > 90)
  {
    switch(*v8)
    {
      case 'c':
        unint64_t v11 = *(char *)a4;
        goto LABEL_24;
      case 'd':
        SEL v17 = *a4;
        _NSXPCSerializationAddDouble(a2, *(double *)&v17);
        return;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_49;
      case 'f':
        float v18 = *(float *)a4;
        _NSXPCSerializationAddFloat(a2, v18);
        return;
      case 'i':
        unint64_t v11 = *(int *)a4;
        goto LABEL_24;
      case 'l':
      case 'q':
        goto LABEL_23;
      case 's':
        unint64_t v11 = *(__int16 *)a4;
        goto LABEL_24;
      default:
        if (v9 != 91 && v9 != 123) {
          goto LABEL_49;
        }
        _xpc_walkDataStructure(a1, a2, 0, v8, (uint64_t)a3, (uint64_t)a4, 0xFFFFFFFFLL, 1, 0, 0, 0, 0);
        break;
    }
    return;
  }
  if (v9 > 72)
  {
    if (v9 > 80)
    {
      if (v9 != 81)
      {
        if (v9 != 83) {
          goto LABEL_49;
        }
        unint64_t v11 = *(unsigned __int16 *)a4;
LABEL_24:
        _NSXPCSerializationAddInteger(a2, v11);
        return;
      }
    }
    else
    {
      if (v9 == 73)
      {
        unint64_t v11 = *(unsigned int *)a4;
        goto LABEL_24;
      }
      if (v9 != 76) {
        goto LABEL_49;
      }
    }
LABEL_23:
    unint64_t v11 = (unint64_t)*a4;
    goto LABEL_24;
  }
  switch(*v8)
  {
    case ':':
      SEL Name = sel_getName(*a4);
      goto LABEL_42;
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case 'A':
      goto LABEL_49;
    case '@':
      SEL v14 = *a4;
      [a1 _encodeUnkeyedObject:v14];
      return;
    case 'B':
      int v15 = *(unsigned __int8 *)a4;
      uint64_t v16 = a2;
      goto LABEL_46;
    case 'C':
      unint64_t v11 = *(unsigned __int8 *)a4;
      goto LABEL_24;
    default:
      if (v9 != 35)
      {
        if (v9 == 42)
        {
          uint64_t v12 = *a4;
          if (v12)
          {
            _NSXPCSerializationAddBool(a2, 0);
            unint64_t v13 = strlen(v12) + 1;
            _NSXPCSerializationAddRawData(a2, v12, v13);
          }
          else
          {
            uint64_t v16 = a2;
            int v15 = 1;
LABEL_46:
            _NSXPCSerializationAddBool(v16, v15);
          }
          return;
        }
LABEL_49:
        unint64_t v21 = +[NSString stringWithFormat:@"encodeDataAt:ofObjCType: unencodable type (%s)", a3];
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v21 userInfo:0]);
      }
      SEL Name = class_getName((Class)*a4);
LABEL_42:
      unint64_t v19 = (char *)Name;
      size_t v20 = strlen(Name);
      _NSXPCSerializationAddASCIIString(a2, v19, v20, 1);
      break;
  }
}

unsigned char *_xpc_skipAttributesOfType(unsigned char *result)
{
  while (1)
  {
    int v1 = (char)*result;
    BOOL v2 = (v1 - 78) > 0x24 || ((1 << (*result - 78)) & 0x1300000113) == 0;
    if (v2 && v1 != 43) {
      break;
    }
    ++result;
  }
  return result;
}

NSString *_decodeObjectAfterSettingAllowListForKey(uint64_t a1, __CFString *a2)
{
  _OWORD v8[2] = *MEMORY[0x1E4F143B8];
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v4 = (void *)(a1 + 24);
  uint64_t v5 = *(void **)(a1 + 56 + 8 * *(unsigned int *)(a1 + 2260));
  if (a2)
  {
    if (_NSXPCSerializationCreateObjectInDictionaryForKey(v4, v5, a2, (uint64_t)v8)) {
      return _decodeObject_0(a1, a2, (uint64_t)v8);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v7 + 1;
    if (_NSXPCSerializationCreateObjectInDictionaryForGenericKey(v4, v5, v7, (uint64_t)v8)) {
      return _decodeObject_0(a1, a2, (uint64_t)v8);
    }
  }
  return 0;
}

uint64_t _setAllowedClass(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 4440);
    if (v2 >= 271) {
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectOfClass:forKey: too many nested collections" userInfo:0]);
    }
    uint64_t v3 = v2 + 1;
    *(void *)(result + 4440) = v3;
    *(void *)(result + 2264 + 8 * v3) = a2;
  }
  return result;
}

void *_setAllowedClasses(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[555];
    if (v3 >= 271) {
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectOfClass:forKey: too many nested collections" userInfo:0]);
    }
    result[555] = v3 + 1;
    uint64_t result = a2;
    v2[v2[555] + 283] = result;
  }
  return result;
}

void _resetAllowedClasses(uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    *(void *)(a1 + 2264 + 8 * (*(void *)(a1 + 4440))--) = 0;
  }
}

void setProtocolMetdataWithMethods(Protocol *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a4;
    while (1)
    {
      uint64_t v8 = (void *)MEMORY[0x185308110]();
      int v9 = *(const char **)(a3 + 16 * v6);
      uint64_t MethodTypeEncoding = _protocol_getMethodTypeEncoding();
      if (!MethodTypeEncoding) {
        break;
      }
      uint64_t v11 = [MEMORY[0x1E4F1CA38] signatureWithObjCTypes:MethodTypeEncoding];
      if (!v11)
      {
        SEL Name = protocol_getName(a1);
        uint64_t v26 = +[NSString stringWithFormat:@"NSXPCInterface: Unable to get method signature from Protocol data (%s / %s)", Name, sel_getName(v9)];
LABEL_31:
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v26 userInfo:0]);
      }
      uint64_t v12 = (void *)v11;
      if (*(void *)a2)
      {
        Superclass = class_getSuperclass(*(Class *)a2);
        if (Superclass)
        {
          if (!class_getInstanceMethod(Superclass, v9))
          {
            uint64_t v14 = [v12 _argInfo:-1];
            if ((*(_WORD *)(v14 + 34) & 0x80) != 0) {
              uint64_t v14 = *(void *)v14;
            }
            if (*(unsigned char *)(v14 + 36) == 118)
            {
              uint64_t v15 = [v12 numberOfArguments];
              if (v15 == 2)
              {
                uint64_t v16 = *(int *)(a2 + 8);
                int v17 = v16 + 1;
                *(_DWORD *)(a2 + 8) = v16 + 1;
                float v18 = (void *)(a2 + 8 * v16);
                unint64_t v18[2] = v9;
                v18[130] = _NSXPCDistantObjectSimpleMessageSend0;
                unint64_t v19 = "v@:";
LABEL_13:
                v18[258] = v19;
                if (v17 == 128) {
                  setProtocolContextFlush(a2);
                }
              }
              else
              {
                uint64_t v20 = v15;
                if ((unint64_t)(v15 - 3) <= 3)
                {
                  uint64_t v21 = 2;
                  while ((*(_WORD *)([v12 _argInfo:v21] + 34) & 0x2000) != 0)
                  {
                    if (v20 == ++v21)
                    {
                      if (v20 == 5)
                      {
                        uint64_t v23 = *(int *)(a2 + 8);
                        int v17 = v23 + 1;
                        *(_DWORD *)(a2 + 8) = v23 + 1;
                        float v18 = (void *)(a2 + 8 * v23);
                        unint64_t v18[2] = v9;
                        v18[130] = _NSXPCDistantObjectSimpleMessageSend3;
                        unint64_t v19 = "v@:@@@";
                      }
                      else if (v20 == 4)
                      {
                        uint64_t v24 = *(int *)(a2 + 8);
                        int v17 = v24 + 1;
                        *(_DWORD *)(a2 + 8) = v24 + 1;
                        float v18 = (void *)(a2 + 8 * v24);
                        unint64_t v18[2] = v9;
                        v18[130] = _NSXPCDistantObjectSimpleMessageSend2;
                        unint64_t v19 = "v@:@@";
                      }
                      else
                      {
                        uint64_t v22 = *(int *)(a2 + 8);
                        int v17 = v22 + 1;
                        *(_DWORD *)(a2 + 8) = v22 + 1;
                        float v18 = (void *)(a2 + 8 * v22);
                        unint64_t v18[2] = v9;
                        if (v20 == 3)
                        {
                          v18[130] = _NSXPCDistantObjectSimpleMessageSend1;
                          unint64_t v19 = "v@:@";
                        }
                        else
                        {
                          v18[130] = _NSXPCDistantObjectSimpleMessageSend4;
                          unint64_t v19 = "v@:@@@@";
                        }
                      }
                      goto LABEL_13;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (++v6 == v7) {
        return;
      }
    }
    uint64_t v25 = protocol_getName(a1);
    uint64_t v26 = +[NSString stringWithFormat:@"NSXPCInterface: Unable to get extended method signature from Protocol data (%s / %s). Use of clang is required for NSXPCInterface.", v25, sel_getName(v9)];
    goto LABEL_31;
  }
}

uint64_t _NSXPCSerializationDecodeInvocationObjectOnlyArgumentArray(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v14 = [a3 numberOfArguments];
  uint64_t result = [a3 _argInfo:0];
  if (*(__int16 *)(result + 34) < 0) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = 2;
  }
  if ((int)(v14 - v16) > a2) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Too many objects in signature to decode as object-only" userInfo:0]);
  }
  if ((int)v14 > (int)v16)
  {
    uint64_t v17 = *a6;
    BOOL v18 = __CFADD__(*a6, 9);
    unint64_t v19 = *a6 + 9;
    uint64_t v20 = v18;
    uint64_t v21 = v20 << 63 >> 63;
    if (v21 != v20 || v21 < 0 || a5[1] <= v19) {
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find array of NSInvocation arguments but there were no entries" userInfo:0]);
    }
    unint64_t v22 = *(void *)(v17 + *a5 + 1);
    unint64_t v35 = v19;
    unint64_t v36 = v22;
    uint64_t v23 = v14;
    if (v14 > v16)
    {
      unint64_t v24 = 0;
      uint64_t v25 = v16 - v23;
      do
      {
        if (a7 && [a7 count] > v24) {
          uint64_t v26 = [a7 objectAtIndex:v24];
        }
        else {
          uint64_t v26 = 0;
        }
        unint64_t v27 = (_WORD *)[a3 _argInfo:v16 + v24];
        __int16 v28 = v27[17];
        if ((v28 & 0x80) != 0) {
          __int16 v28 = *(_WORD *)(*(void *)v27 + 34);
        }
        if ((v28 & 0x2000) == 0) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find object in wire signature of object-only decode of NSInvocation arguments" userInfo:0]);
        }
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        if (v19 > v36 || v19 >= a5[1]) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find entry in array of NSInvocation arguments but there were no entries" userInfo:0]);
        }
        LODWORD(v34) = 255;
        unint64_t v33 = v19;
        LODWORD(v34) = *(unsigned char *)(*a5 + v19) & 0xF0;
        unint64_t v29 = (void *)[a4 _decodeObjectOfClasses:v26 atObject:&v33];
        id v30 = v29;
        *(void *)(a1 + 8 * v24) = v29;
        uint64_t result = _getLastByteOfValueIncludingMarker(a5, v19, &v35);
        unint64_t v19 = v35 + 1;
        uint64_t v31 = v35 == -1;
        uint64_t v32 = v31 << 63 >> 63;
        ++v35;
        if (v32 != v31 || v32 < 0) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Overflow of array data" userInfo:0]);
        }
        ++v24;
      }
      while (v25 + v24);
    }
  }
  return result;
}

void sub_1817E5AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = v13 + v12;
  if (a2 == 1)
  {
    id v15 = objc_begin_catch(exception_object);
    if (v14 != v13)
    {
      uint64_t v16 = v14 - v13;
      do
      {

        --v16;
      }
      while (v16);
    }
    [v15 debugDescription];
    uint64_t v17 = +[NSString stringWithFormat:@"Exception while decoding argument %ld (#%ld of invocation):\nException: %@"];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v17 userInfo:0]);
  }
  _Unwind_Resume(exception_object);
}

void sub_1817E5B98()
{
}

void _NSXPCSerializationAddFloat(uint64_t a1, float a2)
{
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = 34;
  _reserveSpace(a1, 4);
  *(float *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)) = a2;
  *(void *)(a1 + 8200) += 4;
}

unsigned char *_xpc_walkDataStructure(unsigned char *result, uint64_t a2, uint64_t *a3, char *typePtr, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  id v15 = result;
  sizep[1] = *MEMORY[0x1E4F143B8];
  NSUInteger alignp = 0;
  sizep[0] = 0;
  int v16 = *typePtr;
  if (v16 == 123)
  {
    unint64_t v27 = typePtr + 1;
    for (unint64_t i = typePtr + 2; ; ++i)
    {
      int v29 = *(i - 1);
      if (v29 > 60)
      {
        if (v29 == 125) {
          goto LABEL_28;
        }
        if (v29 == 61)
        {
          unint64_t v27 = i;
LABEL_28:
          int v30 = *v27;
          if (!*v27)
          {
LABEL_41:
            uint64_t v37 = @"decodeDataAt:ofObjCType:";
            if (a8) {
              uint64_t v37 = @"encodeDataAt:ofObjCType:";
            }
            int v38 = +[NSString stringWithFormat:@"%@ badly formed structure description (%s)", v37, a5];
            goto LABEL_44;
          }
          NSUInteger v31 = 0;
          int v32 = 1;
          while (2)
          {
            if (v30 == 125) {
              return result;
            }
            if (!v30) {
              goto LABEL_41;
            }
            unint64_t v33 = NSGetSizeAndAlignment(v27, sizep, &alignp);
            if (alignp)
            {
              NSUInteger v34 = (v31 + alignp - 1) / alignp * alignp;
              if (a8) {
                goto LABEL_34;
              }
LABEL_36:
              if (!v32)
              {
                _getLastByteOfValueIncludingMarker(a3, *a12, a12);
                uint64_t v35 = *a12 == -1;
                uint64_t v36 = v35 << 63 >> 63;
                ++*a12;
                if (v36 != v35 || v36 < 0)
                {
                  unint64_t v40 = (void *)MEMORY[0x1E4F1CA00];
                  unint64_t v41 = @"NSInvalidUnarchiveOperationException";
                  unint64_t v39 = @"Unexpected EoF while decoding struct";
                  goto LABEL_47;
                }
              }
              uint64_t result = (unsigned char *)_NSXPCSerializationDecodeTypedObjCValuesFromArray(v15, a3, v27, (unsigned char *)(a6 + v34), a7 - v34, 0, a11, a12, a9, a10);
              int v32 = 0;
            }
            else
            {
              NSUInteger v34 = 0;
              if (!a8) {
                goto LABEL_36;
              }
LABEL_34:
              uint64_t result = (unsigned char *)_NSXPCSerializationAddTypedObjCValuesToArray(v15, a2, v27, a6 + v34, 0);
            }
            NSUInteger v31 = sizep[0] + v34;
            int v30 = *(unsigned __int8 *)v33;
            unint64_t v27 = (char *)v33;
            continue;
          }
        }
      }
      else if (!*(i - 1) || v29 == 41)
      {
        goto LABEL_28;
      }
    }
  }
  if (v16 == 91)
  {
    BOOL v18 = typePtr + 1;
    unsigned int v17 = typePtr[1];
    if (v17 - 48 > 9)
    {
      uint64_t result = NSGetSizeAndAlignment(typePtr + 1, sizep, &alignp);
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = v19;
        unsigned int v21 = v17;
        uint64_t v19 = 10 * v19 + v17 - 48;
        unsigned int v22 = *++v18;
        unsigned int v17 = v22;
      }
      while (v22 - 48 < 0xA);
      uint64_t result = NSGetSizeAndAlignment(v18, sizep, &alignp);
      if (v19)
      {
        unint64_t v43 = result;
        uint64_t v23 = 0;
        uint64_t v24 = 10 * v20 + v21 - 48;
        do
        {
          if (a8)
          {
            _NSXPCSerializationAddTypedObjCValuesToArray(v15, a2, v18, a6 + sizep[0] * v23, 0);
          }
          else
          {
            if (v23)
            {
              _getLastByteOfValueIncludingMarker(a3, *a12, a12);
              uint64_t v25 = *a12 == -1;
              uint64_t v26 = v25 << 63 >> 63;
              ++*a12;
              if (v26 != v25 || v26 < 0)
              {
                unint64_t v40 = (void *)MEMORY[0x1E4F1CA00];
                unint64_t v41 = @"NSInvalidUnarchiveOperationException";
                unint64_t v39 = @"Unexpected EoF while decoding array";
LABEL_47:
                objc_exception_throw((id)[v40 exceptionWithName:v41 reason:v39 userInfo:0]);
              }
            }
            _NSXPCSerializationDecodeTypedObjCValuesFromArray(v15, a3, v18, (unsigned char *)(a6 + sizep[0] * v23), a7 - sizep[0] * v23, 0, a11, a12, a9, a10);
          }
          ++v23;
        }
        while (v24 != v23);
        uint64_t result = v43;
      }
    }
    if (*result != 93)
    {
      unint64_t v42 = @"decodeDataAt:ofObjCType:";
      if (a8) {
        unint64_t v42 = @"encodeDataAt:ofObjCType:";
      }
      int v38 = +[NSString stringWithFormat:@"%@ badly formed array description (%s)", v42, a5];
LABEL_44:
      unint64_t v39 = (__CFString *)v38;
      unint64_t v40 = (void *)MEMORY[0x1E4F1CA00];
      unint64_t v41 = (__CFString *)*MEMORY[0x1E4F1C3A8];
      goto LABEL_47;
    }
  }
  return result;
}

void _NSXPCSerializationAddUnsignedInteger(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = -8;
  _reserveSpace(a1, 8);
  *(void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)) = a2;
  *(void *)(a1 + 8200) += 8;
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = range1.location + range1.length;
  if (range1.location + range1.length >= range2.location + range2.length) {
    NSUInteger v3 = range2.location + range2.length;
  }
  else {
    NSUInteger v3 = range1.location + range1.length;
  }
  if (range2.location > range1.location || range1.location >= range2.location + range2.length)
  {
    NSUInteger v4 = v3 - range2.location;
    BOOL v5 = range2.location >= v2;
    if (range2.location < v2) {
      NSUInteger location = range2.location;
    }
    else {
      NSUInteger location = 0;
    }
    if (v5) {
      NSUInteger v4 = 0;
    }
    BOOL v7 = range1.location > range2.location;
    if (range1.location <= range2.location) {
      range1.NSUInteger location = location;
    }
    else {
      range1.NSUInteger location = 0;
    }
    if (v7) {
      range1.length = 0;
    }
    else {
      range1.length = v4;
    }
  }
  else
  {
    range1.length = v3 - range1.location;
  }
  return range1;
}

uint64_t IndexPath.count.getter()
{
  uint64_t result = 0;
  switch(v0[16])
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = *(void *)(*(void *)v0 + 16);
      break;
    case 3:
      return result;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

void *destroy for JSONEncoder.KeyEncodingStrategy(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t dispatch thunk of FormatStyle.format(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (const char **)&selRef_initWithInteger_);
}

uint64_t storeEnumTagSinglePayload for DateComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 280) = 0;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 282) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 282) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t assignWithCopy for URL.AsyncBytes(uint64_t a1, uint64_t a2)
{
  NSUInteger v4 = *(void **)a2;
  long long v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for URL.AsyncBytes(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void protocol witness for Decodable.init(from:) in conformance URL(void *a1@<X0>, void *a2@<X8>)
{
}

void URL.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<URL.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    goto LABEL_3;
  }
  LOBYTE(v24) = 1;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v11 = v10;
  LOBYTE(v23[0]) = 0;
  lazy protocol witness table accessor for type URL and conformance URL();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  unint64_t v27 = v24;
  unsigned int v22 = v25;
  v23[0] = v24;
  v23[1] = v25;
  unint64_t v23[2] = v26;
  unsigned int v21 = v26;
  URL.init(string:relativeTo:)(v9, v11, v23, (uint64_t *)&v24);
  swift_bridgeObjectRelease();
  uint64_t v12 = v24;
  if (!v24)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v17;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.codingPath.getter();
    uint64_t v18 = v20;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA78], v16);
    swift_willThrow();
    outlined consume of URL?(v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return;
  }
  uint64_t v14 = v25;
  uint64_t v13 = v26;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined consume of URL?(v27);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v13;
  swift_retain();
  id v15 = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_release();
  swift_release();
}

void specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *(*a9)(void *__return_ptr, void *, uint64_t)@<X8>, uint64_t a10, uint64_t a11)
{
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
    (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
    (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
    (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
}

{
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t))lazy protocol witness table accessor for type CocoaError and conformance CocoaError, (uint64_t)&type metadata for CocoaError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
    (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
    (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
    (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
}

void specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *(*a9)(void *__return_ptr, void *, uint64_t)@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t (*a14)(void *), uint64_t (*a15)(void *), void *(*a16)(void *__return_ptr, void *, uint64_t), void *(*a17)(void *__return_ptr, void, void), uint64_t (*a18)(void), uint64_t (*a19)(uint64_t, void), uint64_t a20,uint64_t (*a21)(void),uint64_t (*a22)(uint64_t, void))
{
  void *(*v68)(long long *__return_ptr, void *, uint64_t);
  void *v69;
  unint64_t v70;
  Swift::Int v71;
  unint64_t v72;
  void (*v73)(char *, void);
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t (**v79)(uint64_t, uint64_t, uint64_t);
  long long *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  id v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t (**v99)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  void *(*v119)(void *__return_ptr, void *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  Swift::Int v126;
  __int16 v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  void *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t (**v140)(uint64_t, uint64_t, uint64_t);
  long long *v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  id v150;
  id v151;
  void *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  Swift::Int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(void);
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  void *v179;
  void *v180;
  void *v181;
  unint64_t v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t (**v186)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  long long v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  Swift::String v197;
  Swift::String v198;
  unint64_t v199;
  unint64_t v200;
  BOOL v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  void *(*v210)(void *__return_ptr, void *, uint64_t);
  unint64_t v211;
  void *v212;
  unsigned __int16 *v213;
  id v214;
  void *v215;
  id v216;
  unsigned __int16 *v217;
  char v218;
  Swift::Int v219;
  char v220;
  Swift::Int v221;
  uint64_t v222;
  uint64_t (*v223)(void);
  uint64_t (*v224)(void);
  unsigned char *v225;
  unsigned char *v226;
  uint64_t v227;
  id v228;
  id v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t (*v239)(void);
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *(*v244)(void *__return_ptr, void *, uint64_t);
  void *v245;
  uint64_t v246;
  uint64_t v247;
  void v248[3];
  long long v249;
  long long v250;
  long long v251;
  long long v252;
  long long v253;
  long long v254;
  long long v255;
  long long v256;
  _OWORD v257[2];
  uint64_t v258[3];
  long long v259;
  _OWORD v260[5];
  long long v261;
  _OWORD v262[3];
  long long v263;
  uint64_t v264;
  long long v265;
  long long v266;
  long long v267;
  long long v268;
  uint64_t v269;
  char v270;
  long long v271;
  long long v272;
  long long v273;
  __int16 v274;
  unint64_t v275;
  unint64_t v276;
  long long v277;
  uint64_t v278;
  long long v279;
  long long v280;
  long long v281;
  long long v282;
  uint64_t v283;
  char v284;
  long long v285;
  long long v286;
  long long v287;
  __int16 v288;

  uint64_t v25 = a4;
  int64_t v247 = a2;
  if (!a3)
  {
    uint64_t v35 = 0;
LABEL_208:
    unint64_t v231 = a13;
    specialized CocoaError.init<A>(_:path:url:underlying:variant:source:destination:)((uint64_t)a1, a3, v35, v25, &v263, a6, a7, a8, a10, a11, a12);
    *(void *)a9 = v263;
    return;
  }
  v245 = a4;
  unint64_t v246 = a5;
  swift_bridgeObjectRetain();
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v244 = a9;
    uint64_t v36 = a1;
    uint64_t v37 = a7;
    uint64_t v38 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v38 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v38) {
      swift_bridgeObjectRetain();
    }
    BOOL v45 = (specialized BidirectionalCollection.last.getter(a2, a3) & 0x1FF) == 47;
    id v46 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
    uint64_t v47 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v48 = objc_msgSend(v46, sel_initFileURLWithPath_isDirectory_, v47, v45);
    swift_unknownObjectRelease();
    unint64_t v44 = static URL._converted(from:)(v48);

    swift_bridgeObjectRelease();
    uint64_t v35 = 0;
    a7 = v37;
    a1 = v36;
    a9 = v244;
    uint64_t v25 = v245;
    if (!v44) {
      goto LABEL_208;
    }
    goto LABEL_207;
  }
  uint64_t v243 = a7;
  swift_bridgeObjectRetain();
  char v30 = _foundation_swift_url_feature_enabled();
  uint64_t v31 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v32 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v32 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if ((v30 & 1) == 0)
  {
    if (!v32) {
      swift_bridgeObjectRelease();
    }
    v39._uint64_t countAndFlagsBits = 47;
    v39._unint64_t object = (void *)0xE100000000000000;
    Swift::Bool v40 = String.hasSuffix(_:)(v39);
    id v41 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
    uint64_t v42 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v43 = objc_msgSend(v41, sel_initFileURLWithPath_isDirectory_relativeToURL_, v42, v40, 0);
    swift_unknownObjectRelease();
    unint64_t v44 = static URL._converted(from:)(v43);
    swift_bridgeObjectRelease();

    a7 = v243;
    uint64_t v25 = v245;
    goto LABEL_207;
  }
  uint64_t v241 = a6;
  uint64_t v242 = a8;
  if (!v32)
  {
    uint64_t v239 = a1;
    swift_bridgeObjectRelease();
    static URL.currentDirectoryOrNil()(&v277);
    uint64_t v49 = (void *)v277;
    int64_t v263 = v277;
    unint64_t v264 = v278;
    outlined copy of URL?(v277);
    URL.init(string:relativeTo:)(0, 0xE000000000000000, (id *)&v263, (uint64_t *)&v277);
    outlined consume of URL?(v49);
    unint64_t v44 = (void *)v277;
    if (!(void)v277)
    {
      __break(1u);
      goto LABEL_235;
    }
    outlined consume of URL?(v49);
    swift_bridgeObjectRelease();
    uint64_t v25 = v245;
    a8 = v242;
    a7 = v243;
LABEL_206:
    a6 = v241;
    a1 = v239;
LABEL_207:
    uint64_t v35 = v44;
    goto LABEL_208;
  }
  v275 = a2;
  int64_t v276 = a3;
  unint64_t v33 = a1;
  if ((specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x7E)
  {
    unint64_t v237 = 0;
    char v238 = 0;
    uint64_t v34 = 0;
    uint64_t v240 = 1;
  }
  else
  {
    static URL.currentDirectoryOrNil()(&v277);
    uint64_t v240 = 0;
    uint64_t v34 = *((void *)&v277 + 1);
    unint64_t v237 = (void *)v277;
    char v238 = v278;
  }
  __int16 v50 = specialized BidirectionalCollection.last.getter(a2, a3);
  if ((v50 & 0x100) != 0)
  {
    BOOL v51 = 0;
    if ((a3 & 0x2000000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  BOOL v51 = v50 == 47;
  if ((a3 & 0x2000000000000000) != 0) {
LABEL_28:
  }
    uint64_t v31 = HIBYTE(a3) & 0xF;
LABEL_29:
  if (!v31) {
    goto LABEL_38;
  }
  __int16 v52 = specialized BidirectionalCollection.last.getter(v247, a3);
  if ((v52 & 0x100) != 0)
  {
    if (!v51) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v52 != 47 && v51)
  {
LABEL_37:
    v54._uint64_t countAndFlagsBits = 47;
    v54._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v54);
  }
LABEL_38:
  URLComponents.init()((uint64_t)&v263);
  unint64_t v236 = v34;
  a1 = v33;
  if (!v240) {
    goto LABEL_196;
  }
  WORD4(v263) = 0;
  __int16 v55 = specialized Collection.first.getter(1701603686, 0xE400000000000000);
  if ((v55 & 0x100) != 0) {
    goto LABEL_241;
  }
  if (v55 <= 0x40u) {
    goto LABEL_241;
  }
  v277 = xmmword_1821F6510;
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)&v277, 4, 1u, 0))goto LABEL_241; {
  swift_bridgeObjectRelease();
  }
  int64_t v265 = xmmword_1821F6520;
  char v56 = v274;
  LOBYTE(v258[0]) = v270;
  v277 = v263;
  LOBYTE(v278) = v264;
  v279 = xmmword_1821F6520;
  v280 = v266;
  v281 = v267;
  v282 = v268;
  v283 = v269;
  v284 = v270;
  v285 = v271;
  v286 = v272;
  v287 = v273;
  v288 = v274;
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_193;
  }
  uint64_t v59 = URLComponents._URLComponents.encodedHost.getter();
  uint64_t v61 = v59;
  if (!v60)
  {
    BYTE8(v263) = 0;
    BYTE12(v263) = 0;
    unint64_t v274 = 0;
LABEL_95:
    swift_bridgeObjectRelease();
    unsigned __int8 v268 = (unint64_t)v61;
    goto LABEL_193;
  }
  uint64_t v62 = (uint64_t (*)(void))v60;
  uint64_t v63 = HIBYTE(v60) & 0xF;
  uint64_t v64 = v59;
  uint64_t v65 = v59 & 0xFFFFFFFFFFFFLL;
  if ((v60 & 0x2000000000000000) != 0) {
    uint64_t v66 = HIBYTE(v60) & 0xF;
  }
  else {
    uint64_t v66 = v59 & 0xFFFFFFFFFFFFLL;
  }
  if (!v66)
  {
    swift_bridgeObjectRelease();
    uint64_t v76 = 0;
    uint64_t v67 = 0;
    BYTE8(v263) = 0;
    BYTE12(v263) = 0;
    uint64_t v77 = 0xE000000000000000;
    unint64_t v274 = 0;
    goto LABEL_79;
  }
  if ((v56 & 1) == 0)
  {
    if ((v60 & 0x1000000000000000) != 0)
    {
      uint64_t v244 = a9;
      swift_bridgeObjectRetain();
      BOOL v233 = 0;
    }
    else
    {
      if ((v60 & 0x2000000000000000) != 0)
      {
        *(void *)&char v259 = v59;
        *((void *)&v259 + 1) = v60 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&uint64_t v249 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v249 + 1) = 0;
        swift_bridgeObjectRetain_n();
        uint64_t v80 = &v259;
        uint64_t v79 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
        uint64_t v82 = (unsigned __int8 *)&v259;
        uint64_t v81 = v63;
        uint64_t v83 = v63;
      }
      else
      {
        if ((v59 & 0x1000000000000000) != 0)
        {
          uint64_t v78 = (v60 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          uint64_t v78 = _StringObject.sharedUTF8.getter();
          uint64_t v65 = v101;
        }
        *(void *)&char v259 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v259 + 1) = 0;
        swift_bridgeObjectRetain_n();
        uint64_t v79 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
        uint64_t v80 = (long long *)v78;
        uint64_t v81 = v65;
        uint64_t v82 = (unsigned __int8 *)v78;
        uint64_t v83 = v65;
      }
      uint64_t v67 = 0;
      uint64_t v76 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v80, v81, v79, 0, v82, v83);
      uint64_t v75 = v84;
      swift_bridgeObjectRelease();
      if (v75 != 1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_77;
      }
      BOOL v233 = 0;
      uint64_t v244 = a9;
    }
    *(void *)&char v259 = v64;
    *((void *)&v259 + 1) = v62;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    int64_t v85 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v86 = objc_msgSend(v85, sel__fastCharacterContents);
    int64_t v87 = v85;
    if (v86)
    {
      uint64_t v239 = a21;
      *(void *)&char v259 = v64;
      *((void *)&v259 + 1) = v62;
      StringProtocol._ephemeralString.getter();
      uint64_t v88 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v89 = objc_msgSend(v88, sel_length);
      BOOL v90 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v90);
      LOBYTE(v231) = 0;
      MEMORY[0x1F4188790](v91);
      unint64_t v228 = v86;
      char v229 = v89;
      uint64_t v76 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v86, (uint64_t)v89, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, a21, v92, a22, (uint64_t)&v227);
      uint64_t v75 = v93;
      swift_bridgeObjectRelease_n();
      a9 = v244;
      uint64_t v67 = v233;
      goto LABEL_77;
    }
    *(void *)&char v259 = v64;
    *((void *)&v259 + 1) = v62;
    uint64_t v239 = v62;
    swift_bridgeObjectRetain();
    Swift::Int v95 = String.init<A>(_:)();
    Swift::Int v96 = v94;
    a9 = v244;
    if ((v94 & 0x1000000000000000) != 0)
    {
      Swift::Int v95 = static String._copying(_:)();
      uint64_t v103 = v102;
      swift_bridgeObjectRelease();
      Swift::Int v96 = v103;
      uint64_t v67 = v233;
      if ((v103 & 0x2000000000000000) == 0) {
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v67 = v233;
      if ((v94 & 0x2000000000000000) == 0)
      {
LABEL_68:
        if ((v95 & 0x1000000000000000) == 0) {
          goto LABEL_229;
        }
        uint64_t v97 = (unsigned __int8 *)((v96 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v98 = v95 & 0xFFFFFFFFFFFFLL;
        goto LABEL_70;
      }
    }
    uint64_t v98 = HIBYTE(v96) & 0xF;
    *(void *)&char v259 = v95;
    *((void *)&v259 + 1) = v96 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&uint64_t v249 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v249 + 1) = 0;
    uint64_t v97 = (unsigned __int8 *)&v259;
    uint64_t v99 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
    uint64_t v100 = (unsigned __int8 *)&v259;
    goto LABEL_75;
  }
  *(void *)&char v259 = v59;
  *((void *)&v259 + 1) = v60;
  MEMORY[0x1F4188790](a20);
  unint64_t v231 = (uint64_t)&v259;
  uint64_t v232 = MEMORY[0x1E4FBC870];
  uint64_t v67 = 0;
  long long v69 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(v68, (uint64_t)&v230, v64, (unint64_t)v62);
  if (v70 == 1)
  {
    uint64_t v72 = *((void *)&v259 + 1);
    uint64_t v71 = v259;
    swift_bridgeObjectRetain();
    uint64_t v73 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v71, v72, MEMORY[0x1E4FBC870]);
    uint64_t v75 = v74;
    swift_bridgeObjectRelease();
    uint64_t v76 = (uint64_t)v73;
  }
  else
  {
    uint64_t v76 = (uint64_t)v69;
    uint64_t v75 = v70;
  }
  while (1)
  {
    swift_bridgeObjectRelease();
LABEL_77:
    BYTE8(v263) = 0;
    BYTE12(v263) = 0;
    unint64_t v274 = 0;
    if (!v75)
    {
      uint64_t v61 = v76;
      goto LABEL_95;
    }
    uint64_t v77 = v75;
LABEL_79:
    uint64_t v105 = specialized Collection.first.getter(v76, v77);
    char v235 = v76;
    if ((v105 & 0x1FF) != 0x5B) {
      goto LABEL_104;
    }
    if ((v77 & 0x1000000000000000) != 0)
    {
      BOOL v233 = v67;
      uint64_t v219 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v219, 1)) {
        goto LABEL_238;
      }
      uint64_t v76 = v235;
      uint64_t v107 = (v235 >> 59) & 1;
      uint64_t v105 = MEMORY[0x185302230](15, v219 - 1, v235, v77);
      uint64_t v67 = v233;
    }
    else
    {
      id v106 = HIBYTE(v77) & 0xF;
      if ((v77 & 0x2000000000000000) == 0) {
        id v106 = v76 & 0xFFFFFFFFFFFFLL;
      }
      if (!v106)
      {
        __break(1u);
LABEL_214:
        uint64_t v105 = _StringGuts._slowEnsureMatchingEncoding(_:)(v105, v76, v77);
        goto LABEL_86;
      }
      uint64_t v105 = (v106 << 16) - 65532;
      LOBYTE(v107) = 1;
    }
    if ((v105 & 0xC) == 4 << v107) {
      goto LABEL_214;
    }
LABEL_86:
    uint64_t v108 = HIBYTE(v77) & 0xF;
    if ((v77 & 0x2000000000000000) == 0) {
      uint64_t v108 = v76 & 0xFFFFFFFFFFFFLL;
    }
    Swift::Int v109 = v105 >> 16;
    if (v105 >> 16 >= v108)
    {
      __break(1u);
      goto LABEL_216;
    }
    if ((v77 & 0x1000000000000000) != 0)
    {
      BOOL v111 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v77 & 0x2000000000000000) != 0)
    {
      *(void *)&char v259 = v76;
      *((void *)&v259 + 1) = v77 & 0xFFFFFFFFFFFFFFLL;
      BOOL v111 = *((unsigned char *)&v260[-1] + v109);
    }
    else
    {
      if ((v76 & 0x1000000000000000) != 0) {
        char v110 = (v77 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        char v110 = _StringObject.sharedUTF8.getter();
      }
      BOOL v111 = *(unsigned char *)(v110 + v109);
    }
    if (v111 == 93)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v112 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v76, v77);
      swift_bridgeObjectRelease_n();
      if (v112) {
        goto LABEL_110;
      }
      goto LABEL_100;
    }
LABEL_104:
    if ((v77 & 0x1000000000000000) == 0)
    {
      if ((v77 & 0x2000000000000000) != 0)
      {
        uint64_t v115 = HIBYTE(v77) & 0xF;
        *(void *)&char v259 = v76;
        *((void *)&v259 + 1) = v77 & 0xFFFFFFFFFFFFFFLL;
        Swift::Int v114 = (char *)&v259;
        goto LABEL_109;
      }
      if ((v76 & 0x1000000000000000) != 0)
      {
        Swift::Int v114 = (char *)((v77 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v115 = v76 & 0xFFFFFFFFFFFFLL;
        goto LABEL_109;
      }
LABEL_216:
      Swift::Int v114 = (char *)_StringObject.sharedUTF8.getter();
LABEL_109:
      uint64_t v116 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, v115, 4u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v116) {
        goto LABEL_110;
      }
      goto LABEL_100;
    }
    BOOL v233 = v67;
    uint64_t v239 = a1;
    uint64_t v210 = a9;
    *(void *)&char v259 = v76;
    *((void *)&v259 + 1) = v77;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    unsigned __int8 v211 = v77;
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    Swift::Int v212 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v213 = (unsigned __int16 *)objc_msgSend(v212, sel__fastCharacterContents);
    unsigned __int8 v214 = v212;
    if (v213)
    {
      *(void *)&char v259 = v235;
      *((void *)&v259 + 1) = v211;
      StringProtocol._ephemeralString.getter();
      uint64_t v215 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unsigned __int8 v216 = objc_msgSend(v215, sel_length);
      swift_unknownObjectRelease();
      uint64_t v217 = v213;
      uint64_t v77 = v211;
      uint64_t v218 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v217, (uint64_t)v216, 4u, 1);
    }
    else
    {
      uint64_t v77 = v211;
      uint64_t v218 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v235, v211, 4u, 1);
    }
    uint64_t v220 = v218;
    swift_bridgeObjectRelease_n();
    a9 = v210;
    a1 = v239;
    uint64_t v67 = v233;
    if (v220)
    {
LABEL_110:
      swift_bridgeObjectRetain();
      uint64_t v117 = swift_bridgeObjectRelease();
      *(void *)&unsigned __int8 v268 = v235;
      *((void *)&v268 + 1) = v77;
      LOBYTE(v259) = 37;
      MEMORY[0x1F4188790](v117);
      unint64_t v231 = (uint64_t)&v259;
      specialized Sequence.contains(where:)(a14, (uint64_t)&v230, v118, v77);
      swift_bridgeObjectRelease();
      goto LABEL_193;
    }
LABEL_100:
    uint64_t v234 = v77;
    if (*((void *)&v265 + 1))
    {
      uint64_t v113 = *((void *)&v265 + 1);
    }
    else if (BYTE9(v263) == 1)
    {
      uint64_t v113 = 0;
      if ((void)v263)
      {
        if (*(unsigned char *)(v263 + 48))
        {
          uint64_t v113 = 0;
        }
        else
        {
          double v158 = String.subscript.getter();
          uint64_t v239 = a1;
          uint64_t v244 = a9;
          MEMORY[0x185301F50](v158);
          uint64_t v113 = v159;
          a9 = v244;
          a1 = v239;
          swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      uint64_t v113 = 0;
    }
    if (specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v235, v234))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!v113)
      {
        swift_bridgeObjectRetain();
LABEL_140:
        double v124 = v234;
        double v137 = v235 & 0xFFFFFFFFFFFFLL;
        if ((v234 & 0x2000000000000000) != 0) {
          double v138 = HIBYTE(v234) & 0xF;
        }
        else {
          double v138 = v235 & 0xFFFFFFFFFFFFLL;
        }
        if (!v138)
        {
          double v145 = 0;
          char v146 = 0xE000000000000000;
          goto LABEL_185;
        }
        if ((v234 & 0x1000000000000000) != 0)
        {
          BOOL v233 = v67;
          uint64_t v244 = a9;
          swift_bridgeObjectRetain_n();
        }
        else
        {
          if ((v234 & 0x2000000000000000) != 0)
          {
            *(void *)&char v259 = v235;
            *((void *)&v259 + 1) = v234 & 0xFFFFFFFFFFFFFFLL;
            *(void *)&uint64_t v249 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
            *((void *)&v249 + 1) = 0;
            swift_bridgeObjectRetain_n();
            unint64_t v141 = &v259;
            uint64_t v140 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
            uint64_t v143 = (unsigned __int8 *)&v259;
            uint64_t v142 = HIBYTE(v124) & 0xF;
            uint64_t v144 = v142;
          }
          else
          {
            if ((v235 & 0x1000000000000000) == 0) {
              goto LABEL_227;
            }
            Foundation::Date v139 = (v234 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_148:
            *(void *)&char v259 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
            *((void *)&v259 + 1) = 0;
            swift_bridgeObjectRetain_n();
            uint64_t v140 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
            unint64_t v141 = (long long *)v139;
            uint64_t v142 = v137;
            uint64_t v143 = (unsigned __int8 *)v139;
            uint64_t v144 = v137;
          }
          double v145 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v141, v142, v140, 1, v143, v144);
          char v146 = v147;
          swift_bridgeObjectRelease();
          if (v146 != 1)
          {
            swift_bridgeObjectRelease_n();
            double v148 = v235;
            if (v146) {
              goto LABEL_185;
            }
            goto LABEL_189;
          }
          BOOL v233 = v67;
          uint64_t v244 = a9;
        }
        double v148 = v235;
        *(void *)&char v259 = v235;
        *((void *)&v259 + 1) = v124;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol._ephemeralString.getter();
        double v149 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        double v150 = objc_msgSend(v149, sel__fastCharacterContents);
        double v151 = v149;
        if (!v150)
        {
          *(void *)&char v259 = v148;
          *((void *)&v259 + 1) = v124;
          swift_bridgeObjectRetain();
          char v183 = String.init<A>(_:)();
          a9 = v244;
          if ((v182 & 0x1000000000000000) != 0) {
            goto LABEL_232;
          }
          goto LABEL_176;
        }
        uint64_t v239 = a18;
        *(void *)&char v259 = v148;
        *((void *)&v259 + 1) = v124;
        StringProtocol._ephemeralString.getter();
        Foundation::Date v152 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v153 = objc_msgSend(v152, sel_length);
        unint64_t v154 = swift_unknownObjectRelease();
        MEMORY[0x1F4188790](v154);
        LOBYTE(v231) = 1;
        MEMORY[0x1F4188790](v155);
        unint64_t v228 = v150;
        char v229 = v153;
        double v145 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v150, (uint64_t)v153, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, v239, v156, a19, (uint64_t)&v227);
        char v146 = v157;
        swift_bridgeObjectRelease_n();
        a9 = v244;
        if (v146)
        {
          double v124 = v234;
          goto LABEL_185;
        }
        double v124 = v234;
LABEL_188:
        double v148 = v235;
LABEL_189:
        HIBYTE(v274) = 1;
        uint64_t v168 = specialized static RFC3986Parser.percentEncode<A>(_:component:)(v148, v124, 3);
        goto LABEL_190;
      }
      BOOL v233 = v67;
      uint64_t v239 = a1;
      Swift::Int v119 = a9;
      unint64_t v120 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v120 != -1) {
        swift_once();
      }
      int64_t v121 = static RFC3986Parser.schemesToPercentEncodeHost;
      long long v122 = String.lowercased()();
      LOBYTE(v121) = specialized Set.contains(_:)(v122._countAndFlagsBits, (uint64_t)v122._object, v121);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      a9 = v119;
      a1 = v239;
      uint64_t v67 = v233;
      if ((v121 & 1) == 0) {
        goto LABEL_140;
      }
    }
    double v124 = v234;
    long long v123 = v235;
    if ((v234 & 0x2000000000000000) != 0) {
      double v125 = HIBYTE(v234) & 0xF;
    }
    else {
      double v125 = v235 & 0xFFFFFFFFFFFFLL;
    }
    if (!v125)
    {
      swift_bridgeObjectRelease();
      uint64_t v133 = 0;
      double v134 = 0xE000000000000000;
      goto LABEL_192;
    }
    uint64_t v126 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v235, v234);
    if ((v126 & 1) == 0)
    {
      uint64_t v244 = a16;
      *(void *)&char v259 = v123;
      *((void *)&v259 + 1) = v124;
      MEMORY[0x1F4188790](v126);
      unint64_t v231 = (uint64_t)&v259;
      LOBYTE(v232) = 4;
      swift_bridgeObjectRetain();
      double v135 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(v244, (uint64_t)&v230, v123, v124);
      if (v136)
      {
        uint64_t v133 = (unint64_t)v135;
        double v134 = v136;
        swift_bridgeObjectRelease_n();
        goto LABEL_192;
      }
      double v161 = *((void *)&v259 + 1);
      double v160 = v259;
      swift_bridgeObjectRetain();
      uint64_t v133 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v160, v161, 4u);
      double v134 = v162;
      swift_bridgeObjectRelease_n();
      goto LABEL_191;
    }
    int v127 = specialized Collection.first.getter(v123, v124);
    if ((v127 & 0x100) != 0) {
      goto LABEL_239;
    }
    if (v127 == 91)
    {
      if ((v124 & 0x1000000000000000) == 0)
      {
        uint64_t v128 = (v125 << 16) - 65532;
        LOBYTE(v129) = 1;
        goto LABEL_124;
      }
    }
    else
    {
      __break(1u);
    }
    BOOL v233 = v67;
    uint64_t v221 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v221, 1)) {
      goto LABEL_240;
    }
    double v124 = v234;
    uint64_t v129 = (v235 >> 59) & 1;
    uint64_t v128 = MEMORY[0x185302230](15, v221 - 1);
    uint64_t v67 = v233;
LABEL_124:
    if ((v128 & 0xC) == 4 << v129) {
      uint64_t v128 = _StringGuts._slowEnsureMatchingEncoding(_:)(v128, v235, v124);
    }
    uint64_t v130 = v128 >> 16;
    if (v128 >> 16 >= v125)
    {
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      Foundation::Date v139 = _StringObject.sharedUTF8.getter();
      double v137 = v222;
      goto LABEL_148;
    }
    if ((v124 & 0x1000000000000000) != 0)
    {
      char v132 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v124 & 0x2000000000000000) != 0)
    {
      *(void *)&char v259 = v235;
      *((void *)&v259 + 1) = v124 & 0xFFFFFFFFFFFFFFLL;
      char v132 = *((unsigned char *)&v260[-1] + v130);
    }
    else
    {
      if ((v235 & 0x1000000000000000) != 0) {
        double v131 = (v124 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        double v131 = _StringObject.sharedUTF8.getter();
      }
      char v132 = *(unsigned char *)(v131 + v130);
    }
    if (v132 != 93) {
      goto LABEL_226;
    }
    double v163 = v235;
    double v164 = specialized Collection<>.firstIndex(of:)(0x25u, v235, v124);
    if (v165)
    {
      swift_bridgeObjectRetain();
      if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v163, v124) & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        unsigned __int8 v268 = 0uLL;
        goto LABEL_193;
      }
      *(void *)&char v259 = v163;
      *((void *)&v259 + 1) = v124;
      uint64_t v168 = String.init<A>(_:)();
LABEL_190:
      uint64_t v133 = v168;
      double v134 = v169;
LABEL_191:
      swift_bridgeObjectRelease();
      goto LABEL_192;
    }
    uint64_t v166 = v164;
    if ((v124 & 0x1000000000000000) == 0)
    {
      uint64_t v167 = (v125 << 16) - 65532;
      goto LABEL_171;
    }
    uint64_t v170 = v235;
    double v171 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v171, 1))
    {
      __break(1u);
LABEL_232:
      char v183 = static String._copying(_:)();
      uint64_t v224 = v223;
      swift_bridgeObjectRelease();
      char v182 = (unint64_t)v224;
      double v148 = v235;
LABEL_176:
      uint64_t v239 = (uint64_t (*)(void))v182;
      if ((v182 & 0x2000000000000000) != 0)
      {
        double v199 = v182;
        char v185 = HIBYTE(v182) & 0xF;
        *(void *)&char v259 = v183;
        *((void *)&v259 + 1) = v199 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&uint64_t v249 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        *((void *)&v249 + 1) = 0;
        char v184 = (unsigned __int8 *)&v259;
        int v186 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
        char v187 = (unsigned __int8 *)&v259;
        char v188 = v185;
      }
      else
      {
        if ((v183 & 0x1000000000000000) != 0)
        {
          char v184 = (unsigned __int8 *)((v182 & 0xFFFFFFFFFFFFFFFLL) + 32);
          char v185 = v183 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          char v184 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        *(void *)&char v259 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        *((void *)&v259 + 1) = 0;
        int v186 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
        char v187 = v184;
        char v188 = v185;
      }
      double v145 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v184, v185, v186, 1, v187, v188);
      char v146 = v200;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (v146)
      {
LABEL_185:
        swift_bridgeObjectRetain();
        double v201 = specialized static RFC3986Parser.validate<A>(_:component:)(v145, v146, 3);
        swift_bridgeObjectRelease();
        if (v201)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&unsigned __int8 v268 = v145;
          *((void *)&v268 + 1) = v146;
          goto LABEL_193;
        }
        swift_bridgeObjectRelease();
        goto LABEL_188;
      }
      goto LABEL_189;
    }
    uint64_t v167 = MEMORY[0x185302230](15, v171 - 1, v170, v124);
LABEL_171:
    uint64_t v244 = a9;
    if (v167 >> 14 >= v166 >> 14) {
      break;
    }
    __break(1u);
LABEL_229:
    uint64_t v97 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_70:
    *(void *)&char v259 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v259 + 1) = 0;
    uint64_t v99 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
    uint64_t v100 = v97;
LABEL_75:
    uint64_t v76 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v97, v98, v99, 0, v100, v98);
    uint64_t v75 = v104;
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  *(void *)&char v259 = String.subscript.getter();
  *((void *)&v259 + 1) = v172;
  *(void *)&v260[0] = v173;
  *((void *)&v260[0] + 1) = v174;
  MEMORY[0x1F4188790](v259);
  unint64_t v231 = (uint64_t)&v259;
  LOBYTE(v232) = 8;
  uint64_t v239 = v175;
  char v179 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5(a17, (uint64_t)&v230, v177, v178, v176, (unint64_t)v175);
  if (v180)
  {
    char v181 = v180;
    BOOL v233 = (uint64_t)v179;
  }
  else
  {
    uint64_t v190 = *((void *)&v259 + 1);
    uint64_t v189 = v259;
    uint64_t v191 = v260[0];
    swift_bridgeObjectRetain();
    BOOL v233 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v189, v190, v191, *((unint64_t *)&v191 + 1), 8u);
    char v181 = v192;
    swift_bridgeObjectRelease();
  }
  int v193 = String.subscript.getter();
  uint64_t v194 = MEMORY[0x185301F50](v193);
  uint64_t v196 = v195;
  swift_bridgeObjectRelease();
  *(void *)&char v259 = v194;
  *((void *)&v259 + 1) = v196;
  v197._uint64_t countAndFlagsBits = v233;
  v197._unint64_t object = v181;
  String.append(_:)(v197);
  swift_bridgeObjectRelease();
  v198._uint64_t countAndFlagsBits = 93;
  v198._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v198);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  double v134 = *((void *)&v259 + 1);
  uint64_t v133 = v259;
  swift_bridgeObjectRelease_n();
  a9 = v244;
LABEL_192:
  swift_bridgeObjectRelease();
  *(void *)&unsigned __int8 v268 = v133;
  *((void *)&v268 + 1) = v134;
LABEL_193:
  BYTE8(v263) = 0;
  BYTE12(v263) = 0;
  unint64_t v274 = 0;
  if ((specialized Collection.first.getter(0, 0xE000000000000000) & 0x1FF) == 0x5B) {
    goto LABEL_237;
  }
  char v259 = 0uLL;
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)&v259, 0, 4u, 1))
  {
    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *uint64_t v226 = 3;
    swift_willThrow();
    LODWORD(v232) = 0;
    unint64_t v231 = 876;
    goto LABEL_243;
  }
  double v202 = swift_bridgeObjectRelease();
  unsigned __int8 v268 = xmmword_182107DC0;
  LOBYTE(v259) = 37;
  MEMORY[0x1F4188790](v202);
  unint64_t v231 = (uint64_t)&v259;
  LOBYTE(v274) = specialized Sequence.contains(where:)(a15, (uint64_t)&v230, 0, 0xE000000000000000) & 1;
LABEL_196:
  char v203 = v275;
  int64_t v204 = v276;
  unint64_t v205 = HIBYTE(v276) & 0xF;
  if ((v276 & 0x2000000000000000) == 0) {
    unint64_t v205 = v275 & 0xFFFFFFFFFFFFLL;
  }
  if (v205)
  {
    swift_bridgeObjectRetain();
    int64_t v206 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v203, v204);
    double v208 = v207;
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v206 = 0;
    double v208 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  if (!v240)
  {
    uint64_t v239 = a1;
    *(void *)&char v259 = v263;
    BYTE8(v259) = 0;
    *(_DWORD *)((char *)&v259 + 9) = *(_DWORD *)((char *)&v263 + 9);
    *(_WORD *)((char *)&v259 + 13) = BYTE13(v263);
    HIBYTE(v259) = HIBYTE(v263);
    LOBYTE(v260[0]) = v264;
    *(_OWORD *)((char *)v260 + 8) = v265;
    *(_OWORD *)((char *)&v260[1] + 8) = v266;
    *(_OWORD *)((char *)&v260[2] + 8) = v267;
    *(_OWORD *)((char *)&v260[3] + 8) = v268;
    *((void *)&v260[4] + 1) = v269;
    LOBYTE(v261) = v270;
    *((void *)&v261 + 1) = v206;
    *(void *)&v262[0] = v208;
    *(_OWORD *)((char *)v262 + 8) = v272;
    *(_OWORD *)((char *)&v262[1] + 8) = v273;
    WORD4(v262[2]) = v274;
    uint64_t v255 = v261;
    uint64_t v256 = v262[0];
    v257[0] = v262[1];
    *(_OWORD *)((char *)v257 + 10) = *(_OWORD *)((char *)&v262[1] + 10);
    unint64_t v251 = v260[1];
    unint64_t v252 = v260[2];
    uint64_t v253 = v260[3];
    v254 = v260[4];
    uint64_t v249 = v259;
    unint64_t v250 = v260[0];
    unsigned __int8 v209 = v237;
    v248[0] = v237;
    v248[1] = v236;
    v248[2] = v238;
    URLComponents.url(relativeTo:)((uint64_t)v248, v258);
    unint64_t v44 = (void *)v258[0];
    if (!v258[0]) {
      goto LABEL_236;
    }
    outlined release of URLComponents((uint64_t)&v259);
    outlined consume of URL?(v209);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a8 = v242;
    a7 = v243;
    uint64_t v25 = v245;
    goto LABEL_206;
  }
  *(void *)&char v259 = v263;
  BYTE8(v259) = 0;
  *(_DWORD *)((char *)&v259 + 9) = *(_DWORD *)((char *)&v263 + 9);
  *(_WORD *)((char *)&v259 + 13) = BYTE13(v263);
  HIBYTE(v259) = HIBYTE(v263);
  LOBYTE(v260[0]) = v264;
  *(_OWORD *)((char *)v260 + 8) = v265;
  *(_OWORD *)((char *)&v260[1] + 8) = v266;
  *(_OWORD *)((char *)&v260[2] + 8) = v267;
  *(_OWORD *)((char *)&v260[3] + 8) = v268;
  *((void *)&v260[4] + 1) = v269;
  LOBYTE(v261) = v270;
  *((void *)&v261 + 1) = v206;
  *(void *)&v262[0] = v208;
  *(_OWORD *)((char *)v262 + 8) = v272;
  *(_OWORD *)((char *)&v262[1] + 8) = v273;
  WORD4(v262[2]) = v274;
  uint64_t v255 = v261;
  uint64_t v256 = v262[0];
  v257[0] = v262[1];
  *(_OWORD *)((char *)v257 + 10) = *(_OWORD *)((char *)&v262[1] + 10);
  unint64_t v251 = v260[1];
  unint64_t v252 = v260[2];
  uint64_t v253 = v260[3];
  v254 = v260[4];
  uint64_t v249 = v259;
  unint64_t v250 = v260[0];
  URLComponents.url.getter(v258);
  unint64_t v44 = (void *)v258[0];
  if (v258[0])
  {
    outlined release of URLComponents((uint64_t)&v259);
    outlined consume of URL?(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a8 = v242;
    a7 = v243;
    uint64_t v25 = v245;
    a6 = v241;
    goto LABEL_207;
  }
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  void *v225 = 0;
  swift_willThrow();
  LODWORD(v232) = 0;
  unint64_t v231 = 714;
LABEL_243:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _NSFileExists(uint64_t result, BOOL *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    long long v3 = (void *)result;
    if ([(id)result isEqual:&stru_1ECA5C228])
    {
      return 0;
    }
    else
    {
      __n128 result = objc_msgSend(v3, "__swiftFillFileSystemRepresentationWithPointer:maxLength:", v6, 1024);
      if (result)
      {
        memset(&v5, 0, sizeof(v5));
        int v4 = stat(v6, &v5);
        __n128 result = v4 == 0;
        if (a2)
        {
          if (!v4) {
            *a2 = (v5.st_mode & 0xF000) == 0x4000;
          }
        }
      }
    }
  }
  return result;
}

unint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2)
  {
    unsigned __int8 v13 = 0;
    return v13 | ((v2 == 0) << 8);
  }
  uint64_t v5 = (v2 << 16) | 0xB;
  unint64_t v6 = a1 & 0x800000000000000;
  if ((a1 & 0x800000000000000) != 0) {
    uint64_t v5 = (v2 << 16) | 7;
  }
  unint64_t v7 = v6 >> 59;
  uint64_t v8 = 4 << (v6 >> 59);
  if ((a2 & 0x1000000000000000) != 0) {
    unint64_t result = v5;
  }
  else {
    unint64_t result = (v2 << 16) | 7;
  }
  uint64_t v10 = 8;
  if ((a2 & 0x1000000000000000) != 0) {
    uint64_t v10 = v8;
  }
  if ((result & 0xC) == v10 && (unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2), result < 0x4000))
  {
    __break(1u);
  }
  else if ((a2 & 0x1000000000000000) == 0)
  {
    unint64_t v11 = (result & 0xFFFFFFFFFFFF0000) - 65532;
    LOBYTE(v7) = 1;
    goto LABEL_15;
  }
  if (v2 >= result >> 16)
  {
    unint64_t v11 = String.UTF8View._foreignIndex(before:)();
LABEL_15:
    if ((v11 & 0xC) == 4 << v7) {
      unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
    }
    unint64_t v12 = v11 >> 16;
    if (v11 >> 16 >= v2)
    {
      __break(1u);
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        unsigned __int8 v13 = String.UTF8View._foreignSubscript(position:)();
        return v13 | ((v2 == 0) << 8);
      }
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        unsigned __int8 v13 = *((unsigned char *)v14 + v12);
        return v13 | ((v2 == 0) << 8);
      }
      if ((a1 & 0x1000000000000000) != 0)
      {
        unsigned __int8 v13 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v11 >> 16));
        return v13 | ((v2 == 0) << 8);
      }
    }
    unsigned __int8 v13 = *(unsigned char *)(_StringObject.sharedUTF8.getter() + v12);
    return v13 | ((v2 == 0) << 8);
  }
  __break(1u);
  return result;
}

void specialized CocoaError.init<A>(_:path:url:underlying:variant:source:destination:)(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X6>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t))
{
  uint64_t v13 = a1;
  if (a2)
  {
    uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
    a1 = swift_bridgeObjectRelease();
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (a3)
    {
LABEL_3:
      id v15 = a3;
      a1 = (uint64_t)outlined consume of URL?(a3);
      uint64_t v16 = a6;
      if (a4) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v18 = 0;
      uint64_t v19 = a8;
      if (v16) {
        goto LABEL_14;
      }
LABEL_9:
      uint64_t v20 = 0;
      uint64_t v21 = a10;
      if (v19) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
  }
  id v15 = 0;
  uint64_t v16 = a6;
  if (!a4) {
    goto LABEL_8;
  }
LABEL_4:
  a11(a1);
  id v17 = a4;
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
  }
  else
  {
    swift_allocError();
    *uint64_t v24 = v17;
  }
  uint64_t v18 = (void *)_swift_stdlib_bridgeErrorToNSError();
  uint64_t v19 = a8;
  if (!v16) {
    goto LABEL_9;
  }
LABEL_14:
  uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v21 = a10;
  if (v19)
  {
LABEL_15:
    unsigned int v22 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
LABEL_10:
  unsigned int v22 = 0;
  if (v21)
  {
LABEL_16:
    uint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_11:
  uint64_t v23 = 0;
LABEL_17:
  id v25 = objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v13, v14, v15, v18, v20, v22, v23);

  *a5 = v25;
}

void *outlined consume of URL?(void *result)
{
  if (result)
  {

    swift_release();
    return (void *)swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type POSIXError and conformance POSIXError()
{
  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

void _NSSwiftURLComponents.url.getter(uint64_t a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    long long v3 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____NSSwiftURLComponents_lock];
    int v4 = v3 + 4;
    uint64_t v5 = v3 + 43;
    os_unfair_lock_lock(v3 + 43);
    closure #1 in _NSSwiftURLComponents.components.getter(v4, v13);
    os_unfair_lock_unlock(v5);
    v11[6] = v18;
    v11[7] = v19;
    v12[0] = v20[0];
    *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v20 + 10);
    void v11[2] = v14;
    v11[3] = v15;
    v11[4] = v16;
    v11[5] = v17;
    v11[0] = *(_OWORD *)v13;
    v11[1] = *(_OWORD *)&v13[16];
    URLComponents.url.getter((uint64_t *)a1);
    outlined release of URLComponents((uint64_t)v11);
  }
  else
  {
    CFStringRef v6 = (const __CFString *)objc_msgSend(v1, sel_string);
    if (v6)
    {
      unint64_t v7 = (__CFString *)v6;
      CFURLRef v8 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0);

      if (v8)
      {
        URL.init(reference:)(v8, v13);

        uint64_t v9 = *(void *)v13;
        long long v10 = *(_OWORD *)&v13[8];
      }
      else
      {
        uint64_t v9 = 0;
        long long v10 = 0uLL;
      }
      *(void *)a1 = v9;
      *(_OWORD *)(a1 + 8) = v10;
    }
    else
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
  }
}

unint64_t lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

void URL.init(string:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, id *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7 = *a3;
  if (_foundation_swift_url_feature_enabled())
  {
    Swift::Int v8 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, 1);
    if (v8)
    {
      uint64_t v9 = v8;
      if (*(unsigned char *)(v8 + 48))
      {
        if (v7)
        {
          swift_retain_n();
          URL.absoluteURL.getter(v16);
          id v7 = v16[1];

          swift_release();
          if (v7)
          {
            uint64_t v10 = swift_retain();
            unint64_t v11 = (void *)specialized static URL._cfURL(from:baseURL:)(v10);
LABEL_18:
            uint64_t v15 = specialized static URL._cfURL(from:baseURL:)(v9);
            swift_release_n();

            swift_release();
            goto LABEL_19;
          }
        }
        else
        {
          swift_retain_n();
        }
        unint64_t v11 = 0;
        goto LABEL_18;
      }
      swift_retain_n();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v11 = 0;
      id v7 = 0;
      goto LABEL_18;
    }
LABEL_14:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  uint64_t v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  if (v7)
  {
    outlined copy of URL?((uint64_t)v7);
    swift_release();
    swift_release();
  }
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initWithString_relativeToURL_, v13, v7);
  swift_unknownObjectRelease();

  if (!v14) {
    goto LABEL_14;
  }
  uint64_t v15 = (uint64_t)static URL._converted(from:)(v14);

  id v7 = 0;
  uint64_t v9 = 0;
LABEL_19:
  *a4 = v15;
  a4[1] = v9;
  a4[2] = (uint64_t)v7;
}

uint64_t destroy for LocalizedStringResource(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void URL.init(string:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initWithString_, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v11)
      {
        uint64_t v9 = (uint64_t)static URL._converted(from:)(v11);

        Swift::Int v7 = 0;
        goto LABEL_9;
      }
    }
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_11;
  }
  Swift::Int v6 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, 1);
  if (!v6) {
    goto LABEL_10;
  }
  Swift::Int v7 = v6;
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized static URL._cfURL(from:baseURL:)(v8);
  swift_release();
LABEL_9:
  *a3 = v9;
  a3[1] = v7;
LABEL_11:
  a3[2] = 0;
}

void URL.init(reference:)(void *a1@<X0>, void *a2@<X8>)
{
  int v4 = (void *)static URL._converted(from:)();
  objc_msgSend(v4, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURL);
  swift_dynamicCast();
  id v5 = v14;
  if (!_foundation_swift_url_feature_enabled())
  {

    Swift::Int v10 = 0;
    goto LABEL_6;
  }
  id v6 = objc_msgSend(v5, sel_relativeString);

  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v9 = v8;

  Swift::Int v10 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v7, v9, 1);
  swift_bridgeObjectRelease();
  if (v10)
  {
    id v11 = objc_msgSend(a1, sel_baseURL);
    if (v11)
    {
      uint64_t v12 = v11;
      URL.init(reference:)(v15);

      id v13 = v15[1];
      swift_release();
LABEL_7:
      *a2 = v5;
      a2[1] = v10;
      a2[2] = v13;
      return;
    }
LABEL_6:
    id v13 = 0;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t destroy for URL.AsyncBytes(id *a1)
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for URL.AsyncBytes(void *a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _foundation_swift_url_feature_enabled()
{
  if (qword_1EB1ED1E8 != -1) {
    dispatch_once(&qword_1EB1ED1E8, &__block_literal_global_11);
  }
  return _MergedGlobals_95;
}

void *static URL._converted(from:)(void *a1)
{
  if (objc_msgSend(a1, sel_isFileReferenceURL))
  {
    id v1 = objc_msgSend(a1, sel_filePathURL);
    if (v1)
    {
      unint64_t v2 = v1;
      URL.init(reference:)(v1, &v6);

      uint64_t v3 = v6;
LABEL_8:
      swift_release();
      swift_release();
      return (void *)v3;
    }
    unint64_t result = URL.init(string:)(&v6, 0xD00000000000002ALL, 0x80000001823B3990);
    uint64_t v3 = v6;
    if (v6) {
      goto LABEL_8;
    }
    __break(1u);
  }
  else
  {
    return a1;
  }
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance URLComponents.CodingKeys(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t assignWithTake for Measurement(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t assignWithCopy for Measurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

BOOL _unitHasSpecifierAndIsDimensional(void *a1)
{
  return (objc_opt_respondsToSelector() & 1) != 0
      && (objc_opt_isKindOfClass() & 1) != 0
      && [a1 specifier] != -1;
}

uint64_t isDimensional()
{
  if (objc_opt_respondsToSelector()) {
    isKindOfClass Class = 1;
  }
  else {
    isKindOfClass Class = objc_opt_isKindOfClass();
  }
  return isKindOfClass & 1;
}

id NSUnitTemperature.init(forLocale:usage:)(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  char v4 = *a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v6 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  id v7 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v3, v2, v6, v4);
  swift_unknownObjectRelease();

  id result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v7);
  if (result)
  {
    id v9 = result;

    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id Measurement<>.converted(to:)@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  id v4 = *(id *)v2;
  double v5 = *(double *)(v2 + 8);
  if ((objc_msgSend(*(id *)v2, sel_isEqual_) & 1) == 0)
  {
    id v6 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v6, sel_baseUnitValueFromValue_, v5);
    double v5 = v7;

    swift_getObjectType();
    id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
    unsigned __int8 v9 = objc_msgSend(a1, sel_isEqual_, v8);

    if ((v9 & 1) == 0)
    {
      id v10 = objc_msgSend(a1, sel_converter);
      objc_msgSend(v10, sel_valueFromBaseUnitValue_, v5);
      double v5 = v11;
    }
  }
  *(void *)a2 = a1;
  a2[1] = v5;

  return a1;
}

id specialized bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  char v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  id result;
  NSUnitVolume *v22;
  void v24[2];
  uint64_t vars8;

  v24[1] = *MEMORY[0x1E4F143B8];
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitTemperature);
  uint64_t ObjectType = swift_getObjectType();
  double v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 456);
  swift_unknownObjectRetain();
  v7((void *)((char *)v24 + 4), ObjectType, a2);
  swift_unknownObjectRelease();
  id v8 = BYTE4(v24[0]);
  if (BYTE4(v24[0]) != 2)
  {
    long long v19 = self;
    if (v8) {
      uint64_t v20 = objc_msgSend(v19, sel_celsius);
    }
    else {
      uint64_t v20 = objc_msgSend(v19, sel_fahrenheit);
    }
    return v20;
  }
  unsigned __int8 v9 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
  swift_unknownObjectRetain();
  v9(ObjectType, a2);
  swift_unknownObjectRelease();
  HIDWORD(v24[0]) = 0;
  id v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (v10)
  {
    double v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    id v14 = v13;

    uint64_t v15 = Usage.rawValue.getter(a4);
    long long v17 = v16;
    if (v14)
    {
      if ((v12 == (id)0x796772656E65 && v14 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v15 == 0x746C7561666564 && v17 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        long long v18 = 0;
      }
      else
      {
        long long v18 = 0;
      }
      goto LABEL_20;
    }
  }
  else
  {
    Usage.rawValue.getter(a4);
  }
  long long v18 = 1;
LABEL_20:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  unsigned int v22 = getDimensionUnitFromUnitSpecifier(HIDWORD(v24[0]));
  swift_bridgeObjectRelease();
  if (v22)
  {
    self;
    id result = (id)swift_dynamicCastObjCClass();
    if (result) {
      return result;
    }
  }

  return a3;
}

uint64_t Usage.rawValue.getter(char a1)
{
  uint64_t result = 0x746C7561666564;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F73726570;
      break;
    case 2:
      uint64_t result = 1685024614;
      break;
    case 3:
      uint64_t result = 0x682D6E6F73726570;
      break;
    case 4:
      uint64_t result = 1684107122;
      break;
    case 5:
      uint64_t result = 0x656C2D6C61636F66;
      break;
    case 6:
      unsigned int v3 = 1852399986;
      goto LABEL_9;
    case 7:
      unsigned int v3 = 2003791475;
LABEL_9:
      uint64_t result = v3 | 0x6C6C616600000000;
      break;
    case 8:
      uint64_t result = 0x79746C6269736976;
      break;
    case 9:
      uint64_t result = 0x6372746D6F726162;
      break;
    case 10:
      uint64_t result = 1684957559;
      break;
    case 11:
      uint64_t result = 0x72656874616577;
      break;
    case 12:
      uint64_t result = 0x6469756C66;
      break;
    case 13:
      uint64_t result = 0x6469766F72507361;
      break;
    default:
      return result;
  }
  return result;
}

NSUnitVolume *getDimensionUnitFromUnitSpecifier(unsigned int a1)
{
  if (a1 > 1)
  {
    if ((unint64_t)a1 - 256 > 4)
    {
      if ((unint64_t)a1 - 512 > 8)
      {
        if (a1 - 4609 <= 8 && ((1 << (a1 - 1)) & 0x103) != 0)
        {
          uint64_t v2 = NSUnitConcentrationMass;
          return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
        }
        uint64_t v4 = a1 & 0xFFFFFFFC;
        if (v4 == 3328)
        {
          if (a1 == 3331)
          {
            return (NSUnitVolume *)+[NSUnitFuelEfficiency milesPerImperialGallon];
          }
          else
          {
            if (a1 != 3329)
            {
              uint64_t v2 = NSUnitFuelEfficiency;
              return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
            }
            return (NSUnitVolume *)+[NSUnitFuelEfficiency milesPerGallon];
          }
        }
        else
        {
          if (a1 == 4611)
          {
            uint64_t v2 = NSUnitDispersion;
            return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
          }
          if ((unint64_t)a1 - 1024 > 9)
          {
            if ((a1 & 0xFFFFFFFE) == 0xF00)
            {
              id v1 = NSUnitElectricCurrent;
              if (a1 != 3841) {
                goto LABEL_3;
              }
              return (NSUnitVolume *)+[NSUnitElectricCurrent milliamperes];
            }
            else
            {
              if (a1 == 3842)
              {
                uint64_t v2 = NSUnitElectricResistance;
                return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
              }
              if (a1 == 3843)
              {
                uint64_t v2 = NSUnitElectricPotentialDifference;
                return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
              }
              if ((unint64_t)a1 - 3072 > 5)
              {
                if (v4 == 4096)
                {
                  switch(a1)
                  {
                    case 0x1001u:
                      return (NSUnitVolume *)+[NSUnitFrequency kilohertz];
                    case 0x1002u:
                      return (NSUnitVolume *)+[NSUnitFrequency megahertz];
                    case 0x1003u:
                      return (NSUnitVolume *)+[NSUnitFrequency gigahertz];
                    default:
                      uint64_t v2 = NSUnitFrequency;
                      return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                  }
                }
                else
                {
                  if (a1 == 4352)
                  {
                    uint64_t v2 = NSUnitIlluminance;
                    return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                  }
                  if ((unint64_t)a1 - 3584 > 0xA)
                  {
                    if ((unint64_t)a1 - 1280 > 0x12)
                    {
                      if ((unint64_t)a1 - 1536 > 0xA)
                      {
                        if ((unint64_t)a1 - 1792 > 5)
                        {
                          switch(a1)
                          {
                            case 0x800u:
                              uint64_t result = +[NSUnitPressure hectopascals];
                              break;
                            case 0x801u:
                              uint64_t result = +[NSUnitPressure inchesOfMercury];
                              break;
                            case 0x802u:
                              uint64_t result = +[NSUnitPressure millibars];
                              break;
                            case 0x803u:
                              uint64_t result = +[NSUnitPressure millimetersOfMercury];
                              break;
                            case 0x804u:
                              uint64_t result = +[NSUnitPressure poundsForcePerSquareInch];
                              break;
                            case 0x806u:
                              uint64_t result = +[NSUnitPressure kilopascals];
                              break;
                            case 0x807u:
                              uint64_t result = +[NSUnitPressure megapascals];
                              break;
                            case 0x809u:
                              uint64_t result = +[NSUnitPressure bars];
                              break;
                            default:
                              if (v4 == 2304)
                              {
                                switch(a1)
                                {
                                  case 0x903u:
                                    uint64_t result = +[NSUnitSpeed knots];
                                    break;
                                  case 0x902u:
                                    uint64_t result = +[NSUnitSpeed milesPerHour];
                                    break;
                                  case 0x901u:
                                    uint64_t result = +[NSUnitSpeed kilometersPerHour];
                                    break;
                                  default:
                                    uint64_t v2 = NSUnitSpeed;
                                    return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                                }
                              }
                              else if ((unint64_t)a1 - 2560 > 2)
                              {
                                if (a1 - 2823 < 0x10 || a1 - 2816 <= 0x18 && ((1 << a1) & 0x100003F) != 0)
                                {
                                  switch(a1)
                                  {
                                    case 0xB01u:
                                      uint64_t result = +[NSUnitVolume cubicKilometers];
                                      break;
                                    case 0xB02u:
                                      uint64_t result = +[NSUnitVolume cubicMiles];
                                      break;
                                    case 0xB03u:
                                      uint64_t result = +[NSUnitVolume milliliters];
                                      break;
                                    case 0xB04u:
                                      uint64_t result = +[NSUnitVolume centiliters];
                                      break;
                                    case 0xB05u:
                                      uint64_t result = +[NSUnitVolume deciliters];
                                      break;
                                    case 0xB07u:
                                      uint64_t result = +[NSUnitVolume megaliters];
                                      break;
                                    case 0xB08u:
                                      uint64_t result = +[NSUnitVolume cubicCentimeters];
                                      break;
                                    case 0xB09u:
                                      uint64_t result = +[NSUnitVolume cubicMeters];
                                      break;
                                    case 0xB0Au:
                                      uint64_t result = +[NSUnitVolume cubicInches];
                                      break;
                                    case 0xB0Bu:
                                      uint64_t result = +[NSUnitVolume cubicFeet];
                                      break;
                                    case 0xB0Cu:
                                      uint64_t result = +[NSUnitVolume cubicYards];
                                      break;
                                    case 0xB0Du:
                                      uint64_t result = +[NSUnitVolume acreFeet];
                                      break;
                                    case 0xB0Eu:
                                      uint64_t result = +[NSUnitVolume bushels];
                                      break;
                                    case 0xB0Fu:
                                      uint64_t result = +[NSUnitVolume teaspoons];
                                      break;
                                    case 0xB10u:
                                      uint64_t result = +[NSUnitVolume tablespoons];
                                      break;
                                    case 0xB11u:
                                      uint64_t result = +[NSUnitVolume fluidOunces];
                                      break;
                                    case 0xB12u:
                                      uint64_t result = +[NSUnitVolume cups];
                                      break;
                                    case 0xB13u:
                                      uint64_t result = +[NSUnitVolume pints];
                                      break;
                                    case 0xB14u:
                                      uint64_t result = +[NSUnitVolume quarts];
                                      break;
                                    case 0xB15u:
                                      uint64_t result = +[NSUnitVolume gallons];
                                      break;
                                    case 0xB16u:
                                      uint64_t result = +[NSUnitVolume metricCups];
                                      break;
                                    case 0xB18u:
                                      uint64_t result = +[NSUnitVolume imperialGallons];
                                      break;
                                    default:
                                      uint64_t v2 = NSUnitVolume;
                                      return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                                  }
                                }
                                else
                                {
                                  uint64_t result = 0;
                                }
                              }
                              else if (a1 == 2561)
                              {
                                uint64_t result = +[NSUnitTemperature fahrenheit];
                              }
                              else
                              {
                                if (a1 != 2560)
                                {
                                  uint64_t v2 = NSUnitTemperature;
                                  return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                                }
                                uint64_t result = +[NSUnitTemperature celsius];
                              }
                              break;
                          }
                        }
                        else
                        {
                          switch(a1)
                          {
                            case 0x701u:
                              uint64_t result = +[NSUnitPower kilowatts];
                              break;
                            case 0x702u:
                              uint64_t result = +[NSUnitPower horsepower];
                              break;
                            case 0x703u:
                              uint64_t result = +[NSUnitPower milliwatts];
                              break;
                            case 0x704u:
                              uint64_t result = +[NSUnitPower megawatts];
                              break;
                            case 0x705u:
                              uint64_t result = +[NSUnitPower gigawatts];
                              break;
                            default:
                              uint64_t v2 = NSUnitPower;
                              return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                          }
                        }
                      }
                      else
                      {
                        switch(a1)
                        {
                          case 0x600u:
                            uint64_t result = +[NSUnitMass grams];
                            break;
                          case 0x602u:
                            uint64_t result = +[NSUnitMass ounces];
                            break;
                          case 0x603u:
                            uint64_t result = +[NSUnitMass poundsMass];
                            break;
                          case 0x604u:
                            uint64_t result = +[NSUnitMass stones];
                            break;
                          case 0x605u:
                            uint64_t result = +[NSUnitMass micrograms];
                            break;
                          case 0x606u:
                            uint64_t result = +[NSUnitMass milligrams];
                            break;
                          case 0x607u:
                            uint64_t result = +[NSUnitMass metricTons];
                            break;
                          case 0x608u:
                            uint64_t result = +[NSUnitMass shortTons];
                            break;
                          case 0x609u:
                            uint64_t result = +[NSUnitMass carats];
                            break;
                          case 0x60Au:
                            uint64_t result = +[NSUnitMass ouncesTroy];
                            break;
                          default:
                            uint64_t v2 = NSUnitMass;
                            return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                        }
                      }
                    }
                    else
                    {
                      switch(a1)
                      {
                        case 0x501u:
                          uint64_t result = +[NSUnitLength centimeters];
                          break;
                        case 0x502u:
                          uint64_t result = +[NSUnitLength kilometers];
                          break;
                        case 0x503u:
                          uint64_t result = +[NSUnitLength millimeters];
                          break;
                        case 0x504u:
                          uint64_t result = +[NSUnitLength picometers];
                          break;
                        case 0x505u:
                          uint64_t result = +[NSUnitLength feet];
                          break;
                        case 0x506u:
                          uint64_t result = +[NSUnitLength inches];
                          break;
                        case 0x507u:
                          uint64_t result = +[NSUnitLength miles];
                          break;
                        case 0x508u:
                          uint64_t result = +[NSUnitLength yards];
                          break;
                        case 0x509u:
                          uint64_t result = +[NSUnitLength lightyears];
                          break;
                        case 0x50Au:
                          uint64_t result = +[NSUnitLength decimeters];
                          break;
                        case 0x50Bu:
                          uint64_t result = +[NSUnitLength micrometers];
                          break;
                        case 0x50Cu:
                          uint64_t result = +[NSUnitLength nanometers];
                          break;
                        case 0x50Du:
                          uint64_t result = +[NSUnitLength nauticalMiles];
                          break;
                        case 0x50Eu:
                          uint64_t result = +[NSUnitLength fathoms];
                          break;
                        case 0x50Fu:
                          uint64_t result = +[NSUnitLength furlongs];
                          break;
                        case 0x510u:
                          uint64_t result = +[NSUnitLength astronomicalUnits];
                          break;
                        case 0x511u:
                          uint64_t result = +[NSUnitLength parsecs];
                          break;
                        case 0x512u:
                          uint64_t result = +[NSUnitLength scandinavianMiles];
                          break;
                        default:
                          uint64_t v2 = NSUnitLength;
                          return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                      }
                    }
                  }
                  else
                  {
                    switch(a1)
                    {
                      case 0xE00u:
                        uint64_t result = +[NSUnitInformationStorage bits];
                        break;
                      case 0xE02u:
                        uint64_t result = +[NSUnitInformationStorage gigabits];
                        break;
                      case 0xE03u:
                        uint64_t result = +[NSUnitInformationStorage gigabytes];
                        break;
                      case 0xE04u:
                        uint64_t result = +[NSUnitInformationStorage kilobits];
                        break;
                      case 0xE05u:
                        uint64_t result = +[NSUnitInformationStorage kilobytes];
                        break;
                      case 0xE06u:
                        uint64_t result = +[NSUnitInformationStorage megabits];
                        break;
                      case 0xE07u:
                        uint64_t result = +[NSUnitInformationStorage megabytes];
                        break;
                      case 0xE08u:
                        uint64_t result = +[NSUnitInformationStorage terabits];
                        break;
                      case 0xE09u:
                        uint64_t result = +[NSUnitInformationStorage terabytes];
                        break;
                      case 0xE0Au:
                        uint64_t result = +[NSUnitInformationStorage petabytes];
                        break;
                      default:
                        uint64_t v2 = NSUnitInformationStorage;
                        return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                    }
                  }
                }
              }
              else
              {
                switch(a1)
                {
                  case 0xC00u:
                    uint64_t result = +[NSUnitEnergy calories];
                    break;
                  case 0xC01u:
                    uint64_t result = +[NSUnitEnergy foodcalories];
                    break;
                  case 0xC03u:
                    uint64_t result = +[NSUnitEnergy kilocalories];
                    break;
                  case 0xC04u:
                    uint64_t result = +[NSUnitEnergy kilojoules];
                    break;
                  case 0xC05u:
                    uint64_t result = +[NSUnitEnergy kilowattHours];
                    break;
                  default:
                    uint64_t v2 = NSUnitEnergy;
                    return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
                }
              }
            }
          }
          else
          {
            switch(a1)
            {
              case 0x404u:
                uint64_t result = +[NSUnitDuration hours];
                break;
              case 0x405u:
                uint64_t result = +[NSUnitDuration minutes];
                break;
              case 0x407u:
                uint64_t result = +[NSUnitDuration milliseconds];
                break;
              case 0x408u:
                uint64_t result = +[NSUnitDuration microseconds];
                break;
              case 0x409u:
                uint64_t result = +[NSUnitDuration nanoseconds];
                break;
              default:
                uint64_t v2 = NSUnitDuration;
                return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
            }
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 0x201u:
            uint64_t result = +[NSUnitArea squareKilometers];
            break;
          case 0x202u:
            uint64_t result = +[NSUnitArea squareFeet];
            break;
          case 0x203u:
            uint64_t result = +[NSUnitArea squareMiles];
            break;
          case 0x204u:
            uint64_t result = +[NSUnitArea acres];
            break;
          case 0x205u:
            uint64_t result = +[NSUnitArea hectares];
            break;
          case 0x206u:
            uint64_t result = +[NSUnitArea squareCentimeters];
            break;
          case 0x207u:
            uint64_t result = +[NSUnitArea squareInches];
            break;
          case 0x208u:
            uint64_t result = +[NSUnitArea squareYards];
            break;
          default:
            uint64_t v2 = NSUnitArea;
            return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 0x101u:
          uint64_t result = +[NSUnitAngle arcMinutes];
          break;
        case 0x102u:
          uint64_t result = +[NSUnitAngle arcSeconds];
          break;
        case 0x103u:
          uint64_t result = +[NSUnitAngle radians];
          break;
        case 0x104u:
          uint64_t result = +[NSUnitAngle revolutions];
          break;
        default:
          uint64_t v2 = NSUnitAngle;
          return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
      }
    }
  }
  else
  {
    id v1 = NSUnitAcceleration;
    if (a1)
    {
LABEL_3:
      uint64_t v2 = v1;
      return (NSUnitVolume *)[(__objc2_class *)v2 baseUnit];
    }
    return (NSUnitVolume *)+[NSUnitAcceleration gravity];
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.forceTemperatureUnit.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 456))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceTemperatureUnit.getter in conformance _LocaleICU@<X0>(char *a1@<X8>)
{
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, (uint64_t)v6);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v6);
  char v4 = v6[137];
  if (result == 1) {
    char v4 = 2;
  }
  *a1 = v4;
  return result;
}

id NSUnitLength.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  int v8 = *a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v10 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  id v11 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v6, v7, v10, v8, a3, a4);
  swift_unknownObjectRelease();

  id result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v11);
  if (result)
  {
    id v13 = result;

    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, uint64_t a2, void *a3, int a4, unint64_t *a5, uint64_t a6)
{
  void (*v10)(unsigned char *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  id result;
  NSUnitVolume *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unsigned char v38[12];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t vars8;

  uint64_t v36 = a3;
  uint64_t v37 = a5;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  id v10 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(a2 + 448);
  swift_unknownObjectRetain();
  v10(&v38[4], ObjectType, a2);
  swift_unknownObjectRelease();
  id v11 = v39;
  if (v39)
  {
    uint64_t v34 = a4;
    uint64_t v35 = a6;
    uint64_t v12 = *(void *)&v38[4];
    id v13 = v40;
    id v14 = v41;
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
    swift_unknownObjectRetain();
    long long v16 = v15(ObjectType, a2);
    long long v18 = v17;
    long long v19 = swift_unknownObjectRelease();
    *(void *)&v38[4] = 0;
    Swift::String v39 = 0;
    MEMORY[0x1F4188790](v19);
    closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)((uint64_t)&v33, 158, v16, v18, 29549, 0xE200000000000000, v13, v14, (uint64_t *)&v38[4]);
    if (v39) {
      swift_bridgeObjectRelease();
    }
    outlined consume of Locale.LanguageCode?(v12, v11);
    LOBYTE(a4) = v34;
  }
  else
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
    swift_unknownObjectRetain();
    v20(ObjectType, a2);
    swift_unknownObjectRelease();
  }
  type metadata accessor for NSMorphologyPronoun(0, v37);
  *(void *)uint64_t v38 = 0;
  uint64_t v21 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (!v21)
  {
    Usage.rawValue.getter(a4);
    goto LABEL_16;
  }
  unsigned int v22 = v21;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  id v25 = v24;

  uint64_t v26 = Usage.rawValue.getter(a4);
  __int16 v28 = v27;
  if (!v25)
  {
LABEL_16:
    int v29 = 1;
    goto LABEL_18;
  }
  if ((v23 == (id)0x796772656E65 && v25 == 0xE600000000000000
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && (v26 == 0x746C7561666564 && v28 == 0xE700000000000000
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    int v29 = 0;
  }
  else
  {
    int v29 = 0;
  }
LABEL_18:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  if (*(int *)v38 < 1)
  {
    uint64_t v32 = getDimensionUnitFromUnitSpecifier(*(unsigned int *)&v38[4]);
    swift_bridgeObjectRelease();
    if (v32)
    {
      self;
      id result = (id)swift_dynamicCastObjCClass();
      if (result) {
        return result;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v30 = v36;

  return v30;
}

BOOL specialized static NumberFormatStyleConfiguration.SignDisplayStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

id CGFloat.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_doubleValue);
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance _PlistDecoder<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDecoder.container<A>(keyedBy:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistUnkeyedDecodingContainer.decode<A>(_:)(a1, a4, a2, a3, a5);
}

double DateInterval.end.getter@<D0>(double *a1@<X8>)
{
  double result = *v1 + v1[1];
  *a1 = result;
  return result;
}

uint64_t Data.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(a1), a1);
      int v5 = HIDWORD(a1) - a1;
      if (v4)
      {
        __break(1u);
        goto LABEL_8;
      }
      uint64_t result = v5;
      break;
    case 2uLL:
      uint64_t v8 = a1 + 16;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (__OFSUB__(v7, v6)) {
LABEL_8:
      }
        __break(1u);
      break;
    case 3uLL:
      return result;
    default:
      uint64_t result = BYTE6(a2);
      break;
  }
  return result;
}

void *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(void *a1, uint64_t *a2)
{
  return _PlistKeyedDecodingContainer.decode(_:forKey:)(a1, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

uint64_t storeEnumTagSinglePayload for AttributedString._AttributeValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

BOOL static UUID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "NSArray * _Nonnull NSAllMapTableValues(NSMapTable * _Nonnull)");
  }

  return (NSArray *)[(NSMapTable *)table allValues];
}

Swift::Double __swiftcall Date.timeIntervalSince(_:)(Foundation::Date a1)
{
  return *v2 - *v1;
}

void sub_1817EEE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_1817EF40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_1817EF8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

void _NSKeyValueObservationInfoGetObservances(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = -[NSIndexSet initWithIndexesInRange:]([NSMutableIndexSet alloc], "initWithIndexesInRange:", 0, a3);
  uint64_t v7 = v6;
  unint64_t v8 = 8 * a3;
  if ((unint64_t)(8 * a3) < 0x81)
  {
    if (a3)
    {
      MEMORY[0x1F4188790](v6);
      unsigned __int8 v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v9, 8 * a3);
    }
    else
    {
      unsigned __int8 v9 = 0;
    }
  }
  else
  {
    unsigned __int8 v9 = (char *)malloc_type_malloc(8 * a3, 0x80040B8603338uLL);
  }
  objc_msgSend(*(id *)(a1 + 8), "getObjects:range:", v9, 0, a3);
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  if (a3)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)&v9[8 * v10];
      if ((*(unsigned char *)(v11 + 40) & 0x20) == 0)
      {
        uint64_t v12 = v15;
        *(void *)(a2 + 8 * v15[3]) = v11;
        ++v12[3];
        [(NSMutableIndexSet *)v7 removeIndex:v10];
      }
      ++v10;
    }
    while (a3 != v10);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___NSKeyValueObservationInfoGetObservances_block_invoke;
  void v13[3] = &unk_1E51F8AE8;
  void v13[4] = &v14;
  v13[5] = a2;
  v13[6] = v9;
  [(NSIndexSet *)v7 enumerateIndexesUsingBlock:v13];
  if (v8 >= 0x81) {
    free(v9);
  }

  _Block_object_dispose(&v14, 8);
}

void sub_1817EFCEC(_Unwind_Exception *exception_object)
{
}

uint64_t __NSIndexSetEnumerateBitfield(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3 + a4;
  if (a3 + a4 >= 0x40) {
    uint64_t v5 = 64;
  }
  unint64_t v6 = v5 - a3;
  if (a3 <= 0x3F) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = 0;
  }
  if (a3 > 0x3F) {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    unsigned __int8 v45 = 0;
    unint64_t v44 = v7;
    if ((a2 & 2) == 0)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      unint64_t v42 = v7 + v6;
      while (2)
      {
        if (v12) {
          uint64_t v13 = v11;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = v13 - 1;
        while (1)
        {
          if (((-1 << v12) & a1) == 0) {
            return 0x7FFFFFFFFFFFFFFFLL;
          }
          unint64_t v15 = __clz(__rbit64((-1 << v12) & a1));
          unint64_t v16 = (-1 << v15) & ~a1;
          unint64_t v12 = __clz(__rbit64(v16));
          if (v11 == ++v14) {
            break;
          }
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v16 || v12 > 0x3F) {
            return v17;
          }
        }
        unint64_t v18 = v42;
        unint64_t v19 = v44;
        if (v42 >= v12) {
          unint64_t v18 = v12;
        }
        if (v15 > v44 || v44 >= v12)
        {
          if (v44 > v15) {
            goto LABEL_45;
          }
          unint64_t v21 = v18 - v15;
          unint64_t v19 = v15 < v42 ? v15 : 0;
          unint64_t v20 = v15 < v42 ? v21 : 0;
          if (!v20) {
            goto LABEL_45;
          }
        }
        else
        {
          unint64_t v20 = v18 - v44;
          if (v18 == v44) {
            goto LABEL_45;
          }
        }
        if ((a2 & 0x4000000000000000) != 0)
        {
          __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          if (v12 > 0x3F) {
            return v17;
          }
          goto LABEL_48;
        }
        if (v19 <= v19 + v20) {
          unint64_t v22 = v19 + v20;
        }
        else {
          unint64_t v22 = v19;
        }
        while (v22 != v19)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5)) {
              return v19;
            }
          }
          else
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          }
          ++v19;
        }
LABEL_45:
        if (v12 > 0x3F) {
          return 0x7FFFFFFFFFFFFFFFLL;
        }
LABEL_48:
        ++v11;
        continue;
      }
    }
    if (a1)
    {
      unint64_t v23 = ~a1;
      uint64_t v24 = 1;
      unint64_t v25 = a1;
      while (1)
      {
        unint64_t v26 = (-1 << __clz(__rbit64(v25))) & v23;
        if (!v26) {
          break;
        }
        ++v24;
        unint64_t v25 = (-1 << __clz(__rbit64(v26))) & a1;
        if (!v25)
        {
          --v24;
          break;
        }
      }
      if (v24)
      {
        unint64_t v27 = v7 + v6;
        uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v43 = v7 + v6;
        while (1)
        {
          LOBYTE(v28) = 0;
          uint64_t v29 = v24--;
          uint64_t v30 = v44;
          while (1)
          {
            if (((-1 << v28) & a1) == 0)
            {
              unint64_t v33 = 0;
              unint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_64;
            }
            unint64_t v31 = __clz(__rbit64((-1 << v28) & a1));
            unint64_t v32 = (-1 << v31) & v23;
            unint64_t v28 = __clz(__rbit64(v32));
            if (!--v29) {
              break;
            }
            unint64_t v33 = 0;
            unint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v32 || v28 > 0x3F) {
              goto LABEL_64;
            }
          }
          unint64_t v33 = v28 - v31;
LABEL_64:
          if (v27 >= v33 + v31) {
            unint64_t v34 = v33 + v31;
          }
          else {
            unint64_t v34 = v27;
          }
          if (v31 > v44 || v44 >= v33 + v31)
          {
            unint64_t v36 = v34 - v31;
            if (v31 < v27) {
              unint64_t v37 = v31;
            }
            else {
              unint64_t v37 = 0;
            }
            if (v31 >= v27) {
              unint64_t v36 = 0;
            }
            if (v44 <= v31) {
              uint64_t v30 = v37;
            }
            else {
              uint64_t v30 = 0;
            }
            if (v44 <= v31) {
              unint64_t v35 = v36;
            }
            else {
              unint64_t v35 = 0;
            }
            if (!v35) {
              goto LABEL_96;
            }
          }
          else
          {
            unint64_t v35 = v34 - v44;
            if (v34 == v44) {
              goto LABEL_96;
            }
          }
          if ((a2 & 0x4000000000000000) != 0)
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
            int v39 = v45;
            goto LABEL_95;
          }
          if ((uint64_t)(v35 + v30 - 1) >= v30)
          {
            uint64_t v38 = v35 + v30 - 2;
            do
            {
              if ((a2 & 0x2000000000000000) != 0)
              {
                if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5))
                {
                  unsigned __int8 v45 = 1;
                  uint64_t v17 = v38 + 1;
                }
              }
              else
              {
                __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
              }
              int v39 = v45;
              if (v45) {
                break;
              }
            }
            while (v38-- >= v30);
LABEL_95:
            unint64_t v27 = v43;
            if (v39) {
              return v17;
            }
          }
LABEL_96:
          if (!v24) {
            return v17;
          }
        }
      }
    }
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t __NSIndexSetEnumerate(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v8 = a2;
  if (a1 < 0)
  {
    uint64_t v10 = *MEMORY[0x1E4FBA8E0];
    if ((~a1 & 0xC000000000000007) == 0) {
      uint64_t v10 = 0;
    }
    unint64_t v11 = v10 ^ a1;
    uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v11 & 7) == 0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFLL;
    }
    unint64_t v13 = v12 & (v11 >> 3);
    goto LABEL_16;
  }
  if ((*(unsigned char *)(a1 + 8) & 2) == 0)
  {
    if (a2)
    {
      uint64_t v19 = MEMORY[0xFFFFFC034];
      if (MEMORY[0xFFFFFC034] < 2u) {
        unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v8)
      {
        unint64_t v16 = a3 + a4;
        if ((v8 & 0x4000000000000000) != 0)
        {
          uint64_t v17 = objc_msgSend((id)a1, "_indexOfRangeAfterOrContainingIndex:");
          uint64_t v18 = [(id)a1 _indexOfRangeBeforeOrContainingIndex:v16 - 1];
        }
        else
        {
          uint64_t v17 = objc_msgSend((id)a1, "indexGreaterThanOrEqualToIndex:");
          uint64_t v18 = [(id)a1 indexLessThanIndex:a3 + a4];
        }
        unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        if (v17 != 0x7FFFFFFFFFFFFFFFLL && v18 != 0x7FFFFFFFFFFFFFFFLL)
        {
          unint64_t v23 = v18 - v17 + 1;
          uint64_t v24 = 32;
          uint64_t v25 = 16;
          uint64_t v26 = 4;
          if (v23 < 4 * v19) {
            uint64_t v26 = 1;
          }
          if (v23 < 16 * v19) {
            uint64_t v25 = v26;
          }
          if (v23 < 32 * v19) {
            uint64_t v24 = v25;
          }
          if (48 * v19 > v23) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = 48;
          }
          if (v23 < v19 << 6) {
            unint64_t v28 = v27;
          }
          else {
            unint64_t v28 = 64;
          }
          uint64_t v58 = 0;
          uint64_t v59 = &v58;
          uint64_t v60 = 0x2020000000;
          uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
          v56[0] = 0;
          v56[1] = v56;
          v56[2] = 0x2020000000;
          char v57 = 0;
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = ____NSIndexSetEnumerate_block_invoke;
          block[3] = &unk_1E51F85D8;
          block[8] = v17;
          block[9] = v28;
          block[10] = v18;
          block[11] = v8;
          block[12] = a3;
          block[13] = a4;
          block[4] = a1;
          block[5] = a5;
          block[6] = v56;
          void block[7] = &v58;
          dispatch_apply((v28 + v18 - v17) / v28, 0, block);
          if ((*(unsigned char *)(a1 + 8) & 1) == 0)
          {
            pthread_t v29 = pthread_self();
            atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 16) + 56), (unint64_t *)&v29, 0);
          }
          unint64_t v14 = atomic_load((unint64_t *)v59 + 3);
          _Block_object_dispose(v56, 8);
          _Block_object_dispose(&v58, 8);
        }
        return v14;
      }
    }
    _CFAutoreleasePoolPush();
    int v20 = *(_DWORD *)(a1 + 8);
    if ((v20 & 2) != 0)
    {
      unint64_t v21 = (void *)(a1 + 16);
      BOOL v22 = (*(_DWORD *)(a1 + 8) & 1) == 0;
    }
    else
    {
      if (v20)
      {
        unint64_t v31 = *(void *)(a1 + 24) != 0;
        goto LABEL_80;
      }
      unint64_t v21 = (void *)(*(void *)(a1 + 16) + 8);
      BOOL v22 = 1;
    }
    if (*v21)
    {
      if (v22)
      {
        uint64_t v30 = *(void *)(a1 + 16);
        unint64_t v31 = *(void *)(v30 + 8);
        goto LABEL_49;
      }
      unint64_t v31 = 1;
    }
    else
    {
      unint64_t v31 = 0;
      if (v22)
      {
        uint64_t v30 = *(void *)(a1 + 16);
LABEL_49:
        uint64_t v32 = v30 + 16 * *(void *)(v30 + 24) + 64;
        if ((v8 & 2) != 0) {
          goto LABEL_50;
        }
        goto LABEL_81;
      }
    }
LABEL_80:
    uint64_t v32 = a1 + 16;
    if ((v8 & 2) != 0)
    {
LABEL_50:
      LOBYTE(v58) = 0;
      unint64_t v33 = a3 + a4;
      unint64_t v34 = [(id)a1 _indexOfRangeBeforeOrContainingIndex:a3 + a4 - 1];
      if (v34 <= 0x7FFFFFFFFFFFFFFELL)
      {
        for (uint64_t i = v34; ; --i)
        {
          unint64_t v36 = (unint64_t *)(v32 + 16 * i);
          unint64_t v38 = *v36;
          unint64_t v37 = v36[1];
          unint64_t v39 = v37 + v38;
          unint64_t v40 = v37 + v38 >= v33 ? v33 : v37 + v38;
          if (a3 > v38 || v38 >= v33)
          {
            if (v38 > a3 || a3 >= v39)
            {
              unint64_t v38 = 0;
              unint64_t v43 = 0;
            }
            else
            {
              unint64_t v43 = v40 - a3;
              unint64_t v38 = a3;
            }
          }
          else
          {
            unint64_t v43 = v40 - v38;
          }
          if (!v43) {
            break;
          }
          if ((v8 & 0x4000000000000000) != 0)
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
            unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
            if (i < 1) {
              goto LABEL_112;
            }
          }
          else
          {
            unint64_t v14 = v38 + v43;
            while (v38 < v14)
            {
              --v14;
              if ((v8 & 0x2000000000000000) != 0)
              {
                if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5)) {
                  goto LABEL_112;
                }
              }
              else
              {
                __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
              }
            }
            if (i < 1) {
              goto LABEL_111;
            }
          }
        }
      }
      goto LABEL_111;
    }
LABEL_81:
    LOBYTE(v58) = 0;
    unint64_t v44 = [(id)a1 _indexOfRangeAfterOrContainingIndex:a3];
    unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v44 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_112;
    }
    unint64_t v45 = v44;
    if (v44 >= v31) {
      goto LABEL_112;
    }
    unint64_t v46 = a3 + a4;
    do
    {
      while (1)
      {
        uint64_t v47 = (unint64_t *)(v32 + 16 * v45);
        unint64_t v14 = *v47;
        unint64_t v48 = v47[1];
        unint64_t v49 = v48 + v14;
        unint64_t v50 = v48 + v14 >= v46 ? v46 : v48 + v14;
        if (a3 > v14 || v14 >= v46)
        {
          if (v14 > a3 || a3 >= v49) {
            goto LABEL_111;
          }
          unint64_t v53 = v50 - a3;
          unint64_t v14 = a3;
          if (v50 == a3) {
            goto LABEL_111;
          }
        }
        else
        {
          unint64_t v53 = v50 - v14;
          if (v50 == v14) {
            goto LABEL_111;
          }
        }
        if ((v8 & 0x4000000000000000) == 0) {
          break;
        }
        __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
        unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        if (++v45 >= v31) {
          goto LABEL_112;
        }
      }
      if (v14 < v14 + v53)
      {
        do
        {
          if ((v8 & 0x2000000000000000) != 0)
          {
            if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5)) {
              goto LABEL_112;
            }
          }
          else
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          }
          ++v14;
          --v53;
        }
        while (v53);
      }
      ++v45;
    }
    while (v45 < v31);
LABEL_111:
    unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_112:
    if ((*(unsigned char *)(a1 + 8) & 1) == 0)
    {
      pthread_t v54 = pthread_self();
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 16) + 56), (unint64_t *)&v54, 0);
    }
    _CFAutoreleasePoolPop();
    return v14;
  }
  unint64_t v13 = *(void *)(a1 + 16);
LABEL_16:

  return __NSIndexSetEnumerateBitfield(v13, a2, a3, a4, a5);
}

void sub_1817F06C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

objc_class *__NSIndexSetParameterCheckIterate(objc_class *result, const char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (!a3)
  {
    unint64_t v6 = +[NSString stringWithFormat:@"%@: block is nil", _NSMethodExceptionProem(result, a2)];
    unint64_t v7 = (void *)MEMORY[0x1E4F1CA00];
    unint64_t v8 = (void *)MEMORY[0x1E4F1C3C8];
    goto LABEL_13;
  }
  if ((a4 & 0x800000000000000) != 0 && a6)
  {
    if (a5 > 0x7FFFFFFFFFFFFFFELL || a6 == 0x7FFFFFFFFFFFFFFFLL || a6 < 0)
    {
      unsigned __int8 v9 = +[NSString stringWithFormat:@"%@: a range field {%ld, %ld} is NSNotFound or beyond bounds (%ld)", _NSMethodExceptionProem(result, a2), a5, a6, 0x7FFFFFFFFFFFFFFFLL];
    }
    else
    {
      if ((uint64_t)(a5 + a6) > 0) {
        return result;
      }
      unsigned __int8 v9 = +[NSString stringWithFormat:@"%@: last range index (%ld) beyond bounds (%ld)", _NSMethodExceptionProem(result, a2), a5 + a6 - 1, 0x7FFFFFFFFFFFFFFELL, v10];
    }
    unint64_t v6 = v9;
    unint64_t v7 = (void *)MEMORY[0x1E4F1CA00];
    unint64_t v8 = (void *)MEMORY[0x1E4F1C4A8];
LABEL_13:
    objc_exception_throw((id)[v7 exceptionWithName:*v8 reason:v6 userInfo:0]);
  }
  return result;
}

void sub_1817F1278(_Unwind_Exception *exception_object)
{
}

void _filterObjectsUsingPredicate(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  unint64_t v8 = [a1 count];
  unsigned __int8 v9 = (objc_class *)objc_opt_class();
  MethodIMP Implementation = class_getMethodImplementation(v9, sel_evaluateWithObject_);
  if (v8 >> 60)
  {
    CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt", v8);
    int v20 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v19 userInfo:0];
    CFRelease(v19);
    objc_exception_throw(v20);
  }
  unint64_t v11 = (unsigned int (*)(void, void, void))MethodImplementation;
  if (v8 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v8;
  }
  double v13 = MEMORY[0x1F4188790](v12);
  unint64_t v15 = (void *)((char *)v21 - v14);
  v21[0] = 0;
  if (v8 >= 0x101)
  {
    unint64_t v15 = (void *)_CFCreateArrayStorage();
    unint64_t v16 = v15;
  }
  else
  {
    unint64_t v16 = 0;
  }
  objc_msgSend(a1, "getObjects:range:", v15, 0, v8, v13, v21[0]);
  for (uint64_t i = 0; v8; --v8)
  {
    uint64_t v18 = *v15;
    if (v11(a2, sel_evaluateWithObject_, *v15)) {
      *(void *)(a3 + 8 * i++) = v18;
    }
    ++v15;
  }
  *a4 = i;
  free(v16);
}

void sub_1817F1458(_Unwind_Exception *exception_object)
{
}

uint64_t __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke_2(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2 - *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v4 >= *(void *)(a1 + 64)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8 * v4);
  }
  if (*(void *)(a1 + 80) <= a2) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = [*(id *)(a1 + 32) objectAtIndex:a2];
  }
  if (v5 == result)
  {
    unint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    if (!v7)
    {
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = [*(id *)(a1 + 40) mutableCopy];
      unint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    }
    return [v7 removeIndex:a2];
  }
  else
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  return result;
}

uint64_t type metadata instantiation function for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSFileAttributeKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  uint64_t v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ResolveKeyPathsIntoExpressionSequence(void *a1, void *a2)
{
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = [a2 pathExpression];
    if (objc_opt_isKindOfClass()) {
      a2 = (void *)v4;
    }
    if (objc_opt_isKindOfClass())
    {
      uint64_t v5 = (void *)[a1 pathExpression];
      if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_isKindOfClass())
      {
        unint64_t v6 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", @"%@.%@", [v5 keyPath], objc_msgSend(a2, "keyPath"));
        unint64_t v7 = [[NSKeyPathSpecifierExpression alloc] initWithObject:v6];
        [a1 operand];
        isKindOfClass Class = objc_opt_isKindOfClass();
        unsigned __int8 v9 = [NSKeyPathExpression alloc];
        uint64_t v10 = (uint64_t)((isKindOfClass & 1) != 0
                      ? [(NSKeyPathExpression *)v9 initWithKeyPath:v7]
                      : -[NSKeyPathExpression initWithOperand:andKeyPath:](v9, "initWithOperand:andKeyPath:", [a1 operand], v7));
        double v13 = (NSKeyPathExpression *)v10;

        if (v13) {
          return (uint64_t)v13;
        }
      }
    }
    else if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_isKindOfClass())
    {
      double v13 = [[NSKeyPathExpression alloc] initWithKeyPath:a2];
      if (v13) {
        return (uint64_t)v13;
      }
    }
  }
  else
  {
    objc_opt_isKindOfClass();
    objc_opt_isKindOfClass();
  }
  unint64_t v11 = [NSKeyPathExpression alloc];

  return (uint64_t)[(NSKeyPathExpression *)v11 initWithOperand:a1 andKeyPath:a2];
}

void **_qfqp2_performParsing(void *a1, void *a2, void *a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if ((_qfqp2_InitializedGlobals & 1) == 0) {
    _qfqp2_InitializedGlobalData();
  }
  if (!a1) {
    return 0;
  }
  unint64_t v6 = (char *)[a1 UTF8String];
  int v7 = strlen(v6);
  uint64_t result = (void **)_qfqp2_scan_bytes(v6, v7);
  if (!result) {
    return result;
  }
  uint64_t v71 = a1;
  uint64_t v72 = result;
  int v9 = 0;
  int v10 = 0u;
  v75[0] = 0;
  v75[1] = a1;
  unint64_t v11 = (void **)v77;
  uint64_t v12 = 200;
  v75[2] = a2;
  v75[3] = a3;
  v75[4] = 0;
  id v76 = 0;
  __src = v77;
  double v13 = v78;
  uint64_t v14 = v78;
  int v15 = -2;
  while (1)
  {
    *(_WORD *)double v13 = v10;
    if (&v14[2 * v12 - 2] <= v13)
    {
      if ((unint64_t)v12 >> 4 > 0x270
        || ((unint64_t)(2 * v12) >= 0x2710 ? (uint64_t v12 = 10000) : (v12 *= 2),
            unint64_t v16 = (char *)malloc_type_malloc(10 * v12 + 7, 0x3C0A45C3uLL),
            (uint64_t v17 = v16) == 0))
      {
        int v65 = 2;
        goto LABEL_144;
      }
      uint64_t v18 = (v13 - v14) >> 1;
      uint64_t v19 = v18 + 1;
      memcpy(v16, v14, 2 * (v18 + 1));
      memcpy(&v17[(2 * v12 + 7) & 0xFFFFFFFFFFFFFFF8], __src, 8 * (v18 + 1));
      if (v14 != v78) {
        free(v14);
      }
      double v13 = &v17[2 * v18];
      unint64_t v11 = (void **)&v17[8 * v19 - 8 + ((2 * v12 + 7) & 0xFFFFFFFFFFFFFFF8)];
      if (v12 <= v19)
      {
        int v65 = 1;
        uint64_t v14 = v17;
        goto LABEL_144;
      }
      __src = &v17[(2 * v12 + 7) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v14 = v17;
    }
    int v20 = yypact[v10];
    if (v20 == -58) {
      goto LABEL_32;
    }
    if (v15 == -2) {
      int v15 = _qfqp2lex((double *)&v76);
    }
    if (v15 < 1)
    {
      int v9 = 0;
      int v15 = 0u;
    }
    else
    {
      int v9 = v15 > 0x153 ? 2 : yytranslate[v15];
    }
    uint64_t v21 = (v9 + v20);
    if (v21 > 0x32A || v9 != (__int16)yycheck[v21])
    {
LABEL_32:
      unsigned int v23 = yydefact[v10];
      if (!yydefact[v10]) {
        goto LABEL_139;
      }
      goto LABEL_33;
    }
    int v22 = yytable[v21];
    if (v22 <= 0) {
      break;
    }
    if (v21 == 71)
    {
      int v65 = 0;
      goto LABEL_144;
    }
    if (v15) {
      int v15 = -2;
    }
    else {
      int v15 = 0;
    }
    v11[1] = v76;
    ++v11;
LABEL_120:
    v13 += 2;
    int v10 = v22;
  }
  if (yytable[v21])
  {
    unsigned int v23 = -v22;
LABEL_33:
    uint64_t v24 = yyr2[v23];
    switch(v23)
    {
      case 2u:
      case 3u:
        v75[0] = *v11;
        goto LABEL_34;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x54u:
      case 0x55u:
      case 0x5Du:
      case 0x6Bu:
LABEL_34:
        uint64_t SetExpression = (uint64_t)*v11;
        break;
      case 9u:
        unint64_t v38 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = [[NSCompoundPredicate alloc] initWithType:1 subpredicates:v38];

        goto LABEL_114;
      case 0xAu:
        uint64_t SetExpression = objc_alloc_init(NSTruePredicate);
        break;
      case 0xBu:
        uint64_t SetExpression = objc_alloc_init(NSFalsePredicate);
        break;
      case 0xCu:
      case 0x2Eu:
        uint64_t SetExpression = (uint64_t)*(v11 - 1);
        break;
      case 0x10u:
        FunctionExpression = (NSComparisonPredicate *)buildANDPredicate(*(v11 - 2), *v11);

        goto LABEL_114;
      case 0x11u:
        FunctionExpression = (NSComparisonPredicate *)buildORPredicate(*(v11 - 2), *v11);

        goto LABEL_114;
      case 0x12u:
        unint64_t v42 = (NSConstantValueExpression *)invertPredicate(*v11);
        goto LABEL_113;
      case 0x16u:
        FunctionExpression = [[NSComparisonPredicate alloc] initWithPredicateOperator:*(v11 - 1) leftExpression:*(v11 - 2) rightExpression:*v11];

        goto LABEL_114;
      case 0x17u:
        char v57 = NSStringForLexedIdentifier(*(v11 - 2));
        id v58 = CopyBasicOperatorAddOptions(*(v11 - 4), v57);
        FunctionExpression = [[NSComparisonPredicate alloc] initWithPredicateOperator:v58 leftExpression:*(v11 - 5) rightExpression:*v11];

        goto LABEL_114;
      case 0x18u:
        id v41 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = [[NSComparisonPredicate alloc] initWithPredicateOperator:*(v11 - 1) leftExpression:v41 rightExpression:*v11];

        goto LABEL_114;
      case 0x19u:
        unint64_t v43 = NSStringForLexedIdentifier(*(v11 - 2));
        unint64_t v44 = (void *)PredicateOperatorForCustomSelector((uint64_t)v43);
        FunctionExpression = [[NSComparisonPredicate alloc] initWithPredicateOperator:v44 leftExpression:*(v11 - 3) rightExpression:*v11];

        goto LABEL_114;
      case 0x1Au:
        long long v70 = NSStringForLexedIdentifier(*(v11 - 2));
        unint64_t v46 = (void *)PredicateOperatorForCustomSelector((uint64_t)v70);
        uint64_t v47 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = [[NSComparisonPredicate alloc] initWithPredicateOperator:v46 leftExpression:v47 rightExpression:*v11];

        goto LABEL_114;
      case 0x1Eu:
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)*(v11 - 2), (uint64_t)*(v11 - 1), 0, (uint64_t)*v11);

        goto LABEL_114;
      case 0x1Fu:
        uint64_t v63 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)v63, (uint64_t)*(v11 - 1), 0, (uint64_t)*v11);

        goto LABEL_114;
      case 0x20u:
        char v56 = NSStringForLexedIdentifier(*(v11 - 2));
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)*(v11 - 5), (uint64_t)*(v11 - 4), v56, (uint64_t)*v11);

        goto LABEL_114;
      case 0x21u:
        unint64_t v39 = NSStringForLexedIdentifier(*(v11 - 2));
        unint64_t v40 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)v40, (uint64_t)*(v11 - 4), v39, (uint64_t)*v11);

        goto LABEL_114;
      case 0x22u:
        uint64_t SetExpression = 7;
        break;
      case 0x23u:
        uint64_t SetExpression = 6;
        break;
      case 0x24u:
        uint64_t SetExpression = 10;
        break;
      case 0x25u:
        uint64_t SetExpression = 99;
        break;
      case 0x26u:
        uint64_t SetExpression = 8;
        break;
      case 0x27u:
        uint64_t SetExpression = 9;
        break;
      case 0x28u:
        uint64_t SetExpression = 1000;
        break;
      case 0x29u:
        FunctionExpression = HandleBetweenPredicate((uint64_t)*(v11 - 2), (uint64_t)*v11);

        goto LABEL_114;
      case 0x2Au:
      case 0x2Bu:
        uint64_t SetExpression = (uint64_t)setOperatorModifier(*v11, 2);
        break;
      case 0x2Cu:
        uint64_t SetExpression = (uint64_t)setOperatorModifier(*v11, 1);
        break;
      case 0x2Du:
        unint64_t v48 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", setOperatorModifier(*v11, 2), 0);
        FunctionExpression = [[NSCompoundPredicate alloc] initWithType:0 subpredicates:v48];

        goto LABEL_114;
      case 0x3Bu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(4, 0);
        break;
      case 0x3Cu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(5, 0);
        break;
      case 0x3Du:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(0, 0);
        break;
      case 0x3Eu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(2, 0);
        break;
      case 0x3Fu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(1, 0);
        break;
      case 0x40u:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(3, 0);
        break;
      case 0x41u:
        uint64_t SetExpression = [[NSUTIPredicateOperator alloc] initForVariant:0];
        break;
      case 0x42u:
        uint64_t SetExpression = [[NSUTIPredicateOperator alloc] initForVariant:1];
        break;
      case 0x48u:
      case 0x49u:
        unint64_t v42 = [[NSConstantValueExpression alloc] initWithObject:*v11];
        goto LABEL_113;
      case 0x4Au:
        uint64_t SetExpression = [[NSConstantValueExpression alloc] initWithObject:0];
        break;
      case 0x4Bu:
        uint64_t v32 = [NSConstantValueExpression alloc];
        uint64_t SetExpression = [(NSConstantValueExpression *)v32 initWithObject:_MergedGlobals_136];
        break;
      case 0x4Cu:
        uint64_t v64 = [NSConstantValueExpression alloc];
        uint64_t SetExpression = [(NSConstantValueExpression *)v64 initWithObject:qword_1EB1ED9B8];
        break;
      case 0x4Du:
        uint64_t SetExpression = objc_alloc_init(NSSelfExpression);
        break;
      case 0x4Eu:
        uint64_t SetExpression = [[NSSymbolicExpression alloc] initWithString:@"FIRST"];
        break;
      case 0x4Fu:
        uint64_t SetExpression = [[NSSymbolicExpression alloc] initWithString:@"LAST"];
        break;
      case 0x50u:
        uint64_t SetExpression = [[NSSymbolicExpression alloc] initWithString:@"SIZE"];
        break;
      case 0x51u:
        UserFunctionExpression = [[NSAggregateExpression alloc] initWithCollection:*(v11 - 1)];
        goto LABEL_129;
      case 0x52u:
      case 0x53u:
      case 0x67u:
        uint64_t SetExpression = (uint64_t)NSStringForLexedIdentifier(*v11);
        break;
      case 0x56u:
        uint64_t v49 = (uint64_t)*v11;
        unint64_t v50 = [NSNumber alloc];
        if (v49 > 0x7FFFFFFF) {
          uint64_t SetExpression = [(NSNumber *)v50 initWithLongLong:v49];
        }
        else {
          uint64_t SetExpression = [(NSNumber *)v50 initWithInt:v49];
        }
        break;
      case 0x57u:
        uint64_t SetExpression = [[NSNumber alloc] initWithDouble:*(double *)v11];
        break;
      case 0x58u:
        unint64_t v31 = NSStringForLexedIdentifier(*v11);
        KVCExpression = [[NSVariableExpression alloc] initWithObject:v31];
        goto LABEL_132;
      case 0x59u:
        unint64_t v31 = NSStringForLexedIdentifier(*v11);
        KVCExpression = (NSVariableExpression *)ResolvePredicateArgument(v31, v75);
        goto LABEL_132;
      case 0x5Au:
        uint64_t SetExpression = (uint64_t)ResolvePredicateArgument(@"@", v75);
        break;
      case 0x5Bu:
        uint64_t SetExpression = (uint64_t)ResolvePredicateArgument(@"%", v75);
        break;
      case 0x5Cu:
      case 0x6Au:
        uint64_t SetExpression = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        break;
      case 0x5Eu:
      case 0x6Cu:
        unint64_t v33 = (NSComparisonPredicate *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        [(NSComparisonPredicate *)v33 addObject:*v11];
        FunctionExpression = v33;
        goto LABEL_114;
      case 0x5Fu:
      case 0x6Du:
        [*(v11 - 2) addObject:*v11];
        FunctionExpression = (NSComparisonPredicate *)*(v11 - 2);
        goto LABEL_114;
      case 0x60u:
        unint64_t v31 = NSStringForLexedIdentifier(*v11);
        KVCExpression = (NSVariableExpression *)CreateKVCExpression((uint64_t)v31);
        goto LABEL_132;
      case 0x61u:
        uint64_t v30 = NSStringForLexedIdentifier(*v11);
        unint64_t v31 = [[NSString alloc] initWithFormat:@"@%@", v30];
        FunctionExpression = (NSComparisonPredicate *)CreateKVCExpression((uint64_t)v31);

        goto LABEL_115;
      case 0x62u:
        FunctionExpression = (NSComparisonPredicate *)ResolveKeyPathsIntoExpressionSequence(*(v11 - 2), *v11);

        goto LABEL_114;
      case 0x63u:
        FunctionExpression = -[NSVariableAssignmentExpression initWithAssignmentVariable:expression:]([NSVariableAssignmentExpression alloc], "initWithAssignmentVariable:expression:", [*(v11 - 2) variable], *v11);

        goto LABEL_114;
      case 0x64u:
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)*(v11 - 3), *(v11 - 1));

        goto LABEL_135;
      case 0x65u:
        UserFunctionExpression = (NSAggregateExpression *)HandleCastingOperation(*(v11 - 1));
        goto LABEL_129;
      case 0x66u:
        UserFunctionExpression = (NSAggregateExpression *)CreateUserFunctionExpression(*(v11 - 1));
LABEL_129:
        FunctionExpression = (NSComparisonPredicate *)UserFunctionExpression;
        goto LABEL_135;
      case 0x68u:
        unint64_t v31 = NSStringForLexedIdentifier(*(v11 - 1));
        KVCExpression = [[NSString alloc] initWithFormat:@"%@:", v31];
LABEL_132:
        FunctionExpression = (NSComparisonPredicate *)KVCExpression;
        goto LABEL_115;
      case 0x69u:
        uint64_t v62 = NSStringForLexedIdentifier(*(v11 - 2));
        FunctionExpression = [[NSString alloc] initWithFormat:@"%@:%@", v62, *v11];

        goto LABEL_114;
      case 0x6Eu:
        unint64_t v36 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 3), *(v11 - 1), 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"objectFrom:withIndex:", v36);

        goto LABEL_135;
      case 0x6Fu:
        uint64_t v27 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"add:to:", v27);

        goto LABEL_114;
      case 0x70u:
        uint64_t v26 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"from:subtract:", v26);

        goto LABEL_114;
      case 0x71u:
        __int16 v55 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"multiply:by:", v55);

        goto LABEL_114;
      case 0x72u:
        __int16 v52 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"divide:by:", v52);

        goto LABEL_114;
      case 0x73u:
        unint64_t v37 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"raise:toPower:", v37);

        goto LABEL_114;
      case 0x74u:
        unint64_t v35 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"bitwiseAnd:with:", v35);

        goto LABEL_114;
      case 0x75u:
        BOOL v51 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"bitwiseOr:with:", v51);

        goto LABEL_114;
      case 0x76u:
        pthread_t v54 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"bitwiseXor:with:", v54);

        goto LABEL_114;
      case 0x77u:
        unint64_t v45 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"leftshift:by:", v45);

        goto LABEL_114;
      case 0x78u:
        unint64_t v53 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"rightshift:by:", v53);

        goto LABEL_114;
      case 0x79u:
        unint64_t v42 = HandleUnaryMinus(*v11);
LABEL_113:
        FunctionExpression = (NSComparisonPredicate *)v42;
        goto LABEL_114;
      case 0x7Au:
        pthread_t v29 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"onesComplement:", v29);

LABEL_114:
        unint64_t v31 = (NSString *)*v11;
        goto LABEL_115;
      case 0x7Bu:
        FunctionExpression = -[NSSubqueryExpression initWithExpression:usingIteratorVariable:predicate:]([NSSubqueryExpression alloc], "initWithExpression:usingIteratorVariable:predicate:", *(v11 - 5), [*(v11 - 3) variable], *(v11 - 1));

        goto LABEL_135;
      case 0x7Cu:
        uint64_t SetExpression = (uint64_t)CreateSetExpression(*(v11 - 2), 5, *v11);
        break;
      case 0x7Du:
        uint64_t SetExpression = (uint64_t)CreateSetExpression(*(v11 - 2), 6, *v11);
        break;
      case 0x7Eu:
        uint64_t SetExpression = (uint64_t)CreateSetExpression(*(v11 - 2), 7, *v11);
        break;
      case 0x7Fu:
        FunctionExpression = (NSComparisonPredicate *)CreateFetchExpression((uint64_t)*(v11 - 5), (uint64_t)*(v11 - 3), 1);

        goto LABEL_88;
      case 0x80u:
        FunctionExpression = (NSComparisonPredicate *)CreateFetchExpression((uint64_t)*(v11 - 5), (uint64_t)*(v11 - 3), 0);

LABEL_88:
        unint64_t v31 = (NSString *)*(v11 - 3);
        goto LABEL_115;
      case 0x81u:
        FunctionExpression = [[NSTernaryExpression alloc] initWithPredicate:*(v11 - 5) trueExpression:*(v11 - 3) falseExpression:*(v11 - 1)];

LABEL_135:
        unint64_t v31 = (NSString *)*(v11 - 1);
LABEL_115:

        uint64_t SetExpression = (uint64_t)FunctionExpression;
        break;
      default:
        uint64_t SetExpression = (uint64_t)v11[1 - v24];
        break;
    }
    uint64_t v59 = &v11[-v24];
    v13 -= 2 * v24;
    v59[1] = (void *)SetExpression;
    unint64_t v11 = v59 + 1;
    uint64_t v60 = yyr1[v23] - 85;
    uint64_t v61 = (*(__int16 *)v13 + yypgoto[v60]);
    if (v61 <= 0x32A && yycheck[v61] == *(unsigned __int16 *)v13) {
      int v22 = yytable[v61];
    }
    else {
      int v22 = yydefgoto[v60];
    }
    goto LABEL_120;
  }
LABEL_139:
  if (v13 == v14)
  {
    int v65 = 1;
    uint64_t v14 = v13;
  }
  else
  {
    do
    {
      yydestruct(yystos[v10], v11--);
      int v66 = *((__int16 *)v13 - 1);
      v13 -= 2;
      int v10 = v66;
    }
    while (v13 != v14);
    int v65 = 1;
    double v13 = v14;
  }
LABEL_144:
  if (v15 != -2 && v15) {
    yydestruct(v9, &v76);
  }
  for (; v13 != v14; v13 -= 2)
    yydestruct(yystos[*(__int16 *)v13], v11--);
  if (v14 != v78) {
    free(v14);
  }
  if (v65 == 2)
  {
    uint64_t v68 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"The predicate parser overflowed its buffer." userInfo:0];
  }
  else
  {
    if (v65 != 1)
    {
      _qfqp2_delete_buffer(v72);
      return (void **)v75[0];
    }
    uint64_t v67 = +[NSString stringWithFormat:@"Unable to parse the format string \"%@\"", v71];
    uint64_t v68 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v67 userInfo:0];
  }
  long long v69 = (void *)v68;
  _qfqp2_delete_buffer(v72);
  uint64_t result = (void **)v75[0];
  if (v69)
  {

    return (void **)v69;
  }
  return result;
}

void sub_1817F3D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t _qfqp2lex(double *a1)
{
  *(void *)&v90[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = &_NS_cmark_node_get_fence_info;
  uint64_t v3 = &_NS_cmark_node_get_fence_info;
  uint64_t v4 = &qword_1EB1ED000;
  uint64_t v5 = &_NS_cmark_node_get_fence_info;
  if ((_MergedGlobals_135 & 1) == 0)
  {
    _MergedGlobals_135 = 1;
    if (!dword_1EB1ED994) {
      dword_1EB1ED994 = 1;
    }
    if (!_qfqp2in) {
      _qfqp2in = *MEMORY[0x1E4F143D0];
    }
    if (!qword_1EB1ED9A0) {
      qword_1EB1ED9A0 = *MEMORY[0x1E4F143D8];
    }
    if (!yy_buffer_stack || (uint64_t v6 = *(void *)yy_buffer_stack) == 0)
    {
      _qfqp2ensure_buffer_stack();
      int v7 = (FILE *)_qfqp2in;
      unint64_t v8 = malloc_type_malloc(0x48uLL, 0xF7B9761EuLL);
      if (!v8
        || (uint64_t v6 = (uint64_t)v8,
            void v8[3] = 0x4000,
            int v9 = malloc_type_malloc(0x4002uLL, 0xF7B9761EuLL),
            (*(void *)(v6 + 8) = v9) == 0))
      {
        uint64_t v78 = (FILE *)*MEMORY[0x1E4F143C8];
        uint64_t v79 = "out of dynamic memory in _qfqp2_create_buffer()";
        goto LABEL_231;
      }
      *(_DWORD *)(v6 + 40) = 1;
      _qfqp2_init_buffer(v6, v7);
      *(void *)yy_buffer_stack = v6;
      uint64_t v5 = &_NS_cmark_node_get_fence_info;
      uint64_t v2 = &_NS_cmark_node_get_fence_info;
      uint64_t v3 = &_NS_cmark_node_get_fence_info;
    }
    yy_n_chars = *(void *)(v6 + 32);
    int v10 = *(unsigned char **)(v6 + 16);
    v2[26] = v10;
    _qfqp2text = (uint64_t)v10;
    _qfqp2in = *(void *)v6;
    *((unsigned char *)v3 + 112) = *v10;
  }
  int64_t v85 = v90;
  uint64_t v86 = 0;
LABEL_15:
  uint64_t v11 = (uint64_t)v2[26];
  *(unsigned char *)uint64_t v11 = *((unsigned char *)v3 + 112);
  LODWORD(v12) = *((_DWORD *)v4 + 613);
  uint64_t v87 = v11;
  do
  {
LABEL_16:
    uint64_t v13 = yy_ec[4 * *(unsigned __int8 *)v11];
    if (yy_accept[(int)v12])
    {
      dword_1EB1ED998 = v12;
      qword_1EB1ED9A8 = v11;
    }
    uint64_t v14 = (int)v12;
    int v15 = yy_base[(int)v12] + v13;
    if (yy_chk[v15] != v12)
    {
      do
      {
        uint64_t v14 = yy_def[v14];
        if ((int)v14 >= 304) {
          LOBYTE(v13) = yy_meta[4 * v13];
        }
        int v15 = yy_base[v14] + v13;
      }
      while (yy_chk[v15] != v14);
    }
    uint64_t v12 = (int)yy_nxt[v15];
    ++v11;
  }
  while (yy_base[v12] != 1346);
  signed int previous_state = yy_nxt[v15];
  while (2)
  {
    int v17 = yy_accept[previous_state];
    if (!v17)
    {
      uint64_t v11 = qword_1EB1ED9A8;
      int v17 = yy_accept[dword_1EB1ED998];
    }
    v5[27] = (_UNKNOWN *)v87;
    *((unsigned char *)v3 + 112) = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = 0;
    v2[26] = (_UNKNOWN *)v11;
LABEL_27:
    switch(v17)
    {
      case 0:
        *(unsigned char *)uint64_t v11 = *((unsigned char *)v3 + 112);
        uint64_t v11 = qword_1EB1ED9A8;
        signed int previous_state = dword_1EB1ED998;
        continue;
      case 1:
      case 2:
        goto LABEL_15;
      case 3:
        return 332;
      case 4:
        return 331;
      case 5:
        return 334;
      case 6:
        return 336;
      case 7:
        return 333;
      case 8:
        return 301;
      case 9:
        return 302;
      case 10:
        return 337;
      case 11:
        return 303;
      case 12:
        return 304;
      case 13:
        return 305;
      case 14:
        return 306;
      case 15:
        return 307;
      case 16:
        return 308;
      case 17:
        return 299;
      case 18:
        return 335;
      case 19:
        return 300;
      case 20:
        return 309;
      case 21:
        return 322;
      case 22:
      case 23:
        return 329;
      case 24:
      case 25:
        return 326;
      case 26:
      case 27:
        return 325;
      case 28:
      case 29:
        return 330;
      case 30:
        return 328;
      case 31:
        return 327;
      case 32:
        return 310;
      case 33:
        return 311;
      case 34:
        return 312;
      case 35:
        return 313;
      case 36:
        return 314;
      case 37:
        return 315;
      case 38:
        return 316;
      case 39:
        return 317;
      case 40:
        return 318;
      case 41:
        return 319;
      case 42:
        return 320;
      case 43:
      case 44:
        return 258;
      case 45:
      case 46:
        return 259;
      case 47:
        return 260;
      case 48:
      case 49:
        return 261;
      case 50:
        return 262;
      case 51:
        return 263;
      case 52:
        return 265;
      case 53:
        return 264;
      case 54:
        return 266;
      case 55:
        return 267;
      case 56:
        return 269;
      case 57:
        return 270;
      case 58:
        return 272;
      case 59:
        return 273;
      case 60:
      case 61:
        return 275;
      case 62:
        return 276;
      case 63:
        return 283;
      case 64:
        return 284;
      case 65:
      case 66:
        return 277;
      case 67:
      case 68:
        return 278;
      case 69:
        return 279;
      case 70:
        return 280;
      case 71:
        return 281;
      case 72:
        return 271;
      case 73:
        return 274;
      case 74:
        return 282;
      case 75:
        return 285;
      case 76:
        return 286;
      case 77:
        return 287;
      case 78:
        return 289;
      case 79:
        return 288;
      case 80:
        return 290;
      case 81:
        return 291;
      case 82:
        return 324;
      case 83:
        return 323;
      case 84:
        return 268;
      case 85:
        uint64_t v74 = (const char *)v5[27];
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 10;
        return convertTextToInteger(v74, v75, v76);
      case 86:
        return convertTextToDecimal((const char *)v5[27], a1);
      case 87:
        uint64_t v74 = (const char *)v5[27];
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 16;
        return convertTextToInteger(v74, v75, v76);
      case 88:
        uint64_t v74 = (const char *)v5[27];
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 8;
        return convertTextToInteger(v74, v75, v76);
      case 89:
        uint64_t v74 = (const char *)v5[27];
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 2;
        return convertTextToInteger(v74, v75, v76);
      case 90:
        uint64_t v77 = (const char *)v5[27];
        goto LABEL_214;
      case 91:
        uint64_t v77 = (char *)v5[27] + 1;
LABEL_214:
        *(void *)a1 = strdup(v77);
        return 295;
      case 92:
        int v58 = 3;
        goto LABEL_102;
      case 93:
        int v58 = 5;
        goto LABEL_102;
      case 94:
        int v58 = 7;
LABEL_102:
        *((_DWORD *)v4 + 613) = v58;
        uint64_t v86 = v89;
        goto LABEL_15;
      case 95:
        *((_DWORD *)v4 + 613) = 1;
        *uint64_t v86 = 0;
        *(void *)a1 = strdup(v89);
        return 296;
      case 96:
        *((_DWORD *)v4 + 613) = 1;
        *uint64_t v86 = 0;
        *(void *)a1 = strdup(v89);
        return 297;
      case 97:
        *((_DWORD *)v4 + 613) = 1;
        *uint64_t v86 = 0;
        *(void *)a1 = strdup(v89);
        return 298;
      case 98:
      case 102:
      case 118:
      case 119:
      case 120:
        goto LABEL_132;
      case 99:
        uint64_t v59 = (char *)v5[27] + 1;
        int v60 = 8;
        goto LABEL_105;
      case 100:
        uint64_t v59 = (char *)v5[27] + 2;
        int v60 = 16;
LABEL_105:
        char v61 = strtoul_l(v59, 0, v60, 0);
        uint64_t v62 = v86;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        *uint64_t v86 = v61;
        uint64_t v86 = v62 + 1;
        goto LABEL_107;
      case 101:
        uint64_t v83 = a1;
        uint64_t v63 = [[NSString alloc] initWithFormat:@"%C", (unsigned __int16)strtoul_l((const char *)v5[27] + 2, 0, 16, 0)];
        uint64_t v64 = [(NSString *)v63 lengthOfBytesUsingEncoding:4];
        double v65 = MEMORY[0x1F4188790](v64);
        uint64_t v67 = (char *)&v80 - v66;
        unint64_t v88 = 0;
        -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v63, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", (char *)&v80 - v66, v64, &v88, 4, 0, 0, [(NSString *)v63 length], 0);

        uint64_t v68 = v86;
        if (&v86[v88] > v85)
        {
          dword_1EB1ED994 = 1;
          return 321;
        }
        uint64_t v4 = &qword_1EB1ED000;
        if (v88)
        {
          unint64_t v69 = 0;
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
          do
          {
            v68[v69] = v67[v69];
            ++v69;
          }
          while (v88 > v69);
          uint64_t v86 = &v68[v69];
        }
        else
        {
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
        }
        a1 = v83;
        uint64_t v5 = &_NS_cmark_node_get_fence_info;
        goto LABEL_15;
      case 103:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        char v72 = 10;
        goto LABEL_129;
      case 104:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        char v72 = 9;
        goto LABEL_129;
      case 105:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        char v72 = 13;
        goto LABEL_129;
      case 106:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        char v72 = 8;
        goto LABEL_129;
      case 107:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        char v72 = 12;
        goto LABEL_129;
      case 108:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        char v72 = 7;
        goto LABEL_129;
      case 109:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_132;
        }
        char v72 = 11;
        goto LABEL_129;
      case 110:
        long long v70 = v86;
        uint64_t v71 = v86 + 1;
        if (v86 + 1 > v85)
        {
LABEL_132:
          *((_DWORD *)v4 + 613) = 1;
          return 321;
        }
        char v72 = *((unsigned char *)v5[27] + 1);
LABEL_129:
        *long long v70 = v72;
        uint64_t v86 = v71;
        goto LABEL_15;
      case 111:
      case 112:
      case 113:
        pthread_t v54 = v5;
        __int16 v55 = (const char *)v5[27];
        size_t v56 = strlen(v55);
        char v57 = &v86[(int)v56];
        if (v57 <= v85)
        {
          strlcpy(v86, v55, (uint64_t)((v56 << 32) + 0x100000000) >> 32);
          uint64_t v86 = v57;
          uint64_t v4 = &qword_1EB1ED000;
          uint64_t v5 = v54;
LABEL_107:
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
          goto LABEL_15;
        }
        dword_1EB1ED994 = 1;
        return 321;
      case 114:
        *((_DWORD *)v4 + 613) = 1;
        return *(char *)v5[27];
      case 115:
        yy_fatal_error("flex scanner jammed");
      case 116:
        uint64_t v18 = v5[27];
        *(unsigned char *)uint64_t v11 = *((unsigned char *)v3 + 112);
        uint64_t v19 = yy_buffer_stack;
        uint64_t v20 = *(void *)yy_buffer_stack;
        int v21 = *(_DWORD *)(*(void *)yy_buffer_stack + 64);
        uint64_t v83 = a1;
        uint64_t v81 = v18;
        if (v21)
        {
          uint64_t v22 = yy_n_chars;
        }
        else
        {
          uint64_t v22 = *(void *)(v20 + 32);
          yy_n_chars = v22;
          *(void *)uint64_t v20 = _qfqp2in;
          uint64_t v20 = *(void *)v19;
          *(_DWORD *)(*(void *)v19 + 64) = 1;
        }
        unint64_t v23 = (unint64_t)v2[26];
        uint64_t v24 = *(unsigned char **)(v20 + 8);
        if (v23 <= (unint64_t)&v24[v22])
        {
          uint64_t v5 = &_NS_cmark_node_get_fence_info;
          uint64_t v87 = _qfqp2text;
          uint64_t v11 = _qfqp2text + ~v81 + (int)v11;
          v2[26] = (_UNKNOWN *)v11;
          signed int previous_state = yy_get_previous_state();
          if (yy_accept[previous_state])
          {
            dword_1EB1ED998 = previous_state;
            qword_1EB1ED9A8 = v11;
          }
          uint64_t v51 = previous_state;
          uint64_t v52 = (int)yy_base[previous_state] + 1;
          a1 = v83;
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
          if (yy_chk[v52] != previous_state)
          {
            do
            {
              uint64_t v51 = yy_def[v51];
              uint64_t v52 = (int)yy_base[v51] + 1;
            }
            while (yy_chk[v52] != v51);
          }
          LODWORD(v12) = yy_nxt[v52];
          if (v12 && v12 != 303)
          {
            yy_c_buf_p = ++v11;
            goto LABEL_16;
          }
          continue;
        }
        if (v23 > (unint64_t)&v24[v22 + 1])
        {
          uint64_t v78 = (FILE *)*MEMORY[0x1E4F143C8];
          uint64_t v79 = "fatal flex scanner internal error--end of buffer missed";
          goto LABEL_231;
        }
        uint64_t v25 = (char *)_qfqp2text;
        unint64_t v26 = v23 - _qfqp2text;
        if (!*(_DWORD *)(v20 + 60))
        {
          a1 = v83;
          uint64_t v5 = &_NS_cmark_node_get_fence_info;
          if (v26 != 1) {
            goto LABEL_87;
          }
LABEL_81:
          v2[26] = v25;
          uint64_t v4 = &qword_1EB1ED000;
          int v50 = dword_1EB1ED994;
          if (dword_1EB1ED994 >= 1) {
            int v50 = dword_1EB1ED994 - 1;
          }
          int v17 = (v50 >> 1) + 117;
          goto LABEL_27;
        }
        int v27 = v26 - 1;
        if ((int)v26 >= 2)
        {
          int v28 = v26 - 1;
          do
          {
            char v29 = *v25++;
            *v24++ = v29;
            --v28;
          }
          while (v28);
          uint64_t v20 = *(void *)v19;
        }
        int v30 = *(_DWORD *)(v20 + 64);
        uint64_t v82 = (v26 - 1);
        if (v30 == 2)
        {
          yy_n_chars = 0;
          a1 = v83;
          goto LABEL_40;
        }
        uint64_t v84 = v27;
        int v33 = ~v27;
        unint64_t v34 = *(void *)(v20 + 24);
        int v35 = v34 - v26;
        if ((int)v34 - (int)v26 <= 0)
        {
          while (*(_DWORD *)(v20 + 40))
          {
            unint64_t v36 = *(void **)(v20 + 8);
            uint64_t v37 = 2 * v34;
            uint64_t v38 = v34 + (v34 >> 3);
            if ((int)v37 >= 1) {
              uint64_t v38 = v37;
            }
            *(void *)(v20 + 24) = v38;
            unint64_t v39 = malloc_type_realloc(v36, v38 + 2, 0xA2B35647uLL);
            *(void *)(v20 + 8) = v39;
            if (!v39) {
              goto LABEL_224;
            }
            unint64_t v23 = (unint64_t)v39 + (int)v23 - (int)v36;
            yy_c_buf_p = v23;
            uint64_t v20 = *(void *)yy_buffer_stack;
            unint64_t v34 = *(void *)(*(void *)yy_buffer_stack + 24);
            int v35 = v34 + v33;
            if ((int)v34 + v33 >= 1) {
              goto LABEL_50;
            }
          }
          *(void *)(v20 + 8) = 0;
LABEL_224:
          uint64_t v78 = (FILE *)*MEMORY[0x1E4F143C8];
          uint64_t v79 = "fatal error - scanner input buffer overflow";
LABEL_231:
          fprintf(v78, "%s\n", v79);
          exit(2);
        }
LABEL_50:
        if (v35 >= 0x2000) {
          size_t v40 = 0x2000;
        }
        else {
          size_t v40 = v35;
        }
        a1 = v83;
        if (!*(_DWORD *)(v20 + 44))
        {
          *__error() = 0;
          for (uint64_t i = (void *)(*(void *)(*(void *)yy_buffer_stack + 8) + v84);
                ;
                uint64_t i = (void *)(*(void *)(*(void *)yy_buffer_stack + 8) + v84))
          {
            size_t v31 = fread(i, 1uLL, v40, (FILE *)_qfqp2in);
            yy_n_chars = v31;
            if (v31)
            {
              int v32 = 0;
              uint64_t v19 = yy_buffer_stack;
              uint64_t v20 = *(void *)yy_buffer_stack;
              *(void *)(*(void *)yy_buffer_stack + 32) = v31;
              uint64_t v2 = &_NS_cmark_node_get_fence_info;
              uint64_t v3 = &_NS_cmark_node_get_fence_info;
              goto LABEL_76;
            }
            if (!ferror((FILE *)_qfqp2in)) {
              break;
            }
            if (*__error() != 4) {
              goto LABEL_229;
            }
            *__error() = 0;
            clearerr((FILE *)_qfqp2in);
          }
          uint64_t v19 = yy_buffer_stack;
          uint64_t v20 = *(void *)yy_buffer_stack;
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
          int v27 = v82;
LABEL_40:
          *(void *)(v20 + 32) = 0;
          if (v27) {
            goto LABEL_41;
          }
          goto LABEL_75;
        }
        uint64_t v41 = 0;
        while (1)
        {
          int v42 = getc((FILE *)_qfqp2in);
          if (v42 == -1 || v42 == 10) {
            break;
          }
          *(unsigned char *)(*(void *)(*(void *)yy_buffer_stack + 8) + v84 + v41++) = v42;
          if (v40 == v41) {
            goto LABEL_62;
          }
        }
        LODWORD(v40) = v41;
LABEL_62:
        uint64_t v2 = &_NS_cmark_node_get_fence_info;
        uint64_t v3 = &_NS_cmark_node_get_fence_info;
        if (v42 == -1)
        {
          int v45 = ferror((FILE *)_qfqp2in);
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          if (v45)
          {
LABEL_229:
            uint64_t v78 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v79 = "input in flex scanner failed";
            goto LABEL_231;
          }
        }
        else if (v42 == 10)
        {
          int v32 = 0;
          uint64_t v19 = yy_buffer_stack;
          *(unsigned char *)(*(void *)(*(void *)yy_buffer_stack + 8) + v84 + v40) = 10;
          size_t v31 = (int)v40 + 1;
          yy_n_chars = v31;
          uint64_t v20 = *(void *)v19;
          *(void *)(*(void *)v19 + 32) = v31;
          goto LABEL_76;
        }
        size_t v31 = (int)v40;
        yy_n_chars = (int)v40;
        uint64_t v19 = yy_buffer_stack;
        uint64_t v20 = *(void *)yy_buffer_stack;
        *(void *)(*(void *)yy_buffer_stack + 32) = (int)v40;
        if (v40)
        {
          int v32 = 0;
          goto LABEL_76;
        }
        if (v82)
        {
LABEL_41:
          size_t v31 = 0;
          int v32 = 2;
          *(_DWORD *)(v20 + 64) = 2;
          goto LABEL_76;
        }
LABEL_75:
        _qfqp2_init_buffer(v20, (FILE *)_qfqp2in);
        uint64_t v3 = &_NS_cmark_node_get_fence_info;
        uint64_t v2 = &_NS_cmark_node_get_fence_info;
        uint64_t v19 = yy_buffer_stack;
        uint64_t v20 = *(void *)yy_buffer_stack;
        size_t v31 = *(void *)(*(void *)yy_buffer_stack + 32);
        yy_n_chars = v31;
        yy_c_buf_p = *(void *)(v20 + 16);
        _qfqp2text = yy_c_buf_p;
        _qfqp2in = *(void *)v20;
        yy_hold_char = *(unsigned char *)yy_c_buf_p;
        int v32 = 1;
LABEL_76:
        unint64_t v46 = v31 + (int)v82;
        if (v46 <= *(void *)(v20 + 24))
        {
          uint64_t v49 = *(void *)(v20 + 8);
          uint64_t v5 = &_NS_cmark_node_get_fence_info;
        }
        else
        {
          int v47 = v32;
          unint64_t v48 = malloc_type_realloc(*(void **)(v20 + 8), v46 + (v31 >> 1), 0xA2B35647uLL);
          uint64_t v19 = yy_buffer_stack;
          *(void *)(*(void *)yy_buffer_stack + 8) = v48;
          uint64_t v49 = *(void *)(*(void *)v19 + 8);
          if (!v49)
          {
            uint64_t v78 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v79 = "out of dynamic memory in yy_get_next_buffer()";
            goto LABEL_231;
          }
          unint64_t v46 = yy_n_chars + (int)v82;
          uint64_t v5 = &_NS_cmark_node_get_fence_info;
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
          int v32 = v47;
        }
        yy_n_chars = v46;
        *(unsigned char *)(v49 + v46) = 0;
        *(unsigned char *)(v46 + *(void *)(*(void *)v19 + 8) + 1) = 0;
        uint64_t v25 = *(char **)(*(void *)v19 + 8);
        v5[27] = v25;
        if (v32 == 1) {
          goto LABEL_81;
        }
        if (!v32)
        {
          uint64_t v11 = (uint64_t)&v25[~v81 + (int)v11];
          v2[26] = (_UNKNOWN *)v11;
          int v53 = yy_get_previous_state();
          uint64_t v3 = &_NS_cmark_node_get_fence_info;
          uint64_t v2 = &_NS_cmark_node_get_fence_info;
          LODWORD(v12) = v53;
          uint64_t v87 = (uint64_t)v25;
          uint64_t v4 = &qword_1EB1ED000;
          goto LABEL_16;
        }
        uint64_t v24 = *(unsigned char **)(*(void *)yy_buffer_stack + 8);
        uint64_t v22 = yy_n_chars;
LABEL_87:
        uint64_t v11 = (uint64_t)&v24[v22];
        v2[26] = &v24[v22];
        signed int previous_state = yy_get_previous_state();
        uint64_t v3 = &_NS_cmark_node_get_fence_info;
        uint64_t v2 = &_NS_cmark_node_get_fence_info;
        uint64_t v87 = (uint64_t)v25;
        uint64_t v4 = &qword_1EB1ED000;
        continue;
      case 117:
        return 0;
      default:
        yy_fatal_error("fatal flex scanner internal error--no action found");
    }
  }
}

NSString *NSStringForLexedIdentifier(void *a1)
{
  uint64_t v2 = [[NSString alloc] initWithUTF8String:a1];
  free(a1);
  return v2;
}

NSKeyPathExpression *CreateKVCExpression(uint64_t a1)
{
  uint64_t v1 = [[NSKeyPathSpecifierExpression alloc] initWithObject:a1];
  uint64_t v2 = [[NSKeyPathExpression alloc] initWithKeyPath:v1];

  return v2;
}

id PredicateOperatorForName(uint64_t a1, uint64_t a2)
{
  return +[NSPredicateOperator _newOperatorWithType:a1 modifier:0 options:a2];
}

void yydestruct(int a1, id *a2)
{
  switch(a1)
  {
    case 39:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:

      break;
    case 40:
    case 41:
    case 42:
    case 43:
      free(*a2);
      break;
    default:
      return;
  }
}

void *_qfqp2_scan_bytes(char *a1, int a2)
{
  size_t v4 = a2 + 2;
  uint64_t v5 = malloc_type_malloc(v4, 0xF7B9761EuLL);
  if (!v5)
  {
    int v15 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v16 = "out of dynamic memory in _qfqp2_scan_bytes()";
    goto LABEL_16;
  }
  uint64_t v6 = v5;
  if (a2 >= 1)
  {
    uint64_t v7 = a2;
    unint64_t v8 = v5;
    do
    {
      char v9 = *a1++;
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  *(_WORD *)&v5[a2] = 0;
  if (a2 > 0xFFFFFFFD)
  {
    int v15 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v16 = "bad buffer in _qfqp2_scan_bytes()";
    goto LABEL_16;
  }
  int v10 = malloc_type_malloc(0x48uLL, 0xF7B9761EuLL);
  if (!v10)
  {
    int v15 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v16 = "out of dynamic memory in _qfqp2_scan_buffer()";
LABEL_16:
    fprintf(v15, "%s\n", v16);
    exit(2);
  }
  uint64_t v11 = v10;
  v10[2] = v6;
  v10[3] = v4 - 2;
  *int v10 = 0;
  v10[1] = v6;
  v10[4] = v4 - 2;
  v10[5] = 0;
  *((_DWORD *)v10 + 12) = 1;
  *(void *)((char *)v10 + 60) = 0;
  _qfqp2ensure_buffer_stack();
  uint64_t v12 = yy_buffer_stack;
  if (!yy_buffer_stack)
  {
LABEL_11:
    *(void *)uint64_t v12 = v11;
    yy_n_chars = v11[4];
    yy_c_buf_p = v11[2];
    _qfqp2text = yy_c_buf_p;
    _qfqp2in = *v11;
    yy_hold_char = *(unsigned char *)yy_c_buf_p;
    goto LABEL_12;
  }
  if (*(void **)yy_buffer_stack != v11)
  {
    if (*(void *)yy_buffer_stack)
    {
      uint64_t v13 = yy_c_buf_p;
      *(unsigned char *)yy_c_buf_p = yy_hold_char;
      *(void *)(*(void *)v12 + 16) = v13;
      *(void *)(*(void *)v12 + 32) = yy_n_chars;
    }
    goto LABEL_11;
  }
LABEL_12:
  *((_DWORD *)v11 + 10) = 1;
  return v11;
}

void *_qfqp2ensure_buffer_stack()
{
  uint64_t result = (void *)yy_buffer_stack;
  if (!yy_buffer_stack)
  {
    uint64_t result = malloc_type_malloc(8uLL, 0xF7B9761EuLL);
    yy_buffer_stack = (uint64_t)result;
    if (result)
    {
      *uint64_t result = 0;
      uint64_t v2 = 1;
      goto LABEL_7;
    }
LABEL_9:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s\n", "out of dynamic memory in _qfqp2ensure_buffer_stack()");
    exit(2);
  }
  if (yy_buffer_stack_max != 1) {
    return result;
  }
  uint64_t result = malloc_type_realloc((void *)yy_buffer_stack, 0x48uLL, 0xA2B35647uLL);
  yy_buffer_stack = (uint64_t)result;
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v1 = &result[yy_buffer_stack_max];
  *uint64_t v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  uint64_t v2 = 9;
LABEL_7:
  yy_buffer_stack_max = v2;
  return result;
}

void _qfqp2_delete_buffer(void **a1)
{
  if (a1)
  {
    if (yy_buffer_stack) {
      uint64_t v2 = *(void ***)yy_buffer_stack;
    }
    else {
      uint64_t v2 = 0;
    }
    if (v2 == a1) {
      *(void *)yy_buffer_stack = 0;
    }
    if (*((_DWORD *)a1 + 10)) {
      free(a1[1]);
    }
    free(a1);
  }
}

uint64_t yy_get_previous_state()
{
  uint64_t v0 = (unsigned char *)_qfqp2text;
  uint64_t result = dword_1EB1ED994;
  if (_qfqp2text < (unint64_t)yy_c_buf_p)
  {
    do
    {
      if (*v0) {
        unsigned int v2 = yy_ec[4 * *v0];
      }
      else {
        unsigned int v2 = 1;
      }
      if (yy_accept[(int)result])
      {
        dword_1EB1ED998 = result;
        qword_1EB1ED9A8 = (uint64_t)v0;
      }
      uint64_t v3 = (int)result;
      int v4 = yy_base[(int)result] + v2;
      if (yy_chk[v4] != result)
      {
        uint64_t v5 = v2;
        do
        {
          uint64_t v3 = yy_def[v3];
          if ((int)v3 >= 304) {
            LOBYTE(v5) = yy_meta[4 * v5];
          }
          int v4 = yy_base[v3] + v5;
        }
        while (yy_chk[v4] != v3);
      }
      ++v0;
      uint64_t result = yy_nxt[v4];
    }
    while (v0 != (unsigned char *)yy_c_buf_p);
  }
  return result;
}

NSKeyPathExpression *ResolvePredicateArgument(void *a1, void *a2)
{
  v66[1] = *(ConstStr255Param *)MEMORY[0x1E4F143B8];
  if (![a1 length])
  {
    int v60 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v61 = *MEMORY[0x1E4F1C3B8];
    uint64_t v62 = (NSString *)@"Illegal argument conversion character";
    goto LABEL_70;
  }
  int v4 = (void *)a2[2];
  uint64_t v5 = (void ***)a2[3];
  uint64_t v6 = a2[4];
  a2[4] = v6 + 1;
  char v7 = [a1 characterAtIndex:0];
  int v8 = 0;
  v66[0] = 0;
  uint64_t v9 = 1;
  while (v7 <= 107)
  {
    if (v7 != 104)
    {
      if (v7 != 76) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    int v10 = -1;
LABEL_8:
    v8 += v10;
    char v7 = [a1 characterAtIndex:v9++];
  }
  if (v7 == 108)
  {
    int v10 = 1;
    goto LABEL_8;
  }
  if (v7 != 113) {
    goto LABEL_13;
  }
LABEL_12:
  char v7 = [a1 characterAtIndex:v9];
  int v8 = 2;
LABEL_13:
  if (v4)
  {
    unint64_t v11 = [v4 count];
    if ((v6 & 0x8000000000000000) == 0 && v6 + 1 <= v11)
    {
      uint64_t v12 = [v4 objectAtIndex:v6];
      uint64_t v13 = v7;
      double v65 = (__CFString *)v12;
      switch(v7)
      {
        case '@':
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_17;
          }
          return (NSKeyPathExpression *)v65;
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'O':
        case 'S':
        case 'U':
        case 'X':
        case 'a':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'i':
        case 'o':
        case 'p':
        case 's':
        case 'u':
        case 'x':
LABEL_17:
          uint64_t v14 = [NSConstantValueExpression alloc];
          int v15 = v65;
          goto LABEL_18;
        case 'B':
        case 'H':
        case 'I':
        case 'J':
        case 'L':
        case 'M':
        case 'N':
        case 'P':
        case 'Q':
        case 'R':
        case 'T':
        case 'V':
        case 'W':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
        case 'b':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'q':
        case 'r':
        case 't':
        case 'v':
        case 'w':
          goto LABEL_71;
        case 'K':
          return CreateKVCExpression(v12);
        default:
          if (v13 != 37) {
            goto LABEL_71;
          }
          uint64_t v14 = [NSConstantValueExpression alloc];
          int v15 = @"%";
LABEL_18:
          uint64_t result = [(NSConstantValueExpression *)v14 initWithObject:v15];
          break;
      }
      return result;
    }
    int v60 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v61 = *MEMORY[0x1E4F1C3B8];
    uint64_t v62 = (NSString *)@"Insufficient arguments for conversion characters specified in format string.";
LABEL_70:
    objc_exception_throw((id)[v60 exceptionWithName:v61 reason:v62 userInfo:0]);
  }
  uint64_t v13 = v7;
  switch(v7)
  {
    case '@':
      int v32 = (*v5)++;
      int v33 = (__CFString *)*v32;
      if (objc_opt_isKindOfClass())
      {
        KVCExpression = v33;
        goto LABEL_67;
      }
      int v30 = [NSConstantValueExpression alloc];
      size_t v31 = v33;
      goto LABEL_66;
    case 'A':
    case 'E':
    case 'F':
    case 'G':
    case 'a':
    case 'e':
    case 'f':
    case 'g':
      if (v8 == 2 || v8 == 1)
      {
        unint64_t v23 = [NSNumber alloc];
        uint64_t v24 = (double *)(*v5)++;
        uint64_t v20 = [(NSNumber *)v23 initWithDouble:*v24];
      }
      else
      {
        if (v8)
        {
LABEL_31:
          int v27 = 0;
          goto LABEL_62;
        }
        int v17 = [NSNumber alloc];
        uint64_t v18 = (double *)(*v5)++;
        double v19 = *v18;
        *(float *)&double v19 = *v18;
        uint64_t v20 = [(NSNumber *)v17 initWithFloat:v19];
      }
LABEL_61:
      int v27 = (unsigned __int8 *)v20;
      v66[0] = v20;
LABEL_62:
      unint64_t v43 = [[NSConstantValueExpression alloc] initWithObject:v27];

      goto LABEL_63;
    case 'B':
    case 'H':
    case 'I':
    case 'J':
    case 'L':
    case 'M':
    case 'N':
    case 'Q':
    case 'R':
    case 'T':
    case 'V':
    case 'W':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'b':
    case 'h':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'q':
    case 'r':
    case 't':
    case 'v':
    case 'w':
      goto LABEL_71;
    case 'C':
      int v35 = [NSNumber alloc];
      unint64_t v36 = (*v5)++;
      char v29 = [(NSNumber *)v35 initWithShort:*(__int16 *)v36];
      goto LABEL_51;
    case 'D':
    case 'd':
    case 'i':
      switch(v8)
      {
        case -2:
          uint64_t v25 = [NSNumber alloc];
          unint64_t v26 = (*v5)++;
          uint64_t v20 = [(NSNumber *)v25 initWithChar:*(char *)v26];
          goto LABEL_61;
        case -1:
          uint64_t v52 = [NSNumber alloc];
          int v53 = (*v5)++;
          uint64_t v20 = [(NSNumber *)v52 initWithShort:*(__int16 *)v53];
          goto LABEL_61;
        case 0:
          pthread_t v54 = [NSNumber alloc];
          __int16 v55 = (unsigned int *)(*v5)++;
          uint64_t v20 = [(NSNumber *)v54 initWithInt:*v55];
          goto LABEL_61;
        case 1:
          size_t v56 = [NSNumber alloc];
          char v57 = (*v5)++;
          uint64_t v20 = [(NSNumber *)v56 initWithLong:*v57];
          goto LABEL_61;
        case 2:
          int v58 = [NSNumber alloc];
          uint64_t v59 = (*v5)++;
          uint64_t v20 = [(NSNumber *)v58 initWithLongLong:*v59];
          goto LABEL_61;
        default:
          goto LABEL_31;
      }
    case 'K':
      uint64_t v37 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v37;
      KVCExpression = CreateKVCExpression((uint64_t)v66[0]);
      goto LABEL_67;
    case 'O':
    case 'U':
    case 'X':
    case 'o':
    case 'u':
    case 'x':
      switch(v8)
      {
        case -2:
          int v21 = [NSNumber alloc];
          uint64_t v22 = (unsigned __int8 *)(*v5)++;
          uint64_t v20 = [(NSNumber *)v21 initWithUnsignedChar:*v22];
          goto LABEL_61;
        case -1:
          unint64_t v44 = [NSNumber alloc];
          int v45 = (unsigned __int16 *)(*v5)++;
          uint64_t v20 = [(NSNumber *)v44 initWithUnsignedShort:*v45];
          goto LABEL_61;
        case 0:
          unint64_t v46 = [NSNumber alloc];
          int v47 = (unsigned int *)(*v5)++;
          uint64_t v20 = [(NSNumber *)v46 initWithUnsignedInt:*v47];
          goto LABEL_61;
        case 1:
          unint64_t v48 = [NSNumber alloc];
          uint64_t v49 = (*v5)++;
          uint64_t v20 = [(NSNumber *)v48 initWithUnsignedLong:*v49];
          goto LABEL_61;
        case 2:
          int v50 = [NSNumber alloc];
          uint64_t v51 = (*v5)++;
          uint64_t v20 = [(NSNumber *)v50 initWithUnsignedLongLong:*v51];
          goto LABEL_61;
        default:
          goto LABEL_31;
      }
    case 'P':
      uint64_t v38 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v38;
      char v29 = (NSString *)CFStringCreateWithPascalString((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], v66[0], 0x8000100u);
      goto LABEL_51;
    case 'S':
    case 's':
      int v28 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v28;
      char v29 = [[NSString alloc] initWithFormat:@"%s", v66[0]];
      goto LABEL_51;
    case 'c':
      unint64_t v39 = [NSNumber alloc];
      size_t v40 = (*v5)++;
      char v29 = [(NSNumber *)v39 initWithChar:*(char *)v40];
      goto LABEL_51;
    case 'p':
      uint64_t v41 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v41;
      char v29 = +[NSValue value:v66 withObjCType:"^v"];
LABEL_51:
      int v42 = v29;
      unint64_t v43 = [[NSConstantValueExpression alloc] initWithObject:v29];
      goto LABEL_64;
    default:
      if (v13 != 37)
      {
LABEL_71:
        uint64_t v63 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v64 = *MEMORY[0x1E4F1C3B8];
        uint64_t v62 = +[NSString stringWithFormat:@"Unrecognized conversion specifier '%c' in format string.", v13];
        int v60 = v63;
        uint64_t v61 = v64;
        goto LABEL_70;
      }
      int v30 = [NSConstantValueExpression alloc];
      size_t v31 = @"%";
LABEL_66:
      KVCExpression = [(NSConstantValueExpression *)v30 initWithObject:v31];
LABEL_67:
      unint64_t v43 = (NSConstantValueExpression *)KVCExpression;
LABEL_63:
      int v42 = 0;
LABEL_64:

      return (NSKeyPathExpression *)v43;
  }
}

uint64_t convertTextToInteger(const char *a1, uint64_t *a2, int a3)
{
  v13[1] = *(char **)MEMORY[0x1E4F143B8];
  v13[0] = 0;
  *__error() = 0;
  uint64_t v6 = strtoll_l(a1, v13, a3, 0);
  if (*__error() != 34)
  {
    if (v13[0] && v13[0] != a1 && !*v13[0])
    {
      *a2 = v6;
      return 292;
    }
    goto LABEL_14;
  }
  uint64_t v12 = 0;
  *__error() = 0;
  unint64_t v7 = strtoull_l(a1, &v12, a3, 0);
  BOOL v9 = *__error() == 34 || v12 == 0 || v12 == a1;
  if (v9 || *v12)
  {
LABEL_14:
    int v10 = [[NSString alloc] initWithCString:a1];
    *a2 = (uint64_t)[[NSDecimalNumber alloc] initWithString:v10];

    return 294;
  }
  *a2 = (uint64_t)[[NSNumber alloc] initWithUnsignedLongLong:v7];
  return 294;
}

uint64_t convertTextToDecimal(const char *a1, double *a2)
{
  v8[1] = *(char **)MEMORY[0x1E4F143B8];
  v8[0] = 0;
  double v4 = strtod_l(a1, v8, 0);
  if (v8[0]) {
    BOOL v5 = v8[0] == a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || *v8[0])
  {
    uint64_t v6 = [[NSString alloc] initWithCString:a1];
    *(void *)a2 = [[NSDecimalNumber alloc] initWithString:v6];

    return 294;
  }
  else
  {
    *a2 = v4;
    return 293;
  }
}

NSCompoundPredicate *buildORPredicate(void *a1, void *a2)
{
  if ((objc_opt_isKindOfClass() & 1) != 0 && [a1 compoundPredicateType] == 2)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 2)
    {
      BOOL v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
      [v5 addObject:a2];
      goto LABEL_13;
    }
    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
  }
  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 2)
    {
      BOOL v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", a1, a2, 0);
      goto LABEL_13;
    }
    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithObjects:", a1, 0);
  }
  BOOL v5 = (void *)v4;
  uint64_t v6 = [a2 subpredicates];
  if (v6) {
    [v5 addObjectsFromArray:v6];
  }
LABEL_13:
  unint64_t v7 = [[NSCompoundPredicate alloc] initWithType:2 subpredicates:v5];

  return v7;
}

void *setOperatorModifier(void *a1, uint64_t a2)
{
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Tried to set a NSComparisonPredicateModifier on a compound predicate. This was probably the result of a predicate containing ANY/ALL BETWEEN." userInfo:0]);
  }
  objc_msgSend((id)objc_msgSend(a1, "predicateOperator"), "_setModifier:", a2);
  return a1;
}

uint64_t PredicateOperatorForCustomSelector(uint64_t a1)
{
  uint64_t v1 = [(NSString *)[NSMutableString alloc] initWithString:a1];
  [(NSMutableString *)v1 appendString:@":"];
  SEL v2 = NSSelectorFromString(&v1->super);

  uint64_t v3 = [NSCustomPredicateOperator alloc];

  return (uint64_t)[(NSCustomPredicateOperator *)v3 initWithCustomSelector:v2 modifier:0];
}

id Error.localizedDescription.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x1F4188790](a1);
  BOOL v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v2 + 16))(v5, v6, a1, v3);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7, v5, a1);
  }
  id v8 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_localizedDescription);
  swift_unknownObjectRelease();
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

void type metadata completion function for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format()
{
  type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle);
  if (v0 <= 0x3F)
  {
    type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Currency);
    if (v1 <= 0x3F)
    {
      type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent);
      if (v2 <= 0x3F) {
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E4FBB550], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle);
  if (v0 <= 0x3F)
  {
    type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for IntegerFormatStyle<Int>.Currency, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E4FBB550], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Currency);
    if (v1 <= 0x3F)
    {
      type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for IntegerFormatStyle<Int>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E4FBB550], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent);
      if (v2 <= 0x3F) {
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void type metadata accessor for IntegerFormatStyle<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

__n128 FloatingPointFormatStyle.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for FloatingPointFormatStyle() + 36);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  BOOL v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  id v8 = &v4[v5[10]];
  *(void *)id v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t type metadata accessor for FloatingPointFormatStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _BridgedStoredNSError.code.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = type metadata accessor for Optional();
  double v8 = MEMORY[0x1F4188790](v7 - 8);
  __n128 v10 = (char *)&v15 - v9;
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 64))(a1, a2, v8);
  id v12 = objc_msgSend(v11, sel_code);

  swift_getAssociatedConformanceWitness();
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    id v16 = v12;
    lazy protocol witness table accessor for type Int and conformance Int();
  }
  else
  {
    id v16 = v12;
    lazy protocol witness table accessor for type UInt and conformance UInt();
  }
  dispatch thunk of BinaryInteger.init<A>(_:)();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, AssociatedTypeWitness);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v15, v10, AssociatedTypeWitness);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Currency()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Currency()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Percent()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1817F7A9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1817F79B0);
  }
  _Unwind_Resume(a1);
}

NSString *__NSLocalizedFileSizeDescriptionFormatNumber(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x10000) != 0) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 6;
  }
  if ((a4 & 0x40000000) != 0)
  {
    id v12 = 0;
    if ((a4 & 0x20000000) != 0) {
      return (NSString *)v12;
    }
  }
  else
  {
    if (a2)
    {
      if ((a4 & 0x400000) != 0)
      {
        [a1 doubleValue];
        double v17 = fabs(v16);
        if (v17 >= 1.0e-20 && v17 < 100.0) {
          uint64_t v11 = 2 - vcvtmd_s64_f64(log10(v17));
        }
        else {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = numberOfFractionDigits[a2];
      }
      uint64_t v15 = (a4 >> 24) & 1;
      uint64_t v13 = v9;
      uint64_t v14 = a5;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v13 = v9;
      uint64_t v14 = a5;
      LODWORD(v15) = 0;
    }
    id v12 = [(NSNumberFormatter *)fileSizeFormatter(v11, v13, v14, v15) stringForObjectValue:a1];
    if ((a4 & 0x20000000) != 0) {
      return (NSString *)v12;
    }
  }
  [a1 doubleValue];
  if (fabs(v19) == 1.0)
  {
    uint64_t v20 = objc_msgSend((id)objc_msgSend(&unk_1ECAB8210, "objectAtIndex:", a2), "stringByAppendingString:", @" Singular");
    int v21 = (void *)_NSFoundationBundle();
    uint64_t v22 = v20;
  }
  else
  {
    uint64_t v23 = _NSFoundationBundle();
    uint64_t v22 = [&unk_1ECAB8210 objectAtIndex:a2];
    int v21 = (void *)v23;
  }
  uint64_t v24 = [v21 localizedStringForKey:v22 value:&stru_1ECA5C228 table:@"FileSizeFormatting"];
  uint64_t v25 = v24;
  if ((a4 & 0x40000000) != 0) {
    return (NSString *)v24;
  }
  if (!a2 || (a4 & 0x4000000) == 0) {
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"%@ %@" value:&stru_1ECA5C228 table:@"FileSizeFormatting"], v12, v24, v28);
  }
  id v26 = [(NSNumberFormatter *)fileSizeFormatter(0, v9, 1, 0) stringForObjectValue:a3];
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"%@ %@ (%@ bytes)" value:&stru_1ECA5C228 table:@"FileSizeFormatting"], v12, v25, v26);
}

uint64_t _NSFoundationBundle()
{
  if (_MergedGlobals_114 != -1) {
    dispatch_once(&_MergedGlobals_114, &__block_literal_global_38);
  }
  return qword_1EB1ED640;
}

NSNumberFormatter *fileSizeFormatter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!fileSizeFormatter_numberFormatterCache)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1C998]);
    uint64_t v9 = 0;
    atomic_compare_exchange_strong(&fileSizeFormatter_numberFormatterCache, (unint64_t *)&v9, (unint64_t)v8);
    if (v9) {
  }
    }
  if (a4) {
    int v10 = 1000000;
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = +[NSNumber numberWithInteger:a1 + 1000 * a2 + v10 + 100000000 * (int)a3 + 1];
  unint64_t result = (NSNumberFormatter *)[(id)fileSizeFormatter_numberFormatterCache objectForKey:v11];
  if (!result)
  {
    uint64_t v13 = objc_alloc_init(NSNumberFormatter);
    [(NSNumberFormatter *)v13 setFormatterBehavior:1040];
    [(NSNumberFormatter *)v13 setNumberStyle:1];
    if (a3) {
      [(NSNumberFormatter *)v13 setFormattingContext:a3];
    }
    if (a1 < 0)
    {
      [(NSNumberFormatter *)v13 setMinimumSignificantDigits:3];
      [(NSNumberFormatter *)v13 setUsesSignificantDigits:1];
    }
    else
    {
      [(NSNumberFormatter *)v13 setMaximumFractionDigits:a1];
      if (a4) {
        [(NSNumberFormatter *)v13 setMinimumFractionDigits:a1];
      }
    }
    -[NSNumberFormatter setLocale:](v13, "setLocale:", [MEMORY[0x1E4F1CA20] currentLocale]);
    [(NSNumberFormatter *)v13 setUsesGroupingSeparator:1];
    [(NSNumberFormatter *)v13 setRoundingMode:a2];
    [(id)fileSizeFormatter_numberFormatterCache setObject:v13 forKey:v11];
    return v13;
  }
  return result;
}

void _encodeInt64(uint64_t a1, const void *a2, uint64_t a3)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, v6);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

uint64_t matchTypeEncoding(char *__s1, char *__s2, uint64_t a3)
{
  uint64_t result = 0;
  v13[1] = *(unsigned __int8 **)MEMORY[0x1E4F143B8];
  id v12 = (unsigned __int8 *)__s2;
  v13[0] = (unsigned __int8 *)__s1;
  if (__s1)
  {
    CFNumberRef v5 = __s2;
    if (__s2)
    {
      if (__s1 == __s2 || !strcmp(__s1, __s2)) {
        return 1;
      }
      NSUInteger alignp = 0;
      NSUInteger sizep = 0;
      NSGetSizeAndAlignment(__s1, &sizep, &alignp);
      NSUInteger v8 = 0;
      NSUInteger v9 = 0;
      NSGetSizeAndAlignment(v5, &v9, &v8);
      if (sizep == v9 && sizep == a3 && alignp == v8)
      {
        if (*__s1)
        {
          while (*v5)
          {
            if ((mungeUnionsAndStructures(v13) & 1) == 0) {
              return 0;
            }
            uint64_t result = mungeUnionsAndStructures(&v12);
            if (!result) {
              return result;
            }
            if (*v13[0] != *v12) {
              return 0;
            }
            if (!*v13[0]) {
              break;
            }
            int v7 = v13[0][1];
            CFNumberRef v5 = (const char *)++v12;
            ++v13[0];
            uint64_t result = 1;
            if (!v7) {
              return result;
            }
          }
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

NSArray *pathComponentFromURL(void *a1, uint64_t a2, int a3)
{
  int v3 = a3;
  uint64_t result = 0;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3 > 116)
  {
    if (a3 != 118)
    {
      if (a3 == 117)
      {
        uint64_t result = (NSArray *)[a1 scheme];
        if (result)
        {
          uint64_t v6 = result;
          if ([(NSArray *)result length]) {
            return v6;
          }
          else {
            return 0;
          }
        }
      }
      return result;
    }
    uint64_t v14 = 0;
    if (fileNameLocalizationDisabled) {
      uint64_t v11 = (void *)MEMORY[0x1E4F1C898];
    }
    else {
      uint64_t v11 = (void *)MEMORY[0x1E4F1C880];
    }
    int v12 = [a1 getResourceValue:&v14 forKey:*v11 error:0];
    uint64_t result = v14;
    if (v12) {
      BOOL v13 = v14 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      return result;
    }
    if (![a1 isFileURL]) {
      return 0;
    }
    uint64_t result = (NSArray *)[a1 path];
    if (!result) {
      return result;
    }
    return pathComponentFromPath(result, v10, v3);
  }
  if (a3 == 100)
  {
    a1 = (void *)[a1 URLByDeletingLastPathComponent];
    int v3 = 102;
  }
  else if (a3 != 102)
  {
    return result;
  }
  uint64_t v14 = 0;
  if (fileNameLocalizationDisabled) {
    int v7 = (void *)MEMORY[0x1E4F1C6E8];
  }
  else {
    int v7 = (void *)MEMORY[0x1E4F1C6C8];
  }
  int v8 = [a1 getResourceValue:&v14 forKey:*v7 error:0];
  uint64_t result = v14;
  if (v8) {
    BOOL v9 = v14 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (![a1 isFileURL] || (uint64_t result = (NSArray *)objc_msgSend(a1, "path")) == 0)
    {
      uint64_t result = (NSArray *)objc_msgSend((id)objc_msgSend(a1, "path", v14, v15), "lastPathComponent");
      uint64_t v14 = result;
      if (result)
      {
        uint64_t result = (NSArray *)[(NSArray *)result length];
        if (result)
        {
          if ([(NSArray *)v14 isEqual:@"/"]) {
            return 0;
          }
          else {
            return v14;
          }
        }
      }
      return result;
    }
    return pathComponentFromPath(result, v10, v3);
  }
  return result;
}

NSArray *pathComponentFromPath(NSArray *a1, uint64_t a2, int a3)
{
  uint64_t result = 0;
  v12[1] = *MEMORY[0x1E4F143B8];
  HIDWORD(v5) = a3;
  LODWORD(v5) = a3 - 100;
  switch((v5 >> 1))
  {
    case 0u:
    case 6u:
      uint64_t result = (NSArray *)[(NSArray *)a1 stringByDeletingLastPathComponent];
      if (result)
      {
        a1 = result;
        uint64_t result = (NSArray *)[(NSArray *)result length];
        if (result) {
          goto LABEL_4;
        }
      }
      break;
    case 1u:
LABEL_4:
      if (fileNameLocalizationDisabled)
      {
        uint64_t result = (NSArray *)[(NSArray *)a1 lastPathComponent];
      }
      else
      {
        BOOL v9 = +[NSFileManager defaultManager];
        uint64_t result = [(NSFileManager *)v9 displayNameAtPath:a1];
      }
      break;
    case 9u:
      if (fileNameLocalizationDisabled)
      {
        uint64_t v6 = (void *)[MEMORY[0x1E4F1CB10] fileURLWithPath:a1];
        v12[0] = 0;
        if (!v6
          || ((int v7 = [v6 getResourceValue:v12 forKey:*MEMORY[0x1E4F1C898] error:0],
               uint64_t result = (NSArray *)v12[0],
               v7)
            ? (BOOL v8 = v12[0] == 0)
            : (BOOL v8 = 1),
              v8))
        {
          uint64_t result = 0;
        }
      }
      else
      {
        uint64_t v10 = [+[NSFileManager defaultManager] componentsToDisplayForPath:a1];
        if (v10
          || (uint64_t result = (NSArray *)[(NSArray *)a1 stringByDeletingLastPathComponent]) != 0
          && (v11 = result, (uint64_t result = (NSArray *)[(NSArray *)result length]) != 0)
          && (result = [+[NSFileManager defaultManager] componentsToDisplayForPath:v11], (uint64_t v10 = result) != 0))
        {
          uint64_t result = [(NSArray *)v10 count];
          if (result)
          {
            uint64_t result = [(NSArray *)v10 objectAtIndex:0];
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_1817FAD8C()
{
}

void sub_1817FADE4(_Unwind_Exception *a1)
{
}

void sub_1817FADF0(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1817FADFCLL);
}

void *_NSXPCSerializationAddRawData(uint64_t a1, const void *a2, unint64_t a3)
{
  if (a3 < 0xF)
  {
    char v6 = a3 | 0x40;
    _reserveSpace(a1, 1);
    *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v6;
  }
  else
  {
    _reserveSpace(a1, 1);
    *(unsigned char *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = 79;
    _NSXPCSerializationAddInteger(a1, a3);
  }
  _reserveSpace(a1, a3);
  uint64_t result = memmove((void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)), a2, a3);
  *(void *)(a1 + 8200) += a3;
  return result;
}

void ____addOperations_block_invoke_3(uint64_t a1)
{
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t CVarArg<>._cVarArgEncoding.getter()
{
  id v0 = (id)dispatch thunk of _ObjectiveCBridgeable._bridgeToObjectiveC()();
  swift_unknownObjectRetain();
  uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v1 + 16) = 1;
  *(void *)(v1 + 32) = v0;
  swift_unknownObjectRelease();
  return v1;
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v1 < 0 || (v1 & 0x4000000000000000) != 0))
  {
    return (NSArray)swift_unknownObjectRetain();
  }
  else
  {
    _swift_isClassOrObjCExistentialType();
    swift_bridgeObjectRetain();
    return (NSArray)_ContiguousArrayBuffer._asCocoaArray()();
  }
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  if ((v0 & 0xC000000000000001) != 0)
  {
    if (v0 < 0) {
      uint64_t v1 = v0;
    }
    else {
      uint64_t v1 = v0 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    return (NSDictionary)v1;
  }
  else
  {
    swift_bridgeObjectRetain();
    return (NSDictionary)_NativeDictionary.bridged()();
  }
}

NSArray protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance [A]()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t Locale.Subdivision.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized _NSSwiftProcessInfo.globallyUniqueString.getter()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(out, 0, sizeof(out));
  _foundation_uuid_generate_random(out);
  uint64_t v0 = UUID.uuidString.getter();
  uint64_t v2 = v1;
  getpid();
  *(void *)uuid_t out = mach_absolute_time();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  uint64_t v3 = String.init<A>(_:radix:uppercase:)();
  unint64_t v5 = v4;
  uint64_t v6 = String.count.getter();
  if (__OFSUB__(16, v6)) {
    __break(1u);
  }
  uint64_t v7 = MEMORY[0x185302340](48, 0xE100000000000000, 16 - v6);
  BOOL v9 = v8;
  *(void *)uuid_t out = v0;
  *(void *)&out[8] = v2;
  v10._uint64_t countAndFlagsBits = 45;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 45;
  v12._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = v7;
  v13._unint64_t object = v9;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = v3;
  v14._unint64_t object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return *(void *)out;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UUID()
{
  uint64_t v1 = (objc_class *)type metadata accessor for __NSConcreteUUID();
  long long v4 = *v0;
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v2[OBJC_IVAR_____NSConcreteUUID__storage] = v4;
  v5.receiver = v2;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  uint64_t v1 = (objc_class *)type metadata accessor for __NSConcreteUUID();
  long long v4 = *v0;
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v2[OBJC_IVAR_____NSConcreteUUID__storage] = v4;
  v5.receiver = v2;
  v5.super_class = v1;
  return (NSUUID)objc_msgSendSuper2(&v5, sel_init);
}

objc_super *__NSConcreteUUID.init(coder:)(id a1)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v1;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v9;
    *(void *)(inited + 48) = 0xD000000000000026;
    *(void *)(inited + 56) = 0x80000001823ACDA0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    Swift::String v10 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v74);
    uint64_t v11 = v74;
    uint64_t v12 = v75;
    swift_retain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
    if (v14)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v10[(v13 >> 6) + 8] |= 1 << v13;
    uint64_t v15 = (uint64_t *)(v10[6] + 16 * v13);
    *uint64_t v15 = v11;
    v15[1] = v12;
    outlined init with take of Any(v76, (_OWORD *)(v10[7] + 32 * v13));
    uint64_t v16 = v10[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v10[2] = v18;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v19 = objc_allocWithZone((Class)NSError);
    uint64_t v20 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v21 = objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v20, 4864, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v22 = objc_msgSend(v21, sel_domain);
    id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    if (v23 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v25 != v26)
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  uint64_t v73 = 0;
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  a1 = a1;
  objc_super v5 = objc_msgSend(a1, sel_decodeBytesForKey_returnedLength_, v4, &v73);
  swift_unknownObjectRelease();
  if (v5)
  {
    if (v73 == 16)
    {
      *(_OWORD *)&v3[OBJC_IVAR_____NSConcreteUUID__storage] = *v5;

      uint64_t v6 = type metadata accessor for __NSConcreteUUID();
      long long v70 = v3;
      uint64_t v7 = (objc_super *)&v70;
LABEL_16:
      v7->super_class = (Class)v6;
      uint64_t v28 = [(objc_super *)v7 init];

      return v28;
    }
    if (objc_msgSend(self, sel__compatibilityBehavior))
    {
      int v30 = &v3[OBJC_IVAR_____NSConcreteUUID__storage];
      *(void *)int v30 = 0;
      *((void *)v30 + 1) = 0;

      uint64_t v6 = type metadata accessor for __NSConcreteUUID();
      uint64_t v71 = v3;
      uint64_t v7 = (objc_super *)&v71;
      goto LABEL_16;
    }
  }
  else
  {
    if (objc_msgSend(self, sel__compatibilityBehavior))
    {
      char v29 = &v3[OBJC_IVAR_____NSConcreteUUID__storage];
      *(void *)char v29 = 0;
      *((void *)v29 + 1) = 0;

      uint64_t v6 = type metadata accessor for __NSConcreteUUID();
      char v72 = v3;
      uint64_t v7 = (objc_super *)&v72;
      goto LABEL_16;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v32 = swift_initStackObject();
    *(_OWORD *)(v32 + 16) = xmmword_1821037E0;
    *(void *)(v32 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v32 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v32 + 40) = v33;
    *(void *)(v32 + 48) = 0xD00000000000001FLL;
    *(void *)(v32 + 56) = 0x80000001823AF5C0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    unint64_t v34 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v32 + 32, (uint64_t)&v74);
    uint64_t v35 = v74;
    uint64_t v36 = v75;
    swift_retain();
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    if (v38) {
      goto LABEL_33;
    }
    v34[(v37 >> 6) + 8] |= 1 << v37;
    unint64_t v39 = (uint64_t *)(v34[6] + 16 * v37);
    *unint64_t v39 = v35;
    v39[1] = v36;
    outlined init with take of Any(v76, (_OWORD *)(v34[7] + 32 * v37));
    uint64_t v40 = v34[2];
    BOOL v17 = __OFADD__(v40, 1);
    uint64_t v41 = v40 + 1;
    if (v17)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v34[2] = v41;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v42 = objc_allocWithZone((Class)NSError);
    uint64_t v43 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v44 = objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 4865, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v45 = objc_msgSend(v44, sel_domain);
    id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v48 = v47;

    if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v48 == v49) {
      goto LABEL_9;
    }
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v50) {
      goto LABEL_11;
    }
    __break(1u);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v51 = swift_initStackObject();
  *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
  *(void *)(v51 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v51 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v51 + 40) = v52;
  *(void *)(v51 + 48) = 0xD000000000000027;
  *(void *)(v51 + 56) = 0x80000001823AF5E0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  int v53 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v51 + 32, (uint64_t)&v74);
  uint64_t v54 = v74;
  uint64_t v55 = v75;
  swift_retain();
  unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v55);
  if (v57)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  v53[(v56 >> 6) + 8] |= 1 << v56;
  int v58 = (uint64_t *)(v53[6] + 16 * v56);
  *int v58 = v54;
  v58[1] = v55;
  outlined init with take of Any(v76, (_OWORD *)(v53[7] + 32 * v56));
  uint64_t v59 = v53[2];
  BOOL v17 = __OFADD__(v59, 1);
  uint64_t v60 = v59 + 1;
  if (v17) {
    goto LABEL_36;
  }
  v53[2] = v60;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v61 = objc_allocWithZone((Class)NSError);
  uint64_t v62 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v63 = objc_msgSend(v61, sel_initWithDomain_code_userInfo_, v62, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v64 = objc_msgSend(v63, sel_domain);
  id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  uint64_t v67 = v66;

  if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v67 == v68)
  {
LABEL_9:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
LABEL_11:
  objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
  swift_unknownObjectRelease();

  type metadata accessor for __NSConcreteUUID();
  swift_deallocPartialClassInstance();
  return 0;
}

const UInt8 *_decodeBytes(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 16));
  if (v3 != *(void *)(a1 + 136)) {
    __NSPoisoned();
  }
  unint64_t v7 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v7 | 8, (unint64_t *)(a1 + 16));
  unint64_t v8 = atomic_load((unint64_t *)(a1 + 16));
  *(void *)(a1 + 136) = v8;
  CFArrayRef v9 = *(const __CFArray **)(a1 + 80);
  if (!v9)
  {
    uint64_t v34 = 0;
    if (a3) {
      *a3 = 0;
    }
    int OffsetForValueFromDictionary3 = __CFBinaryPlistGetOffsetForValueFromDictionary3();
    uint64_t v15 = 0;
    if (!OffsetForValueFromDictionary3) {
      return v15;
    }
    unint64_t v16 = *(void *)(a1 + 104);
    BOOL v17 = (unsigned char *)(v16 + v34);
    char v18 = *(unsigned char *)(v16 + v34);
    if ((v18 & 0xF0) != 0x40)
    {
      BOOL v19 = (v18 & 0xF0) == 0x50 && (v18 & 0xF) == 5;
      if (v19 && v17[1] == 36 && v17[2] == 110 && v17[3] == 117 && v17[4] == 108 && v17[5] == 108) {
        return 0;
      }
LABEL_32:
      int v30 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
      size_t v31 = a2;
      id v22 = @"NSInvalidUnarchiveOperationException";
      id v23 = @"%@: value for key (%@) is not a blob of bytes";
      uint64_t v24 = (void *)a1;
LABEL_33:
      objc_msgSend(v24, "__failWithExceptionName:errorCode:format:", v22, 4864, v23, v30, v31);
      return 0;
    }
    unint64_t v25 = v18 & 0xF;
    uint64_t v15 = v17 + 1;
    uint64_t v33 = v17 + 1;
    if ((v18 & 0xF) == 0xF)
    {
      unint64_t v32 = 0;
      if ((_readInt((void *)a1, v15, v16 + *(void *)(a1 + 112) - 1, &v32, &v33) & 1) == 0)
      {
LABEL_47:
        int v30 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
        id v23 = @"%@: data is corrupt";
LABEL_48:
        uint64_t v24 = (void *)a1;
        id v22 = @"NSArchiverArchiveInconsistency";
        goto LABEL_33;
      }
      unint64_t v25 = v32;
      if ((v32 & 0x8000000000000000) != 0)
      {
        int v30 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
        size_t v31 = (const void *)v25;
        id v23 = @"%@: data bytes is too long to decode (%qd)";
        goto LABEL_48;
      }
      uint64_t v15 = v33;
      unint64_t v16 = *(void *)(a1 + 104);
    }
    BOOL v26 = (unint64_t)v15 >= v16;
    char v27 = &v15[-v16];
    if (v26)
    {
      unint64_t v28 = *(void *)(a1 + 112);
      BOOL v26 = v28 >= (unint64_t)v27;
      unint64_t v29 = v28 - (void)v27;
      if (v26 && v25 <= v29)
      {
        if (a3) {
          *a3 = v25;
        }
        return v15;
      }
    }
    goto LABEL_47;
  }
  CFIndex Count = CFArrayGetCount(v9);
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    id v13 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
  id v20 = Value;
  if (a3) {
LABEL_22:
  }
    *a3 = 0;
LABEL_23:
  if (!Value || CFGetTypeID(Value) == 7 && CFEqual(@"$null", Value)) {
    return 0;
  }
  if (CFGetTypeID(Value) != 20) {
    goto LABEL_32;
  }
  if (a3) {
    *a3 = CFDataGetLength((CFDataRef)Value);
  }

  return CFDataGetBytePtr((CFDataRef)Value);
}

double UUID.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)unint64_t v3 = 0uLL;
  _foundation_uuid_generate_random((unsigned __int8 *)v3);
  double result = v3[0];
  *a1 = *(_OWORD *)v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance UUID@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return UUID.init(from:)(a1, a2);
}

uint64_t UUID.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    UUID.init(uuidString:)((uint64_t)&v24);
    swift_bridgeObjectRelease();
    if (v26)
    {
      uint64_t v5 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v7 = v6;
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Decoder.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v7, *MEMORY[0x1E4FBBA78], v5);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    }
    else
    {
      char v9 = v24;
      char v8 = v25;
      unint64_t v10 = v24 >> 8;
      unint64_t v11 = v24 >> 16;
      unint64_t v12 = v24 >> 24;
      unint64_t v13 = HIDWORD(v24);
      unint64_t v15 = v24 >> 40;
      unint64_t v16 = HIWORD(v24);
      unint64_t v17 = HIBYTE(v24);
      unint64_t v18 = v25 >> 8;
      unint64_t v19 = v25 >> 16;
      unint64_t v20 = v25 >> 24;
      unint64_t v21 = HIDWORD(v25);
      unint64_t v22 = v25 >> 40;
      unint64_t v23 = HIWORD(v25);
      unint64_t v28 = HIBYTE(v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      *a2 = v9;
      a2[1] = v10;
      a2[2] = v11;
      a2[3] = v12;
      a2[4] = v13;
      a2[5] = v15;
      a2[6] = v16;
      a2[7] = v17;
      a2[8] = v8;
      a2[9] = v18;
      a2[10] = v19;
      a2[11] = v20;
      a2[12] = v21;
      a2[13] = v22;
      a2[14] = v23;
      a2[15] = v28;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

id __NSConcreteUUID.init(uuidString:)()
{
  uint64_t v1 = v0;
  UUID.init(uuidString:)((uint64_t)v14);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    int v6 = HIDWORD(v14[0]);
    uint64_t v5 = v14[1];
    uint64_t v7 = v14[0] >> 8;
    uint64_t v8 = v14[0] >> 16;
    uint64_t v9 = v14[0] >> 24;
    unint64_t v10 = &v1[OBJC_IVAR_____NSConcreteUUID__storage];
    *unint64_t v10 = v14[0];
    v10[1] = v7;
    v10[2] = v8;
    v10[3] = v9;
    *((_DWORD *)v10 + 1) = v6;
    *((void *)v10 + 1) = v5;

    uint64_t v3 = type metadata accessor for __NSConcreteUUID();
    unint64_t v12 = v1;
    uint64_t v4 = (objc_super *)&v12;
    goto LABEL_5;
  }
  if (objc_msgSend(self, sel__compatibilityBehavior))
  {
    uint64_t v2 = &v1[OBJC_IVAR_____NSConcreteUUID__storage];
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;

    uint64_t v3 = type metadata accessor for __NSConcreteUUID();
    v13.receiver = v1;
    uint64_t v4 = &v13;
LABEL_5:
    v4->super_class = (Class)v3;
    return [(objc_super *)v4 init];
  }

  type metadata accessor for __NSConcreteUUID();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t UUID.init(uuidString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)int v6 = 0uLL;
  uint64_t v2 = String.utf8CString.getter();
  int v3 = _foundation_uuid_parse((const char *)(v2 + 32), v6);
  uint64_t result = swift_release();
  if (v3) {
    long long v5 = 0uLL;
  }
  else {
    long long v5 = *(_OWORD *)v6;
  }
  *(_OWORD *)a1 = v5;
  *(unsigned char *)(a1 + 16) = v3 != 0;
  return result;
}

uint64_t specialized static UUID._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSUUID();
    v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 544175136;
    v4._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 1145656661;
    v5._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 1;
  if (!a1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(a1, (uint64_t)&v11);
  if (result)
  {
    if ((v13 & 1) == 0)
    {
      unint64_t v5 = v11;
      uint64_t v4 = v12;
      unint64_t v6 = v11 >> 8;
      unint64_t v7 = v11 >> 16;
      *(unsigned char *)a2 = v11;
      *(unsigned char *)(a2 + 1) = v6;
      *(unsigned char *)(a2 + 2) = v7;
      *(unsigned char *)(a2 + 3) = BYTE3(v5);
      *(unsigned char *)(a2 + 4) = BYTE4(v5);
      *(unsigned char *)(a2 + 5) = BYTE5(v5);
      *(unsigned char *)(a2 + 6) = BYTE6(v5);
      *(unsigned char *)(a2 + 7) = HIBYTE(v5);
      *(void *)(a2 + 8) = v4;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  type metadata accessor for NSUUID();
  v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 544175136;
  v9._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 1145656661;
  v10._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  type metadata accessor for __NSConcreteUUID();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    long long v5 = *(_OWORD *)(v4 + OBJC_IVAR_____NSConcreteUUID__storage);
  }
  else
  {
    long long v7 = 0uLL;
    objc_msgSend(a1, sel_getUUIDBytes_, &v7);
    long long v5 = v7;
  }
  *(_OWORD *)a2 = v5;
  *(unsigned char *)(a2 + 16) = 0;
  return 1;
}

id __NSConcreteUUID.init()()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(out, 0, 16);
  uint64_t v1 = v0;
  _foundation_uuid_generate_random(out);
  *(_OWORD *)&v1[OBJC_IVAR_____NSConcreteUUID__storage] = *(_OWORD *)out;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v3, sel_init);
}

id __NSConcreteUUID.init(uuidBytes:)(long long *a1)
{
  if (a1) {
    long long v2 = *a1;
  }
  else {
    long long v2 = 0uLL;
  }
  *(_OWORD *)&v1[OBJC_IVAR_____NSConcreteUUID__storage] = v2;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for __NSConcreteUUID()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanNull()()
{
  long long v2 = (unsigned char *)v0[3];
  unint64_t v3 = v0[4];
  if (v3 < (unint64_t)v2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((uint64_t)(v3 - (void)v2) <= 3)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v4 = 1;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0;
    char v5 = 12;
LABEL_21:
    *(unsigned char *)(v4 + 48) = v5;
    swift_willThrow();
    return;
  }
  uint64_t v1 = v0;
  if (*(_DWORD *)v2 != 1819047278)
  {
    if ((((v0[1] + v0[2] - v3) | (unint64_t)&v2[-v0[1]]) & 0x8000000000000000) == 0)
    {
      if (*v2 == 110)
      {
        if (v2[1] == 117)
        {
          if (v2[2] == 108)
          {
            uint64_t v6 = 3;
            if (v2[3] == 108) {
              uint64_t v6 = 0;
            }
          }
          else
          {
            uint64_t v6 = 2;
          }
        }
        else
        {
          uint64_t v6 = 1;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v12 = &v2[v6];
      v0[3] = &v2[v6];
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      uint64_t v0 = v20;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      if ((unint64_t)v12 < v1[4])
      {
        uint64_t v13 = *v12;
        unint64_t v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v12, v1[1], v1[2]);
        uint64_t v16 = v15;
        uint64_t v18 = v17;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v4 = 0xD000000000000016;
        *(void *)(v4 + 8) = 0x80000001823ABB80;
        *(void *)(v4 + 16) = v13;
        *(void *)(v4 + 24) = v14;
        *(void *)(v4 + 32) = v16;
        *(void *)(v4 + 40) = v18;
        char v5 = 1;
        goto LABEL_21;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v0[3] = v2 + 4;
  long long v7 = (void *)v0[1];
  uint64_t v8 = v0[2];
  v0 += 6;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v7, v8, (uint64_t)(v2 + 4));
  uint64_t v1 = (void *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
  }
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  unint64_t v10 = v1[2];
  unint64_t v9 = v1[3];
  unint64_t v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    unint64_t v21 = v10 + 1;
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v1);
    unint64_t v11 = v21;
    uint64_t v1 = v19;
  }
  v1[2] = v11;
  v1[v10 + 4] = 2;
  *uint64_t v0 = v1;
}

void closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(unsigned int *a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, void *a6)
{
  uint64_t v10 = specialized static BPlistScanner.scanBinaryPropertyList(from:)(a1, a2);
  if (!v6)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    *((void *)&v44 + 1) = v13;
    id v45 = &protocol witness table for _PlistDecoder<A>;
    v43[0] = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v11, v12, 0x8000000000000000);
    swift_retain();
    a4(v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a6 = 200;
    return;
  }
  id v48 = v6;
  id v14 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast()) {
    goto LABEL_11;
  }

  uint64_t v16 = v46;
  uint64_t v15 = v47;
  uint64_t v17 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v42 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v20;
  uint64_t v21 = BPlistError.debugDescription.getter(v16, v15);
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v21;
  *(void *)(inited + 56) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v23 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v43);
  uint64_t v24 = v43[0];
  uint64_t v25 = v43[1];
  swift_retain();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if (v27)
  {
    __break(1u);
    goto LABEL_13;
  }
  v23[(v26 >> 6) + 8] |= 1 << v26;
  unint64_t v28 = (uint64_t *)(v23[6] + 16 * v26);
  *unint64_t v28 = v24;
  v28[1] = v25;
  outlined init with take of Any(&v44, (_OWORD *)(v23[7] + 32 * v26));
  uint64_t v29 = v23[2];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v23[2] = v31;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v32 = objc_allocWithZone((Class)NSError);
  uint64_t v33 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v35 = objc_msgSend(v34, sel_domain);
  id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v38 == v39)
  {
    swift_bridgeObjectRelease_n();
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, (unint64_t)v15);
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104))(v42, *MEMORY[0x1E4FBBA78], v17);
    swift_willThrow();
LABEL_11:

    return;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, (unint64_t)v15);
  if (v40) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t *__return_ptr, void *)@<X3>, void *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11 = specialized static BPlistScanner.scanBinaryPropertyList(from:)(a1, a2);
  if (!v6)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    v48[3] = v14;
    v48[4] = &protocol witness table for _PlistDecoder<A>;
    v48[0] = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v12, v13, 0x8000000000000000);
    swift_retain();
    a4(&v49, v48);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a5 = 200;
    uint64_t v43 = v51;
    uint64_t v44 = v52;
    uint64_t v45 = v55;
    *(void *)a6 = v49;
    *(_OWORD *)(a6 + 8) = v50;
    *(void *)(a6 + 24) = v43;
    *(void *)(a6 + 32) = v44;
    *(_OWORD *)(a6 + 40) = v53;
    *(_OWORD *)(a6 + 56) = v54;
    *(void *)(a6 + 72) = v45;
    long long v46 = v57;
    *(_OWORD *)(a6 + 80) = v56;
    *(_OWORD *)(a6 + 96) = v46;
    return;
  }
  id v58 = v6;
  id v15 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast()) {
    goto LABEL_11;
  }

  uint64_t v17 = v48[0];
  uint64_t v16 = (void *)v48[1];
  uint64_t v18 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v47 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v21;
  uint64_t v22 = BPlistError.debugDescription.getter(v17, v16);
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v24 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v49, &demangling cache variable for type metadata for (String, Any));
  uint64_t v25 = v49;
  uint64_t v26 = v50;
  swift_retain();
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
  if (v28)
  {
    __break(1u);
    goto LABEL_13;
  }
  v24[(v27 >> 6) + 8] |= 1 << v27;
  uint64_t v29 = (uint64_t *)(v24[6] + 16 * v27);
  *uint64_t v29 = v25;
  v29[1] = v26;
  outlined init with take of Any((long long *)((char *)&v50 + 8), (_OWORD *)(v24[7] + 32 * v27));
  uint64_t v30 = v24[2];
  BOOL v31 = __OFADD__(v30, 1);
  uint64_t v32 = v30 + 1;
  if (v31)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  _OWORD v24[2] = v32;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v33 = objc_allocWithZone((Class)NSError);
  uint64_t v34 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v36 = objc_msgSend(v35, sel_domain);
  id v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;

  if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v17, (unint64_t)v16);
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v47, *MEMORY[0x1E4FBBA78], v18);
    swift_willThrow();
LABEL_11:

    return;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v17, (unint64_t)v16);
  if (v41) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void *specialized _PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = v3;
  double v3[3] = a1;
  v3[2] = MEMORY[0x1E4FBC860];
  uint64_t v8 = *(void *)(a1 + 48);
  swift_retain();
  unint64_t v9 = BPlistMap.loadValue(at:)(v8);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_deallocPartialClassInstance();
  }
  else
  {
    unint64_t v10 = v9;
    uint64_t v11 = (void *)v5[2];
    outlined copy of BPlistMap.Value(v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5[2] = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      unint64_t v5[2] = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
    }
    void v11[2] = v14 + 1;
    v11[v14 + 4] = v10;
    unint64_t v5[2] = v11;
    outlined consume of BPlistMap.Value(v10);
    swift_release();
    v5[4] = a2;
    v5[5] = a3;
  }
  return v5;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      unint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      unint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      unint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 288 * a1 + 32;
    unint64_t v6 = a3 + 288 * v4;
    if (v5 >= v6 || v5 + 288 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<BPlistMap.Value>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeMutablePointer<Int8>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<XMLPlistMap.Value>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CFRange>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>, &demangling cache variable for type metadata for [UInt8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UDateFormatField]>, &demangling cache variable for type metadata for [UDateFormatField]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<String.Encoding>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Range<AttributedString.Index>, NSInflectionRule)>, &demangling cache variable for type metadata for (Range<AttributedString.Index>, NSInflectionRule));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Range<AttributedString.Index>, NSLocalizedNumberFormatRule)>, &demangling cache variable for type metadata for (Range<AttributedString.Index>, NSLocalizedNumberFormatRule));
}

uint64_t specialized static BPlistScanner.scanBinaryPropertyList(from:)(unsigned int *a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)a1;
  specialized static BPlistScanner.parseTopLevelInfo(from:)(a1, a2, (uint64_t)v33);
  uint64_t result = outlined init with take of BPlistTrailer?((uint64_t)v33, (uint64_t)&v34);
  if (v41)
  {
LABEL_35:
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    *uint64_t v25 = xmmword_182106C90;
    swift_willThrow();
    return v2;
  }
  int v42 = v34;
  __int16 v43 = v35;
  uint64_t v4 = v38;
  if (v38 < 0) {
    goto LABEL_41;
  }
  int64_t v5 = v36;
  char v6 = v37;
  uint64_t v7 = v39;
  uint64_t v8 = v40;
  uint64_t v9 = 0x40000;
  if (v38 < 0x40000) {
    uint64_t v9 = v38;
  }
  if (*(void *)(MEMORY[0x1E4FBC860] + 16) <= v9) {
    int64_t v10 = v9;
  }
  else {
    int64_t v10 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0, MEMORY[0x1E4FBC860]);
  if (v8 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  unint64_t v11 = v8 - 1;
  if (!v8) {
    goto LABEL_43;
  }
  int64_t v12 = (void *)result;
  char v29 = v6;
  uint64_t v30 = v7;
  unint64_t v31 = v2;
  if (v4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a2;
    unint64_t v15 = v2 + a2;
    uint64_t v16 = (unsigned int *)(v2 + v8);
    int64_t v17 = v5 - 8;
    uint64_t v18 = v5;
    while ((uint64_t)(v15 - (void)v16) >= v5)
    {
      unint64_t v19 = v5;
      switch((int)v5)
      {
        case 0:
          goto LABEL_30;
        case 1:
          if (v14 < 0) {
            goto LABEL_45;
          }
          unint64_t v19 = *(unsigned __int8 *)v16;
          goto LABEL_29;
        case 2:
          if (v14 < 0) {
            goto LABEL_46;
          }
          unint64_t v19 = __rev16(*(unsigned __int16 *)v16);
          goto LABEL_29;
        case 3:
        case 5:
        case 6:
        case 7:
          if (v14 < 0)
          {
            __break(1u);
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v19 = 0;
          uint64_t v20 = 0;
          do
            unint64_t v19 = *((unsigned __int8 *)v16 + v20++) | (v19 << 8);
          while (v5 != v20);
LABEL_29:
          if (v11 < v19) {
            goto LABEL_34;
          }
LABEL_30:
          unint64_t v2 = v12[2];
          unint64_t v22 = v12[3];
          if (v2 >= v22 >> 1)
          {
            uint64_t v23 = v12;
            unint64_t v24 = v11;
            uint64_t v27 = v18;
            int64_t v28 = v17;
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v2 + 1, 1, v23);
            uint64_t v18 = v27;
            int64_t v17 = v28;
            unint64_t v11 = v24;
            uint64_t v14 = a2;
            int64_t v12 = (void *)result;
          }
          ++v13;
          void v12[2] = v2 + 1;
          v12[v2 + 4] = v19;
          uint64_t v16 = (unsigned int *)((char *)v16 + v5);
          if (v13 == v4) {
            goto LABEL_37;
          }
          break;
        case 4:
          if (v14 < 0) {
            goto LABEL_47;
          }
          unint64_t v19 = bswap32(*v16);
          goto LABEL_29;
        case 8:
          if (v14 < 0) {
            goto LABEL_48;
          }
          unint64_t v21 = *(void *)v16;
          goto LABEL_28;
        default:
          if (v14 < 0) {
            goto LABEL_44;
          }
          unint64_t v21 = *(void *)((char *)v16 + v17);
LABEL_28:
          unint64_t v19 = bswap64(v21);
          goto LABEL_29;
      }
    }
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t v14 = a2;
LABEL_37:
  uint64_t v26 = v14;
  type metadata accessor for BPlistMap();
  unint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 16) = v31;
  *(void *)(result + 24) = v26;
  *(void *)(result + 32) = 0;
  *(void *)(v2 + 64) = result;
  *(_DWORD *)(v2 + 16) = v42;
  *(_WORD *)(v2 + 20) = v43;
  *(unsigned char *)(v2 + 22) = v5;
  *(unsigned char *)(v2 + 23) = v29;
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v30;
  *(void *)(v2 + 40) = v8;
  if ((v30 & 0x8000000000000000) == 0)
  {
    *(void *)(v2 + 48) = v30;
    *(void *)(v2 + 56) = v12;
    return v2;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BPlistMap()
{
  return self;
}

uint64_t outlined init with take of BPlistTrailer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BPlistTrailer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned int *specialized static BPlistScanner.parseTopLevelInfo(from:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 < 41 || (*result == 1768714338 ? (BOOL v4 = *(unsigned int *)((char *)result + 3) == 812938089) : (BOOL v4 = 0), !v4))
  {
LABEL_6:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    char v9 = 1;
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  uint64_t v10 = (uint64_t)result + a2;
  unint64_t v11 = *(void *)((char *)result + a2 - 24);
  char v9 = 1;
  if (!v11) {
    goto LABEL_34;
  }
  unint64_t v12 = bswap64(v11);
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_34;
  }
  unint64_t v13 = bswap64(*(void *)(v10 - 8));
  if ((v13 & 0x8000000000000000) != 0) {
    goto LABEL_34;
  }
  unint64_t v14 = bswap64(*(void *)(v10 - 16));
  if (v14 >= v12) {
    goto LABEL_34;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  if (v13 < 9) {
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  if (v13 >= a2 - 32) {
    goto LABEL_34;
  }
  unint64_t v15 = *(unsigned __int8 *)(v10 - 26);
  if (!*(unsigned char *)(v10 - 26)) {
    goto LABEL_34;
  }
  uint64_t v16 = *(unsigned __int8 *)(v10 - 25);
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  if (!*(unsigned char *)(v10 - 25)) {
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  if (!is_mul_ok(v12, v15)) {
    goto LABEL_34;
  }
  unint64_t v17 = v12 * v15;
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  if (!(v12 * v15)) {
    goto LABEL_7;
  }
  unint64_t v18 = v13 + v17;
  if (__CFADD__(v13, v17)) {
    goto LABEL_20;
  }
  unint64_t v5 = 0;
  unint64_t v19 = v18 + 32;
  if (v18 >= 0xFFFFFFFFFFFFFFE0) {
    goto LABEL_34;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  if (v19 != a2) {
    goto LABEL_7;
  }
  if ((uint64_t v20 = *(unsigned int *)(v10 - 32),
        uint64_t v21 = *(unsigned __int8 *)(v10 - 28),
        uint64_t v22 = *(unsigned __int8 *)(v10 - 27),
        v16 <= 7)
    && v12 >> (8 * (v16 & 7u))
    || v15 <= 7 && v13 >> (8 * (v15 & 7u))
    || (unint64_t v23 = v14 * v15,
        ((uint64_t)v14 * (unsigned __int128)*(unsigned __int8 *)(v10 - 26)) >> 64 != (uint64_t)(v14 * v15) >> 63))
  {
LABEL_20:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  uint64_t v24 = v13 + v23;
  if (__OFADD__(v13, v23)) {
    goto LABEL_34;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  if (v24 >= a2) {
    goto LABEL_7;
  }
  uint64_t result = BufferReader.getSizedInt(at:endIndex:size:)((unsigned int *)((char *)result + v24), v10, v15);
  if (v25) {
    goto LABEL_6;
  }
  unint64_t v5 = 0;
  char v9 = 1;
  if ((unint64_t)result < 8)
  {
LABEL_34:
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    goto LABEL_7;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  if ((unint64_t)result < v13)
  {
    char v9 = 0;
    unint64_t v5 = v20 | (v21 << 32) | (v22 << 40) | (v15 << 48) | (v16 << 56);
    unint64_t v6 = v12;
    unint64_t v7 = v14;
    unint64_t v8 = v13;
  }
LABEL_7:
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  *(unsigned char *)(a3 + 32) = v9;
  return result;
}

unsigned int *BufferReader.getSizedInt(at:endIndex:size:)(unsigned int *result, uint64_t a2, uint64_t a3)
{
  if (a2 - (uint64_t)result < a3) {
    return 0;
  }
  unint64_t v4 = a3;
  switch(a3)
  {
    case 0:
      return (unsigned int *)v4;
    case 1:
      unint64_t v12 = v3[2];
      unint64_t v13 = v3[4];
      if (v13 < v12) {
        goto LABEL_48;
      }
      if ((uint64_t)(v12 - *v3) < 0) {
        goto LABEL_49;
      }
      if ((uint64_t)(v13 - v12) < 0) {
        goto LABEL_50;
      }
      if ((uint64_t)(*v3 + v3[1] - v13) < 0) {
        goto LABEL_51;
      }
      return (unsigned int *)*(unsigned __int8 *)result;
    case 2:
      unint64_t v14 = v3[2];
      unint64_t v15 = v3[4];
      if (v15 < v14) {
        goto LABEL_52;
      }
      if ((uint64_t)(v14 - *v3) < 0) {
        goto LABEL_53;
      }
      if ((uint64_t)(v15 - v14) < 0) {
        goto LABEL_54;
      }
      if ((uint64_t)(*v3 + v3[1] - v15) < 0) {
        goto LABEL_55;
      }
      return (unsigned int *)__rev16(*(unsigned __int16 *)result);
    case 3:
    case 5:
    case 6:
    case 7:
      unint64_t v5 = v3[2];
      unint64_t v6 = v3[4];
      if (v6 < v5)
      {
        __break(1u);
        goto LABEL_40;
      }
      if ((uint64_t)(v5 - *v3) < 0)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if ((uint64_t)(v6 - v5) < 0)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      if ((uint64_t)(*v3 + v3[1] - v6) >= 0)
      {
        unint64_t v4 = 0;
        uint64_t v7 = a3;
        do
        {
          unsigned int v8 = *(unsigned __int8 *)result;
          uint64_t result = (unsigned int *)((char *)result + 1);
          unint64_t v4 = v8 | (v4 << 8);
          --v7;
        }
        while (v7);
        return (unsigned int *)v4;
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      return result;
    case 4:
      unint64_t v16 = v3[2];
      unint64_t v17 = v3[4];
      if (v17 < v16) {
        goto LABEL_56;
      }
      if ((uint64_t)(v16 - *v3) < 0) {
        goto LABEL_57;
      }
      if ((uint64_t)(v17 - v16) < 0) {
        goto LABEL_58;
      }
      if ((uint64_t)(*v3 + v3[1] - v17) < 0) {
        goto LABEL_59;
      }
      return (unsigned int *)bswap32(*result);
    case 8:
      unint64_t v18 = v3[2];
      unint64_t v19 = v3[4];
      if (v19 < v18) {
        goto LABEL_60;
      }
      if ((uint64_t)(v18 - *v3) < 0) {
        goto LABEL_61;
      }
      if ((uint64_t)(v19 - v18) < 0) {
        goto LABEL_62;
      }
      if ((uint64_t)(*v3 + v3[1] - v19) < 0) {
        goto LABEL_63;
      }
      unint64_t v11 = *(void *)result;
      return (unsigned int *)bswap64(v11);
    default:
      if (__OFSUB__(a2 - (void)result, a3)) {
        goto LABEL_43;
      }
      unint64_t v9 = v3[2];
      unint64_t v10 = v3[4];
      if (v10 < v9) {
        goto LABEL_44;
      }
      if ((uint64_t)(v9 - *v3) < 0) {
        goto LABEL_45;
      }
      if ((uint64_t)(v10 - v9) < 0) {
        goto LABEL_46;
      }
      if ((uint64_t)(*v3 + v3[1] - v10) < 0) {
        goto LABEL_47;
      }
      unint64_t v11 = *(void *)((char *)result + a3);
      return (unsigned int *)bswap64(v11);
  }
}

uint64_t specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(char a1)
{
  if ((a1 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull_native(), !result))
  {
    unint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 24) + 64);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  os_unfair_lock_s *v3;
  uint64_t vars8;

  if ((a1 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull_native(), !result))
  {
    unint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 24) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized _ProcessInfo.environment.getter()
{
  _platform_shims_lock_environ();
  environ = _platform_shims_get_environ();
  if (!environ)
  {
    _platform_shims_unlock_environ();
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v1 = environ;
  unint64_t v2 = *environ;
  if (v2)
  {
    unint64_t v3 = (const char **)(v1 + 1);
    unint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v5 = strdup(v2);
      if (!v5) {
        goto LABEL_78;
      }
      unint64_t v6 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v8 = v4[2];
      unint64_t v7 = v4[3];
      if (v8 >= v7 >> 1) {
        unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v4);
      }
      v4[2] = v8 + 1;
      v4[v8 + 4] = v6;
      unint64_t v9 = *v3++;
      unint64_t v2 = v9;
    }
    while (v9);
  }
  else
  {
    unint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
  _platform_shims_unlock_environ();
  uint64_t v11 = v4[2];
  if (!v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x1E4FBC868];
LABEL_69:
    swift_bridgeObjectRelease();
    uint64_t v68 = v4[2];
    if (v68)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v68; ++i)
      {
        long long v70 = (void *)v4[i + 4];
        free(v70);
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return v10;
  }
  swift_bridgeObjectRetain_n();
  unint64_t v12 = 0;
  uint64_t v10 = MEMORY[0x1E4FBC868];
  uint64_t v76 = v11;
  while (v12 < v4[2])
  {
    uint64_t v13 = String.init(cString:)();
    unint64_t v15 = v14;
    specialized Collection<>.firstIndex(of:)(61, 0xE100000000000000, v13, v14);
    if ((v16 & 1) == 0)
    {
      uint64_t v78 = v10;
      uint64_t v17 = String.subscript.getter();
      uint64_t v18 = MEMORY[0x185301F50](v17);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      unint64_t v21 = String.index(after:)();
      uint64_t v22 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0) {
        uint64_t v22 = v13 & 0xFFFFFFFFFFFFLL;
      }
      if (4 * v22 < v21 >> 14) {
        goto LABEL_76;
      }
      uint64_t v23 = String.subscript.getter();
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v30 = MEMORY[0x185301F50](v23, v25, v27, v29);
      uint64_t v77 = v31;
      swift_bridgeObjectRelease();
      uint64_t v32 = v78;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v34 = v18;
      uint64_t v35 = v18;
      uint64_t v36 = v78;
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v20);
      uint64_t v39 = *(void *)(v78 + 16);
      BOOL v40 = (v37 & 1) == 0;
      uint64_t v41 = v39 + v40;
      if (__OFADD__(v39, v40)) {
        goto LABEL_77;
      }
      char v42 = v37;
      if (*(void *)(v78 + 24) >= v41)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v37 & 1) == 0) {
            goto LABEL_65;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
          uint64_t v46 = static _DictionaryStorage.copy(original:)();
          uint64_t v32 = v46;
          if (*(void *)(v78 + 16))
          {
            uint64_t v47 = (char *)(v46 + 64);
            id v48 = (char *)(v78 + 64);
            unint64_t v49 = (unint64_t)((1 << *(unsigned char *)(v32 + 32)) + 63) >> 6;
            uint64_t v72 = v78 + 64;
            if (v32 != v78 || v47 >= &v48[8 * v49]) {
              memmove(v47, v48, 8 * v49);
            }
            int64_t v50 = 0;
            *(void *)(v32 + 16) = *(void *)(v78 + 16);
            uint64_t v51 = 1 << *(unsigned char *)(v78 + 32);
            if (v51 < 64) {
              uint64_t v52 = ~(-1 << v51);
            }
            else {
              uint64_t v52 = -1;
            }
            unint64_t v53 = v52 & *(void *)(v78 + 64);
            int64_t v73 = (unint64_t)(v51 + 63) >> 6;
            while (1)
            {
              if (v53)
              {
                uint64_t v74 = (v53 - 1) & v53;
                int64_t v75 = v50;
                unint64_t v54 = __clz(__rbit64(v53)) | (v50 << 6);
              }
              else
              {
                int64_t v64 = v50 + 1;
                if (__OFADD__(v50, 1)) {
                  goto LABEL_79;
                }
                if (v64 >= v73) {
                  break;
                }
                unint64_t v65 = *(void *)(v72 + 8 * v64);
                int64_t v66 = v50 + 1;
                if (!v65)
                {
                  int64_t v66 = v50 + 2;
                  if (v50 + 2 >= v73) {
                    break;
                  }
                  unint64_t v65 = *(void *)(v72 + 8 * v66);
                  if (!v65)
                  {
                    int64_t v66 = v50 + 3;
                    if (v50 + 3 >= v73) {
                      break;
                    }
                    unint64_t v65 = *(void *)(v72 + 8 * v66);
                    if (!v65)
                    {
                      int64_t v66 = v50 + 4;
                      if (v50 + 4 >= v73) {
                        break;
                      }
                      unint64_t v65 = *(void *)(v72 + 8 * v66);
                      if (!v65)
                      {
                        int64_t v66 = v50 + 5;
                        if (v50 + 5 >= v73) {
                          break;
                        }
                        unint64_t v65 = *(void *)(v72 + 8 * v66);
                        if (!v65)
                        {
                          int64_t v66 = v50 + 6;
                          if (v50 + 6 >= v73) {
                            break;
                          }
                          unint64_t v65 = *(void *)(v72 + 8 * v66);
                          if (!v65)
                          {
                            int64_t v66 = v50 + 7;
                            if (v50 + 7 >= v73) {
                              break;
                            }
                            unint64_t v65 = *(void *)(v72 + 8 * v66);
                            if (!v65)
                            {
                              uint64_t v67 = v50 + 8;
                              if (v50 + 8 >= v73) {
                                break;
                              }
                              unint64_t v65 = *(void *)(v72 + 8 * v67);
                              if (!v65)
                              {
                                uint64_t v36 = v78;
                                while (1)
                                {
                                  int64_t v66 = v67 + 1;
                                  if (__OFADD__(v67, 1)) {
                                    goto LABEL_80;
                                  }
                                  if (v66 >= v73) {
                                    goto LABEL_64;
                                  }
                                  unint64_t v65 = *(void *)(v72 + 8 * v66);
                                  ++v67;
                                  if (v65) {
                                    goto LABEL_63;
                                  }
                                }
                              }
                              int64_t v66 = v50 + 8;
                              uint64_t v36 = v78;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_63:
                uint64_t v74 = (v65 - 1) & v65;
                int64_t v75 = v66;
                unint64_t v54 = __clz(__rbit64(v65)) + (v66 << 6);
              }
              uint64_t v55 = 16 * v54;
              long long v56 = (uint64_t *)(*(void *)(v36 + 48) + v55);
              uint64_t v58 = *v56;
              uint64_t v57 = v56[1];
              uint64_t v59 = (uint64_t *)(*(void *)(v36 + 56) + v55);
              uint64_t v60 = *v59;
              uint64_t v61 = v59[1];
              uint64_t v62 = (void *)(*(void *)(v32 + 48) + v55);
              *uint64_t v62 = v58;
              v62[1] = v57;
              id v63 = (void *)(*(void *)(v32 + 56) + v55);
              *id v63 = v60;
              v63[1] = v61;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unint64_t v53 = v74;
              int64_t v50 = v75;
            }
          }
LABEL_64:
          swift_bridgeObjectRelease();
          if ((v42 & 1) == 0) {
            goto LABEL_65;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
        uint64_t v32 = v78;
        unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v20);
        if ((v42 & 1) != (v44 & 1)) {
          goto LABEL_81;
        }
        unint64_t v38 = v43;
        if ((v42 & 1) == 0)
        {
LABEL_65:
          specialized _NativeDictionary._insert(at:key:value:)(v38, v34, v20, v30, v77, (void *)v32);
          swift_bridgeObjectRetain();
          goto LABEL_66;
        }
      }
      uint64_t v45 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v38);
      swift_bridgeObjectRelease();
      *uint64_t v45 = v30;
      v45[1] = v77;
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v32;
      uint64_t v11 = v76;
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
LABEL_16:
    if (++v12 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  unint64_t v6 = (void *)(a6[6] + 16 * result);
  *unint64_t v6 = a2;
  v6[1] = a3;
  unint64_t v7 = (void *)(a6[7] + 16 * result);
  *unint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  int64_t v34;
  char v35;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        unint64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v34) {
          goto LABEL_35;
        }
        unint64_t v22 = v33[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_35;
          }
          unint64_t v22 = v33[v13];
          if (!v22)
          {
            int64_t v13 = v21 + 2;
            if (v21 + 2 >= v34) {
              goto LABEL_35;
            }
            unint64_t v22 = v33[v13];
            if (!v22)
            {
              int64_t v23 = v21 + 3;
              if (v23 >= v34)
              {
LABEL_35:
                swift_release();
                unint64_t v3 = v2;
                if (v35)
                {
                  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                  if (v32 >= 64) {
                    bzero(v33, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  }
                  else {
                    *uint64_t v33 = -1 << v32;
                  }
                  *(void *)(v5 + 16) = 0;
                }
                break;
              }
              unint64_t v22 = v33[v23];
              if (!v22)
              {
                while (1)
                {
                  int64_t v13 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v34) {
                    goto LABEL_35;
                  }
                  unint64_t v22 = v33[v13];
                  ++v23;
                  if (v22) {
                    goto LABEL_32;
                  }
                }
              }
              int64_t v13 = v23;
            }
          }
        }
LABEL_32:
        unint64_t v10 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      unint64_t v28 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v30 = *v28;
      BOOL v29 = v28[1];
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((v35 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          int64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          char v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v30;
      v18[1] = v29;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  void *v29;
  long long v30;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, _CalendarProtocol>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    BOOL v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              unint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v29 = -1 << v28;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      uint64_t v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(unsigned char *)(*(void *)(v7 + 48) + v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v13++, 1)) {
      goto LABEL_40;
    }
    if (v13 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v13);
    if (!v25)
    {
      int64_t v26 = v13 + 1;
      if (v13 + 1 >= v40)
      {
LABEL_31:
        swift_release();
        unint64_t v3 = v39;
        if ((v42 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          int64_t v13 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            break;
          }
          if (v13 >= v40) {
            goto LABEL_31;
          }
          unint64_t v25 = *(void *)(v41 + 8 * v13);
          ++v26;
          if (v25) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v13;
    }
LABEL_20:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_21:
    char v27 = 16 * v22;
    unint64_t v28 = (uint64_t *)(*(void *)(v5 + 48) + v27);
    uint64_t v30 = *v28;
    BOOL v29 = v28[1];
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 56) + v27);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v36 = v16 == v35;
        if (v16 == v35) {
          unint64_t v16 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v16);
      }
      while (v37 == -1);
      unint64_t v17 = __clz(__rbit64(~v37)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v30;
    v19[1] = v29;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v33;
    v20[1] = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftLocale>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  long long v17;
  long long v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  uint64_t v43;
  char v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  uint64_t v49;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  char v44 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v43 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v41 = v2;
  char v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v43 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_34;
      }
      uint64_t v24 = *(void *)(v43 + 8 * v13);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v41;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v24 = *(void *)(v43 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v42) {
              goto LABEL_34;
            }
            uint64_t v24 = *(void *)(v43 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_21:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    int64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    unint64_t v28 = *v26;
    char v27 = v26[1];
    BOOL v29 = *(void *)(v5 + 56) + 72 * v21;
    if (v44)
    {
      uint64_t v45 = *(_OWORD *)v29;
      uint64_t v30 = *(_OWORD *)(v29 + 16);
      uint64_t v31 = *(_OWORD *)(v29 + 32);
      uint64_t v32 = *(_OWORD *)(v29 + 48);
      unint64_t v49 = *(void *)(v29 + 64);
      uint64_t v47 = v31;
      id v48 = v32;
      uint64_t v46 = v30;
    }
    else
    {
      outlined init with copy of AttributedString._AttributeValue(v29, (uint64_t)&v45);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v11 + 8 * v35);
      }
      while (v39 == -1);
      uint64_t v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v28;
    v15[1] = v27;
    unint64_t v16 = *(void *)(v7 + 56) + 72 * v14;
    *(_OWORD *)unint64_t v16 = v45;
    unint64_t v17 = v46;
    uint64_t v18 = v47;
    uint64_t v19 = v48;
    *(void *)(v16 + 64) = v49;
    *(_OWORD *)(v16 + 32) = v18;
    *(_OWORD *)(v16 + 48) = v19;
    *(_OWORD *)(v16 + 16) = v17;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v41;
  int64_t v23 = (void *)(v5 + 64);
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  long long v37;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        uint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          uint64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v24 = v36[v14];
          if (!v24)
          {
            unint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              unint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v14 = v25;
          }
        }
LABEL_30:
        uint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v26 = 0;
        char v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          BOOL v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *uint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
  uint64_t v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      unint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      BOOL v29 = *v28;
      uint64_t v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = *(void *)(v5 + 48) + 24 * v20;
    uint64_t v31 = *(void *)v29;
    uint64_t v30 = *(void *)(v29 + 8);
    uint64_t v32 = *(unsigned __int8 *)(v29 + 16);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
    *(void *)uint64_t v18 = v31;
    *(void *)(v18 + 8) = v30;
    *(unsigned char *)(v18 + 16) = v32;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  void *v29;
  long long v30;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    BOOL v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              unint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v29 = -1 << v28;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  long long v39;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      uint64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v7 + 48) + v19);
    *uint64_t v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(void *)(v7 + 56) + v19) = v39;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v36;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ICU.CaseMap>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
  uint64_t v45 = a2;
  id v48 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v43 = (void *)(v5 + 64);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v5 + 64);
  uint64_t v41 = v2;
  char v42 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = v48 + 64;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  char v44 = v5;
  while (1)
  {
    if (v8)
    {
      uint64_t v46 = (v8 - 1) & v8;
      uint64_t v47 = v11;
      uint64_t v20 = __clz(__rbit64(v8)) | (v11 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42) {
      break;
    }
    unint64_t v22 = v43;
    int64_t v23 = v43[v21];
    uint64_t v24 = v11 + 1;
    if (!v23)
    {
      uint64_t v24 = v11 + 2;
      if (v11 + 2 >= v42) {
        goto LABEL_33;
      }
      int64_t v23 = v43[v24];
      if (!v23)
      {
        unint64_t v25 = v11 + 3;
        if (v11 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            uint64_t v24 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v24 >= v42) {
              goto LABEL_33;
            }
            int64_t v23 = v43[v24];
            ++v25;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v24 = v11 + 3;
      }
    }
LABEL_30:
    uint64_t v46 = (v23 - 1) & v23;
    uint64_t v47 = v24;
    uint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 48 * v20;
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    uint64_t v36 = *(void *)(v33 + 16);
    uint64_t v37 = *(void *)(v33 + 24);
    uint64_t v38 = *(void *)(v33 + 32);
    uint64_t v39 = *(unsigned char *)(v33 + 40);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v34, v35, v36, v37, v38, v39);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v12 = -1 << *(unsigned char *)(v48 + 32);
    int64_t v13 = result & ~v12;
    uint64_t v14 = v13 >> 6;
    if (((-1 << v13) & ~*(void *)(v9 + 8 * (v13 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v9 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v16 = v38;
      unint64_t v17 = v34;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v12) >> 6;
      unint64_t v16 = v38;
      unint64_t v17 = v34;
      do
      {
        if (++v14 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v14 == v27;
        if (v14 == v27) {
          uint64_t v14 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v9 + 8 * v14);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v14 << 6);
    }
    *(void *)(v9 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v18 = (void *)(*(void *)(v48 + 48) + 16 * v15);
    *uint64_t v18 = v31;
    v18[1] = v32;
    uint64_t v19 = *(void *)(v48 + 56) + 48 * v15;
    *(void *)uint64_t v19 = v17;
    *(void *)(v19 + 8) = v35;
    *(void *)(v19 + 16) = v36;
    *(void *)(v19 + 24) = v37;
    *(void *)(v19 + 32) = v16;
    *(unsigned char *)(v19 + 40) = v39;
    ++*(void *)(v48 + 16);
    uint64_t v5 = v44;
    uint64_t v8 = v46;
    uint64_t v11 = v47;
  }
  swift_release();
  unint64_t v3 = v41;
  unint64_t v22 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v48;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = *(void *)(v5 + 56) + v31;
    uint64_t v36 = *(void *)v35;
    uint64_t v37 = *(unsigned char *)(v35 + 8);
    if ((v42 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = *(void *)(v7 + 56) + v18;
    *(void *)uint64_t v20 = v36;
    *(unsigned char *)(v20 + 8) = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, UnsafeMutablePointer<UnsafeMutableRawPointer?>>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    uint64_t v32 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        uint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        uint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          uint64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v19 = v9[v8];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              unint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      unint64_t v21 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v17);
      unint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      uint64_t result = MEMORY[0x185303FF0](*(void *)(v7 + 40), v21, 4);
      int64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          BOOL v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  long long v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  uint64_t v43;
  Swift::UInt64 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  Swift::UInt8 v55;
  uint64_t v56;
  long long v57;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter?>);
  uint64_t v51 = a2;
  long long v56 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v49 = (void *)(v5 + 64);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v5 + 64);
    uint64_t v47 = v2;
    id v48 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = v56 + 64;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    int64_t v50 = v5;
    while (1)
    {
      if (v8)
      {
        uint64_t v52 = (v8 - 1) & v8;
        unint64_t v53 = v11;
        int64_t v26 = __clz(__rbit64(v8)) | (v11 << 6);
      }
      else
      {
        char v27 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v27 >= v48) {
          goto LABEL_36;
        }
        unint64_t v28 = v49[v27];
        BOOL v29 = v11 + 1;
        if (!v28)
        {
          BOOL v29 = v11 + 2;
          if (v11 + 2 >= v48) {
            goto LABEL_36;
          }
          unint64_t v28 = v49[v29];
          if (!v28)
          {
            uint64_t v30 = v11 + 3;
            if (v11 + 3 >= v48)
            {
LABEL_36:
              swift_release();
              unint64_t v3 = v47;
              if (v51)
              {
                uint64_t v46 = 1 << *(unsigned char *)(v5 + 32);
                if (v46 >= 64) {
                  bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v49 = -1 << v46;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v28 = v49[v30];
            if (!v28)
            {
              while (1)
              {
                BOOL v29 = v30 + 1;
                if (__OFADD__(v30, 1)) {
                  goto LABEL_43;
                }
                if (v29 >= v48) {
                  goto LABEL_36;
                }
                unint64_t v28 = v49[v29];
                ++v30;
                if (v28) {
                  goto LABEL_33;
                }
              }
            }
            BOOL v29 = v11 + 3;
          }
        }
LABEL_33:
        uint64_t v52 = (v28 - 1) & v28;
        unint64_t v53 = v29;
        int64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      uint64_t v35 = *(void *)(v5 + 56);
      uint64_t v36 = *(void *)(v5 + 48) + 96 * v26;
      uint64_t v38 = *(void *)v36;
      uint64_t v37 = *(void *)(v36 + 8);
      uint64_t v39 = *(void *)(v36 + 16);
      int64_t v40 = *(void *)(v36 + 24);
      uint64_t v41 = *(unsigned __int8 *)(v36 + 32);
      uint64_t v57 = *(_OWORD *)(v36 + 40);
      char v42 = *(unsigned __int8 *)(v36 + 56);
      unint64_t v43 = *(void *)(v36 + 72);
      unint64_t v54 = *(void *)(v36 + 64);
      uint64_t v55 = *(unsigned char *)(v36 + 80);
      char v44 = *(void *)(v36 + 88);
      uint64_t v45 = *(void *)(v35 + 8 * v26);
      if ((v51 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v41);
      Hasher._combine(_:)(v57);
      Hasher._combine(_:)(*((Swift::UInt *)&v57 + 1));
      Hasher._combine(_:)(v42);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v55);
      if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        unint64_t v12 = v44;
      }
      else {
        unint64_t v12 = 0;
      }
      Hasher._combine(_:)(v12);
      int64_t v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v56 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      unint64_t v17 = v43;
      uint64_t v18 = v44;
      if (((-1 << v15) & ~*(void *)(v9 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1 << v15) & ~*(void *)(v9 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v21 = v42;
        uint64_t v20 = v45;
        unint64_t v22 = v57;
        uint64_t result = v39;
        int64_t v23 = v41;
        uint64_t v24 = v38;
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = (unint64_t)(63 - v14) >> 6;
        unint64_t v21 = v42;
        uint64_t v20 = v45;
        unint64_t v22 = v57;
        uint64_t result = v39;
        int64_t v23 = v41;
        uint64_t v24 = v38;
        do
        {
          if (++v16 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v33 = v16 == v32;
          if (v16 == v32) {
            unint64_t v16 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v9 + 8 * v16);
        }
        while (v34 == -1);
        uint64_t v19 = __clz(__rbit64(~v34)) + (v16 << 6);
      }
      *(void *)(v9 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      unint64_t v25 = *(void *)(v56 + 48) + 96 * v19;
      *(void *)unint64_t v25 = v24;
      *(void *)(v25 + 8) = v37;
      *(void *)(v25 + 16) = result;
      *(void *)(v25 + 24) = v40;
      *(unsigned char *)(v25 + 32) = v23;
      *(_OWORD *)(v25 + 40) = v22;
      *(unsigned char *)(v25 + 56) = v21;
      *(void *)(v25 + 64) = v54;
      *(void *)(v25 + 72) = v17;
      *(unsigned char *)(v25 + 80) = v55;
      *(void *)(v25 + 88) = v18;
      *(void *)(*(void *)(v56 + 56) + 8 * v19) = v20;
      ++*(void *)(v56 + 16);
      uint64_t v5 = v50;
      uint64_t v8 = v52;
      uint64_t v11 = v53;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v56;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  long long v37;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        uint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          uint64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v24 = v36[v14];
          if (!v24)
          {
            unint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              unint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v14 = v25;
          }
        }
LABEL_30:
        uint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v26 = 0;
        char v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          BOOL v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *uint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  long long v31;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        unint64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          uint64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v30;
                goto LABEL_40;
              }
              BOOL v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v29;
              }
              unint64_t v3 = v30;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      unint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      uint64_t v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          int64_t v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          char v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        uint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = v3;
    uint64_t v35 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        unint64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          uint64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                *uint64_t v9 = v32;
              }
              unint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      unint64_t v28 = 8 * v20;
      BOOL v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        uint64_t v31 = v30;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          int64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          char v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt, PredicateExpressions.VariableID>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v35 = a2;
    uint64_t v34 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        uint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          uint64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v9[v8];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              unint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      unint64_t v22 = 8 * v18;
      int64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      int64_t v26 = result & ~v25;
      char v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        BOOL v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            char v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint8x8_t v3;
  uint8x8_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  void *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int64_t v65;
  int16x8_t v66;
  int16x8_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80[72];
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  unsigned __int32 v86;
  uint64_t v87;
  char v88;
  char v89;
  unsigned __int32 v90;
  char v91;
  char v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;

  uint64_t v5 = v2;
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.PatternCacheKey, String>);
  id v63 = a2;
  uint64_t v74 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v7 + 16))
  {
    uint64_t v59 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v61 = (void *)(v7 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v7 + 64);
    uint64_t v60 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v74 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v62 = v7;
    while (1)
    {
      if (v10)
      {
        int64_t v64 = (v10 - 1) & v10;
        unint64_t v65 = v13;
        unint64_t v22 = __clz(__rbit64(v10)) | (v13 << 6);
      }
      else
      {
        int64_t v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v60) {
          goto LABEL_33;
        }
        uint64_t v24 = v61[v23];
        unint64_t v25 = v13 + 1;
        if (!v24)
        {
          unint64_t v25 = v13 + 2;
          if (v13 + 2 >= v60) {
            goto LABEL_33;
          }
          uint64_t v24 = v61[v25];
          if (!v24)
          {
            int64_t v26 = v13 + 3;
            if (v13 + 3 >= v60)
            {
LABEL_33:
              swift_release();
              uint64_t v5 = v59;
              if (v63)
              {
                uint64_t v58 = 1 << *(unsigned char *)(v7 + 32);
                if (v58 >= 64) {
                  bzero(v61, ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v61 = -1 << v58;
                }
                *(void *)(v7 + 16) = 0;
              }
              break;
            }
            uint64_t v24 = v61[v26];
            if (!v24)
            {
              while (1)
              {
                unint64_t v25 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_40;
                }
                if (v25 >= v60) {
                  goto LABEL_33;
                }
                uint64_t v24 = v61[v25];
                ++v26;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            unint64_t v25 = v13 + 3;
          }
        }
LABEL_30:
        int64_t v64 = (v24 - 1) & v24;
        unint64_t v65 = v25;
        unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }
      uint64_t v31 = *(void *)(v7 + 56);
      uint64_t v32 = *(void *)(v7 + 48) + 96 * v22;
      uint64_t v34 = *(void *)v32;
      uint64_t v33 = *(void *)(v32 + 8);
      uint64_t v35 = *(unsigned char *)(v32 + 16);
      uint64_t v36 = *(unsigned char *)(v32 + 24);
      uint64_t v37 = *(void *)(v32 + 32);
      v4.i32[0] = *(_DWORD *)(v32 + 40);
      uint64_t v38 = *(void *)(v32 + 48);
      uint64_t v39 = *(unsigned char *)(v32 + 56);
      int64_t v40 = *(unsigned char *)(v32 + 57);
      v3.i32[0] = *(_DWORD *)(v32 + 58);
      uint64_t v41 = *(unsigned char *)(v32 + 62);
      char v42 = *(unsigned char *)(v32 + 63);
      unint64_t v43 = *(void *)(v32 + 64);
      char v44 = *(unsigned char *)(v32 + 72);
      uint64_t v45 = *(unsigned char *)(v32 + 73);
      uint64_t v46 = *(void *)(v32 + 80);
      uint64_t v47 = *(void *)(v32 + 88);
      id v48 = (uint64_t *)(v31 + 16 * v22);
      unint64_t v49 = v48[1];
      uint64_t v72 = *v48;
      uint64_t v78 = v37;
      uint64_t v79 = v33;
      uint64_t v76 = v35;
      uint64_t v77 = v36;
      int64_t v75 = *(void *)v32;
      if ((v63 & 1) == 0)
      {
        int64_t v50 = *(void *)(v32 + 80);
        int64_t v73 = *(unsigned char *)(v32 + 62);
        uint64_t v71 = *(unsigned char *)(v32 + 63);
        uint64_t v51 = *(void *)(v32 + 64);
        uint64_t v52 = *(unsigned char *)(v32 + 72);
        unint64_t v53 = *(unsigned char *)(v32 + 73);
        unint64_t v54 = *(unsigned char *)(v32 + 56);
        uint64_t v55 = *(void *)(v32 + 88);
        long long v56 = *(unsigned char *)(v32 + 57);
        uint64_t v57 = *(void *)(v32 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v38 = v57;
        int64_t v40 = v56;
        uint64_t v47 = v55;
        uint64_t v39 = v54;
        uint64_t v45 = v53;
        char v44 = v52;
        unint64_t v43 = v51;
        char v42 = v71;
        uint64_t v41 = v73;
        uint64_t v46 = v50;
        uint64_t v34 = v75;
        uint64_t v37 = v78;
        uint64_t v33 = v79;
        uint64_t v35 = v76;
        uint64_t v36 = v77;
      }
      uint64_t v81 = v34;
      uint64_t v82 = v33;
      uint64_t v83 = v35;
      uint64_t v84 = v36;
      int64_t v85 = v37;
      int64_t v66 = (int16x8_t)vmovl_u8(v4);
      uint64_t v67 = (int16x8_t)vmovl_u8(v3);
      uint64_t v86 = vmovn_s16(v66).u32[0];
      uint64_t v14 = v38;
      uint64_t v87 = v38;
      unint64_t v88 = v39;
      uint64_t v68 = v40;
      char v69 = v45;
      uint64_t v89 = v40;
      BOOL v90 = vmovn_s16(v67).u32[0];
      uint64_t v91 = v41;
      uint64_t v92 = v42;
      int64_t v93 = v43;
      Swift::Int v94 = v44;
      Swift::Int v95 = v45;
      long long v70 = v46;
      Swift::Int v96 = v46;
      uint64_t v97 = v47;
      Hasher.init(_seed:)();
      ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v80);
      uint64_t result = Hasher._finalize()();
      unint64_t v15 = -1 << *(unsigned char *)(v74 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v19 = v49;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v15) >> 6;
        uint64_t v19 = v49;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v17 == v28;
          if (v17 == v28) {
            unint64_t v17 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v17);
        }
        while (v30 == -1);
        uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }
      *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v20 = *(void *)(v74 + 48) + 96 * v18;
      *(void *)uint64_t v20 = v75;
      *(void *)(v20 + 8) = v79;
      *(unsigned char *)(v20 + 16) = v76;
      *(unsigned char *)(v20 + 24) = v77;
      *(void *)(v20 + 32) = v78;
      *(_DWORD *)(v20 + 40) = vmovn_s16(v66).u32[0];
      *(void *)(v20 + 48) = v14;
      *(unsigned char *)(v20 + 56) = v39;
      *(unsigned char *)(v20 + 57) = v68;
      *(_DWORD *)(v20 + 58) = vmovn_s16(v67).u32[0];
      *(unsigned char *)(v20 + 62) = v41;
      *(unsigned char *)(v20 + 63) = v42;
      *(void *)(v20 + 64) = v43;
      *(unsigned char *)(v20 + 72) = v44;
      *(unsigned char *)(v20 + 73) = v69;
      *(void *)(v20 + 80) = v70;
      *(void *)(v20 + 88) = v47;
      unint64_t v21 = (void *)(*(void *)(v74 + 56) + 16 * v18);
      *unint64_t v21 = v72;
      v21[1] = v19;
      ++*(void *)(v74 + 16);
      uint64_t v7 = v62;
      unint64_t v10 = v64;
      int64_t v13 = v65;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v5 = v74;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t i;
  char v45;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v45 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v41 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v43 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    char v42 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    swift_retain();
    unint64_t v12 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v18 = v17 | (v12 << 6);
      }
      else
      {
        uint64_t v19 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        if (v19 >= v42) {
          goto LABEL_34;
        }
        uint64_t v20 = v43[v19];
        ++v12;
        if (!v20)
        {
          unint64_t v12 = v19 + 1;
          if (v19 + 1 >= v42) {
            goto LABEL_34;
          }
          uint64_t v20 = v43[v12];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v42)
            {
LABEL_34:
              swift_release();
              unint64_t v3 = v41;
              if (v45)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
                if (v39 >= 64) {
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v43 = -1 << v39;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v20 = v43[v21];
            if (!v20)
            {
              while (1)
              {
                unint64_t v12 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v12 >= v42) {
                  goto LABEL_34;
                }
                uint64_t v20 = v43[v12];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v12 = v21;
          }
        }
LABEL_21:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
      }
      unint64_t v22 = 24 * v18;
      int64_t v23 = *(void *)(v5 + 48) + v22;
      uint64_t v24 = *(void *)v23;
      unint64_t v25 = *(void *)(v23 + 8);
      int64_t v26 = *(unsigned __int8 *)(v23 + 16);
      char v27 = *(void *)(v5 + 56) + v22;
      BOOL v29 = *(void *)v27;
      unint64_t v28 = *(void *)(v27 + 8);
      uint64_t v30 = *(unsigned char *)(v27 + 16);
      if ((v45 & 1) == 0)
      {
        outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
        outlined copy of _XMLPlistEncodingFormat.Reference(v29, v28, v30);
      }
      Hasher.init(_seed:)();
      if (v26) {
        goto LABEL_42;
      }
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v25, 0);
      uint64_t v31 = Hasher._finalize()();
      uint64_t v32 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v33 = v31 & ~v32;
      uint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v11 + 8 * (v33 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v33) & ~*(void *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v37 = v34 == v36;
          if (v34 == v36) {
            uint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v11 + 8 * v34);
        }
        while (v38 == -1);
        int64_t v13 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = 24 * v13;
      unint64_t v15 = *(void *)(v7 + 48) + v14;
      *(void *)unint64_t v15 = v24;
      *(void *)(v15 + 8) = v25;
      *(unsigned char *)(v15 + 16) = 0;
      unint64_t v16 = *(void *)(v7 + 56) + v14;
      *(void *)unint64_t v16 = v29;
      *(void *)(v16 + 8) = v28;
      *(unsigned char *)(v16 + 16) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  long long v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  long long v38;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v36 + 8 * v13);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v36 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(v5 + 48) + 32 * v21;
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = *(void *)(v30 + 8);
    uint64_t v38 = *(_OWORD *)(v30 + 16);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v38);
    Hasher._combine(_:)(*((Swift::UInt *)&v38 + 1));
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v18 = v38;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v14) >> 6;
      uint64_t v18 = v38;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v19 = *(void *)(v7 + 48) + 32 * v17;
    *(void *)uint64_t v19 = v32;
    *(void *)(v19 + 8) = v31;
    *(_OWORD *)(v19 + 16) = v18;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        uint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        uint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          uint64_t v19 = v34[v13];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              unint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                uint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      int64_t v23 = *v21;
      unint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      int64_t v26 = result & ~v25;
      char v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        BOOL v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            char v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  long long v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  void *v71;
  int64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  long long v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[72];
  uint64_t __dst[45];

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Components, _LocaleProtocol>);
  uint64_t v74 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v75 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    long long v70 = v2;
    uint64_t v71 = (void *)(v5 + 64);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v5 + 64);
    uint64_t v72 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v10 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    int64_t v73 = v5;
    while (1)
    {
      if (v9)
      {
        uint64_t v24 = __clz(__rbit64(v9));
        unint64_t v25 = (v9 - 1) & v9;
        int64_t v26 = v24 | (v12 << 6);
      }
      else
      {
        char v27 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v27 >= v72) {
          goto LABEL_34;
        }
        unint64_t v28 = v71[v27];
        ++v12;
        if (!v28)
        {
          unint64_t v12 = v27 + 1;
          if (v27 + 1 >= v72) {
            goto LABEL_34;
          }
          unint64_t v28 = v71[v12];
          if (!v28)
          {
            BOOL v29 = v27 + 2;
            if (v29 >= v72)
            {
LABEL_34:
              swift_release();
              unint64_t v3 = v70;
              if (v74)
              {
                char v69 = 1 << *(unsigned char *)(v5 + 32);
                if (v69 >= 64) {
                  bzero(v71, ((unint64_t)(v69 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v71 = -1 << v69;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v28 = v71[v29];
            if (!v28)
            {
              while (1)
              {
                unint64_t v12 = v29 + 1;
                if (__OFADD__(v29, 1)) {
                  goto LABEL_41;
                }
                if (v12 >= v72) {
                  goto LABEL_34;
                }
                unint64_t v28 = v71[v12];
                ++v29;
                if (v28) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v12 = v29;
          }
        }
LABEL_21:
        unint64_t v25 = (v28 - 1) & v28;
        int64_t v26 = __clz(__rbit64(v28)) + (v12 << 6);
      }
      uint64_t v77 = v25;
      uint64_t v78 = v12;
      if (v74)
      {
        uint64_t v30 = *(void *)(v5 + 56);
        uint64_t v31 = *(void *)(v5 + 48) + 352 * v26;
        uint64_t v32 = *(void *)v31;
        uint64_t v79 = *(void *)(v31 + 8);
        uint64_t v130 = *(void *)(v31 + 24);
        double v131 = *(void *)(v31 + 16);
        uint64_t v128 = *(void *)(v31 + 40);
        uint64_t v129 = *(void *)(v31 + 32);
        uint64_t v126 = *(void *)(v31 + 56);
        int v127 = *(void *)(v31 + 48);
        double v124 = *(void *)(v31 + 72);
        double v125 = *(void *)(v31 + 64);
        long long v122 = *(void *)(v31 + 88);
        long long v123 = *(void *)(v31 + 80);
        uint64_t v33 = *(unsigned char *)(v31 + 96);
        uint64_t v34 = *(void *)(v31 + 104);
        uint64_t v35 = *(void *)(v31 + 112);
        uint64_t v80 = *(void *)(v31 + 128);
        uint64_t v36 = *(void *)(v31 + 136);
        uint64_t v37 = *(void *)(v31 + 144);
        uint64_t v38 = *(void *)(v31 + 152);
        uint64_t v81 = *(void *)(v31 + 160);
        int64_t v40 = *(void *)(v31 + 168);
        uint64_t v39 = *(void *)(v31 + 176);
        uint64_t v41 = *(void *)(v31 + 184);
        char v42 = *(void *)(v31 + 192);
        unint64_t v43 = *(unsigned char *)(v31 + 200);
        char v44 = *(unsigned char *)(v31 + 201);
        uint64_t v45 = *(_OWORD *)(v30 + 16 * v26);
        uint64_t v46 = *(void *)(v31 + 120);
        uint64_t v84 = v45;
        uint64_t v47 = *(void *)(v31 + 208);
        id v48 = *(void *)(v31 + 216);
        unint64_t v49 = *(void *)(v31 + 224);
        int64_t v50 = *(void *)(v31 + 232);
        uint64_t v51 = *(void *)(v31 + 240);
        uint64_t v52 = *(void *)(v31 + 248);
        unint64_t v53 = *(void *)(v31 + 256);
        unint64_t v54 = *(void *)(v31 + 264);
        uint64_t v55 = *(void *)(v31 + 280);
        uint64_t v86 = *(void *)(v31 + 272);
        long long v56 = *(void *)(v31 + 288);
        uint64_t v57 = *(void *)(v31 + 296);
        uint64_t v82 = *(void *)(v31 + 304);
        uint64_t v92 = *(void *)(v31 + 312);
        uint64_t v83 = *(void *)(v31 + 320);
        uint64_t v89 = *(void *)(v31 + 328);
        uint64_t v59 = *(void *)(v31 + 336);
        uint64_t v58 = *(void *)(v31 + 344);
        int64_t v85 = v59;
      }
      else
      {
        memcpy(__dst, (const void *)(*(void *)(v5 + 48) + 352 * v26), 0x160uLL);
        uint64_t v84 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v26);
        uint64_t v89 = __dst[41];
        BOOL v90 = __dst[43];
        uint64_t v82 = __dst[38];
        uint64_t v83 = __dst[40];
        uint64_t v92 = __dst[39];
        int64_t v85 = __dst[42];
        uint64_t v86 = __dst[34];
        uint64_t v87 = __dst[35];
        uint64_t v118 = __dst[37];
        unint64_t v120 = __dst[36];
        Swift::Int v114 = __dst[31];
        uint64_t v116 = __dst[30];
        char v110 = __dst[33];
        uint64_t v112 = __dst[32];
        id v106 = __dst[27];
        uint64_t v108 = __dst[26];
        Swift::Int v102 = __dst[29];
        BOOL v104 = __dst[28];
        uint64_t v98 = __dst[25];
        uint64_t v100 = BYTE1(__dst[25]);
        Swift::Int v95 = __dst[22];
        uint64_t v97 = __dst[21];
        int64_t v93 = __dst[23];
        uint64_t v60 = __dst[24];
        uint64_t v36 = __dst[17];
        uint64_t v37 = __dst[18];
        uint64_t v34 = __dst[13];
        uint64_t v35 = __dst[14];
        uint64_t v46 = __dst[15];
        uint64_t v80 = __dst[16];
        uint64_t v81 = __dst[20];
        uint64_t v33 = __dst[12];
        uint64_t v32 = __dst[0];
        uint64_t v79 = __dst[1];
        uint64_t v130 = __dst[3];
        double v131 = __dst[2];
        uint64_t v128 = __dst[5];
        uint64_t v129 = __dst[4];
        uint64_t v126 = __dst[7];
        int v127 = __dst[6];
        double v124 = __dst[9];
        double v125 = __dst[8];
        long long v122 = __dst[11];
        long long v123 = __dst[10];
        outlined retain of Locale.Components(__dst);
        swift_unknownObjectRetain();
        uint64_t v38 = __dst[19];
        uint64_t v57 = v118;
        long long v56 = v120;
        uint64_t v55 = v87;
        uint64_t v58 = v90;
        id v48 = v106;
        uint64_t v47 = v108;
        unint64_t v43 = v98;
        char v44 = v100;
        uint64_t v41 = v93;
        uint64_t v39 = v95;
        int64_t v50 = v102;
        unint64_t v49 = v104;
        char v42 = v60;
        int64_t v40 = v97;
        unint64_t v54 = v110;
        unint64_t v53 = v112;
        uint64_t v52 = v114;
        uint64_t v51 = v116;
      }
      __dst[0] = v32;
      __dst[1] = v79;
      __dst[2] = v131;
      __dst[3] = v130;
      __dst[4] = v129;
      __dst[5] = v128;
      __dst[6] = v127;
      __dst[7] = v126;
      __dst[8] = v125;
      __dst[9] = v124;
      __dst[10] = v123;
      __dst[11] = v122;
      LOBYTE(__dst[12]) = v33;
      __dst[13] = v34;
      unsigned char __dst[14] = v35;
      __dst[15] = v46;
      __dst[16] = v80;
      uint64_t v76 = v42;
      __dst[17] = v36;
      _OWORD __dst[18] = v37;
      __dst[19] = v38;
      __dst[20] = v81;
      Swift::Int v96 = v39;
      __dst[21] = v40;
      __dst[22] = v39;
      Swift::Int v94 = v41;
      __dst[23] = v41;
      __dst[24] = v42;
      uint64_t v99 = v43;
      int64_t v101 = v44;
      LOBYTE(__dst[25]) = v43;
      BYTE1(__dst[25]) = v44;
      uint64_t v107 = v48;
      Swift::Int v109 = v47;
      __dst[26] = v47;
      __dst[27] = v48;
      uint64_t v103 = v50;
      uint64_t v105 = v49;
      __dst[28] = v49;
      __dst[29] = v50;
      uint64_t v115 = v52;
      uint64_t v117 = v51;
      __dst[30] = v51;
      __dst[31] = v52;
      BOOL v111 = v54;
      uint64_t v113 = v53;
      __dst[32] = v53;
      __dst[33] = v54;
      __dst[34] = v86;
      unint64_t v88 = v55;
      __dst[35] = v55;
      Swift::Int v119 = v57;
      int64_t v121 = v56;
      __dst[36] = v56;
      __dst[37] = v57;
      __dst[38] = v82;
      __dst[39] = v92;
      __dst[40] = v83;
      __dst[41] = v89;
      __dst[42] = v85;
      uint64_t v91 = v58;
      __dst[43] = v58;
      Hasher.init(_seed:)();
      Locale.Components.hash(into:)((uint64_t)v132);
      uint64_t v61 = Hasher._finalize()();
      uint64_t v62 = -1 << *(unsigned char *)(v75 + 32);
      id v63 = v61 & ~v62;
      int64_t v64 = v63 >> 6;
      if (((-1 << v63) & ~*(void *)(v10 + 8 * (v63 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v63) & ~*(void *)(v10 + 8 * (v63 >> 6)))) | v63 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v15 = v130;
        uint64_t v14 = v131;
        uint64_t result = v128;
        unint64_t v16 = v129;
        uint64_t v18 = v126;
        unint64_t v17 = v127;
        uint64_t v20 = v124;
        uint64_t v19 = v125;
        unint64_t v22 = v122;
        unint64_t v21 = v123;
      }
      else
      {
        unint64_t v65 = 0;
        int64_t v66 = (unint64_t)(63 - v62) >> 6;
        unint64_t v15 = v130;
        uint64_t v14 = v131;
        uint64_t result = v128;
        unint64_t v16 = v129;
        uint64_t v18 = v126;
        unint64_t v17 = v127;
        uint64_t v20 = v124;
        uint64_t v19 = v125;
        unint64_t v22 = v122;
        unint64_t v21 = v123;
        do
        {
          if (++v64 == v66 && (v65 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v67 = v64 == v66;
          if (v64 == v66) {
            int64_t v64 = 0;
          }
          v65 |= v67;
          uint64_t v68 = *(void *)(v10 + 8 * v64);
        }
        while (v68 == -1);
        int64_t v13 = __clz(__rbit64(~v68)) + (v64 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      int64_t v23 = *(void *)(v75 + 48) + 352 * v13;
      *(void *)int64_t v23 = v32;
      *(void *)(v23 + 8) = v79;
      *(void *)(v23 + 16) = v14;
      *(void *)(v23 + 24) = v15;
      *(void *)(v23 + 32) = v16;
      *(void *)(v23 + 40) = result;
      *(void *)(v23 + 48) = v17;
      *(void *)(v23 + 56) = v18;
      *(void *)(v23 + 64) = v19;
      *(void *)(v23 + 72) = v20;
      *(void *)(v23 + 80) = v21;
      *(void *)(v23 + 88) = v22;
      *(unsigned char *)(v23 + 96) = v33;
      *(void *)(v23 + 104) = v34;
      *(void *)(v23 + 112) = v35;
      *(void *)(v23 + 120) = v46;
      *(void *)(v23 + 128) = v80;
      *(void *)(v23 + 136) = v36;
      *(void *)(v23 + 144) = v37;
      *(void *)(v23 + 152) = v38;
      *(void *)(v23 + 160) = v81;
      *(void *)(v23 + 168) = v40;
      *(void *)(v23 + 176) = v96;
      *(void *)(v23 + 184) = v94;
      *(void *)(v23 + 192) = v76;
      *(unsigned char *)(v23 + 200) = v99;
      *(unsigned char *)(v23 + 201) = v101;
      *(void *)(v23 + 208) = v109;
      *(void *)(v23 + 216) = v107;
      *(void *)(v23 + 224) = v105;
      *(void *)(v23 + 232) = v103;
      *(void *)(v23 + 240) = v117;
      *(void *)(v23 + 248) = v115;
      *(void *)(v23 + 256) = v113;
      *(void *)(v23 + 264) = v111;
      *(void *)(v23 + 272) = v86;
      *(void *)(v23 + 280) = v88;
      *(void *)(v23 + 288) = v121;
      *(void *)(v23 + 296) = v119;
      *(void *)(v23 + 304) = v82;
      *(void *)(v23 + 312) = v92;
      *(void *)(v23 + 320) = v83;
      *(void *)(v23 + 328) = v89;
      *(void *)(v23 + 336) = v85;
      *(void *)(v23 + 344) = v91;
      *(_OWORD *)(*(void *)(v75 + 56) + 16 * v13) = v84;
      ++*(void *)(v75 + 16);
      uint64_t v5 = v73;
      uint64_t v9 = v77;
      unint64_t v12 = v78;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v75;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
  uint64_t v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        uint64_t result = v5 + 64;
        if (v8 >= v12)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            unint64_t v3 = v2;
            goto LABEL_38;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero(v33, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v33 = -1 << v32;
          }
          unint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v22 = v33[v8];
        if (!v22)
        {
          int64_t v23 = v8 + 1;
          if (v8 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v22 = v33[v23];
          if (!v22)
          {
            while (1)
            {
              uint64_t v8 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                break;
              }
              if (v8 >= v12) {
                goto LABEL_31;
              }
              unint64_t v22 = v33[v8];
              ++v23;
              if (v22) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        uint64_t v11 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      unint64_t v25 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
      int64_t v26 = *v25;
      char v27 = v25[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        BOOL v29 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v16 == v29;
          if (v16 == v29) {
            unint64_t v16 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v16);
        }
        while (v31 == -1);
        unint64_t v17 = __clz(__rbit64(~v31)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v24;
      uint64_t v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
      *uint64_t v18 = v26;
      v18[1] = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
  uint64_t v32 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      unint64_t v10 = ~(-1 << v8);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    int64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        uint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_38;
        }
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          unint64_t v3 = v2;
          if (v32)
          {
            uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
            if (v31 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *uint64_t v9 = -1 << v31;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        int64_t v23 = v9[v15];
        if (!v23)
        {
          uint64_t v24 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_31;
          }
          int64_t v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              unint64_t v15 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_31;
              }
              int64_t v23 = v9[v15];
              ++v24;
              if (v23) {
                goto LABEL_20;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        uint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      unint64_t v25 = *(unsigned char *)(*(void *)(v5 + 48) + v21);
      int64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
      if ((v32 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      unint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v29 = v18 == v28;
          if (v18 == v28) {
            uint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(unsigned char *)(*(void *)(v7 + 48) + v19) = v25;
      *(void *)(*(void *)(v7 + 56) + 8 * v19) = v26;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = a2;
    uint64_t v33 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            unint64_t v3 = v33;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          unint64_t v3 = v33;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v20 = v9[v8];
        if (!v20)
        {
          unint64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          uint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              uint64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              uint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      unint64_t v22 = 8 * v18;
      int64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      int64_t v26 = result & ~v25;
      char v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        BOOL v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            char v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v14);
    if (!v24)
    {
      unint64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        unint64_t v3 = v35;
        if ((v37 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      uint64_t v24 = *(void *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          uint64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          uint64_t v24 = *(void *)(v36 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    int64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    unint64_t v28 = *v26;
    char v27 = v26[1];
    BOOL v29 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v32 = v17 == v31;
        if (v17 == v31) {
          unint64_t v17 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      uint64_t v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *uint64_t v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = a2;
    uint64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        uint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          uint64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          uint64_t v18 = v31[v8];
          if (!v18)
          {
            uint64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_38;
              }
              BOOL v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                uint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      unint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      unint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      int64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, String>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  void *v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v19);
      unint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      BOOL v29 = *v28;
      uint64_t v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = MEMORY[0x185303FF0](*(void *)(v7 + 40), v27, 4);
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.FormatStyle.DateStyle, String>);
  uint64_t v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      unint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      BOOL v29 = *v28;
      uint64_t v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  int64_t v33;
  char v34;

  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, XMLPlistMap.Value>);
  uint64_t v34 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v32 = (void *)(v4 + 64);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v4 + 64);
    uint64_t v33 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v10 = v5 + 64;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        uint64_t v18 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        uint64_t v19 = v18 | (v12 << 6);
      }
      else
      {
        uint64_t v20 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v20 >= v33) {
          goto LABEL_35;
        }
        unint64_t v21 = v32[v20];
        ++v12;
        if (!v21)
        {
          unint64_t v12 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_35;
          }
          unint64_t v21 = v32[v12];
          if (!v21)
          {
            unint64_t v12 = v20 + 2;
            if (v20 + 2 >= v33) {
              goto LABEL_35;
            }
            unint64_t v21 = v32[v12];
            if (!v21)
            {
              unint64_t v22 = v20 + 3;
              if (v22 >= v33)
              {
LABEL_35:
                swift_release();
                if (v34)
                {
                  uint64_t v31 = 1 << *(unsigned char *)(v4 + 32);
                  if (v31 >= 64) {
                    bzero(v32, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  }
                  else {
                    *uint64_t v32 = -1 << v31;
                  }
                  *(void *)(v4 + 16) = 0;
                }
                break;
              }
              unint64_t v21 = v32[v22];
              if (!v21)
              {
                while (1)
                {
                  unint64_t v12 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v33) {
                    goto LABEL_35;
                  }
                  unint64_t v21 = v32[v12];
                  ++v22;
                  if (v21) {
                    goto LABEL_32;
                  }
                }
              }
              unint64_t v12 = v22;
            }
          }
        }
LABEL_32:
        uint64_t v9 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
      }
      char v27 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v19);
      BOOL v29 = *v27;
      unint64_t v28 = v27[1];
      uint64_t v30 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
      if ((v34 & 1) == 0)
      {
        outlined copy of XMLPlistMap.Value(v30);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v10 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = (void *)(*(void *)(v6 + 48) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v28;
      *(void *)(*(void *)(v6 + 56) + 8 * v16) = v30;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  char v37;
  long long v38;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        unint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        int64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          int64_t v23 = v36[v13];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              unint64_t v3 = v2;
              if (v37)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                int64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v38 = *(_OWORD *)v32;
      uint64_t v33 = *(unsigned char *)(v32 + 16);
      if ((v37 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(_OWORD *)uint64_t v19 = v38;
      *(unsigned char *)(v19 + 16) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::UInt v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119[72];
  uint64_t __dst[50];

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  uint64_t v67 = a2;
  uint64_t v83 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v62 = v2;
    id v63 = (void *)(v5 + 64);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v5 + 64);
    int64_t v64 = (unint64_t)(v6 + 63) >> 6;
    int64_t v66 = v83 + 64;
    uint64_t result = swift_retain();
    unint64_t v10 = 0;
    unint64_t v65 = v5;
    while (1)
    {
      if (v8)
      {
        char v69 = (v8 - 1) & v8;
        long long v70 = v10;
        uint64_t v36 = __clz(__rbit64(v8)) | (v10 << 6);
        if (v67) {
          goto LABEL_10;
        }
      }
      else
      {
        id v48 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v48 >= v64) {
          goto LABEL_33;
        }
        unint64_t v49 = v63[v48];
        int64_t v50 = v10 + 1;
        if (!v49)
        {
          int64_t v50 = v10 + 2;
          if (v10 + 2 >= v64) {
            goto LABEL_33;
          }
          unint64_t v49 = v63[v50];
          if (!v49)
          {
            uint64_t v51 = v10 + 3;
            if (v10 + 3 >= v64)
            {
LABEL_33:
              swift_release();
              unint64_t v3 = v62;
              if (v67)
              {
                uint64_t v61 = 1 << *(unsigned char *)(v5 + 32);
                if (v61 >= 64) {
                  bzero(v63, ((unint64_t)(v61 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v63 = -1 << v61;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v49 = v63[v51];
            if (!v49)
            {
              while (1)
              {
                int64_t v50 = v51 + 1;
                if (__OFADD__(v51, 1)) {
                  goto LABEL_40;
                }
                if (v50 >= v64) {
                  goto LABEL_33;
                }
                unint64_t v49 = v63[v50];
                ++v51;
                if (v49) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v50 = v10 + 3;
          }
        }
LABEL_22:
        char v69 = (v49 - 1) & v49;
        long long v70 = v50;
        uint64_t v36 = __clz(__rbit64(v49)) + (v50 << 6);
        if (v67)
        {
LABEL_10:
          uint64_t v37 = *(void *)(v5 + 56);
          uint64_t v38 = *(void *)(v5 + 48) + 392 * v36;
          unint64_t v88 = *(void *)(v38 + 8);
          uint64_t v89 = *(void *)v38;
          uint64_t v86 = *(void *)(v38 + 24);
          uint64_t v87 = *(void *)(v38 + 16);
          uint64_t v39 = *(void *)(v38 + 48);
          uint64_t v84 = *(void *)(v38 + 40);
          int64_t v85 = *(void *)(v38 + 32);
          uint64_t v41 = *(void *)(v38 + 56);
          int64_t v40 = *(void *)(v38 + 64);
          char v42 = *(void *)(v38 + 72);
          unint64_t v43 = *(void *)(v38 + 80);
          char v44 = *(void *)(v38 + 88);
          BOOL v90 = *(unsigned char *)(v38 + 96);
          int64_t v93 = *(void *)(v38 + 112);
          Swift::Int v94 = *(void *)(v38 + 104);
          uint64_t v91 = *(void *)(v38 + 128);
          uint64_t v92 = *(void *)(v38 + 120);
          uint64_t v97 = *(void *)(v38 + 144);
          uint64_t v98 = *(void *)(v38 + 136);
          Swift::Int v95 = *(void *)(v38 + 160);
          Swift::Int v96 = *(void *)(v38 + 152);
          int64_t v101 = *(void *)(v38 + 176);
          Swift::Int v102 = *(void *)(v38 + 168);
          uint64_t v99 = *(void *)(v38 + 192);
          uint64_t v100 = *(void *)(v38 + 184);
          uint64_t v103 = *(unsigned char *)(v38 + 200);
          uint64_t v68 = *(void *)(v37 + 8 * v36);
          BOOL v104 = *(unsigned char *)(v38 + 201);
          uint64_t v107 = *(void *)(v38 + 216);
          uint64_t v108 = *(void *)(v38 + 208);
          uint64_t v105 = *(void *)(v38 + 232);
          id v106 = *(void *)(v38 + 224);
          BOOL v111 = *(void *)(v38 + 248);
          uint64_t v112 = *(void *)(v38 + 240);
          uint64_t v45 = *(void *)(v38 + 272);
          Swift::Int v109 = *(void *)(v38 + 264);
          char v110 = *(void *)(v38 + 256);
          Swift::Int v114 = *(void *)(v38 + 288);
          uint64_t v115 = *(void *)(v38 + 280);
          uint64_t v113 = *(void *)(v38 + 296);
          uint64_t v116 = *(void *)(v38 + 312);
          uint64_t v117 = *(void *)(v38 + 304);
          uint64_t v46 = *(void *)(v38 + 328);
          uint64_t v118 = *(void *)(v38 + 320);
          uint64_t v77 = *(void *)(v38 + 344);
          uint64_t v78 = *(void *)(v38 + 336);
          uint64_t v79 = *(unsigned __int8 *)(v38 + 352);
          uint64_t v47 = *(void *)(v38 + 368);
          uint64_t v80 = *(void *)(v38 + 360);
          uint64_t v81 = *(void *)(v38 + 376);
          uint64_t v82 = *(void *)(v38 + 384);
          goto LABEL_24;
        }
      }
      memcpy(__dst, (const void *)(*(void *)(v5 + 48) + 392 * v36), 0x188uLL);
      uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      uint64_t v81 = __dst[47];
      uint64_t v82 = __dst[48];
      uint64_t v47 = __dst[46];
      uint64_t v79 = LOBYTE(__dst[44]);
      uint64_t v80 = __dst[45];
      uint64_t v46 = __dst[41];
      uint64_t v77 = __dst[43];
      uint64_t v78 = __dst[42];
      uint64_t v117 = __dst[38];
      uint64_t v118 = __dst[40];
      uint64_t v45 = __dst[34];
      uint64_t v115 = __dst[35];
      uint64_t v116 = __dst[39];
      uint64_t v113 = __dst[37];
      Swift::Int v114 = __dst[36];
      BOOL v111 = __dst[31];
      uint64_t v112 = __dst[30];
      Swift::Int v109 = __dst[33];
      char v110 = __dst[32];
      uint64_t v107 = __dst[27];
      uint64_t v108 = __dst[26];
      uint64_t v105 = __dst[29];
      id v106 = __dst[28];
      BOOL v104 = BYTE1(__dst[25]);
      uint64_t v103 = __dst[25];
      int64_t v101 = __dst[22];
      Swift::Int v102 = __dst[21];
      uint64_t v99 = __dst[24];
      uint64_t v100 = __dst[23];
      uint64_t v97 = __dst[18];
      uint64_t v98 = __dst[17];
      Swift::Int v95 = __dst[20];
      Swift::Int v96 = __dst[19];
      int64_t v93 = __dst[14];
      Swift::Int v94 = __dst[13];
      uint64_t v91 = __dst[16];
      uint64_t v92 = __dst[15];
      BOOL v90 = __dst[12];
      unint64_t v88 = __dst[1];
      uint64_t v89 = __dst[0];
      uint64_t v86 = __dst[3];
      uint64_t v87 = __dst[2];
      uint64_t v84 = __dst[5];
      int64_t v85 = __dst[4];
      uint64_t v39 = __dst[6];
      uint64_t v41 = __dst[7];
      int64_t v40 = __dst[8];
      char v42 = __dst[9];
      unint64_t v43 = __dst[10];
      char v44 = __dst[11];
      outlined retain of ICUDateIntervalFormatter.Signature(__dst);
      uint64_t v68 = v52;
      swift_retain();
LABEL_24:
      Hasher.init(_seed:)();
      __dst[0] = v89;
      __dst[1] = v88;
      __dst[2] = v87;
      __dst[3] = v86;
      __dst[4] = v85;
      __dst[5] = v84;
      int64_t v75 = v41;
      uint64_t v76 = v39;
      __dst[6] = v39;
      __dst[7] = v41;
      int64_t v73 = v42;
      uint64_t v74 = v40;
      __dst[8] = v40;
      __dst[9] = v42;
      uint64_t v71 = v44;
      uint64_t v72 = v43;
      __dst[10] = v43;
      __dst[11] = v44;
      LOBYTE(__dst[12]) = v90;
      __dst[13] = v94;
      unsigned char __dst[14] = v93;
      __dst[15] = v92;
      __dst[16] = v91;
      __dst[17] = v98;
      _OWORD __dst[18] = v97;
      __dst[19] = v96;
      __dst[20] = v95;
      __dst[21] = v102;
      __dst[22] = v101;
      __dst[23] = v100;
      __dst[24] = v99;
      LOBYTE(__dst[25]) = v103;
      BYTE1(__dst[25]) = v104;
      __dst[26] = v108;
      __dst[27] = v107;
      __dst[28] = v106;
      __dst[29] = v105;
      __dst[30] = v112;
      __dst[31] = v111;
      __dst[32] = v110;
      __dst[33] = v109;
      __dst[34] = v45;
      __dst[35] = v115;
      __dst[36] = v114;
      __dst[37] = v113;
      __dst[38] = v117;
      __dst[39] = v116;
      __dst[40] = v118;
      __dst[41] = v46;
      __dst[42] = v78;
      __dst[43] = v77;
      Locale.Components.hash(into:)((uint64_t)v119);
      Hasher._combine(_:)(v79);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      unint64_t v53 = Hasher._finalize()();
      unint64_t v54 = -1 << *(unsigned char *)(v83 + 32);
      uint64_t v55 = v53 & ~v54;
      long long v56 = v55 >> 6;
      if (((-1 << v55) & ~*(void *)(v66 + 8 * (v55 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v55) & ~*(void *)(v66 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v12 = v81;
        int64_t v13 = v80;
        uint64_t v14 = v79;
        unint64_t v15 = v117;
        unint64_t v16 = v118;
        unint64_t v17 = v46;
        uint64_t v18 = v78;
        uint64_t result = v82;
        uint64_t v19 = v47;
        uint64_t v20 = v77;
        unint64_t v22 = v115;
        unint64_t v21 = v116;
        int64_t v23 = v45;
        unint64_t v25 = v113;
        uint64_t v24 = v114;
        char v27 = v111;
        int64_t v26 = v112;
        BOOL v29 = v109;
        unint64_t v28 = v110;
        uint64_t v31 = v107;
        uint64_t v30 = v108;
        uint64_t v33 = v105;
        uint64_t v32 = v106;
        uint64_t v34 = v104;
      }
      else
      {
        uint64_t v57 = 0;
        uint64_t v58 = (unint64_t)(63 - v54) >> 6;
        unint64_t v12 = v81;
        int64_t v13 = v80;
        uint64_t v14 = v79;
        unint64_t v15 = v117;
        unint64_t v16 = v118;
        unint64_t v17 = v46;
        uint64_t v18 = v78;
        uint64_t result = v82;
        uint64_t v19 = v47;
        uint64_t v20 = v77;
        unint64_t v22 = v115;
        unint64_t v21 = v116;
        int64_t v23 = v45;
        unint64_t v25 = v113;
        uint64_t v24 = v114;
        char v27 = v111;
        int64_t v26 = v112;
        BOOL v29 = v109;
        unint64_t v28 = v110;
        uint64_t v31 = v107;
        uint64_t v30 = v108;
        uint64_t v33 = v105;
        uint64_t v32 = v106;
        uint64_t v34 = v104;
        do
        {
          if (++v56 == v58 && (v57 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v59 = v56 == v58;
          if (v56 == v58) {
            long long v56 = 0;
          }
          v57 |= v59;
          uint64_t v60 = *(void *)(v66 + 8 * v56);
        }
        while (v60 == -1);
        uint64_t v11 = __clz(__rbit64(~v60)) + (v56 << 6);
      }
      *(void *)(v66 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v35 = *(void *)(v83 + 48) + 392 * v11;
      *(void *)uint64_t v35 = v89;
      *(void *)(v35 + 8) = v88;
      *(void *)(v35 + 16) = v87;
      *(void *)(v35 + 24) = v86;
      *(void *)(v35 + 32) = v85;
      *(void *)(v35 + 40) = v84;
      *(void *)(v35 + 48) = v76;
      *(void *)(v35 + 56) = v75;
      *(void *)(v35 + 64) = v74;
      *(void *)(v35 + 72) = v73;
      *(void *)(v35 + 80) = v72;
      *(void *)(v35 + 88) = v71;
      *(unsigned char *)(v35 + 96) = v90;
      *(void *)(v35 + 104) = v94;
      *(void *)(v35 + 112) = v93;
      *(void *)(v35 + 120) = v92;
      *(void *)(v35 + 128) = v91;
      *(void *)(v35 + 136) = v98;
      *(void *)(v35 + 144) = v97;
      *(void *)(v35 + 152) = v96;
      *(void *)(v35 + 160) = v95;
      *(void *)(v35 + 168) = v102;
      *(void *)(v35 + 176) = v101;
      *(void *)(v35 + 184) = v100;
      *(void *)(v35 + 192) = v99;
      *(unsigned char *)(v35 + 200) = v103;
      *(unsigned char *)(v35 + 201) = v34;
      *(void *)(v35 + 208) = v30;
      *(void *)(v35 + 216) = v31;
      *(void *)(v35 + 224) = v32;
      *(void *)(v35 + 232) = v33;
      *(void *)(v35 + 240) = v26;
      *(void *)(v35 + 248) = v27;
      *(void *)(v35 + 256) = v28;
      *(void *)(v35 + 264) = v29;
      *(void *)(v35 + 272) = v23;
      *(void *)(v35 + 280) = v22;
      *(void *)(v35 + 288) = v24;
      *(void *)(v35 + 296) = v25;
      *(void *)(v35 + 304) = v15;
      *(void *)(v35 + 312) = v21;
      *(void *)(v35 + 320) = v16;
      *(void *)(v35 + 328) = v17;
      *(void *)(v35 + 336) = v18;
      *(void *)(v35 + 344) = v20;
      *(unsigned char *)(v35 + 352) = v14;
      *(void *)(v35 + 360) = v13;
      *(void *)(v35 + 368) = v19;
      *(void *)(v35 + 376) = v12;
      *(void *)(v35 + 384) = result;
      uint64_t v8 = v69;
      *(void *)(*(void *)(v83 + 56) + 8 * v11) = v68;
      ++*(void *)(v83 + 16);
      uint64_t v5 = v65;
      unint64_t v10 = v70;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v83;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  long long v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt32 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t i;
  char v40;
  long long v41;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICURelativeDateFormatter.Signature, ICURelativeDateFormatter?>);
  int64_t v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v18 = v17 | (v14 << 6);
      }
      else
      {
        uint64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v37) {
          goto LABEL_36;
        }
        uint64_t v20 = v38[v19];
        ++v14;
        if (!v20)
        {
          uint64_t v14 = v19 + 1;
          if (v19 + 1 >= v37) {
            goto LABEL_36;
          }
          uint64_t v20 = v38[v14];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v37)
            {
LABEL_36:
              swift_release();
              unint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  ConstStr255Param *v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v20 = v38[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_43;
                }
                if (v14 >= v37) {
                  goto LABEL_36;
                }
                uint64_t v20 = v38[v14];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v14 = v21;
          }
        }
LABEL_21:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      unint64_t v22 = *(void *)(v5 + 56);
      int64_t v23 = *(void *)(v5 + 48) + 32 * v18;
      unint64_t v25 = *(void *)v23;
      uint64_t v24 = *(void *)(v23 + 8);
      int64_t v26 = *(_DWORD *)(v23 + 16);
      char v27 = *(unsigned __int8 *)(v23 + 20);
      *(void *)&int64_t v13 = *(void *)(v23 + 24);
      uint64_t v41 = v13;
      unint64_t v28 = *(void *)(v22 + 8 * v18);
      if ((v40 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v27)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
      }
      Hasher._combine(_:)(v41);
      Hasher._combine(_:)(DWORD1(v41));
      uint64_t result = Hasher._finalize()();
      BOOL v29 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v11 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = *(void *)(v7 + 48) + 32 * v15;
      *(void *)unint64_t v16 = v25;
      *(void *)(v16 + 8) = v24;
      *(_DWORD *)(v16 + 16) = v26;
      *(unsigned char *)(v16 + 20) = v27;
      *((void *)&v13 + 1) = *((void *)&v41 + 1);
      *(void *)(v16 + 24) = v41;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Duration.UnitsFormatStyle.Unit, Double>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        uint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        uint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          uint64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v19 = v9[v8];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      unint64_t v21 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v17);
      unint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      int64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          BOOL v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  uint64_t i;
  char v42;
  char v43;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v38 = v2;
  uint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    int64_t v23 = v40;
    uint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      uint64_t v24 = v40[v13];
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            uint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(unsigned char *)(v33 + 8);
    uint64_t v36 = *(void *)(v33 + 16);
    unint64_t v43 = *(unsigned char *)(v33 + 24);
    if ((v42 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)uint64_t v19 = v34;
    *(unsigned char *)(v19 + 8) = v35;
    *(void *)(v19 + 16) = v36;
    *(unsigned char *)(v19 + 24) = v43;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v38;
  int64_t v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  void *v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      unint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      BOOL v29 = *v28;
      uint64_t v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  long long v35;
  unsigned char v36[72];

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AttributedString._AttributeStorage, Int>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v34 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v34 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    uint64_t v35 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v31 = *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    specialized Dictionary<>.hash(into:)((uint64_t)v36, v35);
    specialized Set.hash(into:)((uint64_t)v36, v31);
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v19 = v35;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v15) >> 6;
      uint64_t v19 = v35;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v33;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v23, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v37 = (v10 - 1) & v10;
        uint64_t v38 = v13;
        uint64_t v20 = __clz(__rbit64(v10)) | (v13 << 6);
      }
      else
      {
        unint64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v36[v21];
        int64_t v23 = v13 + 1;
        if (!v22)
        {
          int64_t v23 = v13 + 2;
          if (v13 + 2 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v36[v23];
          if (!v22)
          {
            uint64_t v24 = v13 + 3;
            if (v13 + 3 >= v35)
            {
LABEL_33:
              swift_release();
              unint64_t v3 = v34;
              if (a2)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v36[v24];
            if (!v22)
            {
              while (1)
              {
                int64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v23 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v36[v23];
                ++v24;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v23 = v13 + 3;
          }
        }
LABEL_30:
        uint64_t v37 = (v22 - 1) & v22;
        uint64_t v38 = v23;
        uint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 80 * v20;
      unint64_t v43 = *(_OWORD *)(v32 + 24);
      char v44 = *(_OWORD *)(v32 + 8);
      uint64_t v41 = *(_OWORD *)(v32 + 56);
      char v42 = *(_OWORD *)(v32 + 40);
      uint64_t v39 = *(void *)v32;
      int64_t v40 = *(void *)(v32 + 72);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 80 * v17;
      int64_t v13 = v38;
      *(void *)uint64_t v19 = v39;
      *(_OWORD *)(v19 + 8) = v44;
      *(_OWORD *)(v19 + 24) = v43;
      *(_OWORD *)(v19 + 40) = v42;
      *(_OWORD *)(v19 + 56) = v41;
      *(void *)(v19 + 72) = v40;
      ++*(void *)(v7 + 16);
      unint64_t v10 = v37;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  void *v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  void *v33;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = 8 * v19;
      unint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      BOOL v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        uint64_t v30 = v29;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt64 v17;
  unint64_t v18;
  char v19;
  char v20;
  long long v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt64 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  Swift::UInt8 v57;
  uint64_t v58;
  long long v59;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  uint64_t v58 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v50 = (void *)(v5 + 64);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v5 + 64);
    id v48 = v2;
    unint64_t v49 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = v58 + 64;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    uint64_t v51 = v5;
    while (1)
    {
      if (v8)
      {
        uint64_t v52 = (v8 - 1) & v8;
        unint64_t v53 = v11;
        char v27 = __clz(__rbit64(v8)) | (v11 << 6);
      }
      else
      {
        unint64_t v28 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v28 >= v49) {
          goto LABEL_36;
        }
        BOOL v29 = v50[v28];
        uint64_t v30 = v11 + 1;
        if (!v29)
        {
          uint64_t v30 = v11 + 2;
          if (v11 + 2 >= v49) {
            goto LABEL_36;
          }
          BOOL v29 = v50[v30];
          if (!v29)
          {
            uint64_t v31 = v11 + 3;
            if (v11 + 3 >= v49)
            {
LABEL_36:
              swift_release();
              unint64_t v3 = v48;
              if (a2)
              {
                uint64_t v47 = 1 << *(unsigned char *)(v5 + 32);
                if (v47 >= 64) {
                  bzero(v50, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v50 = -1 << v47;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            BOOL v29 = v50[v31];
            if (!v29)
            {
              while (1)
              {
                uint64_t v30 = v31 + 1;
                if (__OFADD__(v31, 1)) {
                  goto LABEL_43;
                }
                if (v30 >= v49) {
                  goto LABEL_36;
                }
                BOOL v29 = v50[v30];
                ++v31;
                if (v29) {
                  goto LABEL_33;
                }
              }
            }
            uint64_t v30 = v11 + 3;
          }
        }
LABEL_33:
        uint64_t v52 = (v29 - 1) & v29;
        unint64_t v53 = v30;
        char v27 = __clz(__rbit64(v29)) + (v30 << 6);
      }
      uint64_t v36 = *(void *)(v5 + 56);
      uint64_t v37 = *(void *)(v5 + 48) + 96 * v27;
      uint64_t v38 = *(void *)v37;
      uint64_t v39 = *(void *)(v37 + 8);
      int64_t v40 = *(void *)(v37 + 16);
      uint64_t v41 = *(void *)(v37 + 24);
      char v42 = *(unsigned __int8 *)(v37 + 32);
      uint64_t v59 = *(_OWORD *)(v37 + 40);
      unint64_t v43 = *(unsigned __int8 *)(v37 + 56);
      char v44 = *(void *)(v37 + 72);
      long long v56 = *(void *)(v37 + 64);
      uint64_t v57 = *(unsigned char *)(v37 + 80);
      uint64_t v45 = *(void *)(v37 + 88);
      uint64_t v46 = (uint64_t *)(v36 + 16 * v27);
      unint64_t v54 = *v46;
      uint64_t v55 = *((unsigned char *)v46 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v42);
      Hasher._combine(_:)(v59);
      Hasher._combine(_:)(*((Swift::UInt *)&v59 + 1));
      Hasher._combine(_:)(v43);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v57);
      if ((v45 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        unint64_t v12 = v45;
      }
      else {
        unint64_t v12 = 0;
      }
      Hasher._combine(_:)(v12);
      int64_t v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v58 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      unint64_t v17 = v45;
      if (((-1 << v15) & ~*(void *)(v9 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v15) & ~*(void *)(v9 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v19 = v42;
        uint64_t v20 = v43;
        unint64_t v21 = v59;
        uint64_t result = v40;
        unint64_t v22 = v41;
        uint64_t v24 = v38;
        int64_t v23 = v39;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v14) >> 6;
        uint64_t v19 = v42;
        uint64_t v20 = v43;
        unint64_t v21 = v59;
        uint64_t result = v40;
        unint64_t v22 = v41;
        uint64_t v24 = v38;
        int64_t v23 = v39;
        do
        {
          if (++v16 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v34 = v16 == v33;
          if (v16 == v33) {
            unint64_t v16 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v9 + 8 * v16);
        }
        while (v35 == -1);
        uint64_t v18 = __clz(__rbit64(~v35)) + (v16 << 6);
      }
      *(void *)(v9 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      unint64_t v25 = *(void *)(v58 + 48) + 96 * v18;
      *(void *)unint64_t v25 = v24;
      *(void *)(v25 + 8) = v23;
      *(void *)(v25 + 16) = result;
      *(void *)(v25 + 24) = v22;
      *(unsigned char *)(v25 + 32) = v19;
      *(_OWORD *)(v25 + 40) = v21;
      *(unsigned char *)(v25 + 56) = v20;
      *(void *)(v25 + 64) = v56;
      *(void *)(v25 + 72) = v44;
      *(unsigned char *)(v25 + 80) = v57;
      *(void *)(v25 + 88) = v17;
      int64_t v26 = *(void *)(v58 + 56) + 16 * v18;
      *(void *)int64_t v26 = v54;
      *(unsigned char *)(v26 + 8) = v55;
      ++*(void *)(v58 + 16);
      uint64_t v5 = v51;
      uint64_t v8 = v52;
      uint64_t v11 = v53;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v58;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  void *v29;
  long long v30;

  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, String?>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    BOOL v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              unint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v29 = -1 << v28;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      uint64_t v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(unsigned char *)(*(void *)(v7 + 48) + v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

void *specialized Array.reserveCapacity(_:)(int64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || a1 > v3[3] >> 1)
  {
    if (v3[2] <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = v3[2];
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0, v3);
    unint64_t v3 = result;
  }
  *uint64_t v1 = v3;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanBool()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  unint64_t v2 = (unsigned __int8 *)v0[4];
  if (v2 != v1)
  {
    unint64_t v3 = v0;
    uint64_t v4 = v1 + 1;
    int v5 = *v1;
    v0[3] = (uint64_t)(v1 + 1);
    if (v5 == 116)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 > 2)
        {
          BOOL v6 = *(_WORD *)v4 == 30066 && v1[3] == 101;
          if (v6)
          {
            v0[3] = (uint64_t)(v1 + 4);
            uint64_t v11 = (void *)v0[1];
            uint64_t v12 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v11, v12, (uint64_t)(v1 + 4));
            unint64_t v3 = (uint64_t *)v3[6];
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_26:
              unint64_t v14 = v3[2];
              unint64_t v13 = v3[3];
              unint64_t v15 = v14 + 1;
              if (v14 >= v13 >> 1)
              {
                unint64_t v34 = v14 + 1;
                uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v3);
                unint64_t v15 = v34;
                unint64_t v3 = v30;
              }
              v3[2] = v15;
              unint64_t v16 = &v3[v14];
              uint64_t v17 = 3;
LABEL_34:
              v16[4] = v17;
              *uint64_t v0 = (uint64_t)v3;
              return;
            }
LABEL_51:
            unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            goto LABEL_26;
          }
          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 == 114)
            {
              if (v1[2] == 117) {
                uint64_t v7 = 2 * (v1[3] != 101);
              }
              else {
                uint64_t v7 = 1;
              }
            }
            else
            {
              uint64_t v7 = 0;
            }
            int64_t v23 = &v4[v7];
            v0[3] = (uint64_t)&v4[v7];
            uint64_t v32 = 0;
            unint64_t v33 = 0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            uint64_t v4 = (unsigned __int8 *)v0[4];
            if (v23 < v4) {
              goto LABEL_43;
            }
            __break(1u);
            goto LABEL_40;
          }
          goto LABEL_48;
        }
LABEL_16:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v8 = 1;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(void *)(v8 + 40) = 0;
        char v9 = 12;
LABEL_44:
        *(unsigned char *)(v8 + 48) = v9;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    else if (v5 == 102)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 >= 4)
        {
          if (*(_DWORD *)v4 == 1702063201)
          {
            v0[3] = (uint64_t)(v1 + 5);
            uint64_t v18 = (void *)v0[1];
            uint64_t v19 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v18, v19, (uint64_t)(v1 + 5));
            unint64_t v3 = (uint64_t *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            }
            unint64_t v21 = v3[2];
            unint64_t v20 = v3[3];
            unint64_t v22 = v21 + 1;
            if (v21 >= v20 >> 1)
            {
              uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v3);
              unint64_t v22 = v21 + 1;
              unint64_t v3 = v31;
            }
            v3[2] = v22;
            unint64_t v16 = &v3[v21];
            uint64_t v17 = 4;
            goto LABEL_34;
          }
          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 != 97)
            {
              uint64_t v10 = 0;
              goto LABEL_42;
            }
            if (v1[2] == 108)
            {
              if (v1[3] == 115)
              {
                BOOL v6 = v1[4] == 101;
                uint64_t v10 = 3;
                if (v6) {
                  uint64_t v10 = 0;
                }
              }
              else
              {
                uint64_t v10 = 2;
              }
LABEL_42:
              int64_t v23 = &v4[v10];
              v0[3] = (uint64_t)&v4[v10];
              uint64_t v32 = 0;
              unint64_t v33 = 0xE000000000000000;
              uint64_t v0 = &v32;
              _StringGuts.grow(_:)(20);
              swift_bridgeObjectRelease();
              if ((unint64_t)v23 < v3[4])
              {
LABEL_43:
                uint64_t v24 = *v23;
                unint64_t v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, v3[1], v3[2]);
                uint64_t v27 = v26;
                uint64_t v29 = v28;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v8 = 0xD000000000000019;
                *(void *)(v8 + 8) = 0x80000001823ABB50;
                *(void *)(v8 + 16) = v24;
                *(void *)(v8 + 24) = v25;
                *(void *)(v8 + 32) = v27;
                *(void *)(v8 + 40) = v29;
                char v9 = 1;
                goto LABEL_44;
              }
              goto LABEL_50;
            }
LABEL_40:
            uint64_t v10 = 1;
            goto LABEL_42;
          }
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        goto LABEL_16;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    __break(1u);
    goto LABEL_47;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanNumber()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  unint64_t v2 = (unsigned __int8 *)v0[4];
  if (v2 == v1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
  unint64_t v3 = v1 + 1;
  int v4 = *v1;
  v0[3] = v1 + 1;
  if (v4 != 45 && (v4 - 58) < 0xFFFFFFF6) {
    goto LABEL_21;
  }
  if (v3 >= v2)
  {
LABEL_18:
    unsigned __int8 v9 = 1;
  }
  else
  {
    char v6 = 0;
    while (1)
    {
      while (1)
      {
        int v7 = *v3;
        if ((v7 - 58) <= 0xFFFFFFF5)
        {
          unsigned int v8 = v7 - 43;
          if (v8 > 0x3A) {
            goto LABEL_16;
          }
          if (((1 << v8) & 0xD) == 0) {
            break;
          }
        }
        v0[3] = ++v3;
        if (v3 >= v2) {
          goto LABEL_16;
        }
      }
      if (((1 << v8) & 0x400000004000000) == 0) {
        break;
      }
      v0[3] = ++v3;
      char v6 = 1;
      if (v3 >= v2) {
        goto LABEL_17;
      }
    }
LABEL_16:
    if ((v6 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    unsigned __int8 v9 = 9;
  }
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v9, v3 - v1, (uint64_t)&v1[-v0[1]], (void *)v0[1], v0[2], (uint64_t)v3);
}

void *JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4)
{
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(a2, a3, a4);
  unsigned int v8 = *(void **)v4;
  int64_t v9 = *(void *)(*(void *)v4 + 16);
  int64_t v10 = v9 + 4;
  if (__OFADD__(v9, 4))
  {
    __break(1u);
LABEL_17:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v9, 1, v8);
    unsigned int v8 = result;
    unint64_t v7 = result[3];
    unint64_t v12 = v7 >> 1;
    goto LABEL_9;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || (unint64_t v7 = v8[3], v12 = v7 >> 1, (uint64_t)(v7 >> 1) < v10))
  {
    if (v9 <= v10) {
      int64_t v13 = v9 + 4;
    }
    else {
      int64_t v13 = v9;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v8);
    unsigned int v8 = result;
    unint64_t v7 = result[3];
    unint64_t v12 = v7 >> 1;
  }
  unint64_t v5 = v8[2];
  int64_t v9 = v5 + 1;
  if (v12 <= v5) {
    goto LABEL_17;
  }
LABEL_9:
  _OWORD v8[2] = v9;
  v8[v5 + 4] = a1;
  if ((uint64_t)v12 < (uint64_t)(v5 + 2))
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v5 + 2, 1, v8);
    unsigned int v8 = result;
  }
  _OWORD v8[2] = v5 + 2;
  v8[v9 + 4] = v10;
  unint64_t v15 = v8[2];
  unint64_t v14 = v8[3];
  int64_t v16 = v14 >> 1;
  unint64_t v17 = v15 + 1;
  if (v14 >> 1 <= v15)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v8);
    unsigned int v8 = result;
    unint64_t v14 = result[3];
    int64_t v16 = v14 >> 1;
  }
  _OWORD v8[2] = v17;
  v8[v15 + 4] = 0;
  int64_t v18 = v15 + 2;
  if (v16 < v18)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v18, 1, v8);
    unsigned int v8 = result;
  }
  _OWORD v8[2] = v18;
  v8[v17 + 4] = 7;
  *(void *)uint64_t v4 = v8;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanArray()()
{
  unint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  if (v6 == v5)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v0 = v1;
  unint64_t v4 = v5 + 1;
  int v7 = *(unsigned __int8 *)v5;
  v1[3] = v5 + 1;
  if (v7 != 91) {
    goto LABEL_70;
  }
  uint64_t v8 = v1[5];
  if (v8 > 511)
  {
    unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v5 + 2, v1[1], v1[2]);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v16 = v11;
    *(void *)(v16 + 8) = v13;
    *(void *)(v16 + 16) = v15;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = 0;
    *(void *)(v16 + 40) = 0;
    *(unsigned char *)(v16 + 48) = 2;
    swift_willThrow();
    return;
  }
  v1[5] = v8 + 1;
  if (v4 >= v6)
  {
LABEL_8:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v10 = 1;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 12;
    swift_willThrow();
LABEL_48:
    --v1[5];
    return;
  }
  while (1)
  {
    unsigned int v9 = *(unsigned __int8 *)v4;
    if (v9 >= 0x40 || ((0x100002600uLL >> v9) & 1) == 0) {
      break;
    }
    v1[3] = ++v4;
    if (v4 >= v6) {
      goto LABEL_8;
    }
  }
  if (v9 == 93)
  {
    v1[3] = v4 + 1;
    JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(6u, (void *)v1[1], v1[2], v4 + 1);
    goto LABEL_48;
  }
  BOOL v17 = v9 > 0x20;
  uint64_t v18 = (1 << v9) & 0x100002600;
  if (!v17 && v18 != 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  int64_t v3 = (int64_t)(v1 + 6);
  int64_t v2 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(6u, (void *)v1[1], v1[2], v4);
  if (v4 >= v6)
  {
    unint64_t v6 = 0;
LABEL_50:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v27 = 1;
    *(_OWORD *)(v27 + 8) = 0u;
    *(_OWORD *)(v27 + 24) = 0u;
    *(void *)(v27 + 40) = 0;
    char v28 = 12;
    goto LABEL_51;
  }
  unint64_t v6 = 0;
  while (2)
  {
    while (1)
    {
      uint64_t v20 = *(unsigned __int8 *)v4;
      if (v20 >= 0x40 || ((0x100002600uLL >> v20) & 1) == 0) {
        break;
      }
      unint64_t v22 = v0[4];
      unint64_t v4 = v0[3] + 1;
      v0[3] = v4;
      if (v4 >= v22) {
        goto LABEL_50;
      }
    }
    switch(*(unsigned char *)v4)
    {
      case '[':
        uint64_t v1 = v0;
        JSONScanner.scanArray()();
        goto LABEL_32;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_26;
      case 'f':
      case 't':
        uint64_t v1 = v0;
        JSONScanner.scanBool()();
        goto LABEL_32;
      case 'n':
        uint64_t v1 = v0;
        JSONScanner.scanNull()();
        goto LABEL_32;
      case '{':
        uint64_t v1 = v0;
        JSONScanner.scanObject()();
        goto LABEL_32;
      default:
        if (v20 == 34)
        {
          uint64_t v1 = v0;
          JSONScanner.scanString()();
LABEL_32:
          if (v21) {
            goto LABEL_53;
          }
          if (__OFADD__(v6++, 1)) {
            goto LABEL_71;
          }
          unint64_t v4 = v0[3];
          unint64_t v24 = v0[4];
          while (1)
          {
            if (v4 >= v24) {
              goto LABEL_50;
            }
            uint64_t v25 = *(unsigned __int8 *)v4;
            if (v25 >= 0x40 || ((0x100002600uLL >> v25) & 1) == 0) {
              break;
            }
            v0[3] = ++v4;
          }
          if (v25 != 44)
          {
            if (v25 == 93)
            {
LABEL_65:
              uint64_t v31 = v4 + 1;
              v0[3] = v4 + 1;
              uint64_t v29 = (void *)v0[1];
              uint64_t v30 = v0[2];
            }
            else
            {
              if (v25 <= 0x20 && ((1 << v25) & 0x100002600) != 0)
              {
                __break(1u);
                goto LABEL_73;
              }
              unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4, v0[1], v0[2]);
              uint64_t v36 = v35;
              uint64_t v38 = v37;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v39 = xmmword_182112840;
              *(void *)(v39 + 16) = v25;
              *(void *)(v39 + 24) = v34;
              *(void *)(v39 + 32) = v36;
              *(void *)(v39 + 40) = v38;
              *(unsigned char *)(v39 + 48) = 1;
LABEL_52:
              swift_willThrow();
LABEL_53:
              uint64_t v29 = (void *)v0[1];
              uint64_t v30 = v0[2];
              uint64_t v31 = v0[3];
            }
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v29, v30, v31);
            uint64_t v1 = (void *)v0[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
            }
            unint64_t v4 = v1[2];
            unint64_t v5 = v1[3];
            int64_t v3 = v4 + 1;
            if (v4 < v5 >> 1)
            {
LABEL_57:
              v1[2] = v3;
              v1[v4 + 4] = 7;
              uint64_t v32 = &v1[v2 + 4];
              *uint64_t v32 = v3;
              v32[1] = v6;
              --v0[5];
              v0[6] = v1;
              return;
            }
LABEL_72:
            uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v3, 1, v1);
            goto LABEL_57;
          }
          while (1)
          {
            v0[3] = ++v4;
            if (v4 >= v24) {
              goto LABEL_50;
            }
            unsigned int v26 = *(unsigned __int8 *)v4;
            if (v26 >= 0x40) {
              break;
            }
            if (((0x100002600uLL >> v26) & 1) == 0) {
              goto LABEL_45;
            }
          }
          if (v26 == 93) {
            goto LABEL_65;
          }
LABEL_45:
          if (v4 >= v24) {
            goto LABEL_50;
          }
          continue;
        }
        if (v20 == 45)
        {
LABEL_27:
          uint64_t v1 = v0;
          JSONScanner.scanNumber()();
          goto LABEL_32;
        }
LABEL_26:
        if ((v20 - 58) >= 0xFFFFFFF6) {
          goto LABEL_27;
        }
        if (v20 > 0x20 || ((1 << v20) & 0x100002600) == 0)
        {
          unint64_t v40 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
          uint64_t v42 = v41;
          uint64_t v44 = v43;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v27 = 0;
          *(void *)(v27 + 8) = 0;
          *(void *)(v27 + 16) = v20;
          *(void *)(v27 + 24) = v40;
          *(void *)(v27 + 32) = v42;
          *(void *)(v27 + 40) = v44;
          char v28 = 1;
LABEL_51:
          *(unsigned char *)(v27 + 48) = v28;
          goto LABEL_52;
        }
LABEL_74:
        __break(1u);
        return;
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanObject()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  int v2 = *v1;
  v0[3] = v1 + 1;
  if (v2 != 123)
  {
LABEL_7:
    __break(1u);
    return;
  }
  if ((uint64_t)v0[5] > 511)
  {
    unint64_t v3 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v8 = v3;
    *(void *)(v8 + 8) = v5;
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0;
    *(unsigned char *)(v8 + 48) = 2;
    swift_willThrow();
  }
  else
  {
    JSONScanner.scanObject(withoutBraces:)(0);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanObject(withoutBraces:)(Swift::Bool withoutBraces)
{
  int v2 = v1;
  ++v1[5];
  uint64_t v4 = (unsigned __int8 *)v1[3];
  unint64_t v5 = v1[4];
  if ((unint64_t)v4 < v5)
  {
    while (1)
    {
      unsigned int v6 = *v4;
      if (v6 >= 0x40) {
        break;
      }
      if (((1 << v6) & 0x100002600) == 0) {
        goto LABEL_11;
      }
      v1[3] = ++v4;
      if ((unint64_t)v4 >= v5) {
        goto LABEL_5;
      }
    }
    if (v6 != 125)
    {
LABEL_11:
      Swift::Int count = 0;
      uint64_t v14 = v1 + 6;
      int64_t v15 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(5u, (void *)v1[1], v1[2], (uint64_t)v4);
      Swift::Bool done = 0;
      while (1)
      {
        JSONScanner._scanObjectLoop(withoutBraces:count:done:)(withoutBraces, &count, &done);
        if (v16) {
          break;
        }
        if (done)
        {
          Swift::Int v17 = count;
          JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
          uint64_t v18 = (void *)v1[6];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
          }
          unint64_t v20 = v18[2];
          unint64_t v19 = v18[3];
          unint64_t v21 = v20 + 1;
          if (v20 >= v19 >> 1) {
            uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v18);
          }
          unint64_t v18[2] = v21;
          v18[v20 + 4] = 7;
          unint64_t v22 = &v18[v15 + 4];
          *unint64_t v22 = v21;
          v22[1] = v17;
          uint64_t v23 = v2[5] - 1;
          v2[6] = v18;
          goto LABEL_27;
        }
      }
      Swift::Int v24 = count;
      JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
      uint64_t v25 = (void *)v1[6];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      }
      unint64_t v26 = v25[2];
      unint64_t v27 = v25[3];
      unint64_t v28 = v26 + 1;
      if (v26 >= v27 >> 1)
      {
        uint64_t v30 = v25;
        unint64_t v31 = v25[2];
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v26 + 1, 1, v30);
        unint64_t v26 = v31;
        uint64_t v25 = v32;
      }
      v25[2] = v28;
      v25[v26 + 4] = 7;
      uint64_t v29 = &v25[v15 + 4];
      *uint64_t v29 = v28;
      v29[1] = v24;
      *uint64_t v14 = v25;
      goto LABEL_26;
    }
    if (withoutBraces)
    {
      unint64_t v9 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v4, v1[1], v1[2]);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 125;
      *(void *)(v7 + 24) = v9;
      *(void *)(v7 + 32) = v11;
      *(void *)(v7 + 40) = v13;
      char v8 = 1;
      goto LABEL_10;
    }
    v1[3] = ++v4;
    goto LABEL_25;
  }
LABEL_5:
  if (withoutBraces)
  {
LABEL_25:
    JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(5u, (void *)v1[1], v1[2], (uint64_t)v4);
    goto LABEL_26;
  }
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v7 = 1;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(void *)(v7 + 40) = 0;
  char v8 = 12;
LABEL_10:
  *(unsigned char *)(v7 + 48) = v8;
  swift_willThrow();
LABEL_26:
  uint64_t v23 = v2[5] - 1;
LABEL_27:
  v2[5] = v23;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner._scanObjectLoop(withoutBraces:count:done:)(Swift::Bool withoutBraces, Swift::Int *count, Swift::Bool *done)
{
  JSONScanner.scanString()();
  if (!v7)
  {
    char v8 = (unsigned __int8 *)v3[3];
    unint64_t v9 = v3[4];
    if ((unint64_t)v8 >= v9)
    {
LABEL_6:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v11 = 1;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(void *)(v11 + 40) = 0;
      char v12 = 12;
LABEL_18:
      *(unsigned char *)(v11 + 48) = v12;
      swift_willThrow();
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *v8;
        if (v10 >= 0x40) {
          goto LABEL_16;
        }
        if (((1 << v10) & 0x100002600) == 0) {
          break;
        }
        double v3[3] = ++v8;
        if ((unint64_t)v8 >= v9) {
          goto LABEL_6;
        }
      }
      if (v10 != 58)
      {
LABEL_16:
        unint64_t v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v8, v3[1], v3[2]);
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v11 = xmmword_182112850;
        *(void *)(v11 + 16) = v10;
        goto LABEL_17;
      }
      double v3[3] = v8 + 1;
      JSONScanner.scanValue()();
      if (v13) {
        return;
      }
      if (!__OFADD__(*count, 2))
      {
        *count += 2;
        uint64_t v14 = (unsigned __int8 *)v3[3];
        unint64_t v15 = v3[4];
        if ((unint64_t)v14 >= v15) {
          goto LABEL_14;
        }
        while (1)
        {
          uint64_t v16 = *v14;
          if (v16 >= 0x40 || ((0x100002600uLL >> v16) & 1) == 0) {
            break;
          }
          double v3[3] = ++v14;
          if ((unint64_t)v14 >= v15) {
            goto LABEL_14;
          }
        }
        if (v16 == 125)
        {
LABEL_28:
          if (!withoutBraces)
          {
            double v3[3] = v14 + 1;
LABEL_31:
            *Swift::Bool done = 1;
            return;
          }
          unint64_t v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v14, v3[1], v3[2]);
          uint64_t v19 = v25;
          uint64_t v21 = v26;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 125;
        }
        else
        {
          if (v16 == 44)
          {
            while (1)
            {
              double v3[3] = ++v14;
              if ((unint64_t)v14 >= v15) {
                break;
              }
              unsigned int v22 = *v14;
              if (v22 >= 0x40)
              {
                if (v22 != 125) {
                  return;
                }
                goto LABEL_28;
              }
              if (((0x100002600uLL >> v22) & 1) == 0) {
                return;
              }
            }
LABEL_14:
            if (!withoutBraces) {
              goto LABEL_6;
            }
            goto LABEL_31;
          }
          unint64_t v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v14, v3[1], v3[2]);
          uint64_t v19 = v23;
          uint64_t v21 = v24;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v11 = xmmword_182112850;
          *(void *)(v11 + 16) = v16;
        }
LABEL_17:
        *(void *)(v11 + 24) = v17;
        *(void *)(v11 + 32) = v19;
        *(void *)(v11 + 40) = v21;
        char v12 = 1;
        goto LABEL_18;
      }
      __break(1u);
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanString()()
{
  char v9 = 0;
  int v2 = JSONScanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:)(&v9);
  if (v1) {
    return;
  }
  unint64_t v3 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  int v4 = *v3;
  v0[3] = v3 + 1;
  if (v4 != 34)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v5 = v3 - v2;
  unsigned int v6 = (unsigned __int8 *)v0[1];
  uint64_t v7 = v2 - v6;
  if (v9) {
    unsigned __int8 v8 = 8;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v8, v5, v7, v6, v0[2], (uint64_t)(v3 + 1));
}

void *JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(a4, a5, a6);
  uint64_t v11 = *(void **)v6;
  int64_t v12 = *(void *)(*(void *)v6 + 16);
  int64_t v13 = v12 + 3;
  if (__OFADD__(v12, 3))
  {
    __break(1u);
LABEL_15:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v12, 1, v11);
    uint64_t v11 = result;
    unint64_t v10 = result[3];
    unint64_t v15 = v10 >> 1;
    goto LABEL_9;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || (unint64_t v10 = v11[3], v15 = v10 >> 1, (uint64_t)(v10 >> 1) < v13))
  {
    if (v12 <= v13) {
      int64_t v16 = v12 + 3;
    }
    else {
      int64_t v16 = v12;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v16, 1, v11);
    uint64_t v11 = result;
    unint64_t v10 = result[3];
    unint64_t v15 = v10 >> 1;
  }
  int64_t v13 = v11[2];
  int64_t v12 = v13 + 1;
  if (v15 <= v13) {
    goto LABEL_15;
  }
LABEL_9:
  void v11[2] = v12;
  v11[v13 + 4] = a1;
  if ((uint64_t)v15 < v13 + 2)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v13 + 2, 1, v11);
    uint64_t v11 = result;
  }
  void v11[2] = v13 + 2;
  v11[v12 + 4] = a2;
  unint64_t v18 = v11[2];
  unint64_t v17 = v11[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v11);
    uint64_t v11 = result;
  }
  void v11[2] = v18 + 1;
  v11[v18 + 4] = a3;
  *(void *)uint64_t v6 = v11;
  return result;
}

void *JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(void *result, uint64_t a2, uint64_t a3)
{
  int v4 = (void *)*v3;
  uint64_t v5 = *(void *)(*v3 + 16);
  if (v5) {
    BOOL v6 = (*(void *)(*v3 + 16) & 0x7FFLL) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return result;
  }
  double v7 = (double)a2 / (double)(a3 - (uint64_t)result) * (double)v5;
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = v3[1];
  if (!v9 || (double)v8 / (double)v9 > 1.25)
  {
    uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!result || v8 > v4[3] >> 1)
    {
      if (v5 <= v8) {
        int64_t v10 = v8;
      }
      else {
        int64_t v10 = v5;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 0, v4);
      int v4 = result;
    }
    void *v3 = v4;
    v3[1] = v8;
  }
  return result;
}

unsigned __int8 *JSONScanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:)(unsigned char *a1)
{
  int v2 = (unsigned __int8 *)v1[2];
  unint64_t v3 = (unsigned __int8 *)v1[3];
  if (v3 == v2) {
    goto LABEL_22;
  }
  unsigned int v5 = *v2++;
  uint64_t v4 = v5;
  v1[2] = (unint64_t)v2;
  if (v5 != 34)
  {
    unint64_t v9 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v2, *v1, v1[1]);
    int v2 = v10;
    uint64_t v12 = v11;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = v4;
    *(void *)(v13 + 24) = v9;
    *(void *)(v13 + 32) = v2;
    *(void *)(v13 + 40) = v12;
    char v14 = 1;
    goto LABEL_23;
  }
  uint64_t result = (unsigned __int8 *)JSONScanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter()();
  if (v8) {
    return v2;
  }
  if (result == 34)
  {
    *a1 = 1;
    return v2;
  }
  unint64_t v15 = (unsigned __int8 *)v1[2];
  if (v15 >= v3)
  {
LABEL_22:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v13 = 1;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(void *)(v13 + 40) = 0;
    char v14 = 12;
LABEL_23:
    *(unsigned char *)(v13 + 48) = v14;
LABEL_24:
    swift_willThrow();
    return v2;
  }
  while (1)
  {
    int v18 = *v15;
    if (v18 != 92)
    {
      if (v18 == 34)
      {
        *a1 = 0;
        return v2;
      }
      int64_t v16 = v15 + 1;
      v1[2] = (unint64_t)(v15 + 1);
      unint64_t v17 = (unsigned __int8 *)v1[3];
      goto LABEL_11;
    }
    unint64_t v17 = (unsigned __int8 *)v1[3];
    if (v17 == v15) {
      break;
    }
    v1[2] = (unint64_t)(v15 + 1);
    if (v17 == v15 + 1) {
      goto LABEL_22;
    }
    int v19 = v15[1];
    int64_t v16 = v15 + 2;
    v1[2] = (unint64_t)(v15 + 2);
    if (v19 == 117)
    {
      if (v17 - v16 <= 3)
      {
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v22 = 1;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(void *)(v22 + 40) = 0;
        char v23 = 12;
LABEL_29:
        *(unsigned char *)(v22 + 48) = v23;
        goto LABEL_24;
      }
      unint64_t v20 = (unint64_t)&v16[-*v1];
      uint64_t v21 = (char *)(v20 + 4);
      if (__OFADD__(v20, 4)) {
        goto LABEL_31;
      }
      if ((((&v21[*v1] - (char *)v16) | v20) & 0x8000000000000000) != 0 || (uint64_t)v1[1] < (uint64_t)v21) {
        goto LABEL_32;
      }
      if ((~(((*(_DWORD *)v16 & 0x7F7F7F7F ^ 0x22222222) + 2139062143) | *(_DWORD *)v16) & 0x80808080) != 0)
      {
        int v2 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        uint64_t v25 = v24;
        unint64_t v26 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v1[2], *v1, v1[1]);
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v22 = v2;
        *(void *)(v22 + 8) = v25;
        *(void *)(v22 + 16) = v26;
        *(void *)(v22 + 24) = v28;
        *(void *)(v22 + 32) = v30;
        *(void *)(v22 + 40) = 0;
        char v23 = 3;
        goto LABEL_29;
      }
      int64_t v16 = v15 + 6;
      v1[2] = (unint64_t)(v15 + 6);
    }
LABEL_11:
    unint64_t v15 = v16;
    if (v16 >= v17) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter()()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if ((unint64_t)v1 >= v2)
  {
LABEL_6:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v4 = 1;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0;
    *(unsigned char *)(v4 + 48) = 12;
    swift_willThrow();
    LOBYTE(v3) = 0;
  }
  else
  {
    while (1)
    {
      unsigned int v3 = *v1;
      if (v3 == 34 || v3 == 92 || v3 < 0x20) {
        break;
      }
      *(void *)(v0 + 16) = ++v1;
      if ((unint64_t)v1 >= v2) {
        goto LABEL_6;
      }
    }
  }
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanValue()()
{
  uint64_t v1 = (unsigned char *)v0[3];
  unint64_t v2 = v0[4];
  if ((unint64_t)v1 >= v2)
  {
LABEL_7:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v5 = 1;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(void *)(v5 + 40) = 0;
    char v6 = 12;
LABEL_8:
    *(unsigned char *)(v5 + 48) = v6;
    swift_willThrow();
  }
  else
  {
    while (1)
    {
      uint64_t v3 = *v1;
      if (v3 >= 0x40 || ((1 << v3) & 0x100002600) == 0) {
        break;
      }
      v0[3] = ++v1;
      if ((unint64_t)v1 >= v2) {
        goto LABEL_7;
      }
    }
    switch(*v1)
    {
      case '[':
        JSONScanner.scanArray()();
        return;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_14;
      case 'f':
      case 't':
        JSONScanner.scanBool()();
        return;
      case 'n':
        JSONScanner.scanNull()();
        return;
      case '{':
        JSONScanner.scanObject()();
        return;
      default:
        if (v3 == 34)
        {
          JSONScanner.scanString()();
          return;
        }
        if (v3 == 45) {
          goto LABEL_18;
        }
LABEL_14:
        if ((v3 - 58) >= 0xFFFFFFF6)
        {
LABEL_18:
          JSONScanner.scanNumber()();
          return;
        }
        if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
        {
          unint64_t v7 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
          uint64_t v9 = v8;
          uint64_t v11 = v10;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = v3;
          *(void *)(v5 + 24) = v7;
          *(void *)(v5 + 32) = v9;
          *(void *)(v5 + 40) = v11;
          char v6 = 1;
          goto LABEL_8;
        }
        __break(1u);
        break;
    }
  }
}

int64_t JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4)
{
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(a2, a3, a4);
  char v6 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  int64_t v9 = v8 + 1;
  if (v8 >= v7 >> 1) {
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  void v6[2] = v9;
  v6[v8 + 4] = a1;
  int64_t v10 = v8 + 3;
  if (__OFADD__(v8, 3))
  {
    __break(1u);
  }
  else
  {
    unint64_t v11 = v6[3];
    unint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) >= v10)
    {
      unint64_t v13 = v8 + 1;
      goto LABEL_8;
    }
  }
  if (v9 <= v10) {
    int64_t v18 = v8 + 3;
  }
  else {
    int64_t v18 = v8 + 1;
  }
  char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, v18, 1, v6);
  unint64_t v13 = v6[2];
  unint64_t v11 = v6[3];
  unint64_t v12 = v11 >> 1;
LABEL_8:
  unint64_t v14 = v13 + 1;
  if (v12 <= v13) {
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v13 + 1, 1, v6);
  }
  void v6[2] = v14;
  v6[v13 + 4] = 0;
  unint64_t v15 = v6[3];
  int64_t v16 = v13 + 2;
  if (v16 > (uint64_t)(v15 >> 1)) {
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16, 1, v6);
  }
  void v6[2] = v16;
  v6[v14 + 4] = 0;
  *uint64_t v4 = v6;
  return v9;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 40 * a1 + 32);
    size_t v6 = 40 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char **_platform_shims_get_environ()
{
  return *_NSGetEnviron();
}

BOOL static Date.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

atomic_uint *_timerRetain(atomic_uint *result)
{
  return result;
}

uint64_t getEnumTagSinglePayload for IndexPath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t type metadata instantiation function for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

BOOL NSIsEmptyRect(NSRect aRect)
{
  return aRect.size.height <= 0.0 || aRect.size.width <= 0.0;
}

Foundation::Date __swiftcall Date.addingTimeInterval(_:)(Swift::Double a1)
{
  result._time = *v2 + a1;
  *uint64_t v1 = result._time;
  return result;
}

id *_NSKeyValueCreateImplicitObservationInfo(NSObject *a1, void *a2, uint64_t a3, void *a4, objc_class *a5, objc_class **a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  obuint64_t j = a2;
  uint64_t v10 = [a2 countByEnumeratingWithState:&v25 objects:v24 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)v26;
    do
    {
      uint64_t v14 = 0;
      unint64_t v15 = (NSKeyValueObservationInfo *)v12;
      do
      {
        if (*(void *)v26 != v13) {
          objc_enumerationMutation(obj);
        }
        int64_t v16 = (NSKeyValueProperty *)NSKeyValuePropertyForIsaAndKeyPath(a5, *(void **)(*((void *)&v25 + 1) + 8 * v14));
        uint64_t v23 = 0;
        char v22 = 0;
        unint64_t v12 = _NSKeyValueObservationInfoCreateByAdding(v15, a1, v16, a3, a4, 0, &v22, &v23);

        if (a6)
        {
          uint64_t v17 = [(NSKeyValueProperty *)v16 isaForAutonotifying];
          if (v17) {
            a5 = (objc_class *)v17;
          }
        }
        ++v14;
        unint64_t v15 = (NSKeyValueObservationInfo *)v12;
      }
      while (v11 != v14);
      uint64_t v11 = [obj countByEnumeratingWithState:&v25 objects:v24 count:16];
    }
    while (v11);
  }
  else
  {
    unint64_t v12 = 0;
  }
  if (a6) {
    *a6 = a5;
  }
  os_unfair_recursive_lock_unlock();
  return v12;
}

void *NSKeyValuePropertyForIsaAndKeyPathInner(objc_class *a1, void *a2, const __CFSet *a3)
{
  void value[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = _NSKeyValueContainerClassForIsa(a1);
  value[0] = 0;
  value[1] = v5;
  value[2] = a2;
  size_t v6 = (void *)CFSetGetValue(a3, value);
  if (!v6 && (!NSKeyValueProperties || (size_t v6 = (void *)CFSetGetValue((CFSetRef)NSKeyValueProperties, value)) == 0))
  {
    if ([a2 characterAtIndex:0] == 64)
    {
      id v7 = [[NSKeyValueComputedProperty alloc] _initWithContainerClass:v5 keyPath:a2 propertiesBeingInitialized:a3];
    }
    else
    {
      uint64_t v8 = [a2 rangeOfString:@"."];
      if (v9) {
        id v7 = [[NSKeyValueNestedProperty alloc] _initWithContainerClass:v5 keyPath:a2 firstDotIndex:v8 propertiesBeingInitialized:a3];
      }
      else {
        id v7 = [[NSKeyValueUnnestedProperty alloc] _initWithContainerClass:v5 key:a2 propertiesBeingInitialized:a3];
      }
    }
    size_t v6 = v7;
    uint64_t v10 = (__CFSet *)NSKeyValueProperties;
    if (!NSKeyValueProperties)
    {
      long long v11 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
      *(_OWORD *)&v13.CFIndex version = *MEMORY[0x1E4F1D548];
      *(_OWORD *)&v13.release = v11;
      v13.equal = (CFSetEqualCallBack)NSKeyValuePropertyIsEqual;
      v13.hash = (CFSetHashCallBack)NSKeyValuePropertyHash;
      uint64_t v10 = CFSetCreateMutable(0, 0, &v13);
      NSKeyValueProperties = (uint64_t)v10;
    }
    CFSetAddValue(v10, v6);
    CFSetRemoveValue(a3, v6);
  }
  return v6;
}

void *NSKeyValuePropertyForIsaAndKeyPath(objc_class *a1, void *a2)
{
  void value[3] = *MEMORY[0x1E4F143B8];
  value[0] = 0;
  value[1] = _NSKeyValueContainerClassForIsa(a1);
  value[2] = a2;
  if (!NSKeyValueProperties || (int v4 = (void *)CFSetGetValue((CFSetRef)NSKeyValueProperties, value)) == 0)
  {
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v8.CFIndex version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v8.release = v5;
    v8.equal = (CFSetEqualCallBack)NSKeyValuePropertyIsEqual;
    v8.hash = (CFSetHashCallBack)NSKeyValuePropertyHash;
    CFSetRef v6 = CFSetCreateMutable(0, 0, &v8);
    int v4 = NSKeyValuePropertyForIsaAndKeyPathInner(a1, a2, v6);
    CFRelease(v6);
  }
  return v4;
}

void sub_181801504(_Unwind_Exception *a1)
{
}

uint64_t _NSKeyValueContainerClassForIsa(objc_class *a1)
{
  if ((objc_class *)_MergedGlobals_99 != a1)
  {
    unint64_t v2 = _NSKVONotifyingOriginalClassForIsa(a1);
    if (qword_1EB1ED248)
    {
      Value = (NSKeyValueContainerClass *)CFDictionaryGetValue((CFDictionaryRef)qword_1EB1ED248, v2);
      if (Value)
      {
LABEL_8:
        _MergedGlobals_99 = (uint64_t)a1;
        qword_1EB1ED240 = (uint64_t)Value;
        return (uint64_t)Value;
      }
    }
    else
    {
      qword_1EB1ED248 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
    }
    Value = [[NSKeyValueContainerClass alloc] initWithOriginalClass:v2];
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1EB1ED248, v2, Value);

    goto LABEL_8;
  }
  return qword_1EB1ED240;
}

void sub_181801868(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    unint64_t v12 = _NSKeyValueRetainedObservationInfoForObject(v9, *(void *)(v10 + 8));
    _NSKeyValueReplaceObservationInfoForObject(v9, *(void *)(v10 + 8), v12, v11);
    if (v12) {

    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_181801918(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x181801810);
  }
  _Unwind_Resume(a1);
}

void sub_181801934(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18180193CLL);
  }
  _Unwind_Resume(a1);
}

void sub_181801944(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x181801950);
}

id *_NSKeyValueObservationInfoCreateByAdding(NSKeyValueObservationInfo *a1, NSObject *a2, NSKeyValueProperty *a3, uint64_t a4, void *a5, NSObject *a6, unsigned char *a7, void *a8)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock_with_options();
  if (!qword_1EB1ED258)
  {
    unint64_t v15 = [[NSPointerFunctions alloc] initWithOptions:5];
    [(NSPointerFunctions *)v15 setHashFunction:NSKeyValueShareableObservationInfoNSHTHash];
    [(NSPointerFunctions *)v15 setIsEqualFunction:NSKeyValueShareableObservationInfoNSHTIsEqual];
    qword_1EB1ED258 = [[NSHashTable alloc] initWithPointerFunctions:v15 capacity:0];
  }
  if (!qword_1EB1ED260) {
    qword_1EB1ED260 = self;
  }
  int64_t v16 = (NSKeyValueShareableObservationInfoKey *)qword_1EB1ED268;
  if (!qword_1EB1ED268)
  {
    int64_t v16 = objc_alloc_init(NSKeyValueShareableObservationInfoKey);
    qword_1EB1ED268 = (uint64_t)v16;
  }
  v16->_addingNotRemoving = 1;
  v16->_baseObservationInfo = a1;
  v16->_additionObserver = a2;
  v16->_additionProperty = a3;
  v16->_additionOptions = a4 & 0xFFFFFFFFFFFFFFFBLL;
  v16->_additionContext = a5;
  v16->_additionOriginalObservable = a6;
  uint64_t v17 = (id *)objc_msgSend((id)qword_1EB1ED258, "member:");
  uint64_t v18 = qword_1EB1ED268;
  *(void *)(qword_1EB1ED268 + 56) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  if (v17)
  {
    int v19 = v17;
    unint64_t v20 = v17;
    *a7 = 1;
    *a8 = [v19[1] lastObject];
  }
  else
  {
    uint64_t v21 = (NSHashTable *)qword_1EB1ED270;
    if (!qword_1EB1ED270)
    {
      uint64_t v21 = +[NSHashTable weakObjectsHashTable];
      qword_1EB1ED270 = (uint64_t)v21;
    }
    char v22 = (NSKeyValueShareableObservanceKey *)qword_1EB1ED278;
    if (!qword_1EB1ED278)
    {
      char v22 = objc_alloc_init(NSKeyValueShareableObservanceKey);
      qword_1EB1ED278 = (uint64_t)v22;
      uint64_t v21 = (NSHashTable *)qword_1EB1ED270;
    }
    v22->super._observer = a2;
    v22->super._property = a3;
    char v23 = *((unsigned char *)&v22->super + 40) & 0xF0 | a4 & 0xB | 0x20;
    if (!a6) {
      char v23 = *((unsigned char *)&v22->super + 40) & 0xD0 | a4 & 0xB;
    }
    *((unsigned char *)&v22->super + 40) = v23;
    if (a6) {
      uint64_t v24 = a6;
    }
    else {
      uint64_t v24 = a2;
    }
    v22->super._context = a5;
    v22->super._originalObservableOrUnownedObserver.originalObservable = v24;
    long long v25 = -[NSHashTable member:](v21, "member:");
    v32[0] = v25;
    uint64_t v26 = qword_1EB1ED278;
    *(void *)(qword_1EB1ED278 + 32) = 0;
    *(void *)(v26 + 8) = 0;
    if (v25)
    {
      long long v27 = v25;
      long long v28 = v25;
    }
    else
    {
      long long v27 = [[NSKeyValueObservance alloc] _initWithObserver:a2 property:a3 options:a4 context:a5 originalObservable:a6];
      v32[0] = v27;
      if ((v27[40] & 0x40) != 0) {
        [(id)qword_1EB1ED270 addObject:v27];
      }
    }
    if (a1)
    {
      int v19 = [(NSKeyValueObservationInfo *)a1 _copyByAddingObservance:v27];
    }
    else
    {
      int v19 = [[NSKeyValueObservationInfo alloc] _initWithObservances:v32 count:1 hashValue:0];
      long long v27 = (unsigned char *)v32[0];
    }

    if (*((unsigned char *)v19 + 24))
    {
      uint64_t v29 = (void *)MEMORY[0x185308110]();
      [(id)qword_1EB1ED258 addObject:v19];
    }
    *a7 = 0;
    *a8 = v32[0];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_100);
  return v19;
}

void *__cdecl NSHashInsertIfAbsent(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void * _Nullable NSHashInsertIfAbsent(NSHashTable * _Nonnull, const void * _Nullable)");
  }
  if (!pointer) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"*** NSHashInsertIfAbsent(): attempt to insert NULL pointer" userInfo:0]);
  }
  int v4 = [(NSHashTable *)table getItem:pointer];
  if (!v4) {
    [(NSHashTable *)table addObject:pointer];
  }
  return v4;
}

void NSKVOClass(void *a1, const char *a2)
{
  Class Class = object_getClass(a1);
  if (Class == _NSKVONotifyingOriginalClassForIsa(Class))
  {
    class_getInstanceMethod(Class, a2);
    method_invoke();
  }
  else
  {
    objc_opt_class();
  }
}

objc_class *_NSKVONotifyingOriginalClassForIsa(objc_class *a1)
{
  char v1 = a1;
  if ((char *)class_getMethodImplementation(a1, sel__isKVOA) == (char *)NSKVOIsAutonotifying) {
    return *(objc_class **)object_getIndexedIvars(v1);
  }
  return v1;
}

void _NSKeyValueReplaceObservationInfoForObject(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    id v7 = a4;
  }
  uint64_t v8 = _CFGetTSD();
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      while (*(void **)v9 != a1)
      {
        uint64_t v9 = *(void *)(v9 + 16);
        if (!v9) {
          goto LABEL_9;
        }
      }

      *(void *)(v9 + 8) = a4;
    }
  }
LABEL_9:
  if (!a3 && a4) {
    [a1 _willBeginKeyValueObserving];
  }
  os_unfair_lock_lock(&NSKeyValueObservationInfoLock);
  os_unfair_lock_assert_owner(&NSKeyValueObservationInfoLock);
  uint64_t v10 = [a1 observationInfo];
  if (a2) {
    (*(void (**)(void *, char *, void *))(a2 + 24))(a1, sel_setObservationInfo_, a4);
  }
  else {
    [a1 setObservationInfo:a4];
  }
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  long long v11 = a3;
  if (a3 && !a4)
  {
    [a1 _didEndKeyValueObserving];
    long long v11 = a3;
  }
  if ((void *)v10 == v11)
  {
  }
}

BOOL _NSKVOUsesBaseClassObservationInfoImplementationForClass(Class cls)
{
  if (qword_1EB1ED298 != -1) {
    dispatch_once(&qword_1EB1ED298, &__block_literal_global_17);
  }
  return class_getMethodImplementation(cls, sel_observationInfo) == (IMP)_MergedGlobals_101
      && class_getMethodImplementation(cls, sel_setObservationInfo_) == (IMP)qword_1EB1ED290;
}

void sub_1818027F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_181802B24(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_181802CBC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSFileSystemRepresentationString(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)[objc_allocWithZone((Class)NSString) initWithBytes:a1 length:a2 encoding:4];

  return v2;
}

uint64_t normalizedPath(void *a1)
{
  unint64_t v2 = @"/private/preboot/Cryptexes/OS/";
  if (([a1 hasPrefix:@"/private/preboot/Cryptexes/OS/"] & 1) == 0)
  {
    unint64_t v2 = @"/System/Cryptexes/OS/";
    if (![a1 hasPrefix:@"/System/Cryptexes/OS/"]) {
      return (uint64_t)a1;
    }
  }
  uint64_t v3 = [(__CFString *)v2 length] - 1;

  return [a1 substringFromIndex:v3];
}

void sub_181803D44(_Unwind_Exception *a1)
{
}

void sub_1818040F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 104), 8);
  _Unwind_Resume(a1);
}

void *_NSKeyValueContainerClassGetNotifyingInfo(uint64_t a1)
{
  Foundation::Date result = *(void **)(a1 + 40);
  if (!result)
  {
    if (class_isMetaClass(*(Class *)(a1 + 8)))
    {
      return *(void **)(a1 + 40);
    }
    else
    {
      Foundation::Date result = _NSKVONotifyingCreateInfoWithOriginalClass(*(Class *)(a1 + 8));
      *(void *)(a1 + 40) = result;
    }
  }
  return result;
}

id @objc NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)(void *a1, int a2, void *a3, void *aBlock)
{
  CFSetRef v6 = _Block_copy(aBlock);
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v9 = v8;
  _Block_copy(v6);
  id v10 = a1;
  specialized NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)((uint64_t)v7, v9, v10, (uint64_t)v6);
  _Block_release(v6);
  _Block_release(v6);

  swift_bridgeObjectRelease();
  long long v11 = (void *)_NativeSet.bridged()();

  return v11;
}

uint64_t specialized NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v39[0] = a3;
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v8 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyValueObservingCustomization.Type);
  if (swift_dynamicCast() && specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(a1, a2))
  {
    uint64_t v9 = (*(uint64_t (**)(void))(v33 + 8))();
    if ((v9 & 0xC000000000000001) != 0)
    {
      __CocoaSet.count.getter();
      uint64_t v38 = Set.init(minimumCapacity:)();
      __CocoaSet.makeIterator()();
      type metadata accessor for AnyKeyPath();
      Set.Iterator.init(_cocoa:)();
      uint64_t v9 = v39[0];
      uint64_t v10 = v39[1];
      long long v11 = v40;
      unint64_t v12 = v41;
    }
    else
    {
      uint64_t v38 = Set.init(minimumCapacity:)();
      uint64_t v21 = -1;
      uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
      uint64_t v23 = ~v22;
      uint64_t v10 = v9 + 56;
      uint64_t v24 = -v22;
      if (v24 < 64) {
        uint64_t v21 = ~(-1 << v24);
      }
      unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(v21 & *(void *)(v9 + 56));
      long long v11 = (unint64_t)v23;
    }
    uint64_t aBlock = v9;
    uint64_t v33 = v10;
    long long v34 = v11;
    uint64_t v35 = v12;
    uint64_t v36 = closure #1 in NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:);
    uint64_t v37 = 0;
    specialized LazyMapSequence.Iterator.next()();
    if (v26)
    {
      unint64_t v27 = v25;
      unint64_t v28 = v26;
      do
      {
        specialized Set._Variant.insert(_:)(&v31, v27, v28);
        swift_bridgeObjectRelease();
        specialized LazyMapSequence.Iterator.next()();
        unint64_t v27 = v29;
        unint64_t v28 = v30;
      }
      while (v30);
    }
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_release();
    return v38;
  }
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  id v14 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v15 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v15)
  {
    uint64_t v16 = v15;

    return v16;
  }
  objc_msgSend(v14, sel_count);
  v39[0] = Set.init(minimumCapacity:)();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v39;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = partial apply for specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v18 + 24) = v17;
  uint64_t v35 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v36 = (uint64_t (*)@<X0>(uint64_t *@<X8>))v18;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v33 = 1107296256;
  *(void *)&long long v34 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((void *)&v34 + 1) = &block_descriptor;
  int v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateObjectsUsingBlock_, v19);
  _Block_release(v19);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v19 & 1) == 0)
  {
    uint64_t v16 = v39[0];

    swift_release();
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t @objc NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)(void *a1, int a2, void *a3, void *aBlock)
{
  CFSetRef v6 = _Block_copy(aBlock);
  uint64_t v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v9 = v8;
  _Block_copy(v6);
  id v10 = a1;
  LOBYTE(v7) = specialized NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)(v7, v9, v10, (uint64_t)v6);
  _Block_release(v6);
  _Block_release(v6);

  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v8 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyValueObservingCustomization.Type);
  if (swift_dynamicCast() && specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(a1, a2))
  {
    char v9 = (*(uint64_t (**)(void))(v12 + 16))();
    swift_release();
  }
  else
  {
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
    swift_unknownObjectRelease();
  }
  return v9 & 1;
}

NSUInteger NSRoundDownToMultipleOfPageSize(NSUInteger bytes)
{
  return -*MEMORY[0x1E4F14B00] & bytes;
}

void protocol witness for SetAlgebra.init() in conformance NSKeyValueObservingOptions(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t NSKVOPendingNotificationStackIdentifierEqual(uint64_t a1, void *a2)
{
  if (*(void *)a1 != *a2) {
    return 0;
  }
  uint64_t result = [*(id *)(a1 + 8) isEqual:a2[1]];
  if (result) {
    return *(void *)(a1 + 16) == a2[2];
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v20 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  unint64_t v29 = (void *)MEMORY[0x1E4FBC860];
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v9 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v9 < v21)
    {
      unint64_t v10 = *(void *)(v20 + 8 * v9);
      ++v6;
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v21) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v20 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 2;
      if (v9 + 2 >= v21) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v20 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 3;
      if (v9 + 3 >= v21) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v20 + 8 * v6);
      if (v10)
      {
LABEL_22:
        unint64_t v4 = (v10 - 1) & v10;
        for (unint64_t i = __clz(__rbit64(v10)) + (v6 << 6); ; unint64_t i = v7 | (v6 << 6))
        {
          uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
          uint64_t v14 = *v12;
          uint64_t v13 = v12[1];
          outlined init with copy of Any(*(void *)(a1 + 56) + 32 * i, (uint64_t)v28);
          *(void *)&long long v27 = v14;
          *((void *)&v27 + 1) = v13;
          long long v25 = v27;
          v26[0] = v28[0];
          v26[1] = v28[1];
          long long v15 = v27;
          outlined init with copy of Any((uint64_t)v26, (uint64_t)v24);
          swift_bridgeObjectRetain();
          if (swift_dynamicCast())
          {
            swift_bridgeObjectRetain();
            outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for (key: String, value: Any));
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
              unint64_t v29 = (void *)result;
            }
            unint64_t v17 = v29[2];
            unint64_t v16 = v29[3];
            if (v17 >= v16 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v29);
              unint64_t v29 = (void *)result;
            }
            uint64_t v18 = v29;
            v29[2] = v17 + 1;
            int v19 = &v18[4 * v17];
            *((_OWORD *)v19 + 2) = v15;
            v19[6] = v22;
            v19[7] = v23;
            if (!v4) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t result = outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for (key: String, value: Any));
            if (!v4) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v7 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v11 = v9 + 4;
      if (v11 < v21)
      {
        unint64_t v10 = *(void *)(v20 + 8 * v11);
        if (v10)
        {
          int64_t v6 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v6 = v11 + 1;
          if (__OFADD__(v11, 1)) {
            goto LABEL_32;
          }
          if (v6 >= v21) {
            break;
          }
          unint64_t v10 = *(void *)(v20 + 8 * v6);
          ++v11;
          if (v10) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v29;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int64_t v31;

  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  unint64_t v31 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  unint64_t v29 = (void *)MEMORY[0x1E4FBC860];
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v6 << 6))
  {
    int64_t v9 = 16 * i;
    unint64_t v10 = (unint64_t *)(*(void *)(a1 + 48) + v9);
    int64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = (unint64_t *)(*(void *)(a1 + 56) + v9);
    uint64_t v14 = *v13;
    long long v15 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = closure #1 in static Locale.identifier(fromComponents:)(v11, v12, v14, v15);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v18)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        unint64_t v29 = (void *)result;
      }
      long long v27 = v29[2];
      unint64_t v26 = v29[3];
      if (v27 >= v26 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v29);
        unint64_t v29 = (void *)result;
      }
      v29[2] = v27 + 1;
      unint64_t v28 = &v29[4 * v27];
      v28[4] = v16;
      v28[5] = v18;
      v28[6] = v20;
      v28[7] = v22;
      if (v4) {
        goto LABEL_4;
      }
    }
    else if (v4)
    {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v23 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v23 >= v31) {
      goto LABEL_29;
    }
    uint64_t v24 = *(void *)(v30 + 8 * v23);
    ++v6;
    if (!v24)
    {
      int64_t v6 = v23 + 1;
      if (v23 + 1 >= v31) {
        goto LABEL_29;
      }
      uint64_t v24 = *(void *)(v30 + 8 * v6);
      if (!v24)
      {
        int64_t v6 = v23 + 2;
        if (v23 + 2 >= v31) {
          goto LABEL_29;
        }
        uint64_t v24 = *(void *)(v30 + 8 * v6);
        if (!v24)
        {
          int64_t v6 = v23 + 3;
          if (v23 + 3 >= v31) {
            goto LABEL_29;
          }
          uint64_t v24 = *(void *)(v30 + 8 * v6);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v4 = (v24 - 1) & v24;
  }
  long long v25 = v23 + 4;
  if (v25 >= v31)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v29;
  }
  uint64_t v24 = *(void *)(v30 + 8 * v25);
  if (v24)
  {
    int64_t v6 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v6 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v6 >= v31) {
      goto LABEL_29;
    }
    uint64_t v24 = *(void *)(v30 + 8 * v6);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  _OWORD v20[4];
  uint64_t v21;
  _OWORD v22[2];
  long long v23;
  long long v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v26 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v4 = -1;
  if (v3 < 64) {
    unint64_t v4 = ~(-1 << v3);
  }
  long long v5 = v4 & v2;
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  id v8 = 0;
  int64_t v9 = (void *)MEMORY[0x1E4FBC860];
  while (v5)
  {
    unint64_t v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    int64_t v11 = v10 | (v8 << 6);
LABEL_22:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v11, (uint64_t)v22);
    void v20[2] = v23;
    v20[3] = v24;
    int64_t v21 = v25;
    v20[0] = v22[0];
    v20[1] = v22[1];
    long long v15 = *((void *)&v23 + 1);
    unint64_t v16 = v24;
    outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v23 + 1), v24);
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
    if (v16 != 1)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        int64_t v9 = (void *)result;
      }
      uint64_t v18 = v9[2];
      unint64_t v17 = v9[3];
      if (v18 >= v17 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v9);
        int64_t v9 = (void *)result;
      }
      size_t v9[2] = v18 + 1;
      int v19 = &v9[2 * v18];
      v19[4] = v15;
      v19[5] = v16;
    }
  }
  uint64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v6) {
    goto LABEL_28;
  }
  uint64_t v13 = *(void *)(v26 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_21;
  }
  id v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_28;
  }
  uint64_t v13 = *(void *)(v26 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  id v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_28;
  }
  uint64_t v13 = *(void *)(v26 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  id v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_28;
  }
  uint64_t v13 = *(void *)(v26 + 8 * v8);
  if (v13)
  {
LABEL_21:
    long long v5 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_22;
  }
  uint64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_28:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v13 = *(void *)(v26 + 8 * v14);
  if (v13)
  {
    id v8 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    id v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_28;
    }
    uint64_t v13 = *(void *)(v26 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;

  uint64_t result = MEMORY[0x1E4FBC860];
  int64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      long long v5 = *(v4 - 1);
      int64_t v6 = *v4;
      unint64_t v7 = v5 == 0x467463656A627573 && v6 == 0xEB000000006D726FLL;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v5 == 0x6F467463656A626FLL ? (id v8 = v6 == 0xEA00000000006D72) : (id v8 = 0),
            v8
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0x6973736573736F70 && v6 == 0xEE006D726F466576
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0xD000000000000017 && v6 == 0x80000001823AC950
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0x766978656C666572 && v6 == 0xED00006D726F4665
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (swift_getKeyPath())
        {
          MEMORY[0x185302590]();
          if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 1;
      }
      v13[2] = v11;
      void v13[3] = 2 * (v15 >> 5);
      unint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v16 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4]) {
          memmove(v16, a4 + 4, 32 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t static _BPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >> 60 != 3)
  {
    if (a2 >> 60 == 9 && (a2 == 0x9000000000000008 || a2 == 0x9000000000000010))
    {
      uint64_t v9 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v10 = a3;
      int64_t v12 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t *v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      unint64_t v13 = *(void *)(v10 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v13);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v12, *MEMORY[0x1E4FBBA80], v9);
    }
    else
    {
      unint64_t v14 = *(void *)(a3 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v14);
      swift_release();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v15, a2, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v16);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  uint64_t v18 = v6;
  uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v71 = v19 + 64;
  uint64_t v20 = -1 << *(unsigned char *)(v19 + 32);
  if (-v20 < 64) {
    uint64_t v21 = ~(-1 << -(char)v20);
  }
  else {
    uint64_t v21 = -1;
  }
  uint64_t isUniquelyReferenced_nonNull_native = v21 & *(void *)(v19 + 64);
  unint64_t v23 = *(void *)(v19 + 16);
  uint64_t v80 = MEMORY[0x1E4FBC868];
  Swift::Int v24 = v23 >> 1;
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  Dictionary.reserveCapacity(_:)(v24);
  uint64_t v25 = a3;
  uint64_t v83 = v80;
  int64_t v70 = (unint64_t)(63 - v20) >> 6;
  swift_retain();
  int64_t v26 = 0;
  uint64_t v72 = v19;
  uint64_t v73 = a3;
  while (1)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = (isUniquelyReferenced_nonNull_native - 1) & isUniquelyReferenced_nonNull_native;
      unint64_t v28 = __clz(__rbit64(isUniquelyReferenced_nonNull_native)) | (v26 << 6);
      int64_t v29 = v26;
    }
    else
    {
      int64_t v29 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        goto LABEL_63;
      }
      if (v29 >= v70)
      {
LABEL_59:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v80 = v25;
        uint64_t v81 = v83;
        unint64_t v82 = a4;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        *(void *)&long long v77 = a5;
        *((void *)&v77 + 1) = &type metadata for _BPlistDecodingFormat;
        uint64_t v78 = a6;
        uint64_t v79 = &protocol witness table for _BPlistDecodingFormat;
        type metadata accessor for _PlistKeyedDecodingContainer();
        swift_getWitnessTable();
        KeyedDecodingContainer.init<A>(_:)();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      unint64_t v30 = *(void *)(v71 + 8 * v29);
      if (!v30)
      {
        int64_t v31 = v26 + 2;
        if (v26 + 2 >= v70) {
          goto LABEL_59;
        }
        unint64_t v30 = *(void *)(v71 + 8 * v31);
        if (!v30)
        {
          int64_t v31 = v26 + 3;
          if (v26 + 3 >= v70) {
            goto LABEL_59;
          }
          unint64_t v30 = *(void *)(v71 + 8 * v31);
          if (!v30)
          {
            int64_t v31 = v26 + 4;
            if (v26 + 4 >= v70) {
              goto LABEL_59;
            }
            unint64_t v30 = *(void *)(v71 + 8 * v31);
            if (!v30)
            {
              int64_t v31 = v26 + 5;
              if (v26 + 5 >= v70) {
                goto LABEL_59;
              }
              unint64_t v30 = *(void *)(v71 + 8 * v31);
              if (!v30)
              {
                int64_t v31 = v26 + 6;
                if (v26 + 6 >= v70) {
                  goto LABEL_59;
                }
                unint64_t v30 = *(void *)(v71 + 8 * v31);
                if (!v30)
                {
                  int64_t v31 = v26 + 7;
                  if (v26 + 7 >= v70) {
                    goto LABEL_59;
                  }
                  unint64_t v30 = *(void *)(v71 + 8 * v31);
                  if (!v30)
                  {
                    while (1)
                    {
                      int64_t v29 = v31 + 1;
                      if (__OFADD__(v31, 1)) {
                        goto LABEL_64;
                      }
                      if (v29 >= v70) {
                        goto LABEL_59;
                      }
                      unint64_t v30 = *(void *)(v71 + 8 * v29);
                      ++v31;
                      if (v30) {
                        goto LABEL_32;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        int64_t v29 = v31;
      }
LABEL_32:
      uint64_t v27 = (v30 - 1) & v30;
      unint64_t v28 = __clz(__rbit64(v30)) + (v29 << 6);
    }
    uint64_t v32 = 8 * v28;
    uint64_t v33 = *(void *)(*(void *)(v19 + 48) + v32);
    uint64_t v75 = *(void *)(*(void *)(v19 + 56) + v32);
    uint64_t v34 = v25;
    swift_retain();
    unint64_t v35 = BPlistMap.loadValue(at:)(v33);
    if (v18)
    {
      uint64_t v80 = v83;
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_58:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_release_n();
    }
    unint64_t v36 = v35;
    uint64_t v37 = swift_release();
    unint64_t v76 = v36;
    if (v36 >> 60 == 9)
    {
      uint64_t v80 = v83;
      if (((v36 + 0x6FFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF7) == 0)
      {
        uint64_t v62 = type metadata accessor for DecodingError();
        swift_allocError();
        int64_t v64 = v63;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *int64_t v64 = MEMORY[0x1E4FBB1A0];
        _CodingPathNode.path.getter(a4);
        *(void *)&long long v77 = 0;
        *((void *)&v77 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(50);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        unint64_t v65 = *(void (**)(void *, void, uint64_t))(*(void *)(v62 - 8) + 104);
        uint64_t v66 = v62;
        unint64_t v61 = v76;
        v65(v64, *MEMORY[0x1E4FBBA80], v66);
        swift_willThrow();
        goto LABEL_57;
      }
      goto LABEL_54;
    }
    uint64_t v74 = v27;
    uint64_t v38 = *(void *)(v34 + 24);
    if (v36 >> 60)
    {
      uint64_t v80 = v83;
LABEL_54:
      swift_retain();
      _CodingPathNode.path.getter(a4);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E4FBB1A0], v36, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v57);
      swift_bridgeObjectRelease();
LABEL_56:
      swift_willThrow();
      swift_release();
      unint64_t v61 = v76;
LABEL_57:
      outlined consume of BPlistMap.Value(v61);
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      goto LABEL_58;
    }
    MEMORY[0x1F4188790](v37);
    uint64_t v39 = *(void *)(v38 + 64);
    MEMORY[0x1F4188790](v40);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v39 + 40));
    closure #1 in BPlistMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v39 + 16), &v77);
    os_unfair_lock_unlock((os_unfair_lock_t)(v39 + 40));
    swift_release();
    uint64_t v41 = *((void *)&v77 + 1);
    if (!*((void *)&v77 + 1))
    {
      uint64_t v80 = v83;
      uint64_t v58 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v60 = v59;
      swift_retain();
      _CodingPathNode.path.getter(a4);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v58 - 8) + 104))(v60, *MEMORY[0x1E4FBBA78], v58);
      swift_release();
      goto LABEL_56;
    }
    uint64_t v42 = v77;
    swift_release();
    uint64_t v43 = v83;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v77 = v43;
    unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
    uint64_t v46 = *(void *)(v43 + 16);
    BOOL v47 = (v44 & 1) == 0;
    uint64_t v48 = v46 + v47;
    if (__OFADD__(v46, v47)) {
      break;
    }
    char v49 = v44;
    if (*(void *)(v43 + 24) >= v48)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, isUniquelyReferenced_nonNull_native);
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
      if ((v49 & 1) != (v51 & 1)) {
        goto LABEL_65;
      }
      unint64_t v45 = v50;
    }
    uint64_t v52 = (void *)v77;
    uint64_t v83 = v77;
    if (v49)
    {
      *(void *)(*(void *)(v77 + 56) + 8 * v45) = v75;
    }
    else
    {
      *(void *)(v77 + 8 * (v45 >> 6) + 64) |= 1 << v45;
      unint64_t v53 = (uint64_t *)(v52[6] + 16 * v45);
      *unint64_t v53 = v42;
      v53[1] = v41;
      *(void *)(v52[7] + 8 * v45) = v75;
      uint64_t v54 = v52[2];
      BOOL v55 = __OFADD__(v54, 1);
      uint64_t v56 = v54 + 1;
      if (v55) {
        goto LABEL_62;
      }
      v52[2] = v56;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of BPlistMap.Value(v76);
    int64_t v26 = v29;
    uint64_t isUniquelyReferenced_nonNull_native = v74;
    uint64_t v19 = v72;
    uint64_t v25 = v73;
    uint64_t v18 = 0;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)isUniquelyReferenced_nonNull_native);
  swift_release();
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t outlined consume of BPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t BPlistMap.loadValue(at:)(uint64_t a1)
{
  uint64_t v6 = *(void *)(v1 + 64);
  unint64_t v7 = v6 + 40;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 40));
  int64_t v8 = *(void *)(v1 + 56);
  if (specialized Array._getCount()(v8) <= a1)
  {
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    long long v19 = xmmword_182111F10;
LABEL_9:
    *uint64_t v18 = v19;
    goto LABEL_10;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a1, 1, v8);
  uint64_t v10 = *(void *)(v8 + 8 * a1 + 32);
  if (v10 < 0)
  {
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    long long v19 = xmmword_182111F30;
    goto LABEL_9;
  }
  unint64_t v11 = *(void *)(v6 + 16);
  uint64_t v288 = *(void *)(v6 + 24);
  unint64_t v289 = v11 + v288;
  unint64_t v292 = v11;
  uint64_t v12 = v11 + v10;
  if (v288 - v10 < 1)
  {
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    uint64_t v283 = v9;
    unint64_t v142 = v7 + v9;
    uint64_t v143 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7 + v9 - 8) << 56;
    unint64_t v144 = v143 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v142 - 7) << 48);
    unint64_t v145 = v144 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v142 - 6) << 40);
    unint64_t v146 = v145 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v142 - 5) << 32);
    unint64_t v147 = v146 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v142 - 4) << 24);
    unint64_t v148 = v147 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v142 - 3) << 16);
    unint64_t v149 = v148 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v142 - 2) << 8);
    unint64_t result = v149 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v142 - 1);
LABEL_23:
    v7 += v283;
    unint64_t v20 = v3;
LABEL_86:
    if (!is_mul_ok(result, v8)) {
      goto LABEL_89;
    }
    if (((result * v8) & 0x8000000000000000) == 0)
    {
      if ((uint64_t)(v20 - v7) < (uint64_t)(result * v8))
      {
LABEL_89:
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v71 = xmmword_182111F40;
LABEL_90:
        *int64_t v70 = v71;
        swift_willThrow();
        unint64_t v7 = v287;
        goto LABEL_11;
      }
      unint64_t v285 = result;
      uint64_t v293 = specialized Array.init()();
      if (v285 >= 0x40000) {
        int64_t v85 = 0x40000;
      }
      else {
        int64_t v85 = v285;
      }
      unint64_t result = (unint64_t)specialized Array.reserveCapacity(_:)(v85);
      unint64_t v86 = v285;
      if ((v285 & 0x8000000000000000) != 0)
      {
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
LABEL_317:
        __break(1u);
LABEL_318:
        __break(1u);
LABEL_319:
        __break(1u);
LABEL_320:
        __break(1u);
LABEL_321:
        __break(1u);
LABEL_322:
        __break(1u);
LABEL_323:
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
LABEL_328:
        __break(1u);
LABEL_329:
        __break(1u);
LABEL_330:
        __break(1u);
        goto LABEL_331;
      }
      if (!v285)
      {
LABEL_132:
        BOOL v101 = specialized == infix<A>(_:_:)(v4, 10);
        uint64_t v102 = swift_allocObject();
        *(void *)(v102 + 16) = v293;
        uint64_t v103 = 0x2000000000000000;
        if (v101) {
          uint64_t v103 = 0x1000000000000000;
        }
        uint64_t v2 = v103 | v102;
        unint64_t v7 = v287;
        goto LABEL_11;
      }
      uint64_t v87 = 0;
      while (2)
      {
        if (v87 == v86)
        {
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
        }
        else
        {
          unint64_t v3 = v8;
          switch((int)v8)
          {
            case 0:
              goto LABEL_129;
            case 1:
              unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
              if ((result & 1) == 0) {
                goto LABEL_303;
              }
              if (v288 < 0) {
                goto LABEL_304;
              }
              unint64_t v3 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7);
              goto LABEL_129;
            case 2:
              unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
              if ((result & 1) == 0) {
                goto LABEL_305;
              }
              if (v288 < 0) {
                goto LABEL_306;
              }
              unsigned __int8 v91 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7);
              unint64_t v3 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7 + 1) | ((unint64_t)v91 << 8);
              goto LABEL_129;
            case 3:
            case 5:
            case 6:
            case 7:
              unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
              if ((result & 1) == 0) {
                goto LABEL_289;
              }
              if (v288 < 0) {
                goto LABEL_290;
              }
              unint64_t v88 = 0;
              uint64_t v89 = 0;
              break;
            case 4:
              unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
              if ((result & 1) == 0) {
                goto LABEL_307;
              }
              if (v288 < 0) {
                goto LABEL_308;
              }
              unint64_t v92 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7) << 24;
              unint64_t v93 = v92 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7 + 1) << 16);
              unint64_t v94 = v93 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7 + 2) << 8);
              unint64_t v3 = v94 & 0xFFFFFFFFFFFFFF00 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7 + 3);
              goto LABEL_129;
            case 8:
              unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
              if ((result & 1) == 0) {
                goto LABEL_309;
              }
              uint64_t v90 = v7;
              if (v288 < 0) {
                goto LABEL_310;
              }
              goto LABEL_127;
            default:
              unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
              if ((result & 1) == 0) {
                goto LABEL_301;
              }
              if (v288 < 0) {
                goto LABEL_302;
              }
              uint64_t v90 = v7 + v8 - 8;
LABEL_127:
              uint64_t v95 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90) << 56;
              unint64_t v96 = v95 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 1) << 48);
              unint64_t v97 = v96 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 2) << 40);
              unint64_t v98 = v97 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 3) << 32);
              unint64_t v99 = v98 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 4) << 24);
              unint64_t v100 = v99 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 5) << 16);
              uint64_t v2 = v100 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 6) << 8);
              unint64_t v3 = v2 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 7);
              goto LABEL_128;
          }
          do
          {
            if (v8 == v89)
            {
              __break(1u);
              goto LABEL_190;
            }
            uint64_t v2 = v89 + 1;
            unint64_t v3 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v7 + v89) | (v88 << 8);
            unint64_t v88 = v3;
            uint64_t v89 = v2;
          }
          while (v8 != v2);
LABEL_128:
          if ((v3 & 0x8000000000000000) != 0)
          {
LABEL_279:
            lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
            swift_allocError();
            _OWORD *v275 = xmmword_182111F30;
            swift_willThrow();
            swift_bridgeObjectRelease();
            unint64_t v7 = v287;
            goto LABEL_11;
          }
LABEL_129:
          specialized Array.append(_:)(v3);
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_287;
          }
          if ((v288 & 0x8000000000000000) == 0)
          {
            ++v87;
            v7 += v8;
            unint64_t v86 = v285;
            if (v87 != v285) {
              continue;
            }
            goto LABEL_132;
          }
        }
        break;
      }
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
    }
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
LABEL_310:
    __break(1u);
LABEL_311:
    __break(1u);
LABEL_312:
    __break(1u);
    goto LABEL_313;
  }
  int64_t v8 = *(unsigned __int8 *)(v1 + 23);
  uint64_t v13 = *(void *)(v1 + 40);
  uint64_t v14 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
  if (v13 < 0) {
    goto LABEL_191;
  }
  int v15 = v14;
  unint64_t result = specialized BPlistTypeMarker.init(_:)(v14);
  if (result == 13)
  {
LABEL_6:
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    *unint64_t v17 = 0;
    v17[1] = 0;
LABEL_10:
    swift_willThrow();
LABEL_11:
    os_unfair_lock_unlock((os_unfair_lock_t)v7);
    swift_release();
    return v2;
  }
  char v4 = result;
  unint64_t v20 = v292 + v13;
  uint64_t v2 = 0x9000000000000008;
  switch((int)v292)
  {
    case 1:
      uint64_t v26 = swift_allocObject();
      *(unsigned char *)(v26 + 16) = 0;
      goto LABEL_26;
    case 2:
      uint64_t v26 = swift_allocObject();
      *(unsigned char *)(v26 + 16) = 1;
LABEL_26:
      uint64_t v2 = v26 | 0x6000000000000000;
      goto LABEL_11;
    case 3:
      unint64_t v27 = v6 + 40;
      if ((v15 & 0xFu) > 4)
      {
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        *unint64_t v28 = 0;
        v28[1] = 0;
        goto LABEL_168;
      }
      uint64_t v73 = 1 << (v15 & 0xF);
      uint64_t v2 = v12 + 1;
      if ((uint64_t)(v20 - (v12 + 1)) < v73)
      {
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v75 = xmmword_182111F30;
        goto LABEL_167;
      }
      switch((int)v73)
      {
        case 1:
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_356;
          }
          if (v288 < 0) {
            goto LABEL_357;
          }
          unint64_t v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
          break;
        case 2:
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_358;
          }
          if (v288 < 0) {
            goto LABEL_359;
          }
          unsigned __int8 v131 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
          unint64_t v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) | ((unint64_t)v131 << 8);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_336;
          }
          if (v288 < 0) {
            goto LABEL_337;
          }
          unint64_t v104 = 0;
          do
          {
            unint64_t v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v2++) | (v104 << 8);
            unint64_t v104 = v105;
            --v73;
          }
          while (v73);
          break;
        case 4:
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_360;
          }
          if (v288 < 0) {
            goto LABEL_361;
          }
          unint64_t v132 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1) << 24;
          unint64_t v133 = v132 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) << 16);
          unint64_t v134 = v133 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 8);
          unint64_t v105 = v134 & 0xFFFFFFFFFFFFFF00 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4);
          break;
        case 8:
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_362;
          }
          if (v288 < 0) {
            goto LABEL_363;
          }
          uint64_t v135 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1) << 56;
          unint64_t v136 = v135 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) << 48);
          unint64_t v137 = v136 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 40);
          unint64_t v138 = v137 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 32);
          unint64_t v139 = v138 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 24);
          unint64_t v140 = v139 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 16);
          unint64_t v141 = v140 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 8);
          unint64_t v105 = v141 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8);
          break;
        default:
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_354;
          }
          if (v288 < 0) {
            goto LABEL_355;
          }
          uint64_t v123 = v73 + v2 - 8;
          uint64_t v124 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123) << 56;
          unint64_t v125 = v124 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123 + 1) << 48);
          unint64_t v126 = v125 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123 + 2) << 40);
          unint64_t v127 = v126 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123 + 3) << 32);
          unint64_t v128 = v127 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123 + 4) << 24);
          unint64_t v129 = v128 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123 + 5) << 16);
          unint64_t v130 = v129 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123 + 6) << 8);
          unint64_t v105 = v130 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123 + 7);
          break;
      }
      uint64_t v106 = swift_allocObject();
      *(void *)(v106 + 16) = v105;
      *(unsigned char *)(v106 + 24) = (v15 & 0xFu) < 4;
      uint64_t v2 = v106 | 0x8000000000000000;
      unint64_t v7 = v6 + 40;
      goto LABEL_11;
    case 4:
      uint64_t v29 = v12 + 1;
      if ((v15 & 0xF) != 3)
      {
        if ((v15 & 0xF) != 2) {
          goto LABEL_6;
        }
        if ((uint64_t)(v20 - v29) >= 4)
        {
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
          if ((result & 1) == 0) {
            goto LABEL_329;
          }
          if ((v288 & 0x8000000000000000) == 0)
          {
            unint64_t v30 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1) << 24;
            unint64_t v31 = v30 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) << 16);
            unint64_t v32 = v31 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 8);
            unint64_t v33 = v32 & 0xFFFFFFFFFFFFFF00 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4);
            uint64_t v34 = swift_allocObject();
            uint64_t v35 = 4;
LABEL_144:
            *(void *)(v34 + 16) = v33;
            *(void *)(v34 + 24) = v35;
            uint64_t v2 = v34 | 0x7000000000000000;
            goto LABEL_11;
          }
          goto LABEL_330;
        }
LABEL_98:
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v19 = xmmword_182111F90;
        goto LABEL_9;
      }
      if ((uint64_t)(v20 - v29) < 8) {
        goto LABEL_98;
      }
      unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
      if (result)
      {
        if ((v288 & 0x8000000000000000) == 0)
        {
          uint64_t v107 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1) << 56;
          unint64_t v108 = v107 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) << 48);
          unint64_t v109 = v108 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 40);
          unint64_t v110 = v109 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 32);
          unint64_t v111 = v110 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 24);
          unint64_t v112 = v111 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 16);
          unint64_t v113 = v112 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 8);
          unint64_t v33 = v113 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8);
          uint64_t v34 = swift_allocObject();
          uint64_t v35 = 8;
          goto LABEL_144;
        }
        goto LABEL_332;
      }
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      __break(1u);
LABEL_335:
      __break(1u);
LABEL_336:
      __break(1u);
LABEL_337:
      __break(1u);
LABEL_338:
      __break(1u);
LABEL_339:
      __break(1u);
LABEL_340:
      __break(1u);
LABEL_341:
      __break(1u);
LABEL_342:
      __break(1u);
LABEL_343:
      __break(1u);
LABEL_344:
      __break(1u);
LABEL_345:
      __break(1u);
LABEL_346:
      __break(1u);
LABEL_347:
      __break(1u);
LABEL_348:
      __break(1u);
LABEL_349:
      __break(1u);
LABEL_350:
      __break(1u);
LABEL_351:
      __break(1u);
LABEL_352:
      __break(1u);
LABEL_353:
      __break(1u);
LABEL_354:
      __break(1u);
LABEL_355:
      __break(1u);
LABEL_356:
      __break(1u);
LABEL_357:
      __break(1u);
LABEL_358:
      __break(1u);
LABEL_359:
      __break(1u);
LABEL_360:
      __break(1u);
LABEL_361:
      __break(1u);
LABEL_362:
      __break(1u);
LABEL_363:
      __break(1u);
      return result;
    case 5:
      if ((uint64_t)(v20 - (v12 + 1)) < 8)
      {
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v19 = xmmword_182111F80;
        goto LABEL_9;
      }
      unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
      if ((result & 1) == 0) {
        goto LABEL_296;
      }
      if (v288 < 0) {
        goto LABEL_297;
      }
      uint64_t v76 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1) << 56;
      unint64_t v77 = v76 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) << 48);
      unint64_t v78 = v77 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 40);
      unint64_t v79 = v78 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 32);
      unint64_t v80 = v79 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 24);
      unint64_t v81 = v80 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 16);
      unint64_t v82 = v81 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 8);
      unint64_t v83 = v82 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8);
      uint64_t v84 = swift_allocObject();
      *(void *)(v84 + 16) = v83;
      uint64_t v2 = v84 | 0x5000000000000000;
      goto LABEL_11;
    case 6:
      unint64_t v27 = v6 + 40;
      unint64_t v36 = v15 & 0xF;
      unint64_t v37 = v12 + 1;
      if (v36 != 15) {
        goto LABEL_152;
      }
      if (v37 >= v20) {
        goto LABEL_156;
      }
      uint64_t v2 = v292 + v13;
      unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
      if ((result & 1) == 0) {
        goto LABEL_316;
      }
      if (v288 < 0) {
        goto LABEL_322;
      }
      unint64_t v7 = v6 + 40;
      uint64_t v38 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      char v39 = v38;
      char v40 = specialized BPlistTypeMarker.init(_:)(v38);
      if (v40 == 13
        || !specialized == infix<A>(_:_:)(v40, 3)
        || (uint64_t v41 = v12 + 2, v42 = 1 << (v39 & 0xF), v2 - (v12 + 2) < v42))
      {
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v19 = xmmword_182111F70;
        goto LABEL_9;
      }
      switch((int)v42)
      {
        case 1:
          uint64_t v290 = v12 + 2;
          unint64_t v36 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41);
          break;
        case 2:
          uint64_t v290 = v12 + 2;
          unsigned __int8 v188 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41);
          unint64_t v36 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) | ((unint64_t)v188 << 8);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          unint64_t v114 = 0;
          uint64_t v290 = v12 + 2;
          uint64_t v115 = v12 + 2;
          uint64_t v116 = v42;
          do
          {
            unint64_t v36 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v115++) | (v114 << 8);
            unint64_t v114 = v36;
            --v116;
          }
          while (v116);
          break;
        case 4:
          uint64_t v290 = v12 + 2;
          unint64_t v189 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41) << 24;
          unint64_t v190 = v189 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 16);
          unint64_t v191 = v190 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 8);
          unint64_t v36 = v191 & 0xFFFFFFFFFFFFFF00 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5);
          break;
        case 8:
          uint64_t v290 = v12 + 2;
          uint64_t v192 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41) << 56;
          unint64_t v193 = v192 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 48);
          unint64_t v194 = v193 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 40);
          unint64_t v195 = v194 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 32);
          unint64_t v196 = v195 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 24);
          unint64_t v197 = v196 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 16);
          unint64_t v198 = v197 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8) << 8);
          unint64_t v36 = v198 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 9);
          break;
        default:
          uint64_t v290 = v12 + 2;
          uint64_t v180 = v42 + v41;
          uint64_t v181 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v42 + v41 - 8) << 56;
          unint64_t v182 = v181 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v180 - 7) << 48);
          unint64_t v183 = v182 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v180 - 6) << 40);
          unint64_t v184 = v183 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v180 - 5) << 32);
          unint64_t v185 = v184 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v180 - 4) << 24);
          unint64_t v186 = v185 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v180 - 3) << 16);
          unint64_t v187 = v186 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v180 - 2) << 8);
          unint64_t v36 = v187 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v180 - 1);
          break;
      }
      unint64_t v37 = v290 + v42;
      unint64_t v20 = v2;
LABEL_152:
      if ((uint64_t)(v20 - v37) < 0 || v20 - v37 < v36)
      {
LABEL_156:
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v75 = xmmword_182111F70;
        goto LABEL_167;
      }
      unint64_t result = swift_allocObject();
      if ((v36 & 0x8000000000000000) != 0) {
        goto LABEL_314;
      }
      *(void *)(result + 16) = v37 - v292;
      *(void *)(result + 24) = v36;
      uint64_t v2 = result | 0x4000000000000000;
      unint64_t v7 = v6 + 40;
      goto LABEL_11;
    case 7:
      unint64_t v43 = v15 & 0xF;
      unint64_t v44 = v12 + 1;
      if (v43 != 15) {
        goto LABEL_56;
      }
      if (v44 >= v20) {
        goto LABEL_91;
      }
      unint64_t v284 = v292 + v13;
      unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
      if ((result & 1) == 0) {
        goto LABEL_317;
      }
      if (v288 < 0) {
        goto LABEL_318;
      }
      uint64_t v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      char v46 = v45;
      char v47 = specialized BPlistTypeMarker.init(_:)(v45);
      if (v47 == 13) {
        goto LABEL_91;
      }
      if (!specialized == infix<A>(_:_:)(v47, 3)) {
        goto LABEL_91;
      }
      uint64_t v48 = v12 + 2;
      uint64_t v49 = 1 << (v46 & 0xF);
      if ((uint64_t)(v284 - (v12 + 2)) < v49) {
        goto LABEL_91;
      }
      switch((int)v49)
      {
        case 1:
          uint64_t v281 = v12 + 2;
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v48);
          unint64_t v43 = result;
          break;
        case 2:
          uint64_t v281 = v12 + 2;
          unsigned __int8 v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v48);
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3);
          unint64_t v43 = result | ((unint64_t)v169 << 8);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          unint64_t v50 = 0;
          uint64_t v281 = v12 + 2;
          uint64_t v51 = v12 + 2;
          uint64_t v52 = v49;
          do
          {
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
            unint64_t v43 = result | (v50 << 8);
            ++v51;
            unint64_t v50 = v43;
            --v52;
          }
          while (v52);
          break;
        case 4:
          uint64_t v281 = v12 + 2;
          unint64_t v170 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v48) << 24;
          unint64_t v171 = v170 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 16);
          unint64_t v172 = v171 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 8);
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5);
          unint64_t v43 = v172 & 0xFFFFFFFFFFFFFF00 | result;
          break;
        case 8:
          uint64_t v281 = v12 + 2;
          uint64_t v173 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v48) << 56;
          unint64_t v174 = v173 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 48);
          unint64_t v175 = v174 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 40);
          unint64_t v176 = v175 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 32);
          unint64_t v177 = v176 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 24);
          unint64_t v178 = v177 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 16);
          unint64_t v179 = v178 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8) << 8);
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 9);
          unint64_t v43 = v179 | result;
          break;
        default:
          uint64_t v281 = v12 + 2;
          uint64_t v161 = v49 + v48;
          uint64_t v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49 + v48 - 8) << 56;
          unint64_t v163 = v162 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v161 - 7) << 48);
          unint64_t v164 = v163 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v161 - 6) << 40);
          unint64_t v165 = v164 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v161 - 5) << 32);
          unint64_t v166 = v165 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v161 - 4) << 24);
          unint64_t v167 = v166 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v161 - 3) << 16);
          unint64_t v168 = v167 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v161 - 2) << 8);
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v161 - 1);
          unint64_t v43 = v168 | result;
          break;
      }
      unint64_t v20 = v284;
      unint64_t v44 = v281 + v49;
LABEL_56:
      if ((uint64_t)(v20 - v44) < 0 || v20 - v44 < v43)
      {
LABEL_91:
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        *uint64_t v72 = xmmword_182111F60;
        swift_willThrow();
        unint64_t v7 = v6 + 40;
        goto LABEL_11;
      }
      if (v43 == 5)
      {
        unint64_t v53 = v44 - v292;
        if (((v44 - v292) & 0x8000000000000000) != 0 || (uint64_t)(v289 - v44) < 1) {
          goto LABEL_334;
        }
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v44) == 36)
        {
          unint64_t result = specialized static Strideable.== infix(_:_:)(v44, v44);
          if ((result & 1) == 0) {
            goto LABEL_353;
          }
          unint64_t v54 = specialized BufferView.subscript.getter(v44, v292, v288);
          if (*(_DWORD *)v54 == 1819635236 && *(unsigned char *)(v54 + 4) == 108)
          {
            uint64_t v2 = 0x9000000000000010;
            unint64_t v7 = v6 + 40;
            goto LABEL_11;
          }
        }
        uint64_t v2 = swift_allocObject();
      }
      else
      {
        unint64_t result = swift_allocObject();
        if ((v43 & 0x8000000000000000) != 0) {
          goto LABEL_324;
        }
        uint64_t v2 = result;
        unint64_t v53 = v44 - v292;
      }
      *(void *)(v2 + 16) = v53;
      *(void *)(v2 + 24) = v43;
      *(unsigned char *)(v2 + 32) = 1;
      unint64_t v7 = v6 + 40;
      goto LABEL_11;
    case 8:
      unint64_t v27 = v6 + 40;
      unint64_t v56 = v15 & 0xF;
      unint64_t v57 = v12 + 1;
      if (v56 != 15) {
        goto LABEL_161;
      }
      if (v57 >= v20) {
        goto LABEL_166;
      }
      uint64_t v2 = v292 + v13;
      unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
      if ((result & 1) == 0) {
        goto LABEL_319;
      }
      if (v288 < 0) {
        goto LABEL_323;
      }
      unint64_t v7 = v6 + 40;
      uint64_t v58 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      char v59 = v58;
      char v60 = specialized BPlistTypeMarker.init(_:)(v58);
      if (v60 == 13
        || !specialized == infix<A>(_:_:)(v60, 3)
        || (uint64_t v61 = v12 + 2, v62 = 1 << (v59 & 0xF), v2 - (v12 + 2) < v62))
      {
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v19 = xmmword_182111F50;
        goto LABEL_9;
      }
      switch((int)v62)
      {
        case 1:
          uint64_t v291 = v12 + 2;
          unint64_t v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v61);
          break;
        case 2:
          uint64_t v291 = v12 + 2;
          unsigned __int8 v207 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v61);
          unint64_t v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) | ((unint64_t)v207 << 8);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          unint64_t v117 = 0;
          uint64_t v291 = v12 + 2;
          uint64_t v118 = v12 + 2;
          uint64_t v119 = v62;
          do
          {
            unint64_t v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v118++) | (v117 << 8);
            unint64_t v117 = v56;
            --v119;
          }
          while (v119);
          break;
        case 4:
          uint64_t v291 = v12 + 2;
          unint64_t v208 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v61) << 24;
          unint64_t v209 = v208 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 16);
          unint64_t v210 = v209 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 8);
          unint64_t v56 = v210 & 0xFFFFFFFFFFFFFF00 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5);
          break;
        case 8:
          uint64_t v291 = v12 + 2;
          uint64_t v211 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v61) << 56;
          unint64_t v212 = v211 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 48);
          unint64_t v213 = v212 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 40);
          unint64_t v214 = v213 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 32);
          unint64_t v215 = v214 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 24);
          unint64_t v216 = v215 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 16);
          unint64_t v217 = v216 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8) << 8);
          unint64_t v56 = v217 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 9);
          break;
        default:
          uint64_t v291 = v12 + 2;
          uint64_t v199 = v62 + v61;
          uint64_t v200 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v62 + v61 - 8) << 56;
          unint64_t v201 = v200 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v199 - 7) << 48);
          unint64_t v202 = v201 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v199 - 6) << 40);
          unint64_t v203 = v202 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v199 - 5) << 32);
          unint64_t v204 = v203 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v199 - 4) << 24);
          unint64_t v205 = v204 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v199 - 3) << 16);
          unint64_t v206 = v205 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v199 - 2) << 8);
          unint64_t v56 = v206 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v199 - 1);
          break;
      }
      unint64_t v57 = v291 + v62;
      unint64_t v20 = v2;
LABEL_161:
      if ((uint64_t)(v20 - v57) < 0 || v20 - v57 < v56 || (v56 & 0x8000000000000000) != 0)
      {
LABEL_166:
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v75 = xmmword_182111F50;
LABEL_167:
        long long *v74 = v75;
LABEL_168:
        swift_willThrow();
        unint64_t v7 = v27;
      }
      else
      {
        unint64_t result = swift_allocObject();
        if (((2 * v56) & 0x8000000000000000) != 0) {
          goto LABEL_333;
        }
        uint64_t v2 = result;
        *(void *)(result + 16) = v57 - v292;
        *(void *)(result + 24) = 2 * v56;
        *(unsigned char *)(result + 32) = 0;
        unint64_t v7 = v6 + 40;
      }
      goto LABEL_11;
    case 9:
      uint64_t v2 = 0x9000000000000000;
      goto LABEL_11;
    case 10:
    case 11:
      unint64_t v287 = v6 + 40;
      unint64_t v7 = v12 + 1;
      if ((~v15 & 0xF) != 0)
      {
        unint64_t result = v15 & 0xF;
        goto LABEL_86;
      }
      if (v7 >= v20) {
        goto LABEL_89;
      }
      unint64_t v3 = v292 + v13;
      unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
      if ((result & 1) == 0) {
        goto LABEL_295;
      }
      if (v288 < 0) {
        goto LABEL_298;
      }
      uint64_t v21 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      char v22 = v21;
      char v23 = specialized BPlistTypeMarker.init(_:)(v21);
      if (v23 == 13) {
        goto LABEL_89;
      }
      if (!specialized == infix<A>(_:_:)(v23, 3)) {
        goto LABEL_89;
      }
      uint64_t v9 = v12 + 2;
      unint64_t v7 = 1 << (v22 & 0xF);
      if ((uint64_t)(v3 - (v12 + 2)) < (uint64_t)v7) {
        goto LABEL_89;
      }
      switch((int)v7)
      {
        case 1:
          uint64_t v283 = v12 + 2;
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v9);
          break;
        case 2:
          uint64_t v283 = v12 + 2;
          unsigned __int8 v150 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v9);
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) | ((unint64_t)v150 << 8);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          uint64_t v2 = 0;
          uint64_t v283 = v12 + 2;
          uint64_t v24 = v12 + 2;
          unint64_t v25 = v7;
          do
          {
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v24++) | (unint64_t)(v2 << 8);
            uint64_t v2 = result;
            --v25;
          }
          while (v25);
          break;
        case 4:
          uint64_t v283 = v12 + 2;
          unint64_t v151 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v9) << 24;
          unint64_t v152 = v151 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 16);
          unint64_t v153 = v152 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 8);
          unint64_t result = v153 & 0xFFFFFFFFFFFFFF00 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5);
          break;
        case 8:
          uint64_t v283 = v12 + 2;
          uint64_t v154 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v9) << 56;
          unint64_t v155 = v154 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 48);
          unint64_t v156 = v155 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 40);
          unint64_t v157 = v156 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 32);
          unint64_t v158 = v157 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 24);
          unint64_t v159 = v158 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 16);
          unint64_t v160 = v159 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8) << 8);
          unint64_t result = v160 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 9);
          break;
        default:
          goto LABEL_192;
      }
      goto LABEL_23;
    case 12:
      int64_t v63 = v15 & 0xF;
      unint64_t v64 = v12 + 1;
      if (v63 != 15) {
        goto LABEL_221;
      }
      if (v64 >= v20) {
        goto LABEL_224;
      }
      uint64_t v2 = v292 + v13;
      unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
      if ((result & 1) == 0) {
        goto LABEL_320;
      }
      if (v288 < 0) {
        goto LABEL_321;
      }
      uint64_t v65 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      char v66 = v65;
      char v67 = specialized BPlistTypeMarker.init(_:)(v65);
      if (v67 == 13 || !specialized == infix<A>(_:_:)(v67, 3)) {
        goto LABEL_224;
      }
      unint64_t v287 = v6 + 40;
      uint64_t v68 = v12 + 2;
      uint64_t v69 = 1 << (v66 & 0xF);
      if (v2 - (v12 + 2) < v69)
      {
LABEL_84:
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v71 = xmmword_182111F20;
        goto LABEL_90;
      }
      switch((int)v69)
      {
        case 1:
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2);
          int64_t v63 = result;
          goto LABEL_220;
        case 2:
          unsigned __int8 v226 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2);
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3);
          int64_t v63 = result | ((unint64_t)v226 << 8);
          goto LABEL_220;
        case 3:
        case 5:
        case 6:
        case 7:
          unint64_t v120 = 0;
          uint64_t v121 = v12 + 2;
          uint64_t v122 = v69;
          do
          {
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v121++) | (v120 << 8);
            unint64_t v120 = result;
            --v122;
          }
          while (v122);
          goto LABEL_218;
        case 4:
          unint64_t v227 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) << 24;
          unint64_t v228 = v227 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 16);
          unint64_t v229 = v228 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 8);
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5);
          int64_t v63 = v229 & 0xFFFFFFFFFFFFFF00 | result;
          goto LABEL_220;
        case 8:
          uint64_t v230 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 2) << 56;
          unint64_t v231 = v230 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 3) << 48);
          unint64_t v232 = v231 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 4) << 40);
          unint64_t v233 = v232 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 5) << 32);
          unint64_t v234 = v233 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 6) << 24);
          unint64_t v235 = v234 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 7) << 16);
          unint64_t v224 = v235 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 8) << 8);
          uint64_t v225 = v12 + 9;
          goto LABEL_217;
        default:
          uint64_t v218 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v69 + v68 - 8) << 56;
          unint64_t v219 = v218 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v69 + v68 - 7) << 48);
          unint64_t v220 = v219 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v69 + v68 - 6) << 40);
          unint64_t v221 = v220 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v69 + v68 - 5) << 32);
          unint64_t v222 = v221 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v69 + v68 - 4) << 24);
          unint64_t v223 = v222 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v69 + v68 - 3) << 16);
          unint64_t v224 = v223 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v69 + v12) << 8);
          uint64_t v225 = v69 + v68 - 1;
LABEL_217:
          unint64_t result = v224 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v225);
LABEL_218:
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_84;
          }
          int64_t v63 = result;
LABEL_220:
          unint64_t v64 = v68 + v69;
          unint64_t v7 = v6 + 40;
          unint64_t v20 = v2;
          break;
      }
LABEL_221:
      if (!is_mul_ok(2 * v63, v8)) {
        goto LABEL_224;
      }
      uint64_t v236 = 2 * v63 * v8;
      if (v236 < 0) {
        goto LABEL_315;
      }
      if ((uint64_t)(v20 - v64) < v236)
      {
LABEL_224:
        lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
        swift_allocError();
        long long v19 = xmmword_182111F20;
        goto LABEL_9;
      }
      unint64_t result = Dictionary.init(minimumCapacity:)();
      unint64_t v294 = result;
      int64_t v280 = v63 * v8;
      if ((unsigned __int128)(v63 * (__int128)v8) >> 64 != (v63 * v8) >> 63) {
        goto LABEL_335;
      }
      if (!v63)
      {
        unint64_t v274 = result;
        goto LABEL_281;
      }
      uint64_t v237 = 0;
      int64_t v278 = v8 - 8;
      int64_t v279 = v63;
      uint64_t v286 = v64 + v280;
      unint64_t v287 = v7;
      while (2)
      {
        if (v237 == v63) {
          goto LABEL_291;
        }
        uint64_t v282 = v237;
        unint64_t v7 = v8;
        uint64_t v2 = v8;
        switch((int)v8)
        {
          case 0:
            goto LABEL_275;
          case 1:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_340;
            }
            if (v288 < 0) {
              goto LABEL_341;
            }
            unsigned __int8 v242 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64);
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_342;
            }
            uint64_t v2 = v242;
            unint64_t v7 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v280);
            goto LABEL_275;
          case 2:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_343;
            }
            int64_t v243 = v280;
            if (v288 < 0) {
              goto LABEL_344;
            }
            unsigned __int8 v244 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64);
            unsigned __int8 v245 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + 1);
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_325;
            }
            uint64_t v2 = v245 | ((unint64_t)v244 << 8);
            uint64_t v246 = v64 + v280;
LABEL_267:
            unsigned __int8 v262 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246);
            unint64_t v7 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v243 + 1) | ((unint64_t)v262 << 8);
            goto LABEL_275;
          case 3:
          case 5:
          case 6:
          case 7:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_299;
            }
            if (v288 < 0) {
              goto LABEL_300;
            }
            uint64_t v238 = 0;
            uint64_t v239 = 0;
            unint64_t v7 = v287;
            break;
          case 4:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_345;
            }
            if (v288 < 0) {
              goto LABEL_346;
            }
            unsigned __int8 v247 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64);
            unsigned __int8 v248 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + 1);
            unsigned __int8 v249 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + 2);
            unsigned __int8 v250 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + 3);
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_327;
            }
            uint64_t v2 = ((unint64_t)v247 << 24) | ((unint64_t)v248 << 16) | ((unint64_t)v249 << 8) | v250;
            int64_t v251 = v280;
            uint64_t v246 = v64 + v280;
LABEL_270:
            unint64_t v263 = v64 + v251;
            unint64_t v264 = (unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246) << 24;
            unint64_t v265 = v264 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v263 + 1) << 16);
            unint64_t v266 = v265 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v263 + 2) << 8);
            unint64_t v7 = v266 & 0xFFFFFFFFFFFFFF00 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v263 + 3);
            goto LABEL_275;
          case 8:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_347;
            }
            uint64_t v241 = v64;
            unint64_t v7 = v287;
            if (v288 < 0) {
              goto LABEL_348;
            }
            goto LABEL_253;
          default:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_338;
            }
            if (v288 < 0) {
              goto LABEL_339;
            }
            uint64_t v241 = v64 + v278;
LABEL_253:
            uint64_t v252 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241) << 56;
            unint64_t v253 = v252 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241 + 1) << 48);
            unint64_t v254 = v253 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241 + 2) << 40);
            unint64_t v255 = v254 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241 + 3) << 32);
            unint64_t v256 = v255 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241 + 4) << 24);
            unint64_t v257 = v256 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241 + 5) << 16);
            unint64_t v258 = v257 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241 + 6) << 8);
            uint64_t v2 = v258 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v241 + 7);
            goto LABEL_254;
        }
        do
        {
          if (v8 == v239)
          {
            __break(1u);
LABEL_285:
            __break(1u);
            goto LABEL_286;
          }
          uint64_t v240 = v239 + 1;
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v239);
          uint64_t v2 = result | (unint64_t)(v238 << 8);
          uint64_t v238 = v2;
          uint64_t v239 = v240;
        }
        while (v8 != v240);
LABEL_254:
        if (v2 < 0)
        {
          lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
          swift_allocError();
          _OWORD *v277 = xmmword_182111F30;
          swift_willThrow();
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
        uint64_t v246 = v64 + v280;
        unint64_t v7 = v8;
        switch((int)v8)
        {
          case 0:
            goto LABEL_275;
          case 2:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            int64_t v243 = v280;
            if ((result & 1) == 0) {
              goto LABEL_325;
            }
            if ((v288 & 0x8000000000000000) == 0) {
              goto LABEL_267;
            }
            goto LABEL_326;
          case 3:
          case 5:
          case 6:
          case 7:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_311;
            }
            if (v288 < 0) {
              goto LABEL_312;
            }
            unint64_t v259 = 0;
            uint64_t v260 = v286;
            int64_t v261 = v8;
            break;
          case 4:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_327;
            }
            int64_t v251 = v280;
            if ((v288 & 0x8000000000000000) == 0) {
              goto LABEL_270;
            }
            goto LABEL_328;
          case 8:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_351;
            }
            if ((v288 & 0x8000000000000000) == 0) {
              goto LABEL_273;
            }
            goto LABEL_352;
          default:
            unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
            if ((result & 1) == 0) {
              goto LABEL_349;
            }
            if (v288 < 0) {
              goto LABEL_350;
            }
            v246 += v278;
LABEL_273:
            uint64_t v267 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246) << 56;
            unint64_t v268 = v267 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246 + 1) << 48);
            unint64_t v269 = v268 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246 + 2) << 40);
            unint64_t v270 = v269 | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246 + 3) << 32);
            unint64_t v271 = v270 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246 + 4) << 24);
            unint64_t v272 = v271 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246 + 5) << 16);
            unint64_t v273 = v272 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246 + 6) << 8);
            unint64_t v7 = v273 | specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v246 + 7);
            goto LABEL_274;
        }
        do
        {
          if (!v261) {
            goto LABEL_285;
          }
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v260);
          unint64_t v7 = result | (v259 << 8);
          ++v260;
          unint64_t v259 = v7;
          --v261;
        }
        while (v261);
LABEL_274:
        int64_t v63 = v279;
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_279;
        }
LABEL_275:
        specialized Dictionary.subscript.setter(v7, 0, v2);
        unint64_t result = specialized static Comparable.<= infix(_:_:)(v292, v289);
        if (result)
        {
          if (v288 < 0) {
            goto LABEL_293;
          }
          uint64_t v237 = v282 + 1;
          v64 += v8;
          v286 += v8;
          unint64_t v7 = v287;
          if (v282 + 1 == v63)
          {
            unint64_t v274 = v294;
LABEL_281:
            uint64_t v276 = swift_allocObject();
            *(void *)(v276 + 16) = v274;
            uint64_t v2 = v276 | 0x3000000000000000;
            goto LABEL_11;
          }
          continue;
        }
        goto LABEL_292;
      }
    default:
      goto LABEL_11;
  }
}

uint64_t specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + a1);
}

BOOL specialized static Comparable.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

uint64_t specialized BPlistTypeMarker.init(_:)(uint64_t a1)
{
  int v1 = (a1 >> 4) ^ 8;
  uint64_t result = 3;
  switch(v1)
  {
    case 0:
      uint64_t result = 9;
      break;
    case 2:
      uint64_t result = 10;
      break;
    case 4:
      uint64_t result = 11;
      break;
    case 5:
      uint64_t result = 12;
      break;
    case 8:
      if ((_BYTE)a1)
      {
        if (a1 == 9)
        {
          uint64_t result = 2;
        }
        else
        {
          if (a1 != 8) {
            goto LABEL_14;
          }
          uint64_t result = 1;
        }
      }
      else
      {
        uint64_t result = a1;
      }
      break;
    case 9:
      return result;
    case 10:
      uint64_t result = 4;
      break;
    case 11:
      if (a1 != 51) {
        goto LABEL_14;
      }
      uint64_t result = 5;
      break;
    case 12:
      uint64_t result = 6;
      break;
    case 13:
      uint64_t result = 7;
      break;
    case 14:
      uint64_t result = 8;
      break;
    default:
LABEL_14:
      uint64_t result = 13;
      break;
  }
  return result;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void *closure #1 in BPlistMap.withBuffer<A>(for:perform:)specialized partial apply@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return partial apply for specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)(a1, a2);
}

void *partial apply for specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)@<X0>(void *result@<X0>, void *(*a2)(long long *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }
  return result;
}

id partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v5;
  id result;
  uint64_t v7;

  if (*(unsigned char *)(v3 + 16)) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2415919360;
  }
  uint64_t result = specialized String.init<A>(bytes:encoding:)(a1, a2, v5);
  *a3 = result;
  a3[1] = v7;
  return result;
}

id specialized String.init<A>(bytes:encoding:)(char *a1, uint64_t a2, uint64_t a3)
{
  if (a3 > 2415919359)
  {
    if (a3 > 2550137087)
    {
      if (a3 == 2550137088)
      {
        uint64_t v9 = 1;
      }
      else
      {
        if (a3 != 2617245952) {
          goto LABEL_30;
        }
        uint64_t v9 = 0;
      }
      goto LABEL_25;
    }
    if (a3 == 2415919360)
    {
      uint64_t v9 = 1;
    }
    else
    {
      if (a3 != 2483028224) {
        goto LABEL_30;
      }
      uint64_t v9 = 0;
    }
LABEL_21:
    closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), &v20);
    if (*((void *)&v20 + 1) < 2uLL)
    {
      unint64_t v7 = specialized String.init<A, B>(_validating:as:)((uint64_t)a1, a2, v9);
      if (v12) {
        return (id)v7;
      }
      return 0;
    }
    return (id)v20;
  }
  if (a3 > 9)
  {
    uint64_t v9 = 2;
    if (a3 != 10)
    {
      if (a3 != 2348810496) {
        goto LABEL_30;
      }
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), &v20);
      if (*((void *)&v20 + 1) < 2uLL)
      {
        unint64_t v7 = specialized String.init<A, B>(_validating:as:)();
        if (v13) {
          return (id)v7;
        }
        return 0;
      }
      return (id)v20;
    }
    goto LABEL_21;
  }
  if (a3 == 1)
  {
    uint64_t v5 = specialized String.init<A, B>(_validating:as:)(a1, a2);
    if (v10) {
      return (id)v5;
    }
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if (static String.compatibility1)
    {
      unint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      id v18 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v17 + 32, *((void *)v17 + 2), 1);
      if (v18)
      {
        long long v19 = v18;
        id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        swift_release();

        return v11;
      }
      swift_release();
    }
    return 0;
  }
  if (a3 != 4)
  {
LABEL_30:
    id v15 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1, a2, a3);
    if (v15)
    {
      unint64_t v16 = v15;
      id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

      return v11;
    }
    return 0;
  }
  uint64_t v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    unint64_t v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)a1, a2);
    if (!v8) {
      return 0;
    }
    return (id)v7;
  }
  return (id)v5;
}

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  long long v20;

  if (a3 > 2415919359)
  {
    if (a3 > 2550137087)
    {
      if (a3 == 2550137088)
      {
        uint64_t v9 = 1;
      }
      else
      {
        if (a3 != 2617245952) {
          goto LABEL_29;
        }
        uint64_t v9 = 0;
      }
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), &v20);
      if (*((void *)&v20 + 1)) {
        return (id)v20;
      }
      unint64_t v7 = specialized String.init<A, B>(_validating:as:)();
      if (v13) {
        return (id)v7;
      }
      return 0;
    }
    if (a3 == 2415919360)
    {
      uint64_t v9 = 1;
    }
    else
    {
      if (a3 != 2483028224) {
        goto LABEL_29;
      }
      uint64_t v9 = 0;
    }
LABEL_21:
    closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), &v20);
    if (*((void *)&v20 + 1)) {
      return (id)v20;
    }
    unint64_t v7 = specialized String.init<A, B>(_validating:as:)((uint64_t)a1, a2, v9);
    if (v12) {
      return (id)v7;
    }
    return 0;
  }
  if (a3 > 9)
  {
    uint64_t v9 = 2;
    if (a3 != 10)
    {
      if (a3 != 2348810496) {
        goto LABEL_29;
      }
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  if (a3 == 1)
  {
    uint64_t v5 = specialized String.init<A, B>(_validating:as:)(a1, a2);
    if (v10) {
      return (id)v5;
    }
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if (static String.compatibility1)
    {
      unint64_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      unint64_t v17 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v16 + 32, *(void *)(v16 + 16), 1);
      if (v17)
      {
        id v18 = v17;
        id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        swift_release();

        return v11;
      }
      swift_release();
    }
    return 0;
  }
  if (a3 != 4)
  {
LABEL_29:
    uint64_t v14 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1, a2, a3);
    if (v14)
    {
      id v15 = v14;
      id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

      return v11;
    }
    return 0;
  }
  uint64_t v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    unint64_t v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)a1, a2);
    if (!v8) {
      return 0;
    }
    return (id)v7;
  }
  return (id)v5;
}

uint64_t specialized String.init<A, B>(_validating:as:)(char *a1, uint64_t a2)
{
  char v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v5 = v4;
  if (a1 && a2)
  {
    int v6 = *a1;
    if (v6 < 0)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v7 = *((void *)v4 + 2);
    uint64_t v8 = a2 - 1;
    uint64_t v9 = a1 + 1;
    while (1)
    {
      unint64_t v10 = *((void *)v5 + 3);
      if (v7 >= v10 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v7 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v7 + 1;
      v5[v7 + 32] = v6;
      if (!v8) {
        break;
      }
      int v11 = *v9++;
      LOBYTE(v6) = v11;
      --v8;
      ++v7;
      if (v11 < 0) {
        goto LABEL_13;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = static String._tryFromUTF8(_:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease_n();
  if (v14) {
    return v12;
  }
  else {
    return 0;
  }
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int v11 = (char *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * v12 - 64;
      uint64_t v13 = v11 + 32;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32]) {
          memmove(v13, a4 + 32, v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v11 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int v11 = (char *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 2);
      uint64_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int v11 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32]) {
          memmove(v14, a4 + 32, 4 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
}

void *specialized Dictionary.subscript.setter(uint64_t a1, char a2, unint64_t a3)
{
  char v4 = v3;
  if (a2)
  {
LABEL_6:
    uint64_t result = (void *)specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v19 & 1) == 0) {
      return result;
    }
    a3 = (unint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = *v4;
    *char v4 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v21 = a1;
LABEL_9:
      specialized _NativeDictionary._delete(at:)(a3, v21);
      *char v4 = v21;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_17:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
    uint64_t v22 = static _DictionaryStorage.copy(original:)();
    uint64_t v21 = v22;
    if (*(void *)(a1 + 16))
    {
      uint64_t result = (void *)(v22 + 64);
      uint64_t v23 = a1 + 64;
      unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v21 + 32)) + 63) >> 6;
      if (v21 != a1 || (unint64_t)result >= v23 + 8 * v24) {
        uint64_t result = memmove(result, (const void *)(a1 + 64), 8 * v24);
      }
      int64_t v25 = 0;
      *(void *)(v21 + 16) = *(void *)(a1 + 16);
      uint64_t v26 = 1 << *(unsigned char *)(a1 + 32);
      uint64_t v27 = -1;
      if (v26 < 64) {
        uint64_t v27 = ~(-1 << v26);
      }
      unint64_t v28 = v27 & *(void *)(a1 + 64);
      int64_t v29 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          unint64_t v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          unint64_t v31 = v30 | (v25 << 6);
        }
        else
        {
          int64_t v34 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_81;
          }
          if (v34 >= v29) {
            break;
          }
          unint64_t v35 = *(void *)(v23 + 8 * v34);
          ++v25;
          if (!v35)
          {
            int64_t v25 = v34 + 1;
            if (v34 + 1 >= v29) {
              break;
            }
            unint64_t v35 = *(void *)(v23 + 8 * v25);
            if (!v35)
            {
              int64_t v25 = v34 + 2;
              if (v34 + 2 >= v29) {
                break;
              }
              unint64_t v35 = *(void *)(v23 + 8 * v25);
              if (!v35)
              {
                int64_t v25 = v34 + 3;
                if (v34 + 3 >= v29) {
                  break;
                }
                unint64_t v35 = *(void *)(v23 + 8 * v25);
                if (!v35)
                {
                  int64_t v25 = v34 + 4;
                  if (v34 + 4 >= v29) {
                    break;
                  }
                  unint64_t v35 = *(void *)(v23 + 8 * v25);
                  if (!v35)
                  {
                    int64_t v36 = v34 + 5;
                    if (v36 >= v29) {
                      break;
                    }
                    unint64_t v35 = *(void *)(v23 + 8 * v36);
                    if (!v35)
                    {
                      while (1)
                      {
                        int64_t v25 = v36 + 1;
                        if (__OFADD__(v36, 1)) {
                          goto LABEL_82;
                        }
                        if (v25 >= v29) {
                          goto LABEL_75;
                        }
                        unint64_t v35 = *(void *)(v23 + 8 * v25);
                        ++v36;
                        if (v35) {
                          goto LABEL_44;
                        }
                      }
                    }
                    int64_t v25 = v36;
                  }
                }
              }
            }
          }
LABEL_44:
          unint64_t v28 = (v35 - 1) & v35;
          unint64_t v31 = __clz(__rbit64(v35)) + (v25 << 6);
        }
        uint64_t v32 = 8 * v31;
        uint64_t v33 = *(void *)(*(void *)(a1 + 56) + v32);
        *(void *)(*(void *)(v21 + 48) + v32) = *(void *)(*(void *)(a1 + 48) + v32);
        *(void *)(*(void *)(v21 + 56) + v32) = v33;
      }
    }
LABEL_75:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *v3;
  uint64_t v8 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  BOOL v13 = __OFADD__(v11, v12);
  uint64_t v14 = v11 + v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_17;
  }
  char v15 = v10;
  if (*(void *)(v8 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v7);
    uint64_t v16 = v54;
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v15 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_6;
    }
LABEL_14:
    if (v15)
    {
LABEL_15:
      *(void *)(*(void *)(v16 + 56) + 8 * v9) = a1;
LABEL_78:
      *char v4 = v16;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_77:
    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a1, (void *)v16);
    goto LABEL_78;
  }
  if (v7)
  {
    uint64_t v16 = v8;
    goto LABEL_14;
  }
  unint64_t v53 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t v37 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v37;
  if (!*(void *)(v8 + 16))
  {
LABEL_76:
    swift_bridgeObjectRelease();
    unint64_t v9 = v53;
    if (v15) {
      goto LABEL_15;
    }
    goto LABEL_77;
  }
  uint64_t result = (void *)(v37 + 64);
  uint64_t v38 = v8 + 64;
  unint64_t v39 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  if (v16 != v8 || (unint64_t)result >= v38 + 8 * v39) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v39);
  }
  int64_t v40 = 0;
  *(void *)(v16 + 16) = *(void *)(v8 + 16);
  uint64_t v41 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & *(void *)(v8 + 64);
  int64_t v44 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      unint64_t v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      unint64_t v46 = v45 | (v40 << 6);
      goto LABEL_53;
    }
    int64_t v49 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v49 >= v44) {
      goto LABEL_76;
    }
    unint64_t v50 = *(void *)(v38 + 8 * v49);
    ++v40;
    if (!v50)
    {
      int64_t v40 = v49 + 1;
      if (v49 + 1 >= v44) {
        goto LABEL_76;
      }
      unint64_t v50 = *(void *)(v38 + 8 * v40);
      if (!v50)
      {
        int64_t v40 = v49 + 2;
        if (v49 + 2 >= v44) {
          goto LABEL_76;
        }
        unint64_t v50 = *(void *)(v38 + 8 * v40);
        if (!v50)
        {
          int64_t v40 = v49 + 3;
          if (v49 + 3 >= v44) {
            goto LABEL_76;
          }
          unint64_t v50 = *(void *)(v38 + 8 * v40);
          if (!v50)
          {
            int64_t v40 = v49 + 4;
            if (v49 + 4 >= v44) {
              goto LABEL_76;
            }
            unint64_t v50 = *(void *)(v38 + 8 * v40);
            if (!v50)
            {
              int64_t v40 = v49 + 5;
              if (v49 + 5 >= v44) {
                goto LABEL_76;
              }
              unint64_t v50 = *(void *)(v38 + 8 * v40);
              if (!v50) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_74:
    unint64_t v43 = (v50 - 1) & v50;
    unint64_t v46 = __clz(__rbit64(v50)) + (v40 << 6);
LABEL_53:
    uint64_t v47 = 8 * v46;
    uint64_t v48 = *(void *)(*(void *)(v8 + 56) + v47);
    *(void *)(*(void *)(v16 + 48) + v47) = *(void *)(*(void *)(v8 + 48) + v47);
    *(void *)(*(void *)(v16 + 56) + v47) = v48;
  }
  int64_t v51 = v49 + 6;
  if (v51 >= v44) {
    goto LABEL_76;
  }
  uint64_t v52 = v38;
  unint64_t v50 = *(void *)(v38 + 8 * v51);
  if (v50)
  {
    int64_t v40 = v51;
    goto LABEL_74;
  }
  while (1)
  {
    int64_t v40 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    if (v40 >= v44) {
      goto LABEL_76;
    }
    uint64_t v38 = v52;
    unint64_t v50 = *(void *)(v52 + 8 * v40);
    ++v51;
    if (v50) {
      goto LABEL_74;
    }
  }
LABEL_83:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *result;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t vars8;

  char v4 = v3;
  if (a2)
  {
LABEL_6:
    uint64_t result = (void *)specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v19 & 1) == 0) {
      return result;
    }
    a3 = (unint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = *v4;
    *char v4 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v21 = a1;
LABEL_9:
      specialized _NativeDictionary._delete(at:)(a3, v21);
      *char v4 = v21;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_17:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
    uint64_t v22 = static _DictionaryStorage.copy(original:)();
    uint64_t v21 = v22;
    if (*(void *)(a1 + 16))
    {
      uint64_t result = (void *)(v22 + 64);
      uint64_t v23 = a1 + 64;
      unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v21 + 32)) + 63) >> 6;
      if (v21 != a1 || (unint64_t)result >= v23 + 8 * v24) {
        uint64_t result = memmove(result, (const void *)(a1 + 64), 8 * v24);
      }
      int64_t v25 = 0;
      *(void *)(v21 + 16) = *(void *)(a1 + 16);
      uint64_t v26 = 1 << *(unsigned char *)(a1 + 32);
      uint64_t v27 = -1;
      if (v26 < 64) {
        uint64_t v27 = ~(-1 << v26);
      }
      unint64_t v28 = v27 & *(void *)(a1 + 64);
      int64_t v29 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          unint64_t v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          unint64_t v31 = v30 | (v25 << 6);
        }
        else
        {
          uint64_t v33 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_81;
          }
          if (v33 >= v29) {
            break;
          }
          int64_t v34 = *(void *)(v23 + 8 * v33);
          ++v25;
          if (!v34)
          {
            int64_t v25 = v33 + 1;
            if (v33 + 1 >= v29) {
              break;
            }
            int64_t v34 = *(void *)(v23 + 8 * v25);
            if (!v34)
            {
              int64_t v25 = v33 + 2;
              if (v33 + 2 >= v29) {
                break;
              }
              int64_t v34 = *(void *)(v23 + 8 * v25);
              if (!v34)
              {
                int64_t v25 = v33 + 3;
                if (v33 + 3 >= v29) {
                  break;
                }
                int64_t v34 = *(void *)(v23 + 8 * v25);
                if (!v34)
                {
                  int64_t v25 = v33 + 4;
                  if (v33 + 4 >= v29) {
                    break;
                  }
                  int64_t v34 = *(void *)(v23 + 8 * v25);
                  if (!v34)
                  {
                    unint64_t v35 = v33 + 5;
                    if (v35 >= v29) {
                      break;
                    }
                    int64_t v34 = *(void *)(v23 + 8 * v35);
                    if (!v34)
                    {
                      while (1)
                      {
                        int64_t v25 = v35 + 1;
                        if (__OFADD__(v35, 1)) {
                          goto LABEL_82;
                        }
                        if (v25 >= v29) {
                          goto LABEL_75;
                        }
                        int64_t v34 = *(void *)(v23 + 8 * v25);
                        ++v35;
                        if (v34) {
                          goto LABEL_44;
                        }
                      }
                    }
                    int64_t v25 = v35;
                  }
                }
              }
            }
          }
LABEL_44:
          unint64_t v28 = (v34 - 1) & v34;
          unint64_t v31 = __clz(__rbit64(v34)) + (v25 << 6);
        }
        uint64_t v32 = *(void *)(*(void *)(a1 + 56) + 8 * v31);
        *(unsigned char *)(*(void *)(v21 + 48) + v31) = *(unsigned char *)(*(void *)(a1 + 48) + v31);
        *(void *)(*(void *)(v21 + 56) + 8 * v31) = v32;
      }
    }
LABEL_75:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = *v3;
  uint64_t v8 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  BOOL v13 = __OFADD__(v11, v12);
  uint64_t v14 = v11 + v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_17;
  }
  char v15 = v10;
  if (*(void *)(v8 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v7);
    uint64_t v16 = v52;
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v15 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_6;
    }
LABEL_14:
    if (v15)
    {
LABEL_15:
      *(void *)(*(void *)(v16 + 56) + 8 * v9) = a1;
LABEL_78:
      *char v4 = v16;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_77:
    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a1, (void *)v16);
    goto LABEL_78;
  }
  if (v7)
  {
    uint64_t v16 = v8;
    goto LABEL_14;
  }
  int64_t v51 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
  int64_t v36 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v36;
  if (!*(void *)(v8 + 16))
  {
LABEL_76:
    swift_bridgeObjectRelease();
    unint64_t v9 = v51;
    if (v15) {
      goto LABEL_15;
    }
    goto LABEL_77;
  }
  uint64_t result = (void *)(v36 + 64);
  uint64_t v37 = v8 + 64;
  uint64_t v38 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  if (v16 != v8 || (unint64_t)result >= v37 + 8 * v38) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v38);
  }
  unint64_t v39 = 0;
  *(void *)(v16 + 16) = *(void *)(v8 + 16);
  int64_t v40 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v41 = -1;
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  uint64_t v42 = v41 & *(void *)(v8 + 64);
  unint64_t v43 = (unint64_t)(v40 + 63) >> 6;
  while (1)
  {
    if (v42)
    {
      int64_t v44 = __clz(__rbit64(v42));
      v42 &= v42 - 1;
      unint64_t v45 = v44 | (v39 << 6);
      goto LABEL_53;
    }
    uint64_t v47 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v47 >= v43) {
      goto LABEL_76;
    }
    uint64_t v48 = *(void *)(v37 + 8 * v47);
    ++v39;
    if (!v48)
    {
      unint64_t v39 = v47 + 1;
      if (v47 + 1 >= v43) {
        goto LABEL_76;
      }
      uint64_t v48 = *(void *)(v37 + 8 * v39);
      if (!v48)
      {
        unint64_t v39 = v47 + 2;
        if (v47 + 2 >= v43) {
          goto LABEL_76;
        }
        uint64_t v48 = *(void *)(v37 + 8 * v39);
        if (!v48)
        {
          unint64_t v39 = v47 + 3;
          if (v47 + 3 >= v43) {
            goto LABEL_76;
          }
          uint64_t v48 = *(void *)(v37 + 8 * v39);
          if (!v48)
          {
            unint64_t v39 = v47 + 4;
            if (v47 + 4 >= v43) {
              goto LABEL_76;
            }
            uint64_t v48 = *(void *)(v37 + 8 * v39);
            if (!v48)
            {
              unint64_t v39 = v47 + 5;
              if (v47 + 5 >= v43) {
                goto LABEL_76;
              }
              uint64_t v48 = *(void *)(v37 + 8 * v39);
              if (!v48) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_74:
    uint64_t v42 = (v48 - 1) & v48;
    unint64_t v45 = __clz(__rbit64(v48)) + (v39 << 6);
LABEL_53:
    unint64_t v46 = *(void *)(*(void *)(v8 + 56) + 8 * v45);
    *(unsigned char *)(*(void *)(v16 + 48) + v45) = *(unsigned char *)(*(void *)(v8 + 48) + v45);
    *(void *)(*(void *)(v16 + 56) + 8 * v45) = v46;
  }
  int64_t v49 = v47 + 6;
  if (v49 >= v43) {
    goto LABEL_76;
  }
  unint64_t v50 = v37;
  uint64_t v48 = *(void *)(v37 + 8 * v49);
  if (v48)
  {
    unint64_t v39 = v49;
    goto LABEL_74;
  }
  while (1)
  {
    unint64_t v39 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v39 >= v43) {
      goto LABEL_76;
    }
    uint64_t v37 = v50;
    uint64_t v48 = *(void *)(v50 + 8 * v39);
    ++v49;
    if (v48) {
      goto LABEL_74;
    }
  }
LABEL_83:
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  char v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  ICULegacyNumberFormatter.Signature.hash(into:)();
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CombineIdentifier();
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier, MEMORY[0x1E4F1A7E8]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  char v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  unint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for NSString();
    char v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        unint64_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t, __n128);
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  void (**v16)(char *, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  v6.n128_f64[0] = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v2;
  unint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  char v10 = a2 & ~v9;
  uint64_t v21 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    BOOL v12 = v5 + 16;
    BOOL v13 = v14;
    char v15 = *(void *)(v12 + 56);
    uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      char v17 = v12;
      v13(v8, *(void *)(v23 + 48) + v15 * v10, v4, v6);
      id v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v16)(v8, v4);
      if (v18) {
        break;
      }
      char v10 = (v10 + 1) & v11;
      BOOL v12 = v17;
    }
    while (((*(void *)(v21 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v19;

  uint64_t v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  char v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    BOOL v12 = *(void *)(v6 + 72);
    while (1)
    {
      outlined init with copy of ICUNumberFormatter.Signature(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for ICULegacyNumberFormatter.Signature);
      if (specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)((uint64_t)v8, a1))
      {
        BOOL v13 = *(int *)(v5 + 20);
        uint64_t v14 = *(void *)&v8[v13];
        char v15 = *(void *)&v8[v13 + 8];
        uint64_t v16 = (void *)(a1 + v13);
        char v17 = v14 == *v16 && v15 == v16[1];
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && v8[*(int *)(v5 + 24)] == *(unsigned char *)(a1 + *(int *)(v5 + 24)))
        {
          break;
        }
      }
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICULegacyNumberFormatter.Signature);
      char v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICULegacyNumberFormatter.Signature);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t, __n128);
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  long long v20 = a1;
  uint64_t v4 = type metadata accessor for CombineIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  v6.n128_f64[0] = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  unint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  char v10 = a2 & ~v9;
  char v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    BOOL v13 = v5 + 16;
    BOOL v12 = v14;
    char v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4, v6);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier, MEMORY[0x1E4F1A7E8]);
      uint64_t v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      char v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  unint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    char v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x185302FC0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  char v12;
  uint64_t v14;
  unsigned char v15[352];
  unsigned char v16[352];
  uint64_t __dst[50];

  unint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    char v6 = ~v3;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 352);
    uint64_t v8 = *(void *)(a1 + 360);
    unint64_t v9 = *(void *)(a1 + 368);
    char v10 = *(void *)(a1 + 376);
    uint64_t v14 = *(void *)(a1 + 384);
    do
    {
      uint64_t v11 = (const void *)(*(void *)(v2 + 48) + 392 * v4);
      memcpy(__dst, v11, 0x188uLL);
      memcpy(v16, v11, sizeof(v16));
      memcpy(v15, (const void *)a1, sizeof(v15));
      outlined retain of ICUDateIntervalFormatter.Signature(__dst);
      if (specialized static Locale.Components.== infix(_:_:)((uint64_t)v16, (uint64_t)v15)
        && LOBYTE(__dst[44]) == v7
        && (__dst[45] == v8 && __dst[46] == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (__dst[47] == v10 && __dst[48] == v14)
        {
          outlined release of ICUDateIntervalFormatter.Signature(__dst);
          return v4;
        }
        BOOL v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined release of ICUDateIntervalFormatter.Signature(__dst);
        if (v12) {
          return v4;
        }
      }
      else
      {
        outlined release of ICUDateIntervalFormatter.Signature(__dst);
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 56 * result;
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a4[7] + 8 * result) = a3;
  BOOL v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return byte_18219ECB8[a1] == byte_18219ECB8[a2];
}

uint64_t specialized Array.append(_:)(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    unint64_t v3 = (void *)result;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
    unint64_t v3 = (void *)result;
  }
  v3[2] = v6 + 1;
  v3[v6 + 4] = a1;
  *int v1 = v3;
  return result;
}

uint64_t outlined consume of Set<A1>.Iterator._Variant<A><A1>()
{
  return swift_release();
}

uint64_t type metadata accessor for _PlistKeyedDecodingContainer()
{
  return swift_getGenericMetadata();
}

uint64_t specialized Array.init()()
{
  return MEMORY[0x1E4FBC860];
}

void *closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(long long *, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if (v7 < 0) {
    goto LABEL_10;
  }
  uint64_t v11 = isStackAllocationSafe;
  if (v7 <= 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    BOOL v12 = &v15;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t result = ((void *(*)(long long *__return_ptr))a4)(&v15);
    uint64_t v14 = v5;
    if (!v5)
    {
      *a5 = v15;
      return result;
    }
    swift_willThrow();

    __break(1u);
  }
  else
  {
    BOOL v12 = (long long *)swift_slowAlloc();
    a4(v12, v7, v11, a2, a3);
    uint64_t v14 = v5;
    if (!v5) {
      return (void *)MEMORY[0x185309510](v12, -1, -1);
    }
  }

  uint64_t result = (void *)MEMORY[0x185309510](v12, -1, -1);
  __break(1u);
  return result;
}

BOOL specialized static Strideable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

unint64_t specialized BufferView.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 + a3 < result)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((uint64_t)(result - a2) < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((uint64_t)(a2 + a3 - result) < 0) {
LABEL_7:
  }
    __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PredicateBindings()
{
  return &type metadata for PredicateBindings;
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance JSONDecoderImpl@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for JSONDecoderImpl();
  a1[4] = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
  *a1 = v3;
  return swift_retain();
}

void JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, ValueMetadata *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v78 = a9;
  uint64_t v79 = a7;
  uint64_t v72 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  long long v71 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20);
  MEMORY[0x1F4188790](v21);
  if (a4 == &type metadata for Date)
  {
    unint64_t v37 = v85;
    JSONDecoderImpl.unwrapDate<A>(from:for:_:)(a1, a2, a3, a5, a6, a8, a11, (double *)&v80);
    if (v37) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v26 = a6;
  uint64_t v74 = a5;
  unint64_t v75 = a2;
  unint64_t v77 = a1;
  unsigned int v76 = a3;
  uint64_t v73 = v11;
  if (a4 == &type metadata for Data)
  {
    unint64_t v38 = v85;
    unint64_t v39 = JSONDecoderImpl.unwrapData<A>(from:for:_:)(v77, v75, v76, v74, a6, a8, a11);
    if (v38) {
      return;
    }
    unint64_t v80 = (unint64_t)v39;
    uint64_t v81 = v40;
    goto LABEL_15;
  }
  uint64_t v27 = (void *)a11;
  uint64_t v28 = a8;
  uint64_t v29 = v26;
  if (a4 == &type metadata for URL)
  {
    unint64_t v41 = v85;
    JSONDecoderImpl.unwrapURL<A>(from:for:_:)(v77, v75, v76, v74, v26, a8, a11, &v80);
    if (v41) {
      return;
    }
    goto LABEL_15;
  }
  unint64_t v30 = v25;
  unint64_t v31 = (char *)&v69 - v23;
  uint64_t v32 = v24;
  uint64_t v33 = v22;
  type metadata accessor for NSDecimal(0);
  if (v34 != a4)
  {
    int64_t v70 = a4;
    uint64_t v35 = v79;
    if (swift_conformsToProtocol2()) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = 0;
    }
    if (v36)
    {
      JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)(v77, v75, v76, (uint64_t)v70, v74, v29, v35, v28, v78, a10, a11);
      return;
    }
    uint64_t v69 = a10;
    unint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
    v46(v31, v29, v33);
    uint64_t v47 = v30;
    v46(v30, (uint64_t)v31, v33);
    uint64_t v48 = v72;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v30, 1, v28) == 1)
    {
      int64_t v49 = *(void (**)(char *, uint64_t))(v32 + 8);
      v49(v31, v33);
      v49(v30, v33);
      unint64_t v50 = v74;
      unint64_t v51 = v74 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      unint64_t v52 = v85;
      char v53 = v76;
      unint64_t v54 = v75;
      goto LABEL_29;
    }
    BOOL v55 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
    unint64_t v56 = v71;
    v55(v71, (uint64_t)v47, v28);
    unint64_t v57 = swift_allocObject();
    *(void *)(v57 + 40) = v28;
    *(void *)(v57 + 48) = a11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v57 + 16));
    v55((char *)boxed_opaque_existential_1, (uint64_t)v56, v28);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
    unint64_t v59 = v74;
    *(void *)(v57 + 56) = v74;
    if (v59 >> 62)
    {
      unint64_t v52 = v85;
      char v53 = v76;
      unint64_t v54 = v75;
      if (v59 >> 62 != 1)
      {
        uint64_t v61 = 0;
        goto LABEL_27;
      }
      char v60 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      char v60 = (uint64_t *)(v59 + 64);
      unint64_t v52 = v85;
      char v53 = v76;
      unint64_t v54 = v75;
    }
    uint64_t v61 = *v60;
    swift_retain();
LABEL_27:
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    *(void *)(v57 + 64) = v61 + 1;
    unint64_t v51 = v57 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v50 = v57;
LABEL_29:
    unint64_t v57 = (unint64_t)v73;
    uint64_t v27 = (void *)v73[20];
    v73[20] = v50;
    uint64_t v62 = *(void **)(v57 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v57 + 16) = v62;
    unint64_t v85 = v51;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
      *(void *)(v57 + 16) = v62;
    }
    unint64_t v65 = v62[2];
    unint64_t v64 = v62[3];
    unint64_t v66 = v77;
    if (v65 >= v64 >> 1)
    {
      uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1, v62);
      unint64_t v66 = v77;
    }
    v62[2] = v65 + 1;
    char v67 = &v62[3 * v65];
    v67[4] = v66;
    v67[5] = v54;
    *((unsigned char *)v67 + 48) = v53;
    *(void *)(v57 + 16) = v62;
    uint64_t v83 = type metadata accessor for JSONDecoderImpl();
    uint64_t v84 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
    unint64_t v80 = v57;
    swift_retain();
    dispatch thunk of Decodable.init(from:)();
    if (!v52)
    {
LABEL_38:
      *(void *)(v57 + 160) = v27;
      swift_retain();
      swift_release();
      uint64_t v27 = *(void **)(v57 + 16);
      if (v27[2])
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v68 = v27[2];
          if (v68) {
            goto LABEL_41;
          }
          goto LABEL_48;
        }
LABEL_47:
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        uint64_t v68 = v27[2];
        if (v68) {
          goto LABEL_41;
        }
LABEL_48:
        __break(1u);
        return;
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    *(void *)(v57 + 160) = v27;
    swift_retain();
    swift_release();
    uint64_t v27 = *(void **)(v57 + 16);
    if (v27[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v68 = v27[2];
        if (v68)
        {
LABEL_41:
          unint64_t v27[2] = v68 - 1;
          *(void *)(v57 + 16) = v27;
          swift_release();
          swift_release();
          return;
        }
        goto LABEL_37;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
    uint64_t v68 = v27[2];
    if (v68) {
      goto LABEL_41;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v42 = v85;
  uint64_t v43 = JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(v77, v75, v76, v74, v29, v28, a11);
  if (!v42)
  {
    unint64_t v80 = v43;
    uint64_t v81 = v44;
    int v82 = v45;
LABEL_15:
    swift_dynamicCast();
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

void specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(unint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v14 = (void *)a6;
  unint64_t v15 = a5;
  uint64_t v50 = a10;
  if (a4 == &type metadata for Date)
  {
    specialized JSONDecoderImpl.unwrapDate<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9, (double *)&v45);
    if (v11) {
      return;
    }
    goto LABEL_14;
  }
  if (a4 == &type metadata for Data)
  {
    uint64_t v21 = specialized JSONDecoderImpl.unwrapData<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9);
    if (v11) {
      return;
    }
    int v45 = v21;
    uint64_t v46 = v22;
    goto LABEL_14;
  }
  if (a4 == &type metadata for URL)
  {
    specialized JSONDecoderImpl.unwrapURL<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9, (uint64_t)&v45);
    if (v11) {
      return;
    }
    goto LABEL_14;
  }
  unsigned __int8 v43 = a3;
  uint64_t v42 = v11;
  uint64_t v44 = v10;
  type metadata accessor for NSDecimal(0);
  if (v19 == a4)
  {
    uint64_t v23 = specialized JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(a1, a2, v43, v15, (uint64_t)v14, a7, a8, a9);
    if (v11) {
      return;
    }
    int v45 = (void *)v23;
    uint64_t v46 = v24;
    int v47 = v25;
LABEL_14:
    swift_dynamicCast();
    return;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v20 = v50;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    specialized JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)(a1, a2, v43, (uint64_t)a4, v15, (uint64_t)v14, a7, a8, a9);
    return;
  }
  if (a9 == -1)
  {
    swift_retain();
    goto LABEL_29;
  }
  uint64_t v26 = (void *)swift_allocObject();
  v26[5] = &type metadata for _CodingKey;
  void v26[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v27 = swift_allocObject();
  _OWORD v26[2] = v27;
  *(void *)(v27 + 16) = v14;
  *(void *)(v27 + 24) = a7;
  *(void *)(v27 + 32) = a8;
  *(unsigned char *)(v27 + 40) = a9;
  v26[7] = v15;
  if (v15 >> 62)
  {
    if (v15 >> 62 != 1)
    {
      uint64_t v29 = 0;
      goto LABEL_27;
    }
    uint64_t v28 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v28 = (uint64_t *)(v15 + 64);
  }
  uint64_t v29 = *v28;
  swift_retain();
LABEL_27:
  if (__OFADD__(v29, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  v26[8] = v29 + 1;
  unint64_t v15 = (unint64_t)v26;
LABEL_29:
  uint64_t v41 = v44[20];
  v44[20] = v15;
  unint64_t v30 = (void *)v44[2];
  outlined copy of _CodingKey?((uint64_t)v14, a7, a8, a9);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = v44;
  v44[2] = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    uint64_t v32 = v44;
    unint64_t v30 = v39;
    v44[2] = v39;
  }
  unsigned __int8 v33 = v43;
  unint64_t v35 = v30[2];
  unint64_t v34 = v30[3];
  if (v35 >= v34 >> 1)
  {
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v30);
    unsigned __int8 v33 = v43;
    uint64_t v32 = v44;
    unint64_t v30 = v40;
  }
  v30[2] = v35 + 1;
  uint64_t v36 = &v30[3 * v35];
  v36[4] = a1;
  v36[5] = a2;
  *((unsigned char *)v36 + 48) = v33;
  void v32[2] = v30;
  uint64_t v14 = v32;
  uint64_t v48 = type metadata accessor for JSONDecoderImpl();
  uint64_t v49 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
  int v45 = v14;
  swift_retain();
  dispatch thunk of Decodable.init(from:)();
  if (!v42)
  {
LABEL_38:
    v14[20] = v41;
    swift_retain();
    swift_release();
    uint64_t v14 = (void *)v14[2];
    if (v14[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_40;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
LABEL_40:
    uint64_t v37 = v14[2];
    unint64_t v38 = v44;
    if (!v37)
    {
      __break(1u);
      return;
    }
    goto LABEL_41;
  }
  v14[20] = v41;
  swift_retain();
  swift_release();
  uint64_t v14 = (void *)v14[2];
  if (v14[2])
  {
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_36;
    }
    goto LABEL_45;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
LABEL_36:
  uint64_t v37 = v14[2];
  unint64_t v38 = v44;
  if (!v37)
  {
    __break(1u);
    goto LABEL_38;
  }
LABEL_41:
  void v14[2] = v37 - 1;
  v38[2] = v14;
  swift_release();
  swift_release();
}

uint64_t type metadata accessor for JSONDecoderImpl()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for NSRunLoopMode(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void type metadata accessor for NSDecimal(uint64_t a1)
{
}

uint64_t outlined copy of _CodingKey?(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    return outlined copy of _CodingKey(a1, a2, a3, a4);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }
  return result;
}

uint64_t outlined copy of _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3 || a4 == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<JSONMap.Value>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(id: PredicateExpressions.VariableID, value: Any)>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributeScope.Type>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4]) {
          memmove(v12, a4 + 4, 120 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.IntentType>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<UInt16>?>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double)>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ICUNumberFormatterBase.AttributePosition>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rope<AttributedString._InternalRun>>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Morphology.Pronoun>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DateComponents>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 288);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[36 * v8 + 4]) {
          memmove(v12, a4 + 4, 288 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._AttributeStorage>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, value: Int)>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.TimeFormatStyle.Attributed.PatternComponent>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<iovec>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<DispatchData.Region>>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DispatchData.Region>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<UnsafeBufferPointer<UInt8>>>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<UnsafeRawBufferPointer>>);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      BOOL v12 = v11 - 32;
      if (v11 < 32) {
        BOOL v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      BOOL v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for FloatingPointRoundingRule.CodingValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t JSONDecoderImpl.unwrapURL<A>(from:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v66 = a7;
  unint64_t v67 = a4;
  uint64_t v62 = a8;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v64 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v61 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v60 = (char *)&v60 - v15;
  uint64_t v68 = v16;
  uint64_t v65 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  id v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v60 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v60 - v25;
  if ((a3 & 0xE0) == 0xA0 && !(a2 | a1) && a3 == 160)
  {
    uint64_t v62 = (void *)type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    *uint64_t v27 = &type metadata for URL;
    uint64_t v29 = v63;
    unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
    uint64_t v31 = v65;
    v30(v26, a5, v65);
    v30(v22, (uint64_t)v26, v31);
    uint64_t v32 = v64;
    uint64_t v33 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v22, 1, v68) == 1)
    {
      unint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
      v34(v22, v31);
      _CodingPathNode.path.getter(v67);
      v34(v26, v31);
    }
    else
    {
      uint64_t v41 = v60;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v60, v22, v33);
      uint64_t v42 = _CodingPathNode.path.getter(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v44 = v66;
      *(void *)(inited + 56) = v33;
      *(void *)(inited + 64) = v44;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v32 + 16))(boxed_opaque_existential_1, v41, v33);
      uint64_t v69 = v42;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v65);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v33);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v69 = 0;
    *(void *)&long long v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v46._uint64_t countAndFlagsBits = 0xD000000000000019;
    v46._unint64_t object = (void *)0x80000001823B3360;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 5001813;
    v47._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v47);
    v48._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v48._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(v62 - 1) + 104))(v28, *MEMORY[0x1E4FBBA80]);
  }
  else
  {
    unint64_t v35 = v24;
    uint64_t v36 = v66;
    uint64_t result = JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, v67, a5, v68, v66);
    if (v8) {
      return result;
    }
    URL.init(string:)(result, v38, &v69);
    uint64_t result = swift_bridgeObjectRelease();
    if (v69)
    {
      long long v39 = v70;
      uint64_t v40 = v62;
      *uint64_t v62 = v69;
      *(_OWORD *)(v40 + 1) = v39;
      return result;
    }
    uint64_t v62 = (void *)type metadata accessor for DecodingError();
    swift_allocError();
    char v60 = v49;
    uint64_t v50 = v63;
    unint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
    uint64_t v52 = v65;
    v51((uint64_t)v35, a5, v65);
    v51((uint64_t)v18, (uint64_t)v35, v52);
    uint64_t v53 = v68;
    uint64_t v54 = v64;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v18, 1, v68) == 1)
    {
      BOOL v55 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55(v18, v52);
      _CodingPathNode.path.getter(v67);
      v55(v35, v52);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v61, v18, v53);
      uint64_t v56 = _CodingPathNode.path.getter(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v57 = swift_initStackObject();
      *(_OWORD *)(v57 + 16) = xmmword_1821037E0;
      *(void *)(v57 + 56) = v53;
      *(void *)(v57 + 64) = v36;
      uint64_t v58 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v57 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 16))(v58, v61, v53);
      uint64_t v69 = v56;
      specialized Array.append<A>(contentsOf:)(v57);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v52);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v61, v53);
    }
    unint64_t v59 = v60;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(v62 - 1) + 104))(v59, *MEMORY[0x1E4FBBA78]);
  }
  return swift_willThrow();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t object)
{
  uint64_t v35 = a2;
  unint64_t v39 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) != 0))
  {
    uint64_t v18 = *(void *)(a4 + 56) + 24 * v16;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    unsigned int v34 = *(unsigned __int8 *)(v18 + 16);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v13, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v13, 0, 1, a5);
    uint64_t v22 = v36;
    uint64_t v23 = JSONDecoderImpl.unwrapString<A>(from:for:_:)(v19, v20, v34, v39, (uint64_t)v13, a5, object);
    if (!v22) {
      unint64_t object = v23;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    uint64_t v36 = (char *)v25
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v26[3] = a5;
    v26[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v39);
    unint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v37 = 0xD00000000000001DLL;
    unint64_t v38 = 0x80000001823B2190;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 2238496;
    v29._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    unint64_t object = (uint64_t)v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 3025186;
    v31._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA68], v24);
    swift_willThrow();
  }
  return object;
}

uint64_t JSONDecoderImpl.unwrapString<A>(from:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v68 = a7;
  uint64_t v70 = a5;
  unint64_t v69 = a4;
  v74[20] = *MEMORY[0x1E4F143B8];
  uint64_t v71 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v67 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v65 = (char *)&v64 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v64 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v64 - v21;
  v26.n128_f64[0] = MEMORY[0x1F4188790](v23);
  Swift::String v28 = (char *)&v64 - v27;
  uint64_t v73 = a2;
  if ((v25 & 0xE0) == 0xA0)
  {
    uint64_t v29 = a1;
    if (!(a2 | a1) && v25 == 160)
    {
      uint64_t v73 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v72 = v30;
      *Swift::String v30 = MEMORY[0x1E4FBB1A0];
      uint64_t v31 = v14;
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      v32(v28, v70, v13);
      v32(v22, (uint64_t)v28, v13);
      uint64_t v33 = v71;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v22, 1, a6) == 1)
      {
        unsigned int v34 = *(void (**)(char *, uint64_t))(v14 + 8);
        v34(v22, v13);
        _CodingPathNode.path.getter(v69);
        v34(v28, v13);
      }
      else
      {
        BOOL v55 = v65;
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v65, v22, a6);
        uint64_t v56 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v58 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v58;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(boxed_opaque_existential_1, v55, a6);
        v74[0] = v56;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v13);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v55, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      char v60 = v72;
      v74[0] = 0;
      v74[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._unint64_t object = (void *)0x80000001823B3360;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x676E69727453;
      v62._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(v73 - 8) + 104))(v60, *MEMORY[0x1E4FBBA80]);
      return swift_willThrow();
    }
LABEL_9:
    uint64_t v64 = v29;
    LODWORD(v66) = v25;
    uint64_t v45 = v14;
    Swift::String v46 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
    v46(v19, v70, v13, v26);
    ((void (*)(char *, char *, uint64_t))v46)(v16, v19, v13);
    uint64_t v47 = v71;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v16, 1, a6) == 1)
    {
      Swift::String v48 = *(void (**)(char *, uint64_t))(v14 + 8);
      v48(v16, v13);
      _CodingPathNode.path.getter(v69);
      v48(v19, v13);
    }
    else
    {
      uint64_t v49 = v67;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v67, v16, a6);
      uint64_t v50 = _CodingPathNode.path.getter(v69);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v51 = swift_initStackObject();
      *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
      uint64_t v52 = v68;
      *(void *)(v51 + 56) = a6;
      *(void *)(v51 + 64) = v52;
      uint64_t v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v47 + 16))(v53, v49, a6);
      v74[0] = v50;
      specialized Array.append<A>(contentsOf:)(v51);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v13);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v49, a6);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB1A0], v66, v54);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  uint64_t v29 = a1;
  if (v25 > 0x1Fu) {
    goto LABEL_9;
  }
  MEMORY[0x1F4188790](v24);
  *((unsigned char *)&v64 - 16) = v35;
  *((unsigned char *)&v64 - 15) = v36;
  uint64_t v38 = *(void *)(*(void *)(v37 + 32) + 24);
  MEMORY[0x1F4188790](v39);
  *(&v64 - 4) = (uint64_t)closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)partial apply;
  *(&v64 - 3) = v40;
  uint64_t v41 = v73;
  *(&v64 - 2) = v42;
  *(&v64 - 1) = v41;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 40));
  uint64_t v43 = v66;
  closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v38 + 16), v74);
  os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 40));
  swift_release();
  uint64_t result = swift_release();
  if (!v43) {
    return v74[0];
  }
  return result;
}

void *closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)specialized partial apply@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for ExpressionStructure.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))JSONDecoderImpl.KeyedContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))JSONDecoderImpl.KeyedContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t JSONDecoderImpl.KeyedContainer.decode<A>(_:forKey:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v41 = a7;
  unint64_t v45 = a4;
  uint64_t v39 = a1;
  uint64_t v40 = a3;
  uint64_t v38 = a9;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a5 + 16) && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) != 0))
  {
    uint64_t v37 = a10;
    uint64_t v22 = *(void *)(a5 + 56) + 24 * v20;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    int v36 = *(unsigned __int8 *)(v22 + 16);
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(a6 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v17, a2, a6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v17, 0, 1, a6);
    JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v23, v24, v36, v39, v45, (uint64_t)v17, v41, a6, v38, v37, a8);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v42 = (char *)v28
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v29[3] = a6;
    void v29[4] = a8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a2, a6);
    _CodingPathNode.path.getter(v45);
    unint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v43 = 0xD00000000000001DLL;
    unint64_t v44 = 0x80000001823B2190;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 2238496;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 3025186;
    v34._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x1E4FBBA68], v27);
    return swift_willThrow();
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance LocalizedStringResource.CodingKeys()
{
  unint64_t result = 7955819;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x56746C7561666564;
      break;
    case 2:
      unint64_t result = 0x656C626174;
      break;
    case 3:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 4:
      unint64_t result = 0x5255656C646E7562;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocalizedStringResource.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Locale.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.CodingKeys()
{
  if (*v0) {
    return 0x746E656D75677261;
  }
  else {
    return 7955819;
  }
}

unsigned char *storeEnumTagSinglePayload for String.LocalizationValue.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v66 = a7;
  uint64_t v73 = a4;
  uint64_t v69 = a3;
  uint64_t v64 = a9;
  uint64_t v65 = a1;
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::String v63 = &v60[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v68 = *(char **)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = &v60[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = &v60[-v19];
  uint64_t v70 = a8;
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a5 + 16) || (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v24 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = type metadata accessor for DecodingError();
    uint64_t v69 = swift_allocError();
    Swift::String v33 = v32;
    uint64_t v68 = (char *)v32
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    uint64_t v34 = v70;
    v33[3] = a6;
    v33[4] = v34;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(boxed_opaque_existential_1, a2, a6);
    _CodingPathNode.path.getter(v73);
    unint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v71 = 0xD00000000000001DLL;
    unint64_t v72 = 0x80000001823B2190;
    v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 2238496;
    v37._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 3025186;
    v39._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v39);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x1E4FBBA68], v31);
    return swift_willThrow();
  }
  uint64_t v25 = *(void *)(a5 + 56) + 24 * v23;
  uint64_t v26 = *(void *)v25;
  uint64_t v62 = *(void *)(v25 + 8);
  int v61 = *(unsigned __int8 *)(v25 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t, uint64_t))(v13 + 16))(v20, a2, a6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, a6);
  uint64_t v27 = v68;
  (*((void (**)(unsigned char *, void *, uint64_t))v68 + 2))(v17, v20, v15);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, a6) == 1)
  {
    Swift::String v28 = (void (*)(unsigned char *, uint64_t))*((void *)v27 + 1);
    v28(v20, v15);
    v28(v17, v15);
    unint64_t v29 = v73;
    swift_retain();
    uint64_t v30 = v69;
    goto LABEL_12;
  }
  uint64_t v41 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v13 + 32);
  uint64_t v42 = v63;
  v41((uint64_t *)v63, v17, a6);
  unint64_t v43 = (uint64_t *)swift_allocObject();
  uint64_t v44 = v70;
  v43[5] = a6;
  v43[6] = v44;
  unint64_t v45 = __swift_allocate_boxed_opaque_existential_1(v43 + 2);
  v41(v45, v42, a6);
  uint64_t v47 = (void (*)(void *, uint64_t))*((void *)v27 + 1);
  Swift::String v46 = v27 + 8;
  v47(v20, v15);
  unint64_t v48 = v73;
  v43[7] = v73;
  if (v48 >> 62)
  {
    uint64_t v30 = v69;
    if (v48 >> 62 != 1)
    {
      uint64_t v51 = 1;
      goto LABEL_11;
    }
    uint64_t v49 = (uint64_t *)((v48 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v49 = (uint64_t *)(v48 + 64);
    uint64_t v30 = v69;
  }
  uint64_t v50 = *v49;
  swift_retain();
  uint64_t v51 = v50 + 1;
  if (!__OFADD__(v50, 1))
  {
LABEL_11:
    v43[8] = v51;
    unint64_t v29 = (unint64_t)v43;
LABEL_12:
    Swift::String v46 = *(char **)(v30 + 160);
    *(void *)(v30 + 160) = v29;
    unint64_t v20 = *(void **)(v30 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v30 + 16) = v20;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  __break(1u);
LABEL_26:
  unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
  *(void *)(v30 + 16) = v20;
LABEL_13:
  unint64_t v54 = v20[2];
  unint64_t v53 = v20[3];
  if (v54 >= v53 >> 1) {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v20);
  }
  void v20[2] = v54 + 1;
  BOOL v55 = &v20[3 * v54];
  uint64_t v56 = v62;
  v55[4] = v26;
  v55[5] = v56;
  *((unsigned char *)v55 + 48) = v61;
  *(void *)(v30 + 16) = v20;
  uint64_t v57 = v67;
  JSONDecoderImpl.container<A>(keyedBy:)();
  if (v57)
  {
    *(void *)(v30 + 160) = v46;
    swift_retain();
    swift_release();
    uint64_t v58 = *(void **)(v30 + 16);
    if (v58[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v59 = v58[2];
        if (v59)
        {
LABEL_23:
          v58[2] = v59 - 1;
          *(void *)(v30 + 16) = v58;
          swift_release();
          return swift_release();
        }
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew()(v58);
    uint64_t v59 = v58[2];
    if (v59) {
      goto LABEL_23;
    }
LABEL_19:
    __break(1u);
  }
  *(void *)(v30 + 160) = v46;
  swift_retain();
  swift_release();
  uint64_t v58 = *(void **)(v30 + 16);
  if (!v58[2])
  {
    __break(1u);
LABEL_31:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
    uint64_t v58 = (void *)result;
    uint64_t v59 = *(void *)(result + 16);
    if (v59) {
      goto LABEL_23;
    }
    goto LABEL_32;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v59 = v58[2];
  if (v59) {
    goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for ExpressionStructure.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PredicateExpressionCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void JSONDecoderImpl.unwrapDate<A>(from:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, double *a8@<X8>)
{
  uint64_t v212 = a7;
  *((void *)&v219 + 1) = a2;
  uint64_t v215 = a5;
  unint64_t v216 = a4;
  *(void *)&long long v219 = a1;
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  uint64_t v214 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v211 = (char *)&v206 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v208 = (char *)&v206 - v12;
  MEMORY[0x1F4188790](v13);
  unint64_t v209 = (void (*)(long long *))((char *)&v206 - v14);
  MEMORY[0x1F4188790](v15);
  unint64_t v210 = (double *)((char *)&v206 - v16);
  unint64_t v217 = v17;
  uint64_t v18 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)&v206 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v206 - v22;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v206 - v25;
  MEMORY[0x1F4188790](v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v206 - v29;
  MEMORY[0x1F4188790](v31);
  Swift::String v33 = (char *)&v206 - v32;
  MEMORY[0x1F4188790](v34);
  Swift::String v36 = (char *)&v206 - v35;
  v41.n128_f64[0] = MEMORY[0x1F4188790](v37);
  unint64_t v43 = (char *)&v206 - v42;
  LODWORD(v218) = a3;
  if ((a3 & 0xE0) == 0xA0 && v219 == 0 && v218 == 160)
  {
    unint64_t v44 = v38;
    unint64_t v45 = v39;
    uint64_t v220 = type metadata accessor for DecodingError();
    *((void *)&v219 + 1) = swift_allocError();
    uint64_t v47 = v46;
    void *v46 = &type metadata for Date;
    unint64_t v48 = *(void (**)(char *, uint64_t, char *))(v44 + 16);
    v48(v43, v215, v45);
    v48(v36, (uint64_t)v43, v45);
    uint64_t v49 = v214;
    unint64_t v50 = v217;
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v214 + 48))(v36, 1, v217) == 1)
    {
      uint64_t v51 = *(void (**)(char *, char *))(v44 + 8);
      v51(v36, v45);
      _CodingPathNode.path.getter(v216);
      v51(v43, v45);
    }
    else
    {
      unint64_t v88 = *(void (**)(double *, char *, unint64_t))(v49 + 32);
      *(void *)&long long v219 = v47;
      uint64_t v89 = v210;
      v88(v210, v36, v50);
      uint64_t v90 = _CodingPathNode.path.getter(v216);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v92 = v212;
      *(void *)(inited + 56) = v50;
      *(void *)(inited + 64) = v92;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, double *, unint64_t))(v49 + 16))(boxed_opaque_existential_1, v89, v50);
      *(void *)&long long v222 = v90;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, char *))(v44 + 8))(v43, v45);
      unint64_t v94 = v89;
      uint64_t v47 = (void *)v219;
      (*(void (**)(double *, unint64_t))(v49 + 8))(v94, v50);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *(void *)&long long v222 = 0;
    *((void *)&v222 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v95._unint64_t object = (void *)0x80000001823B3360;
    v95._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v95);
    v96._uint64_t countAndFlagsBits = 1702125892;
    v96._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v96);
    v97._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v97._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v97);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v220 - 8) + 104))(v47, *MEMORY[0x1E4FBBA80]);
    goto LABEL_20;
  }
  unint64_t v210 = a8;
  uint64_t v52 = v220;
  unint64_t v54 = *(void (**)(long long *))(v220 + 40);
  unint64_t v53 = *(char **)(v220 + 48);
  if (*(unsigned char *)(v220 + 56))
  {
    if (*(unsigned char *)(v220 + 56) == 1)
    {
      unsigned __int8 v207 = *(char **)(v220 + 48);
      unint64_t v209 = v54;
      BOOL v55 = *(void (**)(char *, uint64_t, char *, __n128))(v38 + 16);
      uint64_t v56 = (uint64_t)v39;
      unint64_t v57 = v38;
      v55(v23, v215, v39, v41);
      ((void (*)(char *, char *, uint64_t))v55)(v20, v23, v56);
      uint64_t v58 = v214;
      unint64_t v59 = v217;
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v214 + 48))(v20, 1, v217) == 1)
      {
        char v60 = *(void (**)(char *, uint64_t))(v57 + 8);
        int v61 = v207;
        swift_retain();
        v60(v23, v56);
        v60(v20, v56);
        uint64_t v62 = (uint64_t)v61;
        unint64_t v63 = v216;
        unint64_t v64 = v216 & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        goto LABEL_43;
      }
      unint64_t v80 = *(void (**)(char *, char *, unint64_t))(v58 + 32);
      uint64_t v214 = v58 + 32;
      v80(v211, v20, v59);
      uint64_t v81 = (uint64_t *)swift_allocObject();
      uint64_t v65 = v207;
      unint64_t v63 = (unint64_t)v81;
      uint64_t v82 = v212;
      v81[5] = v59;
      v81[6] = v82;
      uint64_t v83 = __swift_allocate_boxed_opaque_existential_1(v81 + 2);
      v80((char *)v83, v211, v59);
      uint64_t v84 = *(void (**)(char *, uint64_t))(v57 + 8);
      uint64_t v85 = (uint64_t)v65;
      swift_retain();
      v84(v23, v56);
      unint64_t v86 = v216;
      *(void *)(v63 + 56) = v216;
      if (v86 >> 62)
      {
        if (v86 >> 62 != 1)
        {
          uint64_t v148 = 1;
          goto LABEL_42;
        }
        uint64_t v87 = (uint64_t *)((v86 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v87 = (uint64_t *)(v86 + 64);
      }
      uint64_t v147 = *v87;
      swift_retain();
      uint64_t v148 = v147 + 1;
      if (!__OFADD__(v147, 1))
      {
LABEL_42:
        *(void *)(v63 + 64) = v148;
        unint64_t v64 = v63 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v62 = v85;
LABEL_43:
        unint64_t v149 = *(void *)(v52 + 160);
        *(void *)(v52 + 160) = v63;
        unsigned __int8 v150 = *(void **)(v52 + 16);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v52 + 16) = v150;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unsigned __int8 v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v150[2] + 1, 1, v150);
          *(void *)(v52 + 16) = v150;
        }
        unint64_t v153 = v150[2];
        unint64_t v152 = v150[3];
        if (v153 >= v152 >> 1) {
          unsigned __int8 v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v152 > 1), v153 + 1, 1, v150);
        }
        v150[2] = v153 + 1;
        uint64_t v154 = &v150[3 * v153];
        uint64_t v155 = *((void *)&v219 + 1);
        uint64_t v156 = v220;
        v154[4] = v219;
        v154[5] = v155;
        *((unsigned char *)v154 + 48) = v218;
        *(void *)(v156 + 16) = v150;
        *((void *)&v223 + 1) = type metadata accessor for JSONDecoderImpl();
        uint64_t v224 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
        *(void *)&long long v222 = v156;
        swift_retain();
        uint64_t v157 = v213;
        v209(&v222);
        uint64_t v158 = (uint64_t)&v222;
        if (!v157)
        {
LABEL_52:
          __swift_destroy_boxed_opaque_existential_1(v158);
          *(void *)(v156 + 160) = v149;
          unint64_t v160 = (void *)(v149 & 0x3FFFFFFFFFFFFFFFLL);
          swift_retain();
          swift_release();
          uint64_t v79 = *(void **)(v156 + 16);
          if (v79[2])
          {
            char v161 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v149 = (unint64_t)v209;
            if (v161)
            {
              uint64_t v159 = v79[2];
              if (v159) {
                goto LABEL_55;
              }
              goto LABEL_92;
            }
          }
          else
          {
            __break(1u);
          }
          uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew()(v79);
          uint64_t v159 = v79[2];
          if (v159) {
            goto LABEL_55;
          }
LABEL_92:
          __break(1u);
LABEL_93:
          unint64_t v160 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v160[2] + 1, 1, v160);
          v79[2] = v160;
LABEL_74:
          unint64_t v192 = v160[2];
          unint64_t v191 = v160[3];
          if (v192 >= v191 >> 1) {
            unint64_t v160 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v191 > 1), v192 + 1, 1, v160);
          }
          v160[2] = v192 + 1;
          unint64_t v193 = &v160[3 * v192];
          uint64_t v194 = *((void *)&v219 + 1);
          uint64_t v195 = v220;
          v193[4] = v219;
          v193[5] = v194;
          *((unsigned char *)v193 + 48) = v218;
          *(void *)(v195 + 16) = v160;
          swift_retain();
          uint64_t v196 = v213;
          specialized JSONDecoderImpl.decode(_:)();
          if (!v196)
          {
LABEL_81:
            uint64_t v200 = v197;
            swift_release();
            *(void *)unint64_t v210 = v200;
            *(void *)(v195 + 160) = v64;
            swift_retain();
            swift_release();
            unint64_t v198 = *(void **)(v195 + 16);
            if (v198[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v199 = v198[2];
                if (v199) {
                  goto LABEL_84;
                }
                goto LABEL_101;
              }
            }
            else
            {
              __break(1u);
            }
            unint64_t v198 = specialized _ArrayBuffer._consumeAndCreateNew()(v198);
            uint64_t v199 = v198[2];
            if (v199) {
              goto LABEL_84;
            }
LABEL_101:
            __break(1u);
            goto LABEL_102;
          }
          swift_release();
          *(void *)(v195 + 160) = v64;
          swift_retain();
          swift_release();
          unint64_t v198 = *(void **)(v195 + 16);
          if (v198[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v199 = v198[2];
              if (v199)
              {
LABEL_84:
                v198[2] = v199 - 1;
                *(void *)(v195 + 16) = v198;
                swift_release();
                swift_release();
                return;
              }
              goto LABEL_80;
            }
          }
          else
          {
            __break(1u);
          }
          unint64_t v198 = specialized _ArrayBuffer._consumeAndCreateNew()(v198);
          uint64_t v199 = v198[2];
          if (v199) {
            goto LABEL_84;
          }
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v222);
        *(void *)(v156 + 160) = v149;
        swift_retain();
        swift_release();
        uint64_t v79 = *(void **)(v156 + 16);
        if (v79[2])
        {
          uint64_t v158 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v149 = (unint64_t)v209;
          if (v158)
          {
            uint64_t v159 = v79[2];
            if (v159)
            {
LABEL_55:
              v79[2] = v159 - 1;
              *(void *)(v156 + 16) = v79;
              swift_release();
              swift_release();
              uint64_t v68 = (void *)v149;
              uint64_t v69 = v62;
              char v70 = 1;
              goto LABEL_56;
            }
            goto LABEL_51;
          }
        }
        else
        {
          __break(1u);
        }
        uint64_t v158 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v79);
        uint64_t v79 = (void *)v158;
        uint64_t v159 = *(void *)(v158 + 16);
        if (v159) {
          goto LABEL_55;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      __break(1u);
LABEL_60:
      unsigned __int8 v207 = v23;
      uint64_t v162 = type metadata accessor for DecodingError();
      *((void *)&v219 + 1) = swift_allocError();
      uint64_t v220 = v163;
      uint64_t v164 = v56;
      unint64_t v165 = *(void (**)(char *, uint64_t, char *))(v63 + 16);
      unint64_t v166 = v65;
      unint64_t v167 = v211;
      v165(v65, v164, v211);
      unint64_t v168 = v206;
      v165(v206, (uint64_t)v65, v167);
      uint64_t v169 = v214;
      unint64_t v170 = v217;
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v214 + 48))(v168, 1, v217) == 1)
      {
        unint64_t v171 = *(void (**)(char *, char *))(v63 + 8);
        v171(v168, v167);
        _CodingPathNode.path.getter(v216);
        v171(v166, v167);
      }
      else
      {
        unint64_t v179 = *(void (**)(char *, char *, unint64_t))(v169 + 32);
        *(void *)&long long v219 = v162;
        uint64_t v180 = v208;
        v179(v208, v168, v170);
        uint64_t v181 = _CodingPathNode.path.getter(v216);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v182 = v169;
        uint64_t v183 = swift_initStackObject();
        *(_OWORD *)(v183 + 16) = xmmword_1821037E0;
        uint64_t v184 = v212;
        *(void *)(v183 + 56) = v170;
        *(void *)(v183 + 64) = v184;
        unint64_t v185 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v183 + 32));
        (*(void (**)(uint64_t *, char *, unint64_t))(v182 + 16))(v185, v180, v170);
        *(void *)&long long v222 = v181;
        specialized Array.append<A>(contentsOf:)(v183);
        (*(void (**)(char *, char *))(v63 + 8))(v166, v167);
        unint64_t v186 = v180;
        uint64_t v162 = v219;
        (*(void (**)(char *, unint64_t))(v182 + 8))(v186, v170);
      }
      uint64_t v187 = v220;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v162 - 8) + 104))(v187, *MEMORY[0x1E4FBBA78], v162);
      swift_willThrow();
      uint64_t v68 = v209;
      uint64_t v69 = (uint64_t)v207;
      char v70 = 0;
      goto LABEL_56;
    }
    p_tp = &__tp;
    unint64_t v72 = v216;
    switch((unint64_t)v54)
    {
      case 1uLL:
        uint64_t v146 = v213;
        specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v219, *((uint64_t *)&v219 + 1), v218, v216, v215, v217, v212);
        if (!v146) {
          goto LABEL_39;
        }
        return;
      case 2uLL:
        uint64_t v102 = v213;
        specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v219, *((uint64_t *)&v219 + 1), v218, v216, v215, v217, v212);
        if (v102) {
          return;
        }
        double v104 = v103 / 1000.0;
LABEL_39:
        *unint64_t v210 = v104 + -978307200.0;
        return;
      case 3uLL:
        uint64_t v105 = v213;
        uint64_t v106 = JSONDecoderImpl.unwrapString<A>(from:for:_:)(v219, *((uint64_t *)&v219 + 1), v218, v216, v215, v217, v212);
        if (v105) {
          return;
        }
        unint64_t v217 = v106;
        *(void *)&long long v219 = v107;
        uint64_t v74 = 0;
        if (one-time initialization token for cache == -1) {
          goto LABEL_27;
        }
        goto LABEL_98;
      default:
        uint64_t v73 = *(void (**)(char *, uint64_t, char *, __n128))(v38 + 16);
        uint64_t v74 = v39;
        unint64_t v75 = v38;
        v73(v33, v215, v39, v41);
        ((void (*)(char *, char *, char *))v73)(v30, v33, v74);
        uint64_t v76 = v214;
        unint64_t v77 = v217;
        if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v214 + 48))(v30, 1, v217) == 1)
        {
          uint64_t v78 = *(void (**)(char *, char *))(v75 + 8);
          v78(v33, v74);
          v78(v30, v74);
          swift_retain();
          uint64_t v79 = (void *)v220;
          goto LABEL_73;
        }
        unint64_t v172 = *(void (**)(void (*)(void), char *, unint64_t))(v76 + 32);
        v172((void (*)(void))v209, v30, v77);
        uint64_t v173 = (void (*)(uint64_t *, void (*)(void), unint64_t))v172;
        unint64_t v174 = (uint64_t *)swift_allocObject();
        uint64_t v175 = v212;
        v174[5] = v77;
        v174[6] = v175;
        unint64_t v176 = __swift_allocate_boxed_opaque_existential_1(v174 + 2);
        v173(v176, (void (*)(void))v209, v77);
        unint64_t v177 = *(void (**)(char *, char *))(v75 + 8);
        p_tp = (timespec *)(v75 + 8);
        v177(v33, v74);
        v174[7] = v72;
        uint64_t v79 = (void *)v220;
        if (v72 >> 62)
        {
          if (v72 >> 62 != 1)
          {
            uint64_t v189 = 0;
            goto LABEL_71;
          }
          unint64_t v178 = (uint64_t *)((v72 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          unint64_t v178 = (uint64_t *)(v72 + 64);
        }
        uint64_t v189 = *v178;
        swift_retain();
LABEL_71:
        if (__OFADD__(v189, 1))
        {
          __break(1u);
LABEL_98:
          uint64_t v106 = swift_once();
LABEL_27:
          unint64_t v108 = (os_unfair_lock_s *)&_NS_cmark_node_get_fence_info;
          unint64_t v109 = (os_unfair_lock_s *)static TimeZoneCache.cache;
          MEMORY[0x1F4188790](v106);
          *(&v206 - 2) = 0;
          unint64_t v110 = v109 + 36;
          swift_retain_n();
          os_unfair_lock_lock(v109 + 36);
          closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v109[4], &v222);
          if (!v74)
          {
            os_unfair_lock_unlock(v109 + 36);
            uint64_t v111 = swift_release_n();
            uint64_t v218 = v222;
            if ((void)v222)
            {
              uint64_t v112 = *((void *)&v222 + 1);
              unint64_t v110 = (os_unfair_lock_s *)static TimeZoneCache.cache;
              MEMORY[0x1F4188790](v111);
              *(&v206 - 2) = 0;
              unint64_t v108 = v110 + 36;
              swift_retain_n();
              os_unfair_lock_lock(v110 + 36);
              closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v110[4], &v222);
              *((void *)&v219 + 1) = 0;
              os_unfair_lock_unlock(v110 + 36);
              swift_release_n();
              if ((void)v222)
              {
                uint64_t v113 = v218;
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                *(void *)&long long v222 = v113;
                *((void *)&v222 + 1) = v112;
                uint64_t v114 = v112;
                uint64_t v115 = (void *)v219;
                if (one-time initialization token for cache != -1) {
                  swift_once();
                }
                type metadata accessor for _LocaleUnlocalized();
                swift_retain();
                uint64_t v116 = swift_initStaticObject();
                swift_release();
                uint64_t v117 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl((unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized, (void (*)(uint64_t))type metadata accessor for _LocaleUnlocalized);
                p_tp->tv_sec = v116;
                p_tp->uint64_t tv_nsec = v117;
                p_tp[1].uint64_t tv_nsec = 0;
                v227[8] = 1;
                type metadata accessor for _CalendarGregorian();
                swift_allocObject();
                _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v221, (uint64_t *)&v222, (long long *)&__tp.tv_sec, 2, 0, 4, 0, (uint64_t)v227);
                uint64_t v119 = v118;
                LODWORD(v222) = 0x10000;
                BYTE4(v222) = 1;
                *((void *)&v222 + 1) = 0;
                *(void *)&long long v223 = v118;
                *((void *)&v223 + 1) = v113;
                uint64_t v224 = v114;
                uint64_t v120 = v217;
                Date.ISO8601FormatStyle.parse(_:in:)(v217, (unint64_t)v115, (uint64_t)&__tp);
                if ((v226 & 1) == 0)
                {
                  uint64_t tv_nsec = p_tp->tv_nsec;
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease();
                  swift_release();
                  *(void *)unint64_t v210 = tv_nsec;
                  return;
                }
                LODWORD(v222) = 0x10000;
                BYTE4(v222) = 1;
                *((void *)&v222 + 1) = 0;
                *(void *)&long long v223 = v119;
                *((void *)&v223 + 1) = v113;
                uint64_t v224 = v114;
                p_tp->tv_sec = 0;
                p_tp->uint64_t tv_nsec = 0;
                clock_gettime(_CLOCK_REALTIME, &__tp);
                v121._time = (double)p_tp->tv_sec + -978307200.0 + (double)p_tp->tv_nsec * 0.000000001;
                *(double *)&p_tp->tv_sec = v121._time;
                Swift::String v122 = Date.ISO8601FormatStyle.format(_:)(v121);
                *(void *)&long long v222 = 0;
                *((void *)&v222 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(88);
                v123._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
                v123._unint64_t object = (void *)0xED00002065737261;
                String.append(_:)(v123);
                v124._uint64_t countAndFlagsBits = v120;
                v124._unint64_t object = v115;
                String.append(_:)(v124);
                v125._uint64_t countAndFlagsBits = 0xD000000000000046;
                v125._unint64_t object = (void *)0x80000001823AB110;
                String.append(_:)(v125);
                String.append(_:)(v122);
                v126._uint64_t countAndFlagsBits = 46;
                v126._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v126);
                long long v127 = v222;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                uint64_t v128 = swift_initStackObject();
                *(_OWORD *)(v128 + 16) = xmmword_1821037E0;
                *(void *)(v128 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                *(void *)(v128 + 72) = MEMORY[0x1E4FBB1A0];
                *(void *)(v128 + 40) = v129;
                *(_OWORD *)(v128 + 48) = v127;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                unint64_t v130 = (void *)static _DictionaryStorage.allocate(capacity:)();
                outlined init with copy of (Hashable & Sendable)?(v128 + 32, (uint64_t)&v222, &demangling cache variable for type metadata for (String, Any));
                long long v131 = v222;
                swift_retain();
                unint64_t v132 = specialized __RawDictionaryStorage.find<A>(_:)(v131, *((uint64_t *)&v131 + 1));
                if ((v133 & 1) == 0)
                {
                  v130[(v132 >> 6) + 8] |= 1 << v132;
                  *(_OWORD *)(v130[6] + 16 * v132) = v131;
                  outlined init with take of Any(&v223, (_OWORD *)(v130[7] + 32 * v132));
                  uint64_t v134 = v130[2];
                  BOOL v135 = __OFADD__(v134, 1);
                  uint64_t v136 = v134 + 1;
                  uint64_t v137 = v220;
                  if (!v135)
                  {
                    v130[2] = v136;
                    swift_release();
                    swift_bridgeObjectRelease();
                    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                    id v138 = objc_allocWithZone((Class)NSError);
                    uint64_t v139 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    id v140 = objc_msgSend(v138, sel_initWithDomain_code_userInfo_, v139, 2048, _NativeDictionary.bridged()());
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    id v141 = objc_msgSend(v140, sel_domain);
                    id v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
                    uint64_t v144 = v143;

                    if (v142 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
                      && v144 == v145)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      char v201 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v201 & 1) == 0) {
                        goto LABEL_104;
                      }
                    }
                    swift_willThrow();
                    swift_unknownObjectRelease();
                    swift_release();

                    swift_bridgeObjectRelease();
                    uint64_t v202 = type metadata accessor for DecodingError();
                    swift_allocError();
                    uint64_t v204 = v203;
                    unint64_t v205 = *(void *)(v137 + 160);
                    swift_retain();
                    _CodingPathNode.path.getter(v205);
                    swift_release();
                    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
                    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v202 - 8) + 104))(v204, *MEMORY[0x1E4FBBA78], v202);
LABEL_20:
                    swift_willThrow();
                    return;
                  }
LABEL_103:
                  __break(1u);
LABEL_104:
                  __break(1u);
                }
LABEL_102:
                __break(1u);
                goto LABEL_103;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
          }
          os_unfair_lock_unlock(v110);
          __break(1u);
          os_unfair_lock_unlock(v108);
          __break(1u);
          return;
        }
        v174[8] = v189 + 1;
        unint64_t v72 = (unint64_t)v174;
LABEL_73:
        unint64_t v64 = v79[20];
        v79[20] = v72;
        unint64_t v160 = (void *)v79[2];
        swift_retain();
        char v190 = swift_isUniquelyReferenced_nonNull_native();
        v79[2] = v160;
        if (v190) {
          goto LABEL_74;
        }
        goto LABEL_93;
    }
  }
  unint64_t v206 = v26;
  unint64_t v23 = v53;
  uint64_t v65 = v40;
  uint64_t v211 = v39;
  unint64_t v63 = v38;
  uint64_t v66 = v54;
  uint64_t v56 = v215;
  uint64_t v67 = v213;
  JSONDecoderImpl.unwrapString<A>(from:for:_:)(v219, *((uint64_t *)&v219 + 1), v218, v216, v215, v217, v212);
  if (!v67)
  {
    unint64_t v209 = v54;
    uint64_t v98 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v99 = objc_msgSend(v66, sel_dateFromString_, v98);
    swift_unknownObjectRelease();
    if (v99)
    {
      objc_msgSend(v99, sel_timeIntervalSinceReferenceDate);
      uint64_t v101 = v100;
      outlined consume of JSONEncoder.DateEncodingStrategy(v209, (uint64_t)v23, 0);

      *(void *)unint64_t v210 = v101;
      return;
    }
    goto LABEL_60;
  }
  uint64_t v68 = v54;
  uint64_t v69 = (uint64_t)v23;
  char v70 = 0;
LABEL_56:
  outlined consume of JSONEncoder.DateEncodingStrategy(v68, v69, v70);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSDictionary()
{
  return NSDictionary.customMirror.getter();
}

uint64_t NSDictionary.customMirror.getter()
{
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  swift_unknownObjectRetain();
  if (!static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
    objc_msgSend(v0, sel_copyWithZone_, 0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSObject : Swift.AnyObject]);
  return Mirror.init(reflecting:)();
}

BOOL static Set._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  swift_unknownObjectRetain();
  uint64_t v8 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v8)
  {
    unint64_t v9 = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    uint64_t v8 = ~(v9 >> 1) & 0x4000000000000000 | v9;
  }
  _swift_isClassOrObjCExistentialType();
  uint64_t v10 = specialized _setDownCastConditional<A, B>(_:)(v8, a3, a4);
  swift_bridgeObjectRelease();
  *a2 = v10;
  return v10 != 0;
}

uint64_t specialized _setDownCastConditional<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  MEMORY[0x1F4188790](v5);
  BOOL v7 = (char *)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v78 - v9;
  uint64_t v88 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11);
  unsigned __int8 v91 = (char *)v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v87 = (char *)v78 - v14;
  MEMORY[0x1F4188790](v15);
  unint64_t v86 = (char *)v78 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v85 = (char *)v78 - v18;
  unint64_t v19 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v20 = a1;
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v21 = MEMORY[0x1E4FBC870];
    goto LABEL_6;
  }
  uint64_t v20 = a1;
  if (!__CocoaSet.count.getter()) {
    goto LABEL_5;
  }
LABEL_3:
  type metadata accessor for _SetStorage();
  uint64_t v21 = static _SetStorage.allocate(capacity:)();
LABEL_6:
  uint64_t v22 = v20;
  uint64_t v94 = v21;
  uint64_t v23 = MEMORY[0x1E4FBC838];
  if (a2 == MEMORY[0x1E4FBB1A0])
  {
    if (v19)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for NSObject();
      lazy protocol witness table accessor for type NSObject and conformance NSObject();
      uint64_t result = Set.Iterator.init(_cocoa:)();
      uint64_t v22 = v95;
      unsigned __int8 v91 = v96;
      int64_t v27 = v97;
      unint64_t v28 = v98;
      unint64_t v29 = v99;
    }
    else
    {
      uint64_t v56 = -1 << *(unsigned char *)(v20 + 32);
      uint64_t v57 = *(void *)(v20 + 56);
      unsigned __int8 v91 = (char *)(v20 + 56);
      int64_t v27 = ~v56;
      uint64_t v58 = -v56;
      if (v58 < 64) {
        uint64_t v59 = ~(-1 << v58);
      }
      else {
        uint64_t v59 = -1;
      }
      unint64_t v29 = v59 & v57;
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v28 = 0;
    }
    int64_t v83 = v27;
    uint64_t v84 = v22 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v87 = (char *)((unint64_t)(v27 + 64) >> 6);
    char v60 = (void (**)(char *, void, uint64_t, uint64_t))(v88 + 56);
    int v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v88 + 32);
    uint64_t v63 = MEMORY[0x1E4FBB1A0];
    uint64_t v88 = v23 + 8;
    uint64_t v90 = v22;
    if (v22 < 0) {
      goto LABEL_58;
    }
    while (1)
    {
      if (v29)
      {
        uint64_t v64 = (v29 - 1) & v29;
        unint64_t v65 = __clz(__rbit64(v29)) | (v28 << 6);
        uint64_t v66 = (char *)v28;
      }
      else
      {
        uint64_t v69 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_86;
        }
        if (v69 >= (uint64_t)v87)
        {
LABEL_83:
          unint64_t v93 = 0;
LABEL_84:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          return v94;
        }
        unint64_t v70 = *(void *)&v91[8 * v69];
        uint64_t v66 = (char *)(v28 + 1);
        if (!v70)
        {
          uint64_t v66 = (char *)(v28 + 2);
          if ((uint64_t)(v28 + 2) >= (uint64_t)v87) {
            goto LABEL_83;
          }
          unint64_t v70 = *(void *)&v91[8 * (void)v66];
          if (!v70)
          {
            uint64_t v66 = (char *)(v28 + 3);
            if ((uint64_t)(v28 + 3) >= (uint64_t)v87) {
              goto LABEL_83;
            }
            unint64_t v70 = *(void *)&v91[8 * (void)v66];
            if (!v70)
            {
              uint64_t v66 = (char *)(v28 + 4);
              if ((uint64_t)(v28 + 4) >= (uint64_t)v87) {
                goto LABEL_83;
              }
              unint64_t v70 = *(void *)&v91[8 * (void)v66];
              if (!v70)
              {
                uint64_t v66 = (char *)(v28 + 5);
                if ((uint64_t)(v28 + 5) >= (uint64_t)v87) {
                  goto LABEL_83;
                }
                unint64_t v70 = *(void *)&v91[8 * (void)v66];
                if (!v70)
                {
                  unint64_t v71 = (char *)(v28 + 6);
                  do
                  {
                    if (v87 == v71) {
                      goto LABEL_83;
                    }
                    unint64_t v70 = *(void *)&v91[8 * (void)v71++];
                  }
                  while (!v70);
                  uint64_t v66 = v71 - 1;
                }
              }
            }
          }
        }
        uint64_t v64 = (v70 - 1) & v70;
        unint64_t v65 = __clz(__rbit64(v70)) + ((void)v66 << 6);
      }
      uint64_t v68 = *(void **)(*(void *)(v22 + 48) + 8 * v65);
      unint64_t v93 = v68;
      id v72 = v68;
      while (1)
      {
        uint64_t v92 = (uint64_t)v68;
        type metadata accessor for NSObject();
        int v73 = swift_dynamicCast();
        (*v60)(v10, v73 ^ 1u, 1, v63);
        if ((*v61)(v10, 1, v63) == 1)
        {
          swift_release();
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          (*(void (**)(char *, uint64_t))(v79 + 8))(v10, v80);
          return 0;
        }
        uint64_t v74 = *v62;
        unint64_t v75 = v85;
        (*v62)(v85, v10, v63);
        uint64_t v76 = (uint64_t)v86;
        v74(v86, v75, v63);
        uint64_t v77 = type metadata accessor for _NativeSet();
        uint64_t result = _NativeSet._unsafeUpdate(with:)(v76, v77);
        unint64_t v28 = (unint64_t)v66;
        unint64_t v29 = v64;
        uint64_t v22 = v90;
        if ((v90 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_58:
        uint64_t v67 = __CocoaSet.Iterator.next()();
        if (!v67) {
          goto LABEL_83;
        }
        uint64_t v92 = v67;
        type metadata accessor for NSObject();
        swift_dynamicCast();
        uint64_t v68 = v93;
        uint64_t v66 = (char *)v28;
        uint64_t v64 = v29;
      }
    }
  }
  if (v19)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v22 = v95;
    uint64_t v84 = (uint64_t)v96;
    uint64_t v25 = v97;
    unint64_t v19 = v98;
    unint64_t v26 = v99;
  }
  else
  {
    uint64_t v30 = -1 << *(unsigned char *)(v20 + 32);
    uint64_t v31 = *(void *)(v20 + 56);
    uint64_t v84 = v20 + 56;
    uint64_t v25 = ~v30;
    uint64_t v32 = -v30;
    if (v32 < 64) {
      uint64_t v33 = ~(-1 << v32);
    }
    else {
      uint64_t v33 = -1;
    }
    unint64_t v26 = v33 & v31;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
  }
  uint64_t v82 = v22 & 0x7FFFFFFFFFFFFFFFLL;
  v78[1] = v25;
  int64_t v83 = (unint64_t)(v25 + 64) >> 6;
  uint64_t v85 = (char *)(v88 + 48);
  unint64_t v86 = (char *)(v88 + 56);
  uint64_t v34 = (void (**)(char *, char *, uint64_t))(v88 + 32);
  uint64_t v35 = v21 + 56;
  uint64_t v81 = v23 + 8;
  uint64_t v90 = v22;
  while (v22 < 0)
  {
    uint64_t v40 = __CocoaSet.Iterator.next()();
    if (!v40) {
      goto LABEL_82;
    }
    uint64_t v92 = v40;
    type metadata accessor for NSObject();
    swift_dynamicCast();
    __n128 v41 = v93;
    unint64_t v39 = v19;
    uint64_t v37 = v26;
LABEL_40:
    uint64_t v92 = (uint64_t)v41;
    type metadata accessor for NSObject();
    int v46 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))v86)(v7, v46 ^ 1u, 1, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v85)(v7, 1, a2) == 1)
    {
      swift_release();
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v7, v80);
      return 0;
    }
    uint64_t v47 = *v34;
    unint64_t v48 = v87;
    (*v34)(v87, v7, a2);
    v47(v91, v48, a2);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v49 = -1 << *(unsigned char *)(v21 + 32);
    unint64_t v50 = result & ~v49;
    unint64_t v51 = v50 >> 6;
    if (((-1 << v50) & ~*(void *)(v35 + 8 * (v50 >> 6))) != 0)
    {
      unint64_t v36 = __clz(__rbit64((-1 << v50) & ~*(void *)(v35 + 8 * (v50 >> 6)))) | v50 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v22 = v90;
    }
    else
    {
      char v52 = 0;
      unint64_t v53 = (unint64_t)(63 - v49) >> 6;
      uint64_t v22 = v90;
      do
      {
        if (++v51 == v53 && (v52 & 1) != 0)
        {
          __break(1u);
          goto LABEL_85;
        }
        BOOL v54 = v51 == v53;
        if (v51 == v53) {
          unint64_t v51 = 0;
        }
        v52 |= v54;
        uint64_t v55 = *(void *)(v35 + 8 * v51);
      }
      while (v55 == -1);
      unint64_t v36 = __clz(__rbit64(~v55)) + (v51 << 6);
    }
    *(void *)(v35 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v47)(*(void *)(v21 + 48) + *(void *)(v88 + 72) * v36, v91, a2);
    ++*(void *)(v21 + 16);
    unint64_t v19 = v39;
    unint64_t v26 = v37;
  }
  if (v26)
  {
    uint64_t v37 = (v26 - 1) & v26;
    unint64_t v38 = __clz(__rbit64(v26)) | (v19 << 6);
    unint64_t v39 = v19;
LABEL_39:
    __n128 v41 = *(void **)(*(void *)(v22 + 48) + 8 * v38);
    unint64_t v93 = v41;
    id v45 = v41;
    goto LABEL_40;
  }
  int64_t v42 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    if (v42 >= v83) {
      goto LABEL_82;
    }
    unint64_t v43 = *(void *)(v84 + 8 * v42);
    unint64_t v39 = v19 + 1;
    if (!v43)
    {
      unint64_t v39 = v19 + 2;
      if ((uint64_t)(v19 + 2) >= v83) {
        goto LABEL_82;
      }
      unint64_t v43 = *(void *)(v84 + 8 * v39);
      if (!v43)
      {
        unint64_t v39 = v19 + 3;
        if ((uint64_t)(v19 + 3) >= v83) {
          goto LABEL_82;
        }
        unint64_t v43 = *(void *)(v84 + 8 * v39);
        if (!v43)
        {
          unint64_t v39 = v19 + 4;
          if ((uint64_t)(v19 + 4) >= v83) {
            goto LABEL_82;
          }
          unint64_t v43 = *(void *)(v84 + 8 * v39);
          if (!v43)
          {
            unint64_t v39 = v19 + 5;
            if ((uint64_t)(v19 + 5) >= v83) {
              goto LABEL_82;
            }
            unint64_t v43 = *(void *)(v84 + 8 * v39);
            if (!v43)
            {
              unint64_t v44 = v19 + 6;
              while (v83 != v44)
              {
                unint64_t v43 = *(void *)(v84 + 8 * v44++);
                if (v43)
                {
                  unint64_t v39 = v44 - 1;
                  goto LABEL_38;
                }
              }
LABEL_82:
              unint64_t v93 = 0;
              swift_release();
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_38:
    uint64_t v37 = (v43 - 1) & v43;
    unint64_t v38 = __clz(__rbit64(v43)) + (v39 << 6);
    goto LABEL_39;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AnyHashable(void *a1, uint64_t a2)
{
  outlined destroy of AnyHashable?(a2);
  v7[0] = a1;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  id v4 = a1;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable?(a2, (uint64_t)v7);
  BOOL v5 = v7[3] != 0;
  outlined destroy of AnyHashable?((uint64_t)v7);
  return v5;
}

uint64_t outlined destroy of AnyHashable?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSObject and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSObject and conformance NSObject)
  {
    type metadata accessor for NSObject();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject);
  }
  return result;
}

uint64_t closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)partial apply(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(a1, a2);
}

uint64_t partial apply for closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  _CFNonObjCStringGetBytes();

  return 0;
}

uint64_t initializeWithCopy for LocalizedStringResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  BOOL v7 = *(void **)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v6;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v9 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t storeEnumTagSinglePayload for Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181DF9598);
}

double protocol witness for Strideable.advanced(by:) in conformance Date@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2 = result;
  return result;
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance __PlistEncoderBPlist()
{
  return swift_bridgeObjectRetain();
}

BOOL CharacterSet.contains(_:)(UTF32Char theChar)
{
  return CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(void *)v1 + 16), theChar) != 0;
}

Foundation::Date_optional __swiftcall _CalendarGregorian.firstInstant(of:at:)(Foundation::Calendar::Component of, Foundation::Date at)
{
  uint64_t v4 = v3;
  uint64_t v5 = *v2;
  LOBYTE(v20[0]) = *(unsigned char *)of;
  id v22 = v5;
  v8._time = _CalendarGregorian._firstInstant(of:at:)((Foundation::Calendar::Component)v20, at)._time;
  if (*(Foundation::Date *)&v7._time)
  {
    id v22 = *(id *)&v7._time;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (!swift_dynamicCast())
    {

      char v6 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_16;
    }
    if (v21 < 0)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static _CalendarGregorian.logger);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_14;
      }
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v18 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v16 = "Not advancing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static _CalendarGregorian.logger);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_14;
      }
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v14 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v16 = "Overflowing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }
    _os_log_impl(&dword_181795000, v10, v11, v16, (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x185309510](v13, -1, -1);
    MEMORY[0x185309510](v12, -1, -1);
LABEL_14:

    *(void *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 8) = 1;

    goto LABEL_16;
  }
  *(void *)uint64_t v4 = v20[1];
  *(unsigned char *)(v4 + 8) = 0;
LABEL_16:
  result.value = v8;
  result.is_nil = v6;
  return result;
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _CalendarGregorian._firstInstant(of:at:)(Foundation::Calendar::Component of, Foundation::Date at)
{
  void (*v54)(void *__return_ptr, void, void);
  char v55;
  void *v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  double v86;
  long long v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  uint64_t v93;
  long long v94;
  long long v95;
  double v96;
  uint64_t v97;
  long long v98;
  long long v99;
  double v100;
  unsigned __int8 v101;
  double v102;
  char v103;
  _OWORD v104[18];
  _OWORD v105[18];
  uint64_t v106[36];
  uint64_t __dst[37];
  long long __src[18];
  double v109;

  uint64_t v6 = v5;
  uint64_t v7 = v4;
  Foundation::Date v8 = v3;
  uint64_t v9 = *v2;
  uint64_t v10 = unk_1ECA3B5E8;
  if ((unk_1ECA3B5E8 & ~qword_1ECA3B5E0) == 0) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | qword_1ECA3B5E0;
  uint64_t v12 = qword_1ECA3B5F0;
  if ((qword_1ECA3B5F0 & ~v11) == 0) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v12 | v11;
  if ((unk_1ECA3B5F8 & ~v13) != 0) {
    uint64_t v14 = unk_1ECA3B5F8;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 | v13;
  uint64_t v16 = qword_1ECA3B600;
  if ((qword_1ECA3B600 & ~v15) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v16 | v15;
  unsigned int v18 = *(unsigned __int8 *)of;
  if ((unk_1ECA3B608 & ~v17) != 0) {
    uint64_t v19 = unk_1ECA3B608;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v19 | v17;
  if ((qword_1ECA3B610 & ~v20) != 0) {
    uint64_t v21 = qword_1ECA3B610;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v21 | v20;
  if ((unk_1ECA3B618 & ~v22) != 0) {
    uint64_t v23 = unk_1ECA3B618;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v18 - 10 >= 3)
  {
    uint64_t v25 = unk_1ECA3B6D0;
    if ((unk_1ECA3B6D0 & ~qword_1ECA3B6C8) == 0) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = v25 | qword_1ECA3B6C8;
    uint64_t v27 = qword_1ECA3B6D8;
    if ((qword_1ECA3B6D8 & ~v26) == 0) {
      uint64_t v27 = 0;
    }
    uint64_t v28 = v27 | v26;
    if ((unk_1ECA3B6E0 & ~v28) != 0) {
      uint64_t v29 = unk_1ECA3B6E0;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = v29 | v28;
    uint64_t v31 = qword_1ECA3B6E8;
    if ((qword_1ECA3B6E8 & ~v30) == 0) {
      uint64_t v31 = 0;
    }
    uint64_t v32 = v31 | v30;
    if ((unk_1ECA3B6F0 & ~v32) != 0) {
      uint64_t v33 = unk_1ECA3B6F0;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v33 | v32;
    uint64_t v36 = qword_1ECA3B6F8;
    uint64_t v35 = unk_1ECA3B700;
    if ((qword_1ECA3B6F8 & ~v34) == 0) {
      uint64_t v36 = 0;
    }
    uint64_t v37 = v36 | v34;
    if ((unk_1ECA3B700 & ~v37) == 0) {
      uint64_t v35 = 0;
    }
    uint64_t v24 = v35 | v37;
  }
  else
  {
    uint64_t v24 = v23 | v22;
  }
  v106[0] = v24;
  *(void *)&v105[0] = v9;
  *(_OWORD *)long long __dst = *(_OWORD *)(v4 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(v106, (double *)v105, __dst, __src);
  swift_unknownObjectRelease();
  switch(v18)
  {
    case 0u:
      LOBYTE(v106[0]) = 1;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      uint64_t v39 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v106, __src);
      char v41 = v40;
      outlined release of DateComponents((uint64_t)__dst);
      if (v41) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v39;
      }
      *(void *)&__src[3] = v42;
      BYTE8(__src[3]) = v41 & 1;
      goto LABEL_43;
    case 1u:
LABEL_43:
      LOBYTE(v106[0]) = 2;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      uint64_t v43 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v106, __src);
      char v45 = v44;
      outlined release of DateComponents((uint64_t)__dst);
      if (v45) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v43;
      }
      *(void *)&__srUChar32 c[4] = v46;
      BYTE8(__src[4]) = v45 & 1;
      BYTE9(__src[17]) = 0;
      goto LABEL_78;
    case 2u:
      goto LABEL_78;
    case 3u:
    case 7u:
    case 8u:
    case 0x11u:
      goto LABEL_82;
    case 4u:
      goto LABEL_86;
    case 5u:
      goto LABEL_90;
    case 6u:
      goto LABEL_94;
    case 9u:
      if (BYTE8(__src[4])) {
        goto LABEL_125;
      }
      uint64_t v62 = *(void *)&__src[4] - 1;
      if (__OFSUB__(*(void *)&__src[4], 1)) {
        goto LABEL_114;
      }
      if (v62 > 0xC) {
        goto LABEL_115;
      }
      uint64_t v63 = outlined read-only object #2 of _CalendarGregorian._firstInstant(of:at:)[v62 + 4];
      uint64_t v64 = __OFADD__(v63, 1);
      unint64_t v65 = v63 + 1;
      if (v64) {
        goto LABEL_116;
      }
      uint64_t v66 = v65 == 0x7FFFFFFFFFFFFFFFLL;
      if (v65 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v65 = 0;
      }
      *(void *)&__srUChar32 c[4] = v65;
      uint64_t v67 = v66;
      BYTE8(__src[4]) = v67;
      BYTE9(__src[17]) = 0;
      unsigned int v18 = 2;
LABEL_78:
      LOBYTE(v106[0]) = 3;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      uint64_t v68 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v106, __src);
      unint64_t v70 = v69;
      outlined release of DateComponents((uint64_t)__dst);
      if (v70) {
        unint64_t v71 = 0;
      }
      else {
        unint64_t v71 = v68;
      }
      *(void *)&__src[5] = v71;
      BYTE8(__src[5]) = v70 & 1;
      goto LABEL_82;
    case 0xAu:
    case 0xBu:
      goto LABEL_49;
    case 0xCu:
      LOBYTE(v106[0]) = 1;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      uint64_t v47 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v106, __src);
      char v49 = v48;
      outlined release of DateComponents((uint64_t)__dst);
      if (v49) {
        goto LABEL_124;
      }
      *(void *)&_OWORD __src[16] = v47;
      BYTE8(__src[16]) = 0;
LABEL_49:
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.date(from:)(__src, (uint64_t)&v102);
      outlined release of DateComponents((uint64_t)__dst);
      if (v103) {
        goto LABEL_122;
      }
      unint64_t v93 = v24;
      double v50 = v102;
      *(void *)&unint64_t v98 = 128;
      *(double *)&unint64_t v99 = v102;
      v104[0] = *(_OWORD *)(v7 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v98, (double *)&v99, (uint64_t *)v104, v105);
      swift_unknownObjectRelease();
      memcpy(v106, v105, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v106);
      if (v106[23]) {
        goto LABEL_123;
      }
      uint64_t v51 = v106[22];
      break;
    default:
      goto LABEL_95;
  }
  while (*(unsigned char *)(v7 + 128) != 1)
  {
    char v60 = *(void *)(v7 + 120);
LABEL_60:
    if (v51 == v60) {
      goto LABEL_110;
    }
LABEL_61:
    LOBYTE(v109) = 3;
    *(double *)&uint64_t v95 = v50;
    unint64_t v98 = *(_OWORD *)(v7 + 104);
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v109, (double *)&v95, -3, (double *)&v98, (uint64_t)v104, (double *)&v99);
    if (v6) {
      goto LABEL_106;
    }
    swift_unknownObjectRelease();
    uint64_t v101 = 3;
    *(void *)&uint64_t v100 = v99;
    unint64_t v99 = *(_OWORD *)(v7 + 104);
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF(&v101, &v100, 2, (double *)&v99, (uint64_t)&v98, &v109);
    uint64_t v6 = 0;
    swift_unknownObjectRelease();
    int v61 = v109;
    int64_t v97 = 128;
    Swift::String v96 = v109;
    uint64_t v95 = *(_OWORD *)(v7 + 104);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)(&v97, &v96, (uint64_t *)&v95, v104);
    swift_unknownObjectRelease();
    memcpy(v105, v104, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v105);
    if (BYTE8(v105[11])) {
      goto LABEL_118;
    }
    if (v50 == v61 || v51 == *(void *)&v105[11])
    {
      lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
      swift_allocError();
      *(double *)uint64_t v92 = v61;
      *(double *)(v92 + 8) = v50;
      *(void *)(v92 + 16) = 0;
      *(void *)(v92 + 24) = 0;
      *(unsigned char *)(v92 + 32) = 0x80;
      swift_willThrow();
      memcpy(v104, __src, 0x11AuLL);
      unsigned __int8 v91 = v104;
      goto LABEL_109;
    }
    double v50 = v61;
    uint64_t v51 = *(void *)&v105[11];
  }
  if (*(void *)(v7 + 88))
  {
    uint64_t v52 = *(void *)(v7 + 96);
    uint64_t ObjectType = swift_getObjectType();
    BOOL v54 = *(void (**)(void *__return_ptr, void, void))(v52 + 328);
    swift_unknownObjectRetain();
    v54(v105, ObjectType, v52);
    uint64_t v55 = v105[0];
    if (one-time initialization token for weekdays != -1) {
      swift_once();
    }
    uint64_t v56 = static Locale.Weekday.weekdays;
    swift_bridgeObjectRetain();
    uint64_t v57 = specialized Collection<>.firstIndex(of:)(v55, (uint64_t)v56);
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    if (v59) {
      goto LABEL_121;
    }
    swift_unknownObjectRelease();
    char v60 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    goto LABEL_60;
  }
  if (v51 != 1) {
    goto LABEL_61;
  }
LABEL_110:
  *(void *)&v104[0] = v93;
  *(double *)&unint64_t v98 = v50;
  v105[0] = *(_OWORD *)(v7 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v104, (double *)&v98, (uint64_t *)v105, __src);
  swift_unknownObjectRelease();
  outlined release of DateComponents((uint64_t)__dst);
  unsigned int v18 = 3;
LABEL_82:
  LOBYTE(v106[0]) = 4;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  id v72 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v106, __src);
  uint64_t v74 = v73;
  outlined release of DateComponents((uint64_t)__dst);
  if (v74) {
    unint64_t v75 = 0;
  }
  else {
    unint64_t v75 = v72;
  }
  *(void *)&__src[7] = v75;
  BYTE8(__src[7]) = v74 & 1;
LABEL_86:
  LOBYTE(v106[0]) = 5;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  uint64_t v76 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v106, __src);
  uint64_t v78 = v77;
  outlined release of DateComponents((uint64_t)__dst);
  if (v78) {
    uint64_t v79 = 0;
  }
  else {
    uint64_t v79 = v76;
  }
  *(void *)&__src[8] = v79;
  BYTE8(__src[8]) = v78 & 1;
LABEL_90:
  LOBYTE(v106[0]) = 6;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  uint64_t v80 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v106, __src);
  uint64_t v82 = v81;
  outlined release of DateComponents((uint64_t)__dst);
  if (v82) {
    int64_t v83 = 0;
  }
  else {
    int64_t v83 = v80;
  }
  *(void *)&__src[9] = v83;
  BYTE8(__src[9]) = v82 & 1;
LABEL_94:
  *(void *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
LABEL_95:
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.date(from:)(__src, (uint64_t)v106);
  outlined release of DateComponents((uint64_t)__dst);
  if (v106[1])
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  uint64_t v84 = *(double *)v106;
  if (v18 > 8 || ((1 << v18) & 0x188) == 0)
  {
LABEL_105:
    outlined release of DateComponents((uint64_t)__dst);
    double *v8 = v84;
    return result;
  }
  *(void *)&unint64_t v98 = 8;
  *(void *)&unint64_t v99 = v106[0];
  v104[0] = *(_OWORD *)(v7 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v98, (double *)&v99, (uint64_t *)v104, v105);
  swift_unknownObjectRelease();
  memcpy(v106, v105, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v106);
  if ((v106[11] & 1) == 0)
  {
    uint64_t v85 = v106[10];
    while (1)
    {
      LOBYTE(v102) = 6;
      *(double *)&uint64_t v95 = v84;
      unint64_t v98 = *(_OWORD *)(v7 + 104);
      swift_unknownObjectRetain();
      _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v102, (double *)&v95, -1, (double *)&v98, (uint64_t)v104, (double *)&v99);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      swift_unknownObjectRelease();
      unint64_t v86 = *(double *)&v99;
      if (*(double *)&v99 >= v84)
      {
        lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
        swift_allocError();
        *(double *)uint64_t v90 = v86;
        *(double *)(v90 + 8) = v84;
        *(void *)(v90 + 16) = 0;
        *(void *)(v90 + 24) = 0;
        *(unsigned char *)(v90 + 32) = 0x80;
        swift_willThrow();
        goto LABEL_108;
      }
      *(void *)&unint64_t v99 = 8;
      *(double *)&uint64_t v95 = v86;
      unint64_t v98 = *(_OWORD *)(v7 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v99, (double *)&v95, (uint64_t *)&v98, v104);
      swift_unknownObjectRelease();
      memcpy(v105, v104, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v105);
      if (BYTE8(v105[5])) {
        goto LABEL_117;
      }
      if (v85 != *(void *)&v105[5]) {
        goto LABEL_105;
      }
      uint64_t v84 = v86;
    }
LABEL_106:
    swift_unknownObjectRelease();
    uint64_t v94 = v104[0];
    uint64_t v87 = v104[1];
    uint64_t v88 = v104[2];
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    swift_allocError();
    *(_OWORD *)uint64_t v89 = v94;
    *(_OWORD *)(v89 + 16) = v87;
    *(unsigned char *)(v89 + 32) = v88;
LABEL_108:
    memcpy(v105, __src, 0x11AuLL);
    unsigned __int8 v91 = v105;
LABEL_109:
    outlined release of DateComponents((uint64_t)v91);
    return result;
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
  return result;
}

uint64_t outlined release of DateComponents(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of DateComponents(uint64_t a1)
{
  return a1;
}

uint64_t _CalendarGregorian.minMaxRange(of:in:)(unsigned __int8 *a1, void *a2)
{
  uint64_t v4 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  uint64_t v5 = unk_1ECA3B4F0;
  if ((unk_1ECA3B4F0 & ~qword_1ECA3B4E8) == 0) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | qword_1ECA3B4E8;
  uint64_t v7 = qword_1ECA3B4F8;
  if ((qword_1ECA3B4F8 & ~v6) == 0) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v7 | v6;
  if ((unk_1ECA3B500 & ~v8) != 0) {
    uint64_t v9 = unk_1ECA3B500;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v9 | v8;
  uint64_t v11 = qword_1ECA3B508;
  if ((qword_1ECA3B508 & ~v10) == 0) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 | v10;
  if ((unk_1ECA3B510 & ~v12) != 0) {
    uint64_t v13 = unk_1ECA3B510;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13 | v12;
  uint64_t v15 = qword_1ECA3B518;
  if ((qword_1ECA3B518 & ~v14) == 0) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v15 | v14;
  if ((unk_1ECA3B520 & ~v16) != 0) {
    uint64_t v17 = unk_1ECA3B520;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v17 | v16;
  uint64_t v19 = qword_1ECA3B528;
  if ((qword_1ECA3B528 & ~v18) == 0) {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v19 | v18;
  if ((unk_1ECA3B530 & ~v20) != 0) {
    uint64_t v21 = unk_1ECA3B530;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v21 | v20;
  uint64_t v23 = qword_1ECA3B538;
  if ((qword_1ECA3B538 & ~v22) == 0) {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 | v22;
  if ((unk_1ECA3B540 & ~v24) != 0) {
    uint64_t v25 = unk_1ECA3B540;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v25 | v24;
  uint64_t v28 = qword_1ECA3B548;
  uint64_t v27 = unk_1ECA3B550;
  if ((qword_1ECA3B548 & ~v26) == 0) {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v28 | v26;
  if ((unk_1ECA3B550 & ~v29) == 0) {
    uint64_t v27 = 0;
  }
  uint64_t v30 = v27 | v29;
  switch(v4)
  {
    case 1:
      uint64_t result = actualMax #1 (inRange:) in _CalendarGregorian.minMaxRange(of:in:)(140742, 144684, v2, (uint64_t)__dst, 1u, v30);
      if (v32) {
        return 0;
      }
      if (__OFADD__(result, 1))
      {
        __break(1u);
        goto LABEL_70;
      }
      if (result + 1 >= 1) {
        return 1;
      }
      goto LABEL_38;
    case 2:
    case 7:
    case 9:
      return 1;
    case 3:
      outlined init with take of Int?((uint64_t)&__dst[64], (uint64_t)v43);
      outlined init with take of Int?((uint64_t)v43, (uint64_t)v48);
      if (BYTE8(v48[0])) {
        return 0;
      }
      Swift::Int v39 = *(void *)&v48[0];
      outlined init with take of Int?((uint64_t)&__dst[48], (uint64_t)v44);
      outlined init with take of Int?((uint64_t)v44, (uint64_t)__src);
      if (BYTE8(__src[0])) {
        return 0;
      }
      _CalendarGregorian.numberOfDaysInMonth(_:year:)(v39, *(Swift::Int *)&__src[0]);
      return 1;
    case 4:
      return 0;
    case 5:
    case 6:
      return 0;
    case 8:
      uint64_t result = actualMax #1 (inRange:) in _CalendarGregorian.minMaxRange(of:in:)(4, 6, v2, (uint64_t)__dst, 8u, v27 | v29);
      if (v33) {
        return 0;
      }
      if (!__OFADD__(result, 1))
      {
        if (result + 1 < 1) {
LABEL_38:
        }
          __break(1u);
        return 1;
      }
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    case 10:
      _CalendarGregorian.date(from:)((long long *)a2, (uint64_t)v48);
      if (BYTE8(v48[0])) {
        return 0;
      }
      *(void *)&v44[0] = v30;
      v43[0] = *(double *)v48;
      __src[0] = *(_OWORD *)(v2 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v44, v43, (uint64_t *)__src, v48);
      uint64_t result = swift_unknownObjectRelease();
      if (v54) {
        goto LABEL_76;
      }
      if (v52) {
        goto LABEL_77;
      }
      Swift::Int v34 = _;
      Swift::Int v35 = year;
      Swift::Int v40 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(_, year);
      __src[0] = v48[0];
      __src[1] = v48[1];
      *(void *)&__src[2] = v49;
      BYTE8(__src[2]) = v50;
      *(void *)&__src[3] = v35;
      BYTE8(__src[3]) = 0;
      *(void *)&__srUChar32 c[4] = v34;
      BYTE8(__src[4]) = 0;
      *(void *)&__src[5] = v40;
      BYTE8(__src[5]) = 0;
      *(void *)&__src[6] = v55;
      BYTE8(__src[6]) = v56;
      *(void *)&__src[7] = v57;
      BYTE8(__src[7]) = v58;
      *(void *)&__src[8] = v59;
      BYTE8(__src[8]) = v60;
      *(void *)&__src[9] = v61;
      BYTE8(__src[9]) = v62;
      *(void *)&__src[10] = v63;
      BYTE8(__src[10]) = v64;
      *(void *)&__src[11] = v65;
      BYTE8(__src[11]) = v66;
      *(void *)&__src[12] = v67;
      BYTE8(__src[12]) = v68;
      *(void *)&__src[13] = v69;
      BYTE8(__src[13]) = v70;
      *(void *)&stat __src[14] = v71;
      BYTE8(__src[14]) = v72;
      *(void *)&__src[15] = v73;
      BYTE8(__src[15]) = v74;
      BYTE8(__src[16]) = v76;
      *(void *)&_OWORD __src[16] = v75;
      *(void *)&__src[17] = v77;
      WORD4(__src[17]) = v78;
      memcpy(v44, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__src);
      _CalendarGregorian.date(from:)(v44, (uint64_t)&v45);
      uint64_t result = outlined release of DateComponents((uint64_t)__src);
      if (v46) {
        goto LABEL_78;
      }
      uint64_t v42 = v30;
      uint64_t v41 = v45;
      v44[0] = *(_OWORD *)(v2 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)(&v42, (double *)&v41, (uint64_t *)v44, v43);
      swift_unknownObjectRelease();
      uint64_t result = (uint64_t)memcpy(v44, v43, 0x11AuLL);
      if (BYTE8(v44[15])) {
        goto LABEL_79;
      }
      uint64_t v36 = *(void *)&v44[15];
      outlined release of DateComponents((uint64_t)v44);
      uint64_t result = outlined release of DateComponents((uint64_t)__src);
      if (__OFADD__(v36, 1)) {
        goto LABEL_71;
      }
      if (v36 + 1 >= 1) {
        return 1;
      }
      __break(1u);
LABEL_52:
      uint64_t result = actualMax #1 (inRange:) in _CalendarGregorian.minMaxRange(of:in:)(52, 54, v2, (uint64_t)__dst, 0xBu, v30);
      if (v37) {
        return 0;
      }
      if (__OFADD__(result, 1))
      {
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
      }
      else if (result + 1 >= 1)
      {
        return 1;
      }
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      return result;
    case 11:
      goto LABEL_52;
    case 12:
      uint64_t result = actualMax #1 (inRange:) in _CalendarGregorian.minMaxRange(of:in:)(140742, 144684, v2, (uint64_t)__dst, 0xCu, v30);
      if (v38) {
        return 0;
      }
      if (__OFADD__(result, 1)) {
        goto LABEL_73;
      }
      uint64_t v4 = -140742;
      if (result + 1 >= -140742) {
        return v4;
      }
      goto LABEL_75;
    case 13:
      return 0;
    case 14:
    case 15:
    case 16:
      return 0;
    case 17:
      outlined init with take of Int?((uint64_t)&__dst[48], (uint64_t)__src);
      outlined init with take of Int?((uint64_t)__src, (uint64_t)v48);
      return (BYTE8(v48[0]) & 1) == 0;
    default:
      return v4;
  }
}

void _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF(unsigned __int8 *a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  double v9 = *a2;
  if (!a3)
  {
LABEL_25:
    *a6 = v9;
    return;
  }
  uint64_t v11 = v6;
  double v14 = *a4;
  double v13 = a4[1];
  uint64_t v15 = *a1;
  double v16 = fmod(v9, 1.0);
  if (v16 >= 0.0) {
    double v17 = v9 - v16;
  }
  else {
    double v17 = v9 - v16 + -1.0;
  }
  if (v16 >= 0.0) {
    double v18 = v16;
  }
  else {
    double v18 = v16 + 1.0;
  }
  uint64_t v19 = unk_1ECA58438;
  if ((unk_1ECA58438 & ~qword_1ECA58430) == 0) {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v19 | qword_1ECA58430;
  uint64_t v21 = qword_1ECA58440;
  if ((qword_1ECA58440 & ~v20) == 0) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v21 | v20;
  if ((unk_1ECA58448 & ~v22) != 0) {
    uint64_t v23 = unk_1ECA58448;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 | v22;
  uint64_t v25 = qword_1ECA58450;
  if ((qword_1ECA58450 & ~v24) == 0) {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v25 | v24;
  if ((unk_1ECA58458 & ~v26) != 0) {
    uint64_t v27 = unk_1ECA58458;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = v27 | v26;
  uint64_t v30 = qword_1ECA58460;
  uint64_t v29 = unk_1ECA58468;
  if ((qword_1ECA58460 & ~v28) == 0) {
    uint64_t v30 = 0;
  }
  uint64_t v31 = v30 | v28;
  if ((unk_1ECA58468 & ~v31) == 0) {
    uint64_t v29 = 0;
  }
  uint64_t v32 = v29 | v31;
  double v33 = 604800.0;
  switch(v15)
  {
    case 1:
      *(void *)&v160[0] = v32;
      *(double *)uint64_t v159 = v17;
      *(double *)long long __dst = v14;
      *((double *)__dst + 1) = v13;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v160, (double *)v159, (uint64_t *)__dst, __src);
      uint64_t v76 = *(void *)&__src[2];
      char v77 = BYTE8(__src[2]);
      Swift::Int v78 = a3;
      if ((BYTE8(__src[2]) & 1) == 0)
      {
        Swift::Int v78 = a3;
        if (!*(void *)&__src[2])
        {
          Swift::Int v78 = -a3;
          if (__OFSUB__(0, a3)) {
            goto LABEL_181;
          }
        }
      }
      if ((BYTE8(__src[3]) & 1) == 0)
      {
        uint64_t v79 = *(void *)&__src[3];
        BOOL v42 = __OFADD__(*(void *)&__src[3], v78);
        v78 += *(void *)&__src[3];
        if (v42)
        {
          *(void *)a5 = 1;
          *(double *)(a5 + 8) = v9;
          *(void *)(a5 + 16) = 0;
          *(void *)(a5 + 24) = 0;
          *(unsigned char *)(a5 + 32) = 1;
          *(void *)&v160[0] = 1;
          *((double *)v160 + 1) = v9;
          v160[1] = 0uLL;
          LOBYTE(v160[2]) = 1;
          char v80 = v77;
          uint64_t v81 = v76;
          lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
          swift_willThrowTypedImpl();
          *(void *)&__dst[2] = v81;
          BYTE8(__dst[2]) = v80;
          *(void *)&__dst[3] = v79;
          *(void *)&__dst[4] = *(void *)&__src[4];
          BYTE8(__dst[4]) = BYTE8(__src[4]);
          *(void *)&__dst[5] = *(void *)&__src[5];
          BYTE8(__dst[5]) = BYTE8(__src[5]);
          *(void *)&__dst[6] = *(void *)&__src[6];
          BYTE8(__dst[6]) = BYTE8(__src[6]);
          *(void *)&__dst[7] = *(void *)&__src[7];
          BYTE8(__dst[7]) = BYTE8(__src[7]);
          *(void *)&__dst[8] = *(void *)&__src[8];
          BYTE8(__dst[8]) = BYTE8(__src[8]);
          *(void *)&__dst[9] = *(void *)&__src[9];
          BYTE8(__dst[9]) = BYTE8(__src[9]);
          *(void *)&__dst[10] = *(void *)&__src[10];
          BYTE8(__dst[10]) = BYTE8(__src[10]);
          *(void *)&__dst[11] = *(void *)&__src[11];
          BYTE8(__dst[11]) = BYTE8(__src[11]);
          *(void *)&__dst[12] = *(void *)&__src[12];
          BYTE8(__dst[12]) = BYTE8(__src[12]);
          *(void *)&__dst[13] = *(void *)&__src[13];
          BYTE8(__dst[13]) = BYTE8(__src[13]);
          *(void *)&unsigned char __dst[14] = *(void *)&__src[14];
          BYTE8(__dst[14]) = BYTE8(__src[14]);
          *(void *)&__dst[15] = *(void *)&__src[15];
          BYTE8(__dst[15]) = BYTE8(__src[15]);
          BYTE8(__dst[16]) = BYTE8(__src[16]);
          WORD4(__dst[17]) = WORD4(__src[17]);
          *(void *)&__dst[16] = *(void *)&__src[16];
          *(void *)&__dst[17] = *(void *)&__src[17];
          __dst[0] = __src[0];
          __dst[1] = __src[1];
          BYTE8(__dst[3]) = 0;
          goto LABEL_127;
        }
      }
      double v150 = v13;
      double v153 = v14;
      uint64_t v147 = a6;
      BOOL v117 = v78 == 0x7FFFFFFFFFFFFFFFLL;
      if (v78 == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v118 = 0;
      }
      else {
        Swift::Int v118 = v78;
      }
      *(void *)&__src[3] = v118;
      BYTE8(__src[3]) = v78 == 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v119 = *(void *)&__src[5];
      char v120 = BYTE8(__src[5]);
      char v121 = BYTE8(__src[4]);
      uint64_t v122 = *(void *)&__src[4];
      if ((BYTE8(__src[5]) & 1) == 0 && (BYTE8(__src[4]) & 1) == 0 && !v117)
      {
        char v141 = BYTE8(__src[2]);
        BOOL v144 = v117;
        uint64_t v136 = *(void *)&__src[2];
        char v139 = BYTE8(__src[5]);
        char v137 = BYTE8(__src[4]);
        Swift::Int v123 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(*(Swift::Int *)&__src[4], v118);
        char v121 = v137;
        char v77 = v141;
        BOOL v117 = v144;
        uint64_t v76 = v136;
        if (v119 <= 1) {
          uint64_t v124 = 1;
        }
        else {
          uint64_t v124 = v119;
        }
        if (v123 >= v119) {
          uint64_t v119 = v124;
        }
        else {
          uint64_t v119 = v123;
        }
        char v120 = v139;
      }
      *(void *)&__dst[2] = v76;
      BYTE8(__dst[2]) = v77;
      *(void *)&__dst[3] = v118;
      BYTE8(__dst[3]) = v117;
      *(void *)&__dst[4] = v122;
      BYTE8(__dst[4]) = v121;
      *(void *)&__dst[5] = v119;
      BYTE8(__dst[5]) = v120;
      *(void *)&__dst[6] = *(void *)&__src[6];
LABEL_143:
      BYTE8(__dst[6]) = BYTE8(__src[6]);
      *(void *)&__dst[7] = *(void *)&__src[7];
      BYTE8(__dst[7]) = BYTE8(__src[7]);
      *(void *)&__dst[8] = *(void *)&__src[8];
      BYTE8(__dst[8]) = BYTE8(__src[8]);
      *(void *)&__dst[9] = *(void *)&__src[9];
      BYTE8(__dst[9]) = BYTE8(__src[9]);
      *(void *)&__dst[10] = *(void *)&__src[10];
      BYTE8(__dst[10]) = BYTE8(__src[10]);
      *(void *)&__dst[11] = *(void *)&__src[11];
      BYTE8(__dst[11]) = BYTE8(__src[11]);
      *(void *)&__dst[12] = *(void *)&__src[12];
      BYTE8(__dst[12]) = BYTE8(__src[12]);
      *(void *)&__dst[13] = *(void *)&__src[13];
      BYTE8(__dst[13]) = BYTE8(__src[13]);
      *(void *)&unsigned char __dst[14] = *(void *)&__src[14];
      BYTE8(__dst[14]) = BYTE8(__src[14]);
      *(void *)&__dst[15] = *(void *)&__src[15];
      BYTE8(__dst[15]) = BYTE8(__src[15]);
      BYTE8(__dst[16]) = BYTE8(__src[16]);
      WORD4(__dst[17]) = WORD4(__src[17]);
      *(void *)&__dst[16] = *(void *)&__src[16];
      *(void *)&__dst[17] = *(void *)&__src[17];
      __dst[0] = __src[0];
      __dst[1] = __src[1];
      memcpy(v160, __dst, 0x11AuLL);
      double v13 = v150;
      double v14 = v153;
      *(double *)uint64_t v158 = v153;
      *((double *)v158 + 1) = v150;
      LOBYTE(v155) = 1;
      outlined retain of DateComponents((uint64_t)__dst);
      _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v160, (uint64_t)v158, (char *)&v155, (uint64_t)v159, v157);
      if (v7)
      {
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)__dst);
        goto LABEL_162;
      }
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)__dst);
      double v131 = v157[0];
      a6 = v147;
      if (a3 < 1) {
        goto LABEL_165;
      }
      goto LABEL_164;
    case 2:
      uint64_t v147 = a6;
      double v150 = v13;
      *(void *)&v160[0] = v32;
      *(double *)uint64_t v159 = v17;
      double v153 = v14;
      *(double *)long long __dst = v14;
      *((double *)__dst + 1) = v13;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v160, (double *)v159, (uint64_t *)__dst, __src);
      uint64_t v82 = *(void *)&__src[4];
      if (BYTE8(__src[4])) {
        uint64_t v82 = 0;
      }
      uint64_t v83 = v82 + a3;
      if (__OFADD__(v82, a3)) {
        goto LABEL_180;
      }
      if (v83 == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v84 = 0;
      }
      else {
        Swift::Int v84 = v82 + a3;
      }
      uint64_t v85 = *(void *)&__src[5];
      char v86 = BYTE8(__src[5]);
      if (v83 == 0x7FFFFFFFFFFFFFFFLL) {
        char v87 = 1;
      }
      else {
        char v87 = BYTE8(__src[5]);
      }
      char v88 = v87 ^ 1 | BYTE8(__src[3]);
      if ((v87 & 1) == 0 && (BYTE8(__src[3]) & 1) == 0)
      {
        Swift::Int v143 = v84;
        Swift::Int v89 = v84;
        char v90 = BYTE8(__src[5]);
        uint64_t v91 = *(void *)&__src[5];
        Swift::Int v92 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(v89, *(Swift::Int *)&__src[3]);
        char v86 = v90;
        char v88 = 0;
        if (v91 <= 1) {
          uint64_t v93 = 1;
        }
        else {
          uint64_t v93 = v91;
        }
        if (v92 >= v91) {
          uint64_t v85 = v93;
        }
        else {
          uint64_t v85 = v92;
        }
        Swift::Int v84 = v143;
      }
      *(void *)&__dst[2] = *(void *)&__src[2];
      BYTE8(__dst[2]) = BYTE8(__src[2]);
      *(void *)&__dst[3] = *(void *)&__src[3];
      BYTE8(__dst[3]) = v88;
      *(void *)&__dst[4] = v84;
      BYTE8(__dst[4]) = v83 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&__dst[5] = v85;
      BYTE8(__dst[5]) = v86;
      *(void *)&__dst[6] = *(void *)&__src[6];
      goto LABEL_143;
    case 3:
    case 7:
    case 17:
      double v33 = 86400.0;
      goto LABEL_27;
    case 4:
      double v94 = (double)a3;
      double v95 = 3600.0;
      goto LABEL_99;
    case 5:
      double v94 = (double)a3;
      double v95 = 60.0;
LABEL_99:
      double v58 = v94 * v95 + v17;
      goto LABEL_101;
    case 6:
      double v58 = v17 + (double)a3;
      goto LABEL_101;
    case 8:
    case 10:
    case 11:
LABEL_27:
      double v149 = v13;
      double v152 = v14;
      uint64_t v146 = a6;
      uint64_t v34 = unk_1ECA3B768;
      if ((unk_1ECA3B768 & ~qword_1ECA3B760) == 0) {
        uint64_t v34 = 0;
      }
      uint64_t v35 = v34 | qword_1ECA3B760;
      uint64_t v36 = qword_1ECA3B770;
      if ((qword_1ECA3B770 & ~v35) == 0) {
        uint64_t v36 = 0;
      }
      *(void *)&v159[0] = v36 | v35;
      *(double *)uint64_t v158 = v9;
      v160[0] = *(_OWORD *)(v11 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v159, (double *)v158, (uint64_t *)v160, __src);
      swift_unknownObjectRelease();
      memcpy(__dst, __src, 0x11AuLL);
      if (BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9])) {
        goto LABEL_183;
      }
      uint64_t v37 = *(void *)&__dst[7];
      uint64_t v38 = *(void *)&__dst[8];
      uint64_t v39 = *(void *)&__dst[9];
      outlined release of DateComponents((uint64_t)__dst);
      uint64_t v40 = 3600 * v37;
      if ((unsigned __int128)(v37 * (__int128)3600) >> 64 == (3600 * v37) >> 63)
      {
        uint64_t v41 = 60 * v38;
        if ((unsigned __int128)(v38 * (__int128)60) >> 64 == (60 * v38) >> 63)
        {
          BOOL v42 = __OFADD__(v40, v41);
          uint64_t v43 = v40 + v41;
          if (!v42)
          {
            uint64_t v44 = v43 + v39;
            if (!__OFADD__(v43, v39))
            {
              double v45 = v17 + v33 * (double)a3;
              uint64_t v46 = unk_1ECA3B768;
              if ((unk_1ECA3B768 & ~qword_1ECA3B760) == 0) {
                uint64_t v46 = 0;
              }
              uint64_t v47 = v46 | qword_1ECA3B760;
              uint64_t v48 = qword_1ECA3B770;
              if ((qword_1ECA3B770 & ~v47) == 0) {
                uint64_t v48 = 0;
              }
              *(void *)&v157[0] = v48 | v47;
              *(double *)&long long v155 = v45;
              v158[0] = *(_OWORD *)(v11 + 104);
              swift_unknownObjectRetain();
              _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v157, (double *)&v155, (uint64_t *)v158, v160);
              swift_unknownObjectRelease();
              memcpy(v159, v160, 0x11AuLL);
              if (BYTE8(v159[7]) & 1) != 0 || (BYTE8(v159[8]) & 1) != 0 || (BYTE8(v159[9]))
              {
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
                return;
              }
              uint64_t v49 = *(void *)&v159[7];
              uint64_t v50 = *(void *)&v159[8];
              uint64_t v51 = *(void *)&v159[9];
              outlined release of DateComponents((uint64_t)v159);
              uint64_t v52 = 3600 * v49;
              if ((unsigned __int128)(v49 * (__int128)3600) >> 64 == (3600 * v49) >> 63)
              {
                uint64_t v53 = 60 * v50;
                if ((unsigned __int128)(v50 * (__int128)60) >> 64 == (60 * v50) >> 63)
                {
                  BOOL v42 = __OFADD__(v52, v53);
                  uint64_t v54 = v52 + v53;
                  double v55 = v152;
                  if (!v42)
                  {
                    BOOL v42 = __OFADD__(v54, v51);
                    uint64_t v56 = v54 + v51;
                    if (!v42)
                    {
                      double v57 = (double)v44;
                      if ((double)v44 == (double)v56)
                      {
                        double v58 = v45;
                        double v59 = v13;
                        goto LABEL_68;
                      }
                      uint64_t ObjectType = swift_getObjectType();
                      *(double *)uint64_t v158 = v45;
                      uint64_t v61 = *(uint64_t (**)(_OWORD *, uint64_t, void))(*(void *)&v13 + 40);
                      uint64_t v62 = v61(v158, ObjectType, *(void *)&v13);
                      *(double *)uint64_t v158 = v9;
                      uint64_t v63 = v62;
                      uint64_t v64 = v61(v158, ObjectType, *(void *)&v149);
                      if (v63 == v64)
                      {
                        double v58 = v45;
                        double v59 = v149;
                        double v55 = v152;
                        goto LABEL_68;
                      }
                      uint64_t v65 = v64;
                      if (!__OFSUB__(v64, v63))
                      {
                        double v58 = v45 + (double)(v64 - v63);
                        uint64_t v66 = unk_1ECA3B768;
                        if ((unk_1ECA3B768 & ~qword_1ECA3B760) == 0) {
                          uint64_t v66 = 0;
                        }
                        uint64_t v67 = v66 | qword_1ECA3B760;
                        uint64_t v68 = qword_1ECA3B770;
                        if ((qword_1ECA3B770 & ~v67) == 0) {
                          uint64_t v68 = 0;
                        }
                        uint64_t v163 = v68 | v67;
                        double v156 = v45 + (double)(v64 - v63);
                        long long v155 = *(_OWORD *)(v11 + 104);
                        swift_unknownObjectRetain();
                        _CalendarGregorian.dateComponents(_:from:in:)(&v163, &v156, (uint64_t *)&v155, v158);
                        swift_unknownObjectRelease();
                        memcpy(v157, v158, 0x11AuLL);
                        if (LOBYTE(v157[15]) & 1) != 0 || (LOBYTE(v157[17]) & 1) != 0 || (LOBYTE(v157[19])) {
                          goto LABEL_185;
                        }
                        double v69 = v157[14];
                        double v70 = v157[16];
                        double v71 = v157[18];
                        outlined release of DateComponents((uint64_t)v157);
                        uint64_t v72 = 3600 * *(void *)&v69;
                        if ((unsigned __int128)(*(uint64_t *)&v69 * (__int128)3600) >> 64 == (3600 * *(void *)&v69) >> 63)
                        {
                          uint64_t v73 = 60 * *(void *)&v70;
                          double v55 = v152;
                          if ((unsigned __int128)(*(uint64_t *)&v70 * (__int128)60) >> 64 == (60 * *(void *)&v70) >> 63)
                          {
                            BOOL v42 = __OFADD__(v72, v73);
                            uint64_t v74 = v72 + v73;
                            a6 = v146;
                            double v59 = v149;
                            if (!v42)
                            {
                              BOOL v42 = __OFADD__(v74, *(void *)&v71);
                              uint64_t v75 = v74 + *(void *)&v71;
                              if (!v42)
                              {
                                if ((double)v75 != v57 && v65 < v63) {
                                  double v58 = v45;
                                }
LABEL_68:
                                if (a3 >= 1)
                                {
                                  *(double *)&long long v155 = v58;
                                  v157[0] = v55;
                                  v157[1] = v59;
                                  _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)((double *)&v155, (uint64_t)v157, (uint64_t)v158);
                                  if ((v158[1] & 1) == 0) {
                                    double v58 = v58 - *((double *)v158 + 1);
                                  }
                                }
LABEL_101:
                                double v96 = 0.0;
LABEL_102:
                                double v97 = v18 + v58 + v96;
                                goto LABEL_103;
                              }
                              goto LABEL_179;
                            }
LABEL_178:
                            __break(1u);
LABEL_179:
                            __break(1u);
LABEL_180:
                            __break(1u);
LABEL_181:
                            __break(1u);
LABEL_182:
                            __break(1u);
LABEL_183:
                            __break(1u);
                            goto LABEL_184;
                          }
LABEL_177:
                          __break(1u);
                          goto LABEL_178;
                        }
LABEL_176:
                        __break(1u);
                        goto LABEL_177;
                      }
LABEL_175:
                      __break(1u);
                      goto LABEL_176;
                    }
LABEL_174:
                    __break(1u);
                    goto LABEL_175;
                  }
LABEL_173:
                  __break(1u);
                  goto LABEL_174;
                }
LABEL_172:
                __break(1u);
                goto LABEL_173;
              }
LABEL_171:
              __break(1u);
              goto LABEL_172;
            }
LABEL_170:
            __break(1u);
            goto LABEL_171;
          }
LABEL_169:
          __break(1u);
          goto LABEL_170;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_169;
    case 12:
      uint64_t v98 = unk_1ECA58498;
      if ((unk_1ECA58498 & ~qword_1ECA58490) == 0) {
        uint64_t v98 = 0;
      }
      uint64_t v99 = v98 | qword_1ECA58490;
      uint64_t v100 = qword_1ECA584A0;
      if ((qword_1ECA584A0 & ~v99) == 0) {
        uint64_t v100 = 0;
      }
      uint64_t v101 = v100 | v99;
      if ((unk_1ECA584A8 & ~v101) != 0) {
        uint64_t v102 = unk_1ECA584A8;
      }
      else {
        uint64_t v102 = 0;
      }
      uint64_t v103 = v102 | v101;
      uint64_t v104 = qword_1ECA584B0;
      if ((qword_1ECA584B0 & ~v103) == 0) {
        uint64_t v104 = 0;
      }
      uint64_t v105 = v104 | v103;
      if ((unk_1ECA584B8 & ~v105) != 0) {
        uint64_t v106 = unk_1ECA584B8;
      }
      else {
        uint64_t v106 = 0;
      }
      uint64_t v107 = v106 | v105;
      uint64_t v109 = qword_1ECA584C0;
      uint64_t v108 = unk_1ECA584C8;
      if ((qword_1ECA584C0 & ~v107) == 0) {
        uint64_t v109 = 0;
      }
      uint64_t v110 = v109 | v107;
      if ((unk_1ECA584C8 & ~v110) == 0) {
        uint64_t v108 = 0;
      }
      *(void *)&v160[0] = v108 | v110;
      *(double *)uint64_t v159 = v17;
      *(double *)long long __dst = v14;
      *((double *)__dst + 1) = v13;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v160, (double *)v159, (uint64_t *)__dst, __src);
      uint64_t v111 = *(void *)&__src[2];
      char v112 = BYTE8(__src[2]);
      uint64_t v113 = a3;
      if ((BYTE8(__src[2]) & 1) == 0)
      {
        uint64_t v113 = a3;
        if (!*(void *)&__src[2])
        {
          uint64_t v113 = -a3;
          if (__OFSUB__(0, a3)) {
            goto LABEL_182;
          }
        }
      }
      if ((BYTE8(__src[17]) & 1) != 0
        || (uint64_t v114 = *(void *)&__src[17],
            BOOL v42 = __OFADD__(*(void *)&__src[17], v113),
            v113 += *(void *)&__src[17],
            !v42))
      {
        BOOL v125 = v113 == 0x7FFFFFFFFFFFFFFFLL;
        if (v113 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v126 = 0;
        }
        else {
          uint64_t v126 = v113;
        }
        *(void *)&__src[17] = v126;
        BYTE8(__src[17]) = v113 == 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v127 = *(void *)&__src[5];
        char v128 = BYTE8(__src[5]);
        uint64_t v129 = *(void *)&__src[4];
        char v130 = BYTE8(__src[5]) ^ 1 | BYTE8(__src[4]);
        if ((BYTE8(__src[5]) & 1) == 0 && (BYTE8(__src[4]) & 1) == 0)
        {
          if (BYTE8(__src[3]))
          {
            char v130 = 0;
          }
          else
          {
            uint64_t v154 = *(void *)&__src[4];
            char v151 = BYTE8(__src[2]);
            uint64_t v145 = v126;
            uint64_t v148 = *(void *)&__src[2];
            char v140 = BYTE8(__src[5]);
            BOOL v142 = v125;
            uint64_t v138 = *(void *)&__src[5];
            Swift::Int v132 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(*(Swift::Int *)&__src[4], *(Swift::Int *)&__src[3]);
            char v128 = v140;
            BOOL v125 = v142;
            uint64_t v126 = v145;
            uint64_t v111 = v148;
            char v112 = v151;
            char v130 = 0;
            if (v138 <= 1) {
              uint64_t v133 = 1;
            }
            else {
              uint64_t v133 = v138;
            }
            if (v132 >= v138) {
              uint64_t v127 = v133;
            }
            else {
              uint64_t v127 = v132;
            }
            uint64_t v129 = v154;
          }
        }
        BYTE8(__dst[16]) = BYTE8(__src[16]);
        BYTE8(__dst[17]) = v125;
        *(void *)&__dst[2] = v111;
        BYTE8(__dst[2]) = v112;
        *(void *)&__dst[3] = *(void *)&__src[3];
        BYTE8(__dst[3]) = BYTE8(__src[3]);
        *(void *)&__dst[4] = v129;
        BYTE8(__dst[4]) = v130;
        *(void *)&__dst[5] = v127;
        BYTE8(__dst[5]) = v128;
        *(void *)&__dst[6] = *(void *)&__src[6];
        BYTE8(__dst[6]) = BYTE8(__src[6]);
        *(void *)&__dst[7] = *(void *)&__src[7];
        BYTE8(__dst[7]) = BYTE8(__src[7]);
        *(void *)&__dst[8] = *(void *)&__src[8];
        BYTE8(__dst[8]) = BYTE8(__src[8]);
        *(void *)&__dst[9] = *(void *)&__src[9];
        BYTE8(__dst[9]) = BYTE8(__src[9]);
        *(void *)&__dst[10] = *(void *)&__src[10];
        BYTE8(__dst[10]) = BYTE8(__src[10]);
        *(void *)&__dst[11] = *(void *)&__src[11];
        BYTE8(__dst[11]) = BYTE8(__src[11]);
        *(void *)&__dst[12] = *(void *)&__src[12];
        BYTE8(__dst[12]) = BYTE8(__src[12]);
        *(void *)&__dst[13] = *(void *)&__src[13];
        BYTE8(__dst[13]) = BYTE8(__src[13]);
        *(void *)&unsigned char __dst[14] = *(void *)&__src[14];
        BYTE8(__dst[14]) = BYTE8(__src[14]);
        *(void *)&__dst[15] = *(void *)&__src[15];
        BYTE8(__dst[15]) = BYTE8(__src[15]);
        *(void *)&__dst[16] = *(void *)&__src[16];
        *(void *)&__dst[17] = v126;
        BYTE9(__dst[17]) = BYTE9(__src[17]);
        __dst[0] = __src[0];
        __dst[1] = __src[1];
        memcpy(v160, __dst, 0x11AuLL);
        *(double *)uint64_t v158 = v14;
        *((double *)v158 + 1) = v13;
        LOBYTE(v155) = 1;
        outlined retain of DateComponents((uint64_t)__dst);
        _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v160, (uint64_t)v158, (char *)&v155, (uint64_t)v159, v157);
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)__dst);
        if (v7)
        {
LABEL_162:
          char v134 = v159[2];
          long long v135 = v159[1];
          *(_OWORD *)a5 = v159[0];
          *(_OWORD *)(a5 + 16) = v135;
          *(unsigned char *)(a5 + 32) = v134;
          return;
        }
        double v131 = v157[0];
        if (a3 >= 1)
        {
LABEL_164:
          *(double *)unint64_t v160 = v131;
          *(double *)long long __dst = v14;
          *((double *)__dst + 1) = v13;
          _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)((double *)v160, (uint64_t)__dst, (uint64_t)__src);
          if ((__src[1] & 1) == 0)
          {
            double v97 = v18 + v131 - *((double *)__src + 1);
LABEL_103:
            *a6 = v97;
            return;
          }
        }
LABEL_165:
        double v97 = v18 + v131;
        goto LABEL_103;
      }
      *(void *)a5 = 12;
      *(double *)(a5 + 8) = v9;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      *(unsigned char *)(a5 + 32) = 1;
      *(void *)&v160[0] = 12;
      *((double *)v160 + 1) = v9;
      v160[1] = 0uLL;
      LOBYTE(v160[2]) = 1;
      char v115 = v112;
      uint64_t v116 = v111;
      lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
      swift_willThrowTypedImpl();
      *(void *)&__dst[2] = v116;
      BYTE8(__dst[2]) = v115;
      *(void *)&__dst[3] = *(void *)&__src[3];
      BYTE8(__dst[3]) = BYTE8(__src[3]);
      *(void *)&__dst[4] = *(void *)&__src[4];
      BYTE8(__dst[4]) = BYTE8(__src[4]);
      *(void *)&__dst[5] = *(void *)&__src[5];
      BYTE8(__dst[5]) = BYTE8(__src[5]);
      *(void *)&__dst[6] = *(void *)&__src[6];
      BYTE8(__dst[6]) = BYTE8(__src[6]);
      *(void *)&__dst[7] = *(void *)&__src[7];
      BYTE8(__dst[7]) = BYTE8(__src[7]);
      *(void *)&__dst[8] = *(void *)&__src[8];
      BYTE8(__dst[8]) = BYTE8(__src[8]);
      *(void *)&__dst[9] = *(void *)&__src[9];
      BYTE8(__dst[9]) = BYTE8(__src[9]);
      *(void *)&__dst[10] = *(void *)&__src[10];
      BYTE8(__dst[10]) = BYTE8(__src[10]);
      *(void *)&__dst[11] = *(void *)&__src[11];
      BYTE8(__dst[11]) = BYTE8(__src[11]);
      *(void *)&__dst[12] = *(void *)&__src[12];
      BYTE8(__dst[12]) = BYTE8(__src[12]);
      *(void *)&__dst[13] = *(void *)&__src[13];
      BYTE8(__dst[13]) = BYTE8(__src[13]);
      *(void *)&unsigned char __dst[14] = *(void *)&__src[14];
      BYTE8(__dst[14]) = BYTE8(__src[14]);
      *(void *)&__dst[15] = *(void *)&__src[15];
      BYTE8(__dst[15]) = BYTE8(__src[15]);
      BYTE8(__dst[16]) = BYTE8(__src[16]);
      *(void *)&__dst[16] = *(void *)&__src[16];
      *(void *)&__dst[17] = v114;
      BYTE8(__dst[17]) = 0;
      BYTE9(__dst[17]) = BYTE9(__src[17]);
      __dst[0] = __src[0];
      __dst[1] = __src[1];
LABEL_127:
      outlined release of DateComponents((uint64_t)__dst);
      return;
    case 13:
      double v96 = (double)a3 / 1000000000.0;
      double v58 = v17 + 0.0;
      goto LABEL_102;
    default:
      goto LABEL_25;
  }
}

double *_CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *result;
  if (*result < -3187299600.0
    || (uint64_t v5 = *(void *)(a2 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        double v12 = v4 + -172800.0,
        result = (double *)(*(void *(**)(double *__return_ptr, double *, uint64_t, uint64_t))(v5 + 80))(&v13, &v12, ObjectType, v5), (v14 & 1) != 0)|| (double v7 = v13, v8 = v13, v4 + -172800.0 + 345600000.0 <= v13)|| v4 < v13)
  {
LABEL_9:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  double v13 = v13 + -1.0;
  double v9 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v5 + 40);
  uint64_t v10 = v9(&v13, ObjectType, v5);
  double v13 = v8 + 1.0;
  uint64_t result = (double *)v9(&v13, ObjectType, v5);
  uint64_t v11 = v10 - (void)result;
  if (!__OFSUB__(v10, result))
  {
    if (v11 >= 1 && v4 < v8 + (double)v11)
    {
      *(double *)a3 = v7;
      *(double *)(a3 + 8) = (double)v11;
      *(unsigned char *)(a3 + 16) = 0;
      return result;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneICU@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  partial apply for closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)((uint64_t *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return swift_release();
}

void partial apply for closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)(a1, *(void *)(v2 + 16), a2, *(double *)(v2 + 24));
}

void closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  v11[1] = *(double *)MEMORY[0x1E4F143B8];
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  LODWORD(v11[0]) = 0;
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8)[2] >> 31) {
    __break(1u);
  }
  uint64_t v9 = ucal_open();
  swift_release();
  swift_bridgeObjectRelease();
  if (v9)
  {
    *a1 = v9;
LABEL_2:
    v11[0] = a4;
    uint64_t v10 = 0x42ACF8AB468F0000;
    static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(v11, (double *)&v10, a3);
    return;
  }
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
}

void static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(double *a1@<X1>, double *a2@<X2>, uint64_t a3@<X8>)
{
  double v4 = (*a2 + 978307200.0) * 1000.0;
  if (v4 >= (*a1 + 978307200.0) * 1000.0)
  {
    ucal_getMillis();
    ucal_setMillis();
    if (ucal_getTimeZoneTransitionDate() && v4 >= 0.0)
    {
      *(double *)a3 = 0.0 / 1000.0 + -978307200.0;
      *(unsigned char *)(a3 + 8) = 0;
    }
    else
    {
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 1;
    }
    ucal_setMillis();
  }
  else
  {
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 1;
  }
}

uint64_t _CalendarGregorian.date(from:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = a1 + 2;
  long long __src = *a1;
  uint64_t v29 = v5;
  uint64_t v30 = v6;
  *(_OWORD *)((char *)v45 + 10) = *(long long *)((char *)a1 + 266);
  long long v8 = a1[15];
  long long v43 = a1[14];
  long long v44 = v8;
  v45[0] = a1[16];
  long long v9 = a1[11];
  long long v39 = a1[10];
  long long v40 = v9;
  long long v10 = a1[13];
  long long v41 = a1[12];
  long long v42 = v10;
  long long v11 = a1[7];
  long long v35 = a1[6];
  long long v36 = v11;
  long long v12 = a1[9];
  long long v37 = a1[8];
  long long v38 = v12;
  long long v13 = a1[3];
  long long v31 = a1[2];
  long long v32 = v13;
  long long v14 = a1[5];
  long long v33 = a1[4];
  long long v34 = v14;
  uint64_t result = specialized static _CalendarGregorian.isComponentsInSupportedRange(_:)((uint64_t)&__src);
  if (result)
  {
    long long __src = *a1;
    uint64_t v29 = v5;
    uint64_t v30 = v6;
    *(_OWORD *)((char *)v45 + 10) = *(long long *)((char *)v7 + 234);
    long long v16 = v7[13];
    long long v43 = v7[12];
    long long v44 = v16;
    v45[0] = v7[14];
    long long v17 = v7[9];
    long long v39 = v7[8];
    long long v40 = v17;
    long long v18 = v7[11];
    long long v41 = v7[10];
    long long v42 = v18;
    long long v19 = v7[5];
    long long v35 = v7[4];
    long long v36 = v19;
    long long v20 = v7[7];
    long long v37 = v7[6];
    long long v38 = v20;
    long long v21 = v7[1];
    long long v31 = *v7;
    long long v32 = v21;
    long long v22 = v7[3];
    long long v33 = v7[2];
    long long v34 = v22;
    if (v5)
    {
      uint64_t v23 = v5;
    }
    else
    {
      uint64_t v23 = *(void *)(v2 + 104);
      uint64_t v6 = *(void *)(v2 + 112);
      swift_unknownObjectRetain();
    }
    v26[0] = v23;
    v26[1] = v6;
    char v25 = 0;
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(&__src, (uint64_t)v26, &v25, (uint64_t)v24, (double *)&v27);
    uint64_t result = swift_unknownObjectRelease();
    *(void *)a2 = v27;
    *(unsigned char *)(a2 + 8) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 1;
  }
  return result;
}

uint64_t _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF@<X0>(void *__src@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  uint64_t v7 = v5;
  memcpy(__dst, __src, 0x11AuLL);
  Swift::Int v12 = *(void *)(a2 + 8);
  char v13 = *a3;
  memcpy(__srca, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized ResolvedDateComponents.init(dateComponents:)(__srca, (uint64_t)v100);
  Swift::Int v15 = *((void *)&v100[0] + 1);
  Swift::Int v14 = *(void *)&v100[0];
  uint64_t result = (uint64_t)outlined init with take of ResolvedDateComponents(v100, &v113);
  LOBYTE(v17) = v114;
  switch(v114 >> 5)
  {
    case 1:
    case 2:
    case 4:
      uint64_t v18 = (uint64_t)v100;
      BOOL v19 = 0;
      LOBYTE(v17) = v114 & 0x1F;
      v114 &= 0x1Fu;
      uint64_t v20 = v15 - 2;
      if (!__OFSUB__(v15, 2)) {
        goto LABEL_3;
      }
      __break(1u);
LABEL_21:
      unsigned __int8 v112 = v17 & 0x1F;
      uint64_t v29 = (uint64_t)v109;
      if ((_BYTE)v110) {
        uint64_t v29 = 1;
      }
      BOOL v23 = __OFADD__(a5, v29);
      uint64_t v17 = (uint64_t)a5 + v29;
      if (!v23) {
        goto LABEL_71;
      }
      __break(1u);
LABEL_26:
      unsigned __int8 v112 = v17 & 0x1F;
      uint64_t v18 = (uint64_t)v109;
      if (v111) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = _CalendarGregorian.wrapAroundRelativeWeekday(_:)(v110);
      }
      if ((unint64_t)(result - v12) <= 0x7FFFFFFFFFFFFFFELL) {
        Swift::Int v12 = result - v12 + 1;
      }
      else {
        Swift::Int v12 = result - v12 + 8;
      }
      if (v18 < 0) {
        goto LABEL_68;
      }
      uint64_t v30 = (long long *)((unsigned __int128)((v18 - 1) * (__int128)7) >> 64);
      char v32 = 8 * (v18 - 1);
      uint64_t v33 = 7 * (v18 - 1);
      if (v30 != (long long *)(v33 >> 63)) {
        goto LABEL_155;
      }
      BOOL v23 = __OFADD__(v12, v33);
      Swift::Int v34 = v12 + v33;
      if (!v23) {
        goto LABEL_70;
      }
      __break(1u);
LABEL_41:
      char v35 = v32;
      uint64_t result = _CalendarGregorian.wrapAroundRelativeWeekday(_:)(*((void *)v30 + 21));
      char v32 = v35;
LABEL_42:
      uint64_t v36 = result - v12;
      Swift::Int v15 = result - v12 + 1;
      if (*(unsigned char *)(v7 + 144) == 1)
      {
        if (!*(void *)(v7 + 88))
        {
LABEL_52:
          if ((v32 & 1) == 0)
          {
            uint64_t v41 = v91 - 1;
            if (__OFSUB__(v91, 1)) {
              goto LABEL_160;
            }
            uint64_t v42 = 7 * v41;
            if ((unsigned __int128)(v41 * (__int128)7) >> 64 != (7 * v41) >> 63) {
              goto LABEL_161;
            }
            BOOL v23 = __OFADD__(v15, v42);
            v15 += v42;
            if (v23) {
              goto LABEL_162;
            }
          }
          uint64_t v17 = (uint64_t)a5 + v15;
          if (!__OFADD__(a5, v15)) {
            goto LABEL_71;
          }
          __break(1u);
LABEL_59:
          Swift::Int v14 = *(void *)(v7 + 136);
          goto LABEL_60;
        }
        uint64_t v37 = *(void *)(v7 + 96);
        char v90 = v32;
        uint64_t ObjectType = swift_getObjectType();
        char v88 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 344);
        swift_unknownObjectRetain();
        uint64_t v18 = v88(ObjectType, v37);
        uint64_t result = swift_unknownObjectRelease();
        char v32 = v90;
      }
      else
      {
        uint64_t v18 = *(void *)(v7 + 136);
      }
      if (7 - v12 < v18) {
        Swift::Int v15 = v36 + 8;
      }
      goto LABEL_52;
    case 3:
      v114 &= 0x1Fu;
      uint64_t v18 = (uint64_t)v100;
      BOOL v19 = (void)v113 == *(void *)(v7 + 64);
      goto LABEL_19;
    default:
      while (2)
      {
        uint64_t v18 = (uint64_t)v100;
        BOOL v19 = 0;
        unsigned __int8 v114 = v17 & 0x1F;
LABEL_19:
        Swift::Int v15 = 1;
        uint64_t v20 = -1;
LABEL_3:
        Swift::Int v21 = v14 + 4716;
        if (__OFADD__(v14, 4716)) {
          goto LABEL_9;
        }
        if (__OFSUB__(12, v20))
        {
          __break(1u);
          goto LABEL_147;
        }
        uint64_t v22 = (12 - v20) / 12;
        BOOL v23 = __OFSUB__(v21, v22);
        Swift::Int v24 = v21 - v22;
        if (v23)
        {
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        BOOL v23 = __OFSUB__(v20, 1);
        uint64_t v25 = v20 - 1;
        if (v23)
        {
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        BOOL v23 = __OFADD__(v25, 12);
        int v26 = v25 + 12;
        if (v23)
        {
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        if ((unsigned __int128)(v24 * (__int128)1461) >> 64 != (1461 * v24) >> 63)
        {
LABEL_9:
          __srca[0] = xmmword_1821A0620;
          __srca[1] = xmmword_18210C780;
          LOBYTE(__srca[2]) = 1;
          lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
          uint64_t result = swift_willThrowTypedImpl();
          *(_OWORD *)a4 = xmmword_1821A0620;
          *(_OWORD *)(a4 + 16) = xmmword_18210C780;
          *(unsigned char *)(a4 + 32) = 1;
          return result;
        }
        char v94 = v13;
        Swift::Int v95 = v12;
        double v96 = a5;
        __int16 v93 = 2;
        uint64_t v27 = 1461 * v24 / 4
            + (int)(((26215 * (__int16)(153 * (v26 % 12) + 2)) >> 17)
                  + ((26215 * (__int16)(153 * (v26 % 12) + 2)) >> 31))
            - 1402;
        uint64_t v28 = v27 - 3 * ((v24 + 184) / 100) / 4 + 38;
        if (v19) {
          a5 = (double *)v27;
        }
        else {
          a5 = (double *)v28;
        }
        char v13 = v7;
        Swift::Int v12 = _CalendarGregorian.relativeWeekday(fromJulianDay:)((Swift::Int)a5 + 1);
        uint64_t result = (uint64_t)outlined init with take of ResolvedDateComponents(v100, &v108);
        LOBYTE(v17) = v112;
        switch(v112 >> 5)
        {
          case 1:
            goto LABEL_21;
          case 2:
            goto LABEL_26;
          case 3:
            v112 &= 0x1Fu;
            uint64_t v30 = v100;
            uint64_t v31 = *((void *)&v108 + 1);
            char v32 = (char)v109;
            uint64_t v91 = *((void *)&v108 + 1);
            if ((v111 & 1) == 0) {
              goto LABEL_41;
            }
            uint64_t result = 0;
            goto LABEL_42;
          case 4:
            v112 &= 0x1Fu;
            uint64_t v18 = (uint64_t)v109;
            if (v111) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = _CalendarGregorian.wrapAroundRelativeWeekday(_:)(v110);
            }
            Swift::Int v15 = result - v12;
            uint64_t v31 = result - v12 + 1;
            if (*(unsigned char *)(v7 + 144) != 1) {
              goto LABEL_59;
            }
            if (!*(void *)(v7 + 88)) {
              goto LABEL_62;
            }
            uint64_t v39 = *(void *)(v7 + 96);
            uint64_t v92 = result - v12 + 1;
            uint64_t v40 = swift_getObjectType();
            Swift::Int v89 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 344);
            swift_unknownObjectRetain();
            Swift::Int v14 = v89(v40, v39);
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v31 = v92;
            break;
          default:
            v112 &= 0x1Fu;
            uint64_t v17 = (uint64_t)a5 + *((void *)&v108 + 1);
            if (!__OFADD__(a5, *((void *)&v108 + 1))) {
              goto LABEL_71;
            }
            __break(1u);
            continue;
        }
        break;
      }
LABEL_60:
      if (7 - v12 < v14) {
        uint64_t v31 = v15 + 8;
      }
LABEL_62:
      uint64_t v43 = v18 - 1;
      if (__OFSUB__(v18, 1)) {
        goto LABEL_151;
      }
      uint64_t v44 = 7 * v43;
      if ((unsigned __int128)(v43 * (__int128)7) >> 64 != (7 * v43) >> 63)
      {
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      uint64_t v45 = v31 + v44;
      if (__OFADD__(v31, v44))
      {
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
        goto LABEL_157;
      }
      BOOL v23 = __OFADD__(a5, v45);
      uint64_t v17 = (uint64_t)a5 + v45;
      if (v23)
      {
        __break(1u);
LABEL_68:
        uint64_t result = _CalendarGregorian.numberOfDaysInMonth(_:year:)(v15, v14);
        uint64_t v46 = v18
            + ((((37 * (result - v12)) >> 8)
              + (((result - v12 - ((unsigned __int16)(37 * (result - v12)) >> 8)) & 0xFE) >> 1)) >> 2)
            + 1;
        uint64_t v47 = 7 * v46;
        if ((unsigned __int128)(v46 * (__int128)7) >> 64 != (7 * v46) >> 63) {
          goto LABEL_163;
        }
        BOOL v23 = __OFADD__(v12, v47);
        Swift::Int v34 = v12 + v47;
        if (v23) {
          goto LABEL_164;
        }
LABEL_70:
        BOOL v23 = __OFADD__(a5, v34);
        uint64_t v17 = (uint64_t)a5 + v34;
        if (v23) {
          goto LABEL_154;
        }
      }
LABEL_71:
      uint64_t v48 = v96;
      if (v19 || v17 >= *(void *)(v7 + 56))
      {
LABEL_137:
        double v80 = (double)__dst[14] * 3600.0 + 0.0;
        if (LOBYTE(__dst[15])) {
          double v80 = 0.0;
        }
        double v81 = (double)__dst[16] * 60.0;
        if (LOBYTE(__dst[17])) {
          double v81 = -0.0;
        }
        double v82 = v80 + v81;
        double v83 = (double)__dst[18];
        if (LOBYTE(__dst[19])) {
          double v83 = -0.0;
        }
        double v84 = v82 + v83;
        if ((__dst[21] & 1) == 0) {
          double v84 = v84 + (double)__dst[20] / 1000000000.0;
        }
        double v85 = ((double)v17 + -2451910.5) * 86400.0 + -43200.0 + v84;
        uint64_t v86 = swift_getObjectType();
        *(double *)__srca = v85;
        char v98 = v94;
        char v97 = 0;
        uint64_t result = (*(uint64_t (**)(_OWORD *, char *, char *, uint64_t))(v95 + 48))(__srca, &v98, &v97, v86);
        *uint64_t v48 = v85 - (double)result - v87;
        return result;
      }
      uint64_t result = (uint64_t)outlined init with take of ResolvedDateComponents(v100, &v106);
      switch(v107 >> 5)
      {
        case 1:
        case 2:
        case 4:
          v107 &= 0x1Fu;
          Swift::Int v49 = *((void *)&v106 + 1);
          break;
        default:
          v107 &= 0x1Fu;
          Swift::Int v49 = 1;
          break;
      }
      Swift::Int v50 = v49 - 2;
      if (__OFSUB__(v49, 2))
      {
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
        goto LABEL_152;
      }
      uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t))v106;
      uint64_t v52 = v106 + 4716;
      if (__OFADD__((void)v106, 4716)) {
        goto LABEL_9;
      }
      if (__OFSUB__(12, v50)) {
        goto LABEL_156;
      }
      uint64_t v53 = (14 - v49) / 12;
      BOOL v23 = __OFSUB__(v52, v53);
      uint64_t v54 = v52 - v53;
      if (v23)
      {
LABEL_157:
        __break(1u);
        goto LABEL_158;
      }
      if (__OFSUB__(v50, 1))
      {
LABEL_158:
        __break(1u);
        goto LABEL_159;
      }
      if (!__OFADD__(v49 - 3, 12))
      {
        if ((unsigned __int128)(v54 * (__int128)1461) >> 64 != (1461 * v54) >> 63) {
          goto LABEL_9;
        }
        uint64_t v55 = 1461 * v54 / 4
            + (int)(((26215 * (__int16)(v93 + 153 * (((int)v49 + 9) % 12))) >> 17)
                  + ((26215 * (__int16)(v93 + 153 * (((int)v49 + 9) % 12))) >> 31));
        uint64_t v56 = v55 - 1402;
        Swift::Int v57 = _CalendarGregorian.relativeWeekday(fromJulianDay:)(v55 - 1401);
        outlined init with take of ResolvedDateComponents(v100, &v101);
        LOBYTE(v17) = v105;
        switch(v105 >> 5)
        {
          case 1:
            goto LABEL_87;
          case 2:
            goto LABEL_92;
          case 3:
            v105 &= 0x1Fu;
            uint64_t v18 = *((void *)&v101 + 1);
            LOBYTE(v49) = (_BYTE)v102;
            if ((v104 & 1) == 0) {
              goto LABEL_107;
            }
            uint64_t result = 0;
            goto LABEL_108;
          case 4:
            v105 &= 0x1Fu;
            char v60 = v102;
            if (v104) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = _CalendarGregorian.wrapAroundRelativeWeekday(_:)(v103);
            }
            Swift::Int v49 = result - v57;
            uint64_t v69 = result - v57 + 1;
            if (*(unsigned char *)(v7 + 144) == 1)
            {
              if (!*(void *)(v7 + 88)) {
                goto LABEL_127;
              }
              uint64_t v70 = *(void *)(v7 + 96);
              uint64_t v71 = swift_getObjectType();
              uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t))(v70 + 344);
              swift_unknownObjectRetain();
              uint64_t v72 = v51(v71, v70);
              uint64_t result = swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v72 = *(void *)(v7 + 136);
            }
            if (7 - v57 < v72) {
              uint64_t v69 = v49 + 8;
            }
LABEL_127:
            uint64_t v75 = (uint64_t)v60 - 1;
            if (__OFSUB__(v60, 1)) {
              goto LABEL_166;
            }
            uint64_t v76 = 7 * v75;
            int64_t v59 = (int64_t)v100;
            if ((unsigned __int128)(v75 * (__int128)7) >> 64 != (7 * v75) >> 63) {
              goto LABEL_167;
            }
            uint64_t v77 = v69 + v76;
            if (__OFADD__(v69, v76)) {
              goto LABEL_168;
            }
            BOOL v23 = __OFADD__(v56, v77);
            uint64_t v17 = v56 + v77;
            if (!v23) {
              goto LABEL_136;
            }
            __break(1u);
LABEL_133:
            uint64_t result = _CalendarGregorian.numberOfDaysInMonth(_:year:)(v49, (Swift::Int)v51);
            uint64_t v78 = v59
                + ((((37 * (result - v57)) >> 8)
                  + (((result - v57 - ((unsigned __int16)(37 * (result - v57)) >> 8)) & 0xFE) >> 1)) >> 2)
                + 1;
            uint64_t v79 = 7 * v78;
            if ((unsigned __int128)(v78 * (__int128)7) >> 64 != (7 * v78) >> 63) {
              goto LABEL_174;
            }
            BOOL v23 = __OFADD__(v57, v79);
            Swift::Int v62 = v57 + v79;
            if (v23) {
              goto LABEL_175;
            }
LABEL_135:
            BOOL v23 = __OFADD__(v56, v62);
            uint64_t v17 = v56 + v62;
            if (v23) {
              goto LABEL_169;
            }
LABEL_136:
            uint64_t v48 = v96;
            goto LABEL_137;
          default:
            v105 &= 0x1Fu;
            uint64_t v17 = v56 + *((void *)&v101 + 1);
            if (!__OFADD__(v56, *((void *)&v101 + 1))) {
              goto LABEL_136;
            }
            __break(1u);
LABEL_87:
            unsigned __int8 v105 = v17 & 0x1F;
            uint64_t v58 = (uint64_t)v102;
            if ((_BYTE)v103) {
              uint64_t v58 = 1;
            }
            BOOL v23 = __OFADD__(v56, v58);
            uint64_t v17 = v56 + v58;
            if (!v23) {
              goto LABEL_136;
            }
            __break(1u);
LABEL_92:
            unsigned __int8 v105 = v17 & 0x1F;
            int64_t v59 = (int64_t)v102;
            if (v104) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = _CalendarGregorian.wrapAroundRelativeWeekday(_:)(v103);
            }
            if ((unint64_t)(result - v57) <= 0x7FFFFFFFFFFFFFFELL) {
              Swift::Int v57 = result - v57 + 1;
            }
            else {
              Swift::Int v57 = result - v57 + 8;
            }
            if (v59 < 0) {
              goto LABEL_133;
            }
            uint64_t v61 = 7 * (v59 - 1);
            if ((unsigned __int128)((v59 - 1) * (__int128)7) >> 64 != v61 >> 63) {
              goto LABEL_170;
            }
            BOOL v23 = __OFADD__(v57, v61);
            Swift::Int v62 = v57 + v61;
            if (!v23) {
              goto LABEL_135;
            }
            __break(1u);
LABEL_107:
            uint64_t result = _CalendarGregorian.wrapAroundRelativeWeekday(_:)(v103);
LABEL_108:
            uint64_t v63 = result - v57;
            uint64_t v64 = result - v57 + 1;
            if (*(unsigned char *)(v7 + 144) == 1)
            {
              if (!*(void *)(v7 + 88)) {
                goto LABEL_118;
              }
              uint64_t v65 = *(void *)(v7 + 96);
              uint64_t v66 = swift_getObjectType();
              uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t))(v65 + 344);
              swift_unknownObjectRetain();
              uint64_t v68 = v67(v66, v65);
              uint64_t result = swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v68 = *(void *)(v7 + 136);
            }
            if (7 - v57 < v68) {
              uint64_t v64 = v63 + 8;
            }
LABEL_118:
            if (v49) {
              goto LABEL_122;
            }
            uint64_t v73 = v18 - 1;
            if (__OFSUB__(v18, 1)) {
              goto LABEL_171;
            }
            uint64_t v74 = 7 * v73;
            if ((unsigned __int128)(v73 * (__int128)7) >> 64 != (7 * v73) >> 63) {
              goto LABEL_172;
            }
            BOOL v23 = __OFADD__(v64, v74);
            v64 += v74;
            if (v23) {
              goto LABEL_173;
            }
LABEL_122:
            uint64_t v17 = v56 + v64;
            if (__OFADD__(v56, v64)) {
              goto LABEL_165;
            }
            uint64_t v48 = v96;
            break;
        }
        goto LABEL_137;
      }
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
      return result;
  }
}

_OWORD *outlined init with take of ResolvedDateComponents(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

Swift::Int __swiftcall _CalendarGregorian.relativeWeekday(fromJulianDay:)(Swift::Int fromJulianDay)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v6;
  char v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  Swift::Int v3 = fromJulianDay + 1;
  if (__OFADD__(fromJulianDay, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*((unsigned char *)v2 + 128) != 1) {
    goto LABEL_9;
  }
  if (!*((void *)v2 + 11))
  {
    long long v9 = 1;
    goto LABEL_11;
  }
  uint64_t v1 = *((void *)v2 + 12);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 328);
  swift_unknownObjectRetain();
  v5(&v13, ObjectType, v1);
  LOBYTE(v1) = v13;
  if (one-time initialization token for weekdays != -1) {
    goto LABEL_15;
  }
  while (1)
  {
    long long v2 = static Locale.Weekday.weekdays;
    swift_bridgeObjectRetain();
    uint64_t v1 = specialized Collection<>.firstIndex(of:)(v1, (uint64_t)v2);
    uint64_t v7 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      break;
    }
    swift_unknownObjectRelease();
    long long v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_9:
      long long v9 = *((void *)v2 + 15);
    }
LABEL_11:
    long long v10 = v3 % 7 + 8;
    long long v11 = __OFSUB__(v10, v9);
    Swift::Int v12 = v10 - v9;
    if (!v11) {
      return v12 % 7;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once();
  }
  __break(1u);
  return result;
}

uint64_t specialized ResolvedDateComponents.init(dateComponents:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  memcpy(__dst, __src, 0x11AuLL);
  memcpy(v14, __src, 0x11AuLL);
  uint64_t v4 = specialized static ResolvedDateComponents.yearOrYearForWOYAdjustingEra(from:)((uint64_t)v14);
  uint64_t v6 = v5;
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  uint64_t v8 = __dst[10];
  if (LOBYTE(__dst[11]) == 1)
  {
    if (__dst[25] & 1) != 0 || (__dst[23])
    {
      uint64_t v9 = __dst[32];
      if (__dst[33] & 1) != 0 || (__dst[23])
      {
        if (__dst[31] & 1) != 0 || (__dst[23])
        {
          if (LOBYTE(__dst[13]) == 1)
          {
            if (__dst[35])
            {
              if (__dst[7])
              {
                if (LOBYTE(__dst[33]))
                {
                  if (__dst[31])
                  {
                    if (__dst[25])
                    {
                      if (__dst[23])
                      {
                        char v10 = 33;
                        uint64_t v11 = 1;
                      }
                      else
                      {
                        uint64_t v9 = 0;
                        char v10 = 64;
                        uint64_t v11 = __dst[22];
                        uint64_t v8 = 1;
                      }
                    }
                    else
                    {
                      uint64_t v11 = __dst[22];
                      uint64_t v9 = LOBYTE(__dst[23]);
                      char v10 = 64;
                      uint64_t v8 = __dst[24];
                    }
                  }
                  else
                  {
                    uint64_t v11 = __dst[22];
                    uint64_t v9 = LOBYTE(__dst[23]);
                    char v10 = 0x80;
                    uint64_t v8 = __dst[30];
                  }
                }
                else
                {
                  uint64_t v8 = 0;
                  uint64_t v11 = __dst[22];
                  uint64_t v6 = __dst[32];
                  uint64_t v9 = LOBYTE(__dst[23]);
                  char v10 = 96;
                }
              }
              else
              {
                char v10 = LOBYTE(__dst[33]) | 0x20;
                uint64_t v11 = 1;
              }
            }
            else
            {
              uint64_t v11 = __dst[22];
              uint64_t v6 = __dst[32];
              uint64_t v9 = LOBYTE(__dst[23]);
              char v10 = 96;
              uint64_t v8 = LOBYTE(__dst[33]);
            }
          }
          else
          {
            uint64_t v8 = 0;
            uint64_t v11 = 0;
            uint64_t v9 = 0;
            char v10 = 0;
            uint64_t v6 = __dst[12];
          }
        }
        else
        {
          uint64_t v9 = 0;
          char v10 = 0x80;
          uint64_t v11 = __dst[22];
          uint64_t v8 = __dst[30];
        }
      }
      else
      {
        uint64_t v8 = 0;
        char v10 = 96;
        uint64_t v11 = __dst[22];
        uint64_t v6 = __dst[32];
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      char v10 = 64;
      uint64_t v11 = __dst[22];
      uint64_t v8 = __dst[24];
    }
    goto LABEL_38;
  }
  uint64_t v9 = __dst[32];
  char v12 = LOBYTE(__dst[35]) ^ 1 | LOBYTE(__dst[33]);
  if (__dst[35] & 1) != 0 || (__dst[33])
  {
LABEL_23:
    uint64_t v11 = 0;
    char v10 = v12 | 0x20;
LABEL_38:
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v8;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v9;
    *(unsigned char *)(a2 + 40) = v10;
    return result;
  }
  if (__dst[9])
  {
LABEL_22:
    char v12 = 0;
    goto LABEL_23;
  }
  if (__dst[8] == 1 && __dst[32] >= 52)
  {
    BOOL v13 = __OFADD__(v4++, 1);
    if (!v13) {
      goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
    char v12 = 0;
    if (__dst[8] < 2 || __dst[32] != 1) {
      goto LABEL_23;
    }
    BOOL v13 = __OFSUB__(v4--, 1);
    if (!v13)
    {
      char v12 = 0;
      uint64_t v9 = 1;
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static ResolvedDateComponents.yearOrYearForWOYAdjustingEra(from:)(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 264);
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  char v5 = *(unsigned char *)(a1 + 72);
  if (*(unsigned char *)(a1 + 280))
  {
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = *(void *)(a1 + 48);
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 272);
    if ((*v1 & 1) == 0) {
      goto LABEL_11;
    }
  }
  if (v2) {
    char v7 = 1;
  }
  else {
    char v7 = v3;
  }
  if ((v7 & 1) == 0)
  {
    BOOL v8 = __OFSUB__(1, result);
    uint64_t result = 1 - result;
    if (v8)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
LABEL_11:
  if (v5) {
    return result;
  }
  if (v4 >= 13)
  {
    unint64_t v9 = (v4 - 1) / 0xCuLL;
    BOOL v8 = __OFADD__(result, v9);
    result += v9;
    if (!v8) {
      return result;
    }
    goto LABEL_20;
  }
  if (v4 > 0) {
    return result;
  }
  unint64_t v10 = -v4 / 0xCuLL;
  unint64_t v11 = result - v10;
  if (__OFADD__(result, -(uint64_t)v10)) {
    goto LABEL_21;
  }
  uint64_t result = v11 - 1;
  if (__OFSUB__(v11, 1)) {
LABEL_22:
  }
    __break(1u);
  return result;
}

uint64_t specialized static _CalendarGregorian.isComponentsInSupportedRange(_:)(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  int v3 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  int v5 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  int v9 = *(unsigned __int8 *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 128);
  int v11 = *(unsigned __int8 *)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 144);
  unsigned int v13 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 176);
  int v15 = *(unsigned __int8 *)(a1 + 184);
  uint64_t v16 = *(void *)(a1 + 192);
  int v17 = *(unsigned __int8 *)(a1 + 200);
  int v18 = *(unsigned __int8 *)(a1 + 248);
  int v19 = *(unsigned __int8 *)(a1 + 264);
  if ((*(unsigned char *)(a1 + 40) & 1) == 0 && (unint64_t)(*(void *)(a1 + 32) - 11) < 0xFFFFFFFFFFFFFFEBLL) {
    return 0;
  }
  if ((unint64_t)(*(void *)(a1 + 48) + 4714) < 0x7CDC5) {
    int v1 = 1;
  }
  if (v1 != 1) {
    return 0;
  }
  int v20 = (unint64_t)(*(void *)(a1 + 208) + 18856) < 0x1F3711 ? 1 : *(unsigned __int8 *)(a1 + 216);
  if (v20 != 1) {
    return 0;
  }
  if ((unint64_t)(*(void *)(a1 + 256) + 245128) < 0x195CBD1) {
    int v19 = 1;
  }
  if (v19 != 1) {
    return 0;
  }
  if ((unint64_t)(*(void *)(a1 + 240) + 245128) < 0x195CBD1) {
    int v18 = 1;
  }
  if (v18 != 1) {
    return 0;
  }
  int v21 = (unint64_t)(*(void *)(a1 + 272) + 4714) < 0x7CDC5 ? 1 : *(unsigned __int8 *)(a1 + 280);
  if (v21 != 1) {
    return 0;
  }
  int v22 = (unint64_t)(v14 + 1715896) < 0xB1892B1 ? 1 : v15;
  if (v22 != 1) {
    return 0;
  }
  int v23 = (unint64_t)(v16 + 245128) < 0x195CBD1 ? 1 : v17;
  if (v23 != 1) {
    return 0;
  }
  int v24 = (unint64_t)(v2 + 56568) < 0x5DA531 ? 1 : v3;
  if (v24 != 1) {
    return 0;
  }
  if ((unint64_t)(v6 + 1720610) < 0xB206075) {
    int v7 = 1;
  }
  if (v7 != 1) {
    return 0;
  }
  if ((unint64_t)(v4 + 1753608) < 0xB5700D1) {
    int v5 = 1;
  }
  if (v5 != 1) {
    return 0;
  }
  if ((unint64_t)(v8 + 41294640) < 0x82761B30) {
    int v9 = 1;
  }
  if (v9 != 1) {
    return 0;
  }
  int v25 = v10 == (int)v10 ? 1 : v11;
  if (v25 != 1) {
    return 0;
  }
  if (v12 == (int)v12) {
    return 1;
  }
  return v13;
}

Swift::tuple_rawOffset_Int_daylightSavingOffset_Double __swiftcall _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(Foundation::Date a1, Foundation::TimeZone::DaylightSavingTimePolicy repeatedTimePolicy, Foundation::TimeZone::DaylightSavingTimePolicy skippedTimePolicy)
{
  uint64_t v4 = *(void *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  partial apply for closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)((uint64_t *)(v4 + 16), (uint64_t)v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  swift_release();
  Swift::Int v5 = v8[0];
  double v6 = *(double *)&v8[1];
  result.daylightSavingOffset = v6;
  result.rawOffset = v5;
  return result;
}

uint64_t partial apply for closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v6, v7)[2] >> 31) {
    __break(1u);
  }
  uint64_t v8 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    *a1 = v8;
LABEL_2:
    ucal_getMillis();
    ucal_setMillis();
    ucal_getTimeZoneOffsetFromLocal();
    *(void *)a3 = 0;
    *(double *)(a3 + 8) = (double)0;
    return ucal_setMillis();
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  return result;
}

double protocol witness for _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:) in conformance _TimeZoneGMTICU()
{
  return 0.0;
}

Swift::Int __swiftcall _CalendarGregorian.numberOfDaysInMonth(_:year:)(Swift::Int _, Swift::Int year)
{
  if (_ >= 13)
  {
    unint64_t v3 = (_ - 1) / 0xCuLL;
    BOOL v4 = __OFADD__(year, v3);
    year += v3;
    if (!v4)
    {
      Swift::Int _ = (_ - 1) % 0xCuLL + 1;
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_25;
  }
  if (_ <= 0)
  {
    unint64_t v5 = -_ / 0xCuLL;
    unint64_t v6 = year + v5;
    if (__OFSUB__(year, -(uint64_t)v5))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    Swift::Int year = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    _ += 12 * v5 + 12;
  }
LABEL_8:
  if ((unint64_t)_ > 0xC) {
    goto LABEL_27;
  }
  if (((1 << _) & 0x15AA) != 0) {
    return 31;
  }
  if (((1 << _) & 0xA50) == 0)
  {
    if (_ == 2)
    {
      if (year >= *(void *)(v2 + 64))
      {
        if ((year & 3) != 0) {
          return 28;
        }
        if (__ROR8__(0x8F5C28F5C28F5C29 * year + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL) {
          return 29;
        }
        uint64_t v8 = 400;
      }
      else
      {
        uint64_t v8 = 4;
      }
      if (!(year % v8)) {
        return 29;
      }
      return 28;
    }
LABEL_27:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  return 30;
}

void protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneGMTICU(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

Swift::Int __swiftcall _CalendarGregorian.wrapAroundRelativeWeekday(_:)(Swift::Int a1)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v6;
  char v7;
  Swift::Int result;
  uint64_t v9;
  BOOL v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;

  if (*((unsigned char *)v1 + 128) != 1) {
    goto LABEL_8;
  }
  if (*((void *)v1 + 11))
  {
    uint64_t v2 = *((void *)v1 + 12);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 328);
    swift_unknownObjectRetain();
    v5(&v13, ObjectType, v2);
    LOBYTE(v2) = v13;
    if (one-time initialization token for weekdays != -1) {
      goto LABEL_16;
    }
    while (1)
    {
      int v1 = static Locale.Weekday.weekdays;
      swift_bridgeObjectRetain();
      uint64_t v2 = specialized Collection<>.firstIndex(of:)(v2, (uint64_t)v1);
      unint64_t v7 = v6;
      Swift::Int result = swift_bridgeObjectRelease();
      if (v7) {
        break;
      }
      swift_unknownObjectRelease();
      int v9 = v2 + 1;
      if (__OFADD__(v2, 1))
      {
        __break(1u);
LABEL_8:
        int v9 = *((void *)v1 + 15);
      }
      uint64_t v10 = __OFSUB__(a1, v9);
      int v11 = a1 - v9;
      if (!v10) {
        goto LABEL_10;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      swift_once();
    }
    __break(1u);
  }
  else
  {
    int v11 = a1 - 1;
    if (__OFSUB__(a1, 1)) {
      goto LABEL_15;
    }
LABEL_10:
    uint64_t v12 = v11 % 7;
    if (v12 >= 0) {
      return v12;
    }
    else {
      return v12 + 7;
    }
  }
  return result;
}

void iop_addDependency(unsigned __int8 *a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  char v8 = 0;
  uint64_t v9 = 0;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  int v22 = __iop_addDependency_block_invoke;
  int v23 = &unk_1E51F9740;
  int v25 = a3;
  int v26 = a1;
  int v24 = a2;
  LOBYTE(v10) = 1;
  uint64_t v11 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        char v12 = v8;
        uint64_t v13 = v11;
        char v14 = v10;
        int v15 = _NSOperationDependenciesAndReadyKeys[v9];
        if (v15 != @"isReady") {
          break;
        }
        uint64_t v11 = 0;
        int v16 = atomic_load(a1 + 236);
        char v17 = v8 | (v16 != 0);
        char v8 = 1;
        uint64_t v10 = v13;
        uint64_t v9 = 1;
        if (v17) {
          goto LABEL_14;
        }
      }
      if (v15 != @"isFinished") {
        break;
      }
      uint64_t v11 = 0;
      int v18 = a1 + 235;
LABEL_13:
      int v16 = atomic_load(v18);
      char v19 = v8 | (v16 != 0);
      uint64_t v9 = 1;
      uint64_t v10 = v13;
      char v8 = 1;
      if (v19)
      {
LABEL_14:
        if (v16) {
          char v20 = v14;
        }
        else {
          char v20 = v13;
        }
        if (v20) {
          goto LABEL_18;
        }
        goto LABEL_20;
      }
    }
    if (v15 == @"isExecuting")
    {
      uint64_t v11 = 0;
      int v18 = a1 + 234;
      goto LABEL_13;
    }
    if (v15 == @"isCancelled")
    {
      uint64_t v11 = 0;
      int v18 = a1 + 237;
      goto LABEL_13;
    }
    uint64_t v11 = 0;
    uint64_t v9 = 1;
    uint64_t v10 = v13;
    char v8 = 1;
  }
  while ((v12 & 1) == 0);
  if (v13)
  {
LABEL_18:
    [a3 _changeValueForKeys:_NSOperationDependenciesAndReadyKeys count:2 maybeOldValuesDict:0 maybeNewValuesDict:0 usingBlock:v21];
    goto LABEL_21;
  }
LABEL_20:
  ((void (*)(void *, uint64_t, uint64_t))v22)(v21, 1, v10);
  +[__NSOperationInternalObserver _observeValueForKeyPath:@"isReady" ofObject:a3 changeKind:0 oldValue:0 newValue:0 indexes:0 context:0];
LABEL_21:
}

void __iop_addDependency_block_invoke(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 224));
  uint64_t v2 = *(void **)(a1[6] + 32);
  if (v2)
  {
    uint64_t v3 = [v2 indexOfObjectIdenticalTo:a1[4]];
    uint64_t v4 = a1[6];
    if (v3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      id v7 = (os_unfair_lock_s *)(v4 + 224);
      goto LABEL_13;
    }
    unint64_t v5 = *(void **)(v4 + 32);
  }
  else
  {
    unint64_t v5 = objc_opt_new();
    *(void *)(a1[6] + 32) = v5;
  }
  [v5 addObject:a1[4]];
  uint64_t v6 = a1[4];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 224));
  id v7 = (os_unfair_lock_s *)(v6 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 232));
  os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 224));
  int v8 = atomic_load((unsigned __int8 *)(v6 + 237));
  if (v8 != 244)
  {
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1[6] + 232));
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = a1[6];
      uint64_t v11 = *(void *)(v10 + 48);
      if (v11 < 0) {
        __assert_rtn("iop_addDependency_block_invoke", "NSOperation.m", 795, "iop->__unfinished_deps >= 0");
      }
      *(void *)(v10 + 48) = v11 + 1;
      uint64_t v12 = a1[5];
      uint64_t v13 = *(NSHashTable **)(v6 + 48);
      if (!v13)
      {
        uint64_t v13 = +[NSHashTable hashTableWithOptions:5];
        *(void *)(v6 + 48) = v13;
      }
      [(NSHashTable *)v13 addObject:v12];
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 224));
LABEL_13:

  os_unfair_lock_unlock(v7);
}

void __NSOQSchedule_f(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x185308110]();
  pthread_t v5 = pthread_self();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  [*(id *)(a1 + 152) addPointer:v5];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 232));
  uint64_t v6 = (void *)voucher_adopt();
  *(void *)(a2 + 104) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 232));
  _CFSetTSD();
  _CFSetTSD();
  atomic_store(0xD8u, (unsigned __int8 *)(a2 + 237));
  __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__((void *)a2);
  _CFSetTSD();
  _CFSetTSD();
  if ([(id)a2 isFinished])
  {
    unsigned int v7 = atomic_load((unsigned __int8 *)(a2 + 237));
    if (v7 <= 0xEF) {
      +[__NSOperationInternalObserver _observeValueForKeyPath:@"isFinished" ofObject:a2 changeKind:0 oldValue:0 newValue:0 indexes:0 context:0];
    }
  }

  pthread_t v8 = pthread_self();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v9 = [*(id *)(a1 + 152) count];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = 0;
    while ((pthread_t)[*(id *)(a1 + 152) pointerAtIndex:v11] != v8)
    {
      if (v10 == ++v11) {
        goto LABEL_11;
      }
    }
    if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
      [*(id *)(a1 + 152) removePointerAtIndex:v11];
    }
  }
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
}

uint64_t __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__(void *a1)
{
  return [a1 start];
}

void NSSliceDealloc(uint64_t a1)
{
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);

  free(v2);
}

void *NSSliceInitWithSlice(void *a1, void *a2)
{
  uint64_t v4 = malloc_type_malloc(0x18uLL, 0x1080040B03C7EFDuLL);
  a1[1] = v4;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(v5 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  v4[2] = v6;
  Swift::Int result = malloc_type_malloc(0x28uLL, 0x10800408D251DEBuLL);
  a1[2] = result;
  pthread_t v8 = (long long *)a2[2];
  long long v9 = *v8;
  long long v10 = v8[1];
  result[4] = *((void *)v8 + 4);
  *(_OWORD *)Swift::Int result = v9;
  *((_OWORD *)result + 1) = v10;
  if (a2[3])
  {
    Swift::Int result = malloc_type_malloc(0x40uLL, 0x1080040E27AD052uLL);
    a1[3] = result;
    uint64_t v11 = (_OWORD *)a2[3];
    long long v13 = v11[2];
    long long v12 = v11[3];
    long long v14 = v11[1];
    *(_OWORD *)Swift::Int result = *v11;
    *((_OWORD *)result + 1) = v14;
    *((_OWORD *)result + 2) = v13;
    *((_OWORD *)result + 3) = v12;
  }
  *a1 = 0;
  return result;
}

void sub_1818167F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_181816938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

NSPointerArray *_myersDescent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = [a2 count];
  uint64_t v7 = [a1 count];
  if (v6 >> 60) {
    goto LABEL_61;
  }
  unint64_t v8 = v7;
  if (v6 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v6;
  }
  double v10 = MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v44 - v11;
  uint64_t v56 = 0;
  if (v6 >= 0x101)
  {
    long long v12 = (char *)_CFCreateArrayStorage();
    long long v13 = v12;
  }
  else
  {
    long long v13 = 0;
  }
  objc_msgSend(a2, "getObjects:range:", v12, 0, v6, v10);
  uint64_t v45 = v13;
  if (v8 >> 60)
  {
    CFStringRef v42 = CFStringCreateWithFormat(0, 0, @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt", v8);
    uint64_t v43 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v42 userInfo:0];
    CFRelease(v42);
    objc_exception_throw(v43);
  }
  if (v8 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v8;
  }
  MEMORY[0x1F4188790](v14);
  int v16 = 0;
  uint64_t v55 = 0;
  if (v8 < 0x101)
  {
    char v17 = (char *)&v44 - v15;
  }
  else
  {
    int v16 = (char *)_CFCreateArrayStorage();
    char v17 = v16;
  }
  objc_msgSend(a1, "getObjects:range:", v17, 0, v8);
  int v18 = [[NSPointerArray alloc] initWithOptions:2];
  uint64_t v53 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  *uint64_t v53 = 0;
  unint64_t v48 = v8 + v6;
  if (((v8 + v6) & 0x8000000000000000) == 0)
  {
    uint64_t v54 = 0;
    uint64_t v46 = v18;
    uint64_t v47 = v16;
    while (1)
    {
      if (!v53) {
        __assert_rtn("_myersDescent", "NSArray+NSArrayDiffing.m", 48, "prev_v");
      }
      -[NSPointerArray addPointer:](v18, "addPointer:");
      char v19 = malloc_type_malloc(8 * v54 + 8, 0x100004000313F17uLL);
      if (!v19) {
        break;
      }
      uint64_t v20 = v54;
      uint64_t v21 = -v54;
      uint64_t v51 = v19;
      uint64_t v52 = v21 ^ (v21 >> 63);
      Swift::Int v49 = v17;
      uint64_t v50 = -v54;
      int v22 = v17;
      uint64_t v23 = -v54;
      do
      {
        if (v23 == v21)
        {
          unint64_t v24 = v53[v52];
        }
        else
        {
          uint64_t v25 = 1 - v23;
          if (v23 >= 2) {
            uint64_t v25 = v23 - 2;
          }
          unint64_t v26 = v53[v25];
          if (v23 == v54 || (unint64_t v24 = v53[v23 ^ (v23 >> 63)], v26 >= v24)) {
            unint64_t v24 = v26 + 1;
          }
        }
        unint64_t v27 = v24 - v23;
        BOOL v28 = v24 - v23 < v8;
        BOOL v29 = v24 < v6;
        if (v24 >= v6 || v27 >= v8)
        {
LABEL_35:
          uint64_t v31 = v23 - 1;
          if (v23 < 1) {
            uint64_t v31 = -v23;
          }
          v19[v31] = v24;
          if (!v29 && !v28)
          {
            free(v19);
            uint64_t v53 = 0;
            goto LABEL_45;
          }
        }
        else
        {
          while (((*(uint64_t (**)(uint64_t, void, void))(a3 + 16))(a3, *(void *)&v12[8 * v24], *(void *)&v22[8 * v24]) & 1) != 0)
          {
            BOOL v28 = ++v24 + v20 < v8;
            BOOL v29 = v24 < v6;
            if (v24 >= v6 || v24 + v20 >= v8)
            {
              unint64_t v27 = v20 + v24;
              uint64_t v21 = v50;
              char v19 = v51;
              goto LABEL_35;
            }
          }
          uint64_t v32 = v23 - 1;
          if (v23 < 1) {
            uint64_t v32 = -v23;
          }
          uint64_t v21 = v50;
          char v19 = v51;
          v51[v32] = v24;
          unint64_t v27 = v20 + v24;
        }
        v23 += 2;
        v20 -= 2;
        v22 -= 16;
      }
      while (v23 <= v54);
      uint64_t v53 = v19;
LABEL_45:
      BOOL v33 = v27 >= v8 && v24 >= v6;
      int v18 = v46;
      int v16 = v47;
      if (!v33)
      {
        uint64_t v34 = v54;
        char v17 = v49 + 8;
        ++v54;
        if (v34 != v48) {
          continue;
        }
      }
      goto LABEL_52;
    }
    qword_1E8EDF350 = (uint64_t)"Out of memory";
    __break(1u);
LABEL_61:
    CFStringRef v40 = CFStringCreateWithFormat(0, 0, @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt", v6);
    uint64_t v41 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v40 userInfo:0];
    CFRelease(v40);
    objc_exception_throw(v41);
  }
  unint64_t v24 = 0;
  unint64_t v27 = 0;
LABEL_52:
  char v35 = "x >= n && y >= m";
  int v36 = 91;
  if (v24 < v6 || (uint64_t v37 = v45, v27 < v8)) {
LABEL_59:
  }
    __assert_rtn("_myersDescent", "NSArray+NSArrayDiffing.m", v36, v35);
  long long v38 = v53;
  if (v53
    && v38 != [(NSPointerArray *)v18 pointerAtIndex:[(NSPointerArray *)v18 count] - 1])
  {
    char v35 = "v == NULL || v == [result pointerAtIndex:result.count - 1]";
    int v36 = 92;
    goto LABEL_59;
  }
  free(v16);
  free(v37);
  return v18;
}

void sub_181816E2C(_Unwind_Exception *a1)
{
  free(*(void **)(v1 - 184));
  _Unwind_Resume(a1);
}

uint64_t _block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3) {
    return 1;
  }
  else {
    return objc_msgSend(a2, "isEqual:");
  }
}

void Data.append(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((a1 ^ (unint64_t)(a1 << 32)) >> 32) {
        goto LABEL_12;
      }
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      if (v4 != v5)
      {
        if (a2 >> 62 == 2)
        {
          unint64_t v6 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
          swift_retain();
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v4, v5, v6);
          swift_release();
          swift_release();
        }
        else
        {
LABEL_12:
          if (a1 >> 32 < (int)a1) {
            __break(1u);
          }
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL));
          outlined consume of Data._Representation(a1, a2);
        }
      }
      break;
    case 3uLL:
      return;
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
        uint64_t __src = a1;
        __int16 v8 = a2;
        char v9 = BYTE2(a2);
        char v10 = BYTE3(a2);
        char v11 = BYTE4(a2);
        char v12 = BYTE5(a2);
        Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + BYTE6(a2));
      }
      break;
  }
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3)
  {
    if (!__OFSUB__(a2, a1))
    {
      __int16 v8 = 0;
      char v10 = 0;
LABEL_9:
      Data._Representation.append(contentsOf:)(v8, v10);
      return;
    }
    goto LABEL_10;
  }
  uint64_t v4 = a3[5];
  BOOL v5 = __OFSUB__(a1, v4);
  uint64_t v6 = a1 - v4;
  if (!v5)
  {
    uint64_t v7 = a2 - a1;
    if (!__OFSUB__(a2, a1))
    {
      __int16 v8 = (unsigned char *)(v3 + v6);
      uint64_t v9 = a3[3];
      if (v9 >= v7) {
        uint64_t v9 = v7;
      }
      char v10 = &v8[v9];
      goto LABEL_9;
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
}

{
  specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v3 = a3[2];
  if (!v3)
  {
    if (!__OFSUB__(a2, a1)) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v4 = a3[5];
  BOOL v5 = __OFSUB__(a1, v4);
  uint64_t v6 = a1 - v4;
  if (v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3[3] >= a2 - a1) {
    uint64_t v7 = a2 - a1;
  }
  else {
    uint64_t v7 = a3[3];
  }
  _BPlistEncodingFormat.Writer.write(_:)((char *)(v3 + v6), v7);
}

uint64_t _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v95 = a5;
  uint64_t v96 = a6;
  uint64_t v97 = a4;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  char v94 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v102 = *(void *)(v13 - 8);
  uint64_t v103 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v100 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v87 - v16;
  uint64_t v18 = *v7;
  uint64_t v19 = v7[1];
  unint64_t v20 = v7[2];
  uint64_t v21 = *(void *)(a3 + 24);
  v105[3] = v10;
  v105[4] = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v105);
  uint64_t v101 = v11;
  char v98 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v99 = a2;
  v98(boxed_opaque_existential_1, a2, v10);
  uint64_t v93 = v21;
  uint64_t v104 = _JSONKeyedEncodingContainer._converted(_:)(v105, v18, v19, v20);
  uint64_t v24 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
  uint64_t v25 = v7[1];
  if (*(unsigned char *)(v25 + 32) != 4)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v26 = *(void *)(v25 + 16);
  if (*(void *)(v26 + 16))
  {
    uint64_t v27 = *(void *)(v25 + 24);
    outlined copy of JSONReference.Backing(*(void *)(v25 + 16), v27, 4);
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
    if (v29)
    {
      uint64_t v30 = *(void *)(*(void *)(v26 + 56) + 8 * v28);
      swift_retain();
      outlined consume of JSONReference.Backing(v26, v27, 4);
      swift_bridgeObjectRelease_n();
      if (*(unsigned char *)(v30 + 32) == 4)
      {
LABEL_54:
        uint64_t v104 = v30;
        uint64_t v68 = *v7;
        unint64_t v69 = v7[2];
        v98((uint64_t *)v17, v99, v10);
        uint64_t v70 = v101;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v17, 0, 1, v10);
        uint64_t v72 = v102;
        uint64_t v71 = v103;
        uint64_t v73 = v100;
        (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v100, v17, v103);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v73, 1, v10) == 1)
        {
          uint64_t v74 = *(void (**)(char *, uint64_t))(v72 + 8);
          swift_retain();
          v74(v17, v71);
          v74(v73, v71);
          swift_retain();
          uint64_t v75 = v104;
LABEL_62:
          v105[0] = v68;
          v105[1] = v75;
          v105[2] = v69;
          type metadata accessor for _JSONKeyedEncodingContainer();
          swift_getWitnessTable();
          return KeyedEncodingContainer.init<A>(_:)();
        }
        uint64_t v76 = v17;
        uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
        uint64_t v78 = v94;
        v77(v94, v73, v10);
        uint64_t v79 = (uint64_t *)swift_allocObject();
        uint64_t v80 = v93;
        v79[5] = v10;
        v79[6] = v80;
        double v81 = __swift_allocate_boxed_opaque_existential_1(v79 + 2);
        v77((char *)v81, v78, v10);
        double v82 = *(void (**)(char *, uint64_t))(v72 + 8);
        swift_retain();
        v82(v76, v71);
        v79[7] = v69;
        if (v69 >> 62)
        {
          if (v69 >> 62 != 1)
          {
            uint64_t v75 = v104;
            uint64_t v85 = 1;
            goto LABEL_61;
          }
          double v83 = (uint64_t *)((v69 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          double v83 = (uint64_t *)(v69 + 64);
        }
        uint64_t v75 = v104;
        uint64_t v84 = *v83;
        swift_retain();
        uint64_t v85 = v84 + 1;
        if (!__OFADD__(v84, 1))
        {
LABEL_61:
          v79[8] = v85;
          unint64_t v69 = (unint64_t)v79;
          goto LABEL_62;
        }
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      __break(1u);
    }
    outlined consume of JSONReference.Backing(v26, v27, 4);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for JSONReference();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v31 + 24) = 0;
  *(unsigned char *)(v31 + 32) = 4;
  if (*(unsigned char *)(v25 + 32) != 4)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  uint64_t v30 = v31;
  uint64_t v32 = *(void *)(v25 + 16);
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  *(unsigned char *)(v25 + 32) = 7;
  swift_retain_n();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v105[0] = v32;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
  uint64_t v36 = *(void *)(v32 + 16);
  BOOL v37 = (v34 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v32 + 24) < v38)
    {
      char v39 = v34;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      uint64_t v40 = v105[0];
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
      if ((v39 & 1) != (v42 & 1)) {
        goto LABEL_69;
      }
      unint64_t v35 = v41;
      if ((v39 & 1) == 0) {
        goto LABEL_52;
      }
LABEL_15:
      uint64_t v43 = *(void *)(v40 + 56);
      uint64_t v44 = 8 * v35;
      swift_release();
      *(void *)(v43 + v44) = v30;
LABEL_53:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = *(void *)(v25 + 16);
      uint64_t v66 = *(void *)(v25 + 24);
      *(void *)(v25 + 16) = v40;
      *(void *)(v25 + 24) = 0;
      char v67 = *(unsigned char *)(v25 + 32);
      *(unsigned char *)(v25 + 32) = 4;
      outlined consume of JSONReference.Backing(v65, v66, v67);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_54;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v40 = v32;
      if (v34) {
        goto LABEL_15;
      }
LABEL_52:
      specialized _NativeDictionary._insert(at:key:value:)(v35, v104, v24, v30, v40);
      swift_bridgeObjectRetain();
      goto LABEL_53;
    }
  }
  unint64_t v87 = v35;
  int v88 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v45 = static _DictionaryStorage.copy(original:)();
  uint64_t v40 = v45;
  uint64_t v46 = *(void *)(v32 + 16);
  if (!v46)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    unint64_t v35 = v87;
    if (v88) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
  uint64_t v47 = (void *)(v45 + 64);
  unint64_t v48 = (unint64_t)((1 << *(unsigned char *)(v40 + 32)) + 63) >> 6;
  if (v40 != v32 || (unint64_t)v47 >= v32 + 64 + 8 * v48)
  {
    memmove(v47, (const void *)(v32 + 64), 8 * v48);
    uint64_t v46 = *(void *)(v32 + 16);
  }
  int64_t v49 = 0;
  *(void *)(v40 + 16) = v46;
  uint64_t v50 = 1 << *(unsigned char *)(v32 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & *(void *)(v32 + 64);
  uint64_t v89 = v32 + 64;
  int64_t v90 = (unint64_t)(v50 + 63) >> 6;
  while (1)
  {
    if (v52)
    {
      uint64_t v91 = (v52 - 1) & v52;
      int64_t v92 = v49;
      unint64_t v53 = __clz(__rbit64(v52)) | (v49 << 6);
      goto LABEL_25;
    }
    int64_t v60 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      goto LABEL_65;
    }
    if (v60 >= v90) {
      goto LABEL_51;
    }
    unint64_t v61 = *(void *)(v89 + 8 * v60);
    int64_t v62 = v49 + 1;
    if (!v61)
    {
      int64_t v62 = v60 + 1;
      if (v60 + 1 >= v90) {
        goto LABEL_51;
      }
      unint64_t v61 = *(void *)(v89 + 8 * v62);
      if (!v61)
      {
        int64_t v62 = v60 + 2;
        if (v60 + 2 >= v90) {
          goto LABEL_51;
        }
        unint64_t v61 = *(void *)(v89 + 8 * v62);
        if (!v61)
        {
          int64_t v62 = v60 + 3;
          if (v60 + 3 >= v90) {
            goto LABEL_51;
          }
          unint64_t v61 = *(void *)(v89 + 8 * v62);
          if (!v61)
          {
            int64_t v62 = v60 + 4;
            if (v60 + 4 >= v90) {
              goto LABEL_51;
            }
            unint64_t v61 = *(void *)(v89 + 8 * v62);
            if (!v61)
            {
              int64_t v62 = v60 + 5;
              if (v60 + 5 >= v90) {
                goto LABEL_51;
              }
              unint64_t v61 = *(void *)(v89 + 8 * v62);
              if (!v61)
              {
                int64_t v62 = v60 + 6;
                if (v60 + 6 >= v90) {
                  goto LABEL_51;
                }
                unint64_t v61 = *(void *)(v89 + 8 * v62);
                if (!v61)
                {
                  int64_t v62 = v60 + 7;
                  if (v60 + 7 >= v90) {
                    goto LABEL_51;
                  }
                  unint64_t v61 = *(void *)(v89 + 8 * v62);
                  if (!v61) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_50:
    uint64_t v91 = (v61 - 1) & v61;
    int64_t v92 = v62;
    unint64_t v53 = __clz(__rbit64(v61)) + (v62 << 6);
LABEL_25:
    uint64_t v54 = 16 * v53;
    uint64_t v55 = (void *)(*(void *)(v32 + 48) + 16 * v53);
    uint64_t v56 = v55[1];
    uint64_t v57 = 8 * v53;
    uint64_t v58 = *(void *)(*(void *)(v32 + 56) + v57);
    int64_t v59 = (void *)(*(void *)(v40 + 48) + v54);
    *int64_t v59 = *v55;
    v59[1] = v56;
    *(void *)(*(void *)(v40 + 56) + v57) = v58;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v52 = v91;
    int64_t v49 = v92;
  }
  int64_t v63 = v60 + 8;
  if (v63 >= v90) {
    goto LABEL_51;
  }
  uint64_t v64 = v30;
  unint64_t v61 = *(void *)(v89 + 8 * v63);
  if (v61)
  {
    int64_t v62 = v63;
    goto LABEL_50;
  }
  while (1)
  {
    int64_t v62 = v63 + 1;
    if (__OFADD__(v63, 1)) {
      break;
    }
    uint64_t v30 = v64;
    if (v62 >= v90) {
      goto LABEL_51;
    }
    unint64_t v61 = *(void *)(v89 + 8 * v62);
    ++v63;
    if (v61) {
      goto LABEL_50;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3[1];
  type metadata accessor for JSONReference();
  uint64_t inited = swift_initStaticObject();
  uint64_t v8 = *v3;
  unint64_t v9 = v3[2];
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  v53[3] = v11;
  v53[4] = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, a2, v11);
  swift_retain();
  uint64_t v13 = _JSONKeyedEncodingContainer._converted(_:)(v53, v8, v6, v9);
  uint64_t v15 = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  if (*(unsigned char *)(v6 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 7;
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53[0] = v16;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
  uint64_t v20 = *(void *)(v16 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v11) = v18;
    if (*(void *)(v16 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = v53[0];
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
      if ((v11 & 1) != (v25 & 1)) {
        goto LABEL_51;
      }
      unint64_t v19 = v24;
      if ((v11 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v26 = *(void *)(v23 + 56);
      swift_release();
      *(void *)(v26 + 8 * v19) = inited;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = *(void *)(v6 + 24);
      *(void *)(v6 + 16) = v23;
      *(void *)(v6 + 24) = 0;
      char v48 = *(unsigned char *)(v6 + 32);
      *(unsigned char *)(v6 + 32) = 4;
      outlined consume of JSONReference.Backing(v46, v47, v48);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v23 = v16;
      if (v18) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v19, v13, v15, inited, v23);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v27 = static _DictionaryStorage.copy(original:)();
  uint64_t v23 = v27;
  if (!*(void *)(v16 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v28 = (void *)(v27 + 64);
  unint64_t v29 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
  if (v23 != v16 || (unint64_t)v28 >= v16 + 64 + 8 * v29) {
    memmove(v28, (const void *)(v16 + 64), 8 * v29);
  }
  uint64_t v50 = v16 + 64;
  int64_t v30 = 0;
  *(void *)(v23 + 16) = *(void *)(v16 + 16);
  uint64_t v31 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & *(void *)(v16 + 64);
  int64_t v51 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      unint64_t v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      int64_t v52 = v30;
      unint64_t v35 = v34 | (v30 << 6);
      goto LABEL_19;
    }
    int64_t v42 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v42 >= v51) {
      goto LABEL_45;
    }
    unint64_t v43 = *(void *)(v50 + 8 * v42);
    int64_t v44 = v30 + 1;
    if (!v43)
    {
      int64_t v44 = v30 + 2;
      if (v30 + 2 >= v51) {
        goto LABEL_45;
      }
      unint64_t v43 = *(void *)(v50 + 8 * v44);
      if (!v43)
      {
        int64_t v44 = v30 + 3;
        if (v30 + 3 >= v51) {
          goto LABEL_45;
        }
        unint64_t v43 = *(void *)(v50 + 8 * v44);
        if (!v43)
        {
          int64_t v44 = v30 + 4;
          if (v30 + 4 >= v51) {
            goto LABEL_45;
          }
          unint64_t v43 = *(void *)(v50 + 8 * v44);
          if (!v43)
          {
            int64_t v44 = v30 + 5;
            if (v30 + 5 >= v51) {
              goto LABEL_45;
            }
            unint64_t v43 = *(void *)(v50 + 8 * v44);
            if (!v43)
            {
              int64_t v44 = v30 + 6;
              if (v30 + 6 >= v51) {
                goto LABEL_45;
              }
              unint64_t v43 = *(void *)(v50 + 8 * v44);
              if (!v43)
              {
                int64_t v44 = v30 + 7;
                if (v30 + 7 >= v51) {
                  goto LABEL_45;
                }
                unint64_t v43 = *(void *)(v50 + 8 * v44);
                if (!v43)
                {
                  int64_t v44 = v30 + 8;
                  if (v30 + 8 >= v51) {
                    goto LABEL_45;
                  }
                  unint64_t v43 = *(void *)(v50 + 8 * v44);
                  if (!v43) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v33 = (v43 - 1) & v43;
    int64_t v52 = v44;
    unint64_t v35 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_19:
    uint64_t v36 = 16 * v35;
    BOOL v37 = (void *)(*(void *)(v16 + 48) + 16 * v35);
    uint64_t v38 = v37[1];
    uint64_t v39 = 8 * v35;
    uint64_t v40 = *(void *)(*(void *)(v16 + 56) + v39);
    unint64_t v41 = (void *)(*(void *)(v23 + 48) + v36);
    *unint64_t v41 = *v37;
    v41[1] = v38;
    *(void *)(*(void *)(v23 + 56) + v39) = v40;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v30 = v52;
  }
  uint64_t v45 = v30 + 9;
  if (v30 + 9 >= v51) {
    goto LABEL_45;
  }
  unint64_t v43 = *(void *)(v50 + 8 * v45);
  if (v43)
  {
    int64_t v44 = v30 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v44 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      break;
    }
    if (v44 >= v51) {
      goto LABEL_45;
    }
    unint64_t v43 = *(void *)(v50 + 8 * v44);
    ++v45;
    if (v43) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57[5];

  uint64_t v4 = v3;
  uint64_t v7 = v3[1];
  v57[0] = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(unsigned char *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  uint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  char v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  unint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(unsigned char *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(unsigned char *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  unint64_t v24 = *(void *)(v20 + 16);
  char v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      uint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      int64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      int64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0;
      int64_t v52 = *(unsigned char *)(v7 + 32);
      *(unsigned char *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = v20;
      if (v22) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  uint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33) {
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  }
  uint64_t v54 = v20 + 64;
  unint64_t v34 = 0;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  unint64_t v35 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  BOOL v37 = v36 & *(void *)(v20 + 64);
  uint64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      uint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      uint64_t v56 = v34;
      uint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    uint64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v54 + 8 * v46);
    char v48 = v34 + 1;
    if (!v47)
    {
      char v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      uint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        char v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        uint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          char v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          uint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            char v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            uint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              char v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              uint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                char v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                uint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  char v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  uint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    BOOL v37 = (v47 - 1) & v47;
    uint64_t v56 = v48;
    uint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    unint64_t v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    int64_t v42 = v41[1];
    unint64_t v43 = 8 * v39;
    int64_t v44 = *(void *)(*(void *)(v20 + 56) + v43);
    uint64_t v45 = (void *)(*(void *)(v27 + 48) + v40);
    *uint64_t v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v34 = v56;
  }
  int64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  uint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    char v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    char v48 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeArray(_:depth:)(Swift::OpaquePointer _, Swift::Int depth)
{
  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v43 = 0;
    *(void *)(v43 + 8) = 0;
    *(void *)(v43 + 16) = 0;
    *(void *)(v43 + 24) = 1;
    *(void *)(v43 + 32) = 0;
    *(void *)(v43 + 40) = 0;
    *(unsigned char *)(v43 + 48) = 2;
    swift_willThrow();
    return;
  }
  uint64_t v3 = v2;
  Swift::Int v4 = depth;
  *(void *)&long long __src = 91;
  *((void *)&__src + 1) = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
  swift_bridgeObjectRelease();
  if (*((unsigned char *)v3 + 8) == 1)
  {
    *(void *)&long long __src = 10;
    *((void *)&__src + 1) = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
    swift_bridgeObjectRelease();
    if (__OFADD__(*v3, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    ++*v3;
  }
  if ((unint64_t)_._rawValue >> 62) {
    goto LABEL_67;
  }
  uint64_t v6 = *(void *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v6)
  {
    unint64_t v7 = 0;
    unint64_t v50 = (unint64_t)_._rawValue & 0xC000000000000001;
    unint64_t v46 = (unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8;
    Swift::Int deptha = v4 + 1;
    Swift::Int v4 = 1;
    rawValue = _._rawValue;
    uint64_t v47 = v6;
    if (((unint64_t)_._rawValue & 0xC000000000000001) != 0)
    {
LABEL_8:
      uint64_t v8 = MEMORY[0x185303120](v7, _._rawValue);
      unint64_t v9 = v7 + 1;
      if (!__OFADD__(v7, 1)) {
        goto LABEL_13;
      }
    }
    else
    {
      while (2)
      {
        if (v7 >= *(void *)(v46 + 16)) {
          goto LABEL_66;
        }
        uint64_t v8 = *((void *)_._rawValue + v7 + 4);
        swift_retain();
        unint64_t v9 = v7 + 1;
        if (!__OFADD__(v7, 1))
        {
LABEL_13:
          if (v4)
          {
            if (v3[1]) {
              goto LABEL_15;
            }
          }
          else
          {
            if (*((unsigned char *)v3 + 8))
            {
              long long __src = xmmword_182110460;
              Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 2);
            }
            else
            {
              long long __src = xmmword_182110450;
              Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 1);
            }
            swift_bridgeObjectRelease();
            if (*((unsigned char *)v3 + 8) == 1) {
LABEL_15:
            }
              JSONWriter.writeIndent()();
          }
          uint64_t v10 = *(void *)(v8 + 16);
          uint64_t v11 = *(void *)(v8 + 24);
          switch(*(unsigned char *)(v8 + 32))
          {
            case 1:
              if ((v11 & 0x1000000000000000) == 0)
              {
                outlined copy of JSONReference.Backing(*(void *)(v8 + 16), *(void *)(v8 + 24), 1);
                swift_bridgeObjectRetain();
                unint64_t v12 = v11;
                uint64_t v13 = v10;
                if ((v11 & 0x2000000000000000) == 0) {
                  goto LABEL_25;
                }
LABEL_47:
                uint64_t v37 = HIBYTE(v12) & 0xF;
                *(void *)&long long __src = v13;
                *((void *)&__src + 1) = v12 & 0xFFFFFFFFFFFFFFLL;
                if (v37)
                {
                  uint64_t v16 = (char *)&__src + v37;
                  p_src = &__src;
LABEL_49:
                  Data._Representation.append(contentsOf:)(p_src, v16);
                }
LABEL_50:
                swift_bridgeObjectRelease();
                uint64_t v38 = v10;
                uint64_t v39 = v11;
                char v40 = 1;
                goto LABEL_56;
              }
              swift_bridgeObjectRetain();
              uint64_t v13 = static String._copying(_:)();
              unint64_t v12 = v36;
              if ((v36 & 0x2000000000000000) != 0) {
                goto LABEL_47;
              }
LABEL_25:
              if ((v13 & 0x1000000000000000) != 0)
              {
                uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFFLL) + 32;
                uint64_t v15 = v13 & 0xFFFFFFFFFFFFLL;
                if ((v13 & 0xFFFFFFFFFFFFLL) == 0) {
                  goto LABEL_50;
                }
              }
              else
              {
                uint64_t v14 = _StringObject.sharedUTF8.getter();
                if (!v15) {
                  goto LABEL_50;
                }
              }
              uint64_t v16 = (unsigned char *)(v14 + v15);
              p_src = (long long *)v14;
              goto LABEL_49;
            case 2:
              if (v10) {
                uint64_t v18 = 1702195828;
              }
              else {
                uint64_t v18 = 0x65736C6166;
              }
              if (v10) {
                unint64_t v19 = 0xE400000000000000;
              }
              else {
                unint64_t v19 = 0xE500000000000000;
              }
              swift_bridgeObjectRetain();
              long long __src = (unint64_t)v18;
              Data._Representation.append(contentsOf:)(&__src, (unsigned char *)((unint64_t)&__src | HIBYTE(v19) & 0x1F));
              swift_release();
              _._rawValue = rawValue;
              swift_bridgeObjectRelease_n();
              goto LABEL_57;
            case 3:
              uint64_t v20 = swift_bridgeObjectRetain();
              JSONWriter.serializeArray(_:depth:)((Swift::OpaquePointer)v20, deptha);
              uint64_t v22 = v21;
              uint64_t v23 = v10;
              uint64_t v24 = v11;
              char v25 = 3;
              goto LABEL_43;
            case 4:
              uint64_t v26 = swift_bridgeObjectRetain();
              JSONWriter.serializeObject(_:depth:)((Swift::OpaquePointer)v26, deptha);
              uint64_t v22 = v27;
              uint64_t v23 = v10;
              uint64_t v24 = v11;
              char v25 = 4;
              goto LABEL_43;
            case 5:
              if ((v11 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRetain();
                uint64_t v29 = static String._copying(_:)();
                unint64_t v28 = v41;
                if ((v41 & 0x2000000000000000) != 0)
                {
LABEL_52:
                  uint64_t v42 = HIBYTE(v28) & 0xF;
                  *(void *)&long long __src = v29;
                  *((void *)&__src + 1) = v28 & 0xFFFFFFFFFFFFFFLL;
                  if (!v42) {
                    goto LABEL_55;
                  }
                  uint64_t v32 = (char *)&__src + v42;
                  unint64_t v33 = &__src;
                  goto LABEL_54;
                }
              }
              else
              {
                outlined copy of JSONReference.Backing(*(void *)(v8 + 16), *(void *)(v8 + 24), 5);
                swift_bridgeObjectRetain();
                unint64_t v28 = v11;
                uint64_t v29 = v10;
                if ((v11 & 0x2000000000000000) != 0) {
                  goto LABEL_52;
                }
              }
              if ((v29 & 0x1000000000000000) != 0)
              {
                uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
                uint64_t v31 = v29 & 0xFFFFFFFFFFFFLL;
                if ((v29 & 0xFFFFFFFFFFFFLL) == 0) {
                  goto LABEL_55;
                }
LABEL_41:
                uint64_t v32 = (unsigned char *)(v30 + v31);
                unint64_t v33 = (long long *)v30;
LABEL_54:
                Data._Representation.append(contentsOf:)(v33, v32);
                goto LABEL_55;
              }
              uint64_t v30 = _StringObject.sharedUTF8.getter();
              if (v31) {
                goto LABEL_41;
              }
LABEL_55:
              swift_bridgeObjectRelease();
              uint64_t v38 = v10;
              uint64_t v39 = v11;
              char v40 = 5;
LABEL_56:
              outlined consume of JSONReference.Backing(v38, v39, v40);
              swift_release();
              _._rawValue = rawValue;
LABEL_57:
              if (v9 == v47) {
                goto LABEL_68;
              }
              Swift::Int v4 = 0;
              ++v7;
              if (!v50) {
                continue;
              }
              goto LABEL_8;
            case 6:
              uint64_t v34 = swift_bridgeObjectRetain();
              JSONWriter.serializePreformattedStringArray(_:depth:)((Swift::OpaquePointer)v34, deptha);
              uint64_t v22 = v35;
              uint64_t v23 = v10;
              uint64_t v24 = v11;
              char v25 = 6;
LABEL_43:
              outlined consume of JSONReference.Backing(v23, v24, v25);
              swift_release();
              if (v22) {
                goto LABEL_72;
              }
              goto LABEL_57;
            case 7:
              long long __src = xmmword_182110470;
              Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 4);
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_57;
            default:
              *(void *)&long long __src = 34;
              *((void *)&__src + 1) = 0xE100000000000000;
              swift_bridgeObjectRetain();
              specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
              swift_bridgeObjectRelease();
              *(void *)&long long __src = v10;
              *((void *)&__src + 1) = v11;
              swift_bridgeObjectRetain();
              specialized String.withUTF8<A>(_:)((uint64_t *)&__src, (uint64_t)v3);
              swift_bridgeObjectRelease();
              v48[0] = 34;
              v48[1] = 0xE100000000000000;
              specialized String.withUTF8<A>(_:)(v48);
              swift_bridgeObjectRelease();
              outlined consume of JSONReference.Backing(v10, v11, 0);
              swift_release();
              goto LABEL_57;
          }
        }
        break;
      }
    }
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_68:
  swift_bridgeObjectRelease();
  if (*((unsigned char *)v3 + 8) != 1) {
    goto LABEL_71;
  }
  *(void *)&long long __src = 10;
  *((void *)&__src + 1) = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
  swift_bridgeObjectRelease();
  if (__OFSUB__(*v3, 1))
  {
LABEL_74:
    __break(1u);
    return;
  }
  --*v3;
  JSONWriter.writeIndent()();
LABEL_71:
  *(void *)&long long __src = 93;
  *((void *)&__src + 1) = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)&__src);
LABEL_72:
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeString(_:)(Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = 34;
  unint64_t v6 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v5);
  swift_bridgeObjectRelease();
  uint64_t v5 = countAndFlagsBits;
  unint64_t v6 = (unint64_t)object;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v5, v1);
  swift_bridgeObjectRelease();
  v4[0] = 34;
  v4[1] = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(v4);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeObject(_:depth:)(Swift::OpaquePointer _, Swift::Int depth)
{
  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 1;
    *(void *)(v17 + 32) = 0;
    *(void *)(v17 + 40) = 0;
    *(unsigned char *)(v17 + 48) = 2;
    swift_willThrow();
    return;
  }
  uint64_t v45 = 123;
  unint64_t v46 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v45);
  uint64_t v5 = v3;
  swift_bridgeObjectRelease();
  if (*((unsigned char *)v2 + 8) == 1)
  {
    uint64_t v45 = 10;
    unint64_t v46 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v45);
    swift_bridgeObjectRelease();
    if (__OFADD__(*v2, 1)) {
      goto LABEL_71;
    }
    ++*v2;
    if (*((void *)_._rawValue + 2)) {
      JSONWriter.writeIndent()();
    }
  }
  if (*((unsigned char *)v2 + 9) == 1)
  {
    if (one-time initialization token for compatibility1 != -1) {
      goto LABEL_72;
    }
    goto LABEL_8;
  }
  char v40 = (char *)_._rawValue + 64;
  char v18 = 1;
  uint64_t v19 = 1 << *((unsigned char *)_._rawValue + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *((void *)_._rawValue + 8);
  int64_t v41 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (v21)
  {
    unint64_t v23 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    unint64_t v24 = v23 | (v22 << 6);
LABEL_41:
    unint64_t v28 = (uint64_t *)(*((void *)_._rawValue + 6) + 16 * v24);
    uint64_t v30 = *v28;
    unint64_t v29 = v28[1];
    uint64_t v31 = *(void *)(*((void *)_._rawValue + 7) + 8 * v24);
    if (v18)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else if (v2[1])
    {
      uint64_t v45 = 2604;
      unint64_t v46 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized String.withUTF8<A>(_:)(&v45);
      swift_bridgeObjectRelease();
      JSONWriter.writeIndent()();
    }
    else
    {
      uint64_t v45 = 44;
      unint64_t v46 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized String.withUTF8<A>(_:)(&v45);
      swift_bridgeObjectRelease();
    }
    uint64_t v45 = 34;
    unint64_t v46 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v45);
    swift_bridgeObjectRelease();
    uint64_t v45 = v30;
    unint64_t v46 = v29;
    swift_bridgeObjectRetain();
    specialized String.withUTF8<A>(_:)(&v45, (uint64_t)v2);
    swift_bridgeObjectRelease();
    uint64_t v43 = 34;
    unint64_t v44 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v43);
    swift_bridgeObjectRelease();
    if (*((unsigned char *)v2 + 8) == 1)
    {
      uint64_t v45 = 2112032;
      unint64_t v46 = 0xE300000000000000;
    }
    else
    {
      uint64_t v45 = 58;
      unint64_t v46 = 0xE100000000000000;
    }
    specialized String.withUTF8<A>(_:)(&v45);
    swift_bridgeObjectRelease();
    JSONWriter.serializeJSON(_:depth:)(v31, depth);
    swift_bridgeObjectRelease();
    swift_release();
    char v18 = 0;
    if (v5)
    {
      swift_release();
      return;
    }
  }
  if (__OFADD__(v22++, 1))
  {
    __break(1u);
    goto LABEL_70;
  }
  if (v22 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v22];
  if (v26)
  {
LABEL_40:
    unint64_t v21 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_41;
  }
  int64_t v27 = v22 + 1;
  if (v22 + 1 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v27];
  if (v26) {
    goto LABEL_39;
  }
  int64_t v27 = v22 + 2;
  if (v22 + 2 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v27];
  if (v26) {
    goto LABEL_39;
  }
  int64_t v27 = v22 + 3;
  if (v22 + 3 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v27];
  if (v26)
  {
LABEL_39:
    int64_t v22 = v27;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v41) {
      goto LABEL_65;
    }
    unint64_t v26 = *(void *)&v40[8 * v22];
    ++v27;
    if (v26) {
      goto LABEL_40;
    }
  }
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_once();
LABEL_8:
  if (static JSONEncoder.compatibility1 == 1)
  {
    uint64_t v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation13JSONReferenceCG_So8NSStringC3key_AH5valuets5NeverOTg5061_s10Foundation10JSONWriterV15serializeObject_5depthySDySSAA13e11CG_SitKFSo8F31C3key_AG5valuetSSAK_AgLt_tXEfU_Tf1cn_n((uint64_t)_._rawValue);
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&v45, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (!v5)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(v45 + 16);
      if (v6)
      {
        unint64_t v7 = (uint64_t *)(v45 + 40);
        char v8 = 1;
        do
        {
          unint64_t v9 = (void *)*(v7 - 1);
          uint64_t v10 = *v7;
          id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
          unint64_t v13 = v12;
          if (v8)
          {
            id v14 = v9;
            swift_retain();
          }
          else if (v2[1])
          {
            uint64_t v45 = 2604;
            unint64_t v46 = 0xE200000000000000;
            id v15 = v9;
            swift_retain();
            specialized String.withUTF8<A>(_:)(&v45);
            swift_bridgeObjectRelease();
            JSONWriter.writeIndent()();
          }
          else
          {
            uint64_t v45 = 44;
            unint64_t v46 = 0xE100000000000000;
            id v16 = v9;
            swift_retain();
            specialized String.withUTF8<A>(_:)(&v45);
            swift_bridgeObjectRelease();
          }
          uint64_t v45 = 34;
          unint64_t v46 = 0xE100000000000000;
          specialized String.withUTF8<A>(_:)(&v45);
          swift_bridgeObjectRelease();
          uint64_t v45 = (uint64_t)v11;
          unint64_t v46 = v13;
          swift_bridgeObjectRetain();
          specialized String.withUTF8<A>(_:)(&v45, (uint64_t)v2);
          swift_bridgeObjectRelease();
          uint64_t v43 = 34;
          unint64_t v44 = 0xE100000000000000;
          specialized String.withUTF8<A>(_:)(&v43);
          swift_bridgeObjectRelease();
          if (*((unsigned char *)v2 + 8) == 1)
          {
            uint64_t v45 = 2112032;
            unint64_t v46 = 0xE300000000000000;
          }
          else
          {
            uint64_t v45 = 58;
            unint64_t v46 = 0xE100000000000000;
          }
          specialized String.withUTF8<A>(_:)(&v45);
          swift_bridgeObjectRelease();
          JSONWriter.serializeJSON(_:depth:)(v10, depth);
          swift_release();

          swift_bridgeObjectRelease();
          char v8 = 0;
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      goto LABEL_65;
    }
LABEL_74:
    swift_release();
    __break(1u);
  }
  else
  {
    uint64_t v32 = swift_bridgeObjectRetain();
    unint64_t v33 = specialized _copyCollectionToContiguousArray<A>(_:)(v32);
    swift_bridgeObjectRelease();
    uint64_t v45 = (uint64_t)v33;
    specialized MutableCollection<>.sort(by:)(&v45, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (v5) {
      goto LABEL_74;
    }
    uint64_t v34 = *(void *)(v45 + 16);
    if (v34)
    {
      uint64_t v35 = (uint64_t *)(v45 + 48);
      char v36 = 1;
      do
      {
        uint64_t v37 = *(v35 - 2);
        unint64_t v38 = *(v35 - 1);
        uint64_t v39 = *v35;
        if (v36)
        {
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else if (v2[1])
        {
          uint64_t v45 = 2604;
          unint64_t v46 = 0xE200000000000000;
          swift_bridgeObjectRetain();
          swift_retain();
          specialized String.withUTF8<A>(_:)(&v45);
          swift_bridgeObjectRelease();
          JSONWriter.writeIndent()();
        }
        else
        {
          uint64_t v45 = 44;
          unint64_t v46 = 0xE100000000000000;
          swift_bridgeObjectRetain();
          swift_retain();
          specialized String.withUTF8<A>(_:)(&v45);
          swift_bridgeObjectRelease();
        }
        uint64_t v45 = 34;
        unint64_t v46 = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)(&v45);
        swift_bridgeObjectRelease();
        uint64_t v45 = v37;
        unint64_t v46 = v38;
        swift_bridgeObjectRetain();
        specialized String.withUTF8<A>(_:)(&v45, (uint64_t)v2);
        swift_bridgeObjectRelease();
        uint64_t v43 = 34;
        unint64_t v44 = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)(&v43);
        swift_bridgeObjectRelease();
        if (*((unsigned char *)v2 + 8) == 1)
        {
          uint64_t v45 = 2112032;
          unint64_t v46 = 0xE300000000000000;
        }
        else
        {
          uint64_t v45 = 58;
          unint64_t v46 = 0xE100000000000000;
        }
        specialized String.withUTF8<A>(_:)(&v45);
        swift_bridgeObjectRelease();
        JSONWriter.serializeJSON(_:depth:)(v39, depth);
        swift_release();
        swift_bridgeObjectRelease();
        char v36 = 0;
        v35 += 3;
        --v34;
      }
      while (v34);
    }
LABEL_65:
    swift_release();
    if (*((unsigned char *)v2 + 8) == 1)
    {
      uint64_t v45 = 10;
      unint64_t v46 = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)(&v45);
      swift_bridgeObjectRelease();
      if (__OFSUB__(*v2, 1))
      {
        __break(1u);
        goto LABEL_74;
      }
      --*v2;
      JSONWriter.writeIndent()();
    }
    uint64_t v45 = 125;
    unint64_t v46 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v45);
    swift_bridgeObjectRelease();
  }
}

void specialized String.withUTF8<A>(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000) != 0)
  {
    uint64_t v1 = static String._copying(_:)();
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v8;
    unint64_t v2 = v8;
    if ((v8 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v2 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v1 & 0x1000000000000000) != 0)
    {
      uint64_t v3 = (unsigned char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
      if ((v1 & 0xFFFFFFFFFFFFLL) == 0) {
        return;
      }
    }
    else
    {
      uint64_t v3 = (unsigned char *)_StringObject.sharedUTF8.getter();
      if (!v4) {
        return;
      }
    }
    uint64_t v5 = &v3[v4];
    goto LABEL_9;
  }
  uint64_t v9 = HIBYTE(v2) & 0xF;
  v10[0] = v1;
  v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
  if (!v9) {
    return;
  }
  uint64_t v5 = (char *)v10 + v9;
  uint64_t v3 = v10;
LABEL_9:
  Data._Representation.append(contentsOf:)(v3, v5);
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::Int64 v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  Swift::Int64 v10;
  void v11[2];

  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000) != 0)
  {
    uint64_t v1 = static String._copying(_:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v9;
    unint64_t v2 = v9;
    if ((v9 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    v11[0] = v1;
    v11[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    _BPlistEncodingFormat.Writer.append(_:count:)(6, HIBYTE(v2) & 0xF);
    uint64_t v5 = (char *)v11;
    uint64_t v6 = HIBYTE(v2) & 0xF;
    goto LABEL_8;
  }
  if ((v2 & 0x2000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    uint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v3 = _StringObject.sharedUTF8.getter();
    uint64_t v4 = v10;
  }
  _BPlistEncodingFormat.Writer.append(_:count:)(6, v4);
  uint64_t v5 = (char *)v3;
  uint64_t v6 = v4;
LABEL_8:
  _BPlistEncodingFormat.Writer.write(_:)(v5, v6);
}

{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void v8[2];

  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v4 = HIBYTE(v2) & 0xF;
    v8[0] = v1;
    v8[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v3 = (char *)v8;
    goto LABEL_7;
  }
  uint64_t v1 = static String._copying(_:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v7;
  unint64_t v2 = v7;
  if ((v7 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    uint64_t v3 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v3 = (char *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  _XMLPlistEncodingFormat.Writer.append(_:)(v3, v4);
}

void Data._Representation.append(contentsOf:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v21 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v39 = v4;
      uint64_t v40 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v22 = (int)v4;
      uint64_t v23 = v4 >> 32;
      if (v4 >> 32 < (int)v4) {
        goto LABEL_39;
      }
      uint64_t v24 = a2 - __src;
      if (!__src) {
        uint64_t v24 = 0;
      }
      BOOL v13 = __OFADD__(v23, v24);
      uint64_t v25 = v23 + v24;
      if (v13) {
        goto LABEL_40;
      }
      if (v25 <= 2147483646)
      {
        *(_OWORD *)uint64_t v5 = xmmword_1821115B0;
        goto LABEL_21;
      }
      type metadata accessor for Data.RangeReference();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v22;
      *(void *)(v29 + 24) = v23;
      uint64_t v35 = v29;
      Data.LargeSlice.append(contentsOf:)(__src, (uint64_t)a2);
      uint64_t v16 = v35;
      uint64_t v17 = v21;
      goto LABEL_29;
    case 2uLL:
      uint64_t v39 = *v2;
      uint64_t v40 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v2 = xmmword_1821115B0;
      goto LABEL_10;
    case 3uLL:
      if (__src && (uint64_t v18 = a2 - __src, a2 != __src))
      {
        if (v18 <= 14)
        {
          uint64_t v19 = specialized Data.InlineData.init(_:)(__src, a2);
          unint64_t v20 = v33 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((unint64_t)v18 >= 0x7FFFFFFF)
        {
          uint64_t v19 = specialized Data.LargeSlice.init(_:)((unint64_t)__src, (uint64_t)a2);
          unint64_t v20 = v34 | 0x8000000000000000;
        }
        else
        {
          uint64_t v19 = (uint64_t)specialized Data.InlineSlice.init(_:)((unint64_t)__src, (uint64_t)a2);
          unint64_t v20 = v30 | 0x4000000000000000;
        }
      }
      else
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0xC000000000000000;
      }
      *unint64_t v2 = v19;
      v2[1] = v20;
      return;
    default:
      LOWORD(v35) = *v2;
      BYTE2(v35) = BYTE2(v4);
      BYTE3(v35) = BYTE3(v4);
      BYTE4(v35) = BYTE4(v4);
      BYTE5(v35) = BYTE5(v4);
      BYTE6(v35) = BYTE6(v4);
      HIBYTE(v35) = HIBYTE(v4);
      LOWORD(v36) = v3;
      BYTE2(v36) = BYTE2(v3);
      uint64_t v8 = a2 - __src;
      unint64_t v9 = HIDWORD(v3);
      HIBYTE(v36) = BYTE3(v3);
      unint64_t v10 = v3 >> 40;
      char v37 = BYTE4(v3);
      if (__src) {
        uint64_t v11 = a2 - __src;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = BYTE6(v3);
      char v38 = BYTE5(v3);
      BOOL v13 = __OFADD__(BYTE6(v3), v11);
      uint64_t v14 = BYTE6(v3) + v11;
      if (v13)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v14 <= 14)
      {
        unint64_t v27 = HIWORD(v3);
        if (!__src || a2 == __src) {
          goto LABEL_27;
        }
        memcpy((char *)&v35 + BYTE6(v3), __src, a2 - __src);
        if (v8 > 255)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        LODWORD(v27) = v27 + v8;
        if (((v27 >> 8) & 1) == 0)
        {
          LOBYTE(v9) = v37;
          LOBYTE(v10) = v38;
LABEL_27:
          unint64_t v28 = v36 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v27 << 48);
          *uint64_t v5 = v35;
          v5[1] = v28;
          return;
        }
LABEL_41:
        __break(1u);
      }
      if ((unint64_t)v14 > 0x7FFFFFFE)
      {
        uint64_t v39 = v4;
        LOWORD(v40) = v3;
        BYTE2(v40) = BYTE2(v3);
        BYTE3(v40) = BYTE3(v3);
        BYTE4(v40) = BYTE4(v3);
        BYTE5(v40) = BYTE5(v3);
        type metadata accessor for __DataStorage();
        uint64_t v31 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v39, v12);
        type metadata accessor for Data.RangeReference();
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = 0;
        *(void *)(v32 + 24) = v12;
        uint64_t v39 = v32;
        uint64_t v40 = v31;
LABEL_10:
        Data.LargeSlice.append(contentsOf:)(__src, (uint64_t)a2);
        uint64_t v16 = v39;
        uint64_t v17 = v40;
LABEL_29:
        unint64_t v26 = v17 | 0x8000000000000000;
      }
      else
      {
        uint64_t v39 = v4;
        LOWORD(v40) = v3;
        BYTE2(v40) = BYTE2(v3);
        BYTE3(v40) = BYTE3(v3);
        BYTE4(v40) = BYTE4(v3);
        BYTE5(v40) = BYTE5(v3);
        type metadata accessor for __DataStorage();
        uint64_t v15 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v39, v12);
        LODWORD(v39) = 0;
        HIDWORD(v39) = v12;
        uint64_t v40 = v15;
LABEL_21:
        Data.InlineSlice.append(contentsOf:)(__src, (uint64_t)a2);
        uint64_t v16 = v39;
        unint64_t v26 = v40 | 0x4000000000000000;
      }
      *uint64_t v5 = v16;
      v5[1] = v26;
      return;
  }
}

void Data.InlineSlice.append(contentsOf:)(const void *a1, uint64_t a2)
{
  unint64_t v3 = (int *)v2;
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int v10 = *v3;
  uint64_t v11 = v3[1];
  if ((int)v11 < *v3 || v9 < v11) {
    goto LABEL_15;
  }
  if (a1) {
    size_t v13 = a2 - (void)a1;
  }
  else {
    size_t v13 = 0;
  }
  __DataStorage.replaceBytes(in:with:length:)(v3[1], v9, a1, v13);
  uint64_t v14 = v11 + v13;
  if (__OFADD__(v11, v13)) {
    goto LABEL_16;
  }
  if (v14 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v14 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v10 <= (int)v14)
  {
    int *v3 = v10;
    v3[1] = v14;
    return;
  }
LABEL_19:
  __break(1u);
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  uint64_t v1 = v0;
  if (swift_isUniquelyReferenced_nonNull_native()) {
    return;
  }
  uint64_t v3 = *v0;
  uint64_t v2 = v1[1];
  if ((int)v2 < (int)v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = *((void *)v1 + 1);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    unint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(v4 + 40);
  BOOL v7 = __OFSUB__(v3, v6);
  uint64_t v8 = v3 - v6;
  if (v7)
  {
LABEL_11:
    __break(1u);
    return;
  }
  unint64_t v9 = v5 + v8;
LABEL_7:
  uint64_t v10 = v2 - v3;
  type metadata accessor for __DataStorage();
  uint64_t v11 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0, 0, v3);
  *((void *)v1 + 1) = v11;

  swift_release();
}

void specialized String.withUTF8<A>(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
    goto LABEL_48;
  }
  uint64_t v3 = static String._copying(_:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v24;
  unint64_t v4 = v24;
  if ((v24 & 0x2000000000000000) != 0)
  {
LABEL_48:
    uint64_t v25 = HIBYTE(v4) & 0xF;
    uint64_t __src = v3;
    uint64_t v44 = v4 & 0xFFFFFFFFFFFFFFLL;
    if (!v25) {
      return;
    }
    unint64_t v26 = (uint64_t *)((char *)&__src + v25);
    p_src = &__src;
    unint64_t v28 = &__src;
    while (1)
    {
      unsigned int v29 = *(unsigned __int8 *)p_src;
      unint64_t v30 = 0xE200000000000000;
      uint64_t v31 = 8796;
      switch(*(unsigned char *)p_src)
      {
        case 8:
          uint64_t v31 = 25180;
          if (v28 < p_src) {
            goto LABEL_73;
          }
          goto LABEL_74;
        case 9:
          uint64_t v31 = 29788;
          if (v28 >= p_src) {
            goto LABEL_74;
          }
          goto LABEL_73;
        case 0xA:
          uint64_t v31 = 28252;
          if (v28 >= p_src) {
            goto LABEL_74;
          }
          goto LABEL_73;
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
          goto LABEL_56;
        case 0xC:
          uint64_t v31 = 26204;
          if (v28 >= p_src) {
            goto LABEL_74;
          }
          goto LABEL_73;
        case 0xD:
          uint64_t v31 = 29276;
          if (v28 >= p_src) {
            goto LABEL_74;
          }
          goto LABEL_73;
        case 0x22:
          goto LABEL_72;
        case 0x2F:
          if (*(unsigned char *)(a2 + 10)) {
            goto LABEL_60;
          }
          uint64_t v31 = 12124;
          if (v28 >= p_src) {
            goto LABEL_74;
          }
          goto LABEL_73;
        default:
          if (v29 == 92)
          {
            unint64_t v30 = 0xE200000000000000;
            uint64_t v31 = 23644;
            if (v28 < p_src) {
              goto LABEL_73;
            }
            goto LABEL_74;
          }
LABEL_56:
          if (v29 < 0x10)
          {
            uint64_t v41 = 0x303030755CLL;
            unint64_t v32 = 0xE500000000000000;
            goto LABEL_71;
          }
          if (v29 > 0x1F)
          {
LABEL_60:
            p_src = (uint64_t *)((char *)p_src + 1);
            if (p_src >= v26) {
              goto LABEL_89;
            }
          }
          else
          {
            uint64_t v41 = 808482140;
            unint64_t v32 = 0xE400000000000000;
LABEL_71:
            uint64_t v42 = v32;
            char v45 = v29;
            lazy protocol witness table accessor for type UInt8 and conformance UInt8();
            v33._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v33);
            swift_bridgeObjectRelease();
            uint64_t v31 = v41;
            unint64_t v30 = v42;
LABEL_72:
            if (v28 < p_src) {
LABEL_73:
            }
              Data._Representation.append(contentsOf:)(v28, p_src);
LABEL_74:
            swift_bridgeObjectRetain();
            if ((v30 & 0x1000000000000000) != 0)
            {
              uint64_t v31 = static String._copying(_:)();
              unint64_t v34 = v38;
              swift_bridgeObjectRelease();
              if ((v34 & 0x2000000000000000) == 0)
              {
LABEL_76:
                if ((v31 & 0x1000000000000000) == 0)
                {
                  uint64_t v35 = (uint64_t *)_StringObject.sharedUTF8.getter();
                  if (!v36) {
                    goto LABEL_85;
                  }
LABEL_78:
                  char v37 = (char *)v35 + v36;
LABEL_84:
                  Data._Representation.append(contentsOf:)(v35, v37);
                  goto LABEL_85;
                }
                uint64_t v35 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v36 = v31 & 0xFFFFFFFFFFFFLL;
                if ((v31 & 0xFFFFFFFFFFFFLL) != 0) {
                  goto LABEL_78;
                }
                goto LABEL_85;
              }
            }
            else
            {
              unint64_t v34 = v30;
              if ((v30 & 0x2000000000000000) == 0) {
                goto LABEL_76;
              }
            }
            uint64_t v39 = HIBYTE(v34) & 0xF;
            uint64_t v41 = v31;
            uint64_t v42 = v34 & 0xFFFFFFFFFFFFFFLL;
            if (v39)
            {
              char v37 = (char *)&v41 + v39;
              uint64_t v35 = &v41;
              goto LABEL_84;
            }
LABEL_85:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            p_src = (uint64_t *)((char *)p_src + 1);
            unint64_t v28 = p_src;
            if (p_src >= v26)
            {
LABEL_89:
              if (v28 < p_src)
              {
                unint64_t v20 = v28;
                uint64_t v21 = p_src;
LABEL_91:
                Data._Representation.append(contentsOf:)(v20, v21);
              }
              return;
            }
          }
          break;
      }
    }
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    if ((v3 & 0xFFFFFFFFFFFFLL) == 0) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v40 = _StringObject.sharedUTF8.getter();
  if (!v40)
  {
    __break(1u);
    return;
  }
  uint64_t v5 = (uint64_t *)v40;
  if (v6 >= 1)
  {
LABEL_5:
    BOOL v7 = (uint64_t *)((char *)v5 + v6);
    uint64_t v8 = v5;
    while (1)
    {
      unsigned int v9 = *(unsigned __int8 *)v5;
      unint64_t v10 = 0xE200000000000000;
      uint64_t v11 = 8796;
      switch(*(unsigned char *)v5)
      {
        case 8:
          uint64_t v11 = 25180;
          if (v8 < v5) {
            goto LABEL_29;
          }
          goto LABEL_30;
        case 9:
          uint64_t v11 = 29788;
          if (v8 >= v5) {
            goto LABEL_30;
          }
          goto LABEL_29;
        case 0xA:
          uint64_t v11 = 28252;
          if (v8 >= v5) {
            goto LABEL_30;
          }
          goto LABEL_29;
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
          goto LABEL_12;
        case 0xC:
          uint64_t v11 = 26204;
          if (v8 >= v5) {
            goto LABEL_30;
          }
          goto LABEL_29;
        case 0xD:
          uint64_t v11 = 29276;
          if (v8 >= v5) {
            goto LABEL_30;
          }
          goto LABEL_29;
        case 0x22:
          goto LABEL_28;
        case 0x2F:
          if (*(unsigned char *)(a2 + 10)) {
            goto LABEL_16;
          }
          uint64_t v11 = 12124;
          if (v8 >= v5) {
            goto LABEL_30;
          }
          goto LABEL_29;
        default:
          if (v9 == 92)
          {
            unint64_t v10 = 0xE200000000000000;
            uint64_t v11 = 23644;
            if (v8 < v5) {
              goto LABEL_29;
            }
            goto LABEL_30;
          }
LABEL_12:
          if (v9 < 0x10)
          {
            uint64_t __src = 0x303030755CLL;
            unint64_t v12 = 0xE500000000000000;
            goto LABEL_27;
          }
          if (v9 > 0x1F)
          {
LABEL_16:
            uint64_t v5 = (uint64_t *)((char *)v5 + 1);
            if (v5 >= v7) {
              goto LABEL_45;
            }
          }
          else
          {
            uint64_t __src = 808482140;
            unint64_t v12 = 0xE400000000000000;
LABEL_27:
            uint64_t v44 = v12;
            LOBYTE(v41) = v9;
            lazy protocol witness table accessor for type UInt8 and conformance UInt8();
            v13._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v13);
            swift_bridgeObjectRelease();
            uint64_t v11 = __src;
            unint64_t v10 = v44;
LABEL_28:
            if (v8 < v5) {
LABEL_29:
            }
              Data._Representation.append(contentsOf:)(v8, v5);
LABEL_30:
            swift_bridgeObjectRetain();
            if ((v10 & 0x1000000000000000) != 0)
            {
              uint64_t v11 = static String._copying(_:)();
              unint64_t v14 = v18;
              swift_bridgeObjectRelease();
              if ((v14 & 0x2000000000000000) == 0)
              {
LABEL_32:
                if ((v11 & 0x1000000000000000) == 0)
                {
                  uint64_t v15 = (uint64_t *)_StringObject.sharedUTF8.getter();
                  if (!v16) {
                    goto LABEL_41;
                  }
LABEL_34:
                  uint64_t v17 = (char *)v15 + v16;
LABEL_40:
                  Data._Representation.append(contentsOf:)(v15, v17);
                  goto LABEL_41;
                }
                uint64_t v15 = (uint64_t *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL;
                if ((v11 & 0xFFFFFFFFFFFFLL) != 0) {
                  goto LABEL_34;
                }
                goto LABEL_41;
              }
            }
            else
            {
              unint64_t v14 = v10;
              if ((v10 & 0x2000000000000000) == 0) {
                goto LABEL_32;
              }
            }
            uint64_t v19 = HIBYTE(v14) & 0xF;
            uint64_t __src = v11;
            uint64_t v44 = v14 & 0xFFFFFFFFFFFFFFLL;
            if (v19)
            {
              uint64_t v17 = (char *)&__src + v19;
              uint64_t v15 = &__src;
              goto LABEL_40;
            }
LABEL_41:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v5 = (uint64_t *)((char *)v5 + 1);
            uint64_t v8 = v5;
            if (v5 >= v7)
            {
LABEL_45:
              if (v8 < v5)
              {
                unint64_t v20 = v8;
                uint64_t v21 = v5;
                goto LABEL_91;
              }
              return;
            }
          }
          break;
      }
    }
  }
}

{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void v10[2];

  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = (char *)v10;
    goto LABEL_7;
  }
  uint64_t v3 = static String._copying(_:)();
  unsigned int v9 = v8;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v9;
  unint64_t v4 = v9;
  if ((v9 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = (char *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  closure #1 in _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(v5, v6, a2);
}

uint64_t JSONWriter.serializeJSON(_:depth:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v2 = *(void **)(result + 24);
  switch(*(unsigned char *)(result + 32))
  {
    case 1:
      uint64_t v13 = *(void *)(result + 16);
      unint64_t v14 = (unint64_t)v2;
      swift_bridgeObjectRetain_n();
      specialized String.withUTF8<A>(_:)(&v13);
      swift_bridgeObjectRelease();
      return outlined consume of JSONReference.Backing(v3, (uint64_t)v2, 1);
    case 2:
      uint64_t v5 = 1702195828;
      if (v3)
      {
        unint64_t v6 = 0xE400000000000000;
      }
      else
      {
        uint64_t v5 = 0x65736C6166;
        unint64_t v6 = 0xE500000000000000;
      }
      uint64_t v13 = v5;
      unint64_t v14 = v6;
      swift_bridgeObjectRetain();
      specialized String.withUTF8<A>(_:)(&v13);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3:
      Swift::Int v7 = a2 + 1;
      if (__OFADD__(a2, 1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      else
      {
        uint64_t v8 = swift_bridgeObjectRetain();
        JSONWriter.serializeArray(_:depth:)((Swift::OpaquePointer)v8, v7);
        uint64_t result = outlined consume of JSONReference.Backing(v3, (uint64_t)v2, 3);
      }
      break;
    case 4:
      Swift::Int v9 = a2 + 1;
      if (__OFADD__(a2, 1)) {
        goto LABEL_19;
      }
      uint64_t v10 = swift_bridgeObjectRetain();
      JSONWriter.serializeObject(_:depth:)((Swift::OpaquePointer)v10, v9);
      uint64_t result = outlined consume of JSONReference.Backing(v3, (uint64_t)v2, 4);
      break;
    case 5:
      uint64_t v13 = *(void *)(result + 16);
      unint64_t v14 = (unint64_t)v2;
      swift_bridgeObjectRetain_n();
      specialized String.withUTF8<A>(_:)(&v13);
      swift_bridgeObjectRelease();
      return outlined consume of JSONReference.Backing(v3, (uint64_t)v2, 5);
    case 6:
      Swift::Int v11 = a2 + 1;
      if (__OFADD__(a2, 1)) {
        goto LABEL_20;
      }
      uint64_t v12 = swift_bridgeObjectRetain();
      JSONWriter.serializePreformattedStringArray(_:depth:)((Swift::OpaquePointer)v12, v11);
      uint64_t result = outlined consume of JSONReference.Backing(v3, (uint64_t)v2, 6);
      break;
    case 7:
      uint64_t v13 = 1819047278;
      unint64_t v14 = 0xE400000000000000;
      specialized String.withUTF8<A>(_:)(&v13);
      return swift_bridgeObjectRelease();
    default:
      swift_bridgeObjectRetain();
      v4._uint64_t countAndFlagsBits = v3;
      v4._unint64_t object = v2;
      JSONWriter.serializeString(_:)(v4);
      return outlined consume of JSONReference.Backing(v3, (uint64_t)v2, 0);
  }
  return result;
}

uint64_t JSONReference.__deallocating_deinit()
{
  outlined consume of JSONReference.Backing(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return swift_deallocClassInstance();
}

uint64_t outlined consume of JSONReference.Backing(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t String.data(using:allowLossyConversion:)(uint64_t *a1, char a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4;
  unint64_t v6 = a3;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  if (*a1 == 4)
  {
    swift_bridgeObjectRetain();
    return specialized Data.init<A>(_:)(v6, v5);
  }
  if (v7 == 7 || v7 == 1)
  {
    if (a2)
    {
      if (v7 == 1) {
        LOBYTE(v7) = -1;
      }
      else {
        LOBYTE(v7) = 63;
      }
      if ((a4 & 0x1000000000000000) == 0)
      {
        if ((a4 & 0x2000000000000000) != 0) {
          uint64_t v12 = HIBYTE(a4) & 0xF;
        }
        else {
          uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
        }
        goto LABEL_17;
      }
LABEL_126:
      uint64_t v12 = String.UTF8View._foreignCount()();
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized Data.init(capacity:initializingWith:)(v12, v6, v5, v7);
      swift_bridgeObjectRelease();
      return v9;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      Swift::Int v53 = String.UTF8View._foreignCount()();
      unsigned __int8 v54 = 2;
LABEL_133:
      uint64_t v62 = specialized Data.init(count:)(v53);
      unint64_t v63 = v55;
      swift_bridgeObjectRetain();
      char v56 = specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(&v62, v6, v5, v54);
      uint64_t v9 = v62;
      if (v56) {
        return v9;
      }
      outlined consume of Data._Representation(v62, v63);
      return 0;
    }
    if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v21 = HIBYTE(a4) & 0xF;
      uint64_t v62 = a3;
      unint64_t v63 = a4 & 0xFFFFFFFFFFFFFFLL;
      if (v21)
      {
        if (v21 >= 8)
        {
          if ((a3 & 0x8080808080808080) != 0) {
            return 0;
          }
          if (v21 <= 8) {
            goto LABEL_130;
          }
          uint64_t v22 = 8;
          if ((a4 & 0x80) != 0) {
            return 0;
          }
        }
        else
        {
          uint64_t v22 = 0;
          if ((a3 & 0x80) != 0) {
            return 0;
          }
        }
        unint64_t v23 = v22 + 1;
        while (v23 < v21)
        {
          int v24 = *((char *)&v62 + v23++);
          if (v24 < 0) {
            return 0;
          }
        }
      }
LABEL_130:
      unsigned __int8 v54 = 1;
      if ((v5 & 0x2000000000000000) != 0) {
        Swift::Int v53 = HIBYTE(v5) & 0xF;
      }
      else {
        Swift::Int v53 = v6 & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_133;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      uint64_t v13 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_130;
      }
      goto LABEL_22;
    }
LABEL_129:
    uint64_t v13 = (char *)_StringObject.sharedUTF8.getter();
    if (!v14) {
      goto LABEL_130;
    }
LABEL_22:
    if ((v13 & 7) != 0)
    {
      if (v14 < 1) {
        goto LABEL_130;
      }
      if (*v13 < 0) {
        return 0;
      }
      uint64_t v15 = 1;
      uint64_t v16 = 9;
      if (v14 >= 2 && (((_BYTE)v13 + 1) & 7) != 0)
      {
        if (v13[1] < 0) {
          return 0;
        }
        uint64_t v15 = 2;
        uint64_t v16 = 10;
        if (v14 >= 3 && (((_BYTE)v13 + 2) & 7) != 0)
        {
          if (v13[2] < 0) {
            return 0;
          }
          uint64_t v15 = 3;
          uint64_t v16 = 11;
          if (v14 >= 4 && (((_BYTE)v13 + 3) & 7) != 0)
          {
            if (v13[3] < 0) {
              return 0;
            }
            uint64_t v15 = 4;
            uint64_t v16 = 12;
            if (v14 >= 5 && (((_BYTE)v13 + 4) & 7) != 0)
            {
              if (v13[4] < 0) {
                return 0;
              }
              uint64_t v15 = 5;
              uint64_t v16 = 13;
              if (v14 >= 6 && (((_BYTE)v13 + 5) & 7) != 0)
              {
                if (v13[5] < 0) {
                  return 0;
                }
                uint64_t v15 = 6;
                uint64_t v16 = 14;
                if (v14 >= 7 && (((_BYTE)v13 + 6) & 7) != 0)
                {
                  if (v13[6] < 0) {
                    return 0;
                  }
                  uint64_t v15 = 7;
                  uint64_t v16 = 15;
                  if (v14 >= 8 && (((_BYTE)v13 - 1) & 7) != 0)
                  {
                    if (v13[7] < 0) {
                      return 0;
                    }
                    uint64_t v15 = 8;
                    uint64_t v16 = 16;
                    if (v14 >= 9 && (v13 & 7) != 0) {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v14 >= v16) {
        goto LABEL_111;
      }
LABEL_114:
      if (v15 >= v14) {
        goto LABEL_130;
      }
    }
    else
    {
      if (v14 > 7)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8;
LABEL_111:
        while ((*(void *)&v13[v15] & 0x8080808080808080) == 0)
        {
          uint64_t v38 = v16 + 8;
          uint64_t v15 = v16;
          uint64_t v16 = v38;
          if (v14 < v38)
          {
            uint64_t v15 = v38 - 8;
            goto LABEL_114;
          }
        }
        return 0;
      }
      if (v14 <= 0) {
        goto LABEL_130;
      }
      uint64_t v15 = 0;
    }
    if (v13[v15] < 0) {
      return 0;
    }
    uint64_t v39 = v15 + 1;
    while (v39 < v14)
    {
      uint64_t v9 = 0;
      int v40 = v13[v39++];
      if (v40 < 0) {
        return v9;
      }
    }
    goto LABEL_130;
  }
  if (v7 != 2415919360)
  {
    if (v7 <= 2483028223)
    {
      if (v7 == 10)
      {
        unint64_t v18 = 0;
        uint64_t v17 = 65279;
        goto LABEL_52;
      }
      if (v7 == 2348810496)
      {
        if ((a2 & 1) == 0)
        {
          uint64_t v64 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
          uint64_t v65 = &protocol witness table for <A> [A];
          uint64_t v62 = (uint64_t)&outlined read-only object #0 of String.data(using:allowLossyConversion:);
          uint64_t v41 = __swift_project_boxed_opaque_existential_1(&v62, (uint64_t)v64);
          uint64_t v42 = specialized Data._Representation.init(_:)((unsigned char *)(*v41 + 32), (unsigned char *)(*v41 + 32 + *(void *)(*v41 + 16)));
          unint64_t v44 = v43;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
          uint64_t v62 = 2617245952;
          uint64_t v45 = String.data(using:allowLossyConversion:)(&v62, 0, v6, v5);
          uint64_t v9 = v45;
          unint64_t v47 = v46;
          if (v46 >> 60 == 15)
          {
            outlined consume of Data._Representation((uint64_t)v42, v44);
          }
          else
          {
            uint64_t v66 = v42;
            unint64_t v67 = v44;
            uint64_t v64 = &type metadata for Data;
            uint64_t v65 = &protocol witness table for Data;
            uint64_t v62 = v45;
            unint64_t v63 = v46;
            unint64_t v50 = __swift_project_boxed_opaque_existential_1(&v62, (uint64_t)&type metadata for Data);
            uint64_t v51 = *v50;
            unint64_t v52 = v50[1];
            outlined copy of Data._Representation((uint64_t)v42, v44);
            outlined copy of Data?(v9, v47);
            specialized Data._Representation.withUnsafeBytes<A>(_:)(v51, v52);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
            outlined consume of Data?(v9, v47);
            outlined consume of Data._Representation((uint64_t)v42, v44);
            return (unint64_t)v66;
          }
          return v9;
        }
        uint64_t v62 = a3;
        unint64_t v63 = a4;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v28 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v29 = objc_msgSend(v28, sel_dataUsingEncoding_allowLossyConversion_, 2348810496, 1);
LABEL_108:
        swift_unknownObjectRelease();
        if (v29)
        {
          id v37 = v29;
          uint64_t v9 = (uint64_t)specialized Data.init(referencing:)(v37);

          return v9;
        }
        return 0;
      }
    }
    else
    {
      if (v7 == 2617245952 || v7 == 2550137088)
      {
        uint64_t v30 = HIBYTE(a4) & 0xF;
        if ((a4 & 0x2000000000000000) == 0) {
          uint64_t v30 = a3;
        }
        uint64_t v31 = 7;
        if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
          uint64_t v31 = 11;
        }
        uint64_t isStackAllocationSafe = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v31 | (v30 << 16), a3, a4);
        if ((unint64_t)(isStackAllocationSafe - 0x2000000000000000) >> 62 != 3) {
          goto LABEL_145;
        }
        uint64_t v33 = 4 * isStackAllocationSafe;
        if (4 * isStackAllocationSafe < 0) {
          goto LABEL_146;
        }
        if (v33 <= 1024
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
        {
          MEMORY[0x1F4188790](isStackAllocationSafe);
          uint64_t v35 = (char *)&v61 - v34;
          if ((v7 | 0x4000000) == 0x9C000100)
          {
            swift_bridgeObjectRetain();
            specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, (uint64_t)v35, v33, v6, v5, v7 != 2617245952);
            swift_bridgeObjectRelease();
            return specialized Data.init<A>(_:)((uint64_t)v35, v33);
          }
        }
        else
        {
          uint64_t v48 = swift_slowAlloc();
          if ((v7 | 0x4000000) == 0x9C000100)
          {
            uint64_t v49 = v48;
            swift_bridgeObjectRetain();
            specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v49, v33, v6, v5, v7 != 2617245952);
            swift_bridgeObjectRelease();
            uint64_t v9 = specialized Data.init<A>(_:)(v49, v33);
            MEMORY[0x185309510](v49, -1, -1);
            return v9;
          }
        }
        goto LABEL_148;
      }
      if (v7 == 2483028224) {
        goto LABEL_51;
      }
    }
    uint64_t v62 = a3;
    unint64_t v63 = a4;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v36 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(v36, sel_dataUsingEncoding_allowLossyConversion_, v7, a2 & 1);
    goto LABEL_108;
  }
LABEL_51:
  uint64_t v17 = 0;
  unint64_t v18 = 1;
LABEL_52:
  swift_bridgeObjectRetain();
  uint64_t v19 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  if (v18)
  {
    unint64_t v20 = calloc(v19, 2uLL);
    if (v20)
    {
      unint64_t v18 = (unint64_t)v20;
      if ((v5 & 0x1000000000000000) == 0)
      {
        if ((v19 & 0x8000000000000000) == 0)
        {
          String._copyUTF16CodeUnits(into:range:)();
LABEL_57:
          uint64_t v4 = v19;
LABEL_76:
          unint64_t v5 = 2 * v4;
          if (v7 == 2415919360)
          {
            if (v4)
            {
              uint64_t v25 = 0;
              uint64_t v26 = 2 * v4;
              while (!__OFADD__(v25, 1))
              {
                *(_WORD *)(v18 + 2 * v25) = bswap32(*(unsigned __int16 *)(v18 + 2 * v25)) >> 16;
                ++v25;
                v26 -= 2;
                if (!v26) {
                  goto LABEL_81;
                }
              }
              __break(1u);
              goto LABEL_126;
            }
LABEL_84:
            free((void *)v18);
            return 0;
          }
LABEL_81:
          if (v4 + 0x4000000000000000 >= 0)
          {
            if (v5)
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              unint64_t v27 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)(v18, 2 * v4, 0, (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter, 0, 0);
              return specialized Data._Representation.init(_:count:)(v27, 2 * v4);
            }
            goto LABEL_84;
          }
          __break(1u);
          goto LABEL_129;
        }
        goto LABEL_140;
      }
LABEL_138:
      swift_bridgeObjectRetain_n();
      specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v18, v19, v6, v5);
      *(Swift::UInt16_optional *)&unint64_t v58 = String.UTF16View.Iterator.next()();
      unint64_t v6 = v58;
      uint64_t v4 = v63;
      swift_bridgeObjectRelease();
      unint64_t v20 = (_WORD *)swift_bridgeObjectRelease();
      if ((v6 & 0x10000) != 0) {
        goto LABEL_57;
      }
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
  }
  else
  {
    uint64_t v4 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_138;
    }
    unint64_t v20 = calloc(v19 + 1, 2uLL);
    if (v20)
    {
      unint64_t v18 = (unint64_t)v20;
      *unint64_t v20 = v17;
      uint64_t v17 = v19;
      if (v4 >= 1)
      {
        ++v20;
        if ((v5 & 0x1000000000000000) == 0)
        {
          if ((v19 & 0x8000000000000000) == 0)
          {
            String._copyUTF16CodeUnits(into:range:)();
            goto LABEL_76;
          }
          goto LABEL_144;
        }
LABEL_142:
        uint64_t v59 = (uint64_t)v20;
        swift_bridgeObjectRetain_n();
        specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v59, v17, v6, v5);
        *(Swift::UInt16_optional *)&unint64_t v60 = String.UTF16View.Iterator.next()();
        unint64_t v6 = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v6 & 0x10000) != 0) {
          goto LABEL_76;
        }
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
      }
LABEL_141:
      __break(1u);
      goto LABEL_142;
    }
  }
  __break(1u);
LABEL_148:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v42 = a1;
  *((void *)&v42 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v40, (uint64_t)&__src);
    uint64_t v2 = v45;
    uint64_t v3 = v46;
    __swift_project_boxed_opaque_existential_1(&__src, v45);
    (*(void (**)(long long *__return_ptr, unsigned char *(*)@<X0>(unsigned char *@<X0>, unsigned char *@<X1>, void *@<X8>), void, ValueMetadata *, uint64_t, uint64_t))(v3 + 8))(&v42, closure #1 in Data.init<A>(_:), 0, &type metadata for Data._Representation, v2, v3);
    swift_bridgeObjectRelease();
    v40[0] = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&__src);
    return *(void *)&v40[0];
  }
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  outlined destroy of Any?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for ContiguousBytes?);
  unint64_t v4 = a1;
  unint64_t v5 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t __src = a1;
      uint64_t v44 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v8 = (char *)&__src + (HIBYTE(a2) & 0xF);
      p_src = &__src;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v6 = _StringObject.sharedUTF8.getter();
      }
      if (v6) {
        uint64_t v8 = (unsigned char *)(v6 + v7);
      }
      else {
        uint64_t v8 = 0;
      }
      p_src = (uint64_t *)v6;
    }
    uint64_t v10 = specialized Data._Representation.init(_:)(p_src, v8);
    unint64_t v12 = v11;
    if (v11 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v40[0] = v10;
      *((void *)&v40[0] + 1) = v12;
      return *(void *)&v40[0];
    }
    unint64_t v4 = a1;
    unint64_t v5 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_68:
    Swift::Int v13 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_67:
  uint64_t v10 = 0;
  unint64_t v12 = 0xF000000000000000;
  if ((v5 & 0x1000000000000000) != 0) {
    goto LABEL_68;
  }
LABEL_14:
  if ((v5 & 0x2000000000000000) != 0) {
    Swift::Int v13 = HIBYTE(v5) & 0xF;
  }
  else {
    Swift::Int v13 = v4 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v40[0] = specialized Data._Representation.init(count:)(v13);
  *((void *)&v40[0] + 1) = v14;
  MEMORY[0x1F4188790](*(void *)&v40[0]);
  unint64_t v15 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #3 in Data.init<A>(_:));
  uint64_t v18 = *((void *)&v40[0] + 1) >> 62;
  uint64_t v19 = v15;
  uint64_t v20 = v5;
  unint64_t v21 = v16;
  switch(*((void *)&v40[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v22) = DWORD1(v40[0]) - LODWORD(v40[0]);
      if (__OFSUB__(DWORD1(v40[0]), v40[0])) {
        goto LABEL_71;
      }
      uint64_t v22 = (int)v22;
LABEL_23:
      if (v17 != v22)
      {
        if (v18)
        {
          if (v18 == 1) {
            uint64_t v26 = *(uint64_t *)&v40[0] >> 32;
          }
          else {
            uint64_t v26 = *(void *)(*(void *)&v40[0] + 24);
          }
        }
        else
        {
          uint64_t v26 = BYTE14(v40[0]);
        }
LABEL_60:
        if (v26 < v17)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)(v17, v26, 0, 0);
LABEL_62:
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
LABEL_29:
      unint64_t v35 = v12;
      if ((v5 & 0x2000000000000000) != 0) {
        unint64_t v27 = HIBYTE(v5) & 0xF;
      }
      else {
        unint64_t v27 = v15 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v42 + 7) = 0;
      *(void *)&long long v42 = 0;
      if (4 * v27 == v16 >> 14) {
        goto LABEL_57;
      }
      unsigned int v28 = 0;
      uint64_t v29 = (v15 >> 59) & 1;
      if ((v5 & 0x1000000000000000) == 0) {
        LOBYTE(v29) = 1;
      }
      uint64_t v30 = 4 << v29;
      uint64_t v36 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v37 = v5 & 0xFFFFFFFFFFFFFFLL;
      break;
    case 2:
      uint64_t v24 = *(void *)(*(void *)&v40[0] + 16);
      uint64_t v23 = *(void *)(*(void *)&v40[0] + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_23;
      }
      goto LABEL_72;
    case 3:
      if (!v17) {
        goto LABEL_29;
      }
      uint64_t v26 = 0;
      goto LABEL_60;
    default:
      uint64_t v22 = BYTE14(v40[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v31 = v21 & 0xC;
    unint64_t v4 = v21;
    if (v31 == v30) {
      unint64_t v4 = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, v19, v20);
    }
    unint64_t v32 = v4 >> 16;
    if (v4 >> 16 >= v27)
    {
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if ((v20 & 0x1000000000000000) != 0)
    {
      unint64_t v4 = String.UTF8View._foreignSubscript(position:)();
      char v33 = v4;
      if (v31 != v30) {
        goto LABEL_47;
      }
    }
    else if ((v20 & 0x2000000000000000) != 0)
    {
      uint64_t __src = v19;
      uint64_t v44 = v37;
      char v33 = *((unsigned char *)&__src + v32);
      if (v31 != v30) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v4 = v36;
      if ((v19 & 0x1000000000000000) == 0) {
        unint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v33 = *(unsigned char *)(v4 + v32);
      if (v31 != v30)
      {
LABEL_47:
        if ((v20 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v4 = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, v19, v20);
    unint64_t v21 = v4;
    if ((v20 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v21 = (v21 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v27 <= v21 >> 16) {
      goto LABEL_66;
    }
    unint64_t v21 = String.UTF8View._foreignIndex(after:)();
LABEL_53:
    *((unsigned char *)&v42 + v28++) = v33;
    BYTE14(v42) = v28;
    if (v28 == 14)
    {
      uint64_t __src = v42;
      LODWORD(v44) = DWORD2(v42);
      WORD2(v44) = WORD6(v42);
      Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&v44 + 6);
      unsigned int v28 = 0;
      BYTE14(v42) = 0;
    }
  }
  while (4 * v27 != v21 >> 14);
  if (v28)
  {
    uint64_t __src = v42;
    LODWORD(v44) = DWORD2(v42);
    WORD2(v44) = WORD6(v42);
    Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + v28);
    outlined consume of Data?((uint64_t)v10, v35);
    goto LABEL_62;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  outlined consume of Data?((uint64_t)v10, v35);
LABEL_63:
  swift_bridgeObjectRelease();
  return *(void *)&v40[0];
}

unsigned char *specialized Data._Representation.init(_:)(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 > 0x7FFFFFFE)
    {
      return (unsigned char *)specialized Data.LargeSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    }
    else
    {
      return specialized Data.InlineSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

void *specialized Data.InlineSlice.init(_:)(unint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  unint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0) {
    return (void *)(v3 << 32);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t outlined copy of JSONReference.Backing(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: JSONReference)>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  double v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = specialized Sequence._copyContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  double v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  double v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference)>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  double v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  uint64_t v5 = specialized Sequence._copyContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Encodable)>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  double v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  uint64_t v5 = specialized Sequence._copyContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 1;
  }
  v3[2] = v1;
  double v3[3] = 2 * (v5 >> 5);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  double v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    unint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    void *v11 = *v20;
    v11[1] = v21;
    double v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    unint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    unint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 32 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = v20[2];
    uint64_t v23 = v20[3];
    void *v11 = *v20;
    v11[1] = v21;
    double v11[2] = v22;
    v11[3] = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    unint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = v1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      *(void *)&long long v16 = *v1;
      *((void *)&v16 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v1 = xmmword_1821115B0;
      uint64_t result = (void *)specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(a1);
      if (v2)
      {
        uint64_t v9 = v16;
        unint64_t v10 = *((void *)&v16 + 1) | 0x4000000000000000;
        goto LABEL_10;
      }
      int64_t v17 = result;
      uint64_t v18 = v11;
      uint64_t v19 = v12;
      uint64_t v20 = v13;
      uint64_t v14 = v16;
      unint64_t v15 = *((void *)&v16 + 1) | 0x4000000000000000;
      goto LABEL_14;
    case 2uLL:
      *(void *)&long long v16 = *v1;
      *((void *)&v16 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v1 = xmmword_1821115B0;
      uint64_t result = specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(a1);
      if (v2)
      {
        uint64_t v9 = v16;
        unint64_t v10 = *((void *)&v16 + 1) | 0x8000000000000000;
LABEL_10:
        *unint64_t v1 = v9;
        v1[1] = v10;
      }
      else
      {
        int64_t v17 = result;
        uint64_t v18 = v6;
        uint64_t v19 = v7;
        uint64_t v20 = v8;
        uint64_t v14 = v16;
        unint64_t v15 = *((void *)&v16 + 1) | 0x8000000000000000;
LABEL_14:
        *unint64_t v1 = v14;
        v1[1] = v15;
        return v17;
      }
      return result;
    case 3uLL:
      *(void *)((char *)&v16 + 7) = 0;
      *(void *)&long long v16 = 0;
      uint64_t result = a1((uint64_t *)&v17, (uint64_t)&v16, (uint64_t)&v16);
      if (!v2) {
        return v17;
      }
      return result;
    default:
      *(void *)&long long v16 = *v1;
      WORD4(v16) = v3;
      BYTE10(v16) = BYTE2(v3);
      BYTE11(v16) = BYTE3(v3);
      BYTE12(v16) = BYTE4(v3);
      BYTE13(v16) = BYTE5(v3);
      BYTE14(v16) = BYTE6(v3);
      uint64_t result = a1((uint64_t *)&v17, (uint64_t)&v16, (uint64_t)&v16 + BYTE6(v3));
      unint64_t v5 = DWORD2(v16) | ((unint64_t)BYTE12(v16) << 32) | ((unint64_t)BYTE13(v16) << 40) | ((unint64_t)BYTE14(v16) << 48);
      *unint64_t v1 = v16;
      v1[1] = v5;
      if (!v2) {
        return v17;
      }
      return result;
  }
}

ValueMetadata *type metadata accessor for String.LocalizationValue()
{
  return &type metadata for String.LocalizationValue;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.VariableID(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, void (*a2)(void *__return_ptr, uint64_t))
{
  type metadata accessor for __VaListBuilder();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = 8;
  double v3[3] = 0;
  size_t v4 = v3 + 3;
  v3[4] = 0;
  v3[5] = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_25:
    uint64_t v21 = __VaListBuilder.va_list()();
    a2(v23, v21);
    swift_release();
    return (char *)v23[0];
  }
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v7 + 40 * v6, (uint64_t)v23);
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    uint64_t result = (char *)dispatch thunk of CVarArg._cVarArgEncoding.getter();
    uint64_t v9 = *v4;
    uint64_t v10 = *((void *)result + 2);
    BOOL v11 = __OFADD__(*v4, v10);
    uint64_t v12 = *v4 + v10;
    if (v11) {
      break;
    }
    uint64_t v13 = result;
    uint64_t v14 = v3[4];
    if (v14 >= v12) {
      goto LABEL_18;
    }
    if (v14 + 0x4000000000000000 < 0) {
      goto LABEL_28;
    }
    unint64_t v15 = (char *)v3[5];
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    v3[4] = v12;
    if ((unint64_t)(v12 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_29;
    }
    uint64_t result = (char *)swift_slowAlloc();
    v3[5] = result;
    if (v15)
    {
      if (result != v15 || result >= &v15[8 * v9]) {
        memmove(result, v15, 8 * v9);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t result = (char *)v3[5];
    }
    if (!result) {
      goto LABEL_30;
    }
    uint64_t v17 = *((void *)v13 + 2);
    if (v17)
    {
      uint64_t v18 = (uint64_t *)(v13 + 32);
      uint64_t v19 = *v4;
      while (1)
      {
        uint64_t v20 = *v18++;
        *(void *)&result[8 * v19] = v20;
        uint64_t v19 = *v4 + 1;
        if (__OFADD__(*v4, 1)) {
          break;
        }
        *size_t v4 = v19;
        if (!--v17) {
          goto LABEL_3;
        }
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v6;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    if (v6 == v5) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v8 = v7;
  LOBYTE(v9) = a6;
  unint64_t v13 = *(void *)(v6 + 16);
  uint64_t v89 = (uint64_t *)(v6 + 16);
  if (v13 >> 62) {
    goto LABEL_110;
  }
  uint64_t v88 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    type metadata accessor for JSONReference();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = MEMORY[0x1E4FBC868];
    uint64_t v93 = (void *)(v14 + 16);
    *(void *)(v14 + 24) = 0;
    *(unsigned char *)(v14 + 32) = 4;
    uint64_t v15 = swift_retain();
    MEMORY[0x185302590](v15);
    if (*(void *)((*v89 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v89 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v94 = v14;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((_BYTE)v9 == 0xFF)
    {
      swift_retain();
      goto LABEL_13;
    }
    long long v16 = (void *)swift_allocObject();
    v16[5] = &type metadata for _CodingKey;
    v16[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v17 = swift_allocObject();
    id v16[2] = v17;
    *(void *)(v17 + 16) = a3;
    *(void *)(v17 + 24) = a4;
    *(void *)(v17 + 32) = a5;
    *(unsigned char *)(v17 + 40) = v9;
    v16[7] = a2;
    if (a2 >> 62) {
      break;
    }
    uint64_t v18 = (uint64_t *)(a2 + 64);
LABEL_11:
    uint64_t v19 = *v18;
    swift_retain();
    uint64_t v20 = v19 + 1;
    if (!__OFADD__(v19, 1)) {
      goto LABEL_12;
    }
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    swift_bridgeObjectRetain();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (a2 >> 62 == 1)
  {
    uint64_t v18 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  uint64_t v20 = 1;
LABEL_12:
  v16[8] = v20;
  a2 = (unint64_t)v16;
LABEL_13:
  uint64_t v90 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & *(void *)(a1 + 64);
  outlined copy of _CodingKey?(a3, a4, a5, v9);
  int64_t v91 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v24 = 0;
  a3 = v94;
  while (2)
  {
    if (v23)
    {
      unint64_t v29 = __clz(__rbit64(v23));
      uint64_t v30 = (v23 - 1) & v23;
      unint64_t v31 = v29 | (v24 << 6);
      goto LABEL_21;
    }
    int64_t v35 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      goto LABEL_109;
    }
    if (v35 >= v91) {
      goto LABEL_30;
    }
    unint64_t v36 = *(void *)(v90 + 8 * v35);
    if (v36) {
      goto LABEL_25;
    }
    v24 += 2;
    if (v35 + 1 >= v91)
    {
      int64_t v24 = v35;
      goto LABEL_30;
    }
    unint64_t v36 = *(void *)(v90 + 8 * v24);
    if (v36)
    {
      ++v35;
      goto LABEL_25;
    }
    int64_t v55 = v35 + 2;
    if (v35 + 2 >= v91) {
      goto LABEL_30;
    }
    unint64_t v36 = *(void *)(v90 + 8 * v55);
    if (v36)
    {
      v35 += 2;
LABEL_25:
      uint64_t v30 = (v36 - 1) & v36;
      unint64_t v31 = __clz(__rbit64(v36)) + (v35 << 6);
      int64_t v24 = v35;
LABEL_21:
      uint64_t v32 = *(void *)(a1 + 56);
      char v33 = (void *)(*(void *)(a1 + 48) + 16 * v31);
      uint64_t v34 = v33[1];
      unint64_t v96 = v30;
      *(void *)&long long v97 = *v33;
      *((void *)&v97 + 1) = v34;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v32 + 40 * v31, (uint64_t)&v98);
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
    while (2)
    {
      int64_t v35 = v55 + 1;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
        goto LABEL_112;
      }
      if (v35 < v91)
      {
        unint64_t v36 = *(void *)(v90 + 8 * v35);
        ++v55;
        if (v36) {
          goto LABEL_25;
        }
        continue;
      }
      break;
    }
    int64_t v24 = v91 - 1;
LABEL_30:
    unint64_t v96 = 0;
    uint64_t v100 = 0;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v97 = 0u;
LABEL_31:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v97, (uint64_t)&v101);
    uint64_t v37 = v102;
    if (!v102)
    {
      swift_release();
      uint64_t v76 = v89;
      if (!((unint64_t)*v89 >> 62))
      {
        uint64_t v77 = *(void *)((*v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_92;
      }
LABEL_112:
      swift_bridgeObjectRetain();
      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v76 = v89;
LABEL_92:
      if (v88 >= v77)
      {
        uint64_t v78 = 0;
        goto LABEL_104;
      }
      uint64_t v78 = *v76;
      if ((unint64_t)*v76 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v83) {
          goto LABEL_95;
        }
      }
      else if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_95:
        specialized RangeReplaceableCollection<>.popLast()();
        uint64_t v78 = v79;
LABEL_104:
        swift_release();
        swift_release();
        return v78;
      }
      __break(1u);
      goto LABEL_116;
    }
    a4 = v101;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v103, (uint64_t)&v97);
    uint64_t v38 = *((void *)&v98 + 1);
    uint64_t v39 = v99;
    int v40 = __swift_project_boxed_opaque_existential_1(&v97, *((uint64_t *)&v98 + 1));
    swift_bridgeObjectRetain();
    uint64_t v41 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(v40, a2, a4, v37, 0, 0, v38, v39);
    a5 = v8;
    if (v8)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      swift_bridgeObjectRelease_n();
      swift_release();
      uint64_t v80 = v89;
      uint64_t v78 = *v89;
      if ((unint64_t)*v89 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v80 = v89;
      }
      else
      {
        uint64_t v81 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v88 >= v81) {
        goto LABEL_102;
      }
      uint64_t v78 = *v80;
      if (!((unint64_t)*v80 >> 62))
      {
        if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_101:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
LABEL_102:
          swift_willThrow();
          goto LABEL_104;
        }
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }
LABEL_116:
      swift_bridgeObjectRetain();
      uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v84) {
        goto LABEL_101;
      }
      goto LABEL_117;
    }
    uint64_t v9 = v41;
    if (!v41)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = MEMORY[0x1E4FBC868];
      *(void *)(v9 + 24) = 0;
      *(unsigned char *)(v9 + 32) = 4;
    }
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(a3 + 32) != 4) {
      goto LABEL_119;
    }
    uint64_t v42 = a3;
    a3 = *(void *)(a3 + 16);
    void *v93 = 0;
    v93[1] = 0;
    *(unsigned char *)(v42 + 32) = 7;
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v104 = a3;
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a4, v37);
    uint64_t v45 = *(void *)(a3 + 16);
    BOOL v46 = (v44 & 1) == 0;
    uint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46)) {
      goto LABEL_107;
    }
    a5 = v44;
    if (*(void *)(a3 + 24) < v47)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
      uint64_t v48 = v104;
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(a4, v37);
      if ((a5 & 1) != (v50 & 1)) {
        goto LABEL_121;
      }
      unint64_t v8 = v49;
      a3 = v94;
      if (a5) {
        goto LABEL_17;
      }
LABEL_43:
      *(void *)(v48 + 8 * (v8 >> 6) + 64) |= 1 << v8;
      uint64_t v51 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v8);
      *uint64_t v51 = a4;
      v51[1] = v37;
      *(void *)(*(void *)(v48 + 56) + 8 * v8) = v9;
      uint64_t v52 = *(void *)(v48 + 16);
      BOOL v53 = __OFADD__(v52, 1);
      uint64_t v54 = v52 + 1;
      if (v53) {
        goto LABEL_108;
      }
      *(void *)(v48 + 16) = v54;
      swift_bridgeObjectRetain();
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a3 + 16);
      uint64_t v27 = *(void *)(a3 + 24);
      *(void *)(a3 + 16) = v48;
      *(void *)(a3 + 24) = 0;
      char v28 = *(unsigned char *)(a3 + 32);
      *(unsigned char *)(a3 + 32) = 4;
      outlined consume of JSONReference.Backing(v26, v27, v28);
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      unint64_t v8 = 0;
      unint64_t v23 = v96;
      continue;
    }
    break;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v48 = a3;
    a3 = v94;
    if ((v44 & 1) == 0) {
      goto LABEL_43;
    }
LABEL_17:
    uint64_t v25 = *(void *)(v48 + 56);
    a5 = 8 * v8;
    swift_release();
    *(void *)(v25 + 8 * v8) = v9;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v56 = static _DictionaryStorage.copy(original:)();
  uint64_t v48 = v56;
  uint64_t v57 = *(void *)(a3 + 16);
  if (!v57)
  {
LABEL_88:
    swift_bridgeObjectRelease();
    a3 = v94;
    if ((a5 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_17;
  }
  unint64_t v58 = (void *)(v56 + 64);
  unint64_t v59 = (unint64_t)((1 << *(unsigned char *)(v48 + 32)) + 63) >> 6;
  if (v48 != a3 || (unint64_t)v58 >= a3 + 64 + 8 * v59)
  {
    memmove(v58, (const void *)(a3 + 64), 8 * v59);
    uint64_t v57 = *(void *)(a3 + 16);
  }
  uint64_t v85 = a3 + 64;
  int64_t v60 = 0;
  *(void *)(v48 + 16) = v57;
  uint64_t v61 = 1 << *(unsigned char *)(a3 + 32);
  if (v61 < 64) {
    uint64_t v62 = ~(-1 << v61);
  }
  else {
    uint64_t v62 = -1;
  }
  unint64_t v63 = v62 & *(void *)(a3 + 64);
  int64_t v86 = (unint64_t)(v61 + 63) >> 6;
  while (2)
  {
    if (v63)
    {
      unint64_t v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      int64_t v87 = v60;
      unint64_t v65 = v64 | (v60 << 6);
LABEL_62:
      uint64_t v66 = 16 * v65;
      unint64_t v67 = (void *)(*(void *)(a3 + 48) + 16 * v65);
      uint64_t v68 = v67[1];
      uint64_t v69 = 8 * v65;
      uint64_t v70 = *(void *)(*(void *)(a3 + 56) + v69);
      uint64_t v71 = (void *)(*(void *)(v48 + 48) + v66);
      *uint64_t v71 = *v67;
      v71[1] = v68;
      *(void *)(*(void *)(v48 + 56) + v69) = v70;
      swift_bridgeObjectRetain();
      swift_retain();
      int64_t v60 = v87;
      continue;
    }
    break;
  }
  int64_t v72 = v60 + 1;
  if (__OFADD__(v60, 1)) {
    goto LABEL_118;
  }
  if (v72 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v72);
  int64_t v74 = v60 + 1;
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 2;
  if (v60 + 2 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 3;
  if (v60 + 3 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 4;
  if (v60 + 4 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 5;
  if (v60 + 5 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 6;
  if (v60 + 6 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 7;
  if (v60 + 7 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 8;
  if (v60 + 8 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v74);
  if (v73)
  {
LABEL_87:
    unint64_t v63 = (v73 - 1) & v73;
    int64_t v87 = v74;
    unint64_t v65 = __clz(__rbit64(v73)) + (v74 << 6);
    goto LABEL_62;
  }
  uint64_t v75 = v60 + 9;
  if (v60 + 9 >= v86) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v85 + 8 * v75);
  if (v73)
  {
    int64_t v74 = v60 + 9;
    goto LABEL_87;
  }
  while (1)
  {
    int64_t v74 = v75 + 1;
    if (__OFADD__(v75, 1)) {
      break;
    }
    if (v74 >= v86) {
      goto LABEL_88;
    }
    unint64_t v73 = *(void *)(v85 + 8 * v74);
    ++v75;
    if (v73) {
      goto LABEL_87;
    }
  }
LABEL_120:
  __break(1u);
LABEL_121:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t __JSONEncoder.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  int64_t v113 = a3;
  uint64_t v109 = a5;
  uint64_t v6 = a4;
  uint64_t v112 = a2;
  uint64_t v107 = a1;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  long long v106 = (long long *)((char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = type metadata accessor for Optional();
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v97 - v14;
  uint64_t v110 = v5;
  unint64_t v16 = *(void *)(v5 + 16);
  uint64_t v102 = (void *)(v5 + 16);
  if (v16 >> 62) {
    goto LABEL_115;
  }
  uint64_t v101 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v104 = type metadata accessor for JSONReference();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = MEMORY[0x1E4FBC868];
    long long v108 = (void *)(v17 + 16);
    *(void *)(v17 + 24) = 0;
    *(unsigned char *)(v17 + 32) = 4;
    uint64_t v18 = swift_retain();
    uint64_t v19 = v102;
    MEMORY[0x185302590](v18);
    if (*(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    unint64_t v111 = v17;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v20 = *(void (**)(char *, int64_t, unint64_t))(v10 + 16);
    v20(v15, v113, v9);
    v20((char *)v12, (int64_t)v15, v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
    {
      uint64_t v21 = *(void (**)(char *, unint64_t))(v10 + 8);
      v21(v15, v9);
      v21((char *)v12, v9);
      swift_retain();
      uint64_t v6 = v114;
      unint64_t v9 = v111;
      goto LABEL_13;
    }
    uint64_t v22 = *(void (**)(long long *, uint64_t, uint64_t))(v7 + 32);
    v7 += 32;
    uint64_t v23 = (uint64_t)v106;
    v22(v106, v12, v6);
    int64_t v24 = (uint64_t *)swift_allocObject();
    uint64_t v25 = v109;
    v24[5] = v6;
    v24[6] = (uint64_t)v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24 + 2);
    v22((long long *)boxed_opaque_existential_1, v23, v6);
    uint64_t v27 = *(void (**)(char *, unint64_t))(v10 + 8);
    v10 += 8;
    v27(v15, v9);
    unint64_t v28 = v112;
    v24[7] = v112;
    unint64_t v29 = v28 >> 62;
    if (v29) {
      break;
    }
    unint64_t v9 = v111;
    uint64_t v30 = (uint64_t *)(v112 + 64);
    uint64_t v6 = v114;
LABEL_11:
    uint64_t v31 = *v30;
    swift_retain();
    uint64_t v32 = v31 + 1;
    if (!__OFADD__(v31, 1)) {
      goto LABEL_12;
    }
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    swift_bridgeObjectRetain();
    uint64_t v101 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = v114;
  unint64_t v9 = v111;
  if (v29 == 1)
  {
    uint64_t v30 = (uint64_t *)((v112 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  uint64_t v32 = 1;
LABEL_12:
  v24[8] = v32;
  uint64_t v112 = (uint64_t)v24;
LABEL_13:
  uint64_t v33 = *(void *)(v107 + 64);
  uint64_t v103 = v107 + 64;
  uint64_t v34 = 1 << *(unsigned char *)(v107 + 32);
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  else {
    uint64_t v35 = -1;
  }
  unint64_t v10 = v35 & v33;
  long long v106 = &v116;
  uint64_t v109 = (long long *)&v121;
  int64_t v105 = (unint64_t)(v34 + 63) >> 6;
  int64_t v100 = v105 - 1;
  swift_bridgeObjectRetain();
  int64_t v36 = 0;
  while (2)
  {
    if (v10)
    {
      unint64_t v41 = __clz(__rbit64(v10));
      uint64_t v42 = (v10 - 1) & v10;
      unint64_t v43 = v41 | (v36 << 6);
      goto LABEL_21;
    }
    int64_t v47 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      goto LABEL_114;
    }
    if (v47 >= v105)
    {
LABEL_30:
      uint64_t v42 = 0;
      uint64_t v118 = 0;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v115 = 0u;
      goto LABEL_31;
    }
    unint64_t v48 = *(void *)(v103 + 8 * v47);
    if (!v48)
    {
      v36 += 2;
      if (v47 + 1 >= v105)
      {
        int64_t v36 = v47;
      }
      else
      {
        unint64_t v48 = *(void *)(v103 + 8 * v36);
        if (v48)
        {
          ++v47;
          goto LABEL_25;
        }
        if (v47 + 2 < v105)
        {
          unint64_t v48 = *(void *)(v103 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2;
            goto LABEL_25;
          }
          int64_t v67 = v47 + 3;
          if (v47 + 3 >= v105)
          {
            int64_t v36 = v47 + 2;
          }
          else
          {
            unint64_t v48 = *(void *)(v103 + 8 * v67);
            if (v48)
            {
              v47 += 3;
              goto LABEL_25;
            }
            while (1)
            {
              int64_t v47 = v67 + 1;
              if (__OFADD__(v67, 1)) {
                goto LABEL_122;
              }
              if (v47 >= v105) {
                break;
              }
              unint64_t v48 = *(void *)(v103 + 8 * v47);
              ++v67;
              if (v48) {
                goto LABEL_25;
              }
            }
            int64_t v36 = v100;
          }
        }
      }
      goto LABEL_30;
    }
LABEL_25:
    uint64_t v42 = (v48 - 1) & v48;
    unint64_t v43 = __clz(__rbit64(v48)) + (v47 << 6);
    int64_t v36 = v47;
LABEL_21:
    uint64_t v44 = *(void *)(v107 + 56);
    uint64_t v45 = (void *)(*(void *)(v107 + 48) + 16 * v43);
    uint64_t v46 = v45[1];
    *(void *)&long long v115 = *v45;
    *((void *)&v115 + 1) = v46;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v44 + 40 * v43, (uint64_t)v106);
    swift_bridgeObjectRetain();
LABEL_31:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v115, (uint64_t)&v119);
    uint64_t v7 = v120;
    if (!v120)
    {
      swift_release();
      uint64_t v88 = v102;
      if (*v102 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v89 = *(void *)((*v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v101 >= v89)
      {
        uint64_t v90 = 0;
        goto LABEL_108;
      }
      uint64_t v90 = *v88;
      if ((unint64_t)*v88 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v95) {
          goto LABEL_99;
        }
      }
      else if (*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_99:
        specialized RangeReplaceableCollection<>.popLast()();
        uint64_t v90 = v91;
LABEL_108:
        swift_release();
        swift_release();
        return v90;
      }
      __break(1u);
      goto LABEL_120;
    }
    uint64_t v15 = v119;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v109, (uint64_t)&v115);
    uint64_t v49 = *((void *)&v116 + 1);
    char v50 = (void *)v117;
    uint64_t v51 = __swift_project_boxed_opaque_existential_1(&v115, *((uint64_t *)&v116 + 1));
    swift_bridgeObjectRetain();
    uint64_t v52 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)((uint64_t)v51, v112, (uint64_t)v15, v7, 0, 0, v49, v50);
    uint64_t v12 = v6;
    if (v6)
    {
      swift_bridgeObjectRelease_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
      swift_release();
      int64_t v92 = v102;
      uint64_t v90 = *v102;
      if (*v102 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v93 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v101 >= v93) {
        goto LABEL_106;
      }
      uint64_t v90 = *v92;
      if (!((unint64_t)*v92 >> 62))
      {
        if (*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_105:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
LABEL_106:
          swift_willThrow();
          swift_release();
          swift_release();
          return v90;
        }
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
LABEL_120:
      swift_bridgeObjectRetain();
      uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v96) {
        goto LABEL_105;
      }
      goto LABEL_121;
    }
    uint64_t v6 = v52;
    int64_t v113 = v36;
    if (!v52)
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = MEMORY[0x1E4FBC868];
      *(void *)(v6 + 24) = 0;
      *(unsigned char *)(v6 + 32) = 4;
    }
    swift_bridgeObjectRelease();
    uint64_t v114 = 0;
    if (*(unsigned char *)(v9 + 32) != 4) {
      goto LABEL_124;
    }
    unint64_t v53 = v42;
    unint64_t v10 = *(void *)(v9 + 16);
    uint64_t v54 = v108;
    void *v108 = 0;
    v54[1] = 0;
    *(unsigned char *)(v9 + 32) = 7;
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v122 = v10;
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, v7);
    uint64_t v57 = *(void *)(v10 + 16);
    BOOL v58 = (v56 & 1) == 0;
    uint64_t v59 = v57 + v58;
    if (__OFADD__(v57, v58)) {
      goto LABEL_112;
    }
    uint64_t v12 = v56;
    if (*(void *)(v10 + 24) < v59)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
      unint64_t v60 = v122;
      unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, v7);
      if ((v12 & 1) != (v62 & 1)) {
        goto LABEL_126;
      }
      unint64_t v9 = v61;
      unint64_t v10 = v53;
      if ((v12 & 1) == 0)
      {
LABEL_43:
        *(void *)(v60 + 8 * (v9 >> 6) + 64) |= 1 << v9;
        unint64_t v63 = (void *)(*(void *)(v60 + 48) + 16 * v9);
        *unint64_t v63 = v15;
        v63[1] = v7;
        *(void *)(*(void *)(v60 + 56) + 8 * v9) = v6;
        uint64_t v64 = *(void *)(v60 + 16);
        BOOL v65 = __OFADD__(v64, 1);
        uint64_t v66 = v64 + 1;
        if (v65) {
          goto LABEL_113;
        }
        *(void *)(v60 + 16) = v66;
        swift_bridgeObjectRetain();
        goto LABEL_18;
      }
LABEL_17:
      uint64_t v37 = *(void *)(v60 + 56);
      uint64_t v12 = 8 * v9;
      swift_release();
      *(void *)(v37 + 8 * v9) = v6;
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v9 = v111;
      uint64_t v38 = *(void *)(v111 + 16);
      uint64_t v39 = *(void *)(v111 + 24);
      *(void *)(v111 + 16) = v60;
      *(void *)(v9 + 24) = 0;
      char v40 = *(unsigned char *)(v9 + 32);
      *(unsigned char *)(v9 + 32) = 4;
      outlined consume of JSONReference.Backing(v38, v39, v40);
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
      int64_t v36 = v113;
      uint64_t v6 = v114;
      continue;
    }
    break;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    unint64_t v60 = v10;
    unint64_t v10 = v53;
    if ((v56 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v68 = static _DictionaryStorage.copy(original:)();
  unint64_t v60 = v68;
  uint64_t v69 = *(void *)(v10 + 16);
  if (!v69)
  {
LABEL_92:
    swift_bridgeObjectRelease();
    unint64_t v10 = v53;
    if ((v12 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_17;
  }
  uint64_t v70 = (void *)(v68 + 64);
  unint64_t v71 = (unint64_t)((1 << *(unsigned char *)(v60 + 32)) + 63) >> 6;
  if (v60 != v10 || (unint64_t)v70 >= v10 + 64 + 8 * v71)
  {
    memmove(v70, (const void *)(v10 + 64), 8 * v71);
    uint64_t v69 = *(void *)(v10 + 16);
  }
  unint64_t v97 = v10 + 64;
  int64_t v72 = 0;
  *(void *)(v60 + 16) = v69;
  uint64_t v73 = 1 << *(unsigned char *)(v10 + 32);
  if (v73 < 64) {
    uint64_t v74 = ~(-1 << v73);
  }
  else {
    uint64_t v74 = -1;
  }
  unint64_t v75 = v74 & *(void *)(v10 + 64);
  int64_t v98 = (unint64_t)(v73 + 63) >> 6;
  while (2)
  {
    if (v75)
    {
      unint64_t v76 = __clz(__rbit64(v75));
      v75 &= v75 - 1;
      int64_t v99 = v72;
      unint64_t v77 = v76 | (v72 << 6);
LABEL_65:
      uint64_t v78 = 16 * v77;
      uint64_t v79 = (void *)(*(void *)(v10 + 48) + 16 * v77);
      uint64_t v80 = v79[1];
      uint64_t v81 = 8 * v77;
      uint64_t v82 = *(void *)(*(void *)(v10 + 56) + v81);
      uint64_t v83 = (void *)(*(void *)(v60 + 48) + v78);
      *uint64_t v83 = *v79;
      v83[1] = v80;
      *(void *)(*(void *)(v60 + 56) + v81) = v82;
      swift_bridgeObjectRetain();
      swift_retain();
      int64_t v72 = v99;
      continue;
    }
    break;
  }
  int64_t v84 = v72 + 1;
  if (__OFADD__(v72, 1)) {
    goto LABEL_123;
  }
  if (v84 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v84);
  int64_t v86 = v72 + 1;
  if (v85) {
    goto LABEL_90;
  }
  int64_t v86 = v72 + 2;
  if (v72 + 2 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v86);
  if (v85) {
    goto LABEL_90;
  }
  int64_t v86 = v72 + 3;
  if (v72 + 3 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v86);
  if (v85) {
    goto LABEL_90;
  }
  int64_t v86 = v72 + 4;
  if (v72 + 4 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v86);
  if (v85) {
    goto LABEL_90;
  }
  int64_t v86 = v72 + 5;
  if (v72 + 5 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v86);
  if (v85) {
    goto LABEL_90;
  }
  int64_t v86 = v72 + 6;
  if (v72 + 6 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v86);
  if (v85) {
    goto LABEL_90;
  }
  int64_t v86 = v72 + 7;
  if (v72 + 7 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v86);
  if (v85) {
    goto LABEL_90;
  }
  int64_t v86 = v72 + 8;
  if (v72 + 8 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v86);
  if (v85)
  {
LABEL_90:
    unint64_t v75 = (v85 - 1) & v85;
    int64_t v99 = v86;
    unint64_t v77 = __clz(__rbit64(v85)) + (v86 << 6);
    goto LABEL_65;
  }
  uint64_t v87 = v72 + 9;
  if (v72 + 9 >= v98) {
    goto LABEL_92;
  }
  unint64_t v85 = *(void *)(v97 + 8 * v87);
  if (v85)
  {
    int64_t v86 = v72 + 9;
    goto LABEL_90;
  }
  while (1)
  {
    int64_t v86 = v87 + 1;
    if (__OFADD__(v87, 1)) {
      break;
    }
    if (v86 >= v98) {
      goto LABEL_92;
    }
    unint64_t v85 = *(void *)(v97 + 8 * v86);
    ++v87;
    if (v85) {
      goto LABEL_90;
    }
  }
LABEL_125:
  __break(1u);
LABEL_126:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, void *a3)
{
  return _JSONUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

uint64_t _JSONUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(void *)(a2 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v3;
  uint64_t result = (*(uint64_t (**)(char *, double))(v9 + 16))(v12, v10);
  unint64_t v15 = *(void *)(v13 + 144);
  uint64_t v16 = v6[1];
  uint64_t v17 = *(void *)(v16 + 16);
  int v18 = *(unsigned __int8 *)(v16 + 32);
  if (v18 == 4)
  {
    uint64_t v19 = *(void *)(v17 + 16);
    goto LABEL_6;
  }
  if (v18 != 3)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (!((unint64_t)v17 >> 62))
  {
    uint64_t v19 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  uint64_t v27 = *(void *)(v16 + 24);
  if (v17 >= 0) {
    uint64_t v28 = v17 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v28 = *(void *)(v16 + 16);
  }
  uint64_t v31 = v27;
  uint64_t v32 = v28;
  uint64_t v30 = v17;
  swift_retain();
  outlined copy of JSONReference.Backing(v17, v27, 3);
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v30, v31, 3);
LABEL_7:
  uint64_t v20 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)((uint64_t)v12, v15, v19, 0, 0, 2, a2, a3);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }
  if (!v20)
  {
    type metadata accessor for JSONReference();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = MEMORY[0x1E4FBC868];
    *(void *)(v21 + 24) = 0;
    *(unsigned char *)(v21 + 32) = 4;
  }
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  uint64_t v22 = v6[1];
  if (*(unsigned char *)(v22 + 32) != 3) {
    goto LABEL_20;
  }
  uint64_t v33 = *(void *)(v22 + 16);
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(unsigned char *)(v22 + 32) = 7;
  uint64_t v23 = swift_retain();
  MEMORY[0x185302590](v23);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v24 = *(void *)(v22 + 16);
  uint64_t v25 = *(void *)(v22 + 24);
  *(void *)(v22 + 16) = v33;
  *(void *)(v22 + 24) = 0;
  char v26 = *(unsigned char *)(v22 + 32);
  *(unsigned char *)(v22 + 32) = 3;
  outlined consume of JSONReference.Backing(v24, v25, v26);
  return swift_release();
}

uint64_t destroy for DateComponents()
{
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8)
{
  uint64_t v127 = a8;
  uint64_t v8 = a7;
  LODWORD(v131) = a6;
  uint64_t v130 = a5;
  uint64_t v129 = (char *)a4;
  uint64_t v11 = a1;
  uint64_t v12 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v119 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v119 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v119 - v22;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v23, v11, v8);
    swift_dynamicCast();
    uint64_t v24 = v149;
    uint64_t v25 = specialized __JSONEncoder.wrap<A>(_:for:_:)(a2, a3, (uint64_t)v129, v130, v131, *(double *)v133);
    if (!v24) {
      return v25;
    }
    return (uint64_t)v14;
  }
  BOOL v125 = v14;
  uint64_t v26 = (uint64_t)v17;
  unint64_t v126 = a2;
  uint64_t v14 = v129;
  uint64_t v27 = v130;
  char v28 = v131;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v20, v11, v8);
    swift_dynamicCast();
    long long v29 = *(_OWORD *)v133;
    uint64_t v14 = (char *)specialized __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v133, *(unint64_t *)&v133[8], v126, a3, (unint64_t)v14, v27, v28);
    outlined consume of Data._Representation(v29, *((unint64_t *)&v29 + 1));
    return (uint64_t)v14;
  }
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
    swift_dynamicCast();
    uint64_t v31 = *(void **)v133;
    uint64_t v32 = URL.absoluteString.getter();
    uint64_t v34 = v33;

    swift_release();
    swift_release();
    type metadata accessor for JSONReference();
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = v32;
    *((void *)v14 + 3) = v34;
    v14[32] = 0;
    return (uint64_t)v14;
  }
  uint64_t v35 = (uint64_t)v14;
  type metadata accessor for NSDecimal(0);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_conformsToProtocol2()) {
      uint64_t v67 = v8;
    }
    else {
      uint64_t v67 = 0;
    }
    if (v67)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v125, v11, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
      swift_dynamicCast();
      uint64_t v14 = (char *)specialized __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v133, v126, a3, (uint64_t)v14, v27, v131);
      swift_bridgeObjectRelease();
      return (uint64_t)v14;
    }
LABEL_42:
    uint64_t v70 = swift_conformsToProtocol2();
    if (v70) {
      uint64_t v71 = v8;
    }
    else {
      uint64_t v71 = 0;
    }
    if (v71)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _JSONDirectArrayEncodable);
      swift_dynamicCast();
      uint64_t v72 = v128;
      uint64_t v73 = *(void *)(v128 + 24);
      uint64_t v74 = v148;
      uint64_t v129 = v147;
      uint64_t v127 = __swift_project_boxed_opaque_existential_1(v146, (uint64_t)v147);
      unint64_t v76 = *(void **)(v72 + 32);
      uint64_t v75 = *(void *)(v72 + 40);
      int v77 = *(unsigned __int8 *)(v72 + 48);
      unint64_t v79 = *(void *)(v72 + 56);
      uint64_t v78 = *(void *)(v72 + 64);
      uint64_t v81 = *(void *)(v72 + 72);
      uint64_t v80 = *(void *)(v72 + 80);
      uint64_t v83 = *(void *)(v72 + 88);
      uint64_t v82 = *(void *)(v72 + 96);
      uint64_t v85 = *(void *)(v72 + 104);
      uint64_t v84 = *(void *)(v72 + 112);
      unint64_t v87 = *(void *)(v72 + 120);
      uint64_t v86 = *(void *)(v72 + 128);
      uint64_t v88 = *(void *)(v72 + 136);
      uint64_t v131 = v88;
      uint64_t v130 = v86;
      unint64_t v126 = v75;
      BOOL v125 = v74;
      *(void *)uint64_t v133 = v73;
      *(void *)&v133[8] = v76;
      *(void *)&v133[16] = v75;
      char v134 = v77;
      if (v73)
      {
        unint64_t v135 = v79;
        uint64_t v136 = v78;
        uint64_t v121 = v78;
        uint64_t v123 = v81;
        uint64_t v137 = v81;
        uint64_t v138 = v80;
        uint64_t v139 = v83;
        uint64_t v140 = v82;
        uint64_t v141 = v85;
        uint64_t v142 = v84;
        unint64_t v143 = v87;
        uint64_t v144 = v86;
        uint64_t v145 = v88;
        uint64_t v109 = (uint64_t (*)(unsigned char *, char *, char *))*((void *)v74 + 2);
        uint64_t v119 = v74 + 16;
        uint64_t v120 = v109;
        uint64_t v110 = v80;
        LODWORD(v128) = v77;
        outlined copy of JSONEncoder.DateEncodingStrategy(v76, v75, v77);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v79);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v123, v110);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRetain();
        uint64_t v111 = v120(v133, v129, v125);
        outlined consume of JSONEncoder.DateEncodingStrategy(v76, v126, v128);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v79);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v123, v110);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        uint64_t v94 = swift_allocObject();
        uint64_t v14 = (char *)v94;
        *(void *)(v94 + 16) = v111;
        *(void *)(v94 + 24) = 0;
        char v96 = 6;
      }
      else
      {
        unint64_t v124 = v79;
        unint64_t v135 = v79;
        uint64_t v136 = v78;
        uint64_t v89 = v81;
        uint64_t v137 = v81;
        uint64_t v138 = v80;
        uint64_t v139 = v83;
        uint64_t v140 = v82;
        uint64_t v141 = v85;
        uint64_t v142 = v84;
        unint64_t v143 = v87;
        uint64_t v144 = v86;
        uint64_t v145 = v88;
        uint64_t v90 = *((void *)v74 + 1);
        uint64_t v119 = v74 + 8;
        uint64_t v128 = v90;
        uint64_t v91 = v80;
        uint64_t v120 = (uint64_t (*)(unsigned char *, char *, char *))v76;
        uint64_t v122 = v82;
        outlined copy of JSONEncoder.DateEncodingStrategy(v76, v75, v77);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v124);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v89, v91);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRetain();
        uint64_t v92 = ((uint64_t (*)(unsigned char *, char *, char *))v128)(v133, v129, v125);
        uint64_t v129 = (char *)v93;
        outlined consume of JSONEncoder.DateEncodingStrategy(v120, v126, v77);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v124);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v89, v91);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        uint64_t v94 = swift_allocObject();
        uint64_t v14 = (char *)v94;
        uint64_t v95 = (uint64_t)v129;
        *(void *)(v94 + 16) = v92;
        *(void *)(v94 + 24) = v95;
        char v96 = 5;
      }
      *(unsigned char *)(v94 + 32) = v96;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v146);
      return (uint64_t)v14;
    }
    MEMORY[0x1F4188790](v70);
    uint64_t v116 = v8;
    long long v117 = v127;
    uint64_t v118 = v11;
    uint64_t v107 = v149;
    specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)((void (*)(void))partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v119 - 6), v108, a3, v35, v27, v131);
    if (!v107) {
      return v25;
    }
    return (uint64_t)v14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
  swift_dynamicCast();
  int v36 = *(_DWORD *)v133;
  int v37 = *(unsigned __int16 *)&v133[4];
  int v38 = *(unsigned __int16 *)&v133[6];
  __int16 v39 = *(_WORD *)&v133[8];
  __int16 v40 = *(_WORD *)&v133[10];
  __int16 v41 = *(_WORD *)&v133[12];
  __int16 v42 = *(_WORD *)&v133[14];
  __int16 v43 = *(_WORD *)&v133[16];
  LODWORD(v44) = *(unsigned __int16 *)&v133[18];
  if (!_So9NSDecimala__length_getter(v133))
  {
    *(_DWORD *)uint64_t v133 = v36;
    *(_WORD *)&v133[4] = v37;
    *(_WORD *)&v133[6] = v38;
    *(_WORD *)&v133[8] = v39;
    *(_WORD *)&v133[10] = v40;
    *(_WORD *)&v133[12] = v41;
    *(_WORD *)&v133[14] = v42;
    *(_WORD *)&v133[16] = v43;
    *(_WORD *)&v133[18] = v44;
    if (_So9NSDecimala__isNegative_getter(v133))
    {
      unint64_t v68 = 0xE300000000000000;
      uint64_t v69 = 5136718;
LABEL_63:
      type metadata accessor for JSONReference();
      uint64_t v14 = (char *)swift_allocObject();
      *((void *)v14 + 2) = v69;
      *((void *)v14 + 3) = v68;
      v14[32] = 1;
      return (uint64_t)v14;
    }
  }
  *(_DWORD *)uint64_t v133 = v36;
  *(_WORD *)&v133[4] = v37;
  *(_WORD *)&v133[6] = v38;
  *(_WORD *)&v133[8] = v39;
  *(_WORD *)&v133[10] = v40;
  *(_WORD *)&v133[12] = v41;
  *(_WORD *)&v133[14] = v42;
  *(_WORD *)&v133[16] = v43;
  *(_WORD *)&v133[18] = v44;
  if (!_So9NSDecimala__length_getter(v133))
  {
    unint64_t v68 = 0xE100000000000000;
    uint64_t v69 = 48;
    goto LABEL_63;
  }
  *(void *)&long long v132 = 0;
  *((void *)&v132 + 1) = 0xE000000000000000;
  *(_DWORD *)uint64_t v133 = v36;
  *(_WORD *)&v133[4] = v37;
  *(_WORD *)&v133[6] = v38;
  *(_WORD *)&v133[8] = v39;
  *(_WORD *)&v133[10] = v40;
  *(_WORD *)&v133[12] = v41;
  *(_WORD *)&v133[14] = v42;
  *(_WORD *)&v133[16] = v43;
  *(_WORD *)&v133[18] = v44;
  *(_DWORD *)uint64_t v146 = v36;
  *(_WORD *)&v146[4] = v37;
  *(_WORD *)&v146[6] = v38;
  *(_WORD *)&v146[8] = v39;
  *(_WORD *)&v146[10] = v40;
  *(_WORD *)&v146[12] = v41;
  *(_WORD *)&v146[14] = v42;
  *(_WORD *)&v146[16] = v43;
  *(_WORD *)&v146[18] = v44;
  if ((int)_So9NSDecimala__exponent_getter(v146) >= 1)
  {
    do
    {
      LODWORD(v131) = v44;
      v45._uint64_t countAndFlagsBits = 48;
      v45._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      *(_DWORD *)uint64_t v146 = v36;
      *(_WORD *)&v146[4] = v37;
      *(_WORD *)&v146[6] = v38;
      *(_WORD *)&v146[8] = v39;
      *(_WORD *)&v146[10] = v40;
      *(_WORD *)&v146[12] = v41;
      *(_WORD *)&v146[14] = v42;
      *(_WORD *)&v146[16] = v43;
      *(_WORD *)&v146[18] = v131;
      int v46 = _So9NSDecimala__exponent_getter(v146);
      _So9NSDecimala__exponent_setter((v46 - 1), v133);
      int v36 = *(_DWORD *)v133;
      int v37 = *(unsigned __int16 *)&v133[4];
      int v38 = *(unsigned __int16 *)&v133[6];
      __int16 v39 = *(_WORD *)&v133[8];
      __int16 v40 = *(_WORD *)&v133[10];
      __int16 v41 = *(_WORD *)&v133[12];
      __int16 v42 = *(_WORD *)&v133[14];
      __int16 v43 = *(_WORD *)&v133[16];
      LODWORD(v44) = *(unsigned __int16 *)&v133[18];
      *(_OWORD *)uint64_t v146 = *(_OWORD *)v133;
      *(_DWORD *)&v146[16] = *(_DWORD *)&v133[16];
    }
    while ((int)_So9NSDecimala__exponent_getter(v146) > 0);
  }
  *(_DWORD *)uint64_t v146 = v36;
  *(_WORD *)&v146[4] = v37;
  *(_WORD *)&v146[6] = v38;
  *(_WORD *)&v146[8] = v39;
  *(_WORD *)&v146[10] = v40;
  *(_WORD *)&v146[12] = v41;
  *(_WORD *)&v146[14] = v42;
  *(_WORD *)&v146[16] = v43;
  *(_WORD *)&v146[18] = v44;
  if (!_So9NSDecimala__exponent_getter(v146))
  {
    _So9NSDecimala__exponent_setter(1, v133);
    int v36 = *(_DWORD *)v133;
    int v37 = *(unsigned __int16 *)&v133[4];
    int v38 = *(unsigned __int16 *)&v133[6];
    __int16 v39 = *(_WORD *)&v133[8];
    __int16 v40 = *(_WORD *)&v133[10];
    __int16 v41 = *(_WORD *)&v133[12];
    __int16 v42 = *(_WORD *)&v133[14];
    __int16 v43 = *(_WORD *)&v133[16];
    LOWORD(v44) = *(_WORD *)&v133[18];
  }
  LODWORD(v131) = v36;
  *(_DWORD *)uint64_t v146 = v36;
  int v47 = v38;
  int v48 = v37;
  *(_WORD *)&v146[4] = v37;
  LODWORD(v129) = v47;
  *(_WORD *)&v146[6] = v47;
  *(_WORD *)&v146[8] = v39;
  *(_WORD *)&v146[10] = v40;
  *(_WORD *)&v146[12] = v41;
  *(_WORD *)&v146[14] = v42;
  *(_WORD *)&v146[16] = v43;
  *(_WORD *)&v146[18] = v44;
  if (!_So9NSDecimala__length_getter(v146))
  {
    int v49 = v131;
    int v50 = v37;
    LOWORD(v51) = (_WORD)v129;
LABEL_49:
    *(_DWORD *)uint64_t v146 = v49;
    *(_WORD *)&v146[4] = v50;
    *(_WORD *)&v146[6] = v51;
    *(_WORD *)&v146[8] = v39;
    *(_WORD *)&v146[10] = v40;
    *(_WORD *)&v146[12] = v41;
    *(_WORD *)&v146[14] = v42;
    *(_WORD *)&v146[16] = v43;
    *(_WORD *)&v146[18] = v44;
    int v97 = v49;
    int v98 = v50;
    int v99 = _So9NSDecimala__exponent_getter(v146);
    int v100 = v97;
    __int16 v101 = v98;
    if (v99 <= 0)
    {
      *(_DWORD *)uint64_t v146 = v97;
      LODWORD(v130) = v98;
      *(_WORD *)&v146[4] = v98;
      *(_WORD *)&v146[6] = v51;
      *(_WORD *)&v146[8] = v39;
      *(_WORD *)&v146[10] = v40;
      *(_WORD *)&v146[12] = v41;
      *(_WORD *)&v146[14] = v42;
      *(_WORD *)&v146[16] = v43;
      *(_WORD *)&v146[18] = v44;
      int v102 = _So9NSDecimala__exponent_getter(v146);
      LODWORD(v131) = v97;
      __int16 v103 = v51;
      if (v102)
      {
        __int16 v104 = v130;
        do
        {
          v105._uint64_t countAndFlagsBits = 48;
          v105._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v105);
          *(_DWORD *)uint64_t v146 = v131;
          *(_WORD *)&v146[4] = v104;
          *(_WORD *)&v146[6] = v103;
          *(_WORD *)&v146[8] = v39;
          *(_WORD *)&v146[10] = v40;
          *(_WORD *)&v146[12] = v41;
          *(_WORD *)&v146[14] = v42;
          *(_WORD *)&v146[16] = v43;
          *(_WORD *)&v146[18] = v44;
          int v106 = _So9NSDecimala__exponent_getter(v146);
          _So9NSDecimala__exponent_setter((v106 + 1), v133);
          __int16 v104 = *(_WORD *)&v133[4];
          __int16 v103 = *(_WORD *)&v133[6];
          __int16 v39 = *(_WORD *)&v133[8];
          __int16 v40 = *(_WORD *)&v133[10];
          __int16 v41 = *(_WORD *)&v133[12];
          __int16 v42 = *(_WORD *)&v133[14];
          __int16 v43 = *(_WORD *)&v133[16];
          LOWORD(v44) = *(_WORD *)&v133[18];
          LODWORD(v131) = *(_DWORD *)v133;
          *(_OWORD *)uint64_t v146 = *(_OWORD *)v133;
          *(_DWORD *)&v146[16] = *(_DWORD *)&v133[16];
        }
        while (_So9NSDecimala__exponent_getter(v146));
      }
      else
      {
        __int16 v104 = v130;
      }
      v112._uint64_t countAndFlagsBits = 46;
      v112._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v112);
      v113._uint64_t countAndFlagsBits = 48;
      v113._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v113);
      LOWORD(v51) = v103;
      int v100 = v131;
      __int16 v101 = v104;
    }
    *(_DWORD *)uint64_t v146 = v100;
    *(_WORD *)&v146[4] = v101;
    *(_WORD *)&v146[6] = v51;
    *(_WORD *)&v146[8] = v39;
    *(_WORD *)&v146[10] = v40;
    *(_WORD *)&v146[12] = v41;
    *(_WORD *)&v146[14] = v42;
    *(_WORD *)&v146[16] = v43;
    *(_WORD *)&v146[18] = v44;
    if (_So9NSDecimala__isNegative_getter(v146))
    {
      v114._uint64_t countAndFlagsBits = 45;
      v114._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v114);
    }
    *(_OWORD *)uint64_t v146 = v132;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    uint64_t v69 = String.init<A>(_:)();
    unint64_t v68 = v115;
    goto LABEL_63;
  }
  uint64_t v26 = 3435973837;
  uint64_t v12 = 10;
  int v49 = v131;
  int v50 = v48;
  int v51 = (int)v129;
  while (1)
  {
    LODWORD(v131) = v49;
    LODWORD(v130) = v50;
    *(_DWORD *)uint64_t v146 = v49;
    *(_WORD *)&v146[4] = v50;
    *(_WORD *)&v146[6] = v51;
    *(_WORD *)&v146[8] = v39;
    *(_WORD *)&v146[10] = v40;
    *(_WORD *)&v146[12] = v41;
    *(_WORD *)&v146[14] = v42;
    *(_WORD *)&v146[16] = v43;
    *(_WORD *)&v146[18] = v44;
    if (!_So9NSDecimala__exponent_getter(v146))
    {
      LODWORD(v129) = v51;
      v52._uint64_t countAndFlagsBits = 46;
      v52._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v52);
      LOWORD(v51) = (_WORD)v129;
    }
    *(_DWORD *)uint64_t v146 = v131;
    *(_WORD *)&v146[4] = v130;
    *(_WORD *)&v146[6] = v51;
    *(_WORD *)&v146[8] = v39;
    *(_WORD *)&v146[10] = v40;
    *(_WORD *)&v146[12] = v41;
    *(_WORD *)&v146[14] = v42;
    *(_WORD *)&v146[16] = v43;
    *(_WORD *)&v146[18] = v44;
    int v53 = _So9NSDecimala__exponent_getter(v146);
    _So9NSDecimala__exponent_setter((v53 + 1), v133);
    uint64_t v54 = *(unsigned int *)v133;
    uint64_t v55 = *(unsigned __int16 *)&v133[4];
    uint64_t v27 = *(unsigned __int16 *)&v133[6];
    uint64_t v56 = *(unsigned __int16 *)&v133[8];
    uint64_t v128 = *(unsigned __int16 *)&v133[10];
    uint64_t v127 = (void *)*(unsigned __int16 *)&v133[12];
    uint64_t v11 = *(unsigned __int16 *)&v133[18];
    BOOL v125 = (char *)*(unsigned __int16 *)&v133[14];
    LODWORD(v126) = *(unsigned __int16 *)&v133[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v133 | ((unint64_t)*(unsigned __int16 *)&v133[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v133[6] << 48), *(unsigned __int16 *)&v133[8] | ((unint64_t)*(unsigned __int16 *)&v133[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v133[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v133[14] << 48), *(unsigned __int16 *)&v133[16] | (*(unsigned __int16 *)&v133[18] << 16));
    uint64_t v14 = v57;
    a3 = *((void *)v57 + 2);
    uint64_t v131 = v54;
    uint64_t v130 = v55;
    uint64_t v129 = (char *)v56;
    if (a3)
    {
      uint64_t v58 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v35 = v58 + 30;
      *(void *)(v58 + 16) = a3;
      bzero((void *)(v58 + 32), 2 * a3);
      unsigned int v59 = *(unsigned __int16 *)&v14[2 * a3 + 30];
      unsigned int v60 = v59 / 0xA;
      while (1)
      {
        *(_WORD *)(v35 + 2 * a3) = v60;
        uint64_t v8 = v59 % 0xA;
        if (a3 == 1) {
          break;
        }
        unsigned int v59 = *(unsigned __int16 *)&v14[2 * a3 + 28] | (v8 << 16);
        unsigned int v60 = v59 / 0xA;
        unint64_t v61 = a3 - 2;
        --a3;
        if (v61 >= *(void *)(v58 + 16))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }
    else
    {
      LODWORD(v8) = 0;
      uint64_t v58 = MEMORY[0x1E4FBC860];
    }
    uint64_t v62 = *(void *)(v58 + 16);
    if (v62 && !*(_WORD *)(v58 + 2 * v62 + 30))
    {
      do
      {
        *(void *)(v58 + 16) = v62 - 1;
        if (v62 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v58 + 28 + 2 * v62--));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v146 = v131;
    *(_WORD *)&v146[4] = v130;
    *(_WORD *)&v146[6] = v27;
    *(_WORD *)&v146[8] = (_WORD)v129;
    *(_WORD *)&v146[10] = v128;
    *(_WORD *)&v146[12] = (_WORD)v127;
    *(_WORD *)&v146[14] = (_WORD)v125;
    *(_WORD *)&v146[16] = v126;
    *(_WORD *)&v146[18] = v11;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v58);
    if (v64) {
      break;
    }
    uint64_t v149 = 0;
    unint64_t v44 = *(void *)(v58 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v44)) {
      goto LABEL_65;
    }
    _So9NSDecimala__length_setter(v44, v146);
    *(_DWORD *)uint64_t v133 = *(_DWORD *)v146;
    *(_OWORD *)&v133[4] = *(_OWORD *)&v146[4];
    *(void *)uint64_t v146 = v8 | 0x30;
    v65._uint64_t countAndFlagsBits = MEMORY[0x185302020](v146, 1);
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    LODWORD(v131) = *(_DWORD *)v133;
    LODWORD(v130) = *(unsigned __int16 *)&v133[4];
    int v51 = *(unsigned __int16 *)&v133[6];
    __int16 v39 = *(_WORD *)&v133[8];
    __int16 v40 = *(_WORD *)&v133[10];
    __int16 v41 = *(_WORD *)&v133[12];
    __int16 v42 = *(_WORD *)&v133[14];
    __int16 v43 = *(_WORD *)&v133[16];
    LOWORD(v44) = *(_WORD *)&v133[18];
    *(_OWORD *)uint64_t v146 = *(_OWORD *)v133;
    *(_DWORD *)&v146[16] = *(_DWORD *)&v133[16];
    int v66 = _So9NSDecimala__length_getter(v146);
    int v50 = v130;
    int v49 = v131;
    if (!v66) {
      goto LABEL_49;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_65:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)(void (*a1)(void), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  uint64_t v11 = a6;
  uint64_t v12 = a5;
  uint64_t v15 = a1;
  uint64_t v16 = v7 + 2;
  unint64_t v17 = v7[2];
  if (v17 >> 62)
  {
    uint64_t v35 = a5;
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v15 = a1;
    uint64_t v11 = a6;
    uint64_t v12 = v35;
  }
  else
  {
    uint64_t v18 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v19 = a3 >> 62;
  int v36 = v16;
  if (a7 != -1)
  {
    uint64_t v34 = v15;
    uint64_t v32 = v18;
    uint64_t v33 = v8;
    uint64_t v18 = (void *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v20 = swift_allocObject();
    unint64_t v18[2] = v20;
    *(void *)(v20 + 16) = a4;
    *(void *)(v20 + 24) = v12;
    *(void *)(v20 + 32) = v11;
    *(unsigned char *)(v20 + 40) = a7;
    v18[7] = a3;
    if (v19)
    {
      if (v19 != 1)
      {
        uint64_t v23 = 1;
        goto LABEL_12;
      }
      uint64_t v21 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v21 = (uint64_t *)(a3 + 64);
    }
    uint64_t v8 = *v21;
    swift_retain();
    uint64_t v23 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
LABEL_12:
      v18[8] = v23;
      uint64_t v16 = (void *)v9[18];
      uint64_t v35 = v9[19];
      v9[18] = v18;
      uint64_t v18 = v32;
LABEL_13:
      outlined copy of _CodingKey?(a4, v12, v11, a7);
      uint64_t v8 = v33;
      goto LABEL_14;
    }
    __break(1u);
LABEL_32:
    uint64_t v34 = v15;
    uint64_t v33 = v8;
    uint64_t v23 = *(void *)(a3 + 64);
    swift_retain();
    goto LABEL_13;
  }
  uint64_t v16 = (void *)v9[18];
  uint64_t v22 = v9[19];
  v9[18] = a3;
  uint64_t v35 = v22;
  if (!v19) {
    goto LABEL_32;
  }
  if (v19 == 1)
  {
    uint64_t v34 = v15;
    uint64_t v23 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
LABEL_14:
    swift_retain();
    uint64_t v15 = v34;
    goto LABEL_15;
  }
  uint64_t v23 = 0;
LABEL_15:
  v9[19] = v23;
  v15(v9);
  if (v8)
  {
    v9[18] = v16;
    swift_retain();
    swift_release();
    v9[19] = v35;
    swift_release();
    swift_release();
    unint64_t v24 = v9[2];
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((uint64_t)v18 >= v25) {
      goto LABEL_22;
    }
    if (*v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v30) {
        goto LABEL_21;
      }
    }
    else if (*(void *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_21:
      specialized RangeReplaceableCollection<>.popLast()();
      swift_release();
LABEL_22:
      swift_willThrow();
      return;
    }
    __break(1u);
    goto LABEL_39;
  }
  v9[18] = v16;
  swift_retain();
  swift_release();
  v9[19] = v35;
  swift_release();
  swift_release();
  unint64_t v26 = v9[2];
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((uint64_t)v18 < v27)
  {
    if (!(*v36 >> 62))
    {
      if (!*(void *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_40:
        __break(1u);
        return;
      }
LABEL_28:
      specialized RangeReplaceableCollection<>.popLast()();
      return;
    }
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v31) {
      goto LABEL_40;
    }
    goto LABEL_28;
  }
}

void specialized RangeReplaceableCollection<>.popLast()()
{
  if (*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return;
    }
  }
  else if (!*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  specialized Array._customRemoveLast()();
  if (!v1)
  {
    if (*v0 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v3 = v5 - 1;
      if (!__OFSUB__(v5, 1)) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v2 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t v3 = v2 - 1;
      if (!__OFSUB__(v2, 1))
      {
LABEL_6:
        specialized Array.remove(at:)(v3);
        return;
      }
    }
    __break(1u);
  }
}

void specialized Array._customRemoveLast()()
{
  unint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v1 & 0x8000000000000000) != 0
    || (v1 & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    unint64_t v1 = v3;
    *uint64_t v0 = v3;
  }
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v4 - 1;
    specialized Array._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

uint64_t partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __JSONEncoder@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __JSONEncoder();
  a1[4] = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
  *a1 = v3;

  return swift_retain();
}

uint64_t closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  double v3[3] = type metadata accessor for __JSONEncoder();
  v3[4] = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  double v3[3] = type metadata accessor for __JSONEncoder();
  v3[4] = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t type metadata accessor for __JSONEncoder()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of any PredicateExpression<Self.Output == B1>(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with take of (key: String, value: Encodable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *String.init(format:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized withVaList<A>(_:_:)(a3, a1, a2, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for __VaListBuilder();
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = 8;
  v6[3] = 0;
  uint64_t v7 = v6 + 3;
  v6[4] = 0;
  v6[5] = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_25:
    uint64_t v24 = __VaListBuilder.va_list()();
    if (a4)
    {
      *((void *)&v32 + 1) = &type metadata for Locale;
      *(void *)&long long v31 = a4;
      *((void *)&v31 + 1) = a5;
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
    }
    type metadata accessor for NSString();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    id v25 = NSString.__allocating_init(format:locale:arguments:)(a2, a3, &v31, v24);
    id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    swift_release();

    return (char *)v26;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v10 + 40 * v9, (uint64_t)&v31);
    __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
    uint64_t result = (char *)dispatch thunk of CVarArg._cVarArgEncoding.getter();
    uint64_t v12 = *v7;
    uint64_t v13 = *((void *)result + 2);
    BOOL v14 = __OFADD__(*v7, v13);
    uint64_t v15 = *v7 + v13;
    if (v14) {
      break;
    }
    uint64_t v16 = result;
    uint64_t v17 = v6[4];
    if (v17 >= v15) {
      goto LABEL_18;
    }
    if (v17 + 0x4000000000000000 < 0) {
      goto LABEL_31;
    }
    uint64_t v18 = (char *)v6[5];
    if (2 * v17 > v15) {
      uint64_t v15 = 2 * v17;
    }
    v6[4] = v15;
    if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_32;
    }
    uint64_t result = (char *)swift_slowAlloc();
    v6[5] = result;
    if (v18)
    {
      if (result != v18 || result >= &v18[8 * v12]) {
        memmove(result, v18, 8 * v12);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t result = (char *)v6[5];
    }
    if (!result) {
      goto LABEL_33;
    }
    uint64_t v20 = *((void *)v16 + 2);
    if (v20)
    {
      uint64_t v21 = (uint64_t *)(v16 + 32);
      uint64_t v22 = *v7;
      while (1)
      {
        uint64_t v23 = *v21++;
        *(void *)&result[8 * v22] = v23;
        uint64_t v22 = *v7 + 1;
        if (__OFADD__(*v7, 1)) {
          break;
        }
        *uint64_t v7 = v22;
        if (!--v20) {
          goto LABEL_3;
        }
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v9;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    if (v9 == v8) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

{
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t ObjectType;
  void *v28;
  id v29;
  id v30;
  id v31;
  void v33[4];

  type metadata accessor for __VaListBuilder();
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = 8;
  v6[3] = 0;
  uint64_t v7 = v6 + 3;
  v6[4] = 0;
  v6[5] = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_25:
    uint64_t v24 = __VaListBuilder.va_list()();
    id v25 = self;
    id v26 = String._bridgeToObjectiveCImpl()();
    uint64_t ObjectType = swift_getObjectType();
    char v28 = (void *)(*(uint64_t (**)(uint64_t))(a5 + 488))(ObjectType);
    long long v29 = String.LocalizationOptions._nsOptions.getter();
    uint64_t v30 = objc_msgSend(v25, sel__stringWithFormat_locale_options_arguments_, v26, v28, v29, v24);
    swift_unknownObjectRelease();

    long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    swift_release();

    return (char *)v31;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v10 + 40 * v9, (uint64_t)v33);
    __swift_project_boxed_opaque_existential_1(v33, v33[3]);
    uint64_t result = (char *)dispatch thunk of CVarArg._cVarArgEncoding.getter();
    uint64_t v12 = *v7;
    uint64_t v13 = *((void *)result + 2);
    BOOL v14 = __OFADD__(*v7, v13);
    uint64_t v15 = *v7 + v13;
    if (v14) {
      break;
    }
    uint64_t v16 = result;
    uint64_t v17 = v6[4];
    if (v17 >= v15) {
      goto LABEL_18;
    }
    if (v17 + 0x4000000000000000 < 0) {
      goto LABEL_28;
    }
    uint64_t v18 = (char *)v6[5];
    if (2 * v17 > v15) {
      uint64_t v15 = 2 * v17;
    }
    v6[4] = v15;
    if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_29;
    }
    uint64_t result = (char *)swift_slowAlloc();
    v6[5] = result;
    if (v18)
    {
      if (result != v18 || result >= &v18[8 * v12]) {
        memmove(result, v18, 8 * v12);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t result = (char *)v6[5];
    }
    if (!result) {
      goto LABEL_30;
    }
    uint64_t v20 = *((void *)v16 + 2);
    if (v20)
    {
      uint64_t v21 = (uint64_t *)(v16 + 32);
      uint64_t v22 = *v7;
      while (1)
      {
        uint64_t v23 = *v21++;
        *(void *)&result[8 * v22] = v23;
        uint64_t v22 = *v7 + 1;
        if (__OFADD__(*v7, 1)) {
          break;
        }
        *uint64_t v7 = v22;
        if (!--v20) {
          goto LABEL_3;
        }
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v9;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    if (v9 == v8) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t _CodingPathNode.path.getter(unint64_t a1)
{
  v10[14] = *MEMORY[0x1E4F143B8];
  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      uint64_t v2 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v1 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      swift_retain();
      uint64_t v3 = _CodingPathNode.path.getter(v1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v5 = swift_allocObject();
      *(void *)(inited + 32) = v5;
      *(void *)(v5 + 16) = v2;
      *(void *)(v5 + 24) = 0;
      *(void *)(v5 + 32) = 0;
      *(unsigned char *)(v5 + 40) = 2;
      specialized Array.append<A>(contentsOf:)(inited);
      swift_release();
      return v3;
    }
    else
    {
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 56);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1 + 16, (uint64_t)v10);
    swift_retain();
    uint64_t v6 = _CodingPathNode.path.getter(v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_1821037E0;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v10, v8 + 32);
    specialized Array.append<A>(contentsOf:)(v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return v6;
}

uint64_t outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for BPlistTrailer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  BOOL v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  unint64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  Swift::String_optional v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;

  unint64_t v2 = v1;
  int64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v4[3] >> 1, v7 < v5))
  {
    int64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, v4);
    uint64_t v7 = v4[3] >> 1;
  }
  unint64_t v8 = v4[2];
  uint64_t v9 = v7 - v8;
  unint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v25, &v4[2 * v8 + 4], v7 - v8, a1);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v10)
  {
    uint64_t v11 = v4[2];
    uint64_t v12 = __OFADD__(v11, v10);
    BOOL v13 = v11 + v10;
    if (v12)
    {
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v4[2] = v13;
  }
  if (v10 == v9)
  {
LABEL_11:
    uint64_t v9 = v4[2];
    uint64_t v17 = ICU.Enumerator.Elements.Iterator.next()();
    unint64_t object = v17.value._object;
    uint64_t countAndFlagsBits = v17.value._countAndFlagsBits;
    if (!v17.value._object) {
      goto LABEL_9;
    }
    while (1)
    {
      uint64_t v18 = v4[3];
      unint64_t v19 = v18 >> 1;
      if ((uint64_t)(v18 >> 1) < v9 + 1)
      {
        uint64_t v22 = countAndFlagsBits;
        uint64_t v23 = object;
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v9 + 1, 1, v4);
        unint64_t object = v23;
        int64_t v4 = v24;
        uint64_t countAndFlagsBits = v22;
        unint64_t v19 = v4[3] >> 1;
        if (v9 < v19)
        {
LABEL_16:
          uint64_t v20 = &v4[2 * v9 + 5];
          while (1)
          {
            *(v20 - 1) = countAndFlagsBits;
            *uint64_t v20 = object;
            ++v9;
            uint64_t v21 = ICU.Enumerator.Elements.Iterator.next()();
            unint64_t object = v21.value._object;
            uint64_t countAndFlagsBits = v21.value._countAndFlagsBits;
            if (!v21.value._object) {
              break;
            }
            v20 += 2;
            if (v19 == v9)
            {
              uint64_t v9 = v19;
              goto LABEL_13;
            }
          }
LABEL_23:
          uint64_t v4[2] = v9;
          break;
        }
      }
      else if (v9 < v19)
      {
        goto LABEL_16;
      }
LABEL_13:
      uint64_t v4[2] = v9;
    }
  }
LABEL_9:
  uint64_t result = swift_release();
  *(void *)unint64_t v2 = v4;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  BOOL v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[v9 + 4];
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  BOOL v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CVarArg<>._cVarArgEncoding.getter()
{
  id v0 = (id)String._bridgeToObjectiveCImpl()();
  uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v1 + 16) = 1;
  *(void *)(v1 + 32) = v0;
  swift_unknownObjectRelease();
  return v1;
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance String()
{
  return specialized CVarArg<>._cVarArgEncoding.getter();
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

id NSString.__allocating_init(format:locale:arguments:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[3];
  if (v7)
  {
    unint64_t v8 = __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    uint64_t v9 = *(void *)(v7 - 8);
    double v10 = MEMORY[0x1F4188790](v8);
    uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  }
  else
  {
    uint64_t v13 = 0;
  }
  id v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFormat_locale_arguments_, v6, v13, a4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v14;
}

uint64_t destroy for Locale()
{
  return swift_unknownObjectRelease();
}

_OWORD *initializeBufferWithCopyOfBuffer for Locale(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t outlined consume of ExpressionStructure.Argument(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = vars8;
  }
  return swift_bridgeObjectRelease();
}

uint64_t destroy for ExpressionStructure.Argument(uint64_t a1)
{
  return outlined consume of ExpressionStructure.Argument(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

void partial apply for closure #1 in String.init(format:locale:arguments:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  closure #1 in String.init(format:locale:arguments:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

void closure #1 in String.init(format:locale:arguments:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (a4)
  {
    *((void *)&v15 + 1) = &type metadata for Locale;
    *(void *)&long long v14 = a4;
    *((void *)&v14 + 1) = a5;
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  type metadata accessor for NSString();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = NSString.__allocating_init(format:locale:arguments:)(a2, a3, &v14, a1);
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *a6 = v11;
  a6[1] = v13;
}

uint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  uint64_t v15 = result;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (unint64_t *)v9[7];
  if (v16)
  {
    if (v16 == (unint64_t *)1)
    {
      switch(a2 >> 62)
      {
        case 1uLL:
          if (result >> 32 < (int)result) {
            goto LABEL_116;
          }
          if (result >> 32 == (int)result)
          {
            id v34 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            outlined copy of Data._Representation(v15, a2);
            id v35 = objc_msgSend(v34, sel_init);
            id v36 = objc_msgSend(v35, sel_base64EncodedStringWithOptions_, 0);
LABEL_95:
            id v80 = v36;
            id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
            uint64_t v45 = v81;

            outlined consume of Data._Representation(v15, a2);
            goto LABEL_96;
          }
          uint64_t v76 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v76) {
            goto LABEL_124;
          }
          uint64_t v77 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          if (!__OFSUB__((int)result, v77))
          {
            uint64_t v78 = v76 + (int)result - v77;
            id v79 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            outlined copy of Data._Representation(v15, a2);
            id v35 = objc_msgSend(v79, sel_initWithBytesNoCopy_length_freeWhenDone_, v78, (v15 >> 32) - (int)v15, 0);
            id v36 = objc_msgSend(v35, sel_base64EncodedStringWithOptions_, 0);
            goto LABEL_95;
          }
          goto LABEL_121;
        case 2uLL:
          uint64_t v37 = *(void *)(result + 16);
          uint64_t v38 = *(void *)(result + 24);
          if (v37 == v38)
          {
            id v39 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            swift_retain();
            swift_retain();
            id v40 = objc_msgSend(v39, sel_init);
            id v41 = objc_msgSend(v40, sel_base64EncodedStringWithOptions_, 0);
LABEL_91:
            id v74 = v41;
            id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
            uint64_t v45 = v75;

            swift_release();
            swift_release();
LABEL_96:
            type metadata accessor for JSONReference();
            a5 = swift_allocObject();
            *(void *)(a5 + 16) = v43;
            *(void *)(a5 + 24) = v45;
            *(unsigned char *)(a5 + 32) = 0;
            return a5;
          }
          uint64_t v67 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v67) {
            goto LABEL_123;
          }
          uint64_t v68 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v69 = __OFSUB__(v37, v68);
          uint64_t v70 = v37 - v68;
          if (v69) {
            goto LABEL_119;
          }
          uint64_t v71 = v38 - v37;
          if (!__OFSUB__(v38, v37))
          {
            uint64_t v72 = v67 + v70;
            id v73 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            swift_retain();
            swift_retain();
            id v40 = objc_msgSend(v73, sel_initWithBytesNoCopy_length_freeWhenDone_, v72, v71, 0);
            id v41 = objc_msgSend(v40, sel_base64EncodedStringWithOptions_, 0);
            goto LABEL_91;
          }
          break;
        case 3uLL:
          id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
          id v18 = objc_msgSend(v17, sel_base64EncodedStringWithOptions_, 0);
          goto LABEL_29;
        default:
          int v99 = (unint64_t *)result;
          LOWORD(v100) = a2;
          BYTE2(v100) = BYTE2(a2);
          BYTE3(v100) = BYTE3(a2);
          BYTE4(v100) = BYTE4(a2);
          BYTE5(v100) = BYTE5(a2);
          id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v99, BYTE6(a2), 0);
          id v18 = objc_msgSend(v17, sel_base64EncodedStringWithOptions_, 0);
LABEL_29:
          id v42 = v18;
          id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          uint64_t v45 = v44;

          goto LABEL_96;
      }
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
    }
    uint64_t v91 = a6;
    unint64_t v24 = v9[2];
    uint64_t v88 = v9 + 2;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v16);
      uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v90 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    uint64_t v96 = v15;
    uint64_t v98 = v8;
    if (a7 == -1)
    {
      unint64_t v31 = v9[18];
      unint64_t v87 = v9[19];
      v9[18] = a3;
      if (a3 >> 62)
      {
        unint64_t v32 = a2;
        if (a3 >> 62 != 1)
        {
          uint64_t v33 = 0;
LABEL_66:
          v9[19] = v33;
          int v102 = (void *)type metadata accessor for __JSONEncoder();
          unint64_t v103 = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
          int v99 = v9;
          swift_retain();
          ((void (*)(uint64_t, unint64_t, unint64_t **))v16)(v96, v32, &v99);
          if (v98)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
            v9[18] = v31;
            swift_retain();
            swift_release();
            v9[19] = v87;
            swift_release();
            swift_release();
            a5 = v9[2];
            if (!(a5 >> 62))
            {
              uint64_t v62 = *(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_69;
            }
LABEL_101:
            swift_bridgeObjectRetain();
            uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
LABEL_69:
            if (v90 >= v62)
            {
LABEL_73:
              swift_willThrow();
              outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v16);
              return a5;
            }
            a5 = *v88;
            if (!(*v88 >> 62))
            {
              if (*(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_72:
                specialized RangeReplaceableCollection<>.popLast()();
                swift_release();
                goto LABEL_73;
              }
              goto LABEL_113;
            }
LABEL_112:
            swift_bridgeObjectRetain();
            uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v84) {
              goto LABEL_72;
            }
LABEL_113:
            __break(1u);
            goto LABEL_114;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
          v9[18] = v31;
          swift_retain();
          swift_release();
          v9[19] = v87;
          swift_release();
          swift_release();
          unint64_t v63 = v9[2];
          if (!(v63 >> 62))
          {
            uint64_t v64 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_76;
          }
LABEL_109:
          swift_bridgeObjectRetain();
          uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_76:
          if (v90 < v64)
          {
            if (!(*v88 >> 62))
            {
              if (!*(void *)((*v88 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_118;
              }
              goto LABEL_79;
            }
LABEL_117:
            swift_bridgeObjectRetain();
            uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v86)
            {
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }
LABEL_79:
            specialized RangeReplaceableCollection<>.popLast()();
            a5 = v65;
            outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v16);
            return a5;
          }
LABEL_82:
          outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v16);
          type metadata accessor for JSONReference();
          a5 = swift_allocObject();
          *(void *)(a5 + 16) = MEMORY[0x1E4FBC868];
          *(void *)(a5 + 24) = 0;
          *(unsigned char *)(a5 + 32) = 4;
          return a5;
        }
        uint64_t v33 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        swift_retain();
LABEL_65:
        swift_retain();
        goto LABEL_66;
      }
      uint64_t v33 = *(void *)(a3 + 64);
      swift_retain();
      uint64_t v27 = v91;
      unint64_t v32 = a2;
LABEL_64:
      outlined copy of _CodingKey?(a4, a5, v27, a7);
      goto LABEL_65;
    }
    id v25 = (void *)swift_allocObject();
    v25[5] = &type metadata for _CodingKey;
    v25[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v26 = swift_allocObject();
    v25[2] = v26;
    *(void *)(v26 + 16) = a4;
    *(void *)(v26 + 24) = a5;
    uint64_t v27 = v91;
    *(void *)(v26 + 32) = v91;
    *(unsigned char *)(v26 + 40) = a7;
    v25[7] = a3;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        uint64_t v33 = 1;
LABEL_63:
        v25[8] = v33;
        unint64_t v31 = v9[18];
        unint64_t v87 = v9[19];
        v9[18] = (unint64_t)v25;
        unint64_t v32 = a2;
        goto LABEL_64;
      }
      char v28 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      char v28 = (uint64_t *)(a3 + 64);
    }
    uint64_t v61 = *v28;
    swift_retain();
    uint64_t v27 = v91;
    uint64_t v33 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
    goto LABEL_63;
  }
  uint64_t v16 = v9 + 2;
  unint64_t v19 = v9[2];
  uint64_t v97 = v8;
  if (v19 >> 62)
  {
    uint64_t v82 = a6;
    swift_bridgeObjectRetain();
    uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    a6 = v82;
    uint64_t v16 = v9 + 2;
  }
  else
  {
    uint64_t v90 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v95 = v15;
  if (a7 != -1)
  {
    uint64_t v89 = v16;
    uint64_t v20 = a6;
    uint64_t v21 = (void *)swift_allocObject();
    v21[5] = &type metadata for _CodingKey;
    v21[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v22 = swift_allocObject();
    void v21[2] = v22;
    *(void *)(v22 + 16) = a4;
    *(void *)(v22 + 24) = a5;
    *(void *)(v22 + 32) = v20;
    *(unsigned char *)(v22 + 40) = a7;
    v21[7] = a3;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        uint64_t v47 = v20;
        uint64_t v46 = 0;
        goto LABEL_33;
      }
      uint64_t v23 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v23 = (uint64_t *)(a3 + 64);
    }
    uint64_t v46 = *v23;
    swift_retain();
    uint64_t v47 = v20;
LABEL_33:
    unint64_t v30 = v46 + 1;
    uint64_t v16 = v89;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      goto LABEL_101;
    }
    v21[8] = v30;
    unint64_t v29 = v9[19];
    unint64_t v92 = v9[18];
    v9[18] = (unint64_t)v21;
    goto LABEL_35;
  }
  unint64_t v29 = v9[19];
  unint64_t v92 = v9[18];
  v9[18] = a3;
  if (!(a3 >> 62))
  {
    unint64_t v30 = *(void *)(a3 + 64);
    uint64_t v66 = a6;
    swift_retain();
    uint64_t v47 = v66;
LABEL_35:
    outlined copy of _CodingKey?(a4, a5, v47, a7);
    goto LABEL_36;
  }
  if (a3 >> 62 == 1)
  {
    unint64_t v30 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
LABEL_36:
    swift_retain();
    goto LABEL_37;
  }
  unint64_t v30 = 0;
LABEL_37:
  v9[19] = v30;
  int v48 = *(uint64_t (**)(uint64_t))(*v9 + 208);
  uint64_t v49 = swift_retain();
  if (v48(v49))
  {
    type metadata accessor for JSONReference();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v50 + 24) = 0;
    *(unsigned char *)(v50 + 32) = 3;
    uint64_t v51 = swift_retain();
    MEMORY[0x185302590](v51);
    uint64_t v52 = v95;
    if (*(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    unint64_t v53 = v29;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v54 = v97;
LABEL_50:
    unint64_t v58 = v9[18];
    int v102 = &unk_1ECA41F28;
    int v99 = v9;
    uint64_t v100 = v50;
    unint64_t v103 = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
    unint64_t v101 = v58;
    swift_retain();
    swift_retain();
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v52, a2, (uint64_t)&v99);
    if (v54)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      swift_release();
      v9[18] = v92;
      swift_retain();
      swift_release();
      v9[19] = v53;
      swift_release();
      swift_release();
      a5 = v9[2];
      if (a5 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v59 = *(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v90 >= v59) {
        goto LABEL_57;
      }
      a5 = *v16;
      if (!(*v16 >> 62))
      {
        if (!*(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_115;
        }
LABEL_56:
        specialized RangeReplaceableCollection<>.popLast()();
        swift_release();
LABEL_57:
        swift_willThrow();
        return a5;
      }
LABEL_114:
      swift_bridgeObjectRetain();
      uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v85)
      {
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
      goto LABEL_56;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
    swift_release();
    v9[18] = v92;
    swift_retain();
    swift_release();
    v9[19] = v53;
    swift_release();
    swift_release();
    a5 = v9[2];
    if (a5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v83) {
        goto LABEL_60;
      }
    }
    else if (*(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_60:
      specialized RangeReplaceableCollection<>.popLast()();
      return v60;
    }
    __break(1u);
    goto LABEL_112;
  }
  unint64_t v55 = *v16;
  uint64_t v52 = v95;
  if (!(*v16 >> 62))
  {
    uint64_t v56 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v54 = v97;
    if (v56) {
      goto LABEL_43;
    }
LABEL_104:
    unint64_t v57 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_105;
  }
  swift_bridgeObjectRetain();
  uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v54 = v97;
  if (!v56) {
    goto LABEL_104;
  }
LABEL_43:
  unint64_t v57 = v56 - 1;
  if (__OFSUB__(v56, 1))
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if ((v55 & 0xC000000000000001) == 0)
  {
    if ((v57 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v57 < *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v50 = *(void *)(v55 + 8 * v57 + 32);
      swift_retain();
      goto LABEL_48;
    }
    __break(1u);
    goto LABEL_109;
  }
LABEL_106:
  uint64_t v50 = MEMORY[0x185303120](v57, v55);
LABEL_48:
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v50 + 32) == 3)
  {
    unint64_t v53 = v29;
    goto LABEL_50;
  }
  unint64_t result = swift_release();
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
  return result;
}

void static NumberFormatStyleConfiguration.Notation.compactName.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void *NSAllocateScannedUncollectable(size_t a1)
{
  unint64_t v2 = malloc_default_zone();

  return malloc_type_zone_calloc(v2, 1uLL, a1, 0xC2E5A2B2uLL);
}

uint64_t partial apply for closure #1 in NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  return closure #1 in NSNotificationCenter.Notifications.Iterator.next()(a1, v1);
}

NSData protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Data()
{
  return Data._bridgeToObjectiveC()();
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
  objc_msgSend(*(id *)(*(void *)v1 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
}

uint64_t IndexSet.init(integersIn:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndexesInRange_, result, a2 - result);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    unint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(unsigned char *)(result + 24) = 0;
    *a3 = result;
  }
  return result;
}

NSString *_NSFullMethodName(objc_class *a1, const char *a2)
{
  v10[1] = *(char **)MEMORY[0x1E4F143B8];
  id v4 = (objc_class *)objc_opt_class();
  v10[0] = 0;
  if (v4 == a1) {
    uint64_t v5 = 43;
  }
  else {
    uint64_t v5 = 45;
  }
  if (v4) {
    SEL Name = class_getName(v4);
  }
  else {
    SEL Name = "nil";
  }
  uint64_t v7 = sel_getName(a2);
  asprintf(v10, "%c[%s %s]", v5, Name, v7);
  if (!v10[0]) {
    return 0;
  }
  uint64_t v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  free(v10[0]);
  return v8;
}

NSString *_NSMethodExceptionProem(objc_class *a1, const char *a2)
{
  v10[1] = *(char **)MEMORY[0x1E4F143B8];
  id v4 = (objc_class *)objc_opt_class();
  v10[0] = 0;
  if (v4 == a1) {
    uint64_t v5 = 43;
  }
  else {
    uint64_t v5 = 45;
  }
  if (v4) {
    SEL Name = class_getName(v4);
  }
  else {
    SEL Name = "nil";
  }
  uint64_t v7 = sel_getName(a2);
  asprintf(v10, "*** %c[%s %s]", v5, Name, v7);
  if (!v10[0]) {
    return 0;
  }
  uint64_t v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  free(v10[0]);
  return v8;
}

void sub_181821BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IndexSet.init(integer:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndex_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(unsigned char *)(result + 24) = 0;
  *a2 = result;
  return result;
}

void sub_181822900(_Unwind_Exception *exception_object)
{
}

uint64_t _writeJSONObject(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v11 = 2 * a3;
    MEMORY[0x1F4188790](a1);
    id v10 = (char *)&v25 - ((v11 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v10, 2 * v5 + 2);
    memset(v10, 32, 2 * v5 + 2);
    LOBYTE(__src[0]) = 123;
    if (_appendBytes((char *)__src, 1uLL, a1, 123))
    {
      LOBYTE(__src[0]) = 10;
      if (_appendBytes((char *)__src, 1uLL, a1, 10))
      {
        uint64_t v8 = [a2 count];
        unint64_t v9 = v8;
        if (v8) {
          goto LABEL_8;
        }
        LOBYTE(__src[0]) = 10;
        if (_appendBytes((char *)__src, 1uLL, a1, 10))
        {
          if (!v5 || _appendBytes((char *)&v25 - ((v11 + 17) & 0xFFFFFFFFFFFFFFF0), 2 * v5, a1, v23))
          {
LABEL_37:
            LOBYTE(__src[0]) = 125;
            return _appendBytes((char *)__src, 1uLL, a1, 125);
          }
        }
      }
    }
    return 0;
  }
  LOBYTE(__src[0]) = 123;
  if (!_appendBytes((char *)__src, 1uLL, a1, 123)) {
    return 0;
  }
  uint64_t v8 = [a2 count];
  unint64_t v9 = v8;
  if (!v8) {
    goto LABEL_37;
  }
  id v10 = 0;
LABEL_8:
  __src[0] = 0;
  __src[1] = __src;
  __src[2] = 0x2020000000;
  __src[3] = 1;
  uint64_t v38 = 0;
  id v39 = &v38;
  uint64_t v40 = 0x2020000000;
  char v41 = 1;
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  unint64_t v29 = ___writeJSONObject_block_invoke;
  unint64_t v30 = &unk_1E51FB420;
  uint64_t v31 = a1;
  unint64_t v32 = &v38;
  id v35 = v10;
  uint64_t v36 = v5;
  uint64_t v33 = __src;
  uint64_t v34 = a4;
  unint64_t v37 = v9;
  if ((a4 & 2) != 0)
  {
    uint64_t v26 = v5;
    uint64_t v25 = (uint64_t)&v25;
    MEMORY[0x1F4188790](v8);
    uint64_t v12 = &v25 - 128;
    MEMORY[0x1F4188790](v13);
    long long v14 = &v25 - 128;
    MEMORY[0x1F4188790](v15);
    uint64_t v16 = &v25 - 128;
    if (v9 >= 0x81)
    {
      uint64_t v12 = (uint64_t *)malloc_type_malloc(8 * v9, 0x80040B8603338uLL);
      long long v14 = (uint64_t *)malloc_type_malloc(8 * v9, 0x80040B8603338uLL);
      uint64_t v16 = (uint64_t *)malloc_type_malloc(8 * v9, 0x100004000313F17uLL);
    }
    [a2 getObjects:v14 andKeys:v12 count:v9];
    uint64_t v17 = 0;
    do
    {
      if (([(id)v12[v17] isNSString] & 1) == 0)
      {
        if (v9 >= 0x81)
        {
          free(v12);
          free(v14);
          free(v16);
        }
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Invalid (non-string) key in JSON dictionary" userInfo:0]);
      }
      ++v17;
    }
    while (v9 != v17);
    uint64_t v18 = 0;
    do
    {
      v16[v18] = v18;
      ++v18;
    }
    while (v9 != v18);
    v27[5] = MEMORY[0x1E4F143A8];
    v27[6] = 3221225472;
    v27[7] = ___writeJSONObject_block_invoke_2;
    v27[8] = &__block_descriptor_40_e11_q24__0q8q16l;
    v27[9] = v12;
    CFSortIndexes();
    uint64_t v19 = 0;
    char v43 = 0;
    do
    {
      v29((uint64_t)v28, (CFStringRef)v12[v16[v19]], v14[v16[v19]], &v43);
      if (v43) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v9 - 1 == v19;
      }
      ++v19;
    }
    while (!v20);
    if (v9 >= 0x81)
    {
      free(v12);
      free(v14);
      free(v16);
    }
    uint64_t v5 = v26;
  }
  else
  {
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    unint64_t v27[2] = ___writeJSONObject_block_invoke_3;
    v27[3] = &unk_1E51FB468;
    void v27[4] = v28;
    [a2 enumerateKeysAndObjectsUsingBlock:v27];
  }
  if (*((unsigned char *)v39 + 24)
    && ((a4 & 1) == 0
     || (char v43 = 10, _appendBytes(&v43, 1uLL, a1, 10))
     && (!v5 || _appendBytes(v10, 2 * v5, a1, v22))))
  {
    char v43 = 125;
    uint64_t appended = _appendBytes(&v43, 1uLL, a1, 125);
  }
  else
  {
    uint64_t appended = 0;
  }
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(__src, 8);
  return appended;
}

void sub_181823488(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t ___writeJSONArray_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = result;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v7 = *(void *)(result + 32);
    char __src = 44;
    uint64_t result = _appendBytes(&__src, 1uLL, v7, 44);
    if ((result & 1) == 0) {
      *(unsigned char *)(*(void *)(*(void *)(v6 + 40) + 8) + 24) = 0;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(v6 + 40) + 8) + 24))
    {
      if (*(unsigned char *)(v6 + 48))
      {
        uint64_t v8 = *(void *)(v6 + 32);
        char v10 = 10;
        uint64_t result = _appendBytes(&v10, 1uLL, v8, 10);
        if ((result & 1) == 0) {
          *(unsigned char *)(*(void *)(*(void *)(v6 + 40) + 8) + 24) = 0;
        }
      }
    }
  }
  uint64_t v9 = *(void *)(v6 + 40);
  if (*(unsigned char *)(*(void *)(v9 + 8) + 24))
  {
    if (*(unsigned char *)(v6 + 48))
    {
      uint64_t result = _appendBytes(*(char **)(v6 + 56), 2 * *(void *)(v6 + 64) + 2, *(void *)(v6 + 32), 2 * *(unsigned char *)(v6 + 64));
      uint64_t v9 = *(void *)(v6 + 40);
      if ((result & 1) == 0)
      {
        *(unsigned char *)(*(void *)(v9 + 8) + 24) = 0;
        uint64_t v9 = *(void *)(v6 + 40);
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v9 + 8) + 24))
  {
    uint64_t result = _writeJSONValue(*(void *)(v6 + 32), a2, *(void *)(v6 + 64) + 1, *(void *)(v6 + 48));
    uint64_t v9 = *(void *)(v6 + 40);
    if ((result & 1) == 0)
    {
      *(unsigned char *)(*(void *)(v9 + 8) + 24) = 0;
      uint64_t v9 = *(void *)(v6 + 40);
    }
  }
  if (!*(unsigned char *)(*(void *)(v9 + 8) + 24)) {
    *a4 = 1;
  }
  return result;
}

uint64_t ___writeJSONObject_block_invoke(uint64_t result, CFStringRef theString, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = (uint64_t *)result;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(result + 40);
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24))
  {
    if (*(unsigned char *)(result + 56))
    {
      uint64_t result = _appendBytes(*(char **)(result + 64), 2 * *(void *)(result + 72) + 2, *(void *)(result + 32), 2 * *(unsigned char *)(result + 72));
      uint64_t v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(unsigned char *)(*(void *)(v8 + 8) + 24) = 0;
        uint64_t v8 = v7[5];
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24))
  {
    uint64_t result = _writeJSONString(v7[4], theString, v7[7]);
    uint64_t v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(unsigned char *)(*(void *)(v8 + 8) + 24) = 0;
      uint64_t v8 = v7[5];
    }
  }
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24))
  {
    if (v7[7])
    {
      uint64_t v9 = v7[4];
      char __src = 32;
      uint64_t result = _appendBytes(&__src, 1uLL, v9, 32);
      uint64_t v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(unsigned char *)(*(void *)(v8 + 8) + 24) = 0;
        uint64_t v8 = v7[5];
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24))
  {
    uint64_t v10 = v7[4];
    char v17 = 58;
    uint64_t result = _appendBytes(&v17, 1uLL, v10, 58);
    uint64_t v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(unsigned char *)(*(void *)(v8 + 8) + 24) = 0;
      uint64_t v8 = v7[5];
    }
  }
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24))
  {
    if (v7[7])
    {
      uint64_t v11 = v7[4];
      char v16 = 32;
      uint64_t result = _appendBytes(&v16, 1uLL, v11, 32);
      uint64_t v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(unsigned char *)(*(void *)(v8 + 8) + 24) = 0;
        uint64_t v8 = v7[5];
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24))
  {
    uint64_t result = _writeJSONValue(v7[4], a3, v7[9] + 1, v7[7]);
    uint64_t v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(unsigned char *)(*(void *)(v8 + 8) + 24) = 0;
      uint64_t v8 = v7[5];
    }
  }
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24) && *(void *)(*(void *)(v7[6] + 8) + 24) < (unint64_t)v7[10])
  {
    uint64_t v12 = v7[4];
    char v15 = 44;
    uint64_t result = _appendBytes(&v15, 1uLL, v12, 44);
    if ((result & 1) == 0) {
      *(unsigned char *)(*(void *)(v7[5] + 8) + 24) = 0;
    }
    uint64_t v8 = v7[5];
    if (*(unsigned char *)(*(void *)(v8 + 8) + 24))
    {
      if (v7[7])
      {
        uint64_t v13 = v7[4];
        char v14 = 10;
        uint64_t result = _appendBytes(&v14, 1uLL, v13, 10);
        uint64_t v8 = v7[5];
        if ((result & 1) == 0)
        {
          *(unsigned char *)(*(void *)(v8 + 8) + 24) = 0;
          uint64_t v8 = v7[5];
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v8 + 8) + 24)) {
    ++*(void *)(*(void *)(v7[6] + 8) + 24);
  }
  else {
    *a4 = 1;
  }
  return result;
}

uint64_t _appendBytes@<X0>(char *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, char a4@<W8>)
{
  size_t v4 = __n;
  int v7 = *(_DWORD *)(a3 + 16);
  if (v7 == 1)
  {
    size_t v12 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a3 + 40);
    if (v11 + __n >= v12)
    {
      if (v11 + __n <= 2 * v12) {
        uint64_t v14 = 2 * v12;
      }
      else {
        uint64_t v14 = v11 + __n;
      }
      uint64_t v13 = MEMORY[0x185306D80](*(void *)(a3 + 24), v14, 573190747, 0);
      *(void *)(a3 + 24) = v13;
      *(void *)(a3 + 32) = v14;
      uint64_t v11 = *(void *)(a3 + 40);
    }
    else
    {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    memcpy((void *)(v13 + v11), __src, v4);
    *(void *)(a3 + 40) += v4;
    goto LABEL_18;
  }
  if (v7 != 2) {
    return a4 & 1;
  }
  if (!__n)
  {
LABEL_18:
    a4 = 1;
    return a4 & 1;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  while (1)
  {
    uint64_t v10 = [*(id *)(a3 + 8) write:&__src[v8] maxLength:v4];
    if (v10 < 0) {
      break;
    }
    if (v10)
    {
      v8 += v10;
      *(void *)(a3 + 72) += v10;
      a4 = 1;
      v4 -= v10;
      if (!v4) {
        return a4 & 1;
      }
    }
    else
    {
      if (++v9 >= 0xBu)
      {
        uint64_t v15 = MEMORY[0x1E4F1CC08];
        uint64_t v16 = 640;
        goto LABEL_21;
      }
      pthread_yield_np();
    }
  }
  uint64_t v15 = MEMORY[0x1E4F1CC08];
  uint64_t v16 = 512;
LABEL_21:
  objc_msgSend((id)a3, "setFailure:", +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", v16, v15));
  a4 = 0;
  return a4 & 1;
}

uint64_t _writeJSONString(uint64_t a1, CFStringRef theString, char a3)
{
  if (*(_DWORD *)(a1 + 16) == 1) {
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v6 = 0;
  }
  if ((_convertJSONString((void *)a1, theString, a3, 1) & 1) != 0
    || (*(void *)(a1 + 40) = v6, (_convertJSONString((void *)a1, theString, a3, 0) & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == 2)
    {
      uint64_t result = _appendBytes(*(char **)(a1 + 24), *(void *)(a1 + 40), a1, 2);
      if (!result) {
        return result;
      }
      *(void *)(a1 + 40) = 0;
    }
    return 1;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1C9E8];
    int v9 = +[NSString stringWithFormat:@"The string %p failed to convert to UTF8", theString];
    objc_msgSend((id)a1, "setFailure:", +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3852, objc_msgSend(v8, "dictionaryWithObjectsAndKeys:", v9, *MEMORY[0x1E4F1D138], 0)));
    return 0;
  }
}

uint64_t _convertJSONString(void *a1, CFStringRef theString, char a3, int a4)
{
  usedBufLen[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(theString);
  if (a4) {
    CFStringEncoding v9 = 0;
  }
  else {
    CFStringEncoding v9 = 134217984;
  }
  CFStringRef theStringa = theString;
  CFStringEncoding encoding = v9;
  CStringPtr = CFStringGetCStringPtr(theString, v9);
  uint64_t v11 = (UInt8 *)CStringPtr;
  if (!CStringPtr)
  {
    if (a1[8] < (unint64_t)Length) {
      -[_NSJSONWriter resizeTemporaryBuffer:](a1, Length);
    }
    uint64_t v11 = (UInt8 *)a1[7];
  }
  unint64_t v13 = a1[4];
  uint64_t v12 = a1[5];
  unint64_t v14 = v12 + 6 * Length + 3;
  if (v14 >= v13)
  {
    if (v14 <= 2 * v13) {
      uint64_t v16 = 2 * v13;
    }
    else {
      uint64_t v16 = v12 + 6 * Length + 3;
    }
    uint64_t v15 = MEMORY[0x185306D80](a1[3], v16, 573190747, 0);
    a1[3] = v15;
    a1[4] = v16;
    uint64_t v12 = a1[5];
  }
  else
  {
    uint64_t v15 = a1[3];
  }
  a1[5] = v12 + 1;
  *(unsigned char *)(v15 + v12) = 34;
  if (Length < 1)
  {
LABEL_45:
    uint64_t v42 = a1[3];
    uint64_t v43 = a1[5];
    a1[5] = v43 + 1;
    *(unsigned char *)(v42 + v43) = 34;
    return 1;
  }
  CFIndex v17 = 0;
  CFIndex v18 = Length;
  while (1)
  {
    usedBufLen[0] = 0;
    if (CStringPtr)
    {
      CFIndex v18 = 0;
      usedBufLen[0] = Length;
LABEL_20:
      uint64_t v21 = 0;
      while (1)
      {
        if (a4 && (char)v11[v21] < 0) {
          return 0;
        }
        unsigned int v22 = v11[v21];
        if (v22 == 92)
        {
          uint64_t v27 = a1[3];
          uint64_t v28 = a1[5];
          a1[5] = v28 + 1;
          *(unsigned char *)(v27 + v28) = 92;
          uint64_t v29 = a1[3];
          uint64_t v30 = a1[5];
          a1[5] = v30 + 1;
          *(unsigned char *)(v29 + v30) = 92;
        }
        else if (v22 == 34)
        {
          uint64_t v23 = a1[3];
          uint64_t v24 = a1[5];
          a1[5] = v24 + 1;
          *(unsigned char *)(v23 + v24) = 92;
          uint64_t v25 = a1[3];
          uint64_t v26 = a1[5];
          a1[5] = v26 + 1;
          *(unsigned char *)(v25 + v26) = 34;
        }
        else
        {
          if ((a3 & 8) == 0 || v22 != 47)
          {
            if (v22 != 47)
            {
              uint64_t v31 = a1[3];
              uint64_t v32 = a1[5];
              a1[5] = v32 + 1;
              if (v22 > 0x1F)
              {
                *(unsigned char *)(v31 + v32) = v22;
              }
              else
              {
                *(unsigned char *)(v31 + v32) = 92;
                switch(v22)
                {
                  case 8u:
                    uint64_t v33 = a1[3];
                    uint64_t v34 = a1[5];
                    a1[5] = v34 + 1;
                    char v35 = 98;
                    goto LABEL_43;
                  case 9u:
                    uint64_t v33 = a1[3];
                    uint64_t v34 = a1[5];
                    a1[5] = v34 + 1;
                    char v35 = 116;
                    goto LABEL_43;
                  case 0xAu:
                    uint64_t v33 = a1[3];
                    uint64_t v34 = a1[5];
                    a1[5] = v34 + 1;
                    char v35 = 110;
                    goto LABEL_43;
                  case 0xCu:
                    uint64_t v33 = a1[3];
                    uint64_t v34 = a1[5];
                    a1[5] = v34 + 1;
                    char v35 = 102;
                    goto LABEL_43;
                  case 0xDu:
                    uint64_t v33 = a1[3];
                    uint64_t v34 = a1[5];
                    a1[5] = v34 + 1;
                    char v35 = 114;
LABEL_43:
                    *(unsigned char *)(v33 + v34) = v35;
                    break;
                  default:
                    uint64_t v40 = a1[3];
                    uint64_t v41 = a1[5];
                    a1[5] = v41 + 1;
                    *(unsigned char *)(v40 + v41) = 117;
                    CFIndex v45 = v17;
                    snprintf_l((char *)(a1[3] + a1[5]), 5uLL, 0, "%04x", v22);
                    CFIndex v17 = v45;
                    a1[5] += 4;
                    break;
                }
              }
              goto LABEL_35;
            }
            uint64_t v36 = a1[3];
            uint64_t v37 = a1[5];
            a1[5] = v37 + 1;
            *(unsigned char *)(v36 + v37) = 92;
          }
          uint64_t v38 = a1[3];
          uint64_t v39 = a1[5];
          a1[5] = v39 + 1;
          *(unsigned char *)(v38 + v39) = 47;
        }
LABEL_35:
        if ((unint64_t)++v21 >= usedBufLen[0]) {
          goto LABEL_44;
        }
      }
    }
    CFIndex v19 = v17;
    v49.NSUInteger location = v17;
    v49.length = v18;
    CFIndex Bytes = CFStringGetBytes(theStringa, v49, encoding, 0, 0, v11, a1[8], usedBufLen);
    if (!Bytes) {
      return 0;
    }
    v18 -= Bytes;
    CFIndex v17 = Bytes + v19;
    if (usedBufLen[0]) {
      goto LABEL_20;
    }
LABEL_44:
    if (v18 <= 0) {
      goto LABEL_45;
    }
  }
}

uint64_t _writeJSONValue(void *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (_NSIsNSString())
  {
    return _writeJSONString((uint64_t)a1, a2, a4);
  }
  if (objc_opt_isKindOfClass())
  {
    __src[0] = 0;
    __src[1] = 0;
    int v19 = 0;
    if (!a2 || ([(__CFString *)a2 decimalValue], (__src[0] & 0x1F00) != 0x1000))
    {
      CFStringEncoding v9 = (void *)[(__CFString *)a2 stringValue];
      return objc_msgSend(a1, "appendString:range:", v9, 0, objc_msgSend(v9, "length"));
    }
    uint64_t v15 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v16 = *MEMORY[0x1E4F1C3C8];
    CFIndex v17 = (NSString *)@"NaN number in JSON write";
LABEL_32:
    objc_exception_throw((id)[v15 exceptionWithName:v16 reason:v17 userInfo:0]);
  }
  if (_NSIsNSNumber())
  {
    CFTypeID v10 = CFGetTypeID(a2);
    if (v10 == CFBooleanGetTypeID())
    {
      if ([(__CFString *)a2 BOOLValue])
      {
        char v11 = v20;
        uint64_t v12 = (char *)&_writeJSONBoolean_trueData;
        uint64_t v13 = (uint64_t)a1;
        size_t v14 = 4;
      }
      else
      {
        char v11 = v20;
        uint64_t v12 = "false";
        uint64_t v13 = (uint64_t)a1;
        size_t v14 = 5;
      }
      return _appendBytes(v12, v14, v13, v11);
    }
    else
    {
      return _writeJSONNumber((uint64_t)a1, a2);
    }
  }
  else if (_NSIsNSDictionary())
  {
    return _writeJSONObject((uint64_t)a1, a2, a3, a4);
  }
  else
  {
    if (!_NSIsNSArray())
    {
      if (objc_opt_isKindOfClass())
      {
        LODWORD(__src[0]) = 1819047278;
        return _appendBytes((char *)__src, 4uLL, (uint64_t)a1, 110);
      }
      CFIndex v17 = +[NSString stringWithFormat:@"Invalid type in JSON write (%@)", objc_opt_class()];
      uint64_t v15 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v16 = *MEMORY[0x1E4F1C3C8];
      goto LABEL_32;
    }
    return _writeJSONArray((uint64_t)a1, a2, a3, a4);
  }
}

uint64_t _writeJSONNumber(uint64_t a1, id a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  Class Class = (__objc2_class *)object_getClass(a2);
  if (Class != _NSJSONRoundTrippingNumber)
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (v5 == 2)
    {
      MEMORY[0x1F4188790](Class);
      uint64_t v13 = (char *)&v23;
      long long v23 = 0u;
      long long v24 = 0u;
    }
    else if (v5 == 1)
    {
      unint64_t v7 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      if (v6 + 33 >= v7)
      {
        if (v6 + 33 <= 2 * v7) {
          uint64_t v14 = 2 * v7;
        }
        else {
          uint64_t v14 = v6 + 33;
        }
        uint64_t v8 = MEMORY[0x185306D80](*(void *)(a1 + 24), v14, 573190747, 0);
        *(void *)(a1 + 24) = v8;
        *(void *)(a1 + 32) = v14;
        uint64_t v6 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 24);
      }
      uint64_t v13 = (char *)(v8 + v6);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v15 = *(char *)[a2 objCType];
    if (v15 > 80)
    {
      switch(v15)
      {
        case 'c':
          goto LABEL_28;
        case 'd':
        case 'f':
          [a2 doubleValue];
          if (fabs(v16) != INFINITY)
          {
            [a2 doubleValue];
            unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%0.*g");
            break;
          }
          uint64_t v20 = (void *)MEMORY[0x1E4F1CA00];
          uint64_t v21 = *MEMORY[0x1E4F1C3C8];
          unsigned int v22 = (NSString *)@"Invalid number value (infinite) in JSON write";
          goto LABEL_53;
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
          goto LABEL_52;
        case 'i':
          *(void *)&long long v24 = [a2 intValue];
          goto LABEL_35;
        case 'l':
          [a2 longValue];
          unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%ld");
          break;
        case 'q':
          [a2 longLongValue];
          unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%lld");
          break;
        case 's':
          [a2 shortValue];
          unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%hi");
          break;
        default:
          if (v15 != 81)
          {
            if (v15 == 83)
            {
              [a2 unsignedShortValue];
              unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%hu");
              break;
            }
            goto LABEL_52;
          }
          [a2 unsignedLongLongValue];
          unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%llu");
          break;
      }
LABEL_40:
      if ((int)v17 < 1) {
        return 0;
      }
      if (v17 < 0x20)
      {
        int v19 = *(_DWORD *)(a1 + 16);
        if (v19 == 2)
        {
          return _appendBytes(v13, v17, a1, 2);
        }
        else
        {
          if (v19 == 1) {
            *(void *)(a1 + 40) += v17;
          }
          return 1;
        }
      }
      else
      {
        CFIndex v18 = (void *)[a2 stringValue];
        return objc_msgSend((id)a1, "appendString:range:", v18, 0, objc_msgSend(v18, "length"));
      }
    }
    if (v15 > 72)
    {
      if (v15 == 73)
      {
        *(void *)&long long v24 = [a2 unsignedIntValue];
        goto LABEL_33;
      }
      if (v15 == 76)
      {
        [a2 unsignedLongValue];
        unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%lu");
        goto LABEL_40;
      }
    }
    else
    {
      if (v15 == 66)
      {
LABEL_28:
        *(void *)&long long v24 = (int)[a2 charValue];
LABEL_35:
        unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%d");
        goto LABEL_40;
      }
      if (v15 == 67)
      {
        *(void *)&long long v24 = [a2 unsignedCharValue];
LABEL_33:
        unsigned int v17 = snprintf_l(v13, 0x20uLL, 0, "%u");
        goto LABEL_40;
      }
    }
LABEL_52:
    *(void *)&long long v24 = *(char *)[a2 objCType];
    unsigned int v22 = +[NSString stringWithFormat:@"Invalid number type in JSON write (%c)", (void)v24];
    uint64_t v20 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v21 = *MEMORY[0x1E4F1C3C8];
LABEL_53:
    objc_exception_throw((id)[v20 exceptionWithName:v21 reason:v22 userInfo:0]);
  }
  CFStringEncoding v9 = (const char *)objc_msgSend((id)objc_msgSend(a2, "stringValue"), "UTF8String");
  if (!v9)
  {
    qword_1E8EDF350 = (uint64_t)"Unable to allocate UTF-8 representation of JSON number.";
    __break(1u);
    uint64_t v20 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v21 = *MEMORY[0x1E4F1C3C8];
    unsigned int v22 = (NSString *)@"Invalid number value (NaN) in JSON write";
    goto LABEL_53;
  }
  CFTypeID v10 = (char *)v9;
  size_t v11 = strlen(v9);

  return _appendBytes(v10, v11, a1, v25);
}

uint64_t _writeJSONArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v8 = (char *)&v14[-1] - ((v9 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, 2 * a3 + 2);
    memset(v8, 32, 2 * a3 + 2);
    LOBYTE(__src) = 91;
    if (_appendBytes((char *)&__src, 1uLL, a1, 91))
    {
      LOBYTE(__src) = 10;
      if (_appendBytes((char *)&__src, 1uLL, a1, 10)) {
        goto LABEL_6;
      }
    }
    return 0;
  }
  LOBYTE(__src) = 91;
  if (!_appendBytes((char *)&__src, 1uLL, a1, 91)) {
    return 0;
  }
  uint64_t v8 = 0;
LABEL_6:
  uint64_t __src = 0;
  p_src = &__src;
  uint64_t v17 = 0x2020000000;
  char v18 = 1;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = ___writeJSONArray_block_invoke;
  void v14[3] = &unk_1E51FB490;
  v14[4] = a1;
  v14[5] = &__src;
  v14[6] = a4;
  v14[7] = v8;
  v14[8] = a3;
  [a2 enumerateObjectsUsingBlock:v14];
  if (*((unsigned char *)p_src + 24)
    && ((a4 & 1) == 0
     || (char v19 = 10, _appendBytes(&v19, 1uLL, a1, 10))
     && (!a3 || _appendBytes(v8, 2 * a3, a1, v11))))
  {
    char v19 = 93;
    uint64_t appended = _appendBytes(&v19, 1uLL, a1, 93);
  }
  else
  {
    uint64_t appended = 0;
  }
  _Block_object_dispose(&__src, 8);
  return appended;
}

void sub_1818248AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_181824C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_181824E80(_Unwind_Exception *exception_object)
{
}

void sub_181824FE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 56), 8);
  _Unwind_Resume(a1);
}

uint64_t ___getStringLength_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  return 1;
}

uint64_t ___getStringLength_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  return 1;
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return +[NSString stringWithFormat:@"{%lu, %lu}", range.location, range.length];
}

uint64_t type metadata instantiation function for Measurement.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

NSSize NSSizeFromString(NSString *aString)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  double v3 = 0.0;
  double v4 = 0.0;
  parseFloats(aString, 2, (uint64_t)&v3);
  double v1 = v3;
  double v2 = v4;
  result.height = v2;
  result.width = v1;
  return result;
}

uint64_t _CreateComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  v9[0] = a1;
  uint64_t v6 = *MEMORY[0x1E4F1C380];
  v8[0] = *MEMORY[0x1E4F1C390];
  v8[1] = v6;
  v9[1] = +[NSNumber numberWithBool:a4];
  void v8[2] = *MEMORY[0x1E4F1C388];
  size_t v9[2] = +[NSValue valueWithRange:](NSValue, "valueWithRange:", a2, a3);
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:3];
}

NSRect NSRectFromString(NSString *aString)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  parseFloats(aString, 4, (uint64_t)&v5);
  double v2 = *((double *)&v5 + 1);
  double v1 = *(double *)&v5;
  double v4 = v6[1];
  double v3 = v6[0];
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

NSValue *newDecodedValue(void *a1, NSZone *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if ([a1 allowsKeyedCoding]
    && [a1 containsValueForKey:@"NS.special"])
  {
    int v4 = [a1 decodeIntForKey:@"NS.special"];
    switch(v4)
    {
      case 1:
        [a1 decodePointForKey:@"NS.pointval"];
        long long v5 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:");
        goto LABEL_17;
      case 2:
        [a1 decodeSizeForKey:@"NS.sizeval"];
        long long v5 = +[NSValue valueWithSize:](NSValue, "valueWithSize:");
        goto LABEL_17;
      case 3:
        [a1 decodeRectForKey:@"NS.rectval"];
        long long v5 = +[NSValue valueWithRect:](NSValue, "valueWithRect:");
        goto LABEL_17;
      case 4:
        uint64_t v9 = objc_msgSend((id)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), @"NS.rangeval.length"), "unsignedIntegerValue");
        long long v5 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", objc_msgSend((id)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), @"NS.rangeval.location"), "unsignedIntegerValue"), v9);
LABEL_17:
        return v5;
      case 10:
        [a1 decodeDoubleForKey:@"NS.atval.a"];
        v35.f64[0] = v11;
        [a1 decodeDoubleForKey:@"NS.atval.b"];
        v35.f64[1] = v12;
        [a1 decodeDoubleForKey:@"NS.atval.c"];
        uint64_t v36 = v13;
        [a1 decodeDoubleForKey:@"NS.atval.d"];
        uint64_t v37 = v14;
        [a1 decodeDoubleForKey:@"NS.atval.tx"];
        uint64_t v38 = v15;
        [a1 decodeDoubleForKey:@"NS.atval.ty"];
        uint64_t v39 = v16;
        uint64_t v17 = _NSNewValue(&v35, "{CGAffineTransform=dddddd}", 0);
        goto LABEL_25;
      case 11:
        [a1 decodeDoubleForKey:@"NS.edgeval.top"];
        v35.f64[0] = v18;
        [a1 decodeDoubleForKey:@"NS.edgeval.left"];
        v35.f64[1] = v19;
        [a1 decodeDoubleForKey:@"NS.edgeval.bottom"];
        uint64_t v36 = v20;
        [a1 decodeDoubleForKey:@"NS.edgeval.right"];
        uint64_t v37 = v21;
        uint64_t v17 = _NSNewValue(&v35, "{UIEdgeInsets=dddd}", 0);
        goto LABEL_25;
      case 12:
        [a1 decodeDoubleForKey:@"NS.edgeval.top"];
        v35.f64[0] = v22;
        [a1 decodeDoubleForKey:@"NS.edgeval.left"];
        v35.f64[1] = v23;
        [a1 decodeDoubleForKey:@"NS.edgeval.bottom"];
        uint64_t v36 = v24;
        [a1 decodeDoubleForKey:@"NS.edgeval.right"];
        uint64_t v37 = v25;
        uint64_t v17 = _NSNewValue(&v35, "{NSEdgeInsets=dddd}", 0);
        goto LABEL_25;
      case 13:
        [a1 decodeDoubleForKey:@"NS.offset.h"];
        v35.f64[0] = v26;
        [a1 decodeDoubleForKey:@"NS.offset.v"];
        v35.f64[1] = v27;
        uint64_t v17 = _NSNewValue(&v35, "{UIOffset=dd}", 0);
        goto LABEL_25;
      case 14:
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.top"];
        v35.f64[0] = v28;
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.leading"];
        v35.f64[1] = v29;
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.bottom"];
        uint64_t v36 = v30;
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.trailing"];
        uint64_t v37 = v31;
        uint64_t v17 = _NSNewValue(&v35, "{NSDirectionalEdgeInsets=dddd}", 0);
LABEL_25:
        uint64_t v8 = v17;
        break;
      default:
        uint64_t v32 = +[NSString stringWithFormat:@"cannot decode special type '%lu'", v4];
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v32 userInfo:0]);
    }
    return (NSValue *)v8;
  }
  bzero(&v35, 0x400uLL);
  typePtr = 0;
  [a1 decodeValueOfObjCType:"*" at:&typePtr size:8];
  if (!typePtr || !*typePtr) {
    return 0;
  }
  NSUInteger sizep = 0;
  NSGetSizeAndAlignment(typePtr, &sizep, 0);
  NSUInteger v6 = sizep;
  if (sizep < 0x401)
  {
    uint64_t v7 = &v35;
  }
  else
  {
    uint64_t v7 = (float64x2_t *)malloc_type_calloc(sizep, 1uLL, 0x2D55A75uLL);
    if (!v7) {
      return 0;
    }
  }
  [a1 decodeValueOfObjCType:typePtr at:v7 size:v6];
  uint64_t v8 = _NSNewValue(v7, typePtr, a2);
  if (v7 != &v35) {
    free(v7);
  }
  free(typePtr);
  return (NSValue *)v8;
}

void sub_1818262A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x181825EF0);
  }
  _Unwind_Resume(a1);
}

void parseFloats(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v6 = (uint64_t)v14;
    if (([a1 getCString:v14 maxLength:100 encoding:4] & 1) == 0) {
      uint64_t v6 = [a1 UTF8String];
    }
    if (a2 && v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        uint64_t v13 = 0;
        unsigned int v9 = v8[v6];
        if (v8[v6]) {
          BOOL v10 = v9 - 48 >= 0xA;
        }
        else {
          BOOL v10 = 0;
        }
        if (v10)
        {
          while (v9 > 0x2E || ((1 << v9) & 0x680000000000) == 0)
          {
            float64_t v11 = v8 + 1;
            unsigned int v9 = v8[v6 + 1];
            if (v8[v6 + 1]) {
              BOOL v12 = v9 - 48 >= 0xA;
            }
            else {
              BOOL v12 = 0;
            }
            ++v8;
            if (!v12) {
              goto LABEL_12;
            }
          }
        }
        float64_t v11 = v8;
LABEL_12:
        *(double *)(a3 + 8 * v7) = strtod_l(&v11[v6], &v13, 0);
        uint64_t v8 = &v13[-v6];
        ++v7;
      }
      while (v7 != a2);
    }
  }
}

NSValue *_NSGetValueWithMethod(void *a1, uint64_t a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  int v4 = (void *)[a1 methodSignatureForSelector:a2];
  long long v5 = (void *)[MEMORY[0x1E4F1CA18] invocationWithMethodSignature:v4];
  [v5 setTarget:a1];
  [v5 setSelector:a2];
  [v5 invoke];
  uint64_t v6 = [v4 methodReturnLength];
  double v7 = MEMORY[0x1F4188790](v6);
  unsigned int v9 = (char *)v11 - v8;
  objc_msgSend(v5, "getReturnValue:", (char *)v11 - v8, v7);
  return +[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", v9, [v4 methodReturnType]);
}

void sub_181826668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1818268B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1818269BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForGenericKey(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  unsigned int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  v7[0] = 0;
  v7[1] = v7;
  void v7[2] = 0x2020000000;
  v7[3] = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___NSXPCSerializationCreateObjectInDictionaryForGenericKey_block_invoke;
  double v6[3] = &unk_1E51FEE70;
  v6[4] = v7;
  v6[5] = &v8;
  v6[6] = a3;
  v6[7] = a4;
  if (_iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v6)) {
    BOOL v4 = *((unsigned char *)v9 + 24) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1818276C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 56), 8);
  _Unwind_Resume(a1);
}

void sub_1818282A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 184), 8);
  _Unwind_Resume(a1);
}

void *initializeBufferWithCopyOfBuffer for ScopeDescription(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

Foundation::Date __swiftcall Date.init()()
{
  double v1 = v0;
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  __tp.tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result._time = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *double v1 = result._time;
  return result;
}

uint64_t _NSXPCDistantObjectSimpleMessageSend4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11 = a1;
  [v11[1] _sendSelector:a2 withProxy:v11 arg1:a3 arg2:a4 arg3:a5 arg4:a6];

  return 0;
}

void sub_1818286AC(_Unwind_Exception *a1)
{
}

void sub_1818286CC(void *a1)
{
}

uint64_t _NSXPCDistantObjectSimpleMessageSend0(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  [v3[1] _sendSelector:a2 withProxy:v3];

  return 0;
}

void sub_1818287F8(_Unwind_Exception *a1)
{
}

void sub_181828818(void *a1)
{
}

uint64_t _NSXPCDistantObjectSimpleMessageSend1(void *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = a1;
  uint64_t v6 = v5;
  if (v5) {
    [v5[1] _sendSelector:a2 withProxy:v5 arg1:a3];
  }

  return 0;
}

void sub_181828908(void *a1)
{
}

void sub_181828914(_Unwind_Exception *a1)
{
}

uint64_t _NSXPCDistantObjectSimpleMessageSend2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = a1;
  uint64_t v8 = v7;
  if (v7) {
    [v7[1] _sendSelector:a2 withProxy:v7 arg1:a3 arg2:a4];
  }

  return 0;
}

void sub_181828B08(void *a1)
{
}

void sub_181828B14(_Unwind_Exception *a1)
{
}

uint64_t methodSignatureForSelectorInProtocol(SEL aSel, Protocol *p)
{
  if (!aSel) {
    return 0;
  }
  if (!p) {
    return 0;
  }
  objc_method_description MethodDescription = protocol_getMethodDescription(p, aSel, 1, 1);
  types = MethodDescription.types;
  if (!MethodDescription.name)
  {
    objc_method_description v6 = protocol_getMethodDescription(p, aSel, 0, 1);
    types = v6.types;
    if (!v6.name) {
      return 0;
    }
  }
  double v7 = (void *)MEMORY[0x1E4F1CA38];

  return [v7 signatureWithObjCTypes:types];
}

CFTypeRef _NSDescriptionWithStringProxyFunc(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5)
{
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a5) {
      *a5 = 0;
    }
    return 0;
  }
  if (a5) {
    *a5 = 1;
  }
  if (!a4) {
    return 0;
  }
  uint64_t v10 = (const void *)[a1 _dynamicContextEvaluation:a2 patternString:a3];
  if (!v10) {
    return 0;
  }

  return CFRetain(v10);
}

void sub_181829878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSFCClaimsLog()
{
  if (qword_1EB1EDDD0 != -1) {
    dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
  }
  return qword_1EB1EDD38;
}

uint64_t _NSFCProcessMonitorLog()
{
  if (qword_1EB1EDDD0 != -1) {
    dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
  }
  return qword_1EB1EDD50;
}

void PredicateExpressions.Variable.key.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

ValueMetadata *type metadata accessor for URLComponents()
{
  return &type metadata for URLComponents;
}

uint64_t static Locale.LanguageCode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _JSONKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

NSHashTable *__cdecl NSCreateHashTable(NSHashTableCallBacks *callBacks, NSUInteger capacity)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)&callBacks->retain;
  *(_OWORD *)&v5.hash = *(_OWORD *)&callBacks->hash;
  *(_OWORD *)&v5.retain = v3;
  v5.describe = callBacks->describe;
  return NSCreateHashTableWithZone(&v5, capacity, v2);
}

NSHashTable *__cdecl NSCreateHashTableWithZone(NSHashTableCallBacks *callBacks, NSUInteger capacity, NSZone *zone)
{
  uint64_t v4 = (objc_class *)self;
  NSHashTableCallBacks v5 = (NSZone *)malloc_default_zone();
  uint64_t v6 = (char *)NSAllocateObject(v4, 0, v5);
  describe = callBacks->describe;
  long long v8 = *(_OWORD *)&callBacks->retain;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)&callBacks->hash;
  *(_OWORD *)(v6 + 24) = v8;
  *((void *)v6 + 5) = describe;
  Foundation::Date result = (NSHashTable *)malloc_type_malloc(0x10uLL, 0x80040B8603338uLL);
  if (result)
  {
    result->super.Class isa = (Class)__NSHashTableCallback;
    result[1].super.Class isa = (Class)v6;
    if (*(_OWORD *)&callBacks->retain == 0) {
      unint64_t v10 = 0x2000;
    }
    else {
      unint64_t v10 = 8704;
    }
    *((void *)v6 + 6) = CFBasicHashCreate(*MEMORY[0x1E4F1CFB0], v10, (uint64_t)result);
    return (NSHashTable *)v6;
  }
  else
  {
    qword_1E8EDF350 = (uint64_t)"unable to allocate space for callbacks";
    __break(1u);
  }
  return result;
}

void sub_18182CDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3)
{
  NSHashTableCallBacks v5 = *(uint64_t (**)(void **, id))(a1 + 32);
  swift_retain();
  URL.init(reference:)(a2, &v9);
  uint64_t v6 = v9;
  id v7 = a3;
  LOBYTE(a2) = v5(&v9, v7);

  swift_release();
  swift_release();
  swift_release();
  return a2 & 1;
}

uint64_t closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  if (a3)
  {
    uint64_t v7 = *a1;
    long long v8 = *(_OWORD *)(a1 + 1);
    swift_retain();
    char v5 = a3(&v7, a2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)a3);
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t partial apply for closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 16));
}

unint64_t CFBasicHashAddValue(unint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  uint64_t v4 = *(void *)(result + 16);
  if ((v4 & 0x3F0000) != 0)
  {
    int v5 = v4 & 3;
    switch(v5)
    {
      case 3:
        Foundation::Date result = ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)v11);
        break;
      case 2:
        Foundation::Date result = ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)v11);
        break;
      case 1:
        Foundation::Date result = ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)v11);
        break;
      default:
LABEL_15:
        __break(1u);
        return result;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)(result + 16);
    *(void *)char v11 = -1;
    *(void *)&_OWORD v11[8] = (v6 >> 32) & 0xFFFFFF0000000000;
    *(void *)&v11[16] = *(void *)&v11[8];
    memset(&v11[24], 0, 32);
  }
  if (*(void *)&v11[40])
  {
    unint64_t v7 = *(void *)(v3 + 16);
    *(_WORD *)(v3 + 30) = HIWORD(*(void *)(v3 + 24)) + 1;
    if ((v7 & 0x380) != 0)
    {
      uint64_t v8 = (v7 >> 7) & 7;
      if (v8)
      {
        ++*(void *)(*(void *)(v3 + 8 * v8 + 40) + 8 * *(void *)v11);
        return result;
      }
      goto LABEL_15;
    }
  }
  else
  {
    v9[0] = *(_OWORD *)v11;
    v9[1] = *(_OWORD *)&v11[16];
    size_t v9[2] = *(unint64_t *)&v11[32];
    uint64_t v10 = *(void *)&v11[48];
    return __CFBasicHashAddValue(v3, (uint64_t)v9, a2);
  }
  return result;
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "void NSMapInsert(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  }

  [(NSMapTable *)table setObject:value forKey:key];
}

uint64_t CFBasicHashSetValue(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  uint64_t v4 = *(void *)(result + 16);
  if ((v4 & 0x3F0000) != 0)
  {
    int v5 = v4 & 3;
    switch(v5)
    {
      case 3:
        ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)v11);
        break;
      case 2:
        ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)v11);
        break;
      case 1:
        ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)v11);
        break;
      default:
        __break(1u);
        return result;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)(result + 16);
    *(void *)char v11 = -1;
    *(void *)&_OWORD v11[8] = (v6 >> 32) & 0xFFFFFF0000000000;
    *(void *)&v11[16] = *(void *)&v11[8];
    memset(&v11[24], 0, 32);
  }
  if (*(void *)&v11[40])
  {
    long long v7 = *(_OWORD *)v11;
    long long v8 = *(_OWORD *)&v11[16];
    long long v9 = *(_OWORD *)&v11[32];
    uint64_t v10 = *(void *)&v11[48];
    return __CFBasicHashReplaceValue(v3, &v7, a2);
  }
  else
  {
    long long v7 = *(_OWORD *)v11;
    long long v8 = *(_OWORD *)&v11[16];
    long long v9 = *(unint64_t *)&v11[32];
    uint64_t v10 = *(void *)&v11[48];
    return __CFBasicHashAddValue(v3, (uint64_t)&v7, a2);
  }
}

uint64_t CFBasicHashRemoveValue(uint64_t a1, unint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  memset(v37, 0, sizeof(v37));
  uint64_t v3 = *(void *)(a1 + 16);
  if ((v3 & 0x3F0000) != 0)
  {
    int v4 = v3 & 3;
    switch(v4)
    {
      case 3:
        ___CFBasicHashFindBucket3(a1, a2, 0, (unint64_t *)v37);
        break;
      case 2:
        ___CFBasicHashFindBucket2(a1, a2, 0, (unint64_t *)v37);
        break;
      case 1:
        ___CFBasicHashFindBucket1(a1, a2, 0, (unint64_t *)v37);
        break;
      default:
        goto LABEL_49;
    }
  }
  else
  {
    *(void *)uint64_t v37 = -1;
    memset(&v37[24], 0, 32);
  }
  uint64_t v5 = *(void *)&v37[40];
  if (*(void *)&v37[40] < 2uLL)
  {
    if (*(void *)&v37[40] != 1) {
      return v5;
    }
    uint64_t v8 = *(void *)v37;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    *(_WORD *)(a1 + 30) = HIWORD(v10) + 1;
    *((void *)&v11 + 1) = v10;
    *(void *)&long long v11 = v9;
    unint64_t v12 = ~(unint64_t)(v11 >> 32) | 0xFFFFFFFFFFLL;
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(v13 + 8 * v8);
    *(void *)(v13 + 8 * v8) = v12;
    (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 14, v14, 0);
    unint64_t v15 = *(void *)(a1 + 16);
    if ((v15 & 4) != 0)
    {
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(v17 + 8 * v8);
      *(void *)(v17 + 8 * v8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 15, v18, 0);
      unint64_t v15 = *(void *)(a1 + 16);
    }
    uint64_t v16 = *(void *)(a1 + 24);
    if ((v15 & 0x18) != 0)
    {
      uint64_t v19 = (v15 >> 3) & 3;
      if (!v19) {
        goto LABEL_49;
      }
      uint64_t v20 = *(void *)(a1 + 8 * v19 + 40);
      uint64_t v21 = *(void *)(v20 + 8 * v8);
      *(void *)(v20 + 8 * v8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 16, v21, 0);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }
    if ((v15 & 0x60) != 0)
    {
      uint64_t v22 = (v15 >> 5) & 3;
      if (!v22) {
        goto LABEL_49;
      }
      uint64_t v23 = *(void *)(a1 + 8 * v22 + 40);
      uint64_t v24 = *(void *)(v23 + 8 * v8);
      *(void *)(v23 + 8 * v8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 17, v24, 0);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }
    if ((v15 & 0x380) != 0)
    {
      uint64_t v25 = (v15 >> 7) & 7;
      if (!v25) {
        goto LABEL_49;
      }
      *(void *)(*(void *)(a1 + 8 * v25 + 40) + 8 * v8) = 0;
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }
    if ((v15 & 0x1C00) != 0)
    {
      uint64_t v26 = (v15 >> 10) & 7;
      if (!v26) {
        goto LABEL_49;
      }
      *(void *)(*(void *)(a1 + 8 * v26 + 40) + 8 * v8) = 0;
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }
    if ((v15 & 0xE000) != 0)
    {
      if (!((unsigned __int16)v15 >> 13)) {
        goto LABEL_49;
      }
      *(void *)(*(void *)(a1 + 8 * ((unsigned __int16)v15 >> 13) + 40) + 8 * v8) = 0;
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }
    unint64_t v27 = (v15 & 0xFFFFFFFFFFC00000) - 0x400000;
    unint64_t v28 = v27 & 0xFFFFFFFFFFC00000 | v15 & 0x3FFFFF;
    *(void *)(a1 + 16) = v28;
    *(void *)(a1 + 24) = v16 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v16) + 1) << 32);
    unint64_t v29 = (unsigned __int16)(WORD2(v16) + 1);
    if (WORD2(v16) != 0xFFFF)
    {
      uint64_t v30 = (v15 >> 16) & 0x3F;
      unint64_t v31 = __CFBasicHashTableSizes[v30];
      if ((unint64_t)(v30 - 7) > 0x37)
      {
        if ((unint64_t)(v30 - 5) > 0x39)
        {
          if ((v16 & 8) == 0)
          {
LABEL_42:
            unsigned int v33 = WORD1(v28) & 0x3F;
            if (v33 < 3) {
              return v5;
            }
            unsigned int v34 = v33 - 2;
            goto LABEL_46;
          }
LABEL_44:
          unsigned int v35 = WORD1(v28) & 0x3F;
          if (v35 < 6) {
            return v5;
          }
          unsigned int v34 = v35 - 5;
LABEL_46:
          if (__CFBasicHashTableCapacities[v34] <= v27 >> 22) {
            return v5;
          }
LABEL_47:
          __CFBasicHashRehash(a1, 0);
          return v5;
        }
      }
      else if (v29 >= v31 >> 2)
      {
        goto LABEL_34;
      }
      BOOL v32 = v29 >= v31 >> 1;
      if ((v16 & 8) == 0)
      {
LABEL_35:
        if (v32) {
          goto LABEL_47;
        }
        goto LABEL_42;
      }
      goto LABEL_39;
    }
LABEL_34:
    BOOL v32 = 1;
    if ((v16 & 8) == 0) {
      goto LABEL_35;
    }
LABEL_39:
    if (v32) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }
  unint64_t v6 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 30) = HIWORD(*(void *)(a1 + 24)) + 1;
  if ((v6 & 0x380) != 0)
  {
    uint64_t v7 = (v6 >> 7) & 7;
    if (v7)
    {
      --*(void *)(*(void *)(a1 + 8 * v7 + 40) + 8 * *(void *)v37);
      return v5;
    }
LABEL_49:
    __break(1u);
  }
  return v5;
}

uint64_t __CFBasicHashAddValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  ++*(_WORD *)(a1 + 30);
  uint64_t result = (**(uint64_t (***)(void))(a1 + 32))();
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(a1 + 16);
  if ((v10 & 0x18) != 0)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 12, a3, 0);
    unint64_t v11 = result;
    unint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    if ((v10 & 4) == 0)
    {
LABEL_3:
      uint64_t v13 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    unint64_t v11 = result;
    if ((v10 & 4) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 11, 0, 0);
  uint64_t v13 = result;
  unint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
LABEL_6:
  if ((v10 & 0x60) != 0)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 13, 0, 0);
    uint64_t v14 = result;
    unint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (__CFBasicHashTableCapacities[(v10 >> 16) & 0x3F] <= v10 >> 22)
  {
    __CFBasicHashRehash(a1, 1);
    int v15 = *(_DWORD *)(a1 + 16) & 3;
    switch(v15)
    {
      case 3:
        uint64_t result = ___CFBasicHashFindBucket3(a1, v11, 1, (unint64_t *)v26);
        break;
      case 2:
        uint64_t result = ___CFBasicHashFindBucket2(a1, v11, 1, (unint64_t *)v26);
        break;
      case 1:
        uint64_t result = ___CFBasicHashFindBucket1(a1, v11, 1, (unint64_t *)v26);
        break;
      default:
        goto LABEL_43;
    }
    long long v16 = v26[1];
    *(_OWORD *)a2 = v26[0];
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v26[2];
    *(void *)(a2 + 48) = v27;
    unint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
  }
  *((void *)&v17 + 1) = v12;
  *(void *)&long long v17 = v10;
  uint64_t v18 = (v17 >> 32) & 0xFFFFFF0000000000;
  if (*(void *)(a2 + 8) == ~v18)
  {
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v12 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v12) - 1) << 32);
  }
  if (v11 == v18 || v11 == ~v18) {
    uint64_t result = __CFBasicHashFindNewMarker(a1, v11, v7, v8);
  }
  *(void *)(*(void *)(a1 + 40) + 8 * *(void *)a2) = v9;
  unint64_t v20 = *(void *)(a1 + 16);
  if ((v20 & 4) != 0)
  {
    *(void *)(*(void *)(a1 + 48) + 8 * *(void *)a2) = v13;
    unint64_t v20 = *(void *)(a1 + 16);
  }
  uint64_t v21 = *(void *)(a1 + 24);
  if ((v20 & 0x18) != 0)
  {
    uint64_t v22 = (v20 >> 3) & 3;
    if (!v22) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v22 + 40) + 8 * *(void *)a2) = v11;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }
  if ((v20 & 0x60) != 0)
  {
    uint64_t v23 = (v20 >> 5) & 3;
    if (!v23) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v23 + 40) + 8 * *(void *)a2) = v14;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }
  if ((v20 & 0x380) != 0)
  {
    uint64_t v24 = (v20 >> 7) & 7;
    if (!v24) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v24 + 40) + 8 * *(void *)a2) = 1;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }
  if ((v20 & 0x1C00) != 0)
  {
    uint64_t v25 = (v20 >> 10) & 7;
    if (!v25) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v25 + 40) + 8 * *(void *)a2) = 0;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }
  if ((v20 & 0xE000) != 0)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, void))(a1 + 32))(a1, 22, v11, 0);
    if ((unsigned __int16)*(void *)(a1 + 16) >> 13)
    {
      *(void *)(*(void *)(a1 + 8 * ((unsigned __int16)*(void *)(a1 + 16) >> 13) + 40) + 8 * *(void *)a2) = result;
      unint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      goto LABEL_42;
    }
LABEL_43:
    __break(1u);
  }
LABEL_42:
  *(void *)(a1 + 16) = v20 + 0x400000;
  *(void *)(a1 + 24) = v21;
  return result;
}

unint64_t ___CFBasicHashFindBucket1@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t result = (**(uint64_t (***)(void))(a1 + 32))();
  unint64_t v8 = *(void *)(a1 + 16);
  if ((v8 & 0x18) != 0)
  {
    uint64_t v9 = (v8 >> 3) & 3;
    if (!v9) {
      goto LABEL_52;
    }
    unint64_t v10 = (uint64_t *)(a1 + 8 * v9 + 40);
  }
  else
  {
    unint64_t v10 = (uint64_t *)(a1 + 40);
  }
  uint64_t v11 = *v10;
  if ((v8 & 0xE000) != 0)
  {
    if ((unsigned __int16)v8 >> 13)
    {
      uint64_t v12 = *(void *)(a1 + 8 * ((unsigned __int16)v8 >> 13) + 40);
      goto LABEL_9;
    }
LABEL_52:
    __break(1u);
    return result;
  }
  uint64_t v12 = 0;
LABEL_9:
  uint64_t v13 = (v8 >> 16) & 0x3F;
  unint64_t v14 = __CFBasicHashTableSizes[v13];
  unint64_t v15 = (*(long long *)(a1 + 16) >> 32) & 0xFFFFFF0000000000;
  *a4 = -1;
  a4[1] = ~v15;
  a4[2] = 0;
  a4[3] = ~v15;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  if (!v13 || v13 == 63) {
    return result;
  }
  unint64_t v16 = result % v14;
  if (v14 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v14;
  }
  uint64_t v18 = -1;
  while (1)
  {
    unint64_t v19 = *(void *)(v11 + 8 * v16);
    if (v19 == v15)
    {
      if (v18 == -1)
      {
        a4[3] = v15;
        *a4 = v16;
        a4[1] = v15;
      }
      return result;
    }
    if (a3) {
      goto LABEL_17;
    }
    if (v19 == ~v15)
    {
      if (v18 == -1)
      {
        *a4 = v16;
        uint64_t v18 = v16;
      }
      goto LABEL_17;
    }
    if (v19 == a2) {
      break;
    }
    if (!v12 || *(void *)(v12 + 8 * v16) == result)
    {
      uint64_t v32 = v12;
      unint64_t v33 = result;
      uint64_t v31 = v18;
      char v20 = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, uint64_t))(a1 + 32))(a1, 20, v19, a2);
      uint64_t v18 = v31;
      uint64_t v12 = v32;
      BOOL v21 = v20 == 0;
      unint64_t result = v33;
      if (!v21) {
        goto LABEL_34;
      }
    }
LABEL_17:
    if (v16 + 1 < v14) {
      ++v16;
    }
    else {
      unint64_t v16 = v16 + 1 - v14;
    }
    if (!--v17) {
      return result;
    }
  }
  unint64_t v19 = a2;
LABEL_34:
  *a4 = v16;
  unint64_t v22 = *(void *)(a1 + 16);
  unint64_t v23 = v19;
  if ((v22 & 0x18) != 0) {
    unint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8 * v16);
  }
  a4[3] = v23;
  if ((v22 & 4) != 0) {
    unint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8 * v16);
  }
  else {
    unint64_t v24 = 0;
  }
  a4[4] = v24;
  a4[1] = v19;
  if ((v22 & 0x60) != 0)
  {
    uint64_t v25 = (v22 >> 5) & 3;
    if (!v25) {
      goto LABEL_52;
    }
    unint64_t v26 = *(void *)(*(void *)(a1 + 8 * v25 + 40) + 8 * v16);
  }
  else
  {
    unint64_t v26 = 0;
  }
  a4[2] = v26;
  if ((v22 & 0x380) != 0)
  {
    uint64_t v27 = (v22 >> 7) & 7;
    if (!v27) {
      goto LABEL_52;
    }
    uint64_t v28 = *(void *)(*(void *)(a1 + 8 * v27 + 40) + 8 * v16);
  }
  else
  {
    uint64_t v28 = 1;
  }
  a4[5] = v28;
  if ((v22 & 0x1C00) != 0)
  {
    uint64_t v29 = (v22 >> 10) & 7;
    if (!v29) {
      goto LABEL_52;
    }
    uint64_t v30 = *(void *)(*(void *)(a1 + 8 * v29 + 40) + 8 * v16);
  }
  else
  {
    uint64_t v30 = 1;
  }
  a4[6] = v30;
  return result;
}

__CFString *__NSMapTableCallback(int a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  unint64_t v8 = (void *)a5[1];
  switch(a2)
  {
    case 8:
      unint64_t result = (__CFString *)malloc_type_malloc(0x10uLL, 0xBE57B2AFuLL);
      if (result)
      {
        uint64_t v5 = (void (*)(void))result;
        *(_OWORD *)&result->Class isa = *(_OWORD *)a5;
        return (__CFString *)v5;
      }
      qword_1E8EDF350 = (uint64_t)"unable to allocate space for callbacks";
      __break(1u);
      return result;
    case 9:
      free(a5);
      return 0;
    case 10:
      unint64_t v10 = (void (*)(void))v8[7];
      if (!v10) {
        return (__CFString *)a3;
      }
      goto LABEL_10;
    case 12:
      unint64_t v10 = (void (*)(void))v8[3];
      if (v10) {
LABEL_10:
      }
        v10();
      return (__CFString *)a3;
    case 14:
      uint64_t v5 = (void (*)(void))v8[8];
      if (v5) {
        goto LABEL_12;
      }
      return (__CFString *)v5;
    case 16:
      uint64_t v5 = (void (*)(void))v8[4];
      if (!v5) {
        return (__CFString *)v5;
      }
LABEL_12:
      v5();
      return 0;
    case 20:
      uint64_t v11 = (unsigned int (*)(void))v8[2];
      if (v11) {
        return (__CFString *)v11();
      }
      else {
        return (__CFString *)(a3 == a4);
      }
    case 22:
      uint64_t v12 = (uint64_t (*)(void))v8[1];
      if (v12)
      {
        return (__CFString *)v12();
      }
      else
      {
        return (__CFString *)a3;
      }
    case 24:
      uint64_t v13 = (uint64_t (*)(void))v8[9];
      if (v13) {
        goto LABEL_22;
      }
      return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, @"<%p>", a3);
    case 26:
      uint64_t v13 = (uint64_t (*)(void))v8[5];
      if (!v13) {
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, @"<%p>", a3);
      }
LABEL_22:
      unint64_t v14 = (const void *)v13();
      return (__CFString *)CFRetain(v14);
    default:
      return (__CFString *)v5;
  }
}

uint64_t CFBasicHashFindBucket@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if ((v3 & 0x3F0000) != 0)
  {
    int v4 = v3 & 3;
    switch(v4)
    {
      case 3:
        return ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)a3);
      case 2:
        return ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)a3);
      case 1:
        return ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)a3);
      default:
        __break(1u);
        break;
    }
  }
  else
  {
    uint64_t v5 = (*(long long *)(result + 16) >> 32) & 0xFFFFFF0000000000;
    *(void *)a3 = -1;
    *(void *)(a3 + 8) = v5;
    *(void *)(a3 + 16) = v5;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
  }
  return result;
}

uint64_t isEqualObjectMT(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3) {
    return 1;
  }
  else {
    return objc_msgSend(a2, "isEqual:");
  }
}

uint64_t hashObjectMT(uint64_t a1, void *a2)
{
  return [a2 hash];
}

uint64_t releaseObjectMT()
{
  return MEMORY[0x1F41817F8]();
}

_OWORD *__NSHashTableCallback(int a1, int a2, _OWORD *a3, _OWORD *a4, void *a5)
{
  unint64_t result = 0;
  unint64_t v8 = (void *)a5[1];
  switch(a2)
  {
    case 8:
      unint64_t result = malloc_type_malloc(0x10uLL, 0xCB62162FuLL);
      if (result)
      {
        *unint64_t result = *(_OWORD *)a5;
      }
      else
      {
        qword_1E8EDF350 = (uint64_t)"unable to allocate space for callbacks";
        __break(1u);
      }
      return result;
    case 9:
      free(a5);
      return 0;
    case 10:
    case 12:
      uint64_t v9 = (void (*)(void, _OWORD *))v8[3];
      if (v9) {
        v9(a5[1], a3);
      }
      goto LABEL_14;
    case 14:
    case 16:
      unint64_t v10 = (void (*)(void, _OWORD *))v8[4];
      if (v10) {
        v10(a5[1], a3);
      }
      return 0;
    case 18:
    case 20:
      uint64_t v11 = (unsigned int (*)(void, _OWORD *, _OWORD *))v8[2];
      if (v11) {
        return (_OWORD *)v11(a5[1], a3, a4);
      }
      else {
        return (_OWORD *)(a3 == a4);
      }
    case 22:
      unint64_t v14 = (uint64_t (*)(uint64_t, _OWORD *))v8[1];
      if (v14)
      {
        uint64_t v15 = a5[1];
        unint64_t result = (_OWORD *)v14(v15, a3);
      }
      else
      {
LABEL_14:
        unint64_t result = a3;
      }
      break;
    case 24:
    case 26:
      uint64_t v12 = (uint64_t (*)(void, _OWORD *))v8[5];
      if (v12)
      {
        uint64_t v13 = (const void *)v12(a5[1], a3);
        unint64_t result = CFRetain(v13);
      }
      else
      {
        unint64_t result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, @"<%p>", a3);
      }
      break;
    default:
      return result;
  }
  return result;
}

void __CFBasicHashRehash(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  do
  {
    if (__CFBasicHashTableCapacities[v2] >= (int64_t)(a2 + (v3 >> 22))) {
      goto LABEL_5;
    }
    ++v2;
  }
  while (v2 != 64);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
LABEL_4:
            while (1)
            {
              __break(1u);
LABEL_5:
              uint64_t v5 = 0;
              uint64_t v6 = (v4 >> 3) & 1;
              if (a2 != 1) {
                uint64_t v6 = 0;
              }
              uint64_t v7 = (v3 >> 16) & 0x3F;
              uint64_t v8 = __CFBasicHashTableSizes[v7];
              uint64_t v9 = (unsigned char *)(v6 + v2);
              uint64_t v10 = __CFBasicHashTableSizes[v6 + v2];
              CFTypeRef cf = (unsigned char *)a1;
              uint64_t v11 = 0;
              uint64_t v12 = 0;
              uint64_t v13 = 0;
              uint64_t v14 = 0;
              unint64_t v15 = 0;
              unint64_t v16 = 0;
              if (!(v6 + v2) || v9 == (unsigned char *)63) {
                break;
              }
              if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7)
              {
                qword_1E8EDF350 = (uint64_t)"overflow while growing CFBasicHash";
                __break(1u);
                return;
              }
              size_t v17 = 8 * v10;
              CFAllocatorRef v18 = CFGetAllocator((CFTypeRef)a1);
              a1 = MEMORY[0x1853044A0](v18, 8 * v10, 2973864055, 0);
              if (a1)
              {
                unint64_t v19 = (unsigned char *)MEMORY[0x1E4F1CBC0];
                uint64_t v81 = a1;
                if (*MEMORY[0x1E4F1CBC0]) {
                  __CFSetLastAllocationEventName();
                }
                a1 = (uint64_t)cf;
                if ((cf[16] & 4) != 0)
                {
                  CFAllocatorRef v20 = CFGetAllocator(cf);
                  a1 = MEMORY[0x1853044A0](v20, 8 * v10, 2973864055, 0);
                  if (a1)
                  {
                    uint64_t v11 = (void *)a1;
                    if (*v19) {
                      __CFSetLastAllocationEventName();
                    }
                    a1 = (uint64_t)cf;
                    goto LABEL_19;
                  }
                }
                else
                {
                  uint64_t v11 = 0;
LABEL_19:
                  if ((*(unsigned char *)(a1 + 16) & 0x18) != 0)
                  {
                    CFAllocatorRef v21 = CFGetAllocator((CFTypeRef)a1);
                    a1 = MEMORY[0x1853044A0](v21, 8 * v10, 2973864055, 0);
                    if (a1)
                    {
                      uint64_t v12 = (void *)a1;
                      if (*v19) {
                        __CFSetLastAllocationEventName();
                      }
                      a1 = (uint64_t)cf;
                      goto LABEL_25;
                    }
                  }
                  else
                  {
                    uint64_t v12 = 0;
LABEL_25:
                    if ((*(unsigned char *)(a1 + 16) & 0x60) != 0)
                    {
                      CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
                      a1 = MEMORY[0x1853044A0](v22, 8 * v10, 2973864055, 0);
                      if (a1)
                      {
                        uint64_t v13 = (void *)a1;
                        if (*v19) {
                          __CFSetLastAllocationEventName();
                        }
                        a1 = (uint64_t)cf;
                        goto LABEL_31;
                      }
                    }
                    else
                    {
                      uint64_t v13 = 0;
LABEL_31:
                      if ((*(_WORD *)(a1 + 16) & 0x380) != 0)
                      {
                        CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)a1);
                        if (__CFAllocatorRespectsHintZeroWhenAllocating())
                        {
                          a1 = MEMORY[0x1853044A0](v23, 8 * v10, 49052816, 1);
                          uint64_t v14 = a1;
                          unint64_t v2 = MEMORY[0x1E4F1CBC0];
                          if (a1) {
                            goto LABEL_38;
                          }
                        }
                        else
                        {
                          a1 = MEMORY[0x1853044A0](v23, 8 * v10, 3626294421, 0);
                          if (a1)
                          {
                            uint64_t v14 = a1;
                            bzero((void *)a1, 8 * v10);
                            unint64_t v2 = MEMORY[0x1E4F1CBC0];
LABEL_38:
                            if (*(unsigned char *)v2) {
                              __CFSetLastAllocationEventName();
                            }
                            a1 = (uint64_t)cf;
                            goto LABEL_41;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v14 = 0;
LABEL_41:
                        uint64_t v80 = v8;
                        if ((*(unsigned char *)(a1 + 17) & 0x1C) == 0)
                        {
                          uint64_t v25 = v10;
                          uint64_t v26 = 0;
                          goto LABEL_51;
                        }
                        CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
                        uint64_t v25 = v10;
                        if (__CFAllocatorRespectsHintZeroWhenAllocating())
                        {
                          a1 = MEMORY[0x1853044A0](v24, 8 * v10, 49052816, 1);
                          uint64_t v26 = a1;
                          unint64_t v2 = MEMORY[0x1E4F1CBC0];
                          if (a1)
                          {
LABEL_48:
                            if (*(unsigned char *)v2) {
                              __CFSetLastAllocationEventName();
                            }
                            a1 = (uint64_t)cf;
LABEL_51:
                            if ((*(unsigned char *)(a1 + 17) & 0xE0) == 0)
                            {
                              unint64_t v16 = 0;
                              uint64_t v5 = (void *)v81;
                              unint64_t v15 = v26;
                              goto LABEL_61;
                            }
                            CFAllocatorRef v27 = CFGetAllocator((CFTypeRef)a1);
                            if (__CFAllocatorRespectsHintZeroWhenAllocating())
                            {
                              a1 = MEMORY[0x1853044A0](v27, v17, 49052816, 1);
                              uint64_t v28 = a1;
                              if (a1) {
                                goto LABEL_58;
                              }
                            }
                            else
                            {
                              a1 = MEMORY[0x1853044A0](v27, v17, 3626294421, 0);
                              if (a1)
                              {
                                uint64_t v28 = a1;
                                bzero((void *)a1, v17);
LABEL_58:
                                if (*MEMORY[0x1E4F1CBC0]) {
                                  __CFSetLastAllocationEventName();
                                }
                                uint64_t v5 = (void *)v81;
                                a1 = (uint64_t)cf;
                                unint64_t v15 = v26;
                                unint64_t v16 = v28;
LABEL_61:
                                uint64_t v10 = v25;
                                uint64_t v8 = v80;
                                break;
                              }
                            }
                          }
                        }
                        else
                        {
                          a1 = MEMORY[0x1853044A0](v24, 8 * v10, 3626294421, 0);
                          if (a1)
                          {
                            uint64_t v26 = a1;
                            bzero((void *)a1, v17);
                            unint64_t v2 = MEMORY[0x1E4F1CBC0];
                            goto LABEL_48;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            unint64_t v2 = *(void *)(a1 + 16);
            uint64_t v29 = *(void *)(a1 + 24);
            *((void *)&v30 + 1) = v29;
            *(void *)&long long v30 = v2;
            uint64_t v31 = (v30 >> 32) & 0xFFFFFF0000000000;
            if (v9 && v9 != (unsigned char *)63)
            {
              if (v10 <= 1) {
                uint64_t v32 = 1;
              }
              else {
                uint64_t v32 = v10;
              }
              unint64_t v33 = v5;
              unsigned int v34 = v11;
              unsigned int v35 = v12;
              uint64_t v36 = v13;
              do
              {
                *unint64_t v33 = v31;
                if (v11) {
                  void *v34 = v31;
                }
                if (v12) {
                  void *v35 = v31;
                }
                if (v13) {
                  *uint64_t v36 = v31;
                }
                ++v36;
                ++v35;
                ++v34;
                ++v33;
                --v32;
              }
              while (v32);
              unint64_t v2 = *(void *)(a1 + 16);
              uint64_t v29 = *(void *)(a1 + 24);
            }
            unint64_t v4 = v2 & 0xFFFFFFFFFFC0FFFFLL | ((unint64_t)(v9 & 0x3F) << 16);
            *(void *)(a1 + 16) = v4;
            *(void *)(a1 + 24) = v29 & 0xFFFF0000FFFFFFFFLL;
            unint64_t v3 = *(void *)(a1 + 40);
            ptr = (void *)v3;
            *(void *)(a1 + 40) = v5;
            if ((v2 & 4) != 0)
            {
              unint64_t v3 = *(void *)(a1 + 48);
              uint64_t v66 = (void *)v3;
              *(void *)(a1 + 48) = v11;
            }
            else
            {
              uint64_t v66 = 0;
            }
            if ((v2 & 0x18) == 0) {
              break;
            }
            unint64_t v3 = (v2 >> 3) & 3;
            if (v3)
            {
              unint64_t v3 = a1 + 8 * v3;
              unint64_t v4 = *(void *)(v3 + 40);
              unint64_t v65 = (unint64_t *)v4;
              *(void *)(v3 + 40) = v12;
              goto LABEL_83;
            }
          }
          unint64_t v65 = 0;
LABEL_83:
          if ((v2 & 0x60) == 0) {
            break;
          }
          unint64_t v3 = (v2 >> 5) & 3;
          if (v3)
          {
            unint64_t v3 = a1 + 8 * v3;
            unint64_t v4 = *(void *)(v3 + 40);
            uint64_t v64 = (void *)v4;
            *(void *)(v3 + 40) = v13;
            goto LABEL_87;
          }
        }
        uint64_t v64 = 0;
LABEL_87:
        if ((v2 & 0x380) == 0) {
          break;
        }
        unint64_t v3 = (v2 >> 7) & 7;
        if (v3)
        {
          unint64_t v3 = a1 + 8 * v3;
          unint64_t v4 = *(void *)(v3 + 40);
          unint64_t v63 = (void *)v4;
          *(void *)(v3 + 40) = v14;
          goto LABEL_91;
        }
      }
      unint64_t v63 = 0;
LABEL_91:
      if ((v2 & 0x1C00) == 0) {
        break;
      }
      unint64_t v3 = (v2 >> 10) & 7;
      if (v3)
      {
        unint64_t v3 = a1 + 8 * v3;
        unint64_t v4 = *(void *)(v3 + 40);
        uint64_t v62 = (void *)v4;
        *(void *)(v3 + 40) = v15;
        goto LABEL_95;
      }
    }
    uint64_t v62 = 0;
LABEL_95:
    unint64_t v69 = (unint64_t)v12;
    unint64_t v70 = (unint64_t)v11;
    unint64_t v68 = (unint64_t)v13;
    unint64_t v72 = v15;
    unint64_t v73 = v14;
    unint64_t v71 = v16;
    if ((v2 & 0xE000) == 0) {
      break;
    }
    unint64_t v2 = (unsigned __int16)v2 >> 13;
    if (v2)
    {
      uint64_t v37 = a1 + 8 * v2;
      uint64_t v61 = *(void **)(v37 + 40);
      *(void *)(v37 + 40) = v16;
      if (!v7) {
        goto LABEL_165;
      }
      goto LABEL_100;
    }
  }
  uint64_t v61 = 0;
  if (!v7) {
    goto LABEL_165;
  }
LABEL_100:
  if (v7 != 63)
  {
    uint64_t v38 = ~v31;
    uint64_t v39 = v66;
    if (v11) {
      BOOL v40 = v66 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    int v41 = !v40;
    BOOL v42 = v12 != 0;
    uint64_t v43 = ptr;
    if (v65) {
      uint64_t v44 = v65;
    }
    else {
      uint64_t v44 = ptr;
    }
    if (!v65) {
      BOOL v42 = 0;
    }
    BOOL v78 = v42;
    int v79 = v41;
    CFIndex v45 = v63;
    unint64_t v3 = (unint64_t)v64;
    if (v68) {
      BOOL v46 = v64 == 0;
    }
    else {
      BOOL v46 = 1;
    }
    int v47 = !v46;
    if (v73) {
      BOOL v48 = v63 == 0;
    }
    else {
      BOOL v48 = 1;
    }
    int v49 = !v48;
    int v76 = v49;
    int v77 = v47;
    uint64_t v50 = v61;
    uint64_t v51 = v62;
    if (v15) {
      BOOL v52 = v62 == 0;
    }
    else {
      BOOL v52 = 1;
    }
    unint64_t v4 = !v52;
    if (v16) {
      BOOL v53 = v61 == 0;
    }
    else {
      BOOL v53 = 1;
    }
    int v54 = !v53;
    int v74 = v54;
    int v75 = v4;
    if (v8 <= 1) {
      uint64_t v55 = 1;
    }
    else {
      uint64_t v55 = v8;
    }
    uint64_t v56 = v64;
    unint64_t v82 = (unint64_t)v5;
    do
    {
      unint64_t v58 = *v44++;
      unint64_t v57 = v58;
      if (v58 != v31 && v57 != v38)
      {
        uint64_t v85 = 0;
        memset(v84, 0, sizeof(v84));
        unint64_t v2 = *(_DWORD *)(a1 + 16) & 3;
        switch(*(_DWORD *)(a1 + 16) & 3)
        {
          case 3:
            ___CFBasicHashFindBucket3(a1, v57, 1, (unint64_t *)v84);
            break;
          case 2:
            ___CFBasicHashFindBucket2(a1, v57, 1, (unint64_t *)v84);
            break;
          case 1:
            ___CFBasicHashFindBucket1(a1, v57, 1, (unint64_t *)v84);
            break;
          default:
            goto LABEL_4;
        }
        unint64_t v4 = v82;
        a1 = (uint64_t)cf;
        uint64_t v38 = ~v31;
        if (v82)
        {
          unint64_t v3 = *(void *)&v84[0];
          *(void *)(v82 + 8 * *(void *)&v84[0]) = *v43;
        }
        if (v79)
        {
          unint64_t v3 = *(void *)&v84[0];
          unint64_t v4 = v70;
          *(void *)(v70 + 8 * *(void *)&v84[0]) = *v39;
        }
        if (v78)
        {
          unint64_t v3 = v69;
          *(void *)(v69 + 8 * *(void *)&v84[0]) = v57;
        }
        if (v77)
        {
          unint64_t v3 = *(void *)&v84[0];
          unint64_t v4 = v68;
          *(void *)(v68 + 8 * *(void *)&v84[0]) = *v56;
        }
        if (v76)
        {
          unint64_t v3 = *(void *)&v84[0];
          unint64_t v4 = v73;
          *(void *)(v73 + 8 * *(void *)&v84[0]) = *v45;
        }
        if (v75)
        {
          unint64_t v3 = *(void *)&v84[0];
          unint64_t v4 = v72;
          *(void *)(v72 + 8 * *(void *)&v84[0]) = *v51;
        }
        if (v74)
        {
          unint64_t v3 = *(void *)&v84[0];
          unint64_t v4 = v71;
          *(void *)(v71 + 8 * *(void *)&v84[0]) = *v50;
        }
      }
      ++v50;
      ++v51;
      ++v45;
      ++v56;
      ++v39;
      ++v43;
      --v55;
    }
    while (v55);
  }
LABEL_165:
  CFAllocatorRef v60 = CFGetAllocator((CFTypeRef)a1);
  CFAllocatorDeallocate(v60, ptr);
  CFAllocatorDeallocate(v60, v66);
  CFAllocatorDeallocate(v60, v65);
  CFAllocatorDeallocate(v60, v64);
  CFAllocatorDeallocate(v60, v63);
  CFAllocatorDeallocate(v60, v62);

  CFAllocatorDeallocate(v60, v61);
}

NSMapTable *__cdecl NSCreateMapTable(NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)&keyCallBacks->retain;
  *(_OWORD *)&keyCallBacksa.hash = *(_OWORD *)&keyCallBacks->hash;
  *(_OWORD *)&keyCallBacksa.retain = v4;
  *(_OWORD *)&keyCallBacksa.describe = *(_OWORD *)&keyCallBacks->describe;
  NSMapTableValueCallBacks v6 = *valueCallBacks;
  return NSCreateMapTableWithZone(&keyCallBacksa, &v6, capacity, v3);
}

NSMapTable *__cdecl NSCreateMapTableWithZone(NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity, NSZone *zone)
{
  NSMapTableValueCallBacks v6 = (objc_class *)self;
  uint64_t v7 = (NSZone *)malloc_default_zone();
  uint64_t v8 = (char *)NSAllocateObject(v6, 0, v7);
  long long v9 = *(_OWORD *)&keyCallBacks->hash;
  long long v10 = *(_OWORD *)&keyCallBacks->describe;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&keyCallBacks->retain;
  *(_OWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + 8) = v9;
  describe = valueCallBacks->describe;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)&valueCallBacks->retain;
  *((void *)v8 + 9) = describe;
  unint64_t result = (NSMapTable *)malloc_type_malloc(0x10uLL, 0x80040B8603338uLL);
  if (result)
  {
    result->super.Class isa = (Class)__NSMapTableCallback;
    result[1].super.Class isa = (Class)v8;
    uint64_t v13 = 10248;
    if (!keyCallBacks->retain) {
      uint64_t v13 = 8200;
    }
    if (valueCallBacks->retain) {
      v13 |= 0x200uLL;
    }
    if (keyCallBacks->release) {
      v13 |= 0x800uLL;
    }
    if (valueCallBacks->release) {
      unint64_t v14 = v13 | 0x200;
    }
    else {
      unint64_t v14 = v13;
    }
    *((void *)v8 + 10) = CFBasicHashCreate(*MEMORY[0x1E4F1CFB0], v14, (uint64_t)result);
    return (NSMapTable *)v8;
  }
  else
  {
    qword_1E8EDF350 = (uint64_t)"unable to allocate space for callbacks";
    __break(1u);
  }
  return result;
}

void *CFBasicHashCreate(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!__kCFBasicHashTypeID) {
    __kCFBasicHashTypeID = _CFRuntimeRegisterClass();
  }
  unint64_t result = (void *)_CFRuntimeCreateInstance();
  if (result)
  {
    unint64_t v6 = result[2] & 0xFFFFFFFFFFFFFFFCLL | (a2 >> 13) & 3;
    unint64_t v7 = ((a2 & 0xA00) >> 5) | ((unint64_t)((unsigned __int16)a2 & 0x8000) >> 12) | result[3] & 0xFFFFFFFFFFFFLL | 0x1000000000000;
    if ((a2 & 8) != 0) {
      unint64_t v6 = result[2] & 0xFFFFFFFFFFFFFFE4 | (a2 >> 13) & 3 | 8;
    }
    uint64_t v8 = 1;
    if ((a2 & 8) != 0) {
      uint64_t v8 = 2;
    }
    if ((a2 & 0x20) != 0)
    {
      unint64_t v6 = v6 & 0xFFFFFFFFFFFFFC7FLL | (v8 << 7);
      LOBYTE(v8) = v8 + 1;
    }
    if ((a2 & 0x80) != 0) {
      unint64_t v6 = v6 & 0xFFFFFFFFFFFF1FFFLL | ((unint64_t)(v8 & 7) << 13);
    }
    result[2] = v6;
    result[3] = v7;
    result[4] = a3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _NSIsPList(uint64_t result, int a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = (void *)result;
    if (_NSIsNSString()) {
      return 1;
    }
    if (_NSIsNSData()) {
      return 2;
    }
    if (_NSIsNSNumber()) {
      return 5;
    }
    if (_NSIsNSDate()) {
      return 6;
    }
    if (a3 && ([a3 containsObject:v5] & 1) != 0) {
      return 0;
    }
    if (_NSIsNSArray())
    {
      if (a2)
      {
        [a3 addObject:v5];
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v14 count:16];
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *(void *)v16;
LABEL_16:
          uint64_t v9 = 0;
          while (1)
          {
            if (*(void *)v16 != v8) {
              objc_enumerationMutation(v5);
            }
            if (!_NSIsPList(*(void *)(*((void *)&v15 + 1) + 8 * v9), 1, a3)) {
              break;
            }
            if (v7 == ++v9)
            {
              uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v14 count:16];
              if (v7) {
                goto LABEL_16;
              }
              goto LABEL_22;
            }
          }
LABEL_33:
          [a3 removeObject:v5];
          return 0;
        }
LABEL_22:
        [a3 removeObject:v5];
      }
      return 3;
    }
    int v10 = _NSIsNSDictionary();
    if (v10) {
      unint64_t result = 4;
    }
    else {
      unint64_t result = 0;
    }
    if (v10 && a2)
    {
      uint64_t v11 = (void *)[v5 keyEnumerator];
      [a3 addObject:v5];
      while (1)
      {
        uint64_t v12 = [v11 nextObject];
        if (!v12) {
          break;
        }
        uint64_t v13 = v12;
        if ((_NSIsNSString() & 1) == 0 || !_NSIsPList([v5 objectForKey:v13], 1, a3)) {
          goto LABEL_33;
        }
      }
      [a3 removeObject:v5];
      return 4;
    }
  }
  return result;
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "void * _Nullable NSMapGet(NSMapTable * _Nonnull, const void * _Nullable)");
  }

  return [(NSMapTable *)table objectForKey:key];
}

objc_class *_NSSetCheckSize(objc_class *result, const char *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >> 60)
  {
    long long v4 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: absurd %s: %ld", _NSMethodExceptionProem(result, a2), a4, a3), 0 reason userInfo];
    objc_exception_throw(v4);
  }
  return result;
}

void _NSSetRaiseInsertNilException(objc_class *a1, const char *a2)
{
  unint64_t v2 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: attempt to insert nil", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
  objc_exception_throw(v2);
}

id protocol witness for Error._getEmbeddedNSError() in conformance MachError()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  uint64_t v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      _NSIndexPathCreateFromIndexes(*(void *)v0, *(void *)(v0 + 8));
      self;
      uint64_t v5 = (objc_class *)swift_dynamicCastObjCClassUnconditional();
      goto _$s10Foundation9IndexPathV19_bridgeToObjectiveCSo07NSIndexC0CyF;
    case 2:
      id v2 = objc_allocWithZone((Class)NSIndexPath);
      unint64_t v3 = sel_initWithIndexes_length_;
      uint64_t v4 = v1 + 32;
      goto LABEL_4;
    case 3:
      id v2 = objc_allocWithZone((Class)NSIndexPath);
      unint64_t v3 = sel_init;
      goto LABEL_4;
    default:
      id v2 = objc_allocWithZone((Class)NSIndexPath);
      unint64_t v3 = sel_initWithIndex_;
      uint64_t v4 = v1;
LABEL_4:
      uint64_t v5 = (objc_class *)objc_msgSend(v2, v3, v4);
_$s10Foundation9IndexPathV19_bridgeToObjectiveCSo07NSIndexC0CyF:
      result._inlinePayload = v8;
      result._length = v7;
      result._indexes = v6;
      result.super.Class isa = v5;
      return result;
  }
}

NSIndexPath *_NSIndexPathCreateFromIndexes(uint64_t a1, uint64_t a2)
{
  v3[2] = *MEMORY[0x1E4F143B8];
  v3[0] = a1;
  v3[1] = a2;
  return [[NSIndexPath alloc] initWithIndexes:v3 length:2];
}

uint64_t _makeInlinePayload(unint64_t *a1, uint64_t a2)
{
  uint64_t result = 0;
  uint64_t v4 = a2;
  switch(a2)
  {
    case 0:
      return v4 | (8 * a2) | 6;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_4;
    case 4:
      unint64_t v5 = a1[3];
      if (v5 >> 13) {
        return 0;
      }
      uint64_t result = v5 << 47;
LABEL_4:
      unint64_t v6 = a1[2];
      if (v6 >> 13) {
        return 0;
      }
      result |= v6 << 34;
LABEL_6:
      unint64_t v7 = a1[1];
      if (v7 >> 13) {
        return 0;
      }
      result |= v7 << 21;
LABEL_8:
      unint64_t v8 = *a1;
      if (v8 >> 13) {
        return 0;
      }
      uint64_t v4 = result | (v8 << 8);
      return v4 | (8 * a2) | 6;
    default:
      return result;
  }
}

id __NSCreateBPlistMappedString(uint64_t a1, uint64_t a2)
{
  return +[_NSBPlistMappedString createStringWithOffset:a1 intoMappingData:a2];
}

uint64_t storeEnumTagSinglePayload for IndexPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t ____mainNSThread_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  atomic_store(0xEu, (unsigned __int8 *)(*(void *)(v0 + 8) + 63));
  uint64_t result = pthread_main_thread_np();
  *(void *)(*(void *)(v0 + 8) + 144) = result;
  qword_1EB1ED030 = v0;
  return result;
}

uint64_t NSObject.KeyValueObservingPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  long long v12 = *(_OWORD *)(a2 + 16);
  uint64_t v13 = a3;
  uint64_t v8 = type metadata accessor for NSObject.KVOSubscription();
  swift_allocObject();
  id v9 = v6;
  swift_retain();
  int v10 = specialized NSObject.KVOSubscription.init(_:_:_:_:)(v9, v5, v7, a1);
  uint64_t v14 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v12 = v10;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
}

uint64_t type metadata accessor for NSObject.KVOSubscription()
{
  return swift_getGenericMetadata();
}

uint64_t NSProcessInfoNotifyPowerState(int a1)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  uint64_t result = notify_get_state(a1, v3);
  if (result)
  {
    atomic_exchange(&_NSProcessInfoGetPowerState_powerState, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    unint64_t v2 = v3[0] != 0;
    uint64_t result = +[_NSSwiftProcessInfo updatePowerState:](_NSSwiftProcessInfo, "updatePowerState:");
    if (atomic_exchange(&_NSProcessInfoGetPowerState_powerState, v2) != v2) {
      return [+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter") postNotificationName:@"NSProcessInfoPowerStateDidChangeNotification" object:+[NSProcessInfo processInfo]];
    }
  }
  return result;
}

uint64_t closure #1 in static _NSSwiftProcessInfo.cancelPowerStateNotifyNotification()(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 1) == 0)
  {
    uint64_t v1 = result;
    uint64_t result = notify_cancel(*(_DWORD *)(result + 20));
    *(_DWORD *)(v1 + 20) = 0;
    *(unsigned char *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t partial apply for closure #1 in static _NSSwiftProcessInfo.updatePowerState(_:)(uint64_t result)
{
  *(unsigned char *)(result + 17) = *(void *)(v1 + 16) != 0;
  return result;
}

uint64_t __NSOPERATIONQUEUE_IS_CANCELLING_AN_OPERATION__(void *a1)
{
  return [a1 cancel];
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v6 + 16))((char *)v10 - v5, v4);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  uint64_t v7 = (void *)v10[1];
  _bridgeKeyPathToString(_:)();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, *a3, v8);

  swift_unknownObjectRelease();
  return swift_release();
}

void *specialized NSObject.KVOSubscription.init(_:_:_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = (void *)*v4;
  uint64_t v4[2] = 0;
  uint64_t v7 = v6[11];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))((char *)v4 + v6[17], 1, 1, v7);
  uint64_t v8 = (char *)v4 + *(void *)(*v4 + 144);
  uint64_t v9 = v6[12];
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v8, 1, 1, v9);
  swift_unknownObjectWeakInit();
  uint64_t v12 = *(void *)(*v5 + 176);
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)((char *)v5 + v12) = v13;
  uint64_t v14 = *(void *)(*v5 + 184);
  long long v15 = (void *)swift_slowAlloc();
  *long long v15 = 0;
  *(void *)((char *)v5 + v14) = v15;
  v5[3] = 0;
  *((unsigned char *)v5 + 32) = 0;
  swift_unknownObjectWeakAssign();
  uint64_t v16 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v8, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a4, v9);
  v11(v8, 0, 1, v9);
  *(void *)((char *)v5 + *(void *)(*v5 + 160)) = a3;
  *(void *)((char *)v5 + *(void *)(*v5 + 168)) = a2;
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  long long v18 = (void *)swift_allocObject();
  uint64_t v19 = v6[10];
  unint64_t v18[2] = v19;
  v18[3] = v7;
  v18[4] = v9;
  v18[5] = v6[13];
  v18[6] = v17;
  uint64_t v37 = a1;
  type metadata accessor for NSObject();
  swift_retain();
  id v20 = a1;
  swift_dynamicCast();
  CFAllocatorRef v21 = v36;
  CFAllocatorRef v22 = (void *)swift_allocObject();
  unint64_t v22[2] = v19;
  v22[3] = v7;
  v22[4] = &protocol witness table for NSObject;
  v22[5] = partial apply for closure #1 in NSObject.KVOSubscription.init(_:_:_:_:);
  v22[6] = v18;
  CFAllocatorRef v23 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  id v24 = objc_allocWithZone(v23);
  swift_unknownObjectWeakInit();
  v35.receiver = v24;
  v35.super_class = v23;
  id v25 = objc_msgSendSuper2(&v35, sel_init);
  uint64_t v26 = (void *)MEMORY[0x185306FE0]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  id v27 = v21;
  swift_retain();
  id v28 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(v27, a2, a3, (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:), (uint64_t)v22);
  swift_unknownObjectWeakAssign();

  swift_release();
  swift_release();

  uint64_t v29 = (void *)v5[2];
  unint64_t v5[2] = v25;

  return v5;
}

id _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  uint64_t v11 = (void *)MEMORY[0x1E4FBC5F0];
  uint64_t v12 = *(void *)(*a1 + *MEMORY[0x1E4FBC5F0]);
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v26 - v15, v16, v12, v13);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  uint64_t v17 = v28;
  long long v18 = (void *)swift_allocObject();
  unint64_t v18[2] = v12;
  v18[3] = *(void *)(*v11 + v10 + 8);
  v18[4] = a5;
  v18[5] = a3;
  v18[6] = a4;
  uint64_t v19 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  id v20 = objc_allocWithZone(v19);
  swift_unknownObjectWeakInit();
  v27.receiver = v20;
  v27.super_class = v19;
  swift_retain();
  swift_retain();
  id v21 = objc_msgSendSuper2(&v27, sel_init);
  CFAllocatorRef v22 = (void *)MEMORY[0x185306FE0]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  id v23 = v17;
  swift_retain();
  id v24 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(v23, (uint64_t)a1, a2, (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:), (uint64_t)v18);
  swift_unknownObjectWeakAssign();

  swift_release();
  swift_release();

  return v21;
}

uint64_t type metadata accessor for NSKeyValueObservation()
{
  return self;
}

id NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_unknownObjectWeakInit();
  uint64_t v8 = OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject;
  *(void *)&v5[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject] = 0;
  uint64_t v9 = OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock;
  uint64_t v10 = v5;
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  _DWORD *v11 = 0;
  *(void *)&v5[v9] = v11;
  if (one-time initialization token for swizzler != -1) {
    swift_once();
  }
  uint64_t v30 = a2;
  uint64_t v12 = _bridgeKeyPathToString(_:)();
  uint64_t v14 = v13;
  if (one-time initialization token for observationInfoGetter != -1) {
    swift_once();
  }
  uint64_t v15 = static NSKeyValueObservation.Helper.observationInfoGetter;
  id v16 = objc_msgSend(a1, sel_methodForSelector_, static NSKeyValueObservation.Helper.observationInfoGetter);
  uint64_t v17 = self;
  id v18 = objc_msgSend(v17, sel_instanceMethodForSelector_, v15);
  if (v16)
  {
    if (!v18 || v16 != v18) {
      goto LABEL_17;
    }
  }
  else if (v18)
  {
    goto LABEL_17;
  }
  if (one-time initialization token for observationInfoSetter != -1) {
    swift_once();
  }
  uint64_t v19 = static NSKeyValueObservation.Helper.observationInfoSetter;
  id v20 = objc_msgSend(a1, sel_methodForSelector_, static NSKeyValueObservation.Helper.observationInfoSetter);
  id v21 = objc_msgSend(v17, sel_instanceMethodForSelector_, v19);
  if (v20)
  {
    if (v21 && v20 == v21) {
      goto LABEL_15;
    }
LABEL_17:
    *(void *)&v5[v8] = a1;
    goto LABEL_18;
  }
  if (v21) {
    goto LABEL_17;
  }
LABEL_15:
  swift_unknownObjectWeakAssign();
LABEL_18:
  CFAllocatorRef v22 = (uint64_t *)&v10[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_path];
  *CFAllocatorRef v22 = v12;
  v22[1] = v14;
  id v23 = &v10[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_callback];
  *(void *)id v23 = a4;
  *((void *)v23 + 1) = a5;
  swift_bridgeObjectRetain();
  swift_retain();

  v32.receiver = v10;
  v32.super_class = (Class)type metadata accessor for NSKeyValueObservation.Helper();
  id v24 = objc_msgSendSuper2(&v32, sel_init);
  objc_setAssociatedObject(a1, v24, v24, (void *)0x301);
  swift_bridgeObjectRetain();
  id v25 = v24;
  id v26 = a1;
  specialized static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)(v12, v14, v30, v26, (uint64_t)v25, v12, v14, a3);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease_n();
  return v25;
}

uint64_t type metadata accessor for NSKeyValueObservation.Helper()
{
  return self;
}

uint64_t _bridgeKeyPathToString(_:)()
{
  uint64_t result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v1)
  {
    _StringGuts.grow(_:)(42);
    v2._unint64_t object = (void *)0x80000001823A9A20;
    v2._uint64_t countAndFlagsBits = 0xD000000000000028;
    String.append(_:)(v2);
    type metadata accessor for AnyKeyPath();
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __NSThreadPerformPerform(__CFRunLoopSource **a1)
{
  Swift::String v2 = +[NSThread currentThread];
  objc_sync_enter(v2);
  unint64_t v3 = [*((id *)v2->_private + 8) count];
  double v4 = performQueueDequeue(v2, *((void **)v2->_private + 8), v3, *a1);
  uint64_t result = objc_sync_exit(v2);
  if (v4)
  {
    unint64_t v6 = v3 - 1;
    do
    {
      _CFAutoreleasePoolPush();
      unint64_t v7 = v4[1];
      unint64_t v8 = atomic_load(v4 + 4);
      if (v7 != v8) {
        _NSThreadPoisoned();
      }
      if (v4[2]) {
        unint64_t v9 = v4[2];
      }
      else {
        unint64_t v9 = 0;
      }
      [(id)v4[1] performSelector:v9 withObject:v4[3]];

      v4[1] = 0;
      v4[3] = 0;
      [v4 signal:2];

      _CFAutoreleasePoolPop();
      objc_sync_enter(v2);
      double v4 = performQueueDequeue(v2, *((void **)v2->_private + 8), v6, *a1);
      uint64_t result = objc_sync_exit(v2);
      --v6;
    }
    while (v4);
  }
  return result;
}

void sub_181831F88(_Unwind_Exception *a1)
{
}

void *performQueueDequeue(void *a1, void *a2, unint64_t a3, __CFRunLoopSource *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  Current = CFRunLoopGetCurrent();
  CFRunLoopMode v9 = CFRunLoopCopyCurrentMode(Current);
  objc_sync_enter(a1);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  obuint64_t j = a1;
  uint64_t v10 = [a2 countByEnumeratingWithState:&v25 objects:v24 count:16];
  if (v10)
  {
    source = a4;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)v26;
    uint64_t v13 = *MEMORY[0x1E4F1D410];
    while (2)
    {
      uint64_t v14 = 0;
      uint64_t v22 = v10 + v11;
      do
      {
        if (*(void *)v26 != v12) {
          objc_enumerationMutation(a2);
        }
        uint64_t v15 = *(void **)(*((void *)&v25 + 1) + 8 * v14);
        if (v15) {
          id v16 = (void *)v15[5];
        }
        else {
          id v16 = 0;
        }
        if (([v16 containsObject:v9] & 1) != 0
          || (!v15 ? (uint64_t v17 = 0) : (uint64_t v17 = (void *)v15[5]),
              [v17 containsObject:v13] && _CFRunLoop01()))
        {
          uint64_t v19 = v15;
          [a2 removeObjectAtIndex:v11 + v14];
          if (v19 && [a2 count]) {
            CFRunLoopSourceSignal(source);
          }
          goto LABEL_22;
        }
        if (v11 + v14 + 1 >= a3) {
          goto LABEL_21;
        }
        ++v14;
      }
      while (v10 != v14);
      uint64_t v18 = [a2 countByEnumeratingWithState:&v25 objects:v24 count:16];
      uint64_t v10 = v18;
      uint64_t v19 = 0;
      uint64_t v11 = v22;
      if (v18) {
        continue;
      }
      break;
    }
  }
  else
  {
LABEL_21:
    uint64_t v19 = 0;
  }
LABEL_22:
  objc_sync_exit(obj);
  CFRelease(v9);
  return v19;
}