uint64_t outlined retain of ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(void *)(a1 + 48);
  v12 = *(void *)(a1 + 40);
  v13 = *(void *)(a1 + 32);
  v3 = *(void *)(a1 + 56);
  v4 = *(void *)(a1 + 64);
  v5 = *(void *)(a1 + 72);
  v6 = *(void *)(a1 + 80);
  v7 = *(void *)(a1 + 88);
  v10 = *(_OWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of LocalePreferences?(v13, v12, v2, v3, v4, v5, v6, v7, (void *)v11, *((void **)&v11 + 1), (void *)v10, *((void **)&v10 + 1), (void *)v9);
  return a1;
}

uint64_t outlined release of ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  long long v10 = *(_OWORD *)(a1 + 112);
  long long v11 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of LocalePreferences?(v13, v12, v2, v3, v4, v5, v6, v7, (void *)v11, *((void **)&v11 + 1), (void *)v10, *((void **)&v10 + 1), (void *)v9);
  return a1;
}

uint64_t partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, (uint64_t (*)(uint64_t, _OWORD *))specialized closure #1 in FormatterCache.formatter(for:creator:), a2);
}

{
  return partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, specialized closure #1 in FormatterCache.formatter(for:creator:), a2);
}

{
  return partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

{
  return partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, **(void **)(v2 + 16), *(void *)(*(void *)(v2 + 16) + 8), *(unsigned char *)(*(void *)(v2 + 16) + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

{
  uint64_t v2;

  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16), a2);
}

{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t result;
  _OWORD v10[6];

  uint64_t v5 = *(_OWORD **)(v2 + 16);
  uint64_t v6 = v5[3];
  v10[2] = v5[2];
  v10[3] = v6;
  uint64_t v7 = v5[5];
  v10[4] = v5[4];
  v10[5] = v7;
  v8 = v5[1];
  v10[0] = *v5;
  v10[1] = v8;
  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, (double *)v10);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

{
  uint64_t v2;

  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(const void **)(v2 + 16), a2);
}

{
  return partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, specialized closure #1 in FormatterCache.formatter(for:creator:), a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

{
  uint64_t v2;

  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _OWORD *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(_OWORD **)(v3 + 16);
  long long v7 = v6[9];
  v13[8] = v6[8];
  v14[0] = v7;
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)v6 + 156);
  long long v8 = v6[5];
  v13[4] = v6[4];
  v13[5] = v8;
  long long v9 = v6[7];
  v13[6] = v6[6];
  v13[7] = v9;
  long long v10 = v6[1];
  v13[0] = *v6;
  v13[1] = v10;
  long long v11 = v6[3];
  v13[2] = v6[2];
  v13[3] = v11;
  uint64_t result = a2(a1, v13);
  if (!v4) {
    *a3 = result;
  }
  return result;
}

id NSDimension.skeleton.getter()
{
  id result = objc_msgSend((id)swift_getObjCClassFromObject(), sel_icuType);
  if (result)
  {
    uint64_t v2 = result;
    id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v5 = v4;

    id v6 = objc_msgSend(v0, sel_icuSubtype);
    if (v6)
    {
      long long v7 = v6;
      id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      long long v10 = v9;

      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      strcpy((char *)v14, "measure-unit/");
      HIWORD(v14[1]) = -4864;
      v11._countAndFlagsBits = (uint64_t)v3;
      v11._object = v5;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 45;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = (uint64_t)v8;
      v13._object = v10;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      return (id)v14[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v10 - 8);
  Swift::String v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v13 - 8);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *a3;
  int v17 = *a4;
  uint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  if (a2)
  {
    v35._countAndFlagsBits = a1;
    v35._object = a2;
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    unint64_t v19 = 0x80000001823AAC30;
    if (v16 == 1) {
      unint64_t v20 = 0xD000000000000010;
    }
    else {
      unint64_t v20 = 0xD000000000000011;
    }
    if (v16 != 1) {
      unint64_t v19 = 0x80000001823AAC50;
    }
    uint64_t v21 = v16 ? v20 : 0xD000000000000014;
    v22 = (void *)(v16 ? v19 : 0x80000001823AABB0);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    if (v17 != 14)
    {
      if (Usage.rawValue.getter(v17) == 0x6469766F72507361 && v24 == 0xEA00000000006465) {
        goto LABEL_19;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0
        && objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_supportsRegionalPreference))
      {
        v26._countAndFlagsBits = Usage.rawValue.getter(v17);
        v35._countAndFlagsBits = 0x2F656761737520;
        v35._object = (void *)0xE700000000000000;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        String.append(_:)(v35);
LABEL_19:
        swift_bridgeObjectRelease();
      }
    }
  }
  outlined init with copy of FloatingPointFormatStyle<Double>?(a5, (uint64_t)v15);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v15, 1, v27) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }
  else
  {
    outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)&v15[*(int *)(v27 + 36)], (uint64_t)v12);
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v28 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
    v30 = v29;
    outlined destroy of NumberFormatStyleConfiguration.Collection((uint64_t)v12);
    swift_bridgeObjectRetain();
    uint64_t v31 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v31 >= 1)
    {
      v32._countAndFlagsBits = 32;
      v32._object = (void *)0xE100000000000000;
      String.append(_:)(v32);
    }
    v33._countAndFlagsBits = v28;
    v33._object = v30;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
  }
  return v36;
}

uint64_t outlined init with copy of FloatingPointFormatStyle<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 32);
  long long v7 = (_OWORD *)(a1 + v6);
  id v8 = (_OWORD *)(a2 + v6);
  swift_unknownObjectRetain();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v29 = v10;
    uint64_t v32 = v3;
    *long long v7 = *v8;
    uint64_t v12 = *(int *)(v9 + 36);
    uint64_t v13 = (char *)v7 + v12;
    uint64_t v14 = (char *)v8 + v12;
    v13[8] = v14[8];
    *(void *)uint64_t v13 = *(void *)v14;
    *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
    long long v15 = *((_OWORD *)v14 + 3);
    long long v16 = *((_OWORD *)v14 + 1);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v15;
    *((_OWORD *)v13 + 1) = v16;
    v13[73] = v14[73];
    v13[76] = v14[76];
    *((_WORD *)v13 + 37) = *((_WORD *)v14 + 37);
    v13[77] = v14[77];
    uint64_t v17 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v18 = *(int *)(v17 + 36);
    __dst = &v13[v18];
    uint64_t v31 = v17;
    unint64_t v19 = &v14[v18];
    uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v21 = *(void *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_unknownObjectRetain();
    if (v22(v19, 1, v20))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v24 = *(int *)(v31 + 40);
    char v25 = &v13[v24];
    Swift::String v26 = &v14[v24];
    *(void *)char v25 = *(void *)v26;
    v25[8] = v26[8];
    v13[*(int *)(v31 + 44)] = v14[*(int *)(v31 + 44)];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v7, 0, 1, v9);
    uint64_t v3 = v32;
  }
  uint64_t v27 = *(int *)(v3 + 40);
  *(unsigned char *)(a1 + *(int *)(v3 + 36)) = *(unsigned char *)(a2 + *(int *)(v3 + 36));
  *(unsigned char *)(a1 + v27) = *(unsigned char *)(a2 + v27);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_4_1);
}

uint64_t destroy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t v7 = *(int *)(v5 + 36);
    uint64_t v8 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36) + v7;
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9);
    if (!result)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
      return v10(v8, v9);
    }
  }
  return result;
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *(void *)(a1 + 40) >> 1;
    int v5 = -2 - v4;
    if (-2 - (int)v4 < 0) {
      int v5 = -1;
    }
    if (v4 > 0x80000000) {
      return (v5 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 36);
    return v10(v12, a2, v11);
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm_2(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t __swift_get_extra_inhabitant_indexTm_4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_4_1);
}

uint64_t NumberFormatStyleConfiguration.Collection.skeleton.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v2 - 8);
  v116 = &v106[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v118 = *(void *)(v4 - 8);
  uint64_t v119 = v4;
  MEMORY[0x1F4188790](v4);
  v114 = &v106[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  v117 = &v106[-v7];
  unint64_t v131 = 0;
  unint64_t v132 = 0xE000000000000000;
  if ((*(unsigned char *)(v0 + 8) & 1) == 0)
  {
    uint64_t v113 = v0;
    double v8 = *(double *)v0;
    uint64_t v123 = 0x2F656C616373;
    unint64_t v124 = 0xE600000000000000;
    specialized NSDecimal.init(_:)(v8);
    unint64_t v10 = v9;
    LOWORD(v12) = v11;
    LOWORD(v14) = v13;
    *(void *)v125 = v9;
    unint64_t v15 = HIDWORD(v9);
    uint64_t v16 = HIWORD(v9);
    unint64_t v17 = v11 >> 16;
    *(void *)&v125[8] = v11;
    unint64_t v18 = HIDWORD(v11);
    unint64_t v19 = HIWORD(v11);
    LODWORD(v20) = HIWORD(v13);
    *(_DWORD *)&v125[16] = v13;
    if (_So9NSDecimala__length_getter(v125)) {
      goto LABEL_3;
    }
    *(_DWORD *)v125 = v10;
    *(_WORD *)&v125[4] = v15;
    *(_WORD *)&v125[6] = v16;
    *(_WORD *)&v125[8] = v12;
    *(_WORD *)&v125[10] = v17;
    *(_WORD *)&v125[12] = v18;
    *(_WORD *)&v125[14] = v19;
    *(_WORD *)&v125[16] = v14;
    *(_WORD *)&v125[18] = v20;
    if (!_So9NSDecimala__isNegative_getter(v125))
    {
LABEL_3:
      *(_DWORD *)v125 = v10;
      *(_WORD *)&v125[4] = v15;
      *(_WORD *)&v125[6] = v16;
      *(_WORD *)&v125[8] = v12;
      *(_WORD *)&v125[10] = v17;
      *(_WORD *)&v125[12] = v18;
      *(_WORD *)&v125[14] = v19;
      *(_WORD *)&v125[16] = v14;
      *(_WORD *)&v125[18] = v20;
      if (_So9NSDecimala__length_getter(v125))
      {
        uint64_t v121 = 0;
        unint64_t v122 = 0xE000000000000000;
        *(_DWORD *)v125 = v10;
        *(_WORD *)&v125[4] = v15;
        *(_WORD *)&v125[6] = v16;
        *(_WORD *)&v125[8] = v12;
        *(_WORD *)&v125[10] = v17;
        *(_WORD *)&v125[12] = v18;
        *(_WORD *)&v125[14] = v19;
        *(_WORD *)&v125[16] = v14;
        *(_WORD *)&v125[18] = v20;
        *(_DWORD *)v120 = v10;
        *(_WORD *)&v120[4] = v15;
        *(_WORD *)&v120[6] = v16;
        *(_WORD *)&v120[8] = v12;
        *(_WORD *)&v120[10] = v17;
        *(_WORD *)&v120[12] = v18;
        *(_WORD *)&v120[14] = v19;
        *(_WORD *)&v120[16] = v14;
        *(_WORD *)&v120[18] = v20;
        if ((int)_So9NSDecimala__exponent_getter(v120) >= 1)
        {
          do
          {
            v21._countAndFlagsBits = 48;
            v21._object = (void *)0xE100000000000000;
            String.append(_:)(v21);
            *(_DWORD *)v120 = v10;
            *(_WORD *)&v120[4] = v15;
            *(_WORD *)&v120[6] = v16;
            *(_WORD *)&v120[8] = v12;
            *(_WORD *)&v120[10] = v17;
            *(_WORD *)&v120[12] = v18;
            *(_WORD *)&v120[14] = v19;
            *(_WORD *)&v120[16] = v14;
            *(_WORD *)&v120[18] = v20;
            int v22 = _So9NSDecimala__exponent_getter(v120);
            _So9NSDecimala__exponent_setter((v22 - 1), v125);
            unint64_t v10 = *(unsigned int *)v125;
            unint64_t v15 = *(unsigned __int16 *)&v125[4];
            LOWORD(v16) = *(_WORD *)&v125[6];
            LOWORD(v12) = *(_WORD *)&v125[8];
            LOWORD(v17) = *(_WORD *)&v125[10];
            LOWORD(v18) = *(_WORD *)&v125[12];
            LOWORD(v19) = *(_WORD *)&v125[14];
            LOWORD(v14) = *(_WORD *)&v125[16];
            LOWORD(v20) = *(_WORD *)&v125[18];
            *(void *)v120 = *(void *)v125;
            *(void *)&v120[8] = *(void *)&v125[8];
            *(_DWORD *)&v120[16] = *(_DWORD *)&v125[16];
          }
          while ((int)_So9NSDecimala__exponent_getter(v120) > 0);
        }
        *(_DWORD *)v120 = v10;
        *(_WORD *)&v120[4] = v15;
        *(_WORD *)&v120[6] = v16;
        *(_WORD *)&v120[8] = v12;
        *(_WORD *)&v120[10] = v17;
        *(_WORD *)&v120[12] = v18;
        *(_WORD *)&v120[14] = v19;
        *(_WORD *)&v120[16] = v14;
        *(_WORD *)&v120[18] = v20;
        if (!_So9NSDecimala__exponent_getter(v120))
        {
          _So9NSDecimala__exponent_setter(1, v125);
          unint64_t v10 = *(unsigned int *)v125;
          unint64_t v15 = *(unsigned __int16 *)&v125[4];
          LOWORD(v16) = *(_WORD *)&v125[6];
          LOWORD(v12) = *(_WORD *)&v125[8];
          LOWORD(v17) = *(_WORD *)&v125[10];
          LOWORD(v18) = *(_WORD *)&v125[12];
          LOWORD(v19) = *(_WORD *)&v125[14];
          LOWORD(v14) = *(_WORD *)&v125[16];
          LOWORD(v20) = *(_WORD *)&v125[18];
        }
        unint64_t v112 = v10;
        *(_DWORD *)v120 = v10;
        LOWORD(v23) = v15;
        *(_WORD *)&v120[4] = v15;
        *(_WORD *)&v120[6] = v16;
        *(_WORD *)&v120[8] = v12;
        *(_WORD *)&v120[10] = v17;
        *(_WORD *)&v120[12] = v18;
        *(_WORD *)&v120[14] = v19;
        *(_WORD *)&v120[16] = v14;
        *(_WORD *)&v120[18] = v20;
        if (_So9NSDecimala__length_getter(v120))
        {
          uint64_t v111 = 0;
          unint64_t v24 = v15;
          uint64_t v23 = v112;
          while (1)
          {
            uint64_t v115 = v24;
            *(_DWORD *)v120 = v23;
            *(_WORD *)&v120[4] = v24;
            *(_WORD *)&v120[6] = v16;
            *(_WORD *)&v120[8] = v12;
            *(_WORD *)&v120[10] = v17;
            *(_WORD *)&v120[12] = v18;
            *(_WORD *)&v120[14] = v19;
            *(_WORD *)&v120[16] = v14;
            *(_WORD *)&v120[18] = v20;
            if (!_So9NSDecimala__exponent_getter(v120))
            {
              unint64_t v112 = v23;
              v25._countAndFlagsBits = 46;
              v25._object = (void *)0xE100000000000000;
              String.append(_:)(v25);
              LODWORD(v23) = v112;
            }
            *(_DWORD *)v120 = v23;
            *(_WORD *)&v120[4] = v115;
            *(_WORD *)&v120[6] = v16;
            *(_WORD *)&v120[8] = v12;
            *(_WORD *)&v120[10] = v17;
            *(_WORD *)&v120[12] = v18;
            *(_WORD *)&v120[14] = v19;
            *(_WORD *)&v120[16] = v14;
            *(_WORD *)&v120[18] = v20;
            int v26 = _So9NSDecimala__exponent_getter(v120);
            _So9NSDecimala__exponent_setter((v26 + 1), v125);
            uint64_t v27 = *(unsigned int *)v125;
            LOWORD(v19) = *(_WORD *)&v125[6];
            LOWORD(v17) = *(_WORD *)&v125[14];
            unint64_t v112 = *(unsigned __int16 *)&v125[4];
            uint64_t v110 = *(unsigned __int16 *)&v125[8];
            uint64_t v109 = *(unsigned __int16 *)&v125[10];
            uint64_t v108 = *(unsigned __int16 *)&v125[12];
            LOWORD(v18) = *(_WORD *)&v125[18];
            int v107 = *(unsigned __int16 *)&v125[16];
            NSDecimal.asVariableLengthInteger()(*(unsigned int *)v125 | ((unint64_t)*(unsigned __int16 *)&v125[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v125[6] << 48), *(unsigned __int16 *)&v125[8] | ((unint64_t)*(unsigned __int16 *)&v125[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v125[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v125[14] << 48), *(unsigned __int16 *)&v125[16] | (*(unsigned __int16 *)&v125[18] << 16));
            uint64_t v23 = v28;
            uint64_t v20 = *(void *)(v28 + 16);
            uint64_t v115 = v27;
            if (v20)
            {
              uint64_t v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              uint64_t v16 = v12 + 30;
              *(void *)(v12 + 16) = v20;
              bzero((void *)(v12 + 32), 2 * v20);
              unsigned int v29 = *(unsigned __int16 *)(2 * v20 + v23 + 30);
              unsigned int v30 = v29 / 0xA;
              while (1)
              {
                *(_WORD *)(v16 + 2 * v20) = v30;
                unsigned int v14 = v29 % 0xA;
                if (v20 == 1) {
                  break;
                }
                unsigned int v29 = *(unsigned __int16 *)(v23 + 28 + 2 * v20) | (v14 << 16);
                unsigned int v30 = v29 / 0xA;
                unint64_t v31 = v20 - 2;
                --v20;
                if (v31 >= *(void *)(v12 + 16))
                {
                  __break(1u);
                  goto LABEL_29;
                }
              }
            }
            else
            {
              unsigned int v14 = 0;
              uint64_t v12 = MEMORY[0x1E4FBC860];
            }
            uint64_t v32 = *(void *)(v12 + 16);
            if (v32 && !*(_WORD *)(v12 + 2 * v32 + 30))
            {
              do
              {
                *(void *)(v12 + 16) = v32 - 1;
                if (v32 == 1) {
                  break;
                }
              }
              while (!*(unsigned __int16 *)(v12 + 28 + 2 * v32--));
            }
            swift_bridgeObjectRelease();
            *(_DWORD *)v120 = v115;
            *(_WORD *)&v120[4] = v112;
            *(_WORD *)&v120[6] = v19;
            *(_WORD *)&v120[8] = v110;
            *(_WORD *)&v120[10] = v109;
            *(_WORD *)&v120[12] = v108;
            *(_WORD *)&v120[14] = v17;
            *(_WORD *)&v120[16] = v107;
            *(_WORD *)&v120[18] = v18;
            NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v12);
            if (v34) {
              goto LABEL_105;
            }
            uint64_t v111 = 0;
            unint64_t v35 = *(void *)(v12 + 16);
            swift_bridgeObjectRelease();
            if (HIDWORD(v35)) {
              goto LABEL_106;
            }
            _So9NSDecimala__length_setter(v35, v120);
            *(_DWORD *)v125 = *(_DWORD *)v120;
            *(_OWORD *)&v125[4] = *(_OWORD *)&v120[4];
            *(void *)v120 = v14 | 0x30;
            v36._countAndFlagsBits = MEMORY[0x185302020](v120, 1);
            String.append(_:)(v36);
            swift_bridgeObjectRelease();
            uint64_t v23 = *(unsigned int *)v125;
            uint64_t v115 = *(unsigned __int16 *)&v125[4];
            LOWORD(v16) = *(_WORD *)&v125[6];
            LOWORD(v12) = *(_WORD *)&v125[8];
            LOWORD(v17) = *(_WORD *)&v125[10];
            LOWORD(v18) = *(_WORD *)&v125[12];
            LOWORD(v19) = *(_WORD *)&v125[14];
            LOWORD(v14) = *(_WORD *)&v125[16];
            LOWORD(v20) = *(_WORD *)&v125[18];
            *(void *)v120 = *(void *)v125;
            *(void *)&v120[8] = *(void *)&v125[8];
            *(_DWORD *)&v120[16] = *(_DWORD *)&v125[16];
            int v37 = _So9NSDecimala__length_getter(v120);
            unint64_t v24 = v115;
            if (!v37) {
              goto LABEL_30;
            }
          }
        }
LABEL_29:
        LOWORD(v24) = v23;
        LODWORD(v23) = v112;
LABEL_30:
        *(_DWORD *)v120 = v23;
        *(_WORD *)&v120[4] = v24;
        *(_WORD *)&v120[6] = v16;
        *(_WORD *)&v120[8] = v12;
        *(_WORD *)&v120[10] = v17;
        *(_WORD *)&v120[12] = v18;
        *(_WORD *)&v120[14] = v19;
        *(_WORD *)&v120[16] = v14;
        *(_WORD *)&v120[18] = v20;
        __int16 v40 = v24;
        int v41 = v23;
        if ((int)_So9NSDecimala__exponent_getter(v120) <= 0)
        {
          while (1)
          {
            *(_DWORD *)v120 = v41;
            *(_WORD *)&v120[4] = v40;
            *(_WORD *)&v120[6] = v16;
            *(_WORD *)&v120[8] = v12;
            *(_WORD *)&v120[10] = v17;
            *(_WORD *)&v120[12] = v18;
            *(_WORD *)&v120[14] = v19;
            *(_WORD *)&v120[16] = v14;
            *(_WORD *)&v120[18] = v20;
            if (!_So9NSDecimala__exponent_getter(v120)) {
              break;
            }
            v42._countAndFlagsBits = 48;
            v42._object = (void *)0xE100000000000000;
            String.append(_:)(v42);
            *(_DWORD *)v120 = v41;
            *(_WORD *)&v120[4] = v40;
            *(_WORD *)&v120[6] = v16;
            *(_WORD *)&v120[8] = v12;
            *(_WORD *)&v120[10] = v17;
            *(_WORD *)&v120[12] = v18;
            *(_WORD *)&v120[14] = v19;
            *(_WORD *)&v120[16] = v14;
            *(_WORD *)&v120[18] = v20;
            int v43 = _So9NSDecimala__exponent_getter(v120);
            _So9NSDecimala__exponent_setter((v43 + 1), v125);
            int v41 = *(_DWORD *)v125;
            __int16 v40 = *(_WORD *)&v125[4];
            LOWORD(v16) = *(_WORD *)&v125[6];
            LOWORD(v12) = *(_WORD *)&v125[8];
            LOWORD(v17) = *(_WORD *)&v125[10];
            LOWORD(v18) = *(_WORD *)&v125[12];
            LOWORD(v19) = *(_WORD *)&v125[14];
            LOWORD(v14) = *(_WORD *)&v125[16];
            LOWORD(v20) = *(_WORD *)&v125[18];
          }
          v44._countAndFlagsBits = 46;
          v44._object = (void *)0xE100000000000000;
          String.append(_:)(v44);
          v45._countAndFlagsBits = 48;
          v45._object = (void *)0xE100000000000000;
          String.append(_:)(v45);
        }
        *(_DWORD *)v120 = v41;
        *(_WORD *)&v120[4] = v40;
        *(_WORD *)&v120[6] = v16;
        *(_WORD *)&v120[8] = v12;
        *(_WORD *)&v120[10] = v17;
        *(_WORD *)&v120[12] = v18;
        *(_WORD *)&v120[14] = v19;
        *(_WORD *)&v120[16] = v14;
        *(_WORD *)&v120[18] = v20;
        if (_So9NSDecimala__isNegative_getter(v120))
        {
          v46._countAndFlagsBits = 45;
          v46._object = (void *)0xE100000000000000;
          String.append(_:)(v46);
        }
        *(void *)v120 = v121;
        *(void *)&v120[8] = v122;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
        uint64_t v39 = String.init<A>(_:)();
        unint64_t v38 = v47;
      }
      else
      {
        unint64_t v38 = 0xE100000000000000;
        uint64_t v39 = 48;
      }
    }
    else
    {
      unint64_t v38 = 0xE300000000000000;
      uint64_t v39 = 5136718;
    }
    uint64_t v1 = v113;
    unint64_t v48 = v38;
    String.append(_:)(*(Swift::String *)&v39);
    swift_bridgeObjectRelease();
    *(void *)v125 = v123;
    *(void *)&v125[8] = v124;
    swift_bridgeObjectRetain();
    v49._countAndFlagsBits = 32;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v125);
    swift_bridgeObjectRelease();
  }
  uint64_t v51 = *(void *)(v1 + 16);
  uint64_t v50 = *(void *)(v1 + 24);
  uint64_t v53 = *(void *)(v1 + 32);
  unint64_t v52 = *(void *)(v1 + 40);
  uint64_t v55 = *(void *)(v1 + 48);
  unint64_t v54 = *(void *)(v1 + 56);
  uint64_t v56 = *(void *)(v1 + 64);
  unsigned int v57 = *(unsigned __int8 *)(v1 + 72);
  v58 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v59 = v1 + v58[10];
  int v60 = *(unsigned __int8 *)(v59 + 8);
  if (v52 >> 1 == 0xFFFFFFFF && v54 <= 1 && v57 < 2)
  {
    uint64_t v62 = v118;
    uint64_t v61 = v119;
    v63 = v117;
    uint64_t v64 = (uint64_t)v116;
    if (v60 == 255) {
      goto LABEL_56;
    }
    *(void *)v125 = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(*(void *)v59, v60 & 1);
    *(void *)&v125[8] = v65;
    swift_bridgeObjectRetain();
    goto LABEL_54;
  }
  if (v60 != 255)
  {
    int64_t v66 = *(void *)v59;
    *(void *)v125 = v51;
    *(void *)&v125[8] = v50;
    *(void *)&v125[16] = v53;
    unint64_t v126 = v52;
    uint64_t v127 = v55;
    unint64_t v128 = v54;
    uint64_t v129 = v56;
    char v130 = v57;
    v67._countAndFlagsBits = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(v66, v60 & 1);
    Swift::String v68 = NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(v67);
    swift_bridgeObjectRelease();
    *(Swift::String *)v125 = v68;
    swift_bridgeObjectRetain();
    v69._countAndFlagsBits = 32;
    v69._object = (void *)0xE100000000000000;
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v125);
    uint64_t v62 = v118;
    uint64_t v61 = v119;
    v63 = v117;
    uint64_t v64 = (uint64_t)v116;
LABEL_55:
    swift_bridgeObjectRelease();
LABEL_56:
    int v77 = *(unsigned __int8 *)(v1 + 73);
    if (v77 != 2)
    {
      BOOL v78 = (v77 & 1) == 0;
      uint64_t v79 = 0x666F2D70756F7267;
      if (v78)
      {
        uint64_t v79 = 0;
        unint64_t v80 = 0xE000000000000000;
      }
      else
      {
        unint64_t v80 = 0xE900000000000066;
      }
      *(void *)v125 = v79;
      *(void *)&v125[8] = v80;
      swift_bridgeObjectRetain();
      v81._countAndFlagsBits = 32;
      v81._object = (void *)0xE100000000000000;
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v125);
      swift_bridgeObjectRelease();
    }
    int v82 = *(unsigned __int16 *)(v1 + 74) | (*(unsigned __int8 *)(v1 + 76) << 16);
    if (*(_WORD *)(v1 + 74) != 2)
    {
      uint64_t v83 = 0x76656E2D6E676973;
      if ((*(_WORD *)(v1 + 74) & 0x100) == 0) {
        uint64_t v83 = 0x7475612D6E676973;
      }
      unint64_t v84 = 0xE90000000000006FLL;
      if ((*(_WORD *)(v1 + 74) & 0x100) != 0) {
        unint64_t v84 = 0xEA00000000007265;
      }
      unint64_t v85 = 0xD000000000000010;
      if ((v82 & 0x10000) == 0) {
        unint64_t v85 = 0x776C612D6E676973;
      }
      unint64_t v86 = 0x80000001823AAB50;
      if ((v82 & 0x10000) == 0) {
        unint64_t v86 = 0xEB00000000737961;
      }
      if (*(_WORD *)(v1 + 74)) {
        unint64_t v87 = v83;
      }
      else {
        unint64_t v87 = v85;
      }
      if (*(_WORD *)(v1 + 74)) {
        unint64_t v88 = v84;
      }
      else {
        unint64_t v88 = v86;
      }
      *(void *)v125 = v87;
      *(void *)&v125[8] = v88;
      swift_bridgeObjectRetain();
      v89._countAndFlagsBits = 32;
      v89._object = (void *)0xE100000000000000;
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v125);
      swift_bridgeObjectRelease();
    }
    int v90 = *(unsigned __int8 *)(v1 + 77);
    if (v90 != 2)
    {
      if (v90) {
        unint64_t v91 = 0xEE00737961776C61;
      }
      else {
        unint64_t v91 = 0xEC0000006F747561;
      }
      *(void *)v125 = 0x2D6C616D69636564;
      *(void *)&v125[8] = v91;
      swift_bridgeObjectRetain();
      v92._countAndFlagsBits = 32;
      v92._object = (void *)0xE100000000000000;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v125);
      swift_bridgeObjectRelease();
    }
    outlined init with copy of FloatingPointRoundingRule?(v1 + v58[9], v64);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v64, 1, v61) == 1)
    {
      outlined destroy of Any?(v64, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      goto LABEL_98;
    }
    unint64_t v93 = 0xD000000000000010;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v62 + 32))(v63, v64, v61);
    v94 = v114;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 16))(v114, v63, v61);
    int v95 = (*(uint64_t (**)(unsigned char *, uint64_t))(v62 + 88))(v94, v61);
    if (v95 == *MEMORY[0x1E4FBBEA0])
    {
      unint64_t v93 = 0xD000000000000015;
      v96 = "rounding-mode-half-up";
    }
    else if (v95 == *MEMORY[0x1E4FBBE98])
    {
      unint64_t v93 = 0xD000000000000017;
      v96 = "rounding-mode-half-even";
    }
    else if (v95 == *MEMORY[0x1E4FBBEA8])
    {
      unint64_t v93 = 0xD000000000000015;
      v96 = "rounding-mode-ceiling";
    }
    else if (v95 == *MEMORY[0x1E4FBBEB0])
    {
      unint64_t v93 = 0xD000000000000013;
      v96 = "rounding-mode-floor";
    }
    else if (v95 == *MEMORY[0x1E4FBBE88])
    {
      unint64_t v93 = 0xD000000000000012;
      v96 = "rounding-mode-down";
    }
    else
    {
      if (v95 != *MEMORY[0x1E4FBBE90])
      {
        (*(void (**)(unsigned char *, uint64_t))(v62 + 8))(v94, v61);
        unint64_t v93 = 0;
        unint64_t v97 = 0xE000000000000000;
        goto LABEL_97;
      }
      v96 = "rounding-mode-up";
    }
    unint64_t v97 = (unint64_t)(v96 - 32) | 0x8000000000000000;
LABEL_97:
    *(void *)v125 = v93;
    *(void *)&v125[8] = v97;
    swift_bridgeObjectRetain();
    v98._countAndFlagsBits = 32;
    v98._object = (void *)0xE100000000000000;
    String.append(_:)(v98);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v125);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v62 + 8))(v63, v61);
LABEL_98:
    uint64_t v99 = *(unsigned __int8 *)(v1 + v58[11]);
    unint64_t v100 = 0xE000000000000000;
    switch(*(unsigned char *)(v1 + v58[11]))
    {
      case 1:
        uint64_t v99 = 0x6669746E65696373;
        unint64_t v100 = 0xEA00000000006369;
        goto LABEL_101;
      case 2:
        unint64_t v100 = 0xED000074726F6873;
        uint64_t v99 = 0x2D746361706D6F63;
        goto LABEL_101;
      case 3:
        goto LABEL_102;
      default:
LABEL_101:
        *(void *)v125 = v99;
        *(void *)&v125[8] = v100;
        swift_bridgeObjectRetain();
        v101._countAndFlagsBits = 32;
        v101._object = (void *)0xE100000000000000;
        String.append(_:)(v101);
        swift_bridgeObjectRelease();
        String.append(_:)(*(Swift::String *)v125);
        swift_bridgeObjectRelease();
LABEL_102:
        unint64_t v102 = v131;
        unint64_t v103 = v132;
        swift_bridgeObjectRetain();
        specialized BidirectionalCollection._trimmingCharacters(while:)(v102, v103);
        swift_bridgeObjectRelease();
        uint64_t v104 = String.init(_:)();
        swift_bridgeObjectRelease();
        uint64_t result = v104;
        break;
    }
    return result;
  }
  if ((v57 & 0x80) != 0)
  {
    uint64_t v72 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(v51, v50 & 1, v53, v52 & 1, v55, v54 & 1, v56, v57 & 1);
    uint64_t v74 = v73;
    uint64_t v62 = v118;
    uint64_t v61 = v119;
    v63 = v117;
    uint64_t v64 = (uint64_t)v116;
LABEL_53:
    *(void *)v125 = v72;
    *(void *)&v125[8] = v74;
    swift_bridgeObjectRetain();
LABEL_54:
    v76._countAndFlagsBits = 32;
    v76._object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v125);
    goto LABEL_55;
  }
  *(void *)v125 = MEMORY[0x185302340](64, 0xE100000000000000, v51);
  *(void *)&v125[8] = v70;
  if (v53)
  {
    v75._countAndFlagsBits = 43;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    goto LABEL_52;
  }
  if (!__OFSUB__(v50, v51))
  {
    v71._countAndFlagsBits = MEMORY[0x185302340](35, 0xE100000000000000, v50 - v51);
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
LABEL_52:
    uint64_t v62 = v118;
    uint64_t v61 = v119;
    v63 = v117;
    uint64_t v64 = (uint64_t)v116;
    uint64_t v72 = *(void *)v125;
    uint64_t v74 = *(void *)&v125[8];
    goto LABEL_53;
  }
  __break(1u);
LABEL_105:
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_106:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  int v11 = a4 & 1;
  if (a6)
  {
    if (a8) {
      goto LABEL_9;
    }
    if (a7)
    {
      a5 = 0;
LABEL_8:
      v12._countAndFlagsBits = NumberFormatStyleConfiguration.Precision.fractionalStem(min:max:)(a5, a7, a8 & 1);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
LABEL_9:
      if ((a2 & 1) == 0) {
        goto LABEL_13;
      }
LABEL_12:
      if (v11) {
        return 0;
      }
      goto LABEL_13;
    }
  }
  else if ((a8 & 1) != 0 || a7)
  {
    goto LABEL_8;
  }
  v13._object = (void *)0x80000001823AAB70;
  v13._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v13);
  if (a2) {
    goto LABEL_12;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v14 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v14 >= 1)
  {
    v15._countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
  }
  if (a2) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a1;
  }
  v17._countAndFlagsBits = NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(v16, a3, v11);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined destroy of NumberFormatStyleConfiguration.Collection(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ICUMeasurementNumberFormatter()
{
  return self;
}

uint64_t NumberFormatStyleConfiguration.Precision.fractionalStem(min:max:)(uint64_t a1, uint64_t a2, char a3)
{
  v6._countAndFlagsBits = MEMORY[0x185302340](48, 0xE100000000000000, a1);
  String.append(_:)(v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (a3)
  {
    v8._countAndFlagsBits = 43;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
  }
  else
  {
    if (a2 < a1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (__OFSUB__(a2, a1))
    {
      __break(1u);
      return result;
    }
    v9._countAndFlagsBits = MEMORY[0x185302340](35, 0xE100000000000000, a2 - a1);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
  }
  return 46;
}

uint64_t Measurement<>.FormatStyle.skeletonForUsage(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void **)a1;
  double v6 = *(double *)(a1 + 8);
  uint64_t v7 = *(int *)(a2 + 36);
  int v8 = *(unsigned __int8 *)(v3 + v7);
  if (v8 != 14)
  {
    if (Usage.rawValue.getter(*(unsigned char *)(v3 + v7)) == 0x6469766F72507361 && v9 == 0xEA00000000006465)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        *(_OWORD *)uint64_t v23 = *(_OWORD *)(v3 + 8);
        uint64_t v12 = *(void *)(a2 + 16);
        Swift::String v13 = (void *)swift_dynamicCastUnknownClassUnconditional();
        unsigned __int8 v24 = v8;
        swift_unknownObjectRetain();
        id v14 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)v23, v13, &v24, v12);
        swift_unknownObjectRelease();
        self;
        uint64_t v15 = swift_dynamicCastObjCClassUnconditional();
        specialized Measurement<>.converted(to:)(v23, v15, v5, v6);

        id v16 = *(id *)v23;
        goto LABEL_10;
      }
    }
  }
  id v16 = v5;
LABEL_10:
  id v17 = v16;
  id v18 = NSDimension.skeleton.getter();
  uint64_t v20 = v19;

  if (v20)
  {
    if (*(unsigned char *)(v3 + *(int *)(a2 + 40)) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = (void *)0x80000001823AD850;
      id v18 = (id)0xD000000000000020;
    }
    v23[0] = *(unsigned char *)v3;
    unsigned __int8 v24 = 14;
    uint64_t v21 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v18, v20, v23, &v24, v3 + *(int *)(a2 + 32));

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v21;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void v17[2];
  long long v18;

  uint64_t v3 = v2;
  uint64_t v5 = *(void **)a1;
  double v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v3 + *(int *)(a2 + 36));
  id v18 = *(_OWORD *)(v3 + 8);
  if (v7 == 14) {
    int v8 = 0;
  }
  else {
    int v8 = v7;
  }
  LOBYTE(v17[0]) = v8;
  uint64_t v9 = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  unint64_t v10 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)&v18, v5, (unsigned __int8 *)v17, v9);
  swift_unknownObjectRelease();
  v17[0] = v5;
  v17[1] = v6;
  type metadata accessor for Measurement();
  Measurement<>.converted(to:)(v10, (double *)&v18);
  char v11 = (id)v18;
  uint64_t v12 = NSDimension.skeleton.getter();
  id v14 = v13;

  if (v14)
  {
    LOBYTE(v18) = *(unsigned char *)v3;
    LOBYTE(v17[0]) = v7;
    uint64_t v15 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v12, v14, (unsigned __int8 *)&v18, (unsigned __int8 *)v17, v3 + *(int *)(a2 + 32));

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v15;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_135;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  v114 = v3;
  uint64_t v115 = (void *)(v6 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v119 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  swift_retain();
  int64_t v13 = 0;
  uint64_t v117 = v8;
  uint64_t v118 = v6;
  char v116 = a2;
LABEL_8:
  if (v11)
  {
    uint64_t v124 = (v11 - 1) & v11;
    unint64_t v25 = __clz(__rbit64(v11)) | (v13 << 6);
  }
  else
  {
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_140;
    }
    if (v26 >= v119) {
      goto LABEL_130;
    }
    unint64_t v27 = v115[v26];
    ++v13;
    if (!v27)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v119) {
        goto LABEL_130;
      }
      unint64_t v27 = v115[v13];
      if (!v27)
      {
        int64_t v28 = v26 + 2;
        if (v28 >= v119) {
          goto LABEL_130;
        }
        unint64_t v27 = v115[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v13 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_141;
            }
            if (v13 >= v119) {
              break;
            }
            unint64_t v27 = v115[v13];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
LABEL_130:
          swift_release();
          uint64_t v4 = v114;
          if (a2)
          {
            uint64_t v113 = 1 << *(unsigned char *)(v6 + 32);
            if (v113 >= 64) {
              bzero(v115, ((unint64_t)(v113 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *uint64_t v115 = -1 << v113;
            }
            *(void *)(v6 + 16) = 0;
          }
LABEL_135:
          swift_release();
          *uint64_t v4 = v8;
          return;
        }
        int64_t v13 = v28;
      }
    }
LABEL_21:
    uint64_t v124 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v13 << 6);
  }
  int64_t v125 = v13;
  uint64_t v29 = *(void *)(v6 + 48) + 176 * v25;
  if (a2)
  {
    uint64_t v31 = *(void *)v29;
    uint64_t v30 = *(void *)(v29 + 8);
    uint64_t v32 = *(void *)(v29 + 16);
    uint64_t v33 = *(void *)(v29 + 24);
    outlined init with take of LocalePreferences?(v29 + 32, (uint64_t)&v146, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v123 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    uint64_t v34 = &v146;
  }
  else
  {
    long long v35 = *(_OWORD *)(v29 + 48);
    long long v36 = *(_OWORD *)(v29 + 64);
    long long v37 = *(_OWORD *)(v29 + 96);
    long long v151 = *(_OWORD *)(v29 + 80);
    long long v152 = v37;
    long long v149 = v35;
    long long v150 = v36;
    long long v38 = *(_OWORD *)(v29 + 112);
    long long v39 = *(_OWORD *)(v29 + 128);
    long long v40 = *(_OWORD *)(v29 + 144);
    *(_OWORD *)((char *)v155 + 12) = *(_OWORD *)(v29 + 156);
    long long v154 = v39;
    v155[0] = v40;
    long long v153 = v38;
    long long v42 = *(_OWORD *)(v29 + 16);
    long long v41 = *(_OWORD *)(v29 + 32);
    long long v146 = *(_OWORD *)v29;
    long long v147 = v42;
    long long v148 = v41;
    uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    uint64_t v33 = *((void *)&v42 + 1);
    uint64_t v32 = v42;
    uint64_t v30 = *((void *)&v146 + 1);
    uint64_t v31 = v146;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v146);
    uint64_t v123 = v43;
    swift_retain();
    uint64_t v34 = &v148;
  }
  outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)v156, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  uint64_t v122 = v31;
  String.hash(into:)();
  uint64_t v121 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)v145, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v44 = v33;
  uint64_t v126 = v32;
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v145) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_121;
  }
  outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)&v146, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v146 == 2)
  {
    Swift::UInt8 v45 = 0;
  }
  else
  {
    Swift::UInt8 v45 = v146 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v45);
  uint64_t v46 = *((void *)&v146 + 1);
  if (!*((void *)&v146 + 1))
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v146);
    Swift::String v49 = &v146;
    goto LABEL_39;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v46 + 16));
  uint64_t v47 = *(void *)(v46 + 16);
  if (!v47)
  {
    outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)&v135, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    Swift::String v49 = &v135;
LABEL_39:
    outlined retain of LocalePreferences(v49);
    if (!*((void *)&v147 + 1)) {
      goto LABEL_35;
    }
LABEL_40:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!*((void *)&v148 + 1)) {
      goto LABEL_36;
    }
LABEL_41:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v48 = v46 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v48 += 16;
    --v47;
  }
  while (v47);
  swift_bridgeObjectRelease();
  if (*((void *)&v147 + 1)) {
    goto LABEL_40;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (*((void *)&v148 + 1)) {
    goto LABEL_41;
  }
LABEL_36:
  Hasher._combine(_:)(0);
LABEL_42:
  uint64_t v50 = v149;
  uint64_t v120 = v33;
  if ((void)v149)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v51 = 0;
    int64_t v52 = 0;
    uint64_t v53 = v50 + 64;
    uint64_t v54 = 1 << *(unsigned char *)(v50 + 32);
    if (v54 < 64) {
      uint64_t v55 = ~(-1 << v54);
    }
    else {
      uint64_t v55 = -1;
    }
    unint64_t v56 = v55 & *(void *)(v50 + 64);
    int64_t v57 = (unint64_t)(v54 + 63) >> 6;
    long long v131 = v141;
    long long v133 = v140;
    long long v127 = v143;
    long long v129 = v142;
    uint64_t v58 = v144;
    while (1)
    {
      if (v56)
      {
        unint64_t v59 = __clz(__rbit64(v56));
        v56 &= v56 - 1;
        unint64_t v60 = v59 | (v52 << 6);
      }
      else
      {
        int64_t v63 = v52 + 1;
        if (__OFADD__(v52, 1))
        {
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        if (v63 >= v57) {
          goto LABEL_64;
        }
        unint64_t v64 = *(void *)(v53 + 8 * v63);
        ++v52;
        if (!v64)
        {
          int64_t v52 = v63 + 1;
          if (v63 + 1 >= v57) {
            goto LABEL_64;
          }
          unint64_t v64 = *(void *)(v53 + 8 * v52);
          if (!v64)
          {
            int64_t v52 = v63 + 2;
            if (v63 + 2 >= v57) {
              goto LABEL_64;
            }
            unint64_t v64 = *(void *)(v53 + 8 * v52);
            if (!v64)
            {
              int64_t v65 = v63 + 3;
              if (v65 >= v57)
              {
LABEL_64:
                swift_bridgeObjectRetain();
                Hasher._combine(_:)(v51);
                swift_bridgeObjectRelease();
                uint64_t v66 = *((void *)&v149 + 1);
                if (*((void *)&v149 + 1)) {
                  goto LABEL_65;
                }
LABEL_88:
                Hasher._combine(_:)(0);
LABEL_89:
                long long v82 = v150;
                long long v83 = v151;
                unint64_t v84 = (void *)v152;
                if ((void)v150)
                {
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  id v85 = *((id *)&v82 + 1);
                  id v86 = (id)v83;
                  id v87 = *((id *)&v83 + 1);
                  id v88 = v84;
                  id v89 = (id)v82;
                  _CFObject.hash(into:)();
                  if (*((void *)&v82 + 1)) {
                    goto LABEL_91;
                  }
LABEL_96:
                  Hasher._combine(_:)(0);
                  if (!(void)v83) {
                    goto LABEL_97;
                  }
LABEL_92:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  id v91 = (id)v83;
                  _CFObject.hash(into:)();

                  if (*((void *)&v83 + 1)) {
                    goto LABEL_93;
                  }
LABEL_98:
                  Hasher._combine(_:)(0);
                  if (!v84) {
                    goto LABEL_99;
                  }
LABEL_94:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  id v93 = v84;
                  _CFObject.hash(into:)();
                }
                else
                {
                  Hasher._combine(_:)(0);
                  id v94 = v84;
                  id v95 = *((id *)&v82 + 1);
                  id v96 = (id)v83;
                  id v97 = *((id *)&v83 + 1);
                  if (!*((void *)&v82 + 1)) {
                    goto LABEL_96;
                  }
LABEL_91:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  id v90 = *((id *)&v82 + 1);
                  _CFObject.hash(into:)();

                  if ((void)v83) {
                    goto LABEL_92;
                  }
LABEL_97:
                  Hasher._combine(_:)(0);
                  if (!*((void *)&v83 + 1)) {
                    goto LABEL_98;
                  }
LABEL_93:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
                  id v92 = *((id *)&v83 + 1);
                  _CFObject.hash(into:)();

                  if (v84) {
                    goto LABEL_94;
                  }
LABEL_99:
                  Hasher._combine(_:)(0);
                  id v93 = 0;
                }
                uint64_t v44 = v120;

                uint64_t v98 = *((void *)&v152 + 1);
                if (v98)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)((uint64_t)&v140, v98);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  Hasher._combine(_:)(0);
                }
                uint64_t v99 = v153;
                if ((void)v153)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)((uint64_t)&v140, v99);
                  swift_bridgeObjectRelease();
                  if ((void)v154) {
                    goto LABEL_105;
                  }
LABEL_107:
                  Hasher._combine(_:)(0);
                }
                else
                {
                  Hasher._combine(_:)(0);
                  if (!(void)v154) {
                    goto LABEL_107;
                  }
LABEL_105:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
                }
                if (BYTE8(v154) == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  Swift::UInt v100 = BYTE8(v154) & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v100);
                }
                if (BYTE9(v154) == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  Swift::UInt v101 = BYTE9(v154) & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v101);
                }
                if (BYTE10(v154) == 2)
                {
                  Swift::UInt8 v102 = 0;
                }
                else
                {
                  Swift::UInt8 v102 = BYTE10(v154) & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v102);
                if (BYTE11(v154) == 2)
                {
                  Swift::UInt8 v103 = 0;
                }
                else
                {
                  Swift::UInt8 v104 = BYTE11(v154) & 1;
                  Hasher._combine(_:)(1u);
                  Swift::UInt8 v103 = v104;
                }
                Hasher._combine(_:)(v103);
                outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                uint64_t v8 = v117;
                uint64_t v6 = v118;
                a2 = v116;
LABEL_121:
                Swift::Int v105 = Hasher._finalize()();
                uint64_t v106 = -1 << *(unsigned char *)(v8 + 32);
                unint64_t v107 = v105 & ~v106;
                unint64_t v108 = v107 >> 6;
                if (((-1 << v107) & ~*(void *)(v12 + 8 * (v107 >> 6))) != 0)
                {
                  unint64_t v14 = __clz(__rbit64((-1 << v107) & ~*(void *)(v12 + 8 * (v107 >> 6)))) | v107 & 0x7FFFFFFFFFFFFFC0;
                  uint64_t v15 = v126;
                }
                else
                {
                  char v109 = 0;
                  unint64_t v110 = (unint64_t)(63 - v106) >> 6;
                  uint64_t v15 = v126;
                  do
                  {
                    if (++v108 == v110 && (v109 & 1) != 0)
                    {
                      __break(1u);
                      goto LABEL_136;
                    }
                    BOOL v111 = v108 == v110;
                    if (v108 == v110) {
                      unint64_t v108 = 0;
                    }
                    v109 |= v111;
                    uint64_t v112 = *(void *)(v12 + 8 * v108);
                  }
                  while (v112 == -1);
                  unint64_t v14 = __clz(__rbit64(~v112)) + (v108 << 6);
                }
                *(void *)&long long v146 = v122;
                *((void *)&v146 + 1) = v121;
                *(void *)&long long v147 = v15;
                *((void *)&v147 + 1) = v44;
                outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)&v148, &demangling cache variable for type metadata for LocalePreferences?);
                *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
                id v16 = (_OWORD *)(*(void *)(v8 + 48) + 176 * v14);
                long long v18 = v147;
                long long v17 = v148;
                *id v16 = v146;
                v16[1] = v18;
                v16[2] = v17;
                long long v19 = v152;
                long long v21 = v149;
                long long v20 = v150;
                v16[5] = v151;
                v16[6] = v19;
                v16[3] = v21;
                v16[4] = v20;
                long long v22 = v153;
                long long v23 = v154;
                long long v24 = v155[0];
                *(_OWORD *)((char *)v16 + 156) = *(_OWORD *)((char *)v155 + 12);
                v16[8] = v23;
                v16[9] = v24;
                v16[7] = v22;
                *(void *)(*(void *)(v8 + 56) + 8 * v14) = v123;
                ++*(void *)(v8 + 16);
                unint64_t v11 = v124;
                int64_t v13 = v125;
                goto LABEL_8;
              }
              unint64_t v64 = *(void *)(v53 + 8 * v65);
              if (!v64)
              {
                while (1)
                {
                  int64_t v52 = v65 + 1;
                  if (__OFADD__(v65, 1)) {
                    break;
                  }
                  if (v52 >= v57) {
                    goto LABEL_64;
                  }
                  unint64_t v64 = *(void *)(v53 + 8 * v52);
                  ++v65;
                  if (v64) {
                    goto LABEL_63;
                  }
                }
LABEL_138:
                __break(1u);
                goto LABEL_139;
              }
              int64_t v52 = v65;
            }
          }
        }
LABEL_63:
        unint64_t v56 = (v64 - 1) & v64;
        unint64_t v60 = __clz(__rbit64(v64)) + (v52 << 6);
      }
      Swift::UInt v61 = *(unsigned __int8 *)(*(void *)(v50 + 48) + v60);
      Swift::UInt v62 = *(void *)(*(void *)(v50 + 56) + 8 * v60);
      long long v135 = v133;
      long long v136 = v131;
      long long v137 = v129;
      long long v138 = v127;
      uint64_t v139 = v58;
      Hasher._combine(_:)(v61);
      Hasher._combine(_:)(v62);
      v51 ^= Hasher._finalize()();
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v66 = *((void *)&v149 + 1);
  if (!*((void *)&v149 + 1)) {
    goto LABEL_88;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  Swift::UInt v67 = 0;
  int64_t v68 = 0;
  uint64_t v69 = v66 + 64;
  uint64_t v70 = 1 << *(unsigned char *)(v66 + 32);
  if (v70 < 64) {
    uint64_t v71 = ~(-1 << v70);
  }
  else {
    uint64_t v71 = -1;
  }
  unint64_t v72 = v71 & *(void *)(v66 + 64);
  int64_t v73 = (unint64_t)(v70 + 63) >> 6;
  long long v132 = v141;
  long long v134 = v140;
  long long v128 = v143;
  long long v130 = v142;
  uint64_t v74 = v144;
  while (1)
  {
    if (v72)
    {
      unint64_t v75 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      unint64_t v76 = v75 | (v68 << 6);
      goto LABEL_70;
    }
    int64_t v79 = v68 + 1;
    if (__OFADD__(v68, 1)) {
      goto LABEL_137;
    }
    if (v79 >= v73)
    {
LABEL_86:
      swift_bridgeObjectRetain();
      Hasher._combine(_:)(v67);
      swift_bridgeObjectRelease();
      goto LABEL_89;
    }
    unint64_t v80 = *(void *)(v69 + 8 * v79);
    ++v68;
    if (!v80)
    {
      int64_t v68 = v79 + 1;
      if (v79 + 1 >= v73) {
        goto LABEL_86;
      }
      unint64_t v80 = *(void *)(v69 + 8 * v68);
      if (!v80)
      {
        int64_t v68 = v79 + 2;
        if (v79 + 2 >= v73) {
          goto LABEL_86;
        }
        unint64_t v80 = *(void *)(v69 + 8 * v68);
        if (!v80) {
          break;
        }
      }
    }
LABEL_85:
    unint64_t v72 = (v80 - 1) & v80;
    unint64_t v76 = __clz(__rbit64(v80)) + (v68 << 6);
LABEL_70:
    Swift::UInt v77 = *(unsigned __int8 *)(*(void *)(v66 + 48) + v76);
    Swift::UInt v78 = *(void *)(*(void *)(v66 + 56) + 8 * v76);
    long long v135 = v134;
    long long v136 = v132;
    long long v137 = v130;
    long long v138 = v128;
    uint64_t v139 = v74;
    Hasher._combine(_:)(v77);
    Hasher._combine(_:)(v78);
    v67 ^= Hasher._finalize()();
  }
  int64_t v81 = v79 + 3;
  if (v81 >= v73) {
    goto LABEL_86;
  }
  unint64_t v80 = *(void *)(v69 + 8 * v81);
  if (v80)
  {
    int64_t v68 = v81;
    goto LABEL_85;
  }
  while (1)
  {
    int64_t v68 = v81 + 1;
    if (__OFADD__(v81, 1)) {
      break;
    }
    if (v68 >= v73) {
      goto LABEL_86;
    }
    unint64_t v80 = *(void *)(v69 + 8 * v68);
    ++v81;
    if (v80) {
      goto LABEL_85;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
}

uint64_t NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = result;
  strcpy((char *)v8, "integer-width/");
  HIBYTE(v8[1]) = -18;
  if (a3)
  {
    v5._countAndFlagsBits = 43;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
LABEL_5:
    v6._countAndFlagsBits = MEMORY[0x185302340](48, 0xE100000000000000, v3);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v8[0];
  }
  if (a2 | result)
  {
    if (a2 < result) {
      return 0;
    }
    if (__OFSUB__(a2, result))
    {
      __break(1u);
      return result;
    }
    v7._countAndFlagsBits = MEMORY[0x185302340](35, 0xE100000000000000, a2 - result);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v4._countAndFlagsBits = 42;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v8[0];
}

unint64_t lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>);
  }
  return result;
}

uint64_t AttributedString.Runs.Run.attributes.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

atomic_uint *_timerRelease(atomic_uint *result)
{
  if ((int)atomic_fetch_add_explicit(result, 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    uint64_t v1 = (id *)result;
    _CFAutoreleasePoolPush();

    free(v1);
    return (atomic_uint *)_CFAutoreleasePoolPop();
  }
  return result;
}

void static JSONEncoder.OutputFormatting.sortedKeys.getter(void *a1@<X8>)
{
  *a1 = 2;
}

double destructiveInjectEnumTag for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Weekday()
{
  return &type metadata for Date.FormatStyle.Symbol.Weekday;
}

void Measurement.value.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

Swift::Int __swiftcall TimeZone.secondsFromGMT(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 40))(&v7, ObjectType, v4);
}

id @objc static NSTimeZone._current()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedCurrent.getter(v0, &v4);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  id v2 = v4;

  return v2;
}

void closure #1 in TimeZoneCache.bridgedCurrent.getter(uint64_t a1@<X0>, void *a2@<X8>)
{
  TimeZoneCache.State.check()();
  id v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *a2 = v4;
    id v5 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneGMTICU()
{
  return *(void *)(v0 + 16);
}

double static TimeZone.current.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

id @objc static NSTimeZone._default()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedDefault.getter(v0, &v4);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  id v2 = v4;

  return v2;
}

void closure #1 in TimeZoneCache.bridgedDefault.getter(uint64_t a1@<X0>, void *a2@<X8>)
{
  TimeZoneCache.State.check()();
  id v4 = *(void **)(a1 + 96);
  if (v4)
  {
    id v5 = *(id *)(a1 + 96);
LABEL_5:
    *a2 = v5;
    id v7 = v4;
    return;
  }
  Swift::String v6 = *(void **)(a1 + 80);
  if (v6)
  {
    id v5 = v6;
    id v4 = 0;
    goto LABEL_5;
  }
  __break(1u);
}

double protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneAutoupdating(double a1)
{
  *(void *)&double result = (unint64_t)_TimeZoneAutoupdating.nextDaylightSavingTimeTransition(after:)(*(Foundation::Date *)&a1);
  return result;
}

Foundation::Date_optional __swiftcall _TimeZoneAutoupdating.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  uint64_t v2 = *v1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = (uint64_t *)(static TimeZoneCache.cache + 16);
  id v4 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in TimeZoneCache.current.getter(v3, v10);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  uint64_t v5 = v10[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = v2;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 80))(&v9, ObjectType, v5);

  char v7 = swift_unknownObjectRelease();
  result.value = *(Foundation::Date *)&v8;
  result.is_nil = v7;
  return result;
}

double specialized _TimeZoneAutoupdating.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v11);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v11[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = v1;
  __int16 v9 = 0;
  (*(void (**)(uint64_t *, char *, __int16 *, uint64_t, uint64_t))(v4 + 48))(&v10, (char *)&v9 + 1, &v9, ObjectType, v4);
  double v7 = v6;
  swift_unknownObjectRelease();
  return v7;
}

uint64_t specialized _TimeZoneAutoupdating.secondsFromGMT(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v1;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 40))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t closure #1 in TimeZoneCache.current.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  TimeZoneCache.State.check()();
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    *a2 = result;
    a2[1] = v5;
    return swift_unknownObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall TimeZoneCache.State.check()()
{
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v2 = _CFTimeZoneGetNoteCount();
  BOOL v3 = __OFADD__(NoteCount, v2);
  uint64_t v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  Midnightuint64_t NoteCount = _CFCalendarGetMidnightNoteCount();
  uint64_t v6 = v4 + MidnightNoteCount;
  if (__OFADD__(v4, MidnightNoteCount))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 == *(void *)(v0 + 56)) {
    return;
  }
  TimeZoneCache.State.findCurrentTimeZone()((uint64_t)v15);
  uint64_t v7 = v15[0];
  uint64_t v8 = v15[1];
  swift_unknownObjectRelease();
  *(void *)uint64_t v0 = v7;
  *(void *)(v0 + 8) = v8;
  *(void *)(v0 + 56) = v6;
  __int16 v9 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  unint64_t v11 = &v10[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)unint64_t v11 = v7;
  *((void *)v11 + 1) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 16) = xmmword_18218FDB0;
  *(void *)&v10[OBJC_IVAR____NSSwiftTimeZone_lock] = v12;
  v14.receiver = v10;
  v14.super_class = v9;
  swift_unknownObjectRetain();
  id v13 = objc_msgSendSuper2(&v14, sel_init);

  *(void *)(v0 + 80) = v13;
  if (!*MEMORY[0x1E4F1D508])
  {
LABEL_9:
    __break(1u);
    return;
  }
  _CFNotificationCenterInitializeDependentNotificationIfNecessary();
}

void sub_1818D01C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _NSDefaultCStringEncoding()
{
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  unint64_t v1 = CFStringConvertEncodingToNSStringEncoding(SystemEncoding);
  _NSDefaultStringEncoding = v1;
  if (*MEMORY[0x1E4F1CBA0])
  {
    _NSCStringEncoding = v1;
    __NSSetCStringCharToUnichar(__NSCharToUnicharCFWrapper);
    __NSDefaultStringEncodingFullyInited = 1;
  }
  else
  {
    __NSDefaultStringEncodingFullyInited = CFStringGetSystemEncoding() != 0;
    _NSCStringEncoding = 1;
    __NSSetCStringCharToUnichar((uint64_t (*)(uint64_t))__NSASCIICharToUnichar);
  }
  return _NSDefaultStringEncoding;
}

void _NSInitializePlatform()
{
  if ((_NSInitializePlatform_inited & 1) == 0)
  {
    _NSInitializePlatform_inited = 1;
    __CFInitialize();
    uint64_t v0 = getenv("NSDebugEnabled");
    if (v0 && (*v0 | 0x20) == 0x79) {
      NSDebugEnabled = 1;
    }
    unint64_t v1 = getenv("NSZombieEnabled");
    if (v1 && (*v1 | 0x20) == 0x79) {
      NSZombieEnabled = 1;
    }
    uint64_t v2 = getenv("NSDeallocateZombies");
    if (v2 && (*v2 | 0x20) == 0x79) {
      NSDeallocateZombies = 1;
    }
    BOOL v3 = getenv("NSDisableAutoreleasePoolCache");
    if (v3 && (*v3 | 0x20) == 0x79) {
      _NSDoAPCache = 0;
    }
    __NSSetCStringCharToUnichar(0);
    _NSToDoAtProcessStart();
    _os_log_set_nscf_formatter();
    uint64_t v4 = getenv("NSUnbufferedIO");
    if (v4 && (*v4 | 0x20) == 0x79)
    {
      setvbuf((FILE *)*MEMORY[0x1E4F143D8], 0, 2, 0);
      setvbuf((FILE *)*MEMORY[0x1E4F143C8], 0, 2, 0);
    }
    +[NSThread currentThread];
    _NSSetupDispatchDataBridge();
    uint64_t v5 = +[NSProcessInfo processInfo];
    [(NSProcessInfo *)v5 arguments];
  }
}

void __NSSetCStringCharToUnichar(uint64_t (*a1)(uint64_t a1))
{
  if (_NSCStringCharToUnicharTable) {
    BOOL v2 = _NSCStringCharToUnichar == (void)a1;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    if (_NSCStringCharToUnicharTable != MEMORY[0x1E4F1CBB0]
      && _NSCStringCharToUnicharTable != MEMORY[0x1E4F1CBB8]
      && _NSCStringCharToUnicharTable != 0)
    {
      free((void *)_NSCStringCharToUnicharTable);
    }
    uint64_t v5 = (_OWORD *)MEMORY[0x1E4F1CBB0];
    if (a1 && (char *)a1 != (char *)__NSASCIICharToUnichar)
    {
      if (a1 == __NSCharToUnicharCFWrapper && _NSDefaultStringEncoding == 30)
      {
        uint64_t v5 = (_OWORD *)MEMORY[0x1E4F1CBB8];
      }
      else
      {
        uint64_t v6 = malloc_type_malloc(0x200uLL, 0x1000040BDFB0063uLL);
        long long v7 = v5[13];
        v6[12] = v5[12];
        v6[13] = v7;
        long long v8 = v5[15];
        v6[14] = v5[14];
        v6[15] = v8;
        long long v9 = v5[9];
        v6[8] = v5[8];
        v6[9] = v9;
        long long v10 = v5[11];
        v6[10] = v5[10];
        v6[11] = v10;
        long long v11 = v5[5];
        v6[4] = v5[4];
        v6[5] = v11;
        long long v12 = v5[7];
        v6[6] = v5[6];
        v6[7] = v12;
        long long v13 = v5[1];
        *uint64_t v6 = *v5;
        v6[1] = v13;
        long long v14 = v5[2];
        long long v15 = v5[3];
        uint64_t v16 = 128;
        v6[2] = v14;
        v6[3] = v15;
        do
        {
          *((_WORD *)v6 + v16) = a1(v16);
          ++v16;
        }
        while (v16 != 256);
        uint64_t v5 = v6;
      }
    }
    _NSCStringCharToUnicharTable = (uint64_t)v5;
  }
  _NSCStringCharToUnichar = (uint64_t)a1;
}

objc_class *_NSToDoAtProcessStart()
{
  __NSCFStringClass = (uint64_t)objc_lookUpClass("__NSCFString");
  __NSMutableStringClass = (uint64_t)objc_lookUpClass("NSMutableString");
  class_setSuperclass((Class)__NSCFStringClass, (Class)__NSMutableStringClass);
  uint64_t v0 = objc_lookUpClass("NSError");
  unint64_t v1 = objc_lookUpClass("__NSCFError");
  class_setSuperclass(v1, v0);
  BOOL v2 = objc_lookUpClass("__NSCFCharacterSet");
  BOOL v3 = objc_lookUpClass("NSMutableCharacterSet");
  class_setSuperclass(v2, v3);
  uint64_t v4 = objc_lookUpClass("__NSCFAttributedString");
  uint64_t v5 = objc_lookUpClass("NSMutableAttributedString");
  class_setSuperclass(v4, v5);
  uint64_t v6 = objc_lookUpClass("NSNumber");
  long long v7 = objc_lookUpClass("__NSCFBoolean");
  class_setSuperclass(v7, v6);
  long long v8 = objc_lookUpClass("__NSCFNumber");
  class_setSuperclass(v8, v6);
  Class v9 = objc_lookUpClass("__CFNotification");
  if (v9)
  {
    long long v10 = v9;
    long long v11 = objc_lookUpClass("NSNotification");
    class_setSuperclass(v10, v11);
  }
  __NSStringClass = (uint64_t)objc_lookUpClass("NSString");
  __NSConcreteValueClass = (uint64_t)objc_lookUpClass("NSConcreteValue");
  __NSMutableStringClass = (uint64_t)objc_lookUpClass("NSMutableString");
  class_setVersion((Class)__NSStringClass, 1);
  class_setVersion((Class)__NSMutableStringClass, 1);
  long long v12 = objc_lookUpClass("NSTimeZone");
  class_setVersion(v12, 0);
  long long v13 = objc_lookUpClass("NSCountedSet");
  class_setVersion(v13, 1);
  long long v14 = objc_lookUpClass("NSNumberFormatter");
  class_setVersion(v14, 4);
  long long v15 = objc_lookUpClass("NSDateFormatter");
  class_setVersion(v15, 41);
  uint64_t v16 = objc_lookUpClass("NSAffineTransform");
  class_setVersion(v16, 1);

  uint64_t result = objc_lookUpClass("__SwiftNativeNSError");
  if (result)
  {
    return class_setSuperclass(result, v0);
  }
  return result;
}

void _NSSetupDispatchDataBridge()
{
  if (_NSSetupDispatchDataBridge_onceToken != -1) {
    dispatch_once(&_NSSetupDispatchDataBridge_onceToken, &__block_literal_global_93);
  }
}

uint64_t TimeZoneCache.State.findCurrentTimeZone()@<X0>(uint64_t a1@<X8>)
{
  BOOL v2 = v1;
  uint64_t v4 = self;
  id v5 = objc_msgSend(v4, sel_processInfo);
  uint64_t v6 = objc_msgSend(v5, sel_environment);

  long long v7 = (void *)MEMORY[0x1E4FBC840];
  long long v8 = (void *)MEMORY[0x1E4FBB1A0];
  if (!v6)
  {
    Class v9 = (void *)MEMORY[0x1E4FBC868];
    if (!*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }
  if (MEMORY[0x1E4FBC840] + 8 == MEMORY[0x1E4FBB1A0])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    Class v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v9) {
      goto LABEL_43;
    }
    __src = v4;
    id v10 = objc_msgSend(v6, sel_count);
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      Class v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
      long long v12 = (void *)v9[6];
      uint64_t v13 = v9[7];
      swift_retain();
      uint64_t v14 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v12, v13, v6, v11);
      if ((v14 & 0x8000000000000000) == 0 && v11 >= v14)
      {
        uint64_t v9[2] = v14;
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          unint64_t v16 = (unint64_t)(v9 + 8);
          uint64_t v209 = (uint64_t)(v7 + 1);
          while (1)
          {
            while (((*(void *)(v16 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
            {
              if (--v15 < 0) {
                goto LABEL_40;
              }
            }
            long long v17 = v2;
            BOOL v2 = v7;
            uint64_t v18 = a1;
            long long v19 = (uint64_t *)(v9[6] + 16 * v15);
            uint64_t v20 = *v19;
            uint64_t v21 = v19[1];
            swift_bridgeObjectRetain();
            unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            a1 = v23;
            swift_bridgeObjectRelease();
            if (a1)
            {
              swift_arrayDestroy();
              unint64_t v24 = swift_arrayDestroy();
              uint64_t v25 = v9[2];
              BOOL v26 = __OFSUB__(v25, 1);
              uint64_t v27 = v25 - 1;
              if (v26) {
                goto LABEL_137;
              }
              uint64_t v9[2] = v27;
            }
            else
            {
              *(void *)(v16 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
              if (v15 >= (uint64_t)v22)
              {
                a1 = v18;
                if (v22 == v15)
                {
                  --v15;
                }
                else
                {
                  uint64_t v32 = v9[6];
                  uint64_t v33 = (uint64_t *)(v32 + 16 * v22);
                  uint64_t v34 = (uint64_t *)(v32 + 16 * v15);
                  uint64_t v35 = *v33;
                  uint64_t v36 = v33[1];
                  uint64_t v37 = v34[1];
                  *uint64_t v33 = *v34;
                  v33[1] = v37;
                  *uint64_t v34 = v35;
                  v34[1] = v36;
                  uint64_t v38 = v9[7];
                  long long v39 = (_OWORD *)(v38 + 32 * v22);
                  long long v40 = (_OWORD *)(v38 + 32 * v15);
                  outlined init with take of Any(v39, v213);
                  outlined init with take of Any(v40, v39);
                  outlined init with take of Any(v213, v40);
                }
                goto LABEL_17;
              }
              *(_OWORD *)(v9[6] + 16 * v22) = *(_OWORD *)(v9[6] + 16 * v15);
              uint64_t v28 = v9[7];
              uint64_t v29 = (_OWORD *)(v28 + 32 * v15);
              long long v30 = v29[1];
              uint64_t v31 = (_OWORD *)(v28 + 32 * v22);
              *uint64_t v31 = *v29;
              v31[1] = v30;
            }
            --v15;
            a1 = v18;
LABEL_17:
            long long v7 = v2;
            BOOL v2 = v17;
            if (v15 < 0) {
              goto LABEL_40;
            }
          }
        }
        goto LABEL_40;
      }
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
      goto LABEL_181;
    }
LABEL_42:
    Class v9 = (void *)MEMORY[0x1E4FBC868];
    uint64_t v4 = __src;
    goto LABEL_43;
  }
  swift_unknownObjectRetain();
  Class v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v9) {
    goto LABEL_43;
  }
  __src = v4;
  id v41 = objc_msgSend(v6, sel_count);
  if (!v41) {
    goto LABEL_42;
  }
  uint64_t v42 = (uint64_t)v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  Class v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v43 = (char *)v9[6];
  uint64_t v44 = v9[7];
  swift_retain();
  uint64_t v45 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v43, v44, v6, v42);
  if (v45 < 0 || v42 < v45) {
    goto LABEL_179;
  }
  uint64_t v9[2] = v45;
  if (v45)
  {
    uint64_t v209 = a1;
    a1 = v45 - 1;
    uint64_t v15 = (uint64_t)(v9 + 8);
    long long v17 = (void *)MEMORY[0x1E4FBB1A0];
    while (1)
    {
      while (1)
      {
        if ((*(void *)(v15 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a1)) {
          goto LABEL_31;
        }
        uint64_t v47 = (uint64_t *)(v9[6] + 16 * a1);
        uint64_t v48 = *v47;
        unint64_t v22 = v47[1];
        swift_bridgeObjectRetain();
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v22);
        char v51 = v50;
        swift_bridgeObjectRelease();
        if ((v51 & 1) == 0) {
          break;
        }
        LOBYTE(v16) = 16 * a1;
        swift_arrayDestroy();
        unint64_t v24 = swift_arrayDestroy();
        uint64_t v52 = v9[2];
        BOOL v26 = __OFSUB__(v52, 1);
        uint64_t v53 = v52 - 1;
        if (v26) {
          goto LABEL_138;
        }
        uint64_t v9[2] = v53;
LABEL_31:
        if (--a1 < 0) {
          goto LABEL_39;
        }
      }
      *(void *)(v15 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
      if (a1 < (uint64_t)v49)
      {
        uint64_t v46 = 16 * v49;
        *(_OWORD *)(v9[6] + v46) = *(_OWORD *)(v9[6] + 16 * a1);
        *(_OWORD *)(v9[7] + v46) = *(_OWORD *)(v9[7] + 16 * a1);
        goto LABEL_31;
      }
      if (v49 == a1) {
        goto LABEL_31;
      }
      uint64_t v54 = v9[6];
      uint64_t v55 = (uint64_t *)(v54 + 16 * v49);
      unint64_t v56 = (uint64_t *)(v54 + 16 * a1);
      uint64_t v57 = *v55;
      uint64_t v58 = v55[1];
      uint64_t v59 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v59;
      *unint64_t v56 = v57;
      v56[1] = v58;
      uint64_t v60 = v9[7];
      Swift::UInt v61 = (uint64_t *)(v60 + 16 * v49);
      Swift::UInt v62 = (uint64_t *)(v60 + 16 * a1);
      uint64_t v63 = *v61;
      uint64_t v64 = v61[1];
      uint64_t v65 = v62[1];
      *Swift::UInt v61 = *v62;
      v61[1] = v65;
      *Swift::UInt v62 = v63;
      v62[1] = v64;
      if (a1 < 0)
      {
LABEL_39:
        swift_release();
        a1 = v209;
        goto LABEL_41;
      }
    }
  }
LABEL_40:
  swift_release();
LABEL_41:
  uint64_t v4 = __src;
  long long v8 = (void *)MEMORY[0x1E4FBB1A0];
LABEL_43:

  if (!v9[2])
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
LABEL_44:
  unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(0x454C49465A54, 0xE600000000000000);
  if ((v67 & 1) == 0) {
    goto LABEL_47;
  }
  int64_t v68 = (uint64_t *)(v9[7] + 16 * v66);
  uint64_t v69 = v8;
  uint64_t v70 = *v68;
  unint64_t v71 = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = TimeZoneCache.State.fixed(_:)(v70, v71);
  uint64_t v74 = v73;
  long long v8 = v69;
  uint64_t result = swift_bridgeObjectRelease();
  if (v72)
  {
LABEL_112:
    *(void *)a1 = v72;
    *(void *)(a1 + 8) = v74;
    return result;
  }
LABEL_48:
  id v76 = objc_msgSend(v4, sel_processInfo);
  long long v17 = objc_msgSend(v76, sel_environment);

  if (v17)
  {
    if (v7 + 1 == v8)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      Swift::UInt v77 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v77) {
        goto LABEL_94;
      }
      id v78 = objc_msgSend(v17, sel_count);
      if (v78)
      {
        uint64_t v79 = (uint64_t)v78;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        Swift::UInt v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
        unint64_t v80 = (void *)v77[6];
        uint64_t v81 = v77[7];
        swift_retain();
        uint64_t v82 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v80, v81, v17, v79);
        if ((v82 & 0x8000000000000000) == 0 && v79 >= v82)
        {
          v77[2] = v82;
          if (v82)
          {
            uint64_t v209 = a1;
            long long v83 = v7;
            int64_t v84 = v82 - 1;
            a1 = (uint64_t)(v77 + 8);
            uint64_t v6 = (void *)MEMORY[0x1E4FBB1A0];
            uint64_t v15 = (uint64_t)(v83 + 1);
            do
            {
              while (1)
              {
                while (((*(void *)(a1 + (((unint64_t)v84 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v84) & 1) != 0)
                {
                  if (--v84 < 0) {
                    goto LABEL_91;
                  }
                }
                id v85 = (uint64_t *)(v77[6] + 16 * v84);
                uint64_t v86 = *v85;
                unint64_t v22 = v85[1];
                swift_bridgeObjectRetain();
                unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v22);
                char v88 = v87;
                swift_bridgeObjectRelease();
                if (v88) {
                  break;
                }
                *(void *)(a1 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
                if (v84 >= (uint64_t)v16)
                {
                  if (v16 == v84)
                  {
                    if (--v84 < 0) {
                      goto LABEL_91;
                    }
                  }
                  else
                  {
                    uint64_t v95 = v77[6];
                    id v96 = (uint64_t *)(v95 + 16 * v16);
                    id v97 = (uint64_t *)(v95 + 16 * v84);
                    uint64_t v98 = *v96;
                    uint64_t v99 = v96[1];
                    uint64_t v100 = v97[1];
                    uint64_t *v96 = *v97;
                    v96[1] = v100;
                    *id v97 = v98;
                    v97[1] = v99;
                    uint64_t v101 = v77[7];
                    Swift::UInt8 v102 = (_OWORD *)(v101 + 32 * v16);
                    Swift::UInt8 v103 = (_OWORD *)(v101 + 32 * v84);
                    outlined init with take of Any(v102, v213);
                    outlined init with take of Any(v103, v102);
                    outlined init with take of Any(v213, v103);
                    if (v84 < 0) {
                      goto LABEL_91;
                    }
                  }
                }
                else
                {
                  *(_OWORD *)(v77[6] + 16 * v16) = *(_OWORD *)(v77[6] + 16 * v84);
                  uint64_t v91 = v77[7];
                  id v92 = (_OWORD *)(v91 + 32 * v16);
                  id v93 = (_OWORD *)(v91 + 32 * v84);
                  long long v94 = v93[1];
                  *id v92 = *v93;
                  v92[1] = v94;
                  if (--v84 < 0) {
                    goto LABEL_91;
                  }
                }
              }
              swift_arrayDestroy();
              unint64_t v24 = swift_arrayDestroy();
              uint64_t v89 = v77[2];
              BOOL v26 = __OFSUB__(v89, 1);
              uint64_t v90 = v89 - 1;
              if (v26) {
                goto LABEL_139;
              }
              v77[2] = v90;
              --v84;
            }
            while ((v84 & 0x8000000000000000) == 0);
LABEL_91:
            a1 = v209;
            goto LABEL_92;
          }
          goto LABEL_92;
        }
        goto LABEL_180;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      Swift::UInt v77 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v77) {
        goto LABEL_94;
      }
      id v104 = objc_msgSend(v17, sel_count);
      if (v104)
      {
        uint64_t v105 = (uint64_t)v104;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        Swift::UInt v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
        uint64_t v106 = (char *)v77[6];
        uint64_t v107 = v77[7];
        swift_retain();
        uint64_t v108 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v106, v107, v17, v105);
        if ((v108 & 0x8000000000000000) == 0 && v105 >= v108)
        {
          v77[2] = v108;
          if (v108)
          {
            uint64_t v209 = a1;
            uint64_t v109 = v108 - 1;
            unint64_t v110 = v77 + 8;
            uint64_t v6 = (void *)MEMORY[0x1E4FBB1A0];
            a1 = 1;
            do
            {
              while (1)
              {
                while (((*(void *)((char *)v110 + (((unint64_t)v109 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v109) & 1) != 0)
                {
                  if (--v109 < 0) {
                    goto LABEL_91;
                  }
                }
                BOOL v111 = (uint64_t *)(v77[6] + 16 * v109);
                uint64_t v112 = *v111;
                unint64_t v16 = v111[1];
                swift_bridgeObjectRetain();
                unint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)(v112, v16);
                unint64_t v22 = v114;
                swift_bridgeObjectRelease();
                if (v22) {
                  break;
                }
                *(void *)((char *)v110 + ((v113 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v113;
                if (v109 >= (uint64_t)v113)
                {
                  if (v113 == v109)
                  {
                    if (--v109 < 0) {
                      goto LABEL_91;
                    }
                  }
                  else
                  {
                    uint64_t v118 = v77[6];
                    int64_t v119 = (uint64_t *)(v118 + 16 * v113);
                    uint64_t v120 = (uint64_t *)(v118 + 16 * v109);
                    uint64_t v121 = *v119;
                    uint64_t v122 = v119[1];
                    uint64_t v123 = v120[1];
                    *int64_t v119 = *v120;
                    v119[1] = v123;
                    *uint64_t v120 = v121;
                    v120[1] = v122;
                    uint64_t v124 = v77[7];
                    int64_t v125 = (uint64_t *)(v124 + 16 * v113);
                    uint64_t v126 = (uint64_t *)(v124 + 16 * v109);
                    uint64_t v127 = *v125;
                    uint64_t v128 = v125[1];
                    uint64_t v129 = v126[1];
                    *int64_t v125 = *v126;
                    v125[1] = v129;
                    *uint64_t v126 = v127;
                    v126[1] = v128;
                    if (v109 < 0) {
                      goto LABEL_91;
                    }
                  }
                }
                else
                {
                  uint64_t v117 = 16 * v113;
                  *(_OWORD *)(v77[6] + v117) = *(_OWORD *)(v77[6] + 16 * v109);
                  *(_OWORD *)(v77[7] + v117) = *(_OWORD *)(v77[7] + 16 * v109--);
                  if (v109 < 0) {
                    goto LABEL_91;
                  }
                }
              }
              uint64_t v15 = 16 * v109;
              swift_arrayDestroy();
              unint64_t v24 = swift_arrayDestroy();
              uint64_t v115 = v77[2];
              BOOL v26 = __OFSUB__(v115, 1);
              uint64_t v116 = v115 - 1;
              if (v26) {
                goto LABEL_140;
              }
              v77[2] = v116;
              --v109;
            }
            while ((v109 & 0x8000000000000000) == 0);
            goto LABEL_91;
          }
LABEL_92:
          swift_release();
          goto LABEL_94;
        }
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
        goto LABEL_183;
      }
    }
    Swift::UInt v77 = (void *)MEMORY[0x1E4FBC868];
LABEL_94:

    if (!v77[2]) {
      goto LABEL_99;
    }
    goto LABEL_95;
  }
  Swift::UInt v77 = (void *)MEMORY[0x1E4FBC868];
  if (!*(void *)(MEMORY[0x1E4FBC868] + 16)) {
    goto LABEL_99;
  }
LABEL_95:
  unint64_t v130 = specialized __RawDictionaryStorage.find<A>(_:)(23124, 0xE200000000000000);
  if (v131)
  {
    long long v132 = (uint64_t *)(v77[7] + 16 * v130);
    uint64_t v134 = *v132;
    unint64_t v133 = v132[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v135 = v2[9];
    if (v135)
    {
      if (!*(void *)(v135 + 16)) {
        goto LABEL_111;
      }
    }
    else
    {
      uint64_t v135 = v2[15];
      v2[9] = v135;
      swift_bridgeObjectRetain();
      if (!*(void *)(v135 + 16)) {
        goto LABEL_111;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v145 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v133);
    if (v146)
    {
      long long v147 = (uint64_t *)(*(void *)(v135 + 56) + 16 * v145);
      uint64_t v148 = *v147;
      unint64_t v149 = v147[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v150 = TimeZoneCache.State.fixed(_:)(v148, v149);
      uint64_t v152 = v151;
      swift_bridgeObjectRelease();
      if (v150)
      {
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)a1 = v150;
        *(void *)(a1 + 8) = v152;
        return result;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
LABEL_111:
    uint64_t v72 = TimeZoneCache.State.fixed(_:)(v134, v133);
    uint64_t v74 = v153;
    uint64_t result = swift_bridgeObjectRelease();
    if (v72) {
      goto LABEL_112;
    }
    goto LABEL_100;
  }
LABEL_99:
  swift_bridgeObjectRelease();
LABEL_100:
  long long v17 = (void *)swift_slowAlloc();
  bzero(v17, 0x401uLL);
  ssize_t v136 = readlink("/var/db/timezone/localtime", (char *)v17, 0x400uLL);
  if (v136 < 0) {
    goto LABEL_120;
  }
  *((unsigned char *)v17 + v136) = 0;
  uint64_t v137 = MEMORY[0x185301F80](v17);
  if (!v138) {
    goto LABEL_120;
  }
  uint64_t v139 = v137;
  unint64_t v140 = v138;
  uint64_t v141 = 0xD000000000000019;
  uint64_t v142 = specialized BidirectionalCollection.last.getter(0xD000000000000019, 0x80000001823B1120);
  if (!v143) {
    goto LABEL_115;
  }
  if (v142 == 47 && v143 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    unint64_t v144 = 0x80000001823B1120;
    goto LABEL_116;
  }
  char v154 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v154)
  {
    unint64_t v144 = 0x80000001823B1120;
  }
  else
  {
LABEL_115:
    uint64_t v141 = 0xD00000000000001ALL;
    unint64_t v144 = 0x80000001823AF2A0;
  }
LABEL_116:
  specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(v141, v144, 0, 0, v139, v140);
  unint64_t v156 = v155;
  char v158 = v157;
  swift_bridgeObjectRelease();
  if (v158)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v159 = specialized Collection.suffix(from:)(v156, v139, v140);
    uint64_t v161 = v160;
    uint64_t v163 = v162;
    uint64_t v165 = v164;
    swift_bridgeObjectRelease();
    uint64_t v166 = MEMORY[0x185301F50](v159, v161, v163, v165);
    unint64_t v168 = v167;
    swift_bridgeObjectRelease();
    uint64_t v169 = TimeZoneCache.State.fixed(_:)(v166, v168);
    uint64_t v171 = v170;
    swift_bridgeObjectRelease();
    if (v169)
    {
      *(void *)a1 = v169;
      *(void *)(a1 + 8) = v171;
      return MEMORY[0x185309510](v17, -1, -1);
    }
  }
LABEL_120:
  uint64_t v172 = v2[6];
  if (*(void *)(v172 + 16))
  {
    unint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if (v174)
    {
      *(_OWORD *)__srcb = *(_OWORD *)(*(void *)(v172 + 56) + 16 * v173);
      swift_unknownObjectRetain();
      long long v175 = *(_OWORD *)__srcb;
LABEL_134:
      *(_OWORD *)a1 = v175;
      return MEMORY[0x185309510](v17, -1, -1);
    }
  }
  type metadata accessor for _TimeZoneGMTICU();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v176 = specialized static TimeZone.nameForSecondsFromGMT(_:)(0);
  if (!v177)
  {
LABEL_183:
    swift_deallocPartialClassInstance();
    __break(1u);
    goto LABEL_184;
  }
  unint64_t v16 = v176;
  uint64_t v178 = v177;
  uint64_t v15 = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU);
  v6[3] = v16;
  v6[4] = v178;
  v6[2] = 0;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v213[0] = v2[6];
  unint64_t v22 = *(void *)&v213[0];
  v2[6] = 0x8000000000000000;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  uint64_t v181 = *(void *)(v22 + 16);
  BOOL v182 = (v180 & 1) == 0;
  BOOL v26 = __OFADD__(v181, v182);
  uint64_t v183 = v181 + v182;
  if (v26)
  {
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
  }
  else
  {
    LOBYTE(v16) = v180;
    if (*(void *)(v22 + 24) < v183)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v183, isUniquelyReferenced_nonNull_native);
      unint64_t v184 = *(void *)&v213[0];
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0);
      if ((v16 & 1) != (v185 & 1)) {
        goto LABEL_185;
      }
      if ((v16 & 1) == 0) {
        goto LABEL_131;
      }
      goto LABEL_128;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t v184 = v22;
      if ((v180 & 1) == 0)
      {
LABEL_131:
        while (1)
        {
          *(void *)(v184 + 8 * (v24 >> 6) + 64) |= 1 << v24;
          *(void *)(*(void *)(v184 + 48) + 8 * v24) = 0;
          v187 = (void *)(*(void *)(v184 + 56) + 16 * v24);
          void *v187 = v6;
          v187[1] = v15;
          uint64_t v188 = *(void *)(v184 + 16);
          BOOL v26 = __OFADD__(v188, 1);
          uint64_t v189 = v188 + 1;
          if (!v26) {
            break;
          }
          __break(1u);
LABEL_176:
          swift_bridgeObjectRelease();
          unint64_t v24 = v208;
          a1 = v209;
          if (v16) {
            goto LABEL_128;
          }
        }
        *(void *)(v184 + 16) = v189;
        goto LABEL_133;
      }
LABEL_128:
      v186 = (void *)(*(void *)(v184 + 56) + 16 * v24);
      swift_unknownObjectRelease();
      void *v186 = v6;
      v186[1] = v15;
LABEL_133:
      v2[6] = v184;
      swift_bridgeObjectRelease();
      *(void *)&long long v175 = v6;
      *((void *)&v175 + 1) = v15;
      goto LABEL_134;
    }
  }
  unint64_t v208 = v24;
  uint64_t v209 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  uint64_t v190 = static _DictionaryStorage.copy(original:)();
  unint64_t v184 = v190;
  if (!*(void *)(v22 + 16)) {
    goto LABEL_176;
  }
  v207 = v2;
  v191 = (char *)(v190 + 64);
  __srca = (char *)(v22 + 64);
  unint64_t v192 = (unint64_t)((1 << *(unsigned char *)(v184 + 32)) + 63) >> 6;
  if (v184 != v22 || v191 >= &__srca[8 * v192]) {
    memmove(v191, __srca, 8 * v192);
  }
  int64_t v193 = 0;
  *(void *)(v184 + 16) = *(void *)(v22 + 16);
  uint64_t v194 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v195 = -1;
  if (v194 < 64) {
    uint64_t v195 = ~(-1 << v194);
  }
  unint64_t v196 = v195 & *(void *)(v22 + 64);
  int64_t v197 = (unint64_t)(v194 + 63) >> 6;
  while (1)
  {
    if (v196)
    {
      unint64_t v198 = __clz(__rbit64(v196));
      v196 &= v196 - 1;
      unint64_t v199 = v198 | (v193 << 6);
      goto LABEL_149;
    }
    int64_t v204 = v193 + 1;
    if (__OFADD__(v193, 1)) {
      goto LABEL_182;
    }
    if (v204 >= v197) {
      goto LABEL_176;
    }
    unint64_t v205 = *(void *)&__srca[8 * v204];
    ++v193;
    if (!v205)
    {
      int64_t v193 = v204 + 1;
      if (v204 + 1 >= v197) {
        goto LABEL_176;
      }
      unint64_t v205 = *(void *)&__srca[8 * v193];
      if (!v205)
      {
        int64_t v193 = v204 + 2;
        if (v204 + 2 >= v197) {
          goto LABEL_176;
        }
        unint64_t v205 = *(void *)&__srca[8 * v193];
        if (!v205)
        {
          int64_t v193 = v204 + 3;
          if (v204 + 3 >= v197) {
            goto LABEL_176;
          }
          unint64_t v205 = *(void *)&__srca[8 * v193];
          if (!v205)
          {
            int64_t v193 = v204 + 4;
            if (v204 + 4 >= v197) {
              goto LABEL_176;
            }
            unint64_t v205 = *(void *)&__srca[8 * v193];
            if (!v205)
            {
              int64_t v193 = v204 + 5;
              if (v204 + 5 >= v197) {
                goto LABEL_176;
              }
              unint64_t v205 = *(void *)&__srca[8 * v193];
              if (!v205)
              {
                int64_t v193 = v204 + 6;
                if (v204 + 6 >= v197) {
                  goto LABEL_176;
                }
                unint64_t v205 = *(void *)&__srca[8 * v193];
                if (!v205)
                {
                  int64_t v193 = v204 + 7;
                  if (v204 + 7 >= v197) {
                    goto LABEL_176;
                  }
                  unint64_t v205 = *(void *)&__srca[8 * v193];
                  if (!v205) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_174:
    unint64_t v196 = (v205 - 1) & v205;
    unint64_t v199 = __clz(__rbit64(v205)) + (v193 << 6);
LABEL_149:
    uint64_t v200 = 8 * v199;
    uint64_t v201 = *(void *)(*(void *)(v22 + 48) + 8 * v199);
    uint64_t v202 = 16 * v199;
    long long v203 = *(_OWORD *)(*(void *)(v22 + 56) + v202);
    *(void *)(*(void *)(v184 + 48) + v200) = v201;
    *(_OWORD *)(*(void *)(v184 + 56) + v202) = v203;
    swift_unknownObjectRetain();
  }
  int64_t v206 = v204 + 8;
  if (v206 >= v197) {
    goto LABEL_176;
  }
  unint64_t v205 = *(void *)&__srca[8 * v206];
  if (v205)
  {
    int64_t v193 = v206;
    BOOL v2 = v207;
    goto LABEL_174;
  }
  while (1)
  {
    int64_t v193 = v206 + 1;
    if (__OFADD__(v206, 1)) {
      break;
    }
    BOOL v2 = v207;
    if (v193 >= v197) {
      goto LABEL_176;
    }
    unint64_t v205 = *(void *)&__srca[8 * v193];
    ++v206;
    if (v205) {
      goto LABEL_174;
    }
  }
LABEL_184:
  __break(1u);
LABEL_185:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t __NSFireDelayedPerform(void *a1, id *a2)
{
  id v18 = a2[1];
  id v3 = a2[3];
  id v20 = a2[2];
  id v22 = *a2;
  id v5 = a2[4];
  id v4 = a2[5];
  id v6 = a2[6];
  _CFAutoreleasePoolPush();
  if (v6) {
    [+[NSProcessInfo processInfo] _reactivateActivity:v6];
  }
  CFRetain(a1);
  objc_sync_enter(v4);
  CFArrayRef v7 = (const __CFArray *)[v4 _dperf];
  v25.length = objc_msgSend((id)objc_msgSend(v4, "_dperf"), "count");
  v25.location = 0;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v25, v5);
  if (FirstIndexOfValue << 32 != 0xFFFFFFFF00000000) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)[v4 _dperf], (int)FirstIndexOfValue);
  }
  int v9 = objc_msgSend(v3, "count", v18, v20, v22);
  id v10 = (__CFString *)*MEMORY[0x1E4F1C4B0];
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D410];
  for (uint64_t i = v9 - 1; i != -1; --i)
  {
    uint64_t v13 = (__CFString *)[v3 objectAtIndex:i];
    CFStringRef v14 = v13;
    CFStringRef v15 = v11;
    if (v13 != v10)
    {
      if ([(__CFString *)v13 isEqual:@"kCFRunLoopCommonModes"]) {
        CFStringRef v15 = v11;
      }
      else {
        CFStringRef v15 = v14;
      }
    }
    Current = CFRunLoopGetCurrent();
    CFRunLoopRemoveTimer(Current, (CFRunLoopTimerRef)a1, v15);
  }
  objc_sync_exit(v4);
  objc_msgSend(v23, v19, v21);
  CFRelease(a1);
  if (v6) {
    [+[NSProcessInfo processInfo] endActivity:v6];
  }

  return _CFAutoreleasePoolPop();
}

void sub_1818D1AB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1818D1E1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1818D20F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t String._appendingPathComponent(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    if ((a4 & 0x2000000000000000) != 0) {
      uint64_t v9 = HIBYTE(a4) & 0xF;
    }
    else {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_24;
    }
    if (String.count.getter() == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = specialized Collection.first.getter(a3, a4);
      uint64_t v12 = v11;
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12)
      {
        __break(1u);
        return result;
      }
      if (v10 == 47 && v12 == 0xE100000000000000) {
        goto LABEL_12;
      }
    }
    else
    {
      if (String.count.getter() != 2) {
        goto LABEL_23;
      }
      if (String.subscript.getter() == 92 && v14 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0) {
          goto LABEL_23;
        }
      }
      String.index(after:)();
      if (String.subscript.getter() == 92 && v16 == 0xE100000000000000)
      {
LABEL_12:
        swift_bridgeObjectRelease();
LABEL_24:
        swift_bridgeObjectRetain();
        v19._uint64_t countAndFlagsBits = a1;
        v19._object = (void *)a2;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_24;
    }
LABEL_23:
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = 47;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
LABEL_25:
  swift_bridgeObjectRetain_n();
  Swift::String_optional v20 = String.Iterator.next()();
  if (v20.value._object)
  {
    uint64_t countAndFlagsBits = v20.value._countAndFlagsBits;
    object = v20.value._object;
    do
    {
      if (countAndFlagsBits == 47 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v23 = 47;
        unint64_t v24 = 0xE100000000000000;
      }
      else
      {
        uint64_t v23 = countAndFlagsBits;
        unint64_t v24 = (unint64_t)object;
      }
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
      Swift::String_optional v25 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v25.value._countAndFlagsBits;
      object = v25.value._object;
    }
    while (v25.value._object);
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int16 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  id v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 1;
  id v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!((a1 ^ (unint64_t)(a1 << 32)) >> 32)) {
        goto LABEL_5;
      }
      goto LABEL_15;
    case 2uLL:
      id v5 = *(void *)(a1 + 16);
      id v4 = *(void *)(a1 + 24);
      if (v5 != v4)
      {
        if (a2 >> 62 == 2)
        {
          uint64_t v6 = v4 - 1;
          if (!__OFSUB__(v4, 1))
          {
            if (v6 >= v5)
            {
              if (v6 < v4)
              {
                CFArrayRef v7 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                if (v7)
                {
                  long long v8 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                  uint64_t v9 = __OFSUB__(v6, v8);
                  uint64_t v10 = v6 - v8;
                  if (!v9)
                  {
                    uint64_t v2 = 0;
                    id v3 = *(unsigned __int8 *)(v7 + v10);
                    return v3 | (v2 << 8);
                  }
LABEL_25:
                  __break(1u);
                }
LABEL_27:
                __break(1u);
                JUMPOUT(0x181EFFCD4);
              }
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
        }
        else
        {
LABEL_15:
          if (a1 >> 32 <= (int)a1)
          {
            __break(1u);
          }
          else
          {
            uint64_t v11 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v11)
            {
              __break(1u);
              goto LABEL_27;
            }
            uint64_t v12 = (a1 >> 32) - 1;
            uint64_t v13 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            uint64_t v9 = __OFSUB__(v12, v13);
            uint64_t v14 = v12 - v13;
            if (!v9)
            {
              uint64_t v2 = 0;
              id v3 = *(unsigned __int8 *)(v11 + v14);
              return v3 | (v2 << 8);
            }
          }
          __break(1u);
        }
        __break(1u);
        goto LABEL_23;
      }
      id v3 = 0;
      uint64_t v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
        uint64_t v2 = 0;
        uint64_t v16 = a1;
        char v17 = a2;
        Swift::String v18 = BYTE2(a2);
        Swift::String v19 = BYTE3(a2);
        Swift::String_optional v20 = BYTE4(a2);
        uint64_t v21 = BYTE5(a2);
        id v3 = *((unsigned __int8 *)&v16 + BYTE6(a2) - 1);
      }
      else
      {
LABEL_5:
        id v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(uint64_t a1, unint64_t a2, char a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10 = HIBYTE(a6) & 0xF;
  uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 1) == 0)
  {
    if (a3)
    {
      unint64_t v14 = 15;
    }
    else
    {
      if ((a6 & 0x2000000000000000) != 0) {
        uint64_t v17 = HIBYTE(a6) & 0xF;
      }
      else {
        uint64_t v17 = a5 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v18 = 7;
      if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
        uint64_t v18 = 11;
      }
      unint64_t v14 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v18 | (v17 << 16), a1, a2);
      if (v19) {
        return 0;
      }
    }
    unint64_t v16 = 15;
    goto LABEL_20;
  }
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
    uint64_t v13 = 11;
  }
  unint64_t v14 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v13 | (v12 << 16), a1, a2);
  if (v15) {
    return 0;
  }
  unint64_t v16 = v14;
  if ((a3 & 1) == 0) {
    unint64_t v14 = 15;
  }
LABEL_20:
  unint64_t v31 = v14 >> 14;
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v20 = v10;
  }
  else {
    uint64_t v20 = v11;
  }
  uint64_t v21 = 4 * v20;
  uint64_t v22 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v22 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v32 = v22;
  unint64_t v34 = v21;
  unint64_t v35 = 4 * v22;
  while (1)
  {
    unint64_t v23 = 0;
    unint64_t v33 = v16;
    if (v32)
    {
      unint64_t v24 = v16;
      if (v16 >> 14 < v34)
      {
        unint64_t v23 = 0;
        unint64_t v24 = v16;
        do
        {
          uint64_t v25 = String.subscript.getter();
          uint64_t v27 = v26;
          if (v25 == String.subscript.getter() && v27 == v28)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v29 & 1) == 0) {
              break;
            }
          }
          unint64_t v24 = String.index(after:)();
          unint64_t v23 = (unint64_t)String.index(after:)() >> 14;
        }
        while (v23 < v35 && v24 >> 14 < v34);
      }
    }
    else
    {
      unint64_t v24 = v16;
    }
    if (v23 == v35) {
      break;
    }
    if (v31 == v33 >> 14) {
      return 0;
    }
    unint64_t v16 = String.index(_:offsetBy:)();
  }
  unint64_t result = v33;
  if (v24 >> 14 < v33 >> 14) {
    __break(1u);
  }
  return result;
}

unint64_t specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    if (a1 >= 0x4000)
    {
      while (1)
      {
        unint64_t v5 = String.index(before:)();
        unint64_t v6 = String.index(before:)();
        unint64_t v3 = v6;
        if (v5 < 0x4000) {
          break;
        }
        if (!(v6 >> 14)) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

id StringProtocol.localizedStandardCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedStandardCompare_);
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t AttributeContainer.subscript.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

{
  void *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.NotificationWrapper()
{
  return &type metadata for NSNotificationCenter.Notifications.NotificationWrapper;
}

uint64_t CharacterSet.init(charactersIn:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  int v3 = HIDWORD(result) - result;
  if (HIDWORD(result) < result)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 == -1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5.location = result;
  v5.length = (v3 + 1);
  unint64_t result = (uint64_t)CFCharacterSetCreateWithCharactersInRange(0, v5);
  if (result)
  {
    uint64_t v4 = result;
    type metadata accessor for __CharacterSetStorage();
    unint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(unsigned char *)(result + 24) = 0;
    *a2 = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  CFRange v4;

  if (HIDWORD(result) < result)
  {
    __break(1u);
  }
  else
  {
    v4.location = result;
    v4.length = (HIDWORD(result) - result);
    unint64_t result = (uint64_t)CFCharacterSetCreateWithCharactersInRange(0, v4);
    if (result)
    {
      int v3 = result;
      type metadata accessor for __CharacterSetStorage();
      unint64_t result = swift_allocObject();
      *(void *)(result + 16) = v3;
      *(unsigned char *)(result + 24) = 0;
      *a2 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CharacterSet@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (uint64_t)CFCharacterSetCreateMutable(0);
  if (result)
  {
    uint64_t v3 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(unsigned char *)(result + 24) = 1;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.decomposables.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetDecomposable);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.nonBaseCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetNonBase);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::String_optional __swiftcall NSScanner.scanCharacter()()
{
  unint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_charactersToBeSkipped);
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v58;
    *(unsigned char *)(v4 + 24) = 0;

    id v5 = objc_msgSend(v1, sel_string);
    id v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v7 = v6;

    id v8 = objc_msgSend(v1, sel_string);
    unint64_t v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    id v57 = v1;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v12 = StringProtocol._toUTF16Index(_:)();
    unint64_t v13 = v12;
    uint64_t v14 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v15 = 4 * v14;
    if (4 * v14 != v12 >> 14)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = String.Index.samePosition(in:)();
        if ((v18 & 1) == 0) {
          break;
        }
        uint64_t v19 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        id v20 = objc_msgSend(v1, sel__deprecated_scanLocation, v56);
        BOOL v21 = __OFADD__(v20, v19);
        uint64_t v17 = (uint64_t)v20 + v19;
        if (v21) {
          goto LABEL_39;
        }
        unint64_t v13 = StringProtocol._toUTF16Index(_:)();
        ++v16;
      }
      while (v15 != v13 >> 14);
    }
    swift_bridgeObjectRelease();
    unint64_t v22 = specialized Collection.suffix(from:)(v13, (uint64_t)v56, v7);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    if (v24 >> 14 == v22 >> 14)
    {
      swift_bridgeObjectRelease();
LABEL_25:
      unint64_t v1 = v57;
      id v39 = objc_msgSend(v57, sel_string, v56);
      uint64_t v40 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      unint64_t v42 = v41;
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v43 = HIBYTE(v42) & 0xF;
      if ((v42 & 0x2000000000000000) == 0) {
        uint64_t v43 = v40;
      }
      uint64_t v44 = v43 << 16;
      if ((v42 & 0x1000000000000000) == 0 || (v40 & 0x800000000000000) != 0) {
        unint64_t v30 = v44 | 7;
      }
      else {
        unint64_t v30 = v44 | 0xB;
      }
    }
    else
    {
      swift_retain();
      unint64_t v30 = v22;
      while (1)
      {
        uint64_t v36 = Substring.subscript.getter();
        unint64_t v38 = v37;
        swift_retain();
        LOBYTE(v36) = specialized Sequence.allSatisfy(_:)(v36, v38, v4);
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0) {
          break;
        }
        unint64_t v30 = Substring.index(after:)();
        if (v24 >> 14 == v30 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      unint64_t v1 = v57;
    }
  }
  else
  {
    id v25 = objc_msgSend(v0, sel_string);
    unint64_t v26 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    unint64_t v28 = v27;

    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v29 = StringProtocol._toUTF16Index(_:)();
    unint64_t v30 = v29;
    uint64_t v31 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0) {
      uint64_t v31 = v26 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v32 = 4 * v31;
    if (4 * v31 != v29 >> 14)
    {
      uint64_t v33 = 0;
      do
      {
        uint64_t v17 = String.Index.samePosition(in:)();
        if ((v18 & 1) == 0) {
          break;
        }
        uint64_t v34 = v33 + 1;
        if (__OFADD__(v33, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        id v35 = objc_msgSend(v1, sel__deprecated_scanLocation);
        BOOL v21 = __OFADD__(v35, v34);
        uint64_t v17 = (uint64_t)v35 + v34;
        if (v21) {
          goto LABEL_41;
        }
        unint64_t v30 = StringProtocol._toUTF16Index(_:)();
        ++v33;
      }
      while (v32 != v30 >> 14);
    }
    swift_bridgeObjectRelease();
  }
  id v45 = objc_msgSend(v1, sel_string, v56);
  unint64_t v46 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  unint64_t v48 = v47;

  uint64_t v49 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000) == 0) {
    uint64_t v49 = v46 & 0xFFFFFFFFFFFFLL;
  }
  if (v30 >> 14 == 4 * v49)
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = 0;
    char v51 = 0;
  }
  else
  {
    uint64_t v50 = String.subscript.getter();
    char v51 = v52;
    String.index(after:)();
    swift_bridgeObjectRelease();
    id v53 = objc_msgSend(v1, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v53);

    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v54 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel__deprecated_setScanLocation_, v54);
  }
  uint64_t v17 = v50;
  uint64_t v18 = v51;
LABEL_42:
  result.value._object = v18;
  result.value._uint64_t countAndFlagsBits = v17;
  return result;
}

void static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v7;
    *(unsigned char *)(v4 + 24) = 0;

LABEL_5:
    *a2 = v4;
    return;
  }
  CFMutableCharacterSetRef Mutable = CFCharacterSetCreateMutable(0);
  if (Mutable)
  {
    CFMutableCharacterSetRef v6 = Mutable;
    type metadata accessor for __CharacterSetStorage();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v6;
    *(unsigned char *)(v4 + 24) = 1;
    goto LABEL_5;
  }
  __break(1u);
}

CFCharacterSetRef static CharacterSet.punctuationCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CharacterSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (uint64_t)CFCharacterSetCreateMutable(0);
  if (result)
  {
    uint64_t v3 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(unsigned char *)(result + 24) = 1;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static CharacterSet.urlUserAllowed.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  id v3 = (id)a1();
  type metadata accessor for __CharacterSetStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(unsigned char *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t CharacterSet.init(charactersIn:)@<X0>(uint64_t *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CFCharacterSetRef v3 = CFCharacterSetCreateWithCharactersInString(0, v2);
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(unsigned char *)(result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.alphanumerics.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.newlines.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.whitespacesAndNewlines.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.whitespaces.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for __CharacterSetStorage()
{
  return self;
}

void type metadata accessor for CFCharacterSetRef(uint64_t a1)
{
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5 = *v3;
  id v6 = objc_allocWithZone((Class)NSNumber);
  uint64_t v7 = *a3;

  return objc_msgSend(v6, v7, v5);
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl()
{
  specialized JSONDecoderImpl.decode(_:)();
  return v0 & 1;
}

{
  return specialized JSONDecoderImpl.decode(_:)();
}

{
  return specialized JSONDecoderImpl.decode(_:)();
}

double DateInterval.duration.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t destroy for ScopedAttributeContainer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void _NSSetUnsignedLongLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      IMP MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      uint64_t v11[2] = ___NSSetUnsignedLongLongValueAndNotify_block_invoke;
      v11[3] = &unk_1E51F8BF8;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetFloatValueAndNotify(void *a1, const void *a2, float a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    unint64_t v9 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v10 = objc_msgSend((id)CFDictionaryGetValue(v9[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v9 + 40))
    {
      [a1 willChangeValueForKey:v10];
      IMP MethodImplementation = class_getMethodImplementation(*v9, (SEL)a2);
      ((void (*)(void *, const void *, float))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v10];
    }
    else
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___NSSetFloatValueAndNotify_block_invoke;
      v12[3] = &unk_1E51F7A90;
      v12[5] = v9;
      v12[6] = a2;
      v12[4] = a1;
      float v13 = a3;
      [a1 _changeValueForKey:v10 key:0 key:0 usingBlock:v12];
    }
  }
  else
  {
    *(float *)&double v7 = a3;
    objc_msgSend(a1, (SEL)a2, v7);
  }
}

void _NSSetRectValueAndNotify(void *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  v17[11] = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    uint64_t v14 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v15 = objc_msgSend((id)CFDictionaryGetValue(v14[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v14 + 40))
    {
      [a1 willChangeValueForKey:v15];
      IMP MethodImplementation = class_getMethodImplementation(*v14, (SEL)a2);
      ((void (*)(void *, const void *, double, double, double, double))MethodImplementation)(a1, a2, a3, a4, a5, a6);
      [a1 didChangeValueForKey:v15];
    }
    else
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = ___NSSetRectValueAndNotify_block_invoke;
      v17[3] = &unk_1E51F8C70;
      v17[5] = v14;
      v17[6] = a2;
      v17[4] = a1;
      *(double *)&v17[7] = a3;
      *(double *)&v17[8] = a4;
      *(double *)&v17[9] = a5;
      *(double *)&v17[10] = a6;
      [a1 _changeValueForKey:v15 key:0 key:0 usingBlock:v17];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4, a5, a6);
  }
}

void _NSSetLongLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      IMP MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      uint64_t v11[2] = ___NSSetLongLongValueAndNotify_block_invoke;
      v11[3] = &unk_1E51F8BF8;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetPointValueAndNotify(void *a1, const void *a2, double a3, double a4)
{
  _OWORD v13[9] = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    unint64_t v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v11 = objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v10 + 40))
    {
      [a1 willChangeValueForKey:v11];
      IMP MethodImplementation = class_getMethodImplementation(*v10, (SEL)a2);
      ((void (*)(void *, const void *, double, double))MethodImplementation)(a1, a2, a3, a4);
      [a1 didChangeValueForKey:v11];
    }
    else
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___NSSetPointValueAndNotify_block_invoke;
      v13[3] = &unk_1E51F8C48;
      v13[5] = v10;
      v13[6] = a2;
      v13[4] = a1;
      *(double *)&v13[7] = a3;
      *(double *)&v13[8] = a4;
      [a1 _changeValueForKey:v11 key:0 key:0 usingBlock:v13];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }
}

void _NSSetObjectValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      IMP MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      uint64_t v11[2] = ___NSSetObjectValueAndNotify_block_invoke;
      v11[3] = &unk_1E51F8BA8;
      v11[6] = v8;
      v11[7] = a2;
      v11[4] = a1;
      v11[5] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetDoubleValueAndNotify(void *a1, const void *a2, double a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      IMP MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, double))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      uint64_t v11[2] = ___NSSetDoubleValueAndNotify_block_invoke;
      v11[3] = &unk_1E51F8BF8;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      *(double *)&v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetSizeValueAndNotify(void *a1, const void *a2, double a3, double a4)
{
  _OWORD v13[9] = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    unint64_t v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v11 = objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v10 + 40))
    {
      [a1 willChangeValueForKey:v11];
      IMP MethodImplementation = class_getMethodImplementation(*v10, (SEL)a2);
      ((void (*)(void *, const void *, double, double))MethodImplementation)(a1, a2, a3, a4);
      [a1 didChangeValueForKey:v11];
    }
    else
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___NSSetSizeValueAndNotify_block_invoke;
      v13[3] = &unk_1E51F8C48;
      v13[5] = v10;
      v13[6] = a2;
      v13[4] = a1;
      *(double *)&v13[7] = a3;
      *(double *)&v13[8] = a4;
      [a1 _changeValueForKey:v11 key:0 key:0 usingBlock:v13];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }
}

void _NSSetBoolValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    unint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      IMP MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      uint64_t v11[2] = ___NSSetBoolValueAndNotify_block_invoke;
      v11[3] = &unk_1E51F8BD0;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      char v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void sub_1818D62F8(_Unwind_Exception *exception_object)
{
}

NSCharacterSet *__defaultInvertedSkipSet_block_invoke()
{
  CFCharacterSetRef result = [+[NSCharacterSet whitespaceAndNewlineCharacterSet] invertedSet];
  qword_1EB1ECB80 = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences()
{
  return &type metadata for LocalePreferences;
}

ValueMetadata *type metadata accessor for LocaleCache.State()
{
  return &type metadata for LocaleCache.State;
}

ValueMetadata *type metadata accessor for _LocaleICU.State()
{
  return &type metadata for _LocaleICU.State;
}

uint64_t URLComponents.string.getter()
{
  long long v1 = v0[7];
  v7[6] = v0[6];
  v7[7] = v1;
  v8[0] = v0[8];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  v7[2] = v0[2];
  v7[3] = v2;
  long long v3 = v0[5];
  v7[4] = v0[4];
  v7[5] = v3;
  long long v4 = v0[1];
  v7[0] = *v0;
  v7[1] = v4;
  if ((BYTE8(v7[0]) & 1) == 0) {
    return URLComponents._URLComponents.computedString.getter();
  }
  outlined init with take of LocalePreferences?((uint64_t)v7, (uint64_t)v9, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for URLParseInfo?);
  if (!v10) {
    return 0;
  }
  uint64_t v5 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t URLComponents.scheme.setter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();

  return swift_bridgeObjectRelease();
}

void (*URLComponents.path.getter())(char *, void)
{
  return URLComponents._URLComponents.path.getter();
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setScheme(_:)(uint64_t a1)
{
  return partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)(a1, (uint64_t (*)(void, void))URLComponents._URLComponents.setScheme(_:));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)(uint64_t a1, uint64_t (*a2)(void, void))
{
  return a2(*(void *)(v2 + 16), *(void *)(v2 + 24));
}

void (*URLComponents._URLComponents.path.getter())(char *, void)
{
  outlined init with take of LocalePreferences?(v0 + 104, (uint64_t)v20, &demangling cache variable for type metadata for String?);
  uint64_t v1 = outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for String?);
  unint64_t v2 = v22;
  if (v22)
  {
    uint64_t v3 = v21;
  }
  else if ((*(unsigned char *)(v0 + 14) & 1) != 0 {
         && (outlined init with take of LocalePreferences?(v0, (uint64_t)v19, &demangling cache variable for type metadata for URLParseInfo?), uint64_t v1 = outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v23, &demangling cache variable for type metadata for URLParseInfo?), v23))
  }
  {
    if (*(unsigned char *)(v23 + 168)) {
      uint64_t v4 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v4 = String.subscript.getter();
    }
    uint64_t v3 = MEMORY[0x185301F50](v4);
    unint64_t v2 = v5;
    uint64_t v1 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v2 = 0xE000000000000000;
  }
  uint64_t v6 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    outlined retain of String?((uint64_t)v20);
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v17 = v3;
  unint64_t v18 = v2;
  MEMORY[0x1F4188790](v1);
  v16[2] = &v17;
  v16[3] = MEMORY[0x1E4FBC870];
  outlined retain of String?((uint64_t)v20);
  swift_bridgeObjectRetain();
  double v7 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v16, v3, v2);
  if (v8 != 1)
  {
    unint64_t v11 = (void (*)(char *, void))v7;
    uint64_t v14 = v8;
    swift_bridgeObjectRelease_n();
    if (v14) {
      return v11;
    }
    return 0;
  }
  Swift::Int v9 = v17;
  unint64_t v10 = v18;
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v9, v10, MEMORY[0x1E4FBC870]);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (!v13) {
    return 0;
  }
  return v11;
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.host.setter()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return URLComponents._URLComponents.host.setter(v2, v1);
}

uint64_t URLComponents._URLComponents.host.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 12) = 0;
  *(_WORD *)(v2 + 152) = 0;
  if (!a2)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v2 + 72) = a1;
    *(void *)(v2 + 80) = 0;
    return result;
  }
  unint64_t v7 = specialized Collection.first.getter(a1, a2);
  if ((v7 & 0x1FF) != 0x5B) {
    goto LABEL_26;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      goto LABEL_208;
    }
    uint64_t v9 = (a1 >> 59) & 1;
    unint64_t v7 = MEMORY[0x185302230](15, result - 1, a1, a2);
LABEL_8:
    if ((v7 & 0xC) != 4 << v9) {
      goto LABEL_9;
    }
    goto LABEL_165;
  }
  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    unint64_t v7 = (v8 << 16) - 65532;
    LOBYTE(v9) = 1;
    goto LABEL_8;
  }
  __break(1u);
LABEL_165:
  unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
LABEL_9:
  unint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v11 = v7 >> 16;
  if (v7 >> 16 >= v10)
  {
    __break(1u);
    goto LABEL_167;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    char v13 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
    uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
    char v13 = *((unsigned char *)&v135 + v11);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v12 = _StringObject.sharedUTF8.getter();
    }
    char v13 = *(unsigned char *)(v12 + v11);
  }
  if (v13 != 93)
  {
LABEL_26:
    if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      unint64_t v113 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v114 = (unsigned __int16 *)objc_msgSend(v113, sel__fastCharacterContents);
      id v115 = v113;
      if (v114)
      {
        uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        uint64_t v136 = a2;
        StringProtocol._ephemeralString.getter();
        uint64_t v116 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v117 = objc_msgSend(v116, sel_length);
        swift_unknownObjectRelease();
        char v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, (uint64_t)v117, 4u, 1);
      }
      else
      {
        char v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 4u, 1);
      }
      char v119 = v118;
      swift_bridgeObjectRelease_n();
      if ((v119 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_32;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v19 = HIBYTE(a2) & 0xF;
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v18 = (char *)&v135;
      goto LABEL_31;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v18 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFLL;
      goto LABEL_31;
    }
LABEL_167:
    unint64_t v18 = (char *)_StringObject.sharedUTF8.getter();
LABEL_31:
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v19, 4u, 1)) {
      goto LABEL_22;
    }
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v20 = swift_bridgeObjectRelease();
    *(void *)(v4 + 72) = a1;
    *(void *)(v4 + 80) = a2;
    LOBYTE(v135) = 37;
    MEMORY[0x1F4188790](v20);
    unint64_t v133 = &v135;
    char v21 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v132, a1, a2);
    uint64_t result = swift_bridgeObjectRelease();
    char v22 = v21 & 1;
    goto LABEL_158;
  }
  swift_bridgeObjectRetain();
  char v15 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_32;
  }
LABEL_22:
  if (*(void *)(v4 + 32))
  {
    unint64_t object = *(void *)(v4 + 24);
    uint64_t v17 = *(void *)(v4 + 32);
  }
  else
  {
    unint64_t object = 0;
    if (*(unsigned char *)(v4 + 9) == 1)
    {
      uint64_t v17 = 0;
      if (*(void *)v4)
      {
        if (*(unsigned char *)(*(void *)v4 + 48))
        {
          unint64_t object = 0;
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v52 = String.subscript.getter();
          unint64_t object = MEMORY[0x185301F50](v52);
          uint64_t v17 = v53;
          swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  if (specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v17)
  {
    uint64_t v23 = one-time initialization token for schemesToPercentEncodeHost;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23 != -1) {
      swift_once();
    }
    uint64_t v24 = static RFC3986Parser.schemesToPercentEncodeHost;
    Swift::String v25 = String.lowercased()();
    unint64_t object = (unint64_t)v25._object;
    LOBYTE(v24) = specialized Set.contains(_:)(v25._countAndFlagsBits, (uint64_t)v25._object, v24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v24)
    {
LABEL_37:
      if ((a2 & 0x2000000000000000) != 0) {
        unint64_t v26 = HIBYTE(a2) & 0xF;
      }
      else {
        unint64_t v26 = a1 & 0xFFFFFFFFFFFFLL;
      }
      if (v26)
      {
        Swift::Int v27 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
        if ((v27 & 1) == 0)
        {
          uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
          uint64_t v136 = a2;
          MEMORY[0x1F4188790](v27);
          unint64_t v133 = &v135;
          char v134 = 4;
          swift_bridgeObjectRetain();
LABEL_137:
          long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v132, a1, a2);
          if (v84)
          {
            uint64_t v79 = v83;
            unint64_t v80 = v84;
            swift_bridgeObjectRelease_n();
            goto LABEL_157;
          }
          id v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v135;
          unint64_t v86 = v136;
          swift_bridgeObjectRetain();
          uint64_t v79 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v85, v86, 4u);
          unint64_t v80 = v87;
          swift_bridgeObjectRelease_n();
          goto LABEL_156;
        }
        uint64_t result = specialized Collection.first.getter(a1, a2);
        if ((result & 0x100) == 0)
        {
          if (result == 91)
          {
            if ((a2 & 0x1000000000000000) == 0)
            {
              unint64_t v28 = (v26 << 16) - 65532;
              LOBYTE(v29) = 1;
LABEL_46:
              if ((v28 & 0xC) == 4 << v29) {
                unint64_t v28 = _StringGuts._slowEnsureMatchingEncoding(_:)(v28, a1, a2);
              }
              unint64_t v30 = v28 >> 16;
              if (v28 >> 16 >= v26)
              {
                __break(1u);
              }
              else
              {
                if ((a2 & 0x1000000000000000) != 0)
                {
                  char v32 = String.UTF8View._foreignSubscript(position:)();
                }
                else if ((a2 & 0x2000000000000000) != 0)
                {
                  uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                  uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
                  char v32 = *((unsigned char *)&v135 + v30);
                }
                else
                {
                  if ((a1 & 0x1000000000000000) != 0) {
                    uint64_t v31 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  }
                  else {
                    uint64_t v31 = _StringObject.sharedUTF8.getter();
                  }
                  char v32 = *(unsigned char *)(v31 + v30);
                }
                if (v32 == 93)
                {
                  unint64_t v54 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
                  if (v55)
                  {
                    swift_bridgeObjectRetain();
                    if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) == 0)
                    {
                      swift_bridgeObjectRelease_n();
                      uint64_t result = swift_bridgeObjectRelease();
                      *(void *)(v4 + 72) = 0;
                      *(void *)(v4 + 80) = 0;
                      *(unsigned char *)(v4 + 153) = 1;
                      return result;
                    }
LABEL_147:
                    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                    uint64_t v136 = a2;
                    uint64_t v79 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))String.init<A>(_:)();
                    unint64_t v80 = v92;
LABEL_156:
                    swift_bridgeObjectRelease();
                    goto LABEL_157;
                  }
                  unint64_t v56 = v54;
                  if ((a2 & 0x1000000000000000) != 0)
                  {
                    Swift::Int v57 = String.UTF8View._foreignCount()();
                    if (__OFSUB__(v57, 1))
                    {
                      __break(1u);
                      goto LABEL_198;
                    }
                    unint64_t v26 = MEMORY[0x185302230](15, v57 - 1, a1, a2);
                  }
                  else
                  {
                    unint64_t v26 = (v26 << 16) - 65532;
                  }
                  if (v26 >> 14 >= v56 >> 14)
                  {
                    swift_bridgeObjectRetain_n();
                    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
                    unint64_t v60 = v59;
                    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v58;
                    uint64_t v136 = v61;
                    unint64_t v137 = v62;
                    unint64_t v138 = v59;
                    MEMORY[0x1F4188790](v58);
                    unint64_t v133 = &v135;
                    char v134 = 8;
LABEL_152:
                    uint64_t v98 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v132, v64, v65, v63, v60);
                    if (v99)
                    {
                      uint64_t v100 = (uint64_t)v98;
                      uint64_t v101 = v99;
                    }
                    else
                    {
                      Swift::UInt8 v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v135;
                      unint64_t v103 = v136;
                      unint64_t v104 = v137;
                      unint64_t v105 = v138;
                      swift_bridgeObjectRetain();
                      uint64_t v100 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v102, v103, v104, v105, 8u);
                      uint64_t v101 = v106;
                      swift_bridgeObjectRelease();
                    }
                    uint64_t v107 = String.subscript.getter();
                    uint64_t v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x185301F50](v107);
                    uint64_t v110 = v109;
                    swift_bridgeObjectRelease();
                    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v108;
                    uint64_t v136 = v110;
                    v111._uint64_t countAndFlagsBits = v100;
                    v111._unint64_t object = v101;
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 93;
                    v112._unint64_t object = (void *)0xE100000000000000;
                    String.append(_:)(v112);
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    uint64_t v79 = v135;
                    unint64_t v80 = v136;
                    goto LABEL_156;
                  }
                  __break(1u);
LABEL_187:
                  uint64_t v81 = (char *)_StringObject.sharedUTF8.getter();
                  goto LABEL_134;
                }
              }
              __break(1u);
LABEL_178:
              uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
              uint64_t v136 = object;
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain_n();
              StringProtocol._ephemeralString.getter();
              uint64_t v120 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              uint64_t v121 = (unsigned __int16 *)objc_msgSend(v120, sel__fastCharacterContents);
              id v122 = v120;
              if (v121)
              {
                uint64_t v123 = v121;
                uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
                uint64_t v136 = object;
                StringProtocol._ephemeralString.getter();
                uint64_t v124 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v125 = objc_msgSend(v124, sel_length);
                swift_unknownObjectRelease();
                char v126 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v123, (uint64_t)v125, 4u, 1);
              }
              else
              {
LABEL_193:
                char v126 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v26, object, 4u, 1);
              }
              char v128 = v126;
              swift_bridgeObjectRelease_n();
              if (v128) {
                goto LABEL_135;
              }
              goto LABEL_114;
            }
          }
          else
          {
            __break(1u);
          }
          uint64_t result = String.UTF8View._foreignCount()();
          if (!__OFSUB__(result, 1))
          {
            uint64_t v29 = (a1 >> 59) & 1;
            unint64_t v28 = MEMORY[0x185302230](15, result - 1, a1, a2);
            goto LABEL_46;
          }
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
          return result;
        }
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
LABEL_128:
      swift_bridgeObjectRelease();
      uint64_t v79 = 0;
      unint64_t v80 = 0xE000000000000000;
      goto LABEL_157;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v33 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      goto LABEL_72;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v141 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      uint64_t v142 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v135, HIBYTE(a2) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v141, 1, (unsigned __int8 *)&v135, HIBYTE(a2) & 0xF, (uint64_t *)&v139);
      unint64_t v26 = v139;
      unint64_t object = v140;
      swift_release();
      goto LABEL_71;
    }
    if ((a1 & 0x1000000000000000) == 0) {
      goto LABEL_185;
    }
    uint64_t v34 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_68;
  }
  unint64_t v26 = 0;
  unint64_t object = 0xE000000000000000;
  while (1)
  {
LABEL_76:
    unint64_t v45 = specialized Collection.first.getter(v26, object);
    if ((v45 & 0x1FF) != 0x5B) {
      goto LABEL_129;
    }
    if ((object & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1)) {
        goto LABEL_211;
      }
      uint64_t v47 = (v26 >> 59) & 1;
      unint64_t v45 = MEMORY[0x185302230](15, result - 1, v26, object);
LABEL_82:
      if ((v45 & 0xC) != 4 << v47) {
        goto LABEL_83;
      }
      goto LABEL_183;
    }
    uint64_t v46 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v46 = v26 & 0xFFFFFFFFFFFFLL;
    }
    if (v46)
    {
      unint64_t v45 = (v46 << 16) - 65532;
      LOBYTE(v47) = 1;
      goto LABEL_82;
    }
    __break(1u);
LABEL_183:
    unint64_t v45 = _StringGuts._slowEnsureMatchingEncoding(_:)(v45, v26, object);
LABEL_83:
    unint64_t v48 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      unint64_t v48 = v26 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v49 = v45 >> 16;
    if (v45 >> 16 < v48) {
      break;
    }
    __break(1u);
LABEL_185:
    uint64_t v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    uint64_t v33 = v127;
LABEL_68:
    uint64_t v135 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
    uint64_t v136 = 0;
    swift_bridgeObjectRetain_n();
    unint64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v34, v33, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135, 1, v34, v33);
    unint64_t object = v35;
LABEL_71:
    swift_bridgeObjectRelease();
    if (object == 1)
    {
LABEL_72:
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      uint64_t v36 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v37 = objc_msgSend(v36, sel__fastCharacterContents);
      id v38 = v36;
      if (!v37)
      {
        uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        uint64_t v136 = a2;
        swift_bridgeObjectRetain();
        uint64_t v67 = String.init<A>(_:)();
        unint64_t v68 = v66;
        if ((v66 & 0x1000000000000000) != 0) {
          goto LABEL_199;
        }
        if ((v66 & 0x2000000000000000) != 0) {
          goto LABEL_200;
        }
        goto LABEL_108;
      }
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2;
      StringProtocol._ephemeralString.getter();
      id v39 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v40 = objc_msgSend(v39, sel_length);
      uint64_t v41 = swift_unknownObjectRelease();
      uint64_t v42 = MEMORY[0x1F4188790](v41);
      LOBYTE(v133) = 1;
      MEMORY[0x1F4188790](v42);
      v131[2] = v37;
      v131[3] = v40;
      unint64_t v26 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v37, (uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v43, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v131);
      unint64_t object = v44;
      swift_bridgeObjectRelease_n();
      if (!object) {
        goto LABEL_74;
      }
    }
    else
    {
      swift_bridgeObjectRelease_n();
      if (!object) {
        goto LABEL_74;
      }
    }
  }
  if ((object & 0x1000000000000000) != 0)
  {
    char v51 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((object & 0x2000000000000000) != 0)
  {
    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    uint64_t v136 = object & 0xFFFFFFFFFFFFFFLL;
    char v51 = *((unsigned char *)&v135 + v49);
  }
  else
  {
    if ((v26 & 0x1000000000000000) != 0) {
      uint64_t v50 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v50 = _StringObject.sharedUTF8.getter();
    }
    char v51 = *(unsigned char *)(v50 + v49);
  }
  if (v51 == 93)
  {
    swift_bridgeObjectRetain();
    char v72 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v26, object);
    swift_bridgeObjectRelease();
    if ((v72 & 1) == 0) {
      goto LABEL_114;
    }
LABEL_135:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v4 + 72) = v26;
    *(void *)(v4 + 80) = object;
    return result;
  }
LABEL_129:
  if ((object & 0x1000000000000000) != 0) {
    goto LABEL_178;
  }
  if ((object & 0x2000000000000000) != 0)
  {
    uint64_t v82 = HIBYTE(object) & 0xF;
    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    uint64_t v136 = object & 0xFFFFFFFFFFFFFFLL;
    uint64_t v81 = (char *)&v135;
    goto LABEL_134;
  }
  if ((v26 & 0x1000000000000000) == 0) {
    goto LABEL_187;
  }
  uint64_t v81 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v82 = v26 & 0xFFFFFFFFFFFFLL;
LABEL_134:
  if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, v82, 4u, 1)) {
    goto LABEL_135;
  }
LABEL_114:
  swift_bridgeObjectRelease();
  *(unsigned char *)(v4 + 153) = 1;
  if (!v3) {
    goto LABEL_128;
  }
  while (2)
  {
    Swift::Int v73 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
    if ((v73 & 1) == 0)
    {
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2;
      MEMORY[0x1F4188790](v73);
      unint64_t v133 = &v135;
      char v134 = 4;
      swift_bridgeObjectRetain();
      goto LABEL_137;
    }
    uint64_t result = specialized Collection.first.getter(a1, a2);
    if ((result & 0x100) != 0) {
      goto LABEL_209;
    }
    if (result == 91)
    {
      if ((a2 & 0x1000000000000000) == 0)
      {
        unint64_t v74 = (v3 << 16) - 65532;
        LOBYTE(v75) = 1;
        goto LABEL_120;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1)) {
      goto LABEL_212;
    }
    uint64_t v75 = (a1 >> 59) & 1;
    unint64_t v74 = MEMORY[0x185302230](15, result - 1, a1, a2);
LABEL_120:
    if ((v74 & 0xC) == 4 << v75) {
      unint64_t v74 = _StringGuts._slowEnsureMatchingEncoding(_:)(v74, a1, a2);
    }
    unint64_t v76 = v74 >> 16;
    if (v74 >> 16 >= v3)
    {
      __break(1u);
LABEL_192:
      __break(1u);
      goto LABEL_193;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      char v78 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      char v78 = *((unsigned char *)&v135 + v76);
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v77 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v77 = _StringObject.sharedUTF8.getter();
      }
      char v78 = *(unsigned char *)(v77 + v76);
    }
    if (v78 != 93) {
      goto LABEL_192;
    }
    unint64_t v88 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
    if ((v89 & 1) == 0)
    {
      unint64_t v90 = v88;
      if ((a2 & 0x1000000000000000) == 0)
      {
        unint64_t v91 = (v3 << 16) - 65532;
        goto LABEL_150;
      }
      Swift::Int v93 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v93, 1))
      {
        __break(1u);
      }
      else
      {
        unint64_t v91 = MEMORY[0x185302230](15, v93 - 1, a1, a2);
LABEL_150:
        if (v91 >> 14 >= v90 >> 14)
        {
          swift_bridgeObjectRetain_n();
          long long v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
          unint64_t v60 = v95;
          uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v94;
          uint64_t v136 = v96;
          unint64_t v137 = v97;
          unint64_t v138 = v95;
          MEMORY[0x1F4188790](v94);
          unint64_t v133 = &v135;
          char v134 = 8;
          goto LABEL_152;
        }
LABEL_198:
        __break(1u);
LABEL_199:
        uint64_t v67 = static String._copying(_:)();
        unint64_t v130 = v129;
        swift_bridgeObjectRelease();
        unint64_t v68 = v130;
        if ((v130 & 0x2000000000000000) != 0)
        {
LABEL_200:
          uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v67;
          uint64_t v136 = v68 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v141 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          uint64_t v142 = 0;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v135, HIBYTE(v68) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v141, 1, (unsigned __int8 *)&v135, HIBYTE(v68) & 0xF, (uint64_t *)&v139);
          unint64_t v26 = v139;
          unint64_t object = v140;
          swift_release();
          goto LABEL_201;
        }
LABEL_108:
        if ((v67 & 0x1000000000000000) != 0)
        {
          uint64_t v69 = (unsigned __int8 *)((v68 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v70 = v67 & 0xFFFFFFFFFFFFLL;
LABEL_110:
          uint64_t v135 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          uint64_t v136 = 0;
          unint64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v69, v70, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135, 1, v69, v70);
          unint64_t object = v71;
LABEL_201:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          if (object) {
            goto LABEL_76;
          }
LABEL_74:
          *(unsigned char *)(v4 + 153) = 1;
          continue;
        }
      }
      uint64_t v69 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      goto LABEL_110;
    }
    break;
  }
  swift_bridgeObjectRetain();
  if (specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2)) {
    goto LABEL_147;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v79 = 0;
  unint64_t v80 = 0;
LABEL_157:
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v4 + 72) = v79;
  *(void *)(v4 + 80) = v80;
  char v22 = 1;
LABEL_158:
  *(unsigned char *)(v4 + 152) = v22;
  return result;
}

unint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(void *), uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v18 = a1;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v7 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    char v16 = 0;
    return v16 & 1;
  }
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  unint64_t v10 = 15;
  while (1)
  {
    unint64_t v11 = v10 & 0xC;
    unint64_t result = v10;
    if (v11 == v9) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a3, a4);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v7) {
      break;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v14 = result;
      if (v11 != v9) {
        goto LABEL_18;
      }
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v17[0] = a3;
      v17[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      char v14 = *((unsigned char *)v17 + v13);
      if (v11 != v9) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v14 = *(unsigned char *)(result + v13);
      if (v11 != v9)
      {
LABEL_18:
        if ((a4 & 0x1000000000000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a3, a4);
    unint64_t v10 = result;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_19:
      unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_22:
    if (v7 <= v10 >> 16) {
      goto LABEL_32;
    }
    unint64_t v10 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    LOBYTE(v17[0]) = v14;
    char v15 = v18(v17);
    if (v4)
    {
      swift_bridgeObjectRelease();
      return v16 & 1;
    }
    if (v15)
    {
      swift_bridgeObjectRelease();
      char v16 = 1;
      return v16 & 1;
    }
    if (4 * v7 == v10 >> 14) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

BOOL closure #1 in Sequence<>.contains(_:)specialized partial apply(unsigned __int8 *a1)
{
  return partial apply for specialized closure #1 in Sequence<>.contains(_:)(a1);
}

BOOL partial apply for specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1)
{
  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(unsigned __int8 **)(v1 + 16));
}

BOOL _sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0(unsigned __int8 *a1)
{
  return _sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tFSbABXEfU_SS8UTF8ViewV_TG5TA_0(a1);
}

BOOL specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URLComponents._URLComponents.setScheme(_:)(Swift::String_optional a1)
{
  uint64_t v3 = v1;
  unint64_t object = (unint64_t)a1.value._object;
  unint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  *(_WORD *)(v1 + 8) = 0;
  if (a1.value._object)
  {
    __int16 v6 = specialized Collection.first.getter(a1.value._countAndFlagsBits, (unint64_t)a1.value._object);
    if ((v6 & 0x100) == 0 && v6 >= 0x41u)
    {
      if ((object & 0x1000000000000000) != 0)
      {
        Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
        uint64_t v103 = object;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v80 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v81 = (unsigned __int16 *)objc_msgSend(v80, sel__fastCharacterContents);
        id v82 = v80;
        if (v81)
        {
          Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
          uint64_t v103 = object;
          StringProtocol._ephemeralString.getter();
          long long v83 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v84 = objc_msgSend(v83, sel_length);
          swift_unknownObjectRelease();
          char v85 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, (uint64_t)v84, 1u, 0);
        }
        else
        {
          char v85 = specialized Sequence.allSatisfy(_:)(countAndFlagsBits, object, 1);
        }
        swift_bridgeObjectRelease();
        if (v85) {
          goto LABEL_10;
        }
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          uint64_t v8 = HIBYTE(object) & 0xF;
          Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
          uint64_t v103 = object & 0xFFFFFFFFFFFFFFLL;
          unint64_t v7 = (char *)&v102;
        }
        else if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          unint64_t v7 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 1u, 0)) {
          goto LABEL_10;
        }
      }
    }
    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *unint64_t v86 = 0;
    swift_willThrow();
    return;
  }
LABEL_10:
  uint64_t v128 = v2;
  *(void *)(v3 + 24) = countAndFlagsBits;
  *(void *)(v3 + 32) = object;
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRelease();
  unint64_t v10 = *(unsigned char **)v3;
  char v11 = *(unsigned char *)(v3 + 8);
  char v12 = *(unsigned char *)(v3 + 9);
  int v13 = *(unsigned __int8 *)(v3 + 10);
  int v14 = *(unsigned __int8 *)(v3 + 11);
  char v15 = *(unsigned char *)(v3 + 12);
  int v16 = *(unsigned __int8 *)(v3 + 13);
  char v17 = *(unsigned char *)(v3 + 14);
  char v18 = *(unsigned char *)(v3 + 15);
  char v19 = *(unsigned char *)(v3 + 16);
  uint64_t v20 = *(void *)(v3 + 40);
  uint64_t v21 = *(void *)(v3 + 64);
  uint64_t v22 = *(void *)(v3 + 72);
  int v24 = *(unsigned __int8 *)(v3 + 152);
  char v25 = *(unsigned char *)(v3 + 153);
  unsigned __int8 v104 = *(unsigned char *)(v3 + 96);
  int v23 = v104;
  unint64_t v105 = v10;
  char v106 = v11;
  char v107 = v12;
  char v108 = v13;
  char v109 = v14;
  char v110 = v15;
  char v111 = v16;
  char v112 = v17;
  char v113 = v18;
  char v114 = v19;
  unint64_t v115 = countAndFlagsBits;
  unint64_t v116 = object;
  uint64_t v117 = v20;
  long long v26 = *(_OWORD *)(v3 + 48);
  long long v118 = v26;
  uint64_t v119 = v21;
  uint64_t v120 = v22;
  long long v121 = *(_OWORD *)(v3 + 80);
  unsigned __int8 v122 = v104;
  long long v123 = *(_OWORD *)(v3 + 104);
  long long v124 = *(_OWORD *)(v3 + 120);
  long long v125 = *(_OWORD *)(v3 + 136);
  char v126 = v24;
  char v127 = v25;
  if ((void)v121)
  {
    unint64_t v27 = v121;
    goto LABEL_51;
  }
  long long v95 = v26;
  uint64_t v96 = v21;
  int v97 = v14;
  int v94 = v24;
  char v28 = v15 ^ 1;
  if (v10) {
    char v29 = v28;
  }
  else {
    char v29 = 1;
  }
  if ((v29 & 1) == 0 && (v10[120] & 1) == 0)
  {
    uint64_t v36 = String.subscript.getter();
    MEMORY[0x185301F50](v36);
    swift_bridgeObjectRelease();
    uint64_t v9 = swift_bridgeObjectRelease();
    int v33 = v97;
    uint64_t v34 = v96;
    uint64_t v35 = v95;
    if (v10[120])
    {
LABEL_21:
      if (v23)
      {
        if (v16 && v10 && (v10[144] & 1) == 0)
        {
          unint64_t v39 = String.subscript.getter();
          uint64_t v43 = v42;
          if ((v39 ^ v40) >> 14)
          {
            uint64_t v44 = v39;
            uint64_t v45 = v40;
            uint64_t v46 = v41;
            uint64_t v47 = v128;
            _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v39, v40, v41, v42, 10);
            uint64_t v128 = v47;
            if ((v48 & 0x100) != 0)
            {
              specialized _parseInteger<A, B>(ascii:radix:)(v44, v45, v46, v43, 10);
              char v52 = v51;
              uint64_t v9 = swift_bridgeObjectRelease();
              int v50 = v52 & 1;
            }
            else
            {
              char v49 = v48;
              uint64_t v9 = swift_bridgeObjectRelease();
              int v50 = v49 & 1;
            }
            uint64_t v22 = 0;
            unint64_t v27 = 0xE000000000000000;
            LOBYTE(v24) = v94;
            int v33 = v97;
            uint64_t v34 = v96;
            if (!v50 || (void)v95)
            {
LABEL_51:
              uint64_t v56 = v22 & 0xFFFFFFFFFFFFLL;
              if ((v27 & 0x2000000000000000) != 0) {
                uint64_t v57 = HIBYTE(v27) & 0xF;
              }
              else {
                uint64_t v57 = v22 & 0xFFFFFFFFFFFFLL;
              }
              if (!v57)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                unint64_t v53 = 0;
                unint64_t v54 = 0xE000000000000000;
                goto LABEL_71;
              }
              if (v24)
              {
                Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                uint64_t v103 = v27;
                MEMORY[0x1F4188790](v9);
                unint64_t v92 = &v102;
                uint64_t v93 = MEMORY[0x1E4FBC870];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v58 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v91, v22, v27);
                if (v59 == 1)
                {
                  unint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v102;
                  unint64_t v61 = v103;
                  swift_bridgeObjectRetain();
                  unint64_t v53 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v60, v61, MEMORY[0x1E4FBC870]);
                  unint64_t v54 = v62;
LABEL_58:
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  goto LABEL_71;
                }
                unint64_t v53 = (unint64_t)v58;
                unint64_t v54 = v59;
LABEL_70:
                swift_bridgeObjectRelease_n();
                goto LABEL_71;
              }
              if ((v27 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v27 & 0x2000000000000000) != 0)
                {
                  Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                  uint64_t v103 = v27 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v100 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                  uint64_t v101 = 0;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain_n();
                  closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v102, HIBYTE(v27) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v100, 0, (unsigned __int8 *)&v102, HIBYTE(v27) & 0xF, (uint64_t *)&v98);
                  unint64_t v53 = v98;
                  unint64_t v54 = v99;
                  swift_release();
                }
                else
                {
                  if ((v22 & 0x1000000000000000) != 0)
                  {
                    unint64_t v63 = (unsigned __int8 *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }
                  else
                  {
                    unint64_t v63 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                    uint64_t v56 = v87;
                  }
                  Swift::UInt8 v102 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                  uint64_t v103 = 0;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain_n();
                  unint64_t v53 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v63, v56, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v102, 0, v63, v56);
                  unint64_t v54 = v64;
                }
                swift_bridgeObjectRelease();
                if (v54 != 1) {
                  goto LABEL_70;
                }
              }
              Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
              uint64_t v103 = v27;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol._ephemeralString.getter();
              unint64_t v65 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v66 = objc_msgSend(v65, sel__fastCharacterContents);
              id v67 = v65;
              if (v66)
              {
                Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                uint64_t v103 = v27;
                StringProtocol._ephemeralString.getter();
                unint64_t v68 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v69 = objc_msgSend(v68, sel_length);
                uint64_t v70 = swift_unknownObjectRelease();
                uint64_t v71 = MEMORY[0x1F4188790](v70);
                LOBYTE(v92) = 0;
                MEMORY[0x1F4188790](v71);
                v90[2] = v66;
                v90[3] = v69;
                unint64_t v53 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v66, (uint64_t)v69, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v72, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v90);
                unint64_t v54 = v73;
                swift_bridgeObjectRelease_n();
                goto LABEL_71;
              }
              Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
              uint64_t v103 = v27;
              swift_bridgeObjectRetain();
              uint64_t v75 = String.init<A>(_:)();
              unint64_t v76 = v74;
              if ((v74 & 0x1000000000000000) != 0)
              {
                uint64_t v75 = static String._copying(_:)();
                unint64_t v89 = v88;
                swift_bridgeObjectRelease();
                unint64_t v76 = v89;
                if ((v89 & 0x2000000000000000) == 0) {
                  goto LABEL_74;
                }
              }
              else if ((v74 & 0x2000000000000000) == 0)
              {
LABEL_74:
                if ((v75 & 0x1000000000000000) != 0)
                {
                  uint64_t v77 = (unsigned __int8 *)((v76 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  uint64_t v78 = v75 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  uint64_t v77 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                }
                Swift::UInt8 v102 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                uint64_t v103 = 0;
                unint64_t v53 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v77, v78, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v102, 0, v77, v78);
                unint64_t v54 = v79;
                goto LABEL_58;
              }
              Swift::UInt8 v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v75;
              uint64_t v103 = v76 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v100 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
              uint64_t v101 = 0;
              closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v102, HIBYTE(v76) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v100, 0, (unsigned __int8 *)&v102, HIBYTE(v76) & 0xF, (uint64_t *)&v98);
              unint64_t v53 = v98;
              unint64_t v54 = v99;
              swift_release();
              goto LABEL_58;
            }
LABEL_38:
            if (v13 && v10 && (v10[72] & 1) == 0)
            {
LABEL_49:
              uint64_t v55 = String.subscript.getter();
              MEMORY[0x185301F50](v55);
              swift_bridgeObjectRelease();
              uint64_t v9 = swift_bridgeObjectRelease();
              LOBYTE(v24) = v94;
              goto LABEL_50;
            }
            if (!v34)
            {
              unint64_t v53 = 0;
              if (!v33)
              {
                unint64_t v54 = 0;
                goto LABEL_71;
              }
              if (!v10)
              {
                unint64_t v54 = 0;
                goto LABEL_71;
              }
              if (v10[96])
              {
                unint64_t v53 = 0;
                unint64_t v54 = 0;
LABEL_71:
                URLComponents._URLComponents.host.setter(v53, v54);
                return;
              }
              goto LABEL_49;
            }
LABEL_50:
            uint64_t v22 = 0;
            unint64_t v27 = 0xE000000000000000;
            goto LABEL_51;
          }
          uint64_t v9 = swift_bridgeObjectRelease();
          int v33 = v97;
          uint64_t v34 = v96;
          uint64_t v35 = v95;
        }
        LOBYTE(v24) = v94;
        if (v35) {
          goto LABEL_50;
        }
        goto LABEL_38;
      }
      uint64_t v22 = 0;
      unint64_t v27 = 0xE000000000000000;
LABEL_30:
      LOBYTE(v24) = v94;
      goto LABEL_51;
    }
LABEL_29:
    uint64_t v37 = String.subscript.getter();
    uint64_t v22 = MEMORY[0x185301F50](v37);
    unint64_t v27 = v38;
    uint64_t v9 = swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v9 = URLComponents._URLComponents.port.getter();
  if ((v30 & 1) == 0
    || (URLComponents._URLComponents.percentEncodedUser.getter(), v32 = v31, uint64_t v9 = swift_bridgeObjectRelease(), v32))
  {
    int v33 = v97;
    uint64_t v34 = v96;
    uint64_t v35 = v95;
    if (v29 & 1) != 0 || (v10[120]) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }
}

uint64_t URLComponents._URLComponents.computedString.getter()
{
  if (*(unsigned char *)(v0 + 153)) {
    return 0;
  }
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = v2;
LABEL_4:
    v81._uint64_t countAndFlagsBits = v3;
    v81._unint64_t object = v4;
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = 58;
    v5._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if (*(unsigned char *)(v0 + 9))
  {
    outlined init with take of LocalePreferences?(v0, (uint64_t)v73, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)&v74, &demangling cache variable for type metadata for URLParseInfo?);
    if (v74)
    {
      if ((*(unsigned char *)(v74 + 48) & 1) == 0)
      {
        uint64_t v13 = String.subscript.getter();
        uint64_t v3 = MEMORY[0x185301F50](v13);
        uint64_t v4 = v14;
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
  }
LABEL_8:
  if (URLComponents._URLComponents.hasAuthority.getter())
  {
    outlined init with take of LocalePreferences?(v1 + 104, (uint64_t)v72, &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)&v75, &demangling cache variable for type metadata for String?);
    unint64_t v6 = v76;
    if (v76)
    {
      uint64_t v7 = v75;
    }
    else if ((*(unsigned char *)(v1 + 14) & 1) != 0 {
           && (outlined init with take of LocalePreferences?(v1, (uint64_t)v71, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)&v77, &demangling cache variable for type metadata for URLParseInfo?), v77))
    }
    {
      if (*(unsigned char *)(v77 + 168)) {
        uint64_t v11 = MEMORY[0x185302C80](0, 0xE000000000000000);
      }
      else {
        uint64_t v11 = String.subscript.getter();
      }
      uint64_t v7 = MEMORY[0x185301F50](v11);
      unint64_t v6 = v15;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v6 = 0xE000000000000000;
    }
    __int16 v16 = specialized Collection.first.getter(v7, v6);
    outlined retain of String?((uint64_t)v72);
    swift_bridgeObjectRelease();
    if ((v16 & 0x100) == 0 && v16 != 47) {
      goto LABEL_28;
    }
    v17._uint64_t countAndFlagsBits = 12079;
    v17._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    goto LABEL_55;
  }
  outlined init with take of LocalePreferences?(v1 + 104, (uint64_t)v72, &demangling cache variable for type metadata for String?);
  uint64_t result = outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)&v75, &demangling cache variable for type metadata for String?);
  unint64_t v9 = v76;
  if (v76)
  {
    unint64_t v10 = v75;
  }
  else if ((*(unsigned char *)(v1 + 14) & 1) != 0 {
         && (outlined init with take of LocalePreferences?(v1, (uint64_t)v71, &demangling cache variable for type metadata for URLParseInfo?), uint64_t result = outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)&v77, &demangling cache variable for type metadata for URLParseInfo?), v77))
  }
  {
    if (*(unsigned char *)(v77 + 168)) {
      uint64_t v12 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v12 = String.subscript.getter();
    }
    unint64_t v10 = MEMORY[0x185301F50](v12);
    unint64_t v9 = v18;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  unint64_t v19 = 65540;
  if ((v9 & 0x1000000000000000) != 0) {
    uint64_t v20 = (v10 >> 59) & 1;
  }
  else {
    uint64_t v20 = 1;
  }
  unint64_t v21 = HIBYTE(v9) & 0xF;
  uint64_t v22 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x1000000000000000) == 0)
  {
    unint64_t v23 = 65540;
    goto LABEL_38;
  }
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v22 = HIBYTE(v9) & 0xF;
  }
  if (v22)
  {
    unint64_t v23 = String.UTF8View._foreignIndex(after:)();
    uint64_t v22 = v10 & 0xFFFFFFFFFFFFLL;
LABEL_38:
    if ((v9 & 0x2000000000000000) == 0) {
      unint64_t v21 = v22;
    }
    if (v23 >> 14 == 4 * v21
      || (__int16 v24 = specialized Collection.first.getter(v10, v9), (v24 & 0x100) != 0)
      || v24 != 47)
    {
      outlined retain of String?((uint64_t)v72);
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    if ((v9 & 0x1000000000000000) != 0)
    {
      if (!v21) {
        goto LABEL_112;
      }
      unint64_t v19 = String.UTF8View._foreignIndex(after:)();
    }
    if ((v19 & 0xC) == 4 << v20) {
      unint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v10, v9);
    }
    uint64_t v20 = v19 >> 16;
    if (v19 >> 16 < v21)
    {
      if ((v9 & 0x1000000000000000) != 0)
      {
        char v26 = String.UTF8View._foreignSubscript(position:)();
      }
      else
      {
        if ((v9 & 0x2000000000000000) == 0)
        {
          if ((v10 & 0x1000000000000000) != 0)
          {
            uint64_t v25 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_53:
            char v26 = *(unsigned char *)(v25 + v20);
            goto LABEL_105;
          }
LABEL_113:
          uint64_t v25 = _StringObject.sharedUTF8.getter();
          goto LABEL_53;
        }
        v81._uint64_t countAndFlagsBits = v10;
        v81._unint64_t object = (void *)(v9 & 0xFFFFFFFFFFFFFFLL);
        char v26 = *((unsigned char *)&v81._countAndFlagsBits + v20);
      }
LABEL_105:
      outlined retain of String?((uint64_t)v72);
      swift_bridgeObjectRelease();
      if (v26 == 47)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_55:
      uint64_t v27 = URLComponents._URLComponents.percentEncodedUser.getter();
      if (v28)
      {
        String.append(_:)(*(Swift::String *)&v27);
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = *(void *)(v1 + 64);
      if (v29)
      {
        uint64_t v30 = *(void *)(v1 + 56);
        uint64_t v31 = *(void **)(v1 + 64);
      }
      else
      {
        if ((*(unsigned char *)(v1 + 11) & 1) == 0
          || (outlined init with take of LocalePreferences?(v1, (uint64_t)v70, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)&v78, &demangling cache variable for type metadata for URLParseInfo?), !v78)|| (*(unsigned char *)(v78 + 96) & 1) != 0)
        {
LABEL_63:
          URLComponents._URLComponents.percentEncodedUser.getter();
          uint64_t v34 = v33;
          swift_bridgeObjectRelease();
          if (!(v34 | v29))
          {
            if ((*(unsigned char *)(v1 + 11) & 1) == 0
              || (outlined init with take of LocalePreferences?(v1, (uint64_t)v69, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v79, &demangling cache variable for type metadata for URLParseInfo?), !v79)|| (*(unsigned char *)(v79 + 96) & 1) != 0)
            {
LABEL_68:
              uint64_t v36 = URLComponents._URLComponents.encodedHost.getter();
              if (v37)
              {
                String.append(_:)(*(Swift::String *)&v36);
                swift_bridgeObjectRelease();
              }
              uint64_t v38 = URLComponents._URLComponents.port.getter();
              if (v39)
              {
                if ((*(unsigned char *)(v1 + 13) & 1) == 0
                  || (outlined init with take of LocalePreferences?(v1, (uint64_t)v68, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)&v80, &demangling cache variable for type metadata for URLParseInfo?), !v80)|| (*(unsigned char *)(v80 + 144) & 1) != 0)
                {
LABEL_76:
                  outlined init with take of LocalePreferences?(v1 + 104, (uint64_t)v67, &demangling cache variable for type metadata for String?);
                  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)&v81, &demangling cache variable for type metadata for String?);
                  unint64_t object = v81._object;
                  if (v81._object)
                  {
                    uint64_t countAndFlagsBits = v81._countAndFlagsBits;
                  }
                  else if ((*(unsigned char *)(v1 + 14) & 1) != 0 {
                         && (outlined init with take of LocalePreferences?(v1, (uint64_t)v66, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)&v82, &demangling cache variable for type metadata for URLParseInfo?), v82))
                  }
                  {
                    if (*(unsigned char *)(v82 + 168)) {
                      uint64_t v43 = MEMORY[0x185302C80](0, 0xE000000000000000);
                    }
                    else {
                      uint64_t v43 = String.subscript.getter();
                    }
                    uint64_t countAndFlagsBits = MEMORY[0x185301F50](v43);
                    unint64_t object = v49;
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t countAndFlagsBits = 0;
                    unint64_t object = (void *)0xE000000000000000;
                  }
                  outlined retain of String?((uint64_t)v67);
                  v50._uint64_t countAndFlagsBits = countAndFlagsBits;
                  v50._unint64_t object = object;
                  String.append(_:)(v50);
                  swift_bridgeObjectRelease();
                  if (*(void *)(v1 + 128))
                  {
                    uint64_t v51 = *(void *)(v1 + 120);
                    char v52 = *(void **)(v1 + 128);
                  }
                  else
                  {
                    if ((*(unsigned char *)(v1 + 15) & 1) == 0
                      || (outlined init with take of LocalePreferences?(v1, (uint64_t)v65, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)&v83, &demangling cache variable for type metadata for URLParseInfo?), !v83)|| (*(unsigned char *)(v83 + 192) & 1) != 0)
                    {
LABEL_94:
                      uint64_t v55 = *(void **)(v1 + 144);
                      if (v55)
                      {
                        uint64_t v56 = *(void *)(v1 + 136);
                        uint64_t v57 = v55;
                      }
                      else
                      {
                        if ((*(unsigned char *)(v1 + 16) & 1) == 0) {
                          return 0;
                        }
                        outlined init with take of LocalePreferences?(v1, (uint64_t)v64, &demangling cache variable for type metadata for URLParseInfo?);
                        outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)&v84, &demangling cache variable for type metadata for URLParseInfo?);
                        if (!v84 || (*(unsigned char *)(v84 + 216) & 1) != 0) {
                          return 0;
                        }
                        uint64_t v62 = String.subscript.getter();
                        uint64_t v56 = MEMORY[0x185301F50](v62);
                        uint64_t v57 = v63;
                        swift_bridgeObjectRelease();
                      }
                      swift_bridgeObjectRetain();
                      v58._uint64_t countAndFlagsBits = v56;
                      v58._unint64_t object = v57;
                      String.append(_:)(v58);
                      swift_bridgeObjectRelease();
                      v59._uint64_t countAndFlagsBits = 35;
                      v59._unint64_t object = (void *)0xE100000000000000;
                      String.append(_:)(v59);
                      swift_bridgeObjectRelease();
                      return 0;
                    }
                    uint64_t v60 = String.subscript.getter();
                    uint64_t v51 = MEMORY[0x185301F50](v60);
                    char v52 = v61;
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRetain();
                  v53._uint64_t countAndFlagsBits = v51;
                  v53._unint64_t object = v52;
                  String.append(_:)(v53);
                  swift_bridgeObjectRelease();
                  v54._uint64_t countAndFlagsBits = 63;
                  v54._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v54);
                  swift_bridgeObjectRelease();
                  goto LABEL_94;
                }
                uint64_t v44 = String.subscript.getter();
                v81._uint64_t countAndFlagsBits = 58;
                v81._unint64_t object = (void *)0xE100000000000000;
                v45._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v44);
                String.append(_:)(v45);
                swift_bridgeObjectRelease();
              }
              else
              {
                v81._uint64_t countAndFlagsBits = 58;
                v81._unint64_t object = (void *)0xE100000000000000;
                v67[0] = v38;
                v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v40);
              }
              swift_bridgeObjectRelease();
              String.append(_:)(v81);
              swift_bridgeObjectRelease();
              goto LABEL_76;
            }
            uint64_t v48 = String.subscript.getter();
            MEMORY[0x185301F50](v48);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v35._uint64_t countAndFlagsBits = 64;
          v35._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          goto LABEL_68;
        }
        uint64_t v46 = String.subscript.getter();
        uint64_t v30 = MEMORY[0x185301F50](v46);
        uint64_t v31 = v47;
        swift_bridgeObjectRelease();
      }
      v81._uint64_t countAndFlagsBits = 58;
      v81._unint64_t object = (void *)0xE100000000000000;
      swift_bridgeObjectRetain();
      v32._uint64_t countAndFlagsBits = v30;
      v32._unint64_t object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t URLComponents._URLComponents.port.getter()
{
  if (*(unsigned char *)(v0 + 96) != 1) {
    return *(void *)(v0 + 88);
  }
  if ((*(unsigned char *)(v0 + 13) & 1) == 0) {
    return 0;
  }
  outlined init with take of LocalePreferences?(v0, (uint64_t)v17, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for URLParseInfo?);
  if (!v18 || (*(unsigned char *)(v18 + 144) & 1) != 0) {
    return 0;
  }
  unint64_t v2 = String.subscript.getter();
  uint64_t v6 = v5;
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
    char v16 = v15;
    swift_bridgeObjectRelease();
    int v14 = v16 & 1;
  }
  else
  {
    uint64_t v12 = v10;
    char v13 = v11;
    swift_bridgeObjectRelease();
    int v14 = v13 & 1;
  }
  if (v14) {
    return 0;
  }
  else {
    return v12;
  }
}

uint64_t URLComponents._URLComponents.hasAuthority.getter()
{
  outlined init with take of LocalePreferences?(v0 + 72, (uint64_t)v38, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v38, (uint64_t)v39, &demangling cache variable for type metadata for String?);
  if (v40) {
    return 1;
  }
  if (*(unsigned char *)(v0 + 12))
  {
    outlined init with take of LocalePreferences?(v0, (uint64_t)v37, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v37, (uint64_t)&v41, &demangling cache variable for type metadata for URLParseInfo?);
    if (v41)
    {
      if ((*(unsigned char *)(v41 + 120) & 1) == 0) {
        goto LABEL_11;
      }
    }
  }
  outlined init with take of LocalePreferences?(v0 + 88, (uint64_t)v36, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)v42, &demangling cache variable for type metadata for Int?);
  if (v42[8] == 1)
  {
    char v1 = *(unsigned char *)(v0 + 13);
    if (v1)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v35, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)&v43, &demangling cache variable for type metadata for URLParseInfo?);
      if (v43)
      {
        if ((*(unsigned char *)(v43 + 144) & 1) == 0)
        {
          unint64_t v16 = String.subscript.getter();
          uint64_t v20 = v19;
          if ((v16 ^ v17) >> 14)
          {
            uint64_t v21 = v16;
            uint64_t v22 = v17;
            uint64_t v23 = v18;
            _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v16, v17, v18, v19, 10);
            if ((v24 & 0x100) != 0)
            {
              specialized _parseInteger<A, B>(ascii:radix:)(v21, v22, v23, v20, 10);
              char v27 = v26;
              swift_bridgeObjectRelease();
              if ((v27 & 1) == 0) {
                return 1;
              }
            }
            else
            {
              char v25 = v24;
              swift_bridgeObjectRelease();
              if ((v25 & 1) == 0) {
                return 1;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    if (*(void *)(v0 + 48))
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_bridgeObjectRelease();
      return 1;
    }
    char v4 = *(unsigned char *)(v0 + 10);
    if (v4)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v34, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)&v44, &demangling cache variable for type metadata for URLParseInfo?);
      if (v44)
      {
        if ((*(unsigned char *)(v44 + 72) & 1) == 0)
        {
          uint64_t v28 = String.subscript.getter();
          MEMORY[0x185301F50](v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }
      }
    }
    outlined init with take of LocalePreferences?(v0 + 56, (uint64_t)v33, &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v45, &demangling cache variable for type metadata for String?);
    if (v46) {
      return 1;
    }
    char v5 = *(unsigned char *)(v0 + 11);
    if (v5)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v32, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)&v47, &demangling cache variable for type metadata for URLParseInfo?);
      if (v47)
      {
        if ((*(unsigned char *)(v47 + 96) & 1) == 0) {
          goto LABEL_11;
        }
      }
    }
    if (v1)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v31, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)&v48, &demangling cache variable for type metadata for URLParseInfo?);
      if (v48)
      {
        if ((*(unsigned char *)(v48 + 144) & 1) == 0)
        {
          unint64_t v6 = String.subscript.getter();
          uint64_t v10 = v9;
          if (!((v6 ^ v7) >> 14))
          {
            swift_bridgeObjectRelease();
            if (v4) {
              goto LABEL_30;
            }
            goto LABEL_32;
          }
          uint64_t v11 = v6;
          uint64_t v12 = v7;
          uint64_t v13 = v8;
          _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v6, v7, v8, v9, 10);
          if ((v14 & 0x100) != 0) {
            specialized _parseInteger<A, B>(ascii:radix:)(v11, v12, v13, v10, 10);
          }
          char v15 = v14;
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0) {
            return 1;
          }
        }
      }
    }
    if (v4)
    {
LABEL_30:
      outlined init with take of LocalePreferences?(v0, (uint64_t)v30, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v49, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v49 || (*(unsigned char *)(v49 + 72) & 1) != 0) {
        goto LABEL_32;
      }
LABEL_11:
      uint64_t v2 = String.subscript.getter();
      MEMORY[0x185301F50](v2);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
LABEL_32:
    if ((v5 & 1) == 0) {
      return 0;
    }
    outlined init with take of LocalePreferences?(v0, (uint64_t)v29, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v51, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v51 || (*(unsigned char *)(v51 + 96) & 1) != 0)
    {
      outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v50, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v50 || (*(unsigned char *)(v50 + 96) & 1) != 0) {
        return 0;
      }
    }
    goto LABEL_11;
  }
  return 1;
}

uint64_t URLComponents._URLComponents.encodedHost.getter()
{
  if (!*(void *)(v0 + 80))
  {
    if (*(unsigned char *)(v0 + 12))
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v21, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v22, &demangling cache variable for type metadata for URLParseInfo?);
      if (v22)
      {
        if ((*(unsigned char *)(v22 + 120) & 1) == 0)
        {
          uint64_t v12 = String.subscript.getter();
          uint64_t v1 = MEMORY[0x185301F50](v12);
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }
    }
    outlined init with take of LocalePreferences?(v0 + 88, (uint64_t)v20, &demangling cache variable for type metadata for Int?);
    outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v23, &demangling cache variable for type metadata for Int?);
    if (v23[8] == 1)
    {
      if (*(unsigned char *)(v0 + 13))
      {
        outlined init with take of LocalePreferences?(v0, (uint64_t)v19, &demangling cache variable for type metadata for URLParseInfo?);
        outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v24, &demangling cache variable for type metadata for URLParseInfo?);
        if (v24)
        {
          if ((*(unsigned char *)(v24 + 144) & 1) == 0)
          {
            unint64_t v2 = String.subscript.getter();
            uint64_t v6 = v5;
            if ((v2 ^ v3) >> 14)
            {
              uint64_t v7 = v2;
              uint64_t v8 = v3;
              uint64_t v9 = v4;
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
              if ((v10 & 0x100) != 0) {
                specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
              }
              char v11 = v10;
              swift_bridgeObjectRelease();
              if ((v11 & 1) == 0) {
                goto LABEL_25;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
      outlined init with take of LocalePreferences?(v0 + 40, (uint64_t)v18, &demangling cache variable for type metadata for String?);
      outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v25, &demangling cache variable for type metadata for String?);
      if (!v26)
      {
        if (*(unsigned char *)(v0 + 10))
        {
          outlined init with take of LocalePreferences?(v0, (uint64_t)v17, &demangling cache variable for type metadata for URLParseInfo?);
          outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v27, &demangling cache variable for type metadata for URLParseInfo?);
          if (v27)
          {
            if ((*(unsigned char *)(v27 + 72) & 1) == 0)
            {
LABEL_24:
              uint64_t v13 = String.subscript.getter();
              MEMORY[0x185301F50](v13);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_25;
            }
          }
        }
        outlined init with take of LocalePreferences?(v0 + 56, (uint64_t)v16, &demangling cache variable for type metadata for String?);
        outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v28, &demangling cache variable for type metadata for String?);
        if (!v29)
        {
          if ((*(unsigned char *)(v0 + 11) & 1) == 0
            || (outlined init with take of LocalePreferences?(v0, (uint64_t)v15, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)&v30, &demangling cache variable for type metadata for URLParseInfo?), !v30)|| (*(unsigned char *)(v30 + 96) & 1) != 0)
          {
            uint64_t v1 = 0;
            goto LABEL_26;
          }
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    uint64_t v1 = 0;
    goto LABEL_26;
  }
  uint64_t v1 = *(void *)(v0 + 72);
LABEL_26:
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t), char a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v9[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t result = closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)(a1, a2, a3, a4 & 1, a5, a6, v9);
    if (!v6) {
      return v9[0];
    }
  }
  else
  {
    uint64_t v8 = one-time initialization token for idnaTranscoder;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    if (byte_1E8ED6298)
    {
      swift_release();
      return 0;
    }
    else
    {
      if (swift_stdlib_isStackAllocationSafe()) {
        __break(1u);
      }
      uint64_t result = swift_slowAlloc();
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (**a3)(uint64_t, uint64_t, uint64_t)@<X2>, char a4@<W3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  *(void *)&v31[7] = *MEMORY[0x1E4F143B8];
  if (a2 > 2048) {
    goto LABEL_6;
  }
  uint64_t v12 = result;
  uint64_t v13 = *a3;
  uint64_t v14 = one-time initialization token for idnaTranscoder;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  if (byte_1E8ED6298)
  {
    uint64_t result = swift_release();
LABEL_6:
    uint64_t v15 = 0;
    uint64_t v16 = 0;
LABEL_30:
    *a7 = v15;
    a7[1] = v16;
    return result;
  }
  uint64_t v28 = static UIDNAHookICU.idnaTranscoder;
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    uint64_t result = MEMORY[0x1F4188790](isStackAllocationSafe);
    __int16 v30 = 16;
    *(void *)uint64_t v31 = 0;
    *(void *)&v31[3] = 0;
    int v29 = 0;
    if (v12)
    {
      v27[256] = v18;
      if (a2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        int v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, __int16 *, int *))v13)(v28, v12, a2, v27, 2048, &v30, &v29);
        if (v29 <= 0)
        {
          uint64_t v15 = 0;
          if (a4) {
            int v23 = -1;
          }
          else {
            int v23 = -64;
          }
          uint64_t v16 = 0;
          if ((*(_DWORD *)&v31[1] & v23) == 0 && v19 > 0)
          {
            uint64_t v15 = closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v27, v19, a5, a6);
            uint64_t v16 = v24;
          }
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
        }
LABEL_29:
        uint64_t result = swift_release();
        goto LABEL_30;
      }
      __break(1u);
      goto LABEL_32;
    }
    __break(1u);
  }
  else
  {
    uint64_t result = swift_slowAlloc();
    __int16 v30 = 16;
    *(void *)uint64_t v31 = 0;
    *(void *)&v31[3] = 0;
    int v29 = 0;
    if (v12)
    {
      if (a2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        uint64_t v20 = v12;
        uint64_t v21 = result;
        int v22 = v13(v28, v20, a2);
        uint64_t v15 = 0;
        if (a4) {
          int v25 = -1;
        }
        else {
          int v25 = -64;
        }
        uint64_t v16 = 0;
        if ((*(_DWORD *)&v31[1] & v25) == 0 && v22 > 0)
        {
          uint64_t v15 = closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)(v21, v22, a5, a6);
          uint64_t v16 = v26;
        }
        MEMORY[0x185309510](v21, -1, -1);
        goto LABEL_29;
      }
LABEL_32:
      __break(1u);
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a2 != a4 || !a2) {
    return static String._tryFromUTF8(_:)();
  }
  unint64_t v4 = (unsigned __int8 *)result;
  uint64_t v6 = a2;
  uint64_t v7 = a2 & ~(a2 >> 63);
  while (v7)
  {
    int v8 = *a3;
    int v9 = *v4;
    if (v8 == v9 || v9 == (((0x3FFE000000000uLL >> ((v8 - 1) >> 1)) & 0x20) + v8))
    {
      --v7;
      ++a3;
      ++v4;
      if (--v6) {
        continue;
      }
    }
    return static String._tryFromUTF8(_:)();
  }
  __break(1u);
  return result;
}

__n128 IntegerFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  (*(void (**)(__n128 *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *a3 = v7;
  return result;
}

void _encodeBytes(uint64_t a1, const UInt8 *a2, CFIndex a3, const void *a4)
{
  if (a2)
  {
    CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, a3);
    addValueToTopContainerE(a1, a4, v6);
    CFRelease(v6);
  }
  else
  {
    addValueToTopContainerE(a1, a4, @"$null");
  }
}

uint64_t StringProtocol.localizedUppercase.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.localizedLowercase.getter(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.uppercase(_:), MEMORY[0x1E4FBB100]);
}

uint64_t _NSDecimalCompare(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

uint64_t __NSDecimalMultiply(_:_:_:_:)(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int16 *)a2 + 2);
  uint64_t v6 = *((unsigned __int16 *)a2 + 3);
  uint64_t v7 = *((unsigned __int16 *)a2 + 4);
  uint64_t v8 = *((unsigned __int16 *)a2 + 5);
  uint64_t v9 = *((unsigned __int16 *)a2 + 6);
  uint64_t v10 = *((unsigned __int16 *)a2 + 7);
  int v11 = *((unsigned __int16 *)a2 + 8);
  int v12 = *((unsigned __int16 *)a2 + 9);
  uint64_t v13 = *(unsigned int *)a3;
  uint64_t v14 = a3[2];
  uint64_t v15 = a3[3];
  uint64_t v16 = a3[4];
  uint64_t v17 = a3[5];
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  int v20 = a3[8];
  int v21 = a3[9];
  LODWORD(v96[0]) = *a2;
  uint64_t v82 = v7;
  uint64_t v83 = v5;
  WORD2(v96[0]) = v5;
  uint64_t v79 = v6;
  uint64_t v80 = v9;
  HIWORD(v96[0]) = v6;
  LOWORD(v96[1]) = v7;
  uint64_t v81 = v8;
  WORD1(v96[1]) = v8;
  WORD2(v96[1]) = v9;
  uint64_t v86 = v10;
  HIWORD(v96[1]) = v10;
  int v84 = v12;
  int v85 = v11;
  LOWORD(v96[2]) = v11;
  WORD1(v96[2]) = v12;
  if (!_So9NSDecimala__length_getter(v96))
  {
    LODWORD(v96[0]) = v4;
    WORD2(v96[0]) = v83;
    HIWORD(v96[0]) = v79;
    LOWORD(v96[1]) = v82;
    WORD1(v96[1]) = v81;
    WORD2(v96[1]) = v80;
    HIWORD(v96[1]) = v86;
    LOWORD(v96[2]) = v85;
    WORD1(v96[2]) = v84;
    if (_So9NSDecimala__isNegative_getter(v96)) {
      goto LABEL_15;
    }
  }
  LODWORD(v96[0]) = v13;
  WORD2(v96[0]) = v14;
  HIWORD(v96[0]) = v15;
  LOWORD(v96[1]) = v16;
  WORD1(v96[1]) = v17;
  WORD2(v96[1]) = v18;
  HIWORD(v96[1]) = v19;
  LOWORD(v96[2]) = v20;
  WORD1(v96[2]) = v21;
  if (!_So9NSDecimala__length_getter(v96))
  {
    LODWORD(v96[0]) = v13;
    WORD2(v96[0]) = v14;
    HIWORD(v96[0]) = v15;
    LOWORD(v96[1]) = v16;
    WORD1(v96[1]) = v17;
    WORD2(v96[1]) = v18;
    HIWORD(v96[1]) = v19;
    LOWORD(v96[2]) = v20;
    WORD1(v96[2]) = v21;
    if (_So9NSDecimala__isNegative_getter(v96))
    {
LABEL_15:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      Swift::String v32 = (void *)swift_allocError();
      *uint64_t v33 = 0;
      swift_willThrow();
LABEL_16:
      uint64_t v34 = a1;
      goto LABEL_17;
    }
  }
  __int16 v73 = v21;
  __int16 v74 = v20;
  __int16 v75 = v18;
  uint64_t v76 = v17;
  __int16 v77 = v15;
  LODWORD(v96[0]) = v4;
  WORD2(v96[0]) = v83;
  HIWORD(v96[0]) = v79;
  LOWORD(v96[1]) = v82;
  WORD1(v96[1]) = v81;
  WORD2(v96[1]) = v80;
  HIWORD(v96[1]) = v86;
  LOWORD(v96[2]) = v85;
  WORD1(v96[2]) = v84;
  int v22 = _So9NSDecimala__length_getter(v96);
  long long v23 = 0uLL;
  if (!v22)
  {
    int v38 = 0;
    uint64_t v34 = a1;
    goto LABEL_26;
  }
  LODWORD(v96[0]) = v13;
  WORD2(v96[0]) = v14;
  HIWORD(v96[0]) = v15;
  LOWORD(v96[1]) = v16;
  WORD1(v96[1]) = v17;
  WORD2(v96[1]) = v18;
  HIWORD(v96[1]) = v19;
  LOWORD(v96[2]) = v20;
  WORD1(v96[2]) = v21;
  if (!_So9NSDecimala__length_getter(v96))
  {
    int v38 = 0;
    uint64_t v34 = a1;
    long long v23 = 0uLL;
    goto LABEL_26;
  }
  int v70 = v4;
  NSDecimal.asVariableLengthInteger()(v4 | (v83 << 32) | (v79 << 48), v82 | (v81 << 16) | (v80 << 32) | (v86 << 48), v85 | (v84 << 16));
  uint64_t v25 = v24;
  NSDecimal.asVariableLengthInteger()(v13 | (v14 << 32) | (v15 << 48), v16 | (v76 << 16) | (v18 << 32) | (v19 << 48), v20 | (v21 << 16));
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v25 + 16);
  if (v28)
  {
    uint64_t v29 = *(void *)(v26 + 16);
    if (v29)
    {
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29)) {
        goto LABEL_74;
      }
      if (v30 > 15)
      {
        uint64_t v30 = 16;
        goto LABEL_29;
      }
      if ((v30 & 0x8000000000000000) == 0)
      {
        if (!v30)
        {
          uint64_t v31 = MEMORY[0x1E4FBC860];
          goto LABEL_30;
        }
LABEL_29:
        uint64_t v31 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v31 + 16) = v30;
        bzero((void *)(v31 + 32), 2 * v30);
LABEL_30:
        uint64_t v49 = 0;
        uint64_t v50 = v27 + 32;
        uint64_t v51 = v31 + 32;
LABEL_31:
        if (v49 == v29) {
          goto LABEL_73;
        }
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = v49 + 1;
        while (v28 != v53)
        {
          uint64_t v55 = v53 + v49;
          if (__OFADD__(v53, v49)) {
            goto LABEL_69;
          }
          if (v55 >= v30)
          {
            if (v52) {
              goto LABEL_57;
            }
            unsigned int v52 = *(unsigned __int16 *)(v50 + 2 * v49);
            if (*(_WORD *)(v50 + 2 * v49))
            {
              unsigned int v52 = *(unsigned __int16 *)(v25 + 2 * v53 + 32);
              if (*(_WORD *)(v25 + 2 * v53 + 32)) {
                goto LABEL_57;
              }
            }
          }
          else
          {
            if (v55 < 0)
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            if ((unint64_t)v55 >= *(void *)(v31 + 16)) {
              goto LABEL_72;
            }
            uint64_t v56 = 2 * v55;
            unsigned int v57 = v52
                + *(unsigned __int16 *)(v51 + v56)
                + *(unsigned __int16 *)(v25 + 2 * v53 + 32) * *(unsigned __int16 *)(v50 + 2 * v49);
            unsigned int v52 = HIWORD(v57);
            *(_WORD *)(v51 + v56) = v57;
          }
          if (v28 == ++v53)
          {
            if (v52)
            {
              BOOL v58 = __OFADD__(v28, v49);
              uint64_t v59 = v28 + v49;
              if (v58) {
                goto LABEL_75;
              }
              if (v59 >= v30)
              {
LABEL_57:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                Swift::String v32 = (void *)swift_allocError();
                unsigned char *v63 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_16;
              }
              if (v59 < 0) {
                goto LABEL_76;
              }
              if ((unint64_t)v59 >= *(void *)(v31 + 16)) {
                goto LABEL_77;
              }
              *(_WORD *)(v51 + 2 * v59) = v52;
            }
            uint64_t v49 = v54;
            if (v54 != v29) {
              goto LABEL_31;
            }
            uint64_t v60 = *(void *)(v31 + 16);
            __int16 v71 = v14;
            uint64_t v69 = v31;
            if (v60 && !*(_WORD *)(v51 + 2 * v60 - 2))
            {
              uint64_t v61 = v60 + 14;
              do
              {
                *(void *)(v31 + 16) = v61 - 15;
                if (v61 == 15) {
                  break;
                }
              }
              while (!*(unsigned __int16 *)(v31 + 2 * v61--));
            }
LABEL_70:
            __int16 v39 = v79;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      goto LABEL_81;
    }
  }
  __int16 v71 = v14;
  __int16 v39 = v79;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v69 = MEMORY[0x1E4FBC860];
LABEL_23:
  memset(v96, 0, 20);
  int v87 = v70;
  __int16 v88 = v83;
  __int16 v40 = v39;
  __int16 v89 = v39;
  __int16 v90 = v82;
  __int16 v91 = v81;
  __int16 v92 = v80;
  __int16 v93 = v86;
  __int16 v94 = v85;
  __int16 v95 = v84;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v87);
  int v87 = v13;
  __int16 v88 = v71;
  __int16 v89 = v77;
  __int16 v90 = v16;
  __int16 v91 = v76;
  __int16 v92 = v75;
  __int16 v93 = v19;
  __int16 v94 = v74;
  __int16 v95 = v73;
  BOOL v42 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v87);
  _So9NSDecimala__isNegative_setter(v42, v96);
  int v87 = v70;
  __int16 v88 = v83;
  __int16 v89 = v40;
  __int16 v90 = v82;
  __int16 v91 = v81;
  __int16 v92 = v80;
  __int16 v93 = v86;
  __int16 v94 = v85;
  __int16 v95 = v84;
  int v43 = _So9NSDecimala__exponent_getter((char *)&v87);
  int v87 = v13;
  __int16 v88 = v71;
  __int16 v89 = v77;
  __int16 v90 = v16;
  __int16 v91 = v76;
  __int16 v92 = v75;
  __int16 v93 = v19;
  __int16 v94 = v74;
  __int16 v95 = v73;
  uint64_t v44 = _So9NSDecimala__exponent_getter((char *)&v87) + v43;
  v45._rawValue = (void *)v69;
  if (*(void *)(v69 + 16) >= 9uLL)
  {
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v69, a4);
    unint64_t v64 = v46;
    uint64_t v65 = v47;
    swift_bridgeObjectRelease();
    if (v65 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_78;
    }
    if (v65 > 0x7FFFFFFF)
    {
LABEL_79:
      __break(1u);
    }
    else
    {
      BOOL v58 = __OFADD__(v44, v65);
      uint64_t v44 = (v44 + v65);
      if (!v58)
      {
        v45._rawValue = v64;
        goto LABEL_62;
      }
    }
    __break(1u);
LABEL_81:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_82;
  }
LABEL_62:
  uint64_t v34 = a1;
  NSDecimal.copyVariableLengthInteger(_:)(v45);
  if (v66)
  {
    Swift::String v32 = v66;
    swift_bridgeObjectRelease();
LABEL_17:
    v96[0] = v32;
    id v35 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast()) {
      uint64_t v36 = qword_18218CCE0[(char)v87];
    }
    else {
      uint64_t v36 = 0;
    }
    *(_OWORD *)((char *)v96 + 4) = 0uLL;
    _So9NSDecimala__exponent_setter(0, v96);
    _So9NSDecimala__length_setter(0, v96);
    _So9NSDecimala__isNegative_setter(1, v96);
    _So9NSDecimala__isCompact_setter(v96);
    _So9NSDecimala__reserved_setter(v96);
    long long v37 = *(_OWORD *)((char *)v96 + 4);
    *(_DWORD *)uint64_t v34 = v96[0];
    *(_OWORD *)(v34 + 4) = v37;

    return v36;
  }
  unint64_t v67 = *((void *)v45._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v67))
  {
    _So9NSDecimala__length_setter(v67, v96);
    _So9NSDecimala__isCompact_setter(v96);
    if ((int)v44 >= 128)
    {
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      Swift::String v32 = (void *)swift_allocError();
      *unint64_t v68 = 0;
      swift_willThrow();
      goto LABEL_17;
    }
    _So9NSDecimala__exponent_setter(v44, v96);
    NSDecimal.compact()();
    int v38 = v96[0];
    long long v23 = *(_OWORD *)((char *)v96 + 4);
LABEL_26:
    uint64_t v36 = 0;
    *(_DWORD *)uint64_t v34 = v38;
    *(_OWORD *)(v34 + 4) = v23;
    return v36;
  }
LABEL_82:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void NSDecimalCopy(NSDecimal *destination, const NSDecimal *source)
{
  int v2 = *(_DWORD *)destination;
  *(_DWORD *)destination &= 0x3FFFu;
  int v3 = *(_DWORD *)source & 0x1000 | v2 & 0x2FFF;
  *(_DWORD *)destination = v3;
  unsigned int v4 = v3 & 0xFFFFF0FF;
  unsigned int v5 = *(_DWORD *)source & 0xF00;
  *(_DWORD *)destination = v4 | v5;
  int v6 = (v4 | v5) & 0x3F00 | *(unsigned char *)source;
  *(_DWORD *)destination = v6;
  *(_DWORD *)destination = *(_DWORD *)source & 0x2000 | v6 & 0x1FFF;
  if (v5)
  {
    LODWORD(v7) = v5 >> 8;
    if (v7 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v7;
    }
    mantissa = destination->_mantissa;
    uint64_t v9 = source->_mantissa;
    do
    {
      unsigned __int16 v10 = *v9++;
      *mantissa++ = v10;
      --v7;
    }
    while (v7);
  }
}

double _NSDecimalCompact(int *a1)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a1 + 1);
  NSDecimal.compact()();
  *a1 = v3;
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 1) = v4;
  return result;
}

Swift::Void __swiftcall NSDecimal.compact()()
{
  uint64_t v2 = *((unsigned __int16 *)v0 + 2);
  uint64_t v3 = *((unsigned __int16 *)v0 + 3);
  uint64_t v4 = *((unsigned __int16 *)v0 + 4);
  uint64_t v5 = *((unsigned __int16 *)v0 + 5);
  uint64_t v6 = *((unsigned __int16 *)v0 + 6);
  uint64_t v7 = *((unsigned __int16 *)v0 + 7);
  int v8 = *((unsigned __int16 *)v0 + 8);
  int v9 = *((unsigned __int16 *)v0 + 9);
  unsigned int v96 = *v0;
  uint64_t v1 = v96;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  int v90 = _So9NSDecimala__exponent_getter((char *)&v96);
  unsigned int v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  if (_So9NSDecimala__isCompact_getter(&v96)) {
    return;
  }
  unsigned int v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  if (!_So9NSDecimala__length_getter(&v96))
  {
    unsigned int v96 = v1;
    LOWORD(v97) = v2;
    WORD1(v97) = v3;
    WORD2(v97) = v4;
    WORD3(v97) = v5;
    WORD4(v97) = v6;
    WORD5(v97) = v7;
    WORD6(v97) = v8;
    HIWORD(v97) = v9;
    if (_So9NSDecimala__isNegative_getter(&v96)) {
      return;
    }
  }
  unsigned int v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  if (!_So9NSDecimala__length_getter(&v96)) {
    return;
  }
  uint64_t v81 = v0;
  int v10 = v90;
  int v11 = v90 + 1;
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  uint64_t v14 = 3435973837;
  uint64_t v15 = v1;
  while (2)
  {
    int v89 = v11;
    int v91 = v10;
    unsigned int v92 = v15;
    __int16 v83 = v13;
    __int16 v84 = v12;
    uint64_t v86 = v4;
    __int16 v82 = v9;
    NSDecimal.asVariableLengthInteger()(v15 | (v12 << 32) | (v13 << 48), v4 | (v5 << 16) | (v6 << 32) | (v7 << 48), v8 | (v9 << 16));
    uint64_t v17 = v16;
    unint64_t v18 = *(void *)(v16 + 16);
    if (!v18)
    {
      LOWORD(v2) = 0;
      uint64_t v19 = MEMORY[0x1E4FBC860];
      goto LABEL_15;
    }
    uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v19 + 16) = v18;
    bzero((void *)(v19 + 32), 2 * v18);
    unint64_t v20 = *(void *)(v17 + 16);
    if (v18 > v20)
    {
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      swift_allocError();
      *uint64_t v80 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_unexpectedError();
      __break(1u);
LABEL_126:
      swift_unexpectedError();
      __break(1u);
LABEL_127:
      swift_unexpectedError();
      __break(1u);
      goto LABEL_128;
    }
    unint64_t v21 = v18 - 1;
    if (v18 - 1 >= *(void *)(v19 + 16))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      NSDecimal._multiply(byShort:)((NSDecimal *)(v86 | (v14 << 16) | (v5 << 32)), 0xAu);
      if (v69) {
        goto LABEL_127;
      }
      NSDecimal._add(_:)(v68, v2);
      if (v73)
      {
LABEL_128:
        swift_unexpectedError();
        __break(1u);
        return;
      }
      *(void *)uint64_t v81 = v70;
      unint64_t v74 = HIDWORD(v70);
      unint64_t v75 = HIWORD(v70);
      *((void *)v81 + 1) = v71;
      v81[4] = v72;
      uint64_t v76 = (v91 - 1);
      if (!__OFSUB__(v91, 1))
      {
        if ((int)v76 < 128)
        {
LABEL_83:
          _So9NSDecimala__exponent_setter(v76, v81);
          _So9NSDecimala__isCompact_setter_0(1, v81);
          return;
        }
        while (1)
        {
          NSDecimal._multiply(byShort:)((NSDecimal *)(v70 | ((unint64_t)(unsigned __int16)v74 << 32) | (v75 << 48)), 0xAu);
          if (v79) {
            goto LABEL_126;
          }
          unint64_t v75 = HIWORD(v70);
          unint64_t v74 = HIDWORD(v70);
          if (--v89 <= 128)
          {
            *(void *)uint64_t v81 = v70;
            *((void *)v81 + 1) = v77;
            v81[4] = v78;
            uint64_t v76 = 127;
            goto LABEL_83;
          }
        }
      }
      goto LABEL_124;
    }
    uint64_t v22 = v18 - 2;
    unsigned int v23 = *(unsigned __int16 *)(v17 + 32 + 2 * v21);
    LOWORD(v24) = *(_WORD *)(v17 + 32 + 2 * v21) / 0xAu;
    while (1)
    {
      *(_WORD *)(v19 + 30 + 2 * v18) = v24;
      LODWORD(v2) = v23 % 0xA;
      if (v18 == 1) {
        break;
      }
      if (v22 >= (uint64_t)v20) {
        goto LABEL_75;
      }
      unsigned int v23 = *(unsigned __int16 *)(v17 + 28 + 2 * v18) | (v2 << 16);
      unsigned int v24 = v23 / 0xA;
      unint64_t v25 = v18 - 2;
      --v18;
      if (v25 >= *(void *)(v19 + 16)) {
        goto LABEL_74;
      }
    }
LABEL_15:
    uint64_t v26 = *(void *)(v19 + 16);
    if (v26 && !*(_WORD *)(v19 + 2 * v26 + 30))
    {
      do
      {
        *(void *)(v19 + 16) = v26 - 1;
        if (v26 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v19 + 28 + 2 * v26--));
    }
    swift_bridgeObjectRelease();
    unsigned int v96 = v92;
    LOWORD(v97) = v84;
    WORD1(v97) = v83;
    WORD2(v97) = v86;
    WORD3(v97) = v5;
    WORD4(v97) = v6;
    WORD5(v97) = v7;
    WORD6(v97) = v8;
    HIWORD(v97) = v82;
    unint64_t v28 = *(void *)(v19 + 16);
    if (v28 > 8) {
      goto LABEL_125;
    }
    _So9NSDecimala__length_setter(*(void *)(v19 + 16), &v96);
    switch(v28)
    {
      case 0uLL:
        swift_bridgeObjectRelease();
        long long v97 = 0uLL;
        goto LABEL_66;
      case 1uLL:
        if (!*(void *)(v19 + 16)) {
          goto LABEL_95;
        }
        __int16 v44 = *(_WORD *)(v19 + 32);
        swift_bridgeObjectRelease();
        LOWORD(v97) = v44;
        *(void *)((char *)&v97 + 2) = 0;
        *((void *)&v97 + 1) = 0;
        goto LABEL_66;
      case 2uLL:
        uint64_t v33 = *(void *)(v19 + 16);
        if (!v33) {
          goto LABEL_94;
        }
        if (v33 == 1) {
          goto LABEL_102;
        }
        int v34 = *(_DWORD *)(v19 + 32);
        swift_bridgeObjectRelease();
        LODWORD(v97) = v34;
        *(void *)((char *)&v97 + 4) = 0;
        HIDWORD(v97) = 0;
        goto LABEL_66;
      case 3uLL:
        unint64_t v35 = *(void *)(v19 + 16);
        if (!v35) {
          goto LABEL_92;
        }
        if (v35 == 1) {
          goto LABEL_98;
        }
        if (v35 < 3) {
          goto LABEL_104;
        }
        __int16 v36 = *(_WORD *)(v19 + 32);
        int v37 = *(_DWORD *)(v19 + 34);
        swift_bridgeObjectRelease();
        LOWORD(v97) = v36;
        *(_DWORD *)((char *)&v97 + 2) = v37;
        *(void *)((char *)&v97 + 6) = 0;
        HIWORD(v97) = 0;
        goto LABEL_66;
      case 4uLL:
        unint64_t v29 = *(void *)(v19 + 16);
        if (!v29) {
          goto LABEL_89;
        }
        if (v29 == 1) {
          goto LABEL_96;
        }
        if (v29 < 3) {
          goto LABEL_105;
        }
        if (v29 == 3) {
          goto LABEL_111;
        }
        __int16 v30 = *(_WORD *)(v19 + 32);
        __int16 v31 = *(_WORD *)(v19 + 34);
        int v32 = *(_DWORD *)(v19 + 36);
        swift_bridgeObjectRelease();
        LOWORD(v97) = v30;
        WORD1(v97) = v31;
        DWORD1(v97) = v32;
        *((void *)&v97 + 1) = 0;
        goto LABEL_66;
      case 5uLL:
        unint64_t v45 = *(void *)(v19 + 16);
        if (!v45) {
          goto LABEL_91;
        }
        if (v45 == 1) {
          goto LABEL_100;
        }
        if (v45 < 3) {
          goto LABEL_106;
        }
        if (v45 == 3) {
          goto LABEL_112;
        }
        if (v45 < 5) {
          goto LABEL_117;
        }
        __int16 v46 = *(_WORD *)(v19 + 32);
        __int16 v47 = *(_WORD *)(v19 + 34);
        __int16 v48 = *(_WORD *)(v19 + 36);
        int v49 = *(_DWORD *)(v19 + 38);
        swift_bridgeObjectRelease();
        LOWORD(v97) = v46;
        WORD1(v97) = v47;
        WORD2(v97) = v48;
        *(_DWORD *)((char *)&v97 + 6) = v49;
        *(_DWORD *)((char *)&v97 + 10) = 0;
        HIWORD(v97) = 0;
        goto LABEL_66;
      case 6uLL:
        unint64_t v50 = *(void *)(v19 + 16);
        if (!v50) {
          goto LABEL_90;
        }
        if (v50 == 1) {
          goto LABEL_101;
        }
        if (v50 < 3) {
          goto LABEL_107;
        }
        if (v50 == 3) {
          goto LABEL_109;
        }
        if (v50 < 5) {
          goto LABEL_114;
        }
        if (v50 == 5) {
          goto LABEL_118;
        }
        __int16 v51 = *(_WORD *)(v19 + 32);
        __int16 v52 = *(_WORD *)(v19 + 34);
        __int16 v53 = *(_WORD *)(v19 + 36);
        __int16 v54 = *(_WORD *)(v19 + 38);
        unsigned int v55 = *(_DWORD *)(v19 + 40);
        swift_bridgeObjectRelease();
        LOWORD(v97) = v51;
        WORD1(v97) = v52;
        WORD2(v97) = v53;
        WORD3(v97) = v54;
        *((void *)&v97 + 1) = v55;
        goto LABEL_66;
      case 7uLL:
        unint64_t v38 = *(void *)(v19 + 16);
        if (!v38) {
          goto LABEL_93;
        }
        if (v38 == 1) {
          goto LABEL_99;
        }
        if (v38 < 3) {
          goto LABEL_103;
        }
        if (v38 == 3) {
          goto LABEL_113;
        }
        if (v38 < 5) {
          goto LABEL_115;
        }
        if (v38 == 5) {
          goto LABEL_120;
        }
        if (v38 < 7) {
          goto LABEL_122;
        }
        __int16 v39 = *(_WORD *)(v19 + 32);
        __int16 v40 = *(_WORD *)(v19 + 34);
        __int16 v41 = *(_WORD *)(v19 + 36);
        __int16 v42 = *(_WORD *)(v19 + 38);
        __int16 v43 = *(_WORD *)(v19 + 40);
        int v93 = *(_DWORD *)(v19 + 42);
        swift_bridgeObjectRelease();
        LOWORD(v97) = v39;
        WORD1(v97) = v40;
        WORD2(v97) = v41;
        WORD3(v97) = v42;
        WORD4(v97) = v43;
        *(_DWORD *)((char *)&v97 + 10) = v93;
        HIWORD(v97) = 0;
        goto LABEL_66;
      case 8uLL:
        unint64_t v56 = *(void *)(v19 + 16);
        if (!v56) {
          goto LABEL_88;
        }
        if (v56 == 1) {
          goto LABEL_97;
        }
        if (v56 < 3) {
          goto LABEL_108;
        }
        if (v56 == 3) {
          goto LABEL_110;
        }
        if (v56 < 5) {
          goto LABEL_116;
        }
        if (v56 == 5) {
          goto LABEL_119;
        }
        if (v56 < 7) {
          goto LABEL_121;
        }
        if (v56 == 7) {
          goto LABEL_123;
        }
        __int16 v57 = *(_WORD *)(v19 + 32);
        __int16 v58 = *(_WORD *)(v19 + 34);
        __int16 v59 = *(_WORD *)(v19 + 36);
        __int16 v60 = *(_WORD *)(v19 + 38);
        __int16 v61 = *(_WORD *)(v19 + 40);
        __int16 v94 = *(_WORD *)(v19 + 42);
        int v87 = *(_DWORD *)(v19 + 44);
        swift_bridgeObjectRelease();
        LOWORD(v97) = v57;
        WORD1(v97) = v58;
        WORD2(v97) = v59;
        WORD3(v97) = v60;
        WORD4(v97) = v61;
        WORD5(v97) = v94;
        HIDWORD(v97) = v87;
LABEL_66:
        _So9NSDecimala__length_setter(v28, &v96);
        int v10 = v91 + 1;
        if (__OFADD__(v91, 1)) {
          goto LABEL_87;
        }
        LODWORD(v15) = v96;
        LOWORD(v12) = v97;
        LOWORD(v13) = WORD1(v97);
        uint64_t v4 = WORD2(v97);
        uint64_t v5 = WORD3(v97);
        uint64_t v6 = WORD4(v97);
        LOWORD(v7) = WORD5(v97);
        LOWORD(v8) = WORD6(v97);
        int v9 = HIWORD(v97);
        if (!(_WORD)v2)
        {
          int v85 = WORD6(v97);
          uint64_t v62 = v96;
          uint64_t v95 = WORD5(v97);
          uint64_t v63 = (unsigned __int16)v97;
          uint64_t v88 = WORD4(v97);
          uint64_t v64 = WORD3(v97);
          uint64_t v65 = WORD1(v97);
          int v66 = _So9NSDecimala__length_getter(&v96);
          uint64_t v13 = v65;
          uint64_t v5 = v64;
          uint64_t v6 = v88;
          uint64_t v12 = v63;
          uint64_t v7 = v95;
          int v10 = v91 + 1;
          uint64_t v15 = v62;
          int v8 = v85;
          int v11 = v89 + 1;
          if (v66) {
            continue;
          }
        }
        int v91 = v10;
        unsigned int v96 = v15;
        LOWORD(v97) = v12;
        WORD1(v97) = v13;
        uint64_t v86 = v4;
        WORD2(v97) = v4;
        uint64_t v14 = v5;
        WORD3(v97) = v5;
        uint64_t v5 = v6;
        WORD4(v97) = v6;
        WORD5(v97) = v7;
        WORD6(v97) = v8;
        HIWORD(v97) = v9;
        int v67 = _So9NSDecimala__length_getter(&v96);
        if ((_WORD)v2 || v67) {
          goto LABEL_76;
        }
        *(void *)uint64_t v81 = 0;
        *((void *)v81 + 1) = 0;
        v81[4] = 0;
        break;
      default:
        goto LABEL_125;
    }
    break;
  }
}

uint64_t _So9NSDecimala__isCompact_getter(_DWORD *a1)
{
  return (*a1 >> 13) & 1;
}

double NSDecimal.asVariableLengthInteger()(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = WORD1(a2);
  __int16 v4 = WORD2(a2);
  unint64_t v5 = HIWORD(a2);
  __int16 v6 = a2;
  __int16 v7 = a3;
  unsigned int v8 = HIWORD(a3);
  unint64_t v9 = HIWORD(a1);
  if (WORD2(a1))
  {
    if (!v9) {
      goto LABEL_3;
    }
LABEL_11:
    if (!(_WORD)a2) {
      goto LABEL_18;
    }
LABEL_12:
    if (WORD1(a2)) {
      goto LABEL_19;
    }
LABEL_13:
    if (WORD2(a2)) {
      goto LABEL_20;
    }
    if (!v5 && !(_WORD)a3 && !v8)
    {
      unint64_t v13 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v14 = swift_allocObject();
      *(void *)&double result = 3;
      *(_OWORD *)(v14 + 16) = xmmword_18210C6B0;
      *(_WORD *)(v14 + 32) = v13;
      *(_WORD *)(v14 + 34) = v9;
      *(_WORD *)(v14 + 36) = v6;
      return result;
    }
    goto LABEL_24;
  }
  if (v9) {
    goto LABEL_11;
  }
  if (!a2 && !WORD2(a2) && !v5 && !(_WORD)a3 && !v8) {
    return result;
  }
LABEL_3:
  if ((_WORD)a2) {
    goto LABEL_12;
  }
  if (!WORD1(a2) && !WORD2(a2) && !v5 && !(_WORD)a3 && !v8)
  {
    unint64_t v10 = HIDWORD(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    uint64_t v11 = swift_allocObject();
    *(void *)&double result = 1;
    *(_OWORD *)(v11 + 16) = xmmword_1821037E0;
    *(_WORD *)(v11 + 32) = v10;
    return result;
  }
LABEL_18:
  if (!WORD1(a2))
  {
    if (!WORD2(a2) && !v5 && !(_WORD)a3 && !v8)
    {
      unint64_t v21 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v22 = swift_allocObject();
      *(void *)&double result = 2;
      *(_OWORD *)(v22 + 16) = xmmword_182106040;
      *(_WORD *)(v22 + 32) = v21;
      *(_WORD *)(v22 + 34) = v9;
      return result;
    }
    goto LABEL_13;
  }
LABEL_19:
  if (WORD2(a2))
  {
LABEL_20:
    if (!v5) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }
LABEL_24:
  if (v5)
  {
LABEL_25:
    if ((_WORD)a3) {
      goto LABEL_26;
    }
    if (v8)
    {
LABEL_29:
      unint64_t v19 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v20 = swift_allocObject();
      *(void *)&double result = 8;
      *(_OWORD *)(v20 + 16) = xmmword_18210C680;
      *(_WORD *)(v20 + 32) = v19;
      *(_WORD *)(v20 + 34) = v9;
      *(_WORD *)(v20 + 36) = v6;
      *(_WORD *)(v20 + 38) = v3;
      *(_WORD *)(v20 + 40) = v4;
      *(_WORD *)(v20 + 42) = v5;
      *(_WORD *)(v20 + 44) = v7;
      *(_WORD *)(v20 + 46) = v8;
      return result;
    }
    unint64_t v25 = HIDWORD(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    uint64_t v26 = swift_allocObject();
    *(void *)&double result = 6;
    *(_OWORD *)(v26 + 16) = xmmword_18210C660;
    *(_WORD *)(v26 + 32) = v25;
    *(_WORD *)(v26 + 34) = v9;
    *(_WORD *)(v26 + 36) = v6;
    *(_WORD *)(v26 + 38) = v3;
    *(_WORD *)(v26 + 40) = v4;
    *(_WORD *)(v26 + 42) = v5;
    return result;
  }
  if ((unsigned __int16)a3 | v8)
  {
LABEL_21:
    if (!(_WORD)a3)
    {
      if (!v8)
      {
        unint64_t v15 = HIDWORD(a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
        uint64_t v16 = swift_allocObject();
        *(void *)&double result = 5;
        *(_OWORD *)(v16 + 16) = xmmword_18210C690;
        *(_WORD *)(v16 + 32) = v15;
        *(_WORD *)(v16 + 34) = v9;
        *(_WORD *)(v16 + 36) = v6;
        *(_WORD *)(v16 + 38) = v3;
        *(_WORD *)(v16 + 40) = v4;
        return result;
      }
      goto LABEL_29;
    }
LABEL_26:
    if (!v8)
    {
      unint64_t v17 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v18 = swift_allocObject();
      *(void *)&double result = 7;
      *(_OWORD *)(v18 + 16) = xmmword_18210C670;
      *(_WORD *)(v18 + 32) = v17;
      *(_WORD *)(v18 + 34) = v9;
      *(_WORD *)(v18 + 36) = v6;
      *(_WORD *)(v18 + 38) = v3;
      *(_WORD *)(v18 + 40) = v4;
      *(_WORD *)(v18 + 42) = v5;
      *(_WORD *)(v18 + 44) = v7;
      return result;
    }
    goto LABEL_29;
  }
  unint64_t v23 = HIDWORD(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  uint64_t v24 = swift_allocObject();
  *(void *)&double result = 4;
  *(_OWORD *)(v24 + 16) = xmmword_18210C6A0;
  *(_WORD *)(v24 + 32) = v23;
  *(_WORD *)(v24 + 34) = v9;
  *(_WORD *)(v24 + 36) = v6;
  *(_WORD *)(v24 + 38) = v3;
  return result;
}

void specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v7 = a2;
  unint64_t v8 = a1;
  memset(v135, 0, 20);
  unint64_t v9 = specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(0xFuLL, a1, a2);
  unint64_t v10 = v9;
  unint64_t v134 = v9;
  uint64_t v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v132 = v11;
  unint64_t v12 = v9 >> 14;
  unint64_t v131 = 4 * v11;
  if (v9 >> 14 == 4 * v11) {
    goto LABEL_47;
  }
  uint64_t v13 = (v8 >> 59) & 1;
  if ((v7 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = v9 & 0xC;
  uint64_t v15 = 4 << v13;
  if (v14 == 4 << v13) {
    unint64_t v9 = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, v8, v7);
  }
  unint64_t v16 = v9 >> 16;
  if (v9 >> 16 >= v132)
  {
    __break(1u);
    goto LABEL_41;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
LABEL_41:
    char v18 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_15;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    *(void *)&v133[0] = v8;
    *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
    char v18 = *((unsigned char *)v133 + v16);
    goto LABEL_15;
  }
  if ((v8 & 0x1000000000000000) == 0) {
    goto LABEL_196;
  }
  for (uint64_t i = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = _StringObject.sharedUTF8.getter())
  {
    char v18 = *(unsigned char *)(i + v16);
LABEL_15:
    if (v18 == 43) {
      goto LABEL_27;
    }
    unint64_t v19 = v10;
    if (v14 == v15) {
      unint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    }
    unint64_t v16 = v19 >> 16;
    if (v19 >> 16 < v132) {
      break;
    }
    __break(1u);
LABEL_196:
    ;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
    char v21 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_26;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    *(void *)&v133[0] = v8;
    *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
    char v21 = *((unsigned char *)v133 + v16);
    goto LABEL_26;
  }
  if ((v8 & 0x1000000000000000) == 0) {
    goto LABEL_279;
  }
  uint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (2)
  {
    char v21 = *(unsigned char *)(v20 + v16);
LABEL_26:
    if (v21 != 45) {
      goto LABEL_47;
    }
LABEL_27:
    unint64_t v22 = v10;
    if (v14 == v15) {
      unint64_t v22 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    }
    unint64_t v16 = v22 >> 16;
    if (v22 >> 16 >= v132)
    {
      __break(1u);
      goto LABEL_43;
    }
    if ((v7 & 0x1000000000000000) != 0)
    {
      char v24 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      *(void *)&v133[0] = v8;
      *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      char v24 = *((unsigned char *)v133 + v16);
    }
    else
    {
      if ((v8 & 0x1000000000000000) == 0) {
        goto LABEL_273;
      }
      uint64_t v23 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_34:
      char v24 = *(unsigned char *)(v23 + v16);
    }
    _So9NSDecimala__isNegative_setter(v24 == 45, v135);
    if (v14 == v15)
    {
LABEL_43:
      unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      if ((v7 & 0x1000000000000000) == 0) {
        goto LABEL_39;
      }
LABEL_44:
      if (v132 <= v10 >> 16)
      {
        __break(1u);
LABEL_202:
        __break(1u);
        goto LABEL_203;
      }
      unint64_t v10 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_46;
    }
    if ((v7 & 0x1000000000000000) != 0) {
      goto LABEL_44;
    }
LABEL_39:
    unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_46:
    unint64_t v134 = v10;
    unint64_t v12 = v10 >> 14;
LABEL_47:
    unint64_t v128 = v8;
    if (v12 == v131)
    {
LABEL_48:
      unint64_t v134 = v10;
LABEL_49:
      if (v131 <= v10 >> 14) {
        goto LABEL_245;
      }
      uint64_t v25 = (v8 >> 59) & 1;
      if ((v7 & 0x1000000000000000) == 0) {
        LOBYTE(v25) = 1;
      }
      uint64_t v26 = v10 & 0xC;
      uint64_t v14 = 4 << v25;
      unint64_t v27 = v10;
      if (v26 != 4 << v25)
      {
LABEL_53:
        unint64_t v28 = v27 >> 16;
        if (v27 >> 16 >= v132)
        {
          __break(1u);
        }
        else if ((v7 & 0x1000000000000000) == 0)
        {
          if ((v7 & 0x2000000000000000) == 0)
          {
            if ((v8 & 0x1000000000000000) != 0)
            {
              uint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              goto LABEL_58;
            }
            goto LABEL_200;
          }
          *(void *)&v133[0] = v8;
          *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
          char v30 = *((unsigned char *)v133 + v28);
          goto LABEL_105;
        }
        char v30 = String.UTF8View._foreignSubscript(position:)();
        goto LABEL_105;
      }
LABEL_149:
      unint64_t v27 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      goto LABEL_53;
    }
    uint64_t v26 = 0;
    __int16 v31 = 0;
    uint64_t v32 = (v8 >> 59) & 1;
    if ((v7 & 0x1000000000000000) == 0) {
      LOBYTE(v32) = 1;
    }
    uint64_t v130 = 4 << v32;
    uint64_t v123 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v124 = v7 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v127 = v7;
    while (1)
    {
      unint64_t v6 = v10 & 0xC;
      unint64_t v33 = v10;
      if (v6 == v130) {
        unint64_t v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      }
      uint64_t v14 = v33 >> 16;
      if (v33 >> 16 >= v132)
      {
        __break(1u);
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      if ((v7 & 0x1000000000000000) != 0)
      {
        int v35 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((v7 & 0x2000000000000000) != 0)
      {
        *(void *)&v133[0] = v8;
        *((void *)&v133[0] + 1) = v124;
        int v35 = *((unsigned __int8 *)v133 + v14);
      }
      else
      {
        uint64_t v34 = v123;
        if ((v8 & 0x1000000000000000) == 0) {
          uint64_t v34 = _StringObject.sharedUTF8.getter();
        }
        int v35 = *(unsigned __int8 *)(v34 + v14);
      }
      if ((v35 - 58) < 0xF6u) {
        break;
      }
      unint64_t v129 = v10 & 0xC;
      if ((v26 & 1) == 0)
      {
        unint64_t v122 = v10;
        unint64_t v134 = v10;
        unint64_t v12 = LODWORD(v135[0]);
        unint64_t v6 = WORD2(v135[0]);
        __int16 v50 = WORD3(v135[0]);
        __int16 v51 = WORD4(v135[0]);
        uint64_t v14 = WORD5(v135[0]);
        unint64_t v10 = WORD6(v135[0]);
        uint64_t v26 = HIWORD(v135[0]);
        __int16 v52 = v135[1];
        __int16 v126 = WORD1(v135[1]);
        NSDecimal._multiply(byShort:)((NSDecimal *)(WORD4(v135[0]) | ((unint64_t)WORD5(v135[0]) << 16) | ((unint64_t)WORD6(v135[0]) << 32)), 0xAu);
        if (v31 || (NSDecimal._add(_:)((NSDecimal *)(v35 - 48), (v35 - 48)), v31))
        {

          LODWORD(v133[0]) = v12;
          WORD2(v133[0]) = v6;
          WORD3(v133[0]) = v50;
          WORD4(v133[0]) = v51;
          WORD5(v133[0]) = v14;
          WORD6(v133[0]) = v10;
          HIWORD(v133[0]) = v26;
          LOWORD(v133[1]) = v52;
          WORD1(v133[1]) = v126;
          if (_So9NSDecimala__exponent_getter((char *)v133) == 127)
          {
            *(void *)((char *)v133 + 4) = 0;
            *(void *)((char *)v133 + 12) = 0;
            _So9NSDecimala__exponent_setter(0, v133);
            _So9NSDecimala__length_setter(0, v133);
            _So9NSDecimala__isNegative_setter(1, v133);
            _So9NSDecimala__isCompact_setter_0(0, v133);
            _So9NSDecimala__reserved_setter(v133);
            int v56 = v133[0];
            __int16 v57 = WORD2(v133[0]);
            __int16 v58 = WORD3(v133[0]);
            __int16 v59 = WORD4(v133[0]);
            __int16 v60 = WORD5(v133[0]);
            __int16 v61 = WORD6(v133[0]);
            unint64_t v6 = HIWORD(v133[0]);
            __int16 v62 = v133[1];
            __int16 v63 = WORD1(v133[1]);
            v135[0] = v133[0];
            LODWORD(v135[1]) = v133[1];
          }
          else
          {
            LODWORD(v133[0]) = v12;
            WORD2(v133[0]) = v6;
            WORD3(v133[0]) = v50;
            WORD4(v133[0]) = v51;
            WORD5(v133[0]) = v14;
            WORD6(v133[0]) = v10;
            HIWORD(v133[0]) = v26;
            LOWORD(v133[1]) = v52;
            WORD1(v133[1]) = v126;
            int v66 = _So9NSDecimala__exponent_getter((char *)v133);
            _So9NSDecimala__exponent_setter((v66 + 1), v135);
            int v56 = v135[0];
            __int16 v57 = WORD2(v135[0]);
            __int16 v58 = WORD3(v135[0]);
            __int16 v59 = WORD4(v135[0]);
            __int16 v60 = WORD5(v135[0]);
            __int16 v61 = WORD6(v135[0]);
            unint64_t v6 = HIWORD(v135[0]);
            __int16 v62 = v135[1];
            __int16 v63 = WORD1(v135[1]);
          }
          LODWORD(v133[0]) = v56;
          WORD2(v133[0]) = v57;
          WORD3(v133[0]) = v58;
          WORD4(v133[0]) = v59;
          WORD5(v133[0]) = v60;
          WORD6(v133[0]) = v61;
          HIWORD(v133[0]) = v6;
          LOWORD(v133[1]) = v62;
          WORD1(v133[1]) = v63;
          if (!_So9NSDecimala__length_getter(v133))
          {
            LODWORD(v133[0]) = v56;
            WORD2(v133[0]) = v57;
            WORD3(v133[0]) = v58;
            WORD4(v133[0]) = v59;
            WORD5(v133[0]) = v60;
            WORD6(v133[0]) = v61;
            HIWORD(v133[0]) = v6;
            LOWORD(v133[1]) = v62;
            WORD1(v133[1]) = v63;
            if (_So9NSDecimala__isNegative_getter(v133)) {
              goto LABEL_125;
            }
          }
          unint64_t v7 = v127;
          unint64_t v8 = v128;
          specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v128, v127, &v134);
          __int16 v31 = 0;
          uint64_t v26 = 1;
          unint64_t v10 = v134;
          goto LABEL_93;
        }
        *(void *)&v135[0] = v53;
        *((void *)&v135[0] + 1) = v54;
        LODWORD(v135[1]) = v55;
        if (v129 == v130)
        {
          unint64_t v7 = v127;
          unint64_t v8 = v128;
          unint64_t v67 = _StringGuts._slowEnsureMatchingEncoding(_:)(v122, v128, v127);
          if ((v127 & 0x1000000000000000) != 0) {
            goto LABEL_101;
          }
LABEL_96:
          unint64_t v10 = (v67 & 0xFFFFFFFFFFFF0000) + 65540;
        }
        else
        {
          unint64_t v7 = v127;
          unint64_t v8 = v128;
          unint64_t v67 = v122;
          if ((v127 & 0x1000000000000000) == 0) {
            goto LABEL_96;
          }
LABEL_101:
          if (v132 <= v67 >> 16)
          {
            __break(1u);
LABEL_198:
            unint64_t v68 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
            while (1)
            {
              unint64_t v28 = v68 >> 16;
              if (v68 >> 16 < v132) {
                break;
              }
              __break(1u);
LABEL_200:
              uint64_t v29 = _StringObject.sharedUTF8.getter();
LABEL_58:
              char v30 = *(unsigned char *)(v29 + v28);
LABEL_105:
              if (v30 == 69) {
                goto LABEL_121;
              }
              unint64_t v68 = v10;
              if (v26 == v14) {
                goto LABEL_198;
              }
            }
            if ((v7 & 0x1000000000000000) != 0)
            {
              char v70 = String.UTF8View._foreignSubscript(position:)();
            }
            else if ((v7 & 0x2000000000000000) != 0)
            {
              *(void *)&v133[0] = v8;
              *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
              char v70 = *((unsigned char *)v133 + v28);
            }
            else
            {
              if ((v8 & 0x1000000000000000) != 0) {
                uint64_t v69 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v69 = _StringObject.sharedUTF8.getter();
              }
              char v70 = *(unsigned char *)(v69 + v28);
            }
            if (v70 != 101) {
              goto LABEL_245;
            }
LABEL_121:
            if (v26 == v14) {
              goto LABEL_153;
            }
            if ((v7 & 0x1000000000000000) != 0) {
              goto LABEL_154;
            }
LABEL_123:
            unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_156;
          }
          unint64_t v10 = String.UTF8View._foreignIndex(after:)();
        }
        uint64_t v26 = 0;
        unint64_t v134 = v10;
LABEL_93:
        unint64_t v12 = v10 >> 14;
        goto LABEL_64;
      }
      long long v125 = v31;
      unint64_t v36 = v10;
      int v37 = v135[0];
      __int16 v38 = WORD2(v135[0]);
      __int16 v39 = WORD3(v135[0]);
      __int16 v40 = WORD4(v135[0]);
      __int16 v41 = WORD5(v135[0]);
      __int16 v42 = WORD6(v135[0]);
      __int16 v43 = HIWORD(v135[0]);
      __int16 v44 = v135[1];
      __int16 v45 = WORD1(v135[1]);
      v133[0] = v135[0];
      LODWORD(v133[1]) = v135[1];
      if (_So9NSDecimala__exponent_getter((char *)v133) == 127)
      {
        *(_OWORD *)((char *)v133 + 4) = 0uLL;
        _So9NSDecimala__exponent_setter(0, v133);
        _So9NSDecimala__length_setter(0, v133);
        _So9NSDecimala__isNegative_setter(1, v133);
        _So9NSDecimala__isCompact_setter_0(0, v133);
        _So9NSDecimala__reserved_setter(v133);
        uint64_t v14 = LODWORD(v133[0]);
        uint64_t v26 = WORD2(v133[0]);
        unint64_t v10 = WORD3(v133[0]);
        __int16 v46 = WORD4(v133[0]);
        __int16 v47 = WORD5(v133[0]);
        unint64_t v6 = WORD6(v133[0]);
        __int16 v48 = HIWORD(v133[0]);
        unint64_t v12 = LOWORD(v133[1]);
        __int16 v49 = WORD1(v133[1]);
        v135[0] = v133[0];
        LODWORD(v135[1]) = v133[1];
      }
      else
      {
        LODWORD(v133[0]) = v37;
        WORD2(v133[0]) = v38;
        WORD3(v133[0]) = v39;
        WORD4(v133[0]) = v40;
        WORD5(v133[0]) = v41;
        WORD6(v133[0]) = v42;
        HIWORD(v133[0]) = v43;
        LOWORD(v133[1]) = v44;
        WORD1(v133[1]) = v45;
        int v64 = _So9NSDecimala__exponent_getter((char *)v133);
        _So9NSDecimala__exponent_setter((v64 + 1), v135);
        uint64_t v14 = LODWORD(v135[0]);
        uint64_t v26 = WORD2(v135[0]);
        unint64_t v10 = WORD3(v135[0]);
        __int16 v46 = WORD4(v135[0]);
        __int16 v47 = WORD5(v135[0]);
        unint64_t v6 = WORD6(v135[0]);
        __int16 v48 = HIWORD(v135[0]);
        unint64_t v12 = LOWORD(v135[1]);
        __int16 v49 = WORD1(v135[1]);
      }
      LODWORD(v133[0]) = v14;
      WORD2(v133[0]) = v26;
      WORD3(v133[0]) = v10;
      WORD4(v133[0]) = v46;
      WORD5(v133[0]) = v47;
      WORD6(v133[0]) = v6;
      HIWORD(v133[0]) = v48;
      LOWORD(v133[1]) = v12;
      WORD1(v133[1]) = v49;
      if (!_So9NSDecimala__length_getter(v133))
      {
        LODWORD(v133[0]) = v14;
        WORD2(v133[0]) = v26;
        WORD3(v133[0]) = v10;
        WORD4(v133[0]) = v46;
        WORD5(v133[0]) = v47;
        WORD6(v133[0]) = v6;
        HIWORD(v133[0]) = v48;
        LOWORD(v133[1]) = v12;
        WORD1(v133[1]) = v49;
        if (_So9NSDecimala__isNegative_getter(v133))
        {
          unint64_t v134 = v36;
LABEL_125:
          specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v128, v127, &v134);
          goto LABEL_243;
        }
      }
      if (v129 == v130)
      {
        unint64_t v7 = v127;
        unint64_t v8 = v128;
        unint64_t v65 = _StringGuts._slowEnsureMatchingEncoding(_:)(v36, v128, v127);
        __int16 v31 = v125;
        if ((v127 & 0x1000000000000000) != 0)
        {
LABEL_87:
          if (v132 <= v65 >> 16) {
            goto LABEL_148;
          }
          unint64_t v10 = String.UTF8View._foreignIndex(after:)();
          goto LABEL_63;
        }
      }
      else
      {
        unint64_t v7 = v127;
        unint64_t v8 = v128;
        unint64_t v65 = v36;
        __int16 v31 = v125;
        if ((v127 & 0x1000000000000000) != 0) {
          goto LABEL_87;
        }
      }
      unint64_t v10 = (v65 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_63:
      unint64_t v12 = v10 >> 14;
      uint64_t v26 = 1;
LABEL_64:
      if (v12 == v131) {
        goto LABEL_48;
      }
    }
    unint64_t v134 = v10;
    if (v12 >= v131
      || (specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v10, a3, a4, v8, v7) & 1) == 0)
    {
      goto LABEL_49;
    }
    if ((a4 & 0x1000000000000000) != 0) {
      Swift::Int v71 = String.UTF8View._foreignCount()();
    }
    else {
      Swift::Int v71 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
    }
    specialized Collection.formIndex(_:offsetBy:)(&v134, v71, v8, v7);
    unint64_t v10 = v134;
    if (v131 == v134 >> 14) {
      goto LABEL_49;
    }
    while (1)
    {
      unint64_t v72 = v10;
      if ((v10 & 0xC) == v130) {
        unint64_t v72 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      }
      uint64_t v14 = v72 >> 16;
      if (v72 >> 16 >= v132) {
        break;
      }
      if ((v7 & 0x1000000000000000) != 0)
      {
        int v74 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((v7 & 0x2000000000000000) != 0)
      {
        *(void *)&v133[0] = v8;
        *((void *)&v133[0] + 1) = v124;
        int v74 = *((unsigned __int8 *)v133 + v14);
      }
      else
      {
        uint64_t v73 = v123;
        if ((v8 & 0x1000000000000000) == 0) {
          uint64_t v73 = _StringObject.sharedUTF8.getter();
        }
        int v74 = *(unsigned __int8 *)(v73 + v14);
      }
      if ((v74 - 58) < 0xF6u) {
        goto LABEL_49;
      }
      if (v26)
      {
        LOBYTE(v26) = 1;
      }
      else
      {
        NSDecimal._multiplyBy10AndAdd(number:)((NSDecimal *)(v74 - 48), (v74 - 48));
        if (v78)
        {

          LOBYTE(v26) = 1;
          unint64_t v7 = v127;
        }
        else
        {
          int v79 = v75;
          unint64_t v6 = v76;
          __int16 v80 = v77;
          *(void *)&v135[0] = v75;
          unint64_t v81 = HIDWORD(v75);
          unint64_t v12 = HIWORD(v75);
          unsigned int v82 = HIWORD(v77);
          *((void *)&v135[0] + 1) = v76;
          unint64_t v83 = v76 >> 16;
          unint64_t v84 = HIDWORD(v76);
          uint64_t v26 = HIWORD(v76);
          LODWORD(v135[1]) = v77;
          *(void *)&v133[0] = v75;
          *((void *)&v133[0] + 1) = v76;
          LODWORD(v133[1]) = v77;
          if (_So9NSDecimala__exponent_getter((char *)v133) == -128) {
            goto LABEL_125;
          }
          LODWORD(v133[0]) = v79;
          WORD2(v133[0]) = v81;
          WORD3(v133[0]) = v12;
          WORD4(v133[0]) = v6;
          WORD5(v133[0]) = v83;
          WORD6(v133[0]) = v84;
          HIWORD(v133[0]) = v26;
          LOWORD(v133[1]) = v80;
          WORD1(v133[1]) = v82;
          int v85 = _So9NSDecimala__exponent_getter((char *)v133);
          _So9NSDecimala__exponent_setter((v85 - 1), v135);
          LOBYTE(v26) = 0;
          unint64_t v7 = v127;
          unint64_t v8 = v128;
        }
      }
      specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v8, v7, &v134);
      unint64_t v10 = v134;
      if (v131 == v134 >> 14) {
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_153:
    unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    if ((v7 & 0x1000000000000000) == 0) {
      goto LABEL_123;
    }
LABEL_154:
    if (v132 <= v10 >> 16) {
      goto LABEL_202;
    }
    unint64_t v10 = String.UTF8View._foreignIndex(after:)();
LABEL_156:
    unint64_t v134 = v10;
    unint64_t v6 = v10 >> 14;
    uint64_t v15 = v10 & 0xC;
    if (v10 >> 14 != v131)
    {
      unint64_t v90 = v10;
      if (v15 == v14) {
        unint64_t v90 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      }
      unint64_t v91 = v90 >> 16;
      if (v90 >> 16 >= v132)
      {
        __break(1u);
      }
      else
      {
        if ((v7 & 0x1000000000000000) != 0)
        {
          char v93 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((v7 & 0x2000000000000000) != 0)
        {
          *(void *)&v133[0] = v8;
          *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
          char v93 = *((unsigned char *)v133 + v91);
        }
        else
        {
          if ((v8 & 0x1000000000000000) != 0) {
            uint64_t v92 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v92 = _StringObject.sharedUTF8.getter();
          }
          char v93 = *(unsigned char *)(v92 + v91);
        }
        if (v93 != 45)
        {
          unint64_t v94 = v10;
          if (v15 == v14) {
            goto LABEL_275;
          }
          goto LABEL_174;
        }
LABEL_182:
        unint64_t v96 = v10;
        if (v15 != v14)
        {
LABEL_183:
          unint64_t v16 = v96 >> 16;
          if (v96 >> 16 >= v132)
          {
            __break(1u);
          }
          else
          {
            if ((v7 & 0x1000000000000000) != 0)
            {
              char v98 = String.UTF8View._foreignSubscript(position:)();
            }
            else if ((v7 & 0x2000000000000000) != 0)
            {
              *(void *)&v133[0] = v8;
              *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
              char v98 = *((unsigned char *)v133 + v16);
            }
            else
            {
              if ((v8 & 0x1000000000000000) != 0) {
                uint64_t v97 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v97 = _StringObject.sharedUTF8.getter();
              }
              char v98 = *(unsigned char *)(v97 + v16);
            }
            unint64_t v16 = v98 == 45;
            if (v15 != v14)
            {
              if ((v7 & 0x1000000000000000) == 0) {
                goto LABEL_194;
              }
LABEL_209:
              if (v132 <= v10 >> 16) {
                goto LABEL_278;
              }
              unint64_t v10 = String.UTF8View._foreignIndex(after:)();
              goto LABEL_211;
            }
          }
          unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
          if ((v7 & 0x1000000000000000) != 0) {
            goto LABEL_209;
          }
LABEL_194:
          unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_211:
          unint64_t v6 = v10 >> 14;
          goto LABEL_212;
        }
      }
      unint64_t v96 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      goto LABEL_183;
    }
    if (v15 != v14)
    {
      uint64_t v15 = v10 >> 16;
      if ((v7 & 0x1000000000000000) != 0) {
        goto LABEL_159;
      }
LABEL_161:
      char v86 = 0;
      uint64_t v87 = LODWORD(v135[1]);
      uint64_t v88 = *((void *)&v135[0] + 1);
      uint64_t v89 = *(void *)&v135[0];
LABEL_264:
      *(void *)a6 = v89;
      *(void *)(a6 + 8) = v88;
      *(void *)(a6 + 16) = v87;
      *(void *)(a6 + 24) = v15;
      *(unsigned char *)(a6 + 32) = v86;
      return;
    }
LABEL_203:
    unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    uint64_t v15 = v10 >> 16;
    if ((v7 & 0x1000000000000000) == 0) {
      goto LABEL_161;
    }
LABEL_159:
    if (v132 >= v15)
    {
      uint64_t v15 = String.UTF8View._foreignDistance(from:to:)();
      goto LABEL_161;
    }
    __break(1u);
LABEL_275:
    unint64_t v94 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
LABEL_174:
    unint64_t v16 = v94 >> 16;
    if (v94 >> 16 >= v132)
    {
      __break(1u);
      goto LABEL_277;
    }
    if ((v7 & 0x1000000000000000) != 0)
    {
      char v95 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      *(void *)&v133[0] = v8;
      *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      char v95 = *((unsigned char *)v133 + v16);
    }
    else if ((v8 & 0x1000000000000000) != 0)
    {
      char v95 = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v94 >> 16));
    }
    else
    {
      char v95 = *(unsigned char *)(_StringObject.sharedUTF8.getter() + v16);
    }
    if (v95 == 43) {
      goto LABEL_182;
    }
    unint64_t v16 = 0;
LABEL_212:
    if (v6 == v131)
    {
      uint64_t v15 = 0;
LABEL_239:
      if (!v16 || (v110 = __OFSUB__(0, v15), uint64_t v15 = -v15, !v110))
      {
        LODWORD(v133[0]) = v135[0];
        *(_OWORD *)((char *)v133 + 4) = *(_OWORD *)((char *)v135 + 4);
        int v111 = _So9NSDecimala__exponent_getter((char *)v133);
        BOOL v110 = __OFADD__(v15, v111);
        uint64_t v112 = v15 + v111;
        if (!v110)
        {
          if (v112 != (char)v112)
          {
LABEL_243:
            uint64_t v88 = 0;
            uint64_t v87 = 0;
            uint64_t v15 = 0;
            uint64_t v89 = 1;
            char v86 = 1;
            goto LABEL_264;
          }
          _So9NSDecimala__exponent_setter(v112, v135);
LABEL_245:
          if ((a5 & 1) != 0
            && (unint64_t v10 = specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v10, v8, v7), v131 != v10 >> 14)|| v10 < 0x4000)
          {
            uint64_t v89 = 0;
            uint64_t v88 = 0;
            uint64_t v87 = 0;
            uint64_t v15 = 0;
            char v86 = 1;
            goto LABEL_264;
          }
          NSDecimal.compact()();
          char v113 = (v7 & 0x1000000000000000) == 0 || (v8 & 0x800000000000000) != 0;
          if ((v10 & 0xC) == 4 << v113) {
            goto LABEL_269;
          }
          uint64_t v15 = v10 >> 16;
          if ((v7 & 0x1000000000000000) != 0) {
            goto LABEL_270;
          }
LABEL_254:
          uint64_t v114 = LOWORD(v135[1]);
          uint64_t v115 = WORD1(v135[1]);
          long long v116 = v135[0];
          BOOL v117 = NSDecimal.isNaN.getter(*(unint64_t *)&v135[0], *((unint64_t *)&v135[0] + 1), LOWORD(v135[1]) | (WORD1(v135[1]) << 16));
          uint64_t v87 = v114 | (v115 << 16);
          if (v117) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = v116;
          }
          if (v117) {
            uint64_t v88 = 0;
          }
          else {
            uint64_t v88 = *((void *)&v116 + 1);
          }
          if (v117) {
            uint64_t v87 = 0;
          }
          char v86 = 0;
          goto LABEL_264;
        }
        __break(1u);
LABEL_273:
        uint64_t v23 = _StringObject.sharedUTF8.getter();
        goto LABEL_34;
      }
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      uint64_t v20 = _StringObject.sharedUTF8.getter();
      continue;
    }
    break;
  }
  uint64_t v15 = 0;
  unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v12 = 10;
  while (2)
  {
    unint64_t v99 = v10;
    v10 &= 0xCu;
    unint64_t v100 = v99;
    if (v10 == v14) {
      unint64_t v99 = _StringGuts._slowEnsureMatchingEncoding(_:)(v99, v8, v7);
    }
    unint64_t v8 = v99 >> 16;
    if (v99 >> 16 < v132)
    {
      if ((v7 & 0x1000000000000000) != 0)
      {
        unint64_t v8 = v128;
        char v105 = String.UTF8View._foreignSubscript(position:)();
        uint64_t v103 = UInt8.digitValue.getter(v105);
        if (v106) {
          goto LABEL_238;
        }
      }
      else if ((v7 & 0x2000000000000000) != 0)
      {
        *(void *)&v133[0] = v128;
        *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
        char v107 = *((unsigned char *)v133 + v8);
        unint64_t v8 = v128;
        uint64_t v103 = UInt8.digitValue.getter(v107);
        if (v108) {
          goto LABEL_238;
        }
      }
      else
      {
        uint64_t v101 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v128 & 0x1000000000000000) == 0) {
          uint64_t v101 = _StringObject.sharedUTF8.getter();
        }
        char v102 = *(unsigned char *)(v101 + v8);
        unint64_t v8 = v128;
        uint64_t v103 = UInt8.digitValue.getter(v102);
        if (v104)
        {
LABEL_238:
          unint64_t v10 = v100;
          goto LABEL_239;
        }
      }
      uint64_t v109 = 10 * v15;
      if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63) {
        goto LABEL_266;
      }
      uint64_t v15 = v109 + v103;
      if (__OFADD__(v109, v103)) {
        goto LABEL_267;
      }
      if (v15 > 254) {
        goto LABEL_243;
      }
      if (v10 == v14)
      {
        unint64_t v100 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v8, v7);
        if ((v7 & 0x1000000000000000) == 0) {
          goto LABEL_215;
        }
LABEL_234:
        if (v132 <= v100 >> 16) {
          goto LABEL_268;
        }
        unint64_t v10 = String.UTF8View._foreignIndex(after:)();
      }
      else
      {
        if ((v7 & 0x1000000000000000) != 0) {
          goto LABEL_234;
        }
LABEL_215:
        unint64_t v10 = (v100 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      if (v131 == v10 >> 14) {
        goto LABEL_239;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_266:
  __break(1u);
LABEL_267:
  __break(1u);
LABEL_268:
  __break(1u);
LABEL_269:
  uint64_t v15 = (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7) >> 16;
  if ((v7 & 0x1000000000000000) == 0) {
    goto LABEL_254;
  }
LABEL_270:
  if (v132 >= v15)
  {
    uint64_t v15 = String.UTF8View._foreignDistance(from:to:)();
    goto LABEL_254;
  }
  __break(1u);
}

uint64_t _So9NSDecimala__exponent_getter(char *a1)
{
  return *a1;
}

uint64_t _So9NSDecimala__exponent_setter(uint64_t result, unsigned char *a2)
{
  *a2 = result;
  return result;
}

unint64_t specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t result = *a3;
  uint64_t v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((*a3 & 0xC) == 4 << v7)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2);
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a2 & 0x1000000000000000) == 0)
  {
LABEL_5:
    unint64_t result = (result & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_6:
    *a3 = result;
    return result;
  }
  unint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 > result >> 16)
  {
    unint64_t result = String.UTF8View._foreignIndex(after:)();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._multiplyBy10AndAdd(number:)(NSDecimal *__return_ptr retstr, Swift::UInt16 number)
{
  NSDecimal._multiply(byShort:)(retstr, 0xAu);
  unint64_t v5 = v4;
  if (v4 || (NSDecimal._add(_:)(v3, number), (unint64_t v5 = v6) != 0))
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *uint64_t v7 = 0;
    swift_willThrow();
  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._multiply(byShort:)(NSDecimal *__return_ptr retstr, Swift::UInt16 byShort)
{
  int v5 = v2;
  unint64_t v35 = v2;
  unint64_t v36 = v3;
  unsigned int v37 = v4;
  if (!byShort) {
    goto LABEL_20;
  }
  v33[0] = v2;
  unint64_t v31 = HIWORD(v2);
  uint64_t v32 = WORD2(v2);
  int v38 = (unsigned __int16)v3;
  v33[1] = v3;
  uint64_t v7 = WORD1(v3);
  uint64_t v8 = WORD2(v3);
  unint64_t v9 = HIWORD(v3);
  uint64_t v10 = (unsigned __int16)v4;
  unsigned int v34 = v4;
  uint64_t v11 = HIWORD(v4);
  if (_So9NSDecimala__length_getter(v33))
  {
    int v30 = v5;
    LODWORD(v12) = 0;
    int v29 = byShort;
    LODWORD(v13) = 1;
    while (2)
    {
      unsigned int v24 = v13;
      int v25 = v13 - 1;
      switch(v25)
      {
        case 0:
          unsigned int v14 = v12 + v32 * v29;
          uint64_t v17 = (unsigned __int16)(v12 + v32 * v29);
          unint64_t v16 = v31;
          goto LABEL_12;
        case 1:
          uint64_t v17 = v32;
          unsigned int v14 = v12 + v31 * v29;
          unint64_t v16 = (unsigned __int16)(v12 + v31 * v29);
LABEL_12:
          int v18 = v38;
          goto LABEL_13;
        case 2:
          unsigned int v14 = v12 + v38 * v29;
          int v18 = (unsigned __int16)(v12 + v38 * v29);
          unint64_t v16 = v31;
          uint64_t v17 = v32;
LABEL_13:
          uint64_t v19 = v7;
          goto LABEL_14;
        case 3:
          unsigned int v14 = v12 + v7 * v29;
          uint64_t v19 = (unsigned __int16)(v12 + v7 * v29);
          unint64_t v16 = v31;
          uint64_t v17 = v32;
          int v18 = v38;
LABEL_14:
          unint64_t v20 = v9;
          goto LABEL_15;
        case 4:
          unsigned int v14 = v12 + v8 * v29;
          uint64_t v15 = (unsigned __int16)(v12 + v8 * v29);
          unint64_t v16 = v31;
          uint64_t v17 = v32;
          int v18 = v38;
          uint64_t v19 = v7;
          unint64_t v20 = v9;
          uint64_t v21 = v11;
          goto LABEL_5;
        case 5:
          unsigned int v14 = v12 + v9 * v29;
          unint64_t v20 = (unsigned __int16)(v12 + v9 * v29);
          unint64_t v16 = v31;
          uint64_t v17 = v32;
          int v18 = v38;
          uint64_t v19 = v7;
LABEL_15:
          uint64_t v21 = v11;
          goto LABEL_16;
        case 6:
          unsigned int v14 = v12 + v10 * v29;
          uint64_t v22 = (unsigned __int16)(v12 + v10 * v29);
          unint64_t v16 = v31;
          uint64_t v17 = v32;
          int v18 = v38;
          uint64_t v19 = v7;
          unint64_t v20 = v9;
          uint64_t v21 = v11;
          uint64_t v15 = v8;
          goto LABEL_6;
        case 7:
          unsigned int v14 = v12 + v11 * v29;
          uint64_t v21 = (unsigned __int16)(v12 + v11 * v29);
          unint64_t v16 = v31;
          uint64_t v17 = v32;
          int v18 = v38;
          uint64_t v19 = v7;
          unint64_t v20 = v9;
LABEL_16:
          uint64_t v15 = v8;
LABEL_5:
          uint64_t v22 = v10;
LABEL_6:
          LODWORD(v33[0]) = v30;
          unsigned int v23 = v14;
          uint64_t v12 = HIWORD(v14);
          unint64_t v31 = v16;
          uint64_t v32 = v17;
          WORD2(v33[0]) = v17;
          HIWORD(v33[0]) = v16;
          int v38 = v18;
          LOWORD(v33[1]) = v18;
          uint64_t v7 = v19;
          WORD1(v33[1]) = v19;
          uint64_t v8 = v15;
          WORD2(v33[1]) = v15;
          unint64_t v9 = v20;
          HIWORD(v33[1]) = v20;
          uint64_t v10 = v22;
          LOWORD(v34) = v22;
          uint64_t v11 = v21;
          HIWORD(v34) = v21;
          uint64_t v13 = v24 + 1;
          if (v24 < _So9NSDecimala__length_getter(v33)) {
            continue;
          }
          HIWORD(v37) = v11;
          LOWORD(v37) = v10;
          HIWORD(v36) = v9;
          WORD2(v36) = v8;
          WORD1(v36) = v7;
          LOWORD(v36) = v38;
          HIWORD(v35) = v31;
          WORD2(v35) = v32;
          if (v23 < 0x10000)
          {
            uint64_t v13 = v24;
            goto LABEL_25;
          }
          LODWORD(v33[0]) = v30;
          WORD2(v33[0]) = v32;
          HIWORD(v33[0]) = v31;
          LOWORD(v33[1]) = v38;
          WORD1(v33[1]) = v7;
          WORD2(v33[1]) = v8;
          HIWORD(v33[1]) = v9;
          LOWORD(v34) = v10;
          HIWORD(v34) = v11;
          if (_So9NSDecimala__length_getter(v33) < 8)
          {
            NSDecimal.subscript.setter(v12, v24);
            goto LABEL_25;
          }
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          swift_allocError();
          *uint64_t v26 = 0;
          swift_willThrow();
          break;
        default:
          HIWORD(v37) = v11;
          LOWORD(v37) = v10;
          HIWORD(v36) = v9;
          WORD2(v36) = v8;
          WORD1(v36) = v7;
          LOWORD(v36) = v38;
          HIWORD(v35) = v31;
          WORD2(v35) = v32;
          v33[0] = 0;
          v33[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          strcpy((char *)v33, "Invalid index ");
          HIBYTE(v33[1]) = -18;
          int v39 = v25;
          v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v27);
          swift_bridgeObjectRelease();
          v28._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
          v28._unint64_t object = (void *)0xEE0061737369746ELL;
          String.append(_:)(v28);
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
      }
      break;
    }
  }
  else
  {
LABEL_20:
    uint64_t v13 = 0;
LABEL_25:
    _So9NSDecimala__length_setter(v13, &v35);
  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._add(_:)(NSDecimal *__return_ptr retstr, Swift::UInt16 a2)
{
  LOWORD(v5) = a2;
  unint64_t v23 = v2;
  unint64_t v6 = HIWORD(v2);
  unint64_t v24 = v3;
  int v20 = WORD2(v2);
  int v26 = (unsigned __int16)v3;
  unint64_t v7 = HIWORD(v3);
  int v8 = WORD1(v3);
  int v9 = (unsigned __int16)v4;
  unsigned int v25 = v4;
  unsigned int v10 = HIWORD(v4);
  int v11 = WORD2(v3);
  int v19 = v2;
  v21[0] = v2;
  v21[1] = v3;
  unsigned int v22 = v4;
  if (_So9NSDecimala__length_getter(v21))
  {
    LODWORD(v12) = 0;
    unsigned int v5 = (unsigned __int16)v5;
    do
    {
      switch((int)v12)
      {
        case 0:
          unsigned int v13 = v5 + v20;
          int v20 = (unsigned __int16)(v5 + v20);
          break;
        case 1:
          unsigned int v13 = v5 + v6;
          LODWORD(v6) = (unsigned __int16)(v5 + v6);
          break;
        case 2:
          unsigned int v13 = v5 + v26;
          int v26 = (unsigned __int16)(v5 + v26);
          break;
        case 3:
          unsigned int v13 = v5 + v8;
          int v8 = (unsigned __int16)(v5 + v8);
          break;
        case 4:
          unsigned int v13 = v5 + v11;
          int v11 = (unsigned __int16)(v5 + v11);
          break;
        case 5:
          unsigned int v13 = v5 + v7;
          LODWORD(v7) = (unsigned __int16)(v5 + v7);
          break;
        case 6:
          unsigned int v13 = v5 + v9;
          int v9 = (unsigned __int16)(v5 + v9);
          break;
        case 7:
          unsigned int v13 = v5 + v10;
          unsigned int v10 = (unsigned __int16)(v5 + v10);
          break;
        default:
          HIWORD(v25) = v10;
          LOWORD(v25) = v9;
          HIWORD(v24) = v7;
          WORD2(v24) = v11;
          WORD1(v24) = v8;
          LOWORD(v24) = v26;
          HIWORD(v23) = v6;
          WORD2(v23) = v20;
          v21[0] = 0;
          v21[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          strcpy((char *)v21, "Invalid index ");
          HIBYTE(v21[1]) = -18;
          int v27 = v12;
          v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          v16._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
          v16._unint64_t object = (void *)0xEE0061737369746ELL;
          String.append(_:)(v16);
          while (1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_31:
            v21[0] = 0;
            v21[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(30);
            swift_bridgeObjectRelease();
            strcpy((char *)v21, "Invalid index ");
            HIBYTE(v21[1]) = -18;
            int v27 = v12;
            v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            v18._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
            v18._unint64_t object = (void *)0xEE0061737369746ELL;
            String.append(_:)(v18);
          }
      }
      uint64_t v12 = (v12 + 1);
      LODWORD(v21[0]) = v19;
      unsigned int v5 = HIWORD(v13);
      WORD2(v21[0]) = v20;
      HIWORD(v21[0]) = v6;
      LOWORD(v21[1]) = v26;
      WORD1(v21[1]) = v8;
      WORD2(v21[1]) = v11;
      HIWORD(v21[1]) = v7;
      LOWORD(v22) = v9;
      HIWORD(v22) = v10;
    }
    while (v12 < _So9NSDecimala__length_getter(v21));
    HIWORD(v25) = v10;
    LOWORD(v25) = v9;
    HIWORD(v24) = v7;
    WORD2(v24) = v11;
    WORD1(v24) = v8;
    LOWORD(v24) = v26;
    HIWORD(v23) = v6;
    WORD2(v23) = v20;
    if (v13 < 0x10000) {
      goto LABEL_16;
    }
    LOWORD(v5) = 1;
  }
  else
  {
    uint64_t v12 = 0;
    if (!(_WORD)v5)
    {
LABEL_16:
      _So9NSDecimala__length_setter(v12, &v23);
      return;
    }
  }
  LODWORD(v21[0]) = v19;
  WORD2(v21[0]) = v20;
  HIWORD(v21[0]) = v6;
  LOWORD(v21[1]) = v26;
  WORD1(v21[1]) = v8;
  WORD2(v21[1]) = v11;
  HIWORD(v21[1]) = v7;
  LOWORD(v22) = v9;
  HIWORD(v22) = v10;
  if (_So9NSDecimala__length_getter(v21) < 8)
  {
    switch((int)v12)
    {
      case 0:
        WORD2(v23) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 1:
        HIWORD(v23) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 2:
        LOWORD(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 3:
        WORD1(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 4:
        WORD2(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 5:
        HIWORD(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 6:
        LOWORD(v25) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 7:
        HIWORD(v25) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      default:
        goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  *unsigned int v14 = 0;
  swift_willThrow();
}

uint64_t _So9NSDecimala__length_getter(_DWORD *a1)
{
  return (*a1 >> 8) & 0xF;
}

uint64_t _So9NSDecimala__length_setter(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFF0FF | ((result & 0xF) << 8);
  return result;
}

uint64_t NSDecimal.subscript.setter(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
      v2[2] = result;
      break;
    case 1:
      v2[3] = result;
      break;
    case 2:
      v2[4] = result;
      break;
    case 3:
      v2[5] = result;
      break;
    case 4:
      v2[6] = result;
      break;
    case 5:
      v2[7] = result;
      break;
    case 6:
      v2[8] = result;
      break;
    case 7:
      v2[9] = result;
      break;
    default:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = 0x616D5F20726F6620;
      v4._unint64_t object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v4);
      unint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

_DWORD *_So9NSDecimala__isCompact_setter(_DWORD *result)
{
  *result &= ~0x2000u;
  return result;
}

uint64_t _So9NSDecimala__isCompact_setter_0(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFDFFF | ((result & 1) << 13);
  return result;
}

unint64_t specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1;
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  if (4 * v4 == a1 >> 14) {
    return v3;
  }
  uint64_t v9 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  uint64_t v19 = a3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    unint64_t result = v3;
    if ((v3 & 0xC) == v10) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, a2, a3);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v14 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v20[0] = a2;
      v20[1] = v19;
      unsigned __int8 v14 = *((unsigned char *)v20 + v12);
    }
    else
    {
      uint64_t v13 = v11;
      if ((a2 & 0x1000000000000000) == 0) {
        uint64_t v13 = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v14 = *(unsigned char *)(v13 + v12);
    }
    unsigned int v15 = (((v14 & 0x3F) << 8) | (v14 >> 6)) + 33217;
    if ((v14 & 0x80) == 0) {
      unsigned int v15 = (v14 + 1);
    }
    unsigned int v16 = __clz(v15);
    uint64_t v17 = 4 - (v16 >> 3);
    v20[0] = (v15 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v16 >> 3)) & 7)));
    swift_bridgeObjectRetain();
    MEMORY[0x185302020](v20, v17);
    char v18 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      return v3;
    }
    if ((v3 & 0xC) == v10)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, a2, a3);
      unint64_t v3 = result;
      if ((a3 & 0x1000000000000000) == 0) {
        goto LABEL_9;
      }
LABEL_24:
      if (v4 <= v3 >> 16) {
        goto LABEL_31;
      }
      unint64_t v3 = String.UTF8View._foreignIndex(after:)();
      if (v5 == v3 >> 14) {
        return v3;
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_24;
      }
LABEL_9:
      unint64_t v3 = (v3 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v5 == v3 >> 14) {
        return v3;
      }
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

BOOL NSDecimal.isNaN.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  if (_So9NSDecimala__length_getter(&v13)) {
    return 0;
  }
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) != 0;
}

uint64_t specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a2;
  uint64_t v8 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x1000000000000000) != 0) {
    goto LABEL_60;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    do
    {
      unint64_t v10 = 0;
      uint64_t v11 = (a4 >> 59) & 1;
      if ((a5 & 0x1000000000000000) == 0) {
        LOBYTE(v11) = 1;
      }
      if ((a5 & 0x2000000000000000) != 0) {
        unint64_t v12 = HIBYTE(a5) & 0xF;
      }
      else {
        unint64_t v12 = a4 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v13 = 4 << v11;
      uint64_t v14 = (v7 >> 59) & 1;
      if ((a3 & 0x1000000000000000) == 0) {
        LOBYTE(v14) = 1;
      }
      uint64_t v30 = 4 << v14;
      uint64_t v31 = v7;
      if ((a3 & 0x2000000000000000) != 0) {
        unint64_t v15 = v8;
      }
      else {
        unint64_t v15 = v7 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v28 = v9 - 1;
      uint64_t v29 = v9;
      uint64_t v8 = 4;
      while (v9 != v10)
      {
        unint64_t v16 = a1;
        if ((a1 & 0xC) == v13)
        {
          unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
          if ((a5 & 0x1000000000000000) != 0)
          {
LABEL_26:
            unint64_t v18 = MEMORY[0x185302230](v16, v10, a4, a5);
            if ((a3 & 0x1000000000000000) != 0) {
              goto LABEL_24;
            }
            goto LABEL_27;
          }
        }
        else if ((a5 & 0x1000000000000000) != 0)
        {
          goto LABEL_26;
        }
        unint64_t v17 = v10 + (v16 >> 16);
        if (__OFADD__(v10, v16 >> 16)) {
          goto LABEL_56;
        }
        if ((v17 & 0x8000000000000000) != 0) {
          goto LABEL_57;
        }
        if (v12 < v17) {
          goto LABEL_59;
        }
        unint64_t v18 = (v17 << 16) | 4;
        if ((a3 & 0x1000000000000000) != 0)
        {
LABEL_24:
          unint64_t v7 = MEMORY[0x185302230](15, v10, v7, a3);
          goto LABEL_28;
        }
LABEL_27:
        unint64_t v7 = v8;
        if (v15 < v10) {
          goto LABEL_58;
        }
LABEL_28:
        if ((v18 & 0xC) == v13) {
          unint64_t v18 = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, a4, a5);
        }
        unint64_t v19 = v18 >> 16;
        if (v18 >> 16 >= v12) {
          goto LABEL_54;
        }
        if ((a5 & 0x1000000000000000) != 0)
        {
          char v21 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v34 = a4;
          uint64_t v35 = a5 & 0xFFFFFFFFFFFFFFLL;
          char v21 = *((unsigned char *)&v34 + v19);
        }
        else
        {
          uint64_t v20 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0) {
            uint64_t v20 = _StringObject.sharedUTF8.getter();
          }
          char v21 = *(unsigned char *)(v20 + v19);
        }
        if ((v7 & 0xC) == v30) {
          unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, v31, a3);
        }
        unint64_t v22 = v7 >> 16;
        if (v7 >> 16 >= v15) {
          goto LABEL_55;
        }
        if ((a3 & 0x1000000000000000) != 0)
        {
          unint64_t v7 = v31;
          char v24 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          unint64_t v7 = v31;
          unint64_t v34 = v31;
          uint64_t v35 = a3 & 0xFFFFFFFFFFFFFFLL;
          char v24 = *((unsigned char *)&v34 + v22);
        }
        else
        {
          uint64_t v23 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          unint64_t v7 = v31;
          if ((v31 & 0x1000000000000000) == 0) {
            uint64_t v23 = _StringObject.sharedUTF8.getter();
          }
          char v24 = *(unsigned char *)(v23 + v22);
        }
        BOOL v25 = v21 == v24;
        uint64_t result = v25;
        if (v25)
        {
          v8 += 0x10000;
          uint64_t v9 = v29;
          BOOL v25 = v28 == v10++;
          if (!v25) {
            continue;
          }
        }
        return result;
      }
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      Swift::Int v27 = String.UTF8View._foreignCount()();
      if (v27 < 0) {
        __break(1u);
      }
      uint64_t v9 = v27;
    }
    while (v27);
  }
  return 1;
}

unint64_t specialized Collection.formIndex(_:offsetBy:)(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result = *a1;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((result & 0xC) != 4 << v9)
  {
    if ((a4 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_13:
    unint64_t result = MEMORY[0x185302230]();
    goto LABEL_11;
  }
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
  if ((a4 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_5:
  unint64_t v10 = a2 + (result >> 16);
  if (__OFADD__(a2, result >> 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v11 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 >= v10)
  {
    unint64_t result = (v10 << 16) | 4;
LABEL_11:
    *a1 = result;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t _CalendarGregorian.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ScopedAttributeContainer.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString._AttributeStorage.subscript.getter(*v3, *(void *)(*MEMORY[0x1E4FBC5F0] + *a1 + 8), a2, a3);
}

ValueMetadata *type metadata accessor for JSONEncoder.OutputFormatting()
{
  return &type metadata for JSONEncoder.OutputFormatting;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  id v8 = [a1 *a5];
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a6, v8);
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
    *(_DWORD *)a2 = v8;
    *(unsigned char *)(a2 + 4) = 0;
  }
  return v10 & 1;
}

id _NSGetUnsignedIntValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  id v8 = objc_msgSend(v5, "initWithUnsignedInt:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Set<A>(void *a1, uint64_t *a2, uint64_t a3)
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t _NSFCPresenterLog()
{
  if (qword_1EB1EDDD0 != -1) {
    dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
  }
  return qword_1EB1EDD40;
}

void sub_1818DFAB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1818E046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void *__initializeUbiquityStuff_block_invoke()
{
  unint64_t result = (void *)[(id)pathToSystemFramework(@"GenerationalStorage.framework") stringByAppendingString:@"/GenerationalStorage"];
  if (result)
  {
    unint64_t result = dlopen((const char *)[result fileSystemRepresentation], 256);
    if (result)
    {
      uint64_t v1 = result;
      _MergedGlobals_150 = *(void *)dlsym(result, "GSGenerationalStorageErrorDomain");
      qword_1EB1EDE28 = *(void *)dlsym(v1, "GSAdditionCreationNameSpaceKey");
      qword_1EB1EDE30 = *(void *)dlsym(v1, "GSAdditionCreationNameKey");
      qword_1EB1EDE38 = *(void *)dlsym(v1, "GSAdditionCreationUserInfoKey");
      unint64_t result = objc_lookUpClass("GSStorageManager");
      qword_1EB1EDE40 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t pathToSystemFramework(uint64_t a1)
{
  unint64_t v2 = +[NSFileManager defaultManager];
  __int16 v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  uint64_t v4 = [(NSArray *)v3 count];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  while (1)
  {
    id v7 = [(NSArray *)v3 objectAtIndex:v6];
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", @"Frameworks"), "stringByAppendingPathComponent:", a1);
    if ([(NSFileManager *)v2 fileExistsAtPath:v8]) {
      break;
    }
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", @"PrivateFrameworks"), "stringByAppendingPathComponent:", a1);
    if ([(NSFileManager *)v2 fileExistsAtPath:v8]) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return v8;
}

uint64_t _NSFCFSEventsLog()
{
  if (qword_1EB1EDDD0 != -1) {
    dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
  }
  return qword_1EB1EDD58;
}

uint64_t _nodeHasPresentersExcludingPresenter(void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___nodeHasPresentersExcludingPresenter_block_invoke;
  v4[3] = &unk_1E51FDDB8;
  v4[4] = a2;
  v4[5] = &v5;
  [a1 forEachPresenterOfItemPerformProcedure:v4];
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1818E1CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___nodeHasPresentersExcludingPresenter_block_invoke(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32) != a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
  }
  return result;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t NSScanner.scanUInt64(representation:)(char *a1)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  char v2 = *a1;
  v4[0] = -1;
  if (v2)
  {
    if (!objc_msgSend(v1, sel_scanHexLongLong_, v4)) {
      return 0;
    }
  }
  else if ((objc_msgSend(v1, sel_scanUnsignedLongLong_, v4) & 1) == 0)
  {
    return 0;
  }
  return v4[0];
}

uint64_t Notification.object.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Any?(v1 + 8, a1);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

Swift::Bool __swiftcall DateInterval.contains(_:)(Foundation::Date a1)
{
  return *v1 <= *v2 + v2[1] && *v2 <= *v1;
}

uint64_t __delayedPerformCleanup(id *a1)
{
  _CFAutoreleasePoolPush();

  free(a1);

  return _CFAutoreleasePoolPop();
}

uint64_t IndexSet.subscript.getter(uint64_t a1)
{
  return *(void *)a1;
}

id NSPredicate.init(format:_:)()
{
  uint64_t v0 = getVaList(_:)();
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v2 = objc_msgSend(ObjCClassFromMetadata, sel_predicateWithFormat_arguments_, String._bridgeToObjectiveCImpl()(), v0);
  swift_unknownObjectRelease();
  return v2;
}

id protocol witness for CustomStringConvertible.description.getter in conformance NSObject(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

double Date.timeIntervalSinceNow.getter()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  double v1 = *v0;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return v1 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
}

id specialized static Double._forceBridgeFromObjectiveC(_:result:)(unint64_t *a1, unsigned char *object)
{
  long long v3 = a1;
  objc_msgSend(a1, sel_doubleValue);
  if ((~v4 & 0x7FF0000000000000) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    id result = (id)specialized Double.init(exactly:)(v3);
    *(void *)unint64_t object = result;
    object[8] = v7 & 1;
    if ((v7 & 1) == 0) {
      return result;
    }
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000011;
    unint64_t v15 = 0x80000001823AD070;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    unint64_t object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 544175136;
    v9._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    long long v3 = &v14;
    v10._uint64_t countAndFlagsBits = 0x656C62756F44;
    v10._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v10);
    LODWORD(v13) = 0;
    uint64_t v12 = 534;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  id result = objc_msgSend(v3, sel_doubleValue, v12, v13, v14, v15);
  *(void *)unint64_t object = v11;
  object[8] = 0;
  return result;
}

BOOL specialized static Double._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_doubleValue);
  if ((~v4 & 0x7FF0000000000000) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v6 = specialized Double.init(exactly:)(a1);
    char v9 = v7 & 1;
    BOOL result = (v7 & 1) == 0;
    uint64_t v8 = v6;
  }
  else
  {
    objc_msgSend(a1, sel_doubleValue);
    char v9 = 0;
    BOOL result = 1;
  }
  *(void *)a2 = v8;
  *(unsigned char *)(a2 + 8) = v9 & 1;
  return result;
}

uint64_t specialized static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_doubleValue);
  if ((~v4 & 0x7FF0000000000000) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v9 = specialized Double.init(exactly:)(a1);
    if (v6) {
      return 0;
    }
  }
  else
  {
    objc_msgSend(a1, sel_doubleValue);
    uint64_t v9 = v8;
  }
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = 0;
  return 1;
}

uint64_t specialized Double.init(exactly:)(void *a1)
{
  id v1 = a1;
  int v2 = *(unsigned __int8 *)objc_msgSend(v1, sel_objCType);
  if (v2 != 113)
  {
    if (v2 != 81)
    {
      objc_msgSend(v1, sel_doubleValue);
      return v6;
    }
    uint64_t v3 = specialized Double.init<A>(exactly:)(objc_msgSend(v1, sel_unsignedLongLongValue));
    if (v4) {
      return 0;
    }
    return v3;
  }
  uint64_t v3 = specialized Double.init<A>(exactly:)((uint64_t)objc_msgSend(v1, sel_longLongValue));
  if ((v5 & 1) == 0) {
    return v3;
  }
  return 0;
}

uint64_t specialized Double.init<A>(exactly:)(uint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&BOOL result = 0.0;
    return result;
  }
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((uint64_t)v1 == result) {
    *(double *)&BOOL result = (double)result;
  }
  else {
    *(double *)&BOOL result = 0.0;
  }
  return result;
}

uint64_t @objc static NSLocale._characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v7 = static Locale.characterDirection(forLanguage:)((uint64_t)v5, v6, a4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t static Locale.characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unsigned int v37 = a3;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v4 = swift_release();
  if (Language <= 0)
  {
    uint64_t v5 = 0;
    uint64_t v39 = 0;
  }
  else
  {
    v41[Language] = 0;
    uint64_t v4 = MEMORY[0x185301F80](v41);
    uint64_t v5 = v4;
    uint64_t v39 = v6;
  }
  MEMORY[0x1F4188790](v4);
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if ((int)v42 <= 0 && Script > 0)
  {
    v30[Script] = 0;
    uint64_t v8 = MEMORY[0x185301F80](v30, 0);
  }
  uint64_t v38 = v9;
  uint64_t v40 = v8;
  MEMORY[0x1F4188790](v8);
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((int)v42 <= 0 && Country > 0)
  {
    v30[Country] = 0;
    uint64_t v11 = MEMORY[0x185301F80](v30);
    uint64_t v12 = v13;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v40;
  if (v39)
  {
    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    unint64_t object = v15._object;
    uint64_t v18 = v38;
    if (v38) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v40 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    if (v12) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t v23 = v12;
    uint64_t v24 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    goto LABEL_17;
  }
  uint64_t v5 = 0;
  uint64_t countAndFlagsBits = 0;
  unint64_t object = 0;
  uint64_t v18 = v38;
  if (!v38) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v42 = v14;
  uint64_t v43 = v18;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v19 = String._capitalized()();
  uint64_t v35 = v19._object;
  uint64_t v36 = v19._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_16;
  }
LABEL_13:
  Swift::String v22 = String.uppercased()();
  char v21 = v22._object;
  uint64_t v20 = v22._countAndFlagsBits;
  uint64_t v23 = v12;
  uint64_t v24 = v11;
LABEL_17:
  uint64_t v31 = v23;
  uint64_t v32 = v5;
  uint64_t v33 = v20;
  unint64_t v34 = v21;
  uint64_t v42 = v5;
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  uint64_t v43 = v39;
  uint64_t v44 = countAndFlagsBits;
  __int16 v45 = object;
  uint64_t v46 = v40;
  uint64_t v27 = v38;
  uint64_t v47 = v38;
  uint64_t v48 = v36;
  __int16 v49 = v35;
  uint64_t v50 = v24;
  uint64_t v51 = v23;
  uint64_t v52 = v20;
  uint64_t v53 = v21;
  uint64_t v28 = v37();
  outlined consume of Locale.LanguageCode?(v32, v25);
  outlined consume of Locale.LanguageCode?(v26, v27);
  outlined consume of Locale.LanguageCode?(v24, v31);
  return v28;
}

uint64_t Locale.Language.lineLayoutDirection.getter(uint64_t (*a1)(uint64_t, int *))
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = (void *)v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = (void *)v1[7];
  uint64_t v11 = v1[8];
  uint64_t v10 = v1[9];
  uint64_t v12 = v1[10];
  uint64_t v13 = (void *)v1[11];
  int v30 = 0;
  uint64_t v27 = v6;
  uint64_t v28 = v2;
  uint64_t v26 = v3;
  if (v3)
  {
    uint64_t v14 = v5;
    Swift::String v15 = v4;
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v6, v7);
    outlined copy of Locale.LanguageCode?(v11, v10);
    v16._uint64_t countAndFlagsBits = v14;
    v16._unint64_t object = v15;
    String.append(_:)(v16);
    uint64_t v17 = v12;
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  outlined copy of Locale.LanguageCode?(v2, 0);
  outlined copy of Locale.LanguageCode?(v6, v7);
  outlined copy of Locale.LanguageCode?(v11, v10);
  uint64_t v17 = v12;
  if (v7)
  {
LABEL_3:
    v18._uint64_t countAndFlagsBits = 45;
    v18._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = v9;
    v19._unint64_t object = v8;
    String.append(_:)(v19);
  }
LABEL_4:
  if (v10)
  {
    v20._uint64_t countAndFlagsBits = 95;
    v20._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = v17;
    v21._unint64_t object = v13;
    String.append(_:)(v21);
  }
  outlined consume of Locale.LanguageCode?(v28, v26);
  outlined consume of Locale.LanguageCode?(v27, v7);
  outlined consume of Locale.LanguageCode?(v11, v10);
  uint64_t v22 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  unsigned int v23 = a1(v22 + 32, &v30);
  swift_release();
  if (v23 < 4 && v30 < 1) {
    return v23 + 1;
  }
  else {
    return 0;
  }
}

uint64_t Locale.Language.characterDirection.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, int *))MEMORY[0x1E4FBA658];

  return Locale.Language.lineLayoutDirection.getter(v0);
}

ValueMetadata *type metadata accessor for String.StandardComparator()
{
  return &type metadata for String.StandardComparator;
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  char v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithBool_, v1 & 1);
}

char *static String.localizedStringWithFormat(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = LocaleCache.current.getter();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = specialized withVaList<A>(_:_:)(a3, (void (*)(void *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _TimeZoneAutoupdating.abbreviation(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v1;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 56))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t _NSSwiftTimeZone.abbreviation.getter()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  uint64_t v4 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 56))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

Swift::Bool __swiftcall _TimeZoneICU.isDaylightSavingTime(for:)(Foundation::Date a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)partial apply((uint64_t *)(v2 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  return v4 != 0.0;
}

Swift::String_optional __swiftcall _TimeZoneICU.abbreviation(for:)(Foundation::Date a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)partial apply((uint64_t *)(v2 + 16), (double *)v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  uint64_t v3 = swift_release();
  MEMORY[0x1F4188790](v3);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  partial apply for closure #1 in _TimeZoneICU.abbreviation(for:)((uint64_t *)(v2 + 16), v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  uint64_t v4 = v7[0];
  uint64_t v5 = (void *)v7[1];
  result.value._unint64_t object = v5;
  result.value._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)partial apply@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return partial apply for closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)(a1, a2);
}

uint64_t partial apply for closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)(a1, *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v6, v7)[2] >> 31) {
    __break(1u);
  }
  uint64_t v8 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    *a1 = v8;
LABEL_2:
    ucal_setMillis();
    uint64_t result = ucal_get();
    *a3 = (double)(int)result / 1000.0;
    return result;
  }
  *a3 = 0.0;
  return result;
}

uint64_t partial apply for closure #1 in _TimeZoneICU.abbreviation(for:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _TimeZoneICU.abbreviation(for:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t closure #1 in _TimeZoneICU.abbreviation(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  v19[2] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)(a2 + 32);
  if (!*a1)
  {
    uint64_t v16 = *(void *)(a2 + 24);
    LODWORD(v19[0]) = 0;
    swift_bridgeObjectRetain();
    if (specialized _copyCollectionToContiguousArray<A>(_:)(v16, v6)[2] >> 31) {
      __break(1u);
    }
    uint64_t v17 = ucal_open();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17)
    {
      *a3 = 0;
      a3[1] = 0;
      return result;
    }
    *a1 = v17;
  }
  uint64_t v7 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  v19[0] = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v9 = v8;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(ObjectType, v9);
  swift_unknownObjectRelease();
  uint64_t v11 = swift_bridgeObjectRetain_n();
  MEMORY[0x1F4188790](v11);
  swift_bridgeObjectRetain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, v19);
  if (v4)
  {
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_willThrow();
    __break(1u);
  }
  else
  {
    uint64_t v12 = v19[0];
    uint64_t v13 = v19[1];
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    *a3 = v12;
    a3[1] = v13;
  }
  return result;
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  String.utf8CString.getter();
  TimeZoneDisplaySEL Name = ucal_getTimeZoneDisplayName();
  swift_release();
  if (TimeZoneDisplayName <= 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, TimeZoneDisplayName);
    uint64_t v7 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  uint64_t v4 = unumf_resultToString();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  uint64_t v4 = udat_formatForFields();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  uint64_t v4 = unum_formatInt64();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  uint64_t v4 = udat_formatForFields();
  if (v4 <= 0)
  {
    swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return swift_release();
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  uint64_t v4 = udtitvfmt_format();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  if (!a1) {
    __break(1u);
  }
  MEMORY[0x1853099B0]();
  uint64_t result = udat_format();
  if ((int)result <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t result = specialized String.init(_utf16:)(a1, result);
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

{
  int Symbols;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  Symbols = udat_getSymbols();
  if (Symbols <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, Symbols);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13(0, v10);
  uint64_t v14 = *(void *)(a2 + 24);
  if (!a4(v4, v8, v14))
  {
    Swift::String v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
LABEL_4:
    v15(v12, a1, v8);
    specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v12, v8, v14);
    return Double.description.getter();
  }
  Swift::String v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15(v12, a1, v8);
  specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v12, v8, v14);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v17 = swift_retain_n();
  v20[0] = v20;
  MEMORY[0x1F4188790](v17);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v20[-8], v21);
  uint64_t v18 = v21[0];
  uint64_t v19 = v21[1];
  swift_release();
  swift_release_n();
  if (!v19) {
    goto LABEL_4;
  }
  return v18;
}

uint64_t protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t FloatingPointFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[18];
  void v38[20];

  uint64_t v35 = a1;
  v38[18] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v33 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ICUNumberFormatter.Signature(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v34 = a2;
  uint64_t v32 = (void (*)(char *, uint64_t, uint64_t))(v2 + *(int *)(a2 + 36));
  uint64_t v10 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 472);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(ObjectType, v10);
  int v30 = v14;
  uint64_t v31 = v13;
  swift_unknownObjectRelease();
  Swift::String v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v15(v37, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v37, (uint64_t)v38, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v32, (uint64_t)v9, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v16 = &v9[*(int *)(v7 + 28)];
  uint64_t v17 = v30;
  *(void *)uint64_t v16 = v31;
  *((void *)v16 + 1) = v17;
  outlined init with take of LocalePreferences?((uint64_t)v38, (uint64_t)&v9[*(int *)(v7 + 32)], &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v18 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v9);
  _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1((uint64_t)v9, type metadata accessor for ICUNumberFormatter.Signature);
  if (!v18)
  {
    uint64_t v19 = (uint64_t)v33;
    Swift::String v21 = v34;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v24 = v35;
    unsigned int v23 = v36;
LABEL_4:
    v22(v19, v24, v23);
    specialized BinaryFloatingPoint.init<A>(_:)(v19, v23, *(void *)(v21 + 24));
    return Double.description.getter();
  }
  uint64_t v19 = (uint64_t)v33;
  Swift::String v20 = v36;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v32(v33, v35, v36);
  Swift::String v21 = v34;
  specialized BinaryFloatingPoint.init<A>(_:)(v19, v20, *(void *)(v34 + 24));
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v26 = swift_retain_n();
  MEMORY[0x1F4188790](v26);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v29 - 8), v37);
  uint64_t v27 = v37[0];
  uint64_t v28 = v37[1];
  swift_release();
  swift_release_n();
  uint64_t v24 = v35;
  unsigned int v23 = v36;
  uint64_t v22 = (void (*)(uint64_t, uint64_t, uint64_t))v32;
  if (!v28) {
    goto LABEL_4;
  }
  return v27;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleAutoupdating()
{
  return _LocaleAutoupdating.prefs.getter();
}

uint64_t _LocaleAutoupdating.prefs.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v7);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v7[0])
  {
    uint64_t v2 = *((void *)&v7[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 464))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  LocaleCache.preferences()(v7);
  MEMORY[0x1F4188790](v3);
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getterpartial apply(v0, v6);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v6[0])
  {
    uint64_t v2 = v6[1];
    outlined release of LocalePreferences(v7);
    goto LABEL_7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleICU@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v4);
  outlined init with take of LocalePreferences?((uint64_t)v4, a1);
  return outlined retain of LocalePreferences?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
}

uint64_t protocol witness for _LocaleProtocol.identifierCapturingPreferences.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 472))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t static Locale.current.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t result = LocaleCache.current.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t LocaleCache.current.getter()
{
  uint64_t v1 = (uint64_t *)&(*v0)[4];
  uint64_t v2 = *v0 + 31;
  swift_retain();
  os_unfair_lock_lock(v2);
  closure #1 in LocaleCache.current.getter(v1, v7);
  os_unfair_lock_unlock(v2);
  swift_release();
  uint64_t v3 = *(void *)&v7[0];
  if (*(void *)&v7[0]) {
    return v3;
  }
  LocaleCache.preferences()(v7);
  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v2);
  partial apply for closure #2 in LocaleCache.current.getter(v1, &v6);
  os_unfair_lock_unlock(v2);
  swift_release();
  uint64_t v3 = v6;
  if (v6)
  {
    outlined release of LocalePreferences(v7);
    return v3;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in LocaleCache.current.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.identifierCapturingPreferences.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifierCapturingPreferences.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.identifierCapturingPreferences.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.identifierCapturingPreferences.getter(a1, v2, a2);
}

uint64_t closure #1 in _LocaleICU.identifierCapturingPreferences.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a1 + 448);
  if (v7)
  {
    *a3 = *(void *)(a1 + 440);
    a3[1] = v7;
    return swift_bridgeObjectRetain();
  }
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v34);
  outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)v35);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v35) == 1)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 440) = v10;
    *(void *)(a1 + 448) = v9;
    *a3 = v10;
    a3[1] = v9;
    swift_bridgeObjectRetain_n();
    return swift_bridgeObjectRetain();
  }
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v34, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  Locale.Components.init(identifier:)(v11, v12, __src);
  uint64_t v13 = *((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v14 = v36;
    Swift::String v15 = String.lowercased()();
    uint64_t v16 = __src[13];
    uint64_t v42 = v4;
    uint64_t v17 = __src[14];
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v16, v17);
    __src[13] = v14;
    __src[14] = v13;
    *(Swift::String *)&__src[15] = v15;
  }
  uint64_t v18 = v37;
  if (!(void)v37)
  {
LABEL_17:
    __dst[6] = v40;
    __dst[7] = *(_OWORD *)v41;
    *(_OWORD *)((char *)&__dst[7] + 12) = *(_OWORD *)&v41[12];
    __dst[2] = v36;
    __dst[3] = v37;
    __dst[4] = v38;
    __dst[5] = v39;
    __dst[0] = v35[0];
    __dst[1] = v35[1];
    LocalePreferences.measurementSystem.getter((uint64_t)v31);
    uint64_t v23 = v31[1];
    if (v31[1])
    {
      uint64_t v25 = v31[2];
      uint64_t v24 = v31[3];
      uint64_t v26 = v31[0];
      outlined consume of Locale.LanguageCode?(__src[26], __src[27]);
      __src[26] = v26;
      __src[27] = v23;
      __src[28] = v25;
      __src[29] = v24;
    }
    if (v41[26])
    {
      char v27 = 2;
    }
    else
    {
      if ((v41[27] & 1) == 0)
      {
LABEL_24:
        memcpy(__dst, __src, sizeof(__dst));
        memcpy(v31, __src, sizeof(v31));
        outlined retain of Locale.Components((uint64_t *)__dst);
        uint64_t v28 = Locale.Components.icuIdentifier.getter();
        uint64_t v30 = v29;
        outlined retain of LocalePreferences?((uint64_t)v34, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        outlined release of Locale.Components((uint64_t *)__dst);
        swift_bridgeObjectRetain();
        outlined release of Locale.Components((uint64_t *)__dst);
        *(void *)(a1 + 440) = v28;
        *(void *)(a1 + 448) = v30;
        *a3 = v28;
        a3[1] = v30;
        return swift_bridgeObjectRetain();
      }
      char v27 = 1;
    }
    BYTE1(__src[25]) = v27;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  _LocaleICU._lockedCalendarIdentifier(_:)(a1, __dst);
  if (!*(void *)(v18 + 16)
    || (uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(LOBYTE(__dst[0])), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
  uint64_t result = swift_bridgeObjectRelease();
  if (v21 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v21 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    uint64_t result = swift_once();
    goto LABEL_14;
  }
  if ((v21 - 8) < 0xFFFFFFF9) {
    goto LABEL_17;
  }
  if (one-time initialization token for weekdays != -1) {
    goto LABEL_28;
  }
LABEL_14:
  if ((unint64_t)v21 <= *((void *)static Locale.Weekday.weekdays + 2))
  {
    LOBYTE(__src[25]) = *((unsigned char *)static Locale.Weekday.weekdays + v21 + 31);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ICUNumberFormatterBase.FormatResult()
{
  return self;
}

uint64_t specialized String.init(_utf16:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v9[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v2 < 0) {
    goto LABEL_9;
  }
  uint64_t v4 = (unsigned __int16 *)isStackAllocationSafe;
  if (v2 <= 1024 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    closure #1 in String.init(_utf16:)((unsigned char *)&v9[-1] - v5, v4, a2, v9);
    return v9[0];
  }
  else
  {
    uint64_t v7 = (unsigned char *)swift_slowAlloc();
    closure #1 in String.init(_utf16:)(v7, v4, a2, v9);
    MEMORY[0x185309510](v7, -1, -1);
    return v9[0];
  }
}

unsigned char *closure #1 in String.init(_utf16:)@<X0>(unsigned char *result@<X0>, unsigned __int16 *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  unsigned int v7 = 0;
  unsigned __int8 v8 = 0;
  uint64_t v9 = 0;
  if (a2) {
    uint64_t v10 = &a2[a3];
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v34 = 0;
  unsigned __int8 v35 = 0;
  while (1)
  {
    if (v8)
    {
      if ((v7 & 0xF800) != 0xD800)
      {
        uint64_t v32 = a4;
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        uint64_t result = Locale.Language.components.modify();
        char v25 = *(unsigned char *)(v24 + 4);
        if (!v25) {
          goto LABEL_60;
        }
        *(_DWORD *)uint64_t v24 = *(unsigned __int16 *)(v24 + 2);
        *(unsigned char *)(v24 + 4) = v25 - 16;
        uint64_t result = (unsigned char *)((uint64_t (*)(char *, void))result)(v33, 0);
        unsigned int v7 = (unsigned __int16)v7;
        char v16 = 1;
        a4 = v32;
        goto LABEL_35;
      }
      if (!v4) {
        goto LABEL_27;
      }
      uint64_t v12 = v4;
      unsigned __int8 v13 = v8;
      if (v4 == v10) {
        goto LABEL_26;
      }
    }
    else
    {
      if (!v4 || v4 == v10)
      {
LABEL_55:
        if (v9 < 0)
        {
          __break(1u);
LABEL_60:
          __break(1u);
        }
        else
        {
          uint64_t v30 = a4;
          uint64_t result = (unsigned char *)static String._tryFromUTF8(_:)();
          void *v30 = result;
          v30[1] = v31;
        }
        return result;
      }
      unsigned int v11 = *v4;
      uint64_t v12 = v4 + 1;
      if ((v11 & 0xF800) != 0xD800)
      {
        char v16 = 1;
        ++v4;
        unsigned int v7 = v11;
        goto LABEL_35;
      }
      unsigned int v7 = v7 & 0xFFFF0000 | v11;
      unsigned int v34 = v7;
      unsigned __int8 v13 = 16;
      ++v4;
      if (v12 == v10)
      {
LABEL_26:
        unsigned __int8 v8 = v13;
        goto LABEL_27;
      }
    }
    uint64_t v4 = v12 + 1;
    unsigned int v7 = (*v12 << v13) | ((-65535 << v13) - 1) & v7;
    unsigned __int8 v8 = v13 + 16;
    if ((v13 + 16) <= 0x1Fu)
    {
      if (v4 == v10)
      {
        if (v13 == 0xF0) {
          goto LABEL_55;
        }
        goto LABEL_27;
      }
      uint64_t v4 = v12 + 2;
      unsigned int v7 = ((-65535 << v8) - 1) & v7 | (v12[1] << v8);
      unsigned __int8 v8 = v13 + 32;
      if (v13 < 0xF0u)
      {
        unsigned __int8 v15 = v13 + 32;
LABEL_22:
        unsigned __int8 v8 = v15;
        goto LABEL_27;
      }
      BOOL v14 = v4 == v10;
      uint64_t v4 = v10;
      if (!v14)
      {
        unsigned int v7 = ((-65535 << v13) - 1) & v7 | (v12[2] << v13);
        unsigned __int8 v15 = v13 + 48;
        if (v8 >= 0x10u)
        {
          uint64_t v4 = v12 + 3;
          goto LABEL_22;
        }
        unsigned __int8 v8 = v15;
        uint64_t v4 = v10;
      }
    }
LABEL_27:
    unsigned int v17 = v7 & 0xFC00FC00;
    if ((v7 & 0xFC00FC00) == 0xDC00D800) {
      char v18 = 32;
    }
    else {
      char v18 = 16;
    }
    unsigned __int8 v35 = v8 - v18;
    if (v17 == -603924480) {
      char v19 = 32;
    }
    else {
      char v19 = 16;
    }
    unsigned int v34 = (unint64_t)v7 >> v19;
    if (v17 != -603924480) {
      goto LABEL_58;
    }
    char v16 = 0;
LABEL_35:
    if ((unsigned __int16)v7 >= 0x80u) {
      break;
    }
    unsigned int v20 = (v7 + 1);
    if ((_BYTE)v7 != 0xFF) {
      goto LABEL_37;
    }
LABEL_5:
    unsigned __int8 v8 = v35;
    unsigned int v7 = v34;
  }
  int v23 = (v7 & 0x3F) << 8;
  if ((unsigned __int16)v7 < 0x800u)
  {
    unsigned int v20 = (v23 | ((unsigned __int16)v7 >> 6)) + 33217;
    goto LABEL_37;
  }
  if ((v7 & 0xF800) != 0xD800)
  {
    unsigned int v26 = ((v23 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
    goto LABEL_46;
  }
  if ((v16 & 1) == 0)
  {
    unsigned int v28 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
    unsigned int v26 = ((v28 + 0x10000) >> 4) & 0x3F00 | ((v28 + 0x10000) >> 18) | (((v28 >> 6) & 0x3F | (((v28 + 0x10000) & 0x3F) << 8)) << 16);
    int v27 = -2122219023;
    goto LABEL_47;
  }
  if ((unsigned __int16)v7 <= 0x7Fu)
  {
    unsigned int v20 = (unsigned __int16)v7 + 1;
    goto LABEL_37;
  }
  int v29 = (v7 & 0x3F) << 8;
  if ((unsigned __int16)v7 >= 0x800u)
  {
    unsigned int v26 = ((unsigned __int16)v7 >> 12) | ((v29 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8);
LABEL_46:
    int v27 = 8487393;
LABEL_47:
    unsigned int v20 = v26 + v27;
    goto LABEL_37;
  }
  unsigned int v20 = (v29 | ((unsigned __int16)v7 >> 6)) + 33217;
LABEL_37:
  while (1)
  {
    v5[v9] = v20 - 1;
    uint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    ++v9;
    BOOL v22 = v20 >= 0x100;
    v20 >>= 8;
    if (!v22)
    {
      uint64_t v9 = v21;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_58:
  *a4 = 0;
  a4[1] = 0;
  return result;
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)()
{
  uint64_t v1 = unumf_openResult();
  if (!v1) {
    __break(1u);
  }
  *(void *)(v0 + 16) = v1;
  unumf_formatDouble();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = unumf_openResult();
  if (!v1) {
    __break(1u);
  }
  *(void *)(v0 + 16) = v1;
  unumf_formatInt();
  return v0;
}

double specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v76 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v72 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v73 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  Swift::Int v71 = (char *)&v68 - v6;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v68 = (char *)&v68 - v8;
  uint64_t v75 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  BOOL v14 = (char *)&v68 - v13;
  MEMORY[0x1F4188790](v15);
  unsigned int v17 = (char *)&v68 - v16;
  MEMORY[0x1F4188790](v18);
  unsigned int v20 = (char *)&v68 - v19;
  MEMORY[0x1F4188790](v21);
  int v23 = (char *)&v68 - v22;
  MEMORY[0x1F4188790](v24);
  unsigned int v26 = (char *)&v68 - v25;
  uint64_t v27 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  uint64_t v74 = a3;
  uint64_t v28 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  if (v27 == 11)
  {
    if (v28 == 52)
    {
      uint64_t v34 = v75;
      uint64_t v33 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v14, v76, a2);
      int v35 = swift_dynamicCast();
      _D8 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v11, v33, a2);
      if (v35)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, a2);
      }
      else
      {
        uint64_t v54 = dispatch thunk of FloatingPoint.sign.getter();
        int v55 = v68;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v56 = v70;
        swift_getAssociatedConformanceWitness();
        __int16 v57 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v56);
        __int16 v58 = v71;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, a2);
        uint64_t v59 = v73;
        swift_getAssociatedConformanceWitness();
        uint64_t v60 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v59);
        *(void *)&_D8 = (v54 << 63) | ((unint64_t)(v57 & 0x7FF) << 52) | v60 & 0xFFFFFFFFFFFFFLL;
      }
      return _D8;
    }
LABEL_13:
    lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v41 = v76;
    static BinaryFloatingPoint._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v41, a2);
    return v77;
  }
  if (v27 == 8)
  {
    if (v28 == 23)
    {
      uint64_t v38 = v75;
      uint64_t v37 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v20, v76, a2);
      int v39 = swift_dynamicCast();
      float v40 = *(float *)&v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v17, v37, a2);
      if (v39)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, a2);
        return v40;
      }
      else
      {
        int v61 = dispatch thunk of FloatingPoint.sign.getter();
        __int16 v62 = v68;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v63 = v70;
        swift_getAssociatedConformanceWitness();
        unsigned __int8 v64 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v63);
        unint64_t v65 = v71;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, a2);
        uint64_t v66 = v73;
        swift_getAssociatedConformanceWitness();
        int v67 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v66);
        return COERCE_FLOAT((v61 << 31) | (v64 << 23) | v67 & 0x7FFFFF);
      }
    }
    goto LABEL_13;
  }
  if (v27 != 5 || v28 != 10) {
    goto LABEL_13;
  }
  uint64_t v29 = v75;
  uint64_t v30 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v26, v76, a2);
  int v31 = swift_dynamicCast();
  _H8 = LOWORD(v77);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v23, v30, a2);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v23, a2);
  }
  else
  {
    __int16 v43 = dispatch thunk of FloatingPoint.sign.getter();
    uint64_t v44 = v68;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
    uint64_t v45 = v70;
    swift_getAssociatedConformanceWitness();
    char v46 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v45);
    uint64_t v47 = v71;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v23, a2);
    uint64_t v48 = v73;
    swift_getAssociatedConformanceWitness();
    __int16 v49 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v48);
    _H8 = (v43 << 15) | ((v46 & 0x1F) << 10) | v49 & 0x3FF;
  }
  __asm { FCVT            D8, H8 }
  return _D8;
}

uint64_t specialized static ICUNumberFormatter._create(with:)(uint64_t a1)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for ICUNumberFormatter.Signature(0);
  uint64_t v55 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v49 - v7;
  if (one-time initialization token for cache != -1) {
    uint64_t v6 = swift_once();
  }
  uint64_t v9 = qword_1E8ED53D0;
  uint64_t v57 = static ICUNumberFormatter.cache;
  MEMORY[0x1F4188790](v6);
  *(&v49 - 2) = a1;
  uint64_t v10 = (uint64_t *)(v9 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA09ICUNumberB0C9Signature33_1C58B5D80AA37B9371410D3343C91B53LLV_AJSgTG5TA_0(v9 + 16, v58);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release();
  unsigned int v11 = (void *)v58[0];
  if (v58[0] != 1) {
    goto LABEL_62;
  }
  os_unfair_lock_t v56 = (os_unfair_lock_t)(v9 + 24);
  uint64_t v53 = v4;
  uint64_t v54 = v8;
  uint64_t v12 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
  unint64_t v14 = v13;
  type metadata accessor for ICUNumberFormatter();
  unsigned int v11 = (void *)swift_allocObject();
  v11[3] = v12;
  v11[4] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized _copyCollectionToContiguousArray<A>(_:)(v12, v14);
  swift_bridgeObjectRelease();
  LODWORD(v58[0]) = 0;
  if (v15[2] >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  unint64_t v14 = (unint64_t)v54;
  uint64_t v18 = v56;
  if (!v17) {
    goto LABEL_8;
  }
  if (SLODWORD(v58[0]) > 0)
  {
    unumf_close();
LABEL_8:
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    unsigned int v11 = 0;
    goto LABEL_10;
  }
  uint64_t v11[2] = v17;
LABEL_10:
  swift_retain();
  os_unfair_lock_lock(v18);
  if (v57 >= *(void *)(*(void *)(v9 + 16) + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v10 = MEMORY[0x1E4FBC868];
  }
  outlined init with copy of ICUPercentNumberFormatter.Signature(a1, v14, type metadata accessor for ICUNumberFormatter.Signature);
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v58[0] = *v10;
  a1 = v58[0];
  *uint64_t v10 = 0x8000000000000000;
  uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  uint64_t v21 = *(void *)(a1 + 16);
  BOOL v22 = (v20 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    LOBYTE(v10) = v20;
    if (*(void *)(a1 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v58[0];
      uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v10 & 1) != (v26 & 1)) {
        goto LABEL_65;
      }
      uint64_t v16 = v25;
      if ((v10 & 1) == 0) {
        goto LABEL_60;
      }
LABEL_20:
      uint64_t v27 = *(void *)(v24 + 56);
      uint64_t v28 = 8 * v16;
      swift_release();
      *(void *)(v27 + v28) = v11;
LABEL_61:
      *(void *)(v9 + 16) = v24;
      swift_bridgeObjectRelease();
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(v14, type metadata accessor for ICUNumberFormatter.Signature);
      os_unfair_lock_unlock(v56);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_62:
      swift_release();
      return (uint64_t)v11;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v24 = a1;
      if (v20) {
        goto LABEL_20;
      }
LABEL_60:
      uint64_t v46 = (uint64_t)v53;
      unint64_t v47 = v16;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v14, (uint64_t)v53, type metadata accessor for ICUNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v47, v46, (uint64_t)v11, (void *)v24);
      goto LABEL_61;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t v49 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v29;
  if (!*(void *)(a1 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    uint64_t v16 = v49;
    if (v10) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
  uint64_t v30 = (char *)(v29 + 64);
  uint64_t v31 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v51 = (char *)(a1 + 64);
  unint64_t v32 = (unint64_t)(v31 + 63) >> 6;
  if (v24 != a1 || v30 >= &v51[8 * v32]) {
    memmove(v30, v51, 8 * v32);
  }
  uint64_t v33 = 0;
  *(void *)(v24 + 16) = *(void *)(a1 + 16);
  uint64_t v34 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v35 = -1;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  unint64_t v36 = v35 & *(void *)(a1 + 64);
  int64_t v50 = (unint64_t)(v34 + 63) >> 6;
  uint64_t v37 = (uint64_t)v53;
  while (1)
  {
    unint64_t v14 = (unint64_t)v54;
    if (v36)
    {
      uint64_t v52 = (v36 - 1) & v36;
      uint64_t v57 = v33;
      unint64_t v38 = __clz(__rbit64(v36)) | (v33 << 6);
      goto LABEL_31;
    }
    int64_t v42 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v42 >= v50) {
      goto LABEL_59;
    }
    unint64_t v43 = *(void *)&v51[8 * v42];
    int64_t v44 = v33 + 1;
    if (!v43)
    {
      int64_t v44 = v33 + 2;
      if (v33 + 2 >= v50) {
        goto LABEL_59;
      }
      unint64_t v43 = *(void *)&v51[8 * v44];
      if (!v43)
      {
        int64_t v44 = v33 + 3;
        if (v33 + 3 >= v50) {
          goto LABEL_59;
        }
        unint64_t v43 = *(void *)&v51[8 * v44];
        if (!v43)
        {
          int64_t v44 = v33 + 4;
          if (v33 + 4 >= v50) {
            goto LABEL_59;
          }
          unint64_t v43 = *(void *)&v51[8 * v44];
          if (!v43)
          {
            int64_t v44 = v33 + 5;
            if (v33 + 5 >= v50) {
              goto LABEL_59;
            }
            unint64_t v43 = *(void *)&v51[8 * v44];
            if (!v43)
            {
              int64_t v44 = v33 + 6;
              if (v33 + 6 >= v50) {
                goto LABEL_59;
              }
              unint64_t v43 = *(void *)&v51[8 * v44];
              if (!v43)
              {
                int64_t v44 = v33 + 7;
                if (v33 + 7 >= v50) {
                  goto LABEL_59;
                }
                unint64_t v43 = *(void *)&v51[8 * v44];
                if (!v43)
                {
                  int64_t v44 = v33 + 8;
                  if (v33 + 8 >= v50) {
                    goto LABEL_59;
                  }
                  unint64_t v43 = *(void *)&v51[8 * v44];
                  if (!v43)
                  {
                    int64_t v44 = v33 + 9;
                    if (v33 + 9 >= v50) {
                      goto LABEL_59;
                    }
                    unint64_t v43 = *(void *)&v51[8 * v44];
                    if (!v43) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_58:
    uint64_t v52 = (v43 - 1) & v43;
    uint64_t v57 = v44;
    unint64_t v38 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_31:
    unint64_t v39 = *(void *)(v55 + 72) * v38;
    outlined init with copy of ICUPercentNumberFormatter.Signature(*(void *)(a1 + 48) + v39, v37, type metadata accessor for ICUNumberFormatter.Signature);
    uint64_t v40 = 8 * v38;
    uint64_t v41 = *(void *)(*(void *)(a1 + 56) + 8 * v38);
    outlined init with take of ICUPercentNumberFormatter.Signature(v37, *(void *)(v24 + 48) + v39, type metadata accessor for ICUNumberFormatter.Signature);
    *(void *)(*(void *)(v24 + 56) + v40) = v41;
    swift_retain();
    uint64_t v33 = v57;
    unint64_t v36 = v52;
  }
  uint64_t v45 = v33 + 10;
  if (v33 + 10 >= v50) {
    goto LABEL_59;
  }
  unint64_t v43 = *(void *)&v51[8 * v45];
  if (v43)
  {
    int64_t v44 = v33 + 10;
    goto LABEL_58;
  }
  while (1)
  {
    int64_t v44 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      break;
    }
    unint64_t v14 = (unint64_t)v54;
    if (v44 >= v50) {
      goto LABEL_59;
    }
    unint64_t v43 = *(void *)&v51[8 * v44];
    ++v45;
    if (v43) {
      goto LABEL_58;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA09ICUNumberB0C9Signature33_1C58B5D80AA37B9371410D3343C91B53LLV_AJSgTG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32), *(void *)(a2 + 24));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle);
}

uint64_t type metadata accessor for ICUPercentNumberFormatter()
{
  return self;
}

uint64_t static ICUPercentNumberFormatter.create<A>(for:)(uint64_t a1)
{
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  char *v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[18];
  unsigned char v69[152];

  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  __int16 v62 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v63 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v56 - v5;
  unint64_t v65 = a1 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent() + 36);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 472);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  unint64_t v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v13(v68, ObjectType, v7);
  unint64_t v14 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUPercentNumberFormatter.Signature(v65, (uint64_t)v6, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v15 = (uint64_t *)&v6[*(int *)(v2 + 20)];
  void *v15 = v10;
  v15[1] = v12;
  unint64_t v65 = v2;
  uint64_t v16 = outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v6[*(int *)(v2 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v16 = swift_once();
  }
  uint64_t v18 = static ICUPercentNumberFormatter.cache;
  uint64_t v17 = *(void *)algn_1E8ED35C8;
  MEMORY[0x1F4188790](v16);
  *(&v56 - 2) = (uint64_t)v6;
  uint64_t v19 = (uint64_t *)(v17 + 16);
  char v20 = (os_unfair_lock_s *)(v17 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v17 + 16, v68);
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
  swift_release();
  uint64_t v21 = v68[0];
  if (v68[0] != 1) {
    goto LABEL_53;
  }
  closure #1 in static ICUPercentNumberFormatter._create(with:)(v14, &v67);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  BOOL v22 = *(void *)(v17 + 16);
  uint64_t v23 = v14;
  if (v18 >= *(void *)(v22 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v19 = MEMORY[0x1E4FBC868];
  }
  uint64_t v21 = v67;
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v66 = *v19;
  uint64_t v25 = v66;
  *uint64_t v19 = 0x8000000000000000;
  uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
  uint64_t v28 = *(void *)(v25 + 16);
  uint64_t v29 = (v26 & 1) == 0;
  uint64_t v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v19) = v26;
    if (*(void *)(v25 + 24) < v30)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      uint64_t v31 = v66;
      unint64_t v14 = v23;
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
      if ((v19 & 1) != (v33 & 1)) {
        goto LABEL_56;
      }
      uint64_t v27 = v32;
      if ((v19 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v34 = *(void *)(v31 + 56);
      uint64_t v35 = 8 * v27;
      swift_release();
      *(void *)(v34 + v35) = v21;
LABEL_52:
      *(void *)(v17 + 16) = v31;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v20);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_53:
      swift_release();
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(v14, type metadata accessor for ICUPercentNumberFormatter.Signature);
      return v21;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v31 = v25;
      unint64_t v14 = v23;
      if (v26) {
        goto LABEL_14;
      }
LABEL_51:
      uint64_t v53 = v63;
      uint64_t v54 = v27;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v14, v63, type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v54, v53, v21, (void *)v31);
      goto LABEL_52;
    }
  }
  os_unfair_lock_t v56 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  unint64_t v36 = static _DictionaryStorage.copy(original:)();
  uint64_t v31 = v36;
  unint64_t v14 = v23;
  if (!*(void *)(v25 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v27 = v56;
    if (v19) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  uint64_t v60 = v22;
  int v61 = (os_unfair_lock_s *)(v17 + 24);
  uint64_t v57 = v23;
  uint64_t v37 = (char *)(v36 + 64);
  unint64_t v38 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v59 = (char *)(v25 + 64);
  unint64_t v39 = (unint64_t)(v38 + 63) >> 6;
  if (v31 != v25 || v37 >= &v59[8 * v39]) {
    memmove(v37, v59, 8 * v39);
  }
  uint64_t v40 = 0;
  *(void *)(v31 + 16) = *(void *)(v25 + 16);
  uint64_t v41 = 1 << *(unsigned char *)(v25 + 32);
  int64_t v42 = -1;
  if (v41 < 64) {
    int64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & *(void *)(v25 + 64);
  __int16 v58 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    char v20 = v61;
    if (v43)
    {
      unsigned __int8 v64 = (v43 - 1) & v43;
      unint64_t v65 = v40;
      int64_t v44 = __clz(__rbit64(v43)) | (v40 << 6);
      goto LABEL_24;
    }
    uint64_t v49 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v14 = v57;
    if (v49 >= v58) {
      goto LABEL_50;
    }
    int64_t v50 = *(void *)&v59[8 * v49];
    uint64_t v51 = v40 + 1;
    if (!v50)
    {
      uint64_t v51 = v40 + 2;
      if (v40 + 2 >= v58) {
        goto LABEL_50;
      }
      int64_t v50 = *(void *)&v59[8 * v51];
      if (!v50)
      {
        uint64_t v51 = v40 + 3;
        if (v40 + 3 >= v58) {
          goto LABEL_50;
        }
        int64_t v50 = *(void *)&v59[8 * v51];
        if (!v50)
        {
          uint64_t v51 = v40 + 4;
          if (v40 + 4 >= v58) {
            goto LABEL_50;
          }
          int64_t v50 = *(void *)&v59[8 * v51];
          if (!v50)
          {
            uint64_t v51 = v40 + 5;
            if (v40 + 5 >= v58) {
              goto LABEL_50;
            }
            int64_t v50 = *(void *)&v59[8 * v51];
            if (!v50)
            {
              uint64_t v51 = v40 + 6;
              if (v40 + 6 >= v58) {
                goto LABEL_50;
              }
              int64_t v50 = *(void *)&v59[8 * v51];
              if (!v50)
              {
                uint64_t v51 = v40 + 7;
                if (v40 + 7 >= v58) {
                  goto LABEL_50;
                }
                int64_t v50 = *(void *)&v59[8 * v51];
                if (!v50)
                {
                  uint64_t v51 = v40 + 8;
                  if (v40 + 8 >= v58) {
                    goto LABEL_50;
                  }
                  int64_t v50 = *(void *)&v59[8 * v51];
                  if (!v50) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    unsigned __int8 v64 = (v50 - 1) & v50;
    unint64_t v65 = v51;
    int64_t v44 = __clz(__rbit64(v50)) + (v51 << 6);
LABEL_24:
    uint64_t v45 = v63;
    uint64_t v46 = *(void *)(v62 + 72) * v44;
    outlined init with copy of ICUPercentNumberFormatter.Signature(*(void *)(v25 + 48) + v46, v63, type metadata accessor for ICUPercentNumberFormatter.Signature);
    unint64_t v47 = 8 * v44;
    uint64_t v48 = *(void *)(*(void *)(v25 + 56) + 8 * v44);
    outlined init with take of ICUPercentNumberFormatter.Signature(v45, *(void *)(v31 + 48) + v46, type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(void *)(*(void *)(v31 + 56) + v47) = v48;
    swift_retain();
    unint64_t v43 = v64;
    uint64_t v40 = v65;
  }
  uint64_t v52 = v40 + 9;
  if (v40 + 9 >= v58) {
    goto LABEL_50;
  }
  int64_t v50 = *(void *)&v59[8 * v52];
  if (v50)
  {
    uint64_t v51 = v40 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v51 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      break;
    }
    unint64_t v14 = v57;
    char v20 = v61;
    if (v51 >= v58) {
      goto LABEL_50;
    }
    int64_t v50 = *(void *)&v59[8 * v51];
    ++v52;
    if (v50) {
      goto LABEL_49;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  char *v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[18];
  unsigned char v69[152];

  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  __int16 v62 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v63 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v56 - v5;
  unint64_t v65 = a1 + *(int *)(type metadata accessor for IntegerFormatStyle.Percent() + 36);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 472);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  unint64_t v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v13(v68, ObjectType, v7);
  unint64_t v14 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUPercentNumberFormatter.Signature(v65, (uint64_t)v6, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v15 = (uint64_t *)&v6[*(int *)(v2 + 20)];
  void *v15 = v10;
  v15[1] = v12;
  unint64_t v65 = v2;
  uint64_t v16 = outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v6[*(int *)(v2 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v16 = swift_once();
  }
  uint64_t v18 = static ICUPercentNumberFormatter.cache;
  uint64_t v17 = *(void *)algn_1E8ED35C8;
  MEMORY[0x1F4188790](v16);
  *(&v56 - 2) = (uint64_t)v6;
  uint64_t v19 = (uint64_t *)(v17 + 16);
  char v20 = (os_unfair_lock_s *)(v17 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v17 + 16, v68);
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
  swift_release();
  uint64_t v21 = v68[0];
  if (v68[0] != 1) {
    goto LABEL_53;
  }
  closure #1 in static ICUPercentNumberFormatter._create(with:)(v14, &v67);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  BOOL v22 = *(void *)(v17 + 16);
  uint64_t v23 = v14;
  if (v18 >= *(void *)(v22 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v19 = MEMORY[0x1E4FBC868];
  }
  uint64_t v21 = v67;
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v66 = *v19;
  uint64_t v25 = v66;
  *uint64_t v19 = 0x8000000000000000;
  uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
  uint64_t v28 = *(void *)(v25 + 16);
  uint64_t v29 = (v26 & 1) == 0;
  uint64_t v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v19) = v26;
    if (*(void *)(v25 + 24) < v30)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      uint64_t v31 = v66;
      unint64_t v14 = v23;
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
      if ((v19 & 1) != (v33 & 1)) {
        goto LABEL_56;
      }
      uint64_t v27 = v32;
      if ((v19 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v34 = *(void *)(v31 + 56);
      uint64_t v35 = 8 * v27;
      swift_release();
      *(void *)(v34 + v35) = v21;
LABEL_52:
      *(void *)(v17 + 16) = v31;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v20);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_53:
      swift_release();
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(v14, type metadata accessor for ICUPercentNumberFormatter.Signature);
      return v21;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v31 = v25;
      unint64_t v14 = v23;
      if (v26) {
        goto LABEL_14;
      }
LABEL_51:
      uint64_t v53 = v63;
      uint64_t v54 = v27;
      outlined init with copy of ICUPercentNumberFormatter.Signature(v14, v63, type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v54, v53, v21, (void *)v31);
      goto LABEL_52;
    }
  }
  os_unfair_lock_t v56 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  unint64_t v36 = static _DictionaryStorage.copy(original:)();
  uint64_t v31 = v36;
  unint64_t v14 = v23;
  if (!*(void *)(v25 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v27 = v56;
    if (v19) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  uint64_t v60 = v22;
  int v61 = (os_unfair_lock_s *)(v17 + 24);
  uint64_t v57 = v23;
  uint64_t v37 = (char *)(v36 + 64);
  unint64_t v38 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v59 = (char *)(v25 + 64);
  unint64_t v39 = (unint64_t)(v38 + 63) >> 6;
  if (v31 != v25 || v37 >= &v59[8 * v39]) {
    memmove(v37, v59, 8 * v39);
  }
  uint64_t v40 = 0;
  *(void *)(v31 + 16) = *(void *)(v25 + 16);
  uint64_t v41 = 1 << *(unsigned char *)(v25 + 32);
  int64_t v42 = -1;
  if (v41 < 64) {
    int64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & *(void *)(v25 + 64);
  __int16 v58 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    char v20 = v61;
    if (v43)
    {
      unsigned __int8 v64 = (v43 - 1) & v43;
      unint64_t v65 = v40;
      int64_t v44 = __clz(__rbit64(v43)) | (v40 << 6);
      goto LABEL_24;
    }
    uint64_t v49 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v14 = v57;
    if (v49 >= v58) {
      goto LABEL_50;
    }
    int64_t v50 = *(void *)&v59[8 * v49];
    uint64_t v51 = v40 + 1;
    if (!v50)
    {
      uint64_t v51 = v40 + 2;
      if (v40 + 2 >= v58) {
        goto LABEL_50;
      }
      int64_t v50 = *(void *)&v59[8 * v51];
      if (!v50)
      {
        uint64_t v51 = v40 + 3;
        if (v40 + 3 >= v58) {
          goto LABEL_50;
        }
        int64_t v50 = *(void *)&v59[8 * v51];
        if (!v50)
        {
          uint64_t v51 = v40 + 4;
          if (v40 + 4 >= v58) {
            goto LABEL_50;
          }
          int64_t v50 = *(void *)&v59[8 * v51];
          if (!v50)
          {
            uint64_t v51 = v40 + 5;
            if (v40 + 5 >= v58) {
              goto LABEL_50;
            }
            int64_t v50 = *(void *)&v59[8 * v51];
            if (!v50)
            {
              uint64_t v51 = v40 + 6;
              if (v40 + 6 >= v58) {
                goto LABEL_50;
              }
              int64_t v50 = *(void *)&v59[8 * v51];
              if (!v50)
              {
                uint64_t v51 = v40 + 7;
                if (v40 + 7 >= v58) {
                  goto LABEL_50;
                }
                int64_t v50 = *(void *)&v59[8 * v51];
                if (!v50)
                {
                  uint64_t v51 = v40 + 8;
                  if (v40 + 8 >= v58) {
                    goto LABEL_50;
                  }
                  int64_t v50 = *(void *)&v59[8 * v51];
                  if (!v50) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    unsigned __int8 v64 = (v50 - 1) & v50;
    unint64_t v65 = v51;
    int64_t v44 = __clz(__rbit64(v50)) + (v51 << 6);
LABEL_24:
    uint64_t v45 = v63;
    uint64_t v46 = *(void *)(v62 + 72) * v44;
    outlined init with copy of ICUPercentNumberFormatter.Signature(*(void *)(v25 + 48) + v46, v63, type metadata accessor for ICUPercentNumberFormatter.Signature);
    unint64_t v47 = 8 * v44;
    uint64_t v48 = *(void *)(*(void *)(v25 + 56) + 8 * v44);
    outlined init with take of ICUPercentNumberFormatter.Signature(v45, *(void *)(v31 + 48) + v46, type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(void *)(*(void *)(v31 + 56) + v47) = v48;
    swift_retain();
    unint64_t v43 = v64;
    uint64_t v40 = v65;
  }
  uint64_t v52 = v40 + 9;
  if (v40 + 9 >= v58) {
    goto LABEL_50;
  }
  int64_t v50 = *(void *)&v59[8 * v52];
  if (v50)
  {
    uint64_t v51 = v40 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v51 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      break;
    }
    unint64_t v14 = v57;
    char v20 = v61;
    if (v51 >= v58) {
      goto LABEL_50;
    }
    int64_t v50 = *(void *)&v59[8 * v51];
    ++v52;
    if (v50) {
      goto LABEL_49;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Percent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of ICUPercentNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithCopy for NSDecimal.FormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((unsigned char *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  long long v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((unsigned char *)a2 + v4 + 73);
  *((_WORD *)v5 + 37) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = *((unsigned char *)a2 + v4 + 76);
  v5[77] = *((unsigned char *)a2 + v4 + 77);
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v5[v10];
  uint64_t v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = v9[10];
  uint64_t v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

void *partial apply for closure #2 in LocaleCache.current.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in LocaleCache.current.getter(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t outlined consume of ICUDateIntervalFormatter??(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ICUNumberFormatter()
{
  return self;
}

uint64_t protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneAutoupdating(double a1)
{
  return _TimeZoneAutoupdating.abbreviation(for:)(*(Foundation::Date *)&a1).value._countAndFlagsBits;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  uint64_t result = outlined init with take of ICUNumberFormatter.Signature(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t outlined init with take of ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, type metadata accessor for ICUNumberFormatter.Signature, type metadata accessor for ICUNumberFormatter.Signature);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, type metadata accessor for ICUPercentNumberFormatter.Signature, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  long long v8 = a4[6];
  uint64_t v9 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t result = outlined init with take of ICUNumberFormatter.Signature(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for ICULegacyNumberFormatter.Signature);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  uint64_t result;
  void *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t result = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v9 = (void *)(a4[7] + 16 * a1);
  *uint64_t v9 = a3;
  v9[1] = result;
  uint64_t v10 = a4[2];
  uint64_t v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, type metadata accessor for ICUCurrencyNumberFormatter.Signature, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(void, double), uint64_t *a4, uint64_t (*a5)(void))
{
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v134 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  double v15 = MEMORY[0x1F4188790](v14 - 8);
  unint64_t v139 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a3(0, v15);
  uint64_t v140 = *(void *)(v17 - 8);
  uint64_t v141 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v125 - v18;
  uint64_t v20 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v142 = a2;
  uint64_t v21 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v22 = v21;
  if (!*(void *)(v20 + 16))
  {
    swift_release();
    uint64_t v28 = v22;
LABEL_168:
    *uint64_t v9 = v28;
    return;
  }
  uint64_t v23 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v24 = *(void *)(v20 + 64);
  unint64_t v128 = (void *)(v20 + 64);
  if (v23 < 64) {
    uint64_t v25 = ~(-1 << v23);
  }
  else {
    uint64_t v25 = -1;
  }
  unint64_t v146 = v25 & v24;
  __int16 v126 = v9;
  int64_t v127 = (unint64_t)(v23 + 63) >> 6;
  unint64_t v137 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  unint64_t v138 = v19 + 16;
  unint64_t v132 = (void (**)(char *, uint64_t))(v12 + 8);
  unint64_t v133 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  uint64_t v26 = v21 + 64;
  swift_retain();
  int64_t v27 = 0;
  uint64_t v130 = v20;
  unint64_t v131 = a5;
  uint64_t v129 = v11;
  uint64_t v28 = v22;
  uint64_t v135 = v22;
  uint64_t v136 = v19;
  uint64_t v29 = (uint64_t)v19;
  while (1)
  {
    if (v146)
    {
      unint64_t v31 = (v146 - 1) & v146;
      unint64_t v32 = __clz(__rbit64(v146)) | (v27 << 6);
    }
    else
    {
      int64_t v33 = v27 + 1;
      if (__OFADD__(v27, 1)) {
        goto LABEL_173;
      }
      if (v33 >= v127)
      {
        swift_release();
        uint64_t v9 = v126;
        uint64_t v34 = v128;
        if ((v142 & 1) == 0) {
          goto LABEL_167;
        }
        goto LABEL_163;
      }
      uint64_t v34 = v128;
      unint64_t v35 = v128[v33];
      ++v27;
      if (!v35)
      {
        int64_t v27 = v33 + 1;
        if (v33 + 1 >= v127) {
          goto LABEL_160;
        }
        unint64_t v35 = v128[v27];
        if (!v35)
        {
          int64_t v36 = v33 + 2;
          if (v36 >= v127) {
            goto LABEL_160;
          }
          unint64_t v35 = v128[v36];
          if (!v35)
          {
            while (1)
            {
              int64_t v27 = v36 + 1;
              if (__OFADD__(v36, 1)) {
                goto LABEL_174;
              }
              if (v27 >= v127) {
                break;
              }
              unint64_t v35 = v128[v27];
              ++v36;
              if (v35) {
                goto LABEL_21;
              }
            }
LABEL_160:
            swift_release();
            uint64_t v9 = v126;
            if ((v142 & 1) == 0)
            {
LABEL_167:
              swift_release();
              goto LABEL_168;
            }
LABEL_163:
            uint64_t v124 = 1 << *(unsigned char *)(v20 + 32);
            if (v124 >= 64) {
              bzero(v34, ((unint64_t)(v124 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *uint64_t v34 = -1 << v124;
            }
            *(void *)(v20 + 16) = 0;
            goto LABEL_167;
          }
          int64_t v27 = v36;
        }
      }
LABEL_21:
      unint64_t v31 = (v35 - 1) & v35;
      unint64_t v32 = __clz(__rbit64(v35)) + (v27 << 6);
    }
    uint64_t v37 = *(void *)(v140 + 72);
    uint64_t v38 = *(void *)(v20 + 48) + v37 * v32;
    int64_t v145 = v27;
    unint64_t v146 = v31;
    uint64_t v144 = v37;
    if (v142)
    {
      outlined init with take of ICUNumberFormatter.Signature(v38, v29, a5);
      uint64_t v143 = *(void *)(*(void *)(v20 + 56) + 8 * v32);
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature(v38, v29, a5);
      uint64_t v143 = *(void *)(*(void *)(v20 + 56) + 8 * v32);
      swift_retain();
    }
    Hasher.init(_seed:)();
    long long v174 = v179;
    long long v175 = v180;
    uint64_t v176 = v181;
    long long v172 = v177;
    long long v173 = v178;
    if (*(unsigned char *)(v29 + 8) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt64 v39 = *(void *)v29;
      Hasher._combine(_:)(1u);
      if ((v39 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v40 = v39;
      }
      else {
        Swift::UInt64 v40 = 0;
      }
      Hasher._combine(_:)(v40);
    }
    outlined init with take of LocalePreferences?((uint64_t)v138, (uint64_t)v182, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
    specialized Optional<A>.hash(into:)();
    int v41 = *(unsigned __int8 *)(v29 + 73);
    if (v41 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v42 = v41 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v42);
    }
    int v43 = *(unsigned __int16 *)(v29 + 74);
    unsigned int v44 = v43 | (*(unsigned __int8 *)(v29 + 76) << 16);
    if (v43 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v44 & 1);
      Hasher._combine(_:)((v44 >> 8) & 1);
      Hasher._combine(_:)(HIWORD(v44) & 1);
    }
    int v45 = *(unsigned __int8 *)(v29 + 77);
    if (v45 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v46 = v45 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v46);
    }
    uint64_t v47 = (uint64_t)v139;
    uint64_t v48 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?(v29 + v48[9], v47);
    if ((*v137)(v47, 1, v11) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v49 = v134;
      (*v133)(v134, v47, v11);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*v132)(v49, v11);
    }
    uint64_t v50 = v29 + v48[10];
    int v51 = *(unsigned __int8 *)(v50 + 8);
    if (v51 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v52 = *(void *)v50;
      Hasher._combine(_:)(1u);
      if (v51)
      {
        Hasher._combine(_:)(1uLL);
        if ((v52 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v53 = v52;
        }
        else {
          Swift::UInt64 v53 = 0;
        }
        Hasher._combine(_:)(v53);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v52);
      }
      uint64_t v29 = (uint64_t)v136;
    }
    Swift::UInt v54 = *(unsigned __int8 *)(v29 + v48[11]);
    if (v54 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v54);
    }
    uint64_t v55 = v141;
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?(v29 + *(int *)(v55 + 24), (uint64_t)v170, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v170, (uint64_t)v171, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v171) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_150;
    }
    outlined init with take of LocalePreferences?((uint64_t)v170, (uint64_t)&v152, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v152 == 2)
    {
      Swift::UInt8 v56 = 0;
    }
    else
    {
      Swift::UInt8 v56 = v152 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v56);
    uint64_t v57 = v153;
    if (!v153)
    {
      Hasher._combine(_:)(0);
      outlined retain of LocalePreferences(&v152);
      __int16 v62 = &v152;
      goto LABEL_71;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v57 + 16));
    uint64_t v58 = *(void *)(v57 + 16);
    if (v58) {
      break;
    }
    outlined init with take of LocalePreferences?((uint64_t)v170, (uint64_t)&v147, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v170, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    __int16 v62 = (uint64_t *)&v147;
LABEL_71:
    outlined retain of LocalePreferences(v62);
    if (v154) {
      goto LABEL_72;
    }
LABEL_65:
    Hasher._combine(_:)(0);
    if (v155) {
      goto LABEL_73;
    }
LABEL_66:
    Hasher._combine(_:)(0);
    uint64_t v60 = v156;
    if (v156) {
      goto LABEL_74;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    uint64_t v61 = v157;
    if (v157) {
      goto LABEL_96;
    }
LABEL_68:
    Hasher._combine(_:)(0);
LABEL_118:
    unint64_t v91 = v158;
    uint64_t v92 = v159;
    unint64_t v94 = v160;
    char v93 = v161;
    char v95 = v162;
    if (v158)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v96 = v92;
      id v97 = v94;
      id v98 = v93;
      id v99 = v95;
      id v100 = v91;
      _CFObject.hash(into:)();
      if (v92) {
        goto LABEL_120;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      id v105 = v95;
      id v106 = v92;
      id v107 = v94;
      id v108 = v93;
      if (v92)
      {
LABEL_120:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v101 = v92;
        _CFObject.hash(into:)();

        if (v94) {
          goto LABEL_121;
        }
        goto LABEL_126;
      }
    }
    Hasher._combine(_:)(0);
    if (v94)
    {
LABEL_121:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v102 = v94;
      _CFObject.hash(into:)();

      if (v93) {
        goto LABEL_122;
      }
      goto LABEL_127;
    }
LABEL_126:
    Hasher._combine(_:)(0);
    if (v93)
    {
LABEL_122:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v103 = v93;
      _CFObject.hash(into:)();

      if (v95) {
        goto LABEL_123;
      }
      goto LABEL_128;
    }
LABEL_127:
    Hasher._combine(_:)(0);
    if (v95)
    {
LABEL_123:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v104 = v95;
      _CFObject.hash(into:)();

      goto LABEL_129;
    }
LABEL_128:
    Hasher._combine(_:)(0);
    id v104 = 0;
LABEL_129:
    a5 = v131;

    uint64_t v109 = v163;
    if (v109)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v172, v109);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t v11 = v129;
    uint64_t v20 = v130;
    uint64_t v110 = v164;
    if (v164)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v172, v110);
      swift_bridgeObjectRelease();
      if (!v165) {
        goto LABEL_136;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v165)
      {
LABEL_136:
        Hasher._combine(_:)(0);
        goto LABEL_137;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_137:
    uint64_t v29 = (uint64_t)v136;
    if (v166 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v111 = v166 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v111);
    }
    if (v167 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v112 = v167 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v112);
    }
    if (v168 == 2)
    {
      Swift::UInt8 v113 = 0;
    }
    else
    {
      Swift::UInt8 v113 = v168 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v113);
    if (v169 == 2)
    {
      Swift::UInt8 v114 = 0;
    }
    else
    {
      Swift::UInt8 v115 = v169 & 1;
      Hasher._combine(_:)(1u);
      Swift::UInt8 v114 = v115;
    }
    Hasher._combine(_:)(v114);
    outlined retain of LocalePreferences?((uint64_t)v170, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v170, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_150:
    uint64_t v28 = v135;
    Swift::Int v116 = Hasher._finalize()();
    uint64_t v117 = -1 << *(unsigned char *)(v28 + 32);
    unint64_t v118 = v116 & ~v117;
    unint64_t v119 = v118 >> 6;
    if (((-1 << v118) & ~*(void *)(v26 + 8 * (v118 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v118) & ~*(void *)(v26 + 8 * (v118 >> 6)))) | v118 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v120 = 0;
      unint64_t v121 = (unint64_t)(63 - v117) >> 6;
      do
      {
        if (++v119 == v121 && (v120 & 1) != 0)
        {
          __break(1u);
          goto LABEL_169;
        }
        BOOL v122 = v119 == v121;
        if (v119 == v121) {
          unint64_t v119 = 0;
        }
        v120 |= v122;
        uint64_t v123 = *(void *)(v26 + 8 * v119);
      }
      while (v123 == -1);
      unint64_t v30 = __clz(__rbit64(~v123)) + (v119 << 6);
    }
    *(void *)(v26 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    outlined init with take of ICUNumberFormatter.Signature(v29, *(void *)(v28 + 48) + v144 * v30, a5);
    *(void *)(*(void *)(v28 + 56) + 8 * v30) = v143;
    ++*(void *)(v28 + 16);
    int64_t v27 = v145;
  }
  outlined retain of LocalePreferences?((uint64_t)v170, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v170, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v59 = v57 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v59 += 16;
    --v58;
  }
  while (v58);
  swift_bridgeObjectRelease();
  if (!v154) {
    goto LABEL_65;
  }
LABEL_72:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v155) {
    goto LABEL_66;
  }
LABEL_73:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v60 = v156;
  if (!v156) {
    goto LABEL_67;
  }
LABEL_74:
  Hasher._combine(_:)(1u);
  Swift::UInt v63 = 0;
  int64_t v64 = 0;
  uint64_t v65 = v60 + 64;
  uint64_t v66 = 1 << *(unsigned char *)(v60 + 32);
  if (v66 < 64) {
    uint64_t v67 = ~(-1 << v66);
  }
  else {
    uint64_t v67 = -1;
  }
  unint64_t v68 = v67 & *(void *)(v60 + 64);
  int64_t v69 = (unint64_t)(v66 + 63) >> 6;
  while (2)
  {
    if (v68)
    {
      unint64_t v70 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      unint64_t v71 = v70 | (v64 << 6);
LABEL_79:
      Swift::UInt v72 = *(unsigned __int8 *)(*(void *)(v60 + 48) + v71);
      Swift::UInt v73 = *(void *)(*(void *)(v60 + 56) + 8 * v71);
      long long v147 = v172;
      long long v148 = v173;
      long long v149 = v174;
      long long v150 = v175;
      uint64_t v151 = v176;
      Hasher._combine(_:)(v72);
      Hasher._combine(_:)(v73);
      v63 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  int64_t v74 = v64 + 1;
  if (__OFADD__(v64, 1))
  {
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
    goto LABEL_171;
  }
  if (v74 >= v69) {
    goto LABEL_95;
  }
  unint64_t v75 = *(void *)(v65 + 8 * v74);
  ++v64;
  if (v75) {
    goto LABEL_94;
  }
  int64_t v64 = v74 + 1;
  if (v74 + 1 >= v69) {
    goto LABEL_95;
  }
  unint64_t v75 = *(void *)(v65 + 8 * v64);
  if (v75) {
    goto LABEL_94;
  }
  int64_t v64 = v74 + 2;
  if (v74 + 2 >= v69) {
    goto LABEL_95;
  }
  unint64_t v75 = *(void *)(v65 + 8 * v64);
  if (v75)
  {
LABEL_94:
    unint64_t v68 = (v75 - 1) & v75;
    unint64_t v71 = __clz(__rbit64(v75)) + (v64 << 6);
    goto LABEL_79;
  }
  int64_t v76 = v74 + 3;
  if (v76 < v69)
  {
    unint64_t v75 = *(void *)(v65 + 8 * v76);
    if (!v75)
    {
      while (1)
      {
        int64_t v64 = v76 + 1;
        if (__OFADD__(v76, 1)) {
          break;
        }
        if (v64 >= v69) {
          goto LABEL_95;
        }
        unint64_t v75 = *(void *)(v65 + 8 * v64);
        ++v76;
        if (v75) {
          goto LABEL_94;
        }
      }
LABEL_171:
      __break(1u);
      goto LABEL_172;
    }
    int64_t v64 = v76;
    goto LABEL_94;
  }
LABEL_95:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v63);
  swift_bridgeObjectRelease();
  uint64_t v61 = v157;
  if (!v157) {
    goto LABEL_68;
  }
LABEL_96:
  Hasher._combine(_:)(1u);
  Swift::UInt v77 = 0;
  int64_t v78 = 0;
  uint64_t v79 = v61 + 64;
  uint64_t v80 = 1 << *(unsigned char *)(v61 + 32);
  if (v80 < 64) {
    uint64_t v81 = ~(-1 << v80);
  }
  else {
    uint64_t v81 = -1;
  }
  unint64_t v82 = v81 & *(void *)(v61 + 64);
  int64_t v83 = (unint64_t)(v80 + 63) >> 6;
  while (2)
  {
    if (v82)
    {
      unint64_t v84 = __clz(__rbit64(v82));
      v82 &= v82 - 1;
      unint64_t v85 = v84 | (v78 << 6);
LABEL_101:
      Swift::UInt v86 = *(unsigned __int8 *)(*(void *)(v61 + 48) + v85);
      Swift::UInt v87 = *(void *)(*(void *)(v61 + 56) + 8 * v85);
      long long v147 = v172;
      long long v148 = v173;
      long long v149 = v174;
      long long v150 = v175;
      uint64_t v151 = v176;
      Hasher._combine(_:)(v86);
      Hasher._combine(_:)(v87);
      v77 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  int64_t v88 = v78 + 1;
  if (__OFADD__(v78, 1)) {
    goto LABEL_170;
  }
  if (v88 >= v83)
  {
LABEL_117:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v77);
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }
  unint64_t v89 = *(void *)(v79 + 8 * v88);
  ++v78;
  if (v89) {
    goto LABEL_116;
  }
  int64_t v78 = v88 + 1;
  if (v88 + 1 >= v83) {
    goto LABEL_117;
  }
  unint64_t v89 = *(void *)(v79 + 8 * v78);
  if (v89) {
    goto LABEL_116;
  }
  int64_t v78 = v88 + 2;
  if (v88 + 2 >= v83) {
    goto LABEL_117;
  }
  unint64_t v89 = *(void *)(v79 + 8 * v78);
  if (v89)
  {
LABEL_116:
    unint64_t v82 = (v89 - 1) & v89;
    unint64_t v85 = __clz(__rbit64(v89)) + (v78 << 6);
    goto LABEL_101;
  }
  int64_t v90 = v88 + 3;
  if (v90 >= v83) {
    goto LABEL_117;
  }
  unint64_t v89 = *(void *)(v79 + 8 * v90);
  if (v89)
  {
    int64_t v78 = v90;
    goto LABEL_116;
  }
  while (1)
  {
    int64_t v78 = v90 + 1;
    if (__OFADD__(v90, 1)) {
      break;
    }
    if (v78 >= v83) {
      goto LABEL_117;
    }
    unint64_t v89 = *(void *)(v79 + 8 * v78);
    ++v90;
    if (v89) {
      goto LABEL_116;
    }
  }
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(void, double))type metadata accessor for ICUPercentNumberFormatter.Signature, &demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  Swift::UInt64 v33;
  int v34;
  Swift::UInt v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  Swift::UInt v39;
  int *v40;
  char *v41;
  uint64_t v42;
  int v43;
  Swift::UInt v44;
  Swift::UInt64 v45;
  Swift::UInt v46;
  uint64_t v47;
  Swift::UInt8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  Swift::UInt v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  Swift::UInt v64;
  Swift::UInt v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  Swift::UInt v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  Swift::UInt v78;
  Swift::UInt v79;
  int64_t v80;
  unint64_t v81;
  int64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  Swift::UInt v103;
  Swift::UInt v104;
  Swift::UInt8 v105;
  Swift::UInt8 v106;
  Swift::UInt8 v107;
  Swift::Int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  int64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (**v123)(char *, uint64_t);
  void (**v124)(char *, char *, uint64_t);
  char *v125;
  uint64_t v126;
  char *v127;
  unsigned int (**v128)(char *, uint64_t, uint64_t);
  char *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  long long v137;
  long long v138;
  long long v139;
  long long v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  char v158;
  char v159;
  unsigned char v160[144];
  unsigned char v161[144];
  long long v162;
  long long v163;
  long long v164;
  long long v165;
  uint64_t v166;
  long long v167;
  long long v168;
  long long v169;
  long long v170;
  uint64_t v171;
  char v172[80];

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v125 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  uint64_t v130 = *(void *)(v11 - 8);
  unint64_t v131 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  unint64_t v132 = a2;
  double v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_164;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  unint64_t v119 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  uint64_t v20 = v19 & v18;
  uint64_t v117 = v3;
  unint64_t v118 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v128 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v129 = v13 + 16;
  uint64_t v123 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v124 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v21 = v15 + 64;
  swift_retain();
  uint64_t v22 = 0;
  unint64_t v121 = v5;
  BOOL v122 = v14;
  __int16 v126 = v16;
  int64_t v127 = v10;
  uint64_t v23 = (uint64_t)v13;
  char v120 = v13;
  while (1)
  {
    if (v20)
    {
      uint64_t v135 = (v20 - 1) & v20;
      uint64_t v26 = __clz(__rbit64(v20)) | (v22 << 6);
    }
    else
    {
      int64_t v27 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        goto LABEL_169;
      }
      if (v27 >= v118) {
        goto LABEL_159;
      }
      uint64_t v28 = v119[v27];
      ++v22;
      if (!v28)
      {
        uint64_t v22 = v27 + 1;
        if (v27 + 1 >= v118) {
          goto LABEL_159;
        }
        uint64_t v28 = v119[v22];
        if (!v28)
        {
          uint64_t v29 = v27 + 2;
          if (v29 >= v118) {
            goto LABEL_159;
          }
          uint64_t v28 = v119[v29];
          if (!v28)
          {
            while (1)
            {
              uint64_t v22 = v29 + 1;
              if (__OFADD__(v29, 1)) {
                goto LABEL_170;
              }
              if (v22 >= v118) {
                break;
              }
              uint64_t v28 = v119[v22];
              ++v29;
              if (v28) {
                goto LABEL_21;
              }
            }
LABEL_159:
            swift_release();
            uint64_t v3 = v117;
            if (v132)
            {
              Swift::Int v116 = 1 << *(unsigned char *)(v14 + 32);
              if (v116 >= 64) {
                bzero(v119, ((unint64_t)(v116 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v119 = -1 << v116;
              }
              *(void *)(v14 + 16) = 0;
            }
LABEL_164:
            swift_release();
            *uint64_t v3 = v16;
            return;
          }
          uint64_t v22 = v29;
        }
      }
LABEL_21:
      uint64_t v135 = (v28 - 1) & v28;
      uint64_t v26 = __clz(__rbit64(v28)) + (v22 << 6);
    }
    unint64_t v30 = *(void *)(v130 + 72);
    unint64_t v31 = *(void *)(v14 + 48) + v30 * v26;
    uint64_t v136 = v22;
    unint64_t v134 = v30;
    if (v132)
    {
      outlined init with take of ICUNumberFormatter.Signature(v31, v23, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      unint64_t v133 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature(v31, v23, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      unint64_t v133 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
      swift_retain();
    }
    Hasher.init(_seed:)();
    uint64_t v164 = v169;
    uint64_t v165 = v170;
    char v166 = v171;
    uint64_t v162 = v167;
    uint64_t v163 = v168;
    if (*(unsigned char *)(v23 + 8) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      unint64_t v32 = *(void *)v23;
      Hasher._combine(_:)(1u);
      if ((v32 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        int64_t v33 = v32;
      }
      else {
        int64_t v33 = 0;
      }
      Hasher._combine(_:)(v33);
    }
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v172, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
    specialized Optional<A>.hash(into:)();
    uint64_t v34 = *(unsigned __int8 *)(v23 + 73);
    if (v34 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      unint64_t v35 = v34 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v35);
    }
    int64_t v36 = *(unsigned int *)(v23 + 74);
    if (*(_DWORD *)(v23 + 74) == 2)
    {
      LOBYTE(v37) = 0;
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v36 & 1);
      Hasher._combine(_:)((v36 >> 8) & 1);
      Hasher._combine(_:)(WORD1(v36) & 1);
      uint64_t v37 = BYTE3(v36) & 1;
    }
    Hasher._combine(_:)(v37);
    uint64_t v38 = *(unsigned __int8 *)(v23 + 78);
    if (v38 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt64 v39 = v38 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v39);
    }
    Swift::UInt64 v40 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?(v23 + v40[9], (uint64_t)v10);
    if ((*v128)(v10, 1, v5) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      int v41 = v125;
      (*v124)(v125, v10, v5);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*v123)(v41, v5);
    }
    Swift::UInt v42 = v23 + v40[10];
    int v43 = *(unsigned __int8 *)(v42 + 8);
    if (v43 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      unsigned int v44 = *(void *)v42;
      Hasher._combine(_:)(1u);
      if (v43)
      {
        Hasher._combine(_:)(1uLL);
        if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          int v45 = v44;
        }
        else {
          int v45 = 0;
        }
        Hasher._combine(_:)(v45);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v44);
      }
      uint64_t v10 = v127;
    }
    Hasher._combine(_:)(*(unsigned __int8 *)(v23 + v40[11]));
    Swift::UInt v46 = *(unsigned __int8 *)(v23 + v40[12]);
    if (v46 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v46);
    }
    uint64_t v47 = v131;
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?(v23 + *(int *)(v47 + 28), (uint64_t)v160, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v160, (uint64_t)v161, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v161) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_150;
    }
    outlined init with take of LocalePreferences?((uint64_t)v160, (uint64_t)&v142, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v142 == 2)
    {
      uint64_t v48 = 0;
    }
    else
    {
      uint64_t v48 = v142 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v48);
    uint64_t v49 = v143;
    if (!v143)
    {
      Hasher._combine(_:)(0);
      outlined retain of LocalePreferences(&v142);
      Swift::UInt v54 = &v142;
      goto LABEL_71;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v49 + 16));
    uint64_t v50 = *(void *)(v49 + 16);
    if (v50) {
      break;
    }
    outlined init with take of LocalePreferences?((uint64_t)v160, (uint64_t)&v137, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    Swift::UInt v54 = (uint64_t *)&v137;
LABEL_71:
    outlined retain of LocalePreferences(v54);
    if (v144) {
      goto LABEL_72;
    }
LABEL_65:
    Hasher._combine(_:)(0);
    if (v145) {
      goto LABEL_73;
    }
LABEL_66:
    Hasher._combine(_:)(0);
    Swift::UInt v52 = v146;
    if (v146) {
      goto LABEL_74;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    Swift::UInt64 v53 = v147;
    if (v147) {
      goto LABEL_96;
    }
LABEL_68:
    Hasher._combine(_:)(0);
LABEL_118:
    int64_t v83 = v148;
    unint64_t v84 = v149;
    unint64_t v85 = v150;
    Swift::UInt v86 = v151;
    Swift::UInt v87 = v152;
    if (v148)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      int64_t v88 = v84;
      unint64_t v89 = v85;
      int64_t v90 = v86;
      unint64_t v91 = v87;
      uint64_t v92 = v83;
      _CFObject.hash(into:)();
      if (v84) {
        goto LABEL_120;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      id v97 = v87;
      id v98 = v84;
      id v99 = v85;
      id v100 = v86;
      if (v84)
      {
LABEL_120:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        char v93 = v84;
        _CFObject.hash(into:)();

        if (v85) {
          goto LABEL_121;
        }
        goto LABEL_126;
      }
    }
    Hasher._combine(_:)(0);
    if (v85)
    {
LABEL_121:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      unint64_t v94 = v85;
      _CFObject.hash(into:)();

      if (v86) {
        goto LABEL_122;
      }
      goto LABEL_127;
    }
LABEL_126:
    Hasher._combine(_:)(0);
    if (v86)
    {
LABEL_122:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      char v95 = v86;
      _CFObject.hash(into:)();

      if (v87) {
        goto LABEL_123;
      }
      goto LABEL_128;
    }
LABEL_127:
    Hasher._combine(_:)(0);
    if (v87)
    {
LABEL_123:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v96 = v87;
      _CFObject.hash(into:)();

      goto LABEL_129;
    }
LABEL_128:
    Hasher._combine(_:)(0);
    id v96 = 0;
LABEL_129:
    uint64_t v14 = v122;

    id v101 = v153;
    if (v101)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v162, v101);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t v23 = (uint64_t)v120;
    uint64_t v5 = v121;
    uint64_t v10 = v127;
    id v102 = v154;
    if (v154)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v162, v102);
      swift_bridgeObjectRelease();
      if (!v155) {
        goto LABEL_136;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v155)
      {
LABEL_136:
        Hasher._combine(_:)(0);
        goto LABEL_137;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_137:
    if (v156 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      id v103 = v156 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v103);
    }
    if (v157 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      id v104 = v157 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v104);
    }
    if (v158 == 2)
    {
      id v105 = 0;
    }
    else
    {
      id v105 = v158 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v105);
    if (v159 == 2)
    {
      id v106 = 0;
    }
    else
    {
      id v107 = v159 & 1;
      Hasher._combine(_:)(1u);
      id v106 = v107;
    }
    Hasher._combine(_:)(v106);
    outlined retain of LocalePreferences?((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_150:
    uint64_t v16 = v126;
    id v108 = Hasher._finalize()();
    uint64_t v109 = -1 << *(unsigned char *)(v16 + 32);
    uint64_t v110 = v108 & ~v109;
    Swift::UInt v111 = v110 >> 6;
    if (((-1 << v110) & ~*(void *)(v21 + 8 * (v110 >> 6))) != 0)
    {
      uint64_t v24 = __clz(__rbit64((-1 << v110) & ~*(void *)(v21 + 8 * (v110 >> 6)))) | v110 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      Swift::UInt v112 = 0;
      Swift::UInt8 v113 = (unint64_t)(63 - v109) >> 6;
      do
      {
        if (++v111 == v113 && (v112 & 1) != 0)
        {
          __break(1u);
          goto LABEL_165;
        }
        Swift::UInt8 v114 = v111 == v113;
        if (v111 == v113) {
          Swift::UInt v111 = 0;
        }
        v112 |= v114;
        Swift::UInt8 v115 = *(void *)(v21 + 8 * v111);
      }
      while (v115 == -1);
      uint64_t v24 = __clz(__rbit64(~v115)) + (v111 << 6);
    }
    uint64_t v25 = v134;
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    outlined init with take of ICUNumberFormatter.Signature(v23, *(void *)(v16 + 48) + v25 * v24, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v16 + 56) + 8 * v24) = v133;
    ++*(void *)(v16 + 16);
    uint64_t v20 = v135;
    uint64_t v22 = v136;
  }
  outlined retain of LocalePreferences?((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v51 = v49 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v51 += 16;
    --v50;
  }
  while (v50);
  swift_bridgeObjectRelease();
  if (!v144) {
    goto LABEL_65;
  }
LABEL_72:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v145) {
    goto LABEL_66;
  }
LABEL_73:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt v52 = v146;
  if (!v146) {
    goto LABEL_67;
  }
LABEL_74:
  Hasher._combine(_:)(1u);
  uint64_t v55 = 0;
  Swift::UInt8 v56 = 0;
  uint64_t v57 = v52 + 64;
  uint64_t v58 = 1 << *(unsigned char *)(v52 + 32);
  if (v58 < 64) {
    uint64_t v59 = ~(-1 << v58);
  }
  else {
    uint64_t v59 = -1;
  }
  uint64_t v60 = v59 & *(void *)(v52 + 64);
  uint64_t v61 = (unint64_t)(v58 + 63) >> 6;
  while (2)
  {
    if (v60)
    {
      __int16 v62 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      Swift::UInt v63 = v62 | (v56 << 6);
LABEL_79:
      int64_t v64 = *(unsigned __int8 *)(*(void *)(v52 + 48) + v63);
      uint64_t v65 = *(void *)(*(void *)(v52 + 56) + 8 * v63);
      unint64_t v137 = v162;
      unint64_t v138 = v163;
      unint64_t v139 = v164;
      uint64_t v140 = v165;
      uint64_t v141 = v166;
      Hasher._combine(_:)(v64);
      Hasher._combine(_:)(v65);
      v55 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  uint64_t v66 = v56 + 1;
  if (__OFADD__(v56, 1))
  {
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }
  if (v66 >= v61) {
    goto LABEL_95;
  }
  uint64_t v67 = *(void *)(v57 + 8 * v66);
  ++v56;
  if (v67) {
    goto LABEL_94;
  }
  Swift::UInt8 v56 = v66 + 1;
  if (v66 + 1 >= v61) {
    goto LABEL_95;
  }
  uint64_t v67 = *(void *)(v57 + 8 * v56);
  if (v67) {
    goto LABEL_94;
  }
  Swift::UInt8 v56 = v66 + 2;
  if (v66 + 2 >= v61) {
    goto LABEL_95;
  }
  uint64_t v67 = *(void *)(v57 + 8 * v56);
  if (v67)
  {
LABEL_94:
    uint64_t v60 = (v67 - 1) & v67;
    Swift::UInt v63 = __clz(__rbit64(v67)) + (v56 << 6);
    goto LABEL_79;
  }
  unint64_t v68 = v66 + 3;
  if (v68 < v61)
  {
    uint64_t v67 = *(void *)(v57 + 8 * v68);
    if (!v67)
    {
      while (1)
      {
        Swift::UInt8 v56 = v68 + 1;
        if (__OFADD__(v68, 1)) {
          break;
        }
        if (v56 >= v61) {
          goto LABEL_95;
        }
        uint64_t v67 = *(void *)(v57 + 8 * v56);
        ++v68;
        if (v67) {
          goto LABEL_94;
        }
      }
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    Swift::UInt8 v56 = v68;
    goto LABEL_94;
  }
LABEL_95:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v55);
  swift_bridgeObjectRelease();
  Swift::UInt64 v53 = v147;
  if (!v147) {
    goto LABEL_68;
  }
LABEL_96:
  Hasher._combine(_:)(1u);
  int64_t v69 = 0;
  unint64_t v70 = 0;
  unint64_t v71 = v53 + 64;
  Swift::UInt v72 = 1 << *(unsigned char *)(v53 + 32);
  if (v72 < 64) {
    Swift::UInt v73 = ~(-1 << v72);
  }
  else {
    Swift::UInt v73 = -1;
  }
  int64_t v74 = v73 & *(void *)(v53 + 64);
  unint64_t v75 = (unint64_t)(v72 + 63) >> 6;
  while (2)
  {
    if (v74)
    {
      int64_t v76 = __clz(__rbit64(v74));
      v74 &= v74 - 1;
      Swift::UInt v77 = v76 | (v70 << 6);
LABEL_101:
      int64_t v78 = *(unsigned __int8 *)(*(void *)(v53 + 48) + v77);
      uint64_t v79 = *(void *)(*(void *)(v53 + 56) + 8 * v77);
      unint64_t v137 = v162;
      unint64_t v138 = v163;
      unint64_t v139 = v164;
      uint64_t v140 = v165;
      uint64_t v141 = v166;
      Hasher._combine(_:)(v78);
      Hasher._combine(_:)(v79);
      v69 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  uint64_t v80 = v70 + 1;
  if (__OFADD__(v70, 1)) {
    goto LABEL_166;
  }
  if (v80 >= v75)
  {
LABEL_117:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v69);
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }
  uint64_t v81 = *(void *)(v71 + 8 * v80);
  ++v70;
  if (v81) {
    goto LABEL_116;
  }
  unint64_t v70 = v80 + 1;
  if (v80 + 1 >= v75) {
    goto LABEL_117;
  }
  uint64_t v81 = *(void *)(v71 + 8 * v70);
  if (v81) {
    goto LABEL_116;
  }
  unint64_t v70 = v80 + 2;
  if (v80 + 2 >= v75) {
    goto LABEL_117;
  }
  uint64_t v81 = *(void *)(v71 + 8 * v70);
  if (v81)
  {
LABEL_116:
    int64_t v74 = (v81 - 1) & v81;
    Swift::UInt v77 = __clz(__rbit64(v81)) + (v70 << 6);
    goto LABEL_101;
  }
  unint64_t v82 = v80 + 3;
  if (v82 >= v75) {
    goto LABEL_117;
  }
  uint64_t v81 = *(void *)(v71 + 8 * v82);
  if (v81)
  {
    unint64_t v70 = v82;
    goto LABEL_116;
  }
  while (1)
  {
    unint64_t v70 = v82 + 1;
    if (__OFADD__(v82, 1)) {
      break;
    }
    if (v70 >= v75) {
      goto LABEL_117;
    }
    uint64_t v81 = *(void *)(v71 + 8 * v70);
    ++v82;
    if (v81) {
      goto LABEL_116;
    }
  }
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
}

uint64_t outlined init with take of ICUPercentNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *closure #1 in static ICUPercentNumberFormatter._create(with:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0x746E6563726570;
  uint64_t v18 = 0x746E6563726570;
  unint64_t v19 = 0xE700000000000000;
  uint64_t v5 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
  long long v7 = v6;
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = 0xE700000000000000;
  }
  else
  {
    v17[0] = 32;
    v17[1] = 0xE100000000000000;
    v8._uint64_t countAndFlagsBits = v5;
    v8._unint64_t object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 32;
    v9._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v4 = v18;
    unint64_t v10 = v19;
  }
  uint64_t v11 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  uint64_t v12 = (uint64_t *)(a1 + *(int *)(v11 + 20));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  outlined init with take of LocalePreferences?(a1 + *(int *)(v11 + 24), (uint64_t)v17, &demangling cache variable for type metadata for LocalePreferences?);
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v16, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t result = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v4, v10, v13, v14, (uint64_t)v16);
  *a2 = result;
  return result;
}

void *ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  outlined init with take of LocalePreferences?(a5, (uint64_t)v11, &demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  v5[3] = a1;
  v5[4] = a2;
  swift_bridgeObjectRetain();
  Swift::String v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v8[2] >> 31) {
    __break(1u);
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v9 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  if (v9)
  {
    v5[2] = v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

id Int64.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_longLongValue);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  long long v5 = *v3;
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v5, a3);
}

BOOL static SortOrder.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return (NSNumber)objc_msgSend(v2, sel_initWithInteger_, integerLiteral);
}

void *_NSFaultInObject(atomic_ullong *a1, void *a2, uint64_t a3)
{
  uint64_t result = (void *)*a1;
  if (result == a2)
  {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
    uint64_t v6 = a2;
    atomic_compare_exchange_strong(a1, (unint64_t *)&v6, (unint64_t)result);
    if (v6 != a2 && result != (void *)*a1)
    {

      return (void *)*a1;
    }
  }
  return result;
}

NSLock *___loadDataDetectorsCore_block_invoke()
{
  return objc_alloc_init(NSLock);
}

void protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance JSONDecoderImpl.UnkeyedContainer(ValueMetadata *a1, uint64_t a2)
{
}

void JSONDecoderImpl.UnkeyedContainer.decode<A>(_:)(ValueMetadata *a1, uint64_t a2)
{
  long long v5 = a1;
  unint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 40);
  if (v7 < 0xFE)
  {
    uint64_t v20 = *(void *)(v2 + 32);
  }
  else
  {
    uint64_t v25 = a1;
    unint64_t v8 = *(void *)(v2 + 8);
    uint64_t v9 = JSONMap.loadValue(at:)(v8);
    if (v11 > 0xFDu)
    {
      if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == a2) {
        swift_bridgeObjectRelease();
      }
      uint64_t v12 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + 72));
      uint64_t v13 = *(void *)(v2 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v15 = v12[2];
      unint64_t v14 = v12[3];
      if (v15 >= v14 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v12);
      }
      uint64_t v23 = &type metadata for _CodingKey;
      unint64_t v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v16 = swift_allocObject();
      *(void *)&long long v22 = v16;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 16) = v13;
      *(unsigned char *)(v16 + 40) = 2;
      v12[2] = v15 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v22, (uint64_t)&v12[5 * v15 + 4]);
      uint64_t v17 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *unint64_t v19 = v25;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
      swift_willThrow();
      return;
    }
    unint64_t v6 = v9;
    uint64_t v20 = v10;
    uint64_t v7 = v11;
    *(void *)(v2 + 8) = JSONMap.offset(after:)(v8);
    *(void *)(v2 + 24) = v6;
    *(void *)(v2 + 32) = v20;
    *(unsigned char *)(v2 + 40) = v7;
    long long v5 = v25;
  }
  uint64_t v21 = *(void *)(v2 + 64);
  specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v6, v20, v7, v5, *(void *)(v2 + 72), v21, 0, 0, 2, a2);
  if (!v3)
  {
    if (__OFADD__(v21, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v2 + 64) = v21 + 1;
      *(void *)(v2 + 24) = 0;
      *(void *)(v2 + 32) = 0;
      *(unsigned char *)(v2 + 40) = -2;
    }
  }
}

void sub_1818EA520(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_1818EA8E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_1818EB6D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_1818EB870(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void *keysChangedForFractionCompletedValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8 < 0)
  {
    BOOL v10 = 1;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    BOOL v10 = (v9 | v8) == 0;
    if (v9 < 0) {
      BOOL v10 = 1;
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if ((a3 | a2) < 0)
  {
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (((a3 | a2) == 0) != v10) {
LABEL_8:
  }
    [v6 addObject:@"indeterminate"];
LABEL_9:
  long long v24 = *(_OWORD *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 24);
  if (v12 != a3 && v12 >= 1)
  {
    uint64_t v22 = a3;
    uint64_t v23 = 0;
    uint64_t v21 = v12;
    _NSProgressFractionMultiplyByFraction((uint64_t *)&v24, &v21);
  }
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = v11;
  _NSProgressFractionAddFraction((uint64_t)&v21, (uint64_t *)&v24);
  objc_msgSend((id)a1, "overallFraction", 0, 0, 0);
  if ((_NSProgressFractionIsFractionCompletedEqual(&v21, &v20) & 1) == 0) {
    [v7 addObject:@"fractionCompleted"];
  }
  if (*(void *)(a1 + 24) != a3) {
    [v7 addObject:@"totalUnitCount"];
  }
  uint64_t v13 = a2;
  if (*(void *)(a1 + 16) != a2)
  {
    [v7 addObject:@"completedUnitCount"];
    uint64_t v13 = *(void *)(a1 + 16);
  }
  uint64_t v14 = *(void *)(a1 + 24);
  if (v13 < 1 || v13 < v14 || v14 <= 0)
  {
    int v15 = v13 > 0 && v14 == 0;
    if (a2 < 1 || a2 < a3 || a3 <= 0)
    {
      int v19 = a2 > 0 && a3 == 0;
      if (v19 != v15) {
        goto LABEL_37;
      }
      return v7;
    }
  }
  else
  {
    LOBYTE(v15) = a2 >= a3;
    if (a3 <= 0) {
      LOBYTE(v15) = 0;
    }
    if (!a3) {
      LOBYTE(v15) = 1;
    }
    if (a2 < 1) {
      goto LABEL_37;
    }
  }
  if ((v15 & 1) == 0) {
LABEL_37:
  }
    [v7 addObject:@"finished"];
  return v7;
}

uint64_t _NSProgressFractionAddFraction(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      uint64_t v4 = a2[1];
      uint64_t v5 = *(void *)(result + 8);
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = v4;
        uint64_t v4 = v6 % v4;
      }
      while (v4);
      uint64_t v7 = v3 / v5;
      uint64_t v8 = v7 * v2;
      if ((unsigned __int128)(v7 * (__int128)v2) >> 64 == (v7 * v2) >> 63)
      {
        uint64_t v13 = *(void *)result;
        uint64_t v20 = v8 / v3 * *(void *)result;
        uint64_t v14 = *a2;
        uint64_t v21 = v8 / v2 * *a2;
        BOOL v22 = __OFADD__(v20, v21);
        uint64_t v23 = v20 + v21;
      }
      else
      {
        uint64_t v9 = *(void *)result;
        uint64_t v10 = *(void *)(result + 8);
        uint64_t v11 = *(void *)result;
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = v10;
          uint64_t v10 = v12 % v10;
        }
        while (v10);
        uint64_t v13 = v9 / v11;
        v3 /= v11;
        *(void *)uint64_t result = v9 / v11;
        *(void *)(result + 8) = v3;
        uint64_t v14 = *a2;
        uint64_t v2 = a2[1];
        if (v2)
        {
          uint64_t v15 = a2[1];
          uint64_t v16 = *a2;
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = v15;
            uint64_t v15 = v17 % v15;
          }
          while (v15);
          uint64_t v18 = v14 / v16;
          uint64_t v19 = v2 / v16;
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v18 = *a2;
        }
        uint64_t v24 = v19;
        uint64_t v25 = v3;
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = v24;
          uint64_t v24 = v26 % v24;
        }
        while (v24);
        uint64_t v27 = v3 / v25;
        uint64_t v8 = v3 / v25 * v19;
        if ((unsigned __int128)(v27 * (__int128)v19) >> 64 != v8 >> 63) {
          goto LABEL_22;
        }
        uint64_t v28 = v8 / v3 * v13;
        uint64_t v29 = v8 / v19 * v18;
        BOOL v22 = __OFADD__(v28, v29);
        uint64_t v23 = v28 + v29;
      }
      char v30 = v22;
      if ((v30 & 1) == 0)
      {
        *(void *)uint64_t result = v23;
LABEL_39:
        *(void *)(result + 8) = v8;
        return result;
      }
LABEL_22:
      *(unsigned char *)(result + 16) = 1;
      double v31 = 0.0;
      double v32 = 0.0;
      if ((v13 & 0x8000000000000000) == 0 && (v3 & 0x8000000000000000) == 0 && v13 | v3)
      {
        if (!v3)
        {
          double v32 = 1.0;
          if ((v14 & 0x8000000000000000) == 0) {
            goto LABEL_28;
          }
          goto LABEL_36;
        }
        double v32 = (double)v13 / (double)v3;
      }
      if ((v14 & 0x8000000000000000) == 0)
      {
LABEL_28:
        if ((v2 & 0x8000000000000000) == 0 && v14 | v2)
        {
          if (v2) {
            double v31 = (double)v14 / (double)v2;
          }
          else {
            double v31 = 1.0;
          }
        }
      }
LABEL_36:
      int64_t v33 = vcvtd_n_s64_f64(v32 + v31, 0x20uLL);
      uint64_t v34 = 0x100000000;
      uint64_t v35 = v33;
      do
      {
        uint64_t v36 = v35;
        uint64_t v35 = v34;
        uint64_t v34 = v36 % v34;
      }
      while (v34);
      *(void *)uint64_t result = v33 / v35;
      uint64_t v8 = 0x100000000 / v35;
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t _NSProgressFractionIsFractionCompletedEqual(uint64_t *a1, uint64_t *a2)
{
  if (_NSProgressFractionIsEqual(a1, a2)) {
    return 1;
  }
  uint64_t v5 = *a1;
  if (*a1) {
    LODWORD(v5) = v5 >= 0 && a1[1] > 0;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    LODWORD(v7) = v7 >= 0 && a2[1] > 0;
  }
  return (v5 | v7) ^ 1;
}

uint64_t _NSProgressFractionIsEqual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t result = *a1 == *a2;
  if (v2 == v3) {
    return result;
  }
  if (!(v5 | v4) || v4 == v2 && v5 == v3) {
    return 1;
  }
  if (v4)
  {
    if (v5) {
      goto LABEL_10;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_10:
  if ((unsigned __int128)(v5 * (__int128)v2) >> 64 != (v5 * v2) >> 63)
  {
    uint64_t v7 = a2[1];
    uint64_t v8 = *a2;
    goto LABEL_15;
  }
  uint64_t v7 = a2[1];
  uint64_t v8 = *a2;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    do
    {
LABEL_15:
      uint64_t v9 = v8;
      uint64_t v8 = v7;
      uint64_t v7 = v9 % v7;
    }
    while (v7);
    uint64_t v10 = v2;
    uint64_t v11 = v4;
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = v10;
      uint64_t v10 = v12 % v10;
    }
    while (v10);
    uint64_t v13 = v5 / v8 * (v2 / v11);
    if ((unsigned __int128)(v5 / v8 * (__int128)(v2 / v11)) >> 64 == v13 >> 63
      && (uint64_t v14 = v3 / v8, v15 = v4 / v11,
                         uint64_t v16 = v3 / v8 * v15,
                         (unsigned __int128)(v14 * (__int128)v15) >> 64 == v16 >> 63))
    {
      return v13 == v16;
    }
    else
    {
      double v17 = 0.0;
      double v18 = 0.0;
      if (((v4 | v2) & 0x8000000000000000) == 0) {
        double v18 = (double)v4 / (double)v2;
      }
      if (((v5 | v3) & 0x8000000000000000) == 0) {
        double v17 = (double)v5 / (double)v3;
      }
      return v18 == v17;
    }
  }
  return v5 * v2 == v3 * v4;
}

uint64_t *_NSProgressFractionMultiplyByFraction(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  uint64_t v5 = *result * *a2;
  if ((unsigned __int128)(*result * (__int128)*a2) >> 64 == v5 >> 63)
  {
    uint64_t v6 = a2[1];
    uint64_t v7 = v4 * v6;
    if ((unsigned __int128)(v4 * (__int128)v6) >> 64 == (v4 * v6) >> 63) {
      goto LABEL_35;
    }
  }
  if (v4)
  {
    uint64_t v8 = result[1];
    uint64_t v9 = *result;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    v3 /= v9;
    uint64_t v11 = v4 / v9;
    *uint64_t result = v3;
    result[1] = v4 / v9;
    uint64_t v2 = *a2;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a2[1];
  if (v12)
  {
    uint64_t v13 = a2[1];
    uint64_t v14 = v2;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = v13;
      uint64_t v13 = v15 % v13;
    }
    while (v13);
    uint64_t v16 = v2 / v14;
    uint64_t v17 = v12 / v14;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = v2;
  }
  uint64_t v5 = v3 * v16;
  if ((unsigned __int128)(v3 * (__int128)v16) >> 64 == (v3 * v16) >> 63)
  {
    uint64_t v7 = v11 * v17;
    if ((unsigned __int128)(v11 * (__int128)v17) >> 64 == (v11 * v17) >> 63)
    {
LABEL_35:
      *uint64_t result = v5;
      goto LABEL_36;
    }
  }
  *((unsigned char *)result + 16) = 1;
  double v18 = 0.0;
  double v19 = 0.0;
  if ((v3 & 0x8000000000000000) == 0 && (v11 & 0x8000000000000000) == 0 && v3 | v11)
  {
    if (!v11)
    {
      double v19 = 1.0;
      if ((v2 & 0x8000000000000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_32;
    }
    double v19 = (double)v3 / (double)v11;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_21:
    BOOL v20 = v12 < 0 || (v12 | v2) == 0;
    char v21 = v20;
    double v18 = 1.0;
    if (v20) {
      double v18 = 0.0;
    }
    if (v12 && (v21 & 1) == 0) {
      double v18 = (double)v2 / (double)v12;
    }
  }
LABEL_32:
  int64_t v22 = vcvtd_n_s64_f64(v19 * v18, 0x20uLL);
  uint64_t v23 = 0x100000000;
  uint64_t v24 = v22;
  do
  {
    uint64_t v25 = v24;
    uint64_t v24 = v23;
    uint64_t v23 = v25 % v23;
  }
  while (v23);
  *uint64_t result = v22 / v24;
  uint64_t v7 = 0x100000000 / v24;
LABEL_36:
  result[1] = v7;
  return result;
}

void sub_1818EC3D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t _NSProgressFractionSubtractFraction(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      uint64_t v4 = a2[1];
      uint64_t v5 = *(void *)(result + 8);
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = v4;
        uint64_t v4 = v6 % v4;
      }
      while (v4);
      uint64_t v7 = v3 / v5;
      uint64_t v8 = v7 * v2;
      if ((unsigned __int128)(v7 * (__int128)v2) >> 64 == (v7 * v2) >> 63)
      {
        uint64_t v13 = *(void *)result;
        uint64_t v20 = v8 / v3 * *(void *)result;
        uint64_t v14 = *a2;
        uint64_t v21 = v8 / v2 * *a2;
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v23 = v20 - v21;
      }
      else
      {
        uint64_t v9 = *(void *)result;
        uint64_t v10 = *(void *)(result + 8);
        uint64_t v11 = *(void *)result;
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = v10;
          uint64_t v10 = v12 % v10;
        }
        while (v10);
        uint64_t v13 = v9 / v11;
        v3 /= v11;
        *(void *)uint64_t result = v9 / v11;
        *(void *)(result + 8) = v3;
        uint64_t v14 = *a2;
        uint64_t v2 = a2[1];
        if (v2)
        {
          uint64_t v15 = a2[1];
          uint64_t v16 = *a2;
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = v15;
            uint64_t v15 = v17 % v15;
          }
          while (v15);
          uint64_t v18 = v14 / v16;
          uint64_t v19 = v2 / v16;
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v18 = *a2;
        }
        uint64_t v24 = v19;
        uint64_t v25 = v3;
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = v24;
          uint64_t v24 = v26 % v24;
        }
        while (v24);
        uint64_t v27 = v3 / v25;
        uint64_t v8 = v3 / v25 * v19;
        if ((unsigned __int128)(v27 * (__int128)v19) >> 64 != v8 >> 63) {
          goto LABEL_22;
        }
        uint64_t v28 = v8 / v3 * v13;
        uint64_t v29 = v8 / v19 * v18;
        BOOL v22 = __OFSUB__(v28, v29);
        uint64_t v23 = v28 - v29;
      }
      char v30 = v22;
      if ((v30 & 1) == 0)
      {
        *(void *)uint64_t result = v23;
LABEL_39:
        *(void *)(result + 8) = v8;
        return result;
      }
LABEL_22:
      *(unsigned char *)(result + 16) = 1;
      double v31 = 0.0;
      double v32 = 0.0;
      if ((v13 & 0x8000000000000000) == 0 && (v3 & 0x8000000000000000) == 0 && v13 | v3)
      {
        if (!v3)
        {
          double v32 = 1.0;
          if ((v14 & 0x8000000000000000) == 0) {
            goto LABEL_28;
          }
          goto LABEL_36;
        }
        double v32 = (double)v13 / (double)v3;
      }
      if ((v14 & 0x8000000000000000) == 0)
      {
LABEL_28:
        if ((v2 & 0x8000000000000000) == 0 && v14 | v2)
        {
          if (v2) {
            double v31 = (double)v14 / (double)v2;
          }
          else {
            double v31 = 1.0;
          }
        }
      }
LABEL_36:
      int64_t v33 = vcvtd_n_s64_f64(v32 - v31, 0x20uLL);
      uint64_t v34 = 0x100000000;
      uint64_t v35 = v33;
      do
      {
        uint64_t v36 = v35;
        uint64_t v35 = v34;
        uint64_t v34 = v36 % v34;
      }
      while (v34);
      *(void *)uint64_t result = v33 / v35;
      uint64_t v8 = 0x100000000 / v35;
      goto LABEL_39;
    }
  }
  return result;
}

void *NSFileHandle.readToEnd()()
{
  v13[1] = *(id *)MEMORY[0x1E4F143B8];
  v13[0] = 0;
  id v1 = objc_msgSend(v0, sel_readDataToEndOfFileAndReturnError_, v13);
  uint64_t v2 = v13[0];
  if (v1)
  {
    id v3 = v1;
    uint64_t v4 = v2;
    uint64_t v2 = specialized Data.init(referencing:)(v3);
    unint64_t v6 = v5;

    switch(v6 >> 62)
    {
      case 1uLL:
        LODWORD(v7) = HIDWORD(v2) - v2;
        if (!__OFSUB__(HIDWORD(v2), v2))
        {
          uint64_t v7 = (int)v7;
          goto LABEL_9;
        }
        __break(1u);
        goto LABEL_16;
      case 2uLL:
        uint64_t v9 = v2[2];
        uint64_t v8 = v2[3];
        BOOL v10 = __OFSUB__(v8, v9);
        uint64_t v7 = v8 - v9;
        if (!v10) {
          goto LABEL_9;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v7 = BYTE6(v6);
LABEL_9:
        if (v7 <= 0)
        {
LABEL_10:
          outlined consume of Data._Representation((uint64_t)v2, v6);
          return 0;
        }
        return v2;
    }
  }
  if (v13[0])
  {
    v13[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
LABEL_17:
    }
      swift_once();
    id v11 = (id)_nilObjCError;
  }
  swift_willThrow();
  return v2;
}

uint64_t _NSWriteToFileDescriptorWithProgress(int a1, char *a2, unint64_t a3, int a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a4 && +[NSProgress currentProgress])
  {
    uint64_t v7 = +[NSProgress progressWithTotalUnitCount:a3];
    if (v7)
    {
      uint64_t v8 = _NSPreferredChunkSizeForFileDescriptor(a1);
      if (v8 == -1) {
        unint64_t v9 = a3;
      }
      else {
        unint64_t v9 = v8;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v9 = a3;
LABEL_9:
  unint64_t v10 = a3;
LABEL_10:
  if (!v10) {
    return a3 - v10;
  }
  if (![(NSProgress *)v7 isCancelled])
  {
    if (v9 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11 >= 0x7FFFFFFF) {
      size_t v12 = 0x7FFFFFFFLL;
    }
    else {
      size_t v12 = v11;
    }
    while (![(NSProgress *)v7 isCancelled])
    {
      ssize_t v13 = write(a1, a2, v12);
      if ((v13 & 0x8000000000000000) == 0)
      {
        unint64_t v14 = v13;
        if (v13)
        {
          v10 -= v13;
          [(NSProgress *)v7 setCompletedUnitCount:a3 - v10];
          a2 += v14;
          if (v14 >= v12) {
            goto LABEL_10;
          }
        }
        return a3 - v10;
      }
      if (*__error() != 4)
      {
        int v16 = *__error();
        if (qword_1EB1ED5B8 != -1) {
          dispatch_once(&qword_1EB1ED5B8, &__block_literal_global_34);
        }
        uint64_t v17 = _MergedGlobals_111;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
        {
          int v18 = *__error();
          uint64_t v19 = __error();
          uint64_t v20 = strerror(*v19);
          v21[0] = 67109378;
          v21[1] = v18;
          __int16 v22 = 2080;
          uint64_t v23 = v20;
          _os_log_error_impl(&dword_181795000, v17, OS_LOG_TYPE_ERROR, "Encountered write failure %d %s", (uint8_t *)v21, 0x12u);
        }
        *__error() = v16;
        return -1;
      }
    }
  }
  *__error() = 89;
  return -1;
}

uint64_t _NSReadFromFileDescriptorWithProgress(int a1, char *a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a5 && +[NSProgress currentProgress])
  {
    unint64_t v9 = +[NSProgress progressWithTotalUnitCount:a3];
    if (v9)
    {
      if (a4)
      {
        unint64_t v10 = *(unsigned int *)(a4 + 8);
      }
      else
      {
        uint64_t v18 = _NSPreferredChunkSizeForFileDescriptor(a1);
        if (v18 == -1) {
          unint64_t v10 = a3;
        }
        else {
          unint64_t v10 = v18;
        }
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = a3;
LABEL_8:
  unint64_t v11 = a3;
LABEL_9:
  if (!v11) {
    return a3 - v11;
  }
  if (![(NSProgress *)v9 isCancelled])
  {
    if (v10 >= v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >= 0x7FFFFFFF) {
      size_t v13 = 0x7FFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    while (![(NSProgress *)v9 isCancelled])
    {
      ssize_t v14 = read(a1, a2, v13);
      if ((v14 & 0x8000000000000000) == 0)
      {
        unint64_t v15 = v14;
        if (v14)
        {
          v11 -= v14;
          [(NSProgress *)v9 setCompletedUnitCount:a3 - v11];
          a2 += v15;
          if (v15 >= v13) {
            goto LABEL_9;
          }
        }
        return a3 - v11;
      }
      if (*__error() != 4)
      {
        if (qword_1EB1ED5B8 != -1) {
          dispatch_once(&qword_1EB1ED5B8, &__block_literal_global_34);
        }
        uint64_t v17 = _MergedGlobals_111;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
        {
          int v19 = *__error();
          uint64_t v20 = __error();
          uint64_t v21 = strerror(*v20);
          v22[0] = 67109378;
          v22[1] = v19;
          __int16 v23 = 2080;
          uint64_t v24 = v21;
          _os_log_error_impl(&dword_181795000, v17, OS_LOG_TYPE_ERROR, "Encountered read failure %d %s", (uint8_t *)v22, 0x12u);
        }
        return -1;
      }
    }
  }
  return -1;
}

void @objc _NSSwiftCalendar.getEra(_:year:month:day:from:)(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, id a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))
{
  objc_msgSend(a7, sel_timeIntervalSinceReferenceDate);
  uint64_t v16 = v14;
  id v15 = a1;
  a8(a3, a4, a5, a6, &v16);
}

uint64_t _NSSwiftCalendar.getHour(_:minute:second:nanosecond:from:)(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  unint64_t v11 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  unint64_t v12 = v11 + 4;
  size_t v13 = v11 + 8;
  os_unfair_lock_lock(v11 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v12, &v36);
  os_unfair_lock_unlock(v13);
  long long v35 = v36;
  uint64_t v14 = unk_1ECA39D30;
  if ((unk_1ECA39D30 & ~qword_1ECA39D28) == 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 | qword_1ECA39D28;
  uint64_t v17 = qword_1ECA39D38;
  uint64_t v16 = unk_1ECA39D40;
  if ((qword_1ECA39D38 & ~v15) == 0) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v17 | v15;
  if ((unk_1ECA39D40 & ~v18) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v25 = v16 | v18;
  uint64_t v24 = v10;
  Calendar._dateComponents(_:from:)(&v25, (double *)&v24, v26);
  swift_unknownObjectRelease();
  if (a1)
  {
    uint64_t v19 = v27;
    if (v28) {
      uint64_t v19 = 0;
    }
    *a1 = v19;
  }
  if (a2)
  {
    uint64_t v20 = v29;
    if (v30) {
      uint64_t v20 = 0;
    }
    *a2 = v20;
  }
  if (a3)
  {
    uint64_t v21 = v31;
    if (v32) {
      uint64_t v21 = 0;
    }
    *a3 = v21;
  }
  if (a4)
  {
    uint64_t v22 = v33;
    if (v34) {
      uint64_t v22 = 0;
    }
    *a4 = v22;
  }
  return outlined release of DateComponents((uint64_t)v26);
}

uint64_t PredicateExpressions.Equal.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

ValueMetadata *type metadata accessor for PersonNameComponents()
{
  return &type metadata for PersonNameComponents;
}

uint64_t storeEnumTagSinglePayload for NSNotificationCenter.Notifications.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void ___setupListenerConnection_block_invoke(uint64_t a1, id a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a2);
  if (Class == (Class)MEMORY[0x1E4F14578])
  {
    uint64_t v7 = *(void **)(a1 + 32);
    service_connection_handler_make_connection(v7, (_xpc_connection_s *)a2);
  }
  else if (Class != (Class)MEMORY[0x1E4F145A8])
  {
    uint64_t v5 = (void *)MEMORY[0x18530A880](a2);
    unint64_t v6 = _NSXPCLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      unint64_t v9 = v5;
      _os_log_fault_impl(&dword_181795000, v6, OS_LOG_TYPE_FAULT, "NSXPCListener: received error or other non-connection type in handler for listener: %{public}s", (uint8_t *)&v8, 0xCu);
    }
    free(v5);
  }
}

void static MeasurementFormatUnitUsage<>.rainfall.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistKeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

Swift::Void __swiftcall IndexSet.removeAll()()
{
  if (*(unsigned char *)(*(void *)v0 + 24) != 1)
  {
    uint64_t v2 = *(void **)(*(void *)v0 + 16);
LABEL_8:
    id v3 = v2;
    objc_msgSend(v3, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v6;
    *(unsigned char *)(v4 + 24) = 1;
    *(void *)uint64_t v0 = v4;
    id v5 = v6;
    swift_release();
    objc_msgSend(v5, sel_removeAllIndexes);

    return;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(void **)(*(void *)v0 + 16);
  if ((*(unsigned char *)(*(void *)v0 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_8;
  }

  objc_msgSend(v2, sel_removeAllIndexes);
}

uint64_t PropertyListDecoder.init()()
{
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(uint64_t a1, unint64_t a2, void (*a3)(char *), uint64_t a4)
{
  unint64_t v6 = v4;
  v19[133] = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager()) {
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unsigned __int8 v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v19, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if (v13) {
      uint64_t v14 = (char *)v19;
    }
    else {
      uint64_t v14 = 0;
    }
    a3(v14);
    if (v5) {
      return swift_willThrow();
    }
    else {
      return v19[131];
    }
  }
  else
  {
    uint64_t v16 = swift_slowAlloc();
    unsigned __int8 v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if (v17) {
      uint64_t v18 = (char *)v16;
    }
    else {
      uint64_t v18 = 0;
    }
    a3(v18);
    if (v5)
    {
      return MEMORY[0x185309510](v16, -1, -1);
    }
    else
    {
      MEMORY[0x185309510](v16, -1, -1);
      return v19[132];
    }
  }
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  uint64_t isStackAllocationSafe;
  unsigned __int8 v13;
  char *v14;
  uint64_t v16;
  unsigned __int8 v17;
  char *v18;
  void v19[136];

  unint64_t v6 = v4;
  v19[135] = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager()) {
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unsigned __int8 v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v19, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if (v13) {
      uint64_t v14 = (char *)v19;
    }
    else {
      uint64_t v14 = 0;
    }
    a3(v14);
    if (v5) {
      return swift_willThrow();
    }
    else {
      return v19[131];
    }
  }
  else
  {
    uint64_t v16 = swift_slowAlloc();
    unsigned __int8 v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if (v17) {
      uint64_t v18 = (char *)v16;
    }
    else {
      uint64_t v18 = 0;
    }
    a3(v18);
    if (v5)
    {
      return MEMORY[0x185309510](v16, -1, -1);
    }
    else
    {
      MEMORY[0x185309510](v16, -1, -1);
      return v19[133];
    }
  }
}

void *specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, void *))
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  swift_retain();
  uint64_t started = sysdir_start_search_path_enumeration_private();
  uint64_t v5 = 0;
  unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v7 = MEMORY[0x1E4FBC860] + 32;
  uint64_t v37 = 32;
  while (1)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (!isStackAllocationSafe) {
      break;
    }
    double v9 = MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v10 = MEMORY[0x185309710](started, v36, v9);
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t started = v10;
    id v11 = objc_msgSend(self, sel_defaultManager);
    id v12 = objc_msgSend(v11, sel_stringWithFileSystemRepresentation_length_, v36, strlen(v36));

    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

LABEL_7:
    v39[0] = v13;
    v39[1] = v15;
    a3(&v40, v39);
    swift_bridgeObjectRelease();
    uint64_t v21 = v40;
    long long v22 = v41;
    if (!v5)
    {
      unint64_t v23 = v6[3];
      if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_27;
      }
      long long v38 = v41;
      int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v24;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v26 = (void *)swift_allocObject();
      uint64_t v27 = (uint64_t)(_swift_stdlib_malloc_size(v26) - 32) / 24;
      v26[2] = v25;
      v26[3] = 2 * v27;
      unint64_t v28 = (unint64_t)(v26 + 4);
      uint64_t v29 = v6[3] >> 1;
      if (v6[2])
      {
        char v30 = v6 + 4;
        if (v26 != v6 || v28 >= (unint64_t)v30 + 24 * v29) {
          memmove(v26 + 4, v30, 24 * v29);
        }
        v6[2] = 0;
      }
      uint64_t v7 = v28 + 24 * v29;
      uint64_t v5 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
      swift_release();
      unint64_t v6 = v26;
      long long v22 = v38;
    }
    BOOL v31 = __OFSUB__(v5--, 1);
    if (v31)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
    }
    *(void *)uint64_t v7 = v21;
    *(_OWORD *)(v7 + 8) = v22;
    v7 += 24;
  }
  uint64_t v16 = (const char *)swift_slowAlloc();
  uint64_t v17 = MEMORY[0x185309710](started, v16);
  if (v17)
  {
    uint64_t started = v17;
    id v18 = objc_msgSend(self, sel_defaultManager);
    id v19 = objc_msgSend(v18, sel_stringWithFileSystemRepresentation_length_, v16, strlen(v16));

    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v15 = v20;

    MEMORY[0x185309510](v16, -1, -1);
    goto LABEL_7;
  }
  MEMORY[0x185309510](v16, -1, -1);
LABEL_22:
  swift_release();
  unint64_t v32 = v6[3];
  if (v32 >= 2)
  {
    unint64_t v33 = v32 >> 1;
    BOOL v31 = __OFSUB__(v33, v5);
    uint64_t v34 = v33 - v5;
    if (v31) {
      goto LABEL_28;
    }
    v6[2] = v34;
  }
  return v6;
}

id _FileManagerImpl.createDirectory(at:withIntermediateDirectories:attributes:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = v3;
  LODWORD(v6) = a2;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  int v8 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  swift_retain();
  id v10 = v8;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v120 = a3;
    unsigned __int8 v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if (v13) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  v124._uint64_t countAndFlagsBits = (uint64_t)v10;
  v124._unint64_t object = v7;
  uint64_t v125 = v9;
  URL.scheme.getter();
  if (!v11)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }
  uint64_t v120 = a3;
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
LABEL_14:
    id v19 = v10;
    swift_retain_n();
    swift_retain_n();
    id v20 = v19;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v119 = v4;
      uint64_t v125 = v9;
      id v21 = v20;
      swift_retain();
      swift_retain();
      Swift::String v22 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v22._countAndFlagsBits;
      Swift::String v124 = v22;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v22._object;
      }
      else
      {
        unint64_t object = (unint64_t)v22._object;
        if ((specialized BidirectionalCollection.last.getter(v22._countAndFlagsBits, (unint64_t)v22._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v124._countAndFlagsBits;
          unint64_t object = (unint64_t)v124._object;
        }
      }
      v122._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v49 = specialized Set._Variant.insert(_:)(&v123, 0x2FuLL);
      uint64_t v50 = v122._countAndFlagsBits;
      uint64_t v51 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v51 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v51)
      {
        id v121 = v21;
        v122._uint64_t countAndFlagsBits = countAndFlagsBits;
        v122._unint64_t object = (void *)object;
        MEMORY[0x1F4188790](v49);
        uint64_t v114 = (uint64_t)&v122;
        uint64_t v115 = v50;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v113, countAndFlagsBits, object);
        if (v52 == 1)
        {
          unint64_t v54 = (unint64_t)v122._object;
          Swift::Int v53 = v122._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v53, v54, v50);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v21 = v121;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v25 = objc_msgSend(v20, sel__parameterString);
      if (v25)
      {
        uint64_t v26 = v25;
        id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        uint64_t v29 = v28;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v30 = objc_msgSend(v20, sel_path)) != 0)
        {
          BOOL v31 = v30;
          id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          uint64_t v34 = v33;

          v124._uint64_t countAndFlagsBits = (uint64_t)v32;
          v124._unint64_t object = v34;
          swift_bridgeObjectRetain();
          v35._uint64_t countAndFlagsBits = 59;
          v35._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = (uint64_t)v27;
          v36._unint64_t object = v29;
          String.append(_:)(v36);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v124._uint64_t countAndFlagsBits = 59;
          v124._unint64_t object = (void *)0xE100000000000000;
          v65._uint64_t countAndFlagsBits = (uint64_t)v27;
          v65._unint64_t object = v29;
          String.append(_:)(v65);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v66 = objc_msgSend(v20, sel_path);
        if (v66)
        {
          uint64_t v67 = v66;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    int64_t v74 = self;
    uint64_t v75 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v76 = objc_msgSend(v74, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 518, v75, v20, 0, 0, 0, 0);
    goto LABEL_94;
  }
LABEL_10:
  id v15 = v10;
  swift_retain();
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v125 = v9;
    id v116 = v15;
    swift_retain();
    swift_retain();
    Swift::String v16 = URL.path(percentEncoded:)(1);
    uint64_t v17 = v16._countAndFlagsBits;
    Swift::String v124 = v16;
    swift_bridgeObjectRetain();
    int v117 = v6;
    id v118 = v15;
    if (String.count.getter() <= 1)
    {
      unint64_t v18 = (unint64_t)v16._object;
    }
    else
    {
      unint64_t v18 = (unint64_t)v16._object;
      if ((specialized BidirectionalCollection.last.getter(v16._countAndFlagsBits, (unint64_t)v16._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v17 = v124._countAndFlagsBits;
        unint64_t v18 = (unint64_t)v124._object;
      }
    }
    v122._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v55 = specialized Set._Variant.insert(_:)(&v123, 0x2FuLL);
    uint64_t v56 = v122._countAndFlagsBits;
    uint64_t v57 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0) {
      uint64_t v57 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v57)
    {
      v122._uint64_t countAndFlagsBits = v17;
      v122._unint64_t object = (void *)v18;
      MEMORY[0x1F4188790](v55);
      uint64_t v114 = (uint64_t)&v122;
      uint64_t v115 = v56;
      swift_bridgeObjectRetain();
      uint64_t v58 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v113, v17, v18);
      uint64_t v119 = v4;
      if (v59 == 1)
      {
        unint64_t v61 = (unint64_t)v122._object;
        Swift::Int v60 = v122._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v62 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v60, v61, v56);
        unint64_t v64 = v63;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v62 = (uint64_t)v58;
        unint64_t v64 = v59;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v15 = v118;
      uint64_t v6 = v119;
      if (!v64)
      {
        swift_release();
        swift_release();
        id v73 = v116;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v62 = 0;
        unint64_t v64 = 0xE000000000000000;
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v6 = v4;
      swift_bridgeObjectRelease();
      uint64_t v62 = 0;
      unint64_t v64 = 0xE000000000000000;
      id v15 = v118;
    }
    swift_release();
    swift_release();
    id v73 = v116;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_56:
    swift_release();
    swift_release();

    uint64_t v69 = v120;
    uint64_t v4 = v6;
    LOBYTE(v6) = v117;
    goto LABEL_57;
  }
  id v37 = objc_msgSend(v15, sel__parameterString);
  if (v37)
  {
    long long v38 = v37;
    id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    long long v41 = v40;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v42 = objc_msgSend(v15, sel_path)) != 0)
    {
      int v43 = v42;
      id v118 = v15;
      id v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      Swift::UInt v46 = v45;

      v124._uint64_t countAndFlagsBits = (uint64_t)v44;
      v124._unint64_t object = v46;
      swift_bridgeObjectRetain();
      v47._uint64_t countAndFlagsBits = 59;
      v47._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v48._uint64_t countAndFlagsBits = (uint64_t)v39;
      v48._unint64_t object = v41;
      String.append(_:)(v48);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      id v15 = v118;
    }
    else
    {
      v124._uint64_t countAndFlagsBits = 59;
      v124._unint64_t object = (void *)0xE100000000000000;
      v68._uint64_t countAndFlagsBits = (uint64_t)v39;
      v68._unint64_t object = v41;
      String.append(_:)(v68);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v62 = v124._countAndFlagsBits;
    unint64_t v64 = (unint64_t)v124._object;
    uint64_t v69 = v120;
  }
  else
  {
    id v70 = objc_msgSend(v15, sel_path);
    if (v70)
    {
      unint64_t v71 = v70;
      uint64_t v62 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      unint64_t v64 = v72;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v62 = 0;
      unint64_t v64 = 0xE000000000000000;
    }
    uint64_t v69 = v120;
  }
LABEL_57:
  uint64_t v77 = HIBYTE(v64) & 0xF;
  if ((v64 & 0x2000000000000000) == 0) {
    uint64_t v77 = v62 & 0xFFFFFFFFFFFFLL;
  }
  if (!v77)
  {
    swift_bridgeObjectRelease();
    id v82 = v15;
    swift_retain_n();
    swift_retain_n();
    id v20 = v82;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v119 = v4;
      v124._uint64_t countAndFlagsBits = (uint64_t)v20;
      v124._unint64_t object = v7;
      uint64_t v125 = v9;
      id v83 = v20;
      swift_retain();
      swift_retain();
      Swift::String v84 = URL.path(percentEncoded:)(1);
      Swift::String v124 = v84;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v84._countAndFlagsBits, (unint64_t)v84._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v122._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v85 = specialized Set._Variant.insert(_:)(&v123, 0x2FuLL);
      uint64_t v86 = v122._countAndFlagsBits;
      uint64_t v87 = v124._countAndFlagsBits;
      int64_t v88 = v124._object;
      unint64_t v89 = ((unint64_t)v124._object >> 56) & 0xF;
      if (((uint64_t)v124._object & 0x2000000000000000) == 0) {
        unint64_t v89 = v124._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v89)
      {
        id v121 = v83;
        Swift::String v122 = v124;
        MEMORY[0x1F4188790](v85);
        uint64_t v114 = (uint64_t)&v122;
        uint64_t v115 = v86;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v113, v87, (unint64_t)v88);
        if (v90 == 1)
        {
          unint64_t v92 = (unint64_t)v122._object;
          Swift::Int v91 = v122._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v91, v92, v86);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v83 = v121;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v95 = objc_msgSend(v20, sel__parameterString);
      if (v95)
      {
        id v96 = v95;
        id v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
        id v99 = v98;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v100 = objc_msgSend(v20, sel_path)) != 0)
        {
          id v101 = v100;
          id v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
          id v104 = v103;

          v124._uint64_t countAndFlagsBits = (uint64_t)v102;
          v124._unint64_t object = v104;
          swift_bridgeObjectRetain();
          v105._uint64_t countAndFlagsBits = 59;
          v105._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v105);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v106._uint64_t countAndFlagsBits = (uint64_t)v97;
          v106._unint64_t object = v99;
          String.append(_:)(v106);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v124._uint64_t countAndFlagsBits = 59;
          v124._unint64_t object = (void *)0xE100000000000000;
          v108._uint64_t countAndFlagsBits = (uint64_t)v97;
          v108._unint64_t object = v99;
          String.append(_:)(v108);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v109 = objc_msgSend(v20, sel_path);
        if (v109)
        {
          uint64_t v110 = v109;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    Swift::UInt v111 = self;
    uint64_t v112 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v76 = objc_msgSend(v111, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v112, v20, 0, 0, 0, 0);
LABEL_94:
    v76;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }
  uint64_t v78 = MEMORY[0x185309640](v121);
  if (v78)
  {
    uint64_t v79 = (void *)v78;
    uint64_t v80 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v69)
    {
      type metadata accessor for NSFileAttributeKey(0);
      lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
      swift_bridgeObjectRetain();
      uint64_t v81 = (void *)_NativeDictionary.bridged()();
    }
    else
    {
      uint64_t v81 = 0;
    }
    v124._uint64_t countAndFlagsBits = 0;
    unsigned int v93 = objc_msgSend(v79, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v80, v6 & 1, v81, &v124);

    swift_unknownObjectRelease();
    if (v93) {
      return (id)v124._countAndFlagsBits;
    }
    if (v124._countAndFlagsBits)
    {
      (id)v124._countAndFlagsBits;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v107 = (id)_nilObjCError;
    }
    return (id)swift_willThrow();
  }
  LODWORD(v115) = 0;
  uint64_t v114 = 48;
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t URL.path.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v39 = v2;
    swift_retain();
    id v3 = v1;
    swift_retain();
    Swift::String v4 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v4._countAndFlagsBits;
    Swift::String v38 = v4;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v4._object;
    }
    else
    {
      unint64_t object = (unint64_t)v4._object;
      if ((specialized BidirectionalCollection.last.getter(v4._countAndFlagsBits, (unint64_t)v4._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v38._countAndFlagsBits;
        unint64_t object = (unint64_t)v38._object;
      }
    }
    uint64_t v35 = Set.init(minimumCapacity:)();
    uint64_t v19 = specialized Set._Variant.insert(_:)(&v37, 0x2FuLL);
    uint64_t v20 = v35;
    uint64_t v21 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v21)
    {
      uint64_t v35 = countAndFlagsBits;
      unint64_t v36 = object;
      MEMORY[0x1F4188790](v19);
      v34[2] = &v35;
      v34[3] = v20;
      swift_bridgeObjectRetain();
      Swift::String v22 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v34, countAndFlagsBits, object);
      if (v23 == 1)
      {
        Swift::Int v24 = v35;
        unint64_t v25 = v36;
        swift_bridgeObjectRetain();
        id v26 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v24, v25, v20);
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v28) {
          goto LABEL_23;
        }
      }
      else
      {
        id v26 = v22;
        uint64_t v32 = v23;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v32)
        {
LABEL_23:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      id v26 = 0;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v7 = objc_msgSend(v1, sel__parameterString);
    if (v7)
    {
      int v8 = v7;
      id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v11 = v10;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v12 = objc_msgSend(v1, sel_path)) != 0)
      {
        unsigned __int8 v13 = v12;
        id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        Swift::String v16 = v15;

        v38._uint64_t countAndFlagsBits = (uint64_t)v14;
        v38._unint64_t object = v16;
        swift_bridgeObjectRetain();
        v17._uint64_t countAndFlagsBits = 59;
        v17._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v18._uint64_t countAndFlagsBits = (uint64_t)v9;
        v18._unint64_t object = v11;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        v38._uint64_t countAndFlagsBits = 59;
        v38._unint64_t object = (void *)0xE100000000000000;
        v31._uint64_t countAndFlagsBits = (uint64_t)v9;
        v31._unint64_t object = v11;
        String.append(_:)(v31);
      }
      swift_bridgeObjectRelease();
      return v38._countAndFlagsBits;
    }
    else
    {
      id v29 = objc_msgSend(v1, sel_path);
      if (!v29) {
        return 0;
      }
      id v30 = v29;
      id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    }
  }
  return (uint64_t)v26;
}

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(char *), uint64_t a4)
{
  uint64_t v6 = v4;
  v19[131] = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager()) {
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unsigned __int8 v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v19, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if (v13) {
      id v14 = (char *)v19;
    }
    else {
      id v14 = 0;
    }
    uint64_t result = a3(v14);
    if (v5) {
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v16 = swift_slowAlloc();
    unsigned __int8 v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if (v17) {
      Swift::String v18 = (char *)v16;
    }
    else {
      Swift::String v18 = 0;
    }
    a3(v18);
    return MEMORY[0x185309510](v16, -1, -1);
  }
  return result;
}

unint64_t type metadata accessor for NSFileManager()
{
  unint64_t result = lazy cache variable for type metadata for NSFileManager;
  if (!lazy cache variable for type metadata for NSFileManager)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileManager);
  }
  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  if ((a4 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v9 < -1) {
    goto LABEL_21;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    id v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if (v14) {
      id v15 = 0;
    }
    else {
      id v15 = v12;
    }
    uint64_t result = a1(v15);
    if (v4) {
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((char *)v20);
    return MEMORY[0x185309510](v17, -1, -1);
  }
  return result;
}

void partial apply for closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)(char *a1)
{
  closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)(char *a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v221 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x200, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v218, 0, 0);
    goto LABEL_40;
  }
  if ((a4 & 1) == 0)
  {
    if (mkdir(a1, 0x1FFu))
    {
      int v12 = MEMORY[0x185301870]();
      int v13 = v12;
      uint64_t v14 = 4;
      switch(v12)
      {
        case 1:
        case 13:
          uint64_t v14 = 513;
          goto LABEL_31;
        case 2:
          goto LABEL_31;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_27;
        case 17:
          uint64_t v14 = 516;
          goto LABEL_31;
        case 28:
        case 69:
          uint64_t v14 = 640;
          goto LABEL_31;
        case 30:
          uint64_t v14 = 642;
          goto LABEL_31;
        case 63:
          uint64_t v14 = 514;
          goto LABEL_31;
        default:
          if (v12 == 102)
          {
            id v25 = 0;
            uint64_t v14 = 512;
LABEL_39:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v14, a2, a3, v25, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v218, 0, 0);
            goto LABEL_40;
          }
LABEL_27:
          uint64_t v14 = 512;
LABEL_31:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            unint64_t v218 = 0xD000000000000014;
            unint64_t v219 = 0x80000001823A9780;
            LODWORD(v216) = v13;
            goto LABEL_245;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v26 = (int)POSIXErrorCode.rawValue.getter();
          id v27 = objc_allocWithZone((Class)NSError);
          uint64_t v28 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v25 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, v26, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v29 = objc_msgSend(v25, sel_domain);
          id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          uint64_t v32 = v31;

          if (v30 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v32 != v33)
          {
            char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v35) {
              goto LABEL_39;
            }
            __break(1u);
          }
          swift_bridgeObjectRelease_n();
          goto LABEL_39;
      }
    }
    if (!a5) {
      return;
    }
    uint64_t v15 = MEMORY[0x185309640](a6);
    if (!v15) {
      goto LABEL_246;
    }
    uint64_t v16 = (void *)v15;
    type metadata accessor for NSFileAttributeKey(0);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    swift_bridgeObjectRetain();
    uint64_t v17 = _NativeDictionary.bridged()();
    unint64_t v218 = 0;
    unsigned __int8 v18 = objc_msgSend(v16, sel_setAttributes_ofItemAtPath_error_, v17, String._bridgeToObjectiveCImpl()(), &v218);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v18)
    {
      id v19 = (id)v218;
      return;
    }
    if (v218)
    {
      id v24 = (id)v218;
      swift_willThrow();

      return;
    }
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
LABEL_40:
    swift_willThrow();
    return;
  }
  uint64_t v220 = 0;
  S_IRWXU.getter();
  S_IRWXG.getter();
  S_IRWXO.getter();
  int v10 = _mkpath_np();
  if (v10 == 20)
  {
    swift_bridgeObjectRetain();
    if (String.count.getter() >= 2)
    {
      uint64_t v20 = (void *)MEMORY[0x185309640](a6);
      if (!v20) {
        goto LABEL_246;
      }
      uint64_t v21 = v20;
      unsigned int v22 = objc_msgSend(v20, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

      swift_unknownObjectRelease();
      if (v22)
      {
        uint64_t v23 = 516;
LABEL_58:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v51 = (int)POSIXErrorCode.rawValue.getter();
          id v52 = objc_allocWithZone((Class)NSError);
          uint64_t v53 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v50 = objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, v51, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v54 = objc_msgSend(v50, sel_domain);
          id v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          uint64_t v57 = v56;

          if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v57 != v58)
          {
            char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v60)
            {
LABEL_66:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v23, a2, a3, v50, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v216, 0, 0);
              swift_willThrow();
              goto LABEL_67;
            }
            __break(1u);
          }
          swift_bridgeObjectRelease_n();
          goto LABEL_66;
        }
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        unint64_t v218 = 0xD000000000000014;
        unint64_t v219 = 0x80000001823A9780;
LABEL_245:
        v195._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v195);
        swift_bridgeObjectRelease();
        goto LABEL_246;
      }
      swift_bridgeObjectRetain();
      uint64_t Path = String._deletingLastPathComponent()(a2, a3);
      unint64_t v38 = v37;
      swift_bridgeObjectRelease_n();
      if (String.count.getter() >= 2)
      {
        do
        {
          uint64_t v39 = (void *)MEMORY[0x185309640](a6);
          if (!v39) {
            goto LABEL_246;
          }
          uint64_t v40 = v39;
          unsigned int v41 = objc_msgSend(v39, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

          swift_unknownObjectRelease();
          if (v41)
          {
            a3 = v38;
            a2 = Path;
            goto LABEL_57;
          }
          swift_bridgeObjectRetain();
          uint64_t Path = String._deletingLastPathComponent()(Path, v38);
          unint64_t v43 = v42;
          swift_bridgeObjectRelease_n();
          unint64_t v38 = v43;
        }
        while (String.count.getter() > 1);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
LABEL_57:
    uint64_t v23 = 512;
    goto LABEL_58;
  }
  int v11 = v10;
  if (v10 == 17) {
    goto LABEL_67;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = 4;
    switch(v11)
    {
      case 1:
      case 13:
        uint64_t v23 = 513;
        goto LABEL_58;
      case 2:
        goto LABEL_58;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_57;
      case 28:
      case 69:
        uint64_t v23 = 640;
        goto LABEL_58;
      case 30:
        uint64_t v23 = 642;
        goto LABEL_58;
      case 63:
        uint64_t v23 = 514;
        goto LABEL_58;
      default:
        if (v11 != 102) {
          goto LABEL_57;
        }
        id v50 = 0;
        uint64_t v23 = 512;
        break;
    }
    goto LABEL_66;
  }
  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t v215 = a2;
    uint64_t v214 = a6;
    uint64_t v44 = MEMORY[0x185309640](a6);
    if (v44)
    {
      int v45 = (void *)v44;
      type metadata accessor for NSFileAttributeKey(0);
      lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
      swift_bridgeObjectRetain();
      uint64_t v46 = _NativeDictionary.bridged()();
      unint64_t v218 = 0;
      unsigned __int8 v47 = objc_msgSend(v45, sel_setAttributes_ofItemAtPath_error_, v46, String._bridgeToObjectiveCImpl()(), &v218);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v47)
      {
        id v48 = (id)v218;
      }
      else if (v218)
      {
        id v49 = (id)v218;
        swift_willThrow();
      }
      else
      {
        if (one-time initialization token for _nilObjCError != -1) {
          swift_once();
        }
        swift_willThrow();
      }
      unint64_t v218 = 47;
      unint64_t v219 = 0xE100000000000000;
      unint64_t v216 = a2;
      unint64_t v217 = a3;
      unint64_t v207 = a3;
      unint64_t v198 = a2;
      if ((a3 & 0x1000000000000000) != 0)
      {
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        Swift::Int v91 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        StringProtocol._ephemeralString.getter();
        uint64_t v92 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v93 = objc_msgSend(v91, sel_componentsSeparatedByString_, v92);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (!v93)
        {
          id v70 = (void *)MEMORY[0x1E4FBC860];
          goto LABEL_114;
        }
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v94 = swift_dynamicCastClass();
        if (v94)
        {
          id v70 = (void *)v94;

          goto LABEL_114;
        }
        swift_unknownObjectRelease();
        objc_msgSend(v93, sel_copy);
        unint64_t v95 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        id v70 = (void *)specialized _arrayForceCast<A, B>(_:)(v95);
      }
      else
      {
        swift_bridgeObjectRetain();
        int64_t v197 = (void *)a3;
        unint64_t v61 = String.subscript.getter();
        unint64_t v63 = v62;
        unint64_t v64 = 47;
        char v210 = specialized static StringProtocol.== infix<A>(_:_:)(47, 0xE100000000000000, 10, 0xE100000000000000);
        uint64_t v65 = Substring.init<A>(_:)();
        unint64_t v208 = v67;
        unint64_t v212 = v68;
        unint64_t v69 = v63 >> 14;
        id v70 = (void *)(v61 >> 14);
        if (v61 >> 14 >= v63 >> 14)
        {
          unint64_t v71 = (void *)MEMORY[0x1E4FBC860];
        }
        else
        {
          unint64_t v199 = v66;
          unint64_t v201 = v65;
          unint64_t v203 = v65 ^ v66;
          unint64_t v71 = (void *)MEMORY[0x1E4FBC860];
          unint64_t v64 = v61;
          unint64_t v196 = (void *)(v61 >> 14);
          unint64_t v72 = (void *)(v61 >> 14);
          unint64_t v205 = v63 >> 14;
          while (1)
          {
            if (v69 < (unint64_t)v72) {
              goto LABEL_232;
            }
            swift_bridgeObjectRetain();
            unint64_t v73 = v61;
            unint64_t v74 = Substring.subscript.getter();
            unint64_t v63 = v75;
            a2 = v76;
            unint64_t v78 = v77;
            swift_bridgeObjectRelease();
            if ((v74 ^ v63) < 0x4000 || v203 < 0x4000) {
              break;
            }
            if (v210)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unint64_t v63 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v201, v199, v208, v212, 0, 0, 0, 0, 0, v74, v63, a2, v78);
              unint64_t v80 = v79;
              a2 = v81;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              unint64_t v63 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v201, v199, v208, v212, 0, 0, 0, 0, 0, v74, v63, a2, v78);
              unint64_t v80 = v82;
              a2 = v83;
            }
            swift_bridgeObjectRelease();
            if (a2)
            {
              id v70 = v72;
              goto LABEL_107;
            }
            id v70 = (void *)(v80 >> 14);
            if (v63 >> 14 == v80 >> 14)
            {
              id v70 = v72;
              goto LABEL_107;
            }
            if (v63 >> 14 < (unint64_t)v72) {
              goto LABEL_234;
            }
            uint64_t v84 = Substring.subscript.getter();
            uint64_t v85 = MEMORY[0x185301F50](v84);
            unint64_t v63 = v86;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
            }
            unint64_t v88 = v71[2];
            unint64_t v87 = v71[3];
            unint64_t v89 = v71;
            a2 = v88 + 1;
            if (v88 >= v87 >> 1) {
              unint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v71);
            }
            unint64_t v71 = v89;
            v89[2] = a2;
            uint64_t v90 = &v89[2 * v88];
            void v90[4] = v85;
            v90[5] = v63;
            swift_bridgeObjectRelease();
            unint64_t v64 = v80;
            unint64_t v72 = (void *)(v80 >> 14);
            unint64_t v69 = v205;
            unint64_t v61 = v73;
            if ((unint64_t)v70 >= v205) {
              goto LABEL_108;
            }
          }
          if ((v74 ^ v63) < 0x4000)
          {
            id v70 = v72;
          }
          else
          {
            unint64_t v71 = (void *)MEMORY[0x1E4FBC860];
            id v70 = v196;
          }
          swift_bridgeObjectRelease();
LABEL_107:
          unint64_t v69 = v205;
        }
LABEL_108:
        if (v69 < (unint64_t)v70) {
          goto LABEL_237;
        }
        uint64_t v96 = Substring.subscript.getter();
        unint64_t v64 = MEMORY[0x185301F50](v96);
        unint64_t v63 = v97;
        id v70 = v71;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_238:
        }
          id v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70[2] + 1, 1, v70);
        unint64_t v99 = v70[2];
        unint64_t v98 = v70[3];
        a3 = (unint64_t)v197;
        if (v99 >= v98 >> 1) {
          id v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v98 > 1), v99 + 1, 1, v70);
        }
        v70[2] = v99 + 1;
        id v100 = &v70[2 * v99];
        v100[4] = v64;
        v100[5] = v63;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_114:
      uint64_t v101 = v70[2];
      if (v101)
      {
        id v102 = v70 + 5;
        id v103 = (void *)MEMORY[0x1E4FBC860];
        do
        {
          a2 = *(v102 - 1);
          uint64_t v107 = *v102;
          uint64_t v108 = HIBYTE(*v102) & 0xF;
          if ((*v102 & 0x2000000000000000) == 0) {
            uint64_t v108 = a2 & 0xFFFFFFFFFFFFLL;
          }
          if (v108)
          {
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v218 = (unint64_t)v103;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v103[2] + 1, 1);
              id v103 = (void *)v218;
            }
            unint64_t v105 = v103[2];
            unint64_t v104 = v103[3];
            if (v105 >= v104 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
              id v103 = (void *)v218;
            }
            v103[2] = v105 + 1;
            Swift::String v106 = &v103[2 * v105];
            unsigned char v106[4] = a2;
            v106[5] = v107;
          }
          v102 += 2;
          --v101;
        }
        while (v101);
      }
      else
      {
        id v103 = (void *)MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      unint64_t v218 = (unint64_t)v103;
      swift_bridgeObjectRetain();
      uint64_t v110 = specialized Collection.first.getter(v198, a3);
      uint64_t v112 = v111;
      swift_bridgeObjectRelease();
      if (v112)
      {
        if (v110 == 47 && v112 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v113 & 1) == 0) {
            goto LABEL_132;
          }
        }
        specialized Array.replaceSubrange<A>(_:with:)(0, 0, 47, 0xE100000000000000);
      }
LABEL_132:
      swift_bridgeObjectRetain();
      uint64_t v114 = specialized BidirectionalCollection.last.getter(v198, a3);
      uint64_t v116 = v115;
      swift_bridgeObjectRelease();
      if (v116)
      {
        if (v114 == 47 && v116 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v117 & 1) == 0) {
            goto LABEL_143;
          }
        }
        if (String.count.getter() > 1)
        {
          id v118 = (void *)v218;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v118[2] + 1, 1, v118);
          }
          unint64_t v120 = v118[2];
          unint64_t v119 = v118[3];
          if (v120 >= v119 >> 1) {
            id v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v119 > 1), v120 + 1, 1, v118);
          }
          v118[2] = v120 + 1;
          id v121 = &v118[2 * v120];
          v121[4] = 47;
          v121[5] = 0xE100000000000000;
          swift_bridgeObjectRelease();
          unint64_t v218 = (unint64_t)v118;
LABEL_144:
          unint64_t v211 = v218;
          unint64_t v218 = 47;
          unint64_t v219 = 0xE100000000000000;
          unint64_t v216 = v215;
          unint64_t v217 = v207;
          if ((v207 & 0x1000000000000000) != 0)
          {
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain();
            unint64_t v63 = MEMORY[0x1E4FBB1A0];
            StringProtocol._ephemeralString.getter();
            long long v150 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            StringProtocol._ephemeralString.getter();
            uint64_t v151 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v152 = objc_msgSend(v150, sel_componentsSeparatedByString_, v151);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            if (!v152)
            {
              a2 = MEMORY[0x1E4FBC860];
              goto LABEL_184;
            }
            type metadata accessor for __SwiftDeferredNSArray();
            swift_unknownObjectRetain();
            if (swift_dynamicCastClass())
            {
              swift_retain();
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
            uint64_t v153 = swift_dynamicCastClass();
            if (v153)
            {
              a2 = v153;

              goto LABEL_184;
            }
            swift_unknownObjectRelease();
            objc_msgSend(v152, sel_copy);
            unint64_t v63 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            a2 = specialized _arrayForceCast<A, B>(_:)(v63);

LABEL_183:
            swift_bridgeObjectRelease();
LABEL_184:
            uint64_t v160 = *(void *)(a2 + 16);
            if (v160)
            {
              uint64_t v161 = (uint64_t *)(a2 + 40);
              uint64_t v162 = (void *)MEMORY[0x1E4FBC860];
              do
              {
                uint64_t v167 = *(v161 - 1);
                uint64_t v166 = *v161;
                uint64_t v168 = HIBYTE(*v161) & 0xF;
                if ((*v161 & 0x2000000000000000) == 0) {
                  uint64_t v168 = v167 & 0xFFFFFFFFFFFFLL;
                }
                if (v168)
                {
                  swift_bridgeObjectRetain();
                  char v169 = swift_isUniquelyReferenced_nonNull_native();
                  unint64_t v218 = (unint64_t)v162;
                  if ((v169 & 1) == 0)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v162[2] + 1, 1);
                    uint64_t v162 = (void *)v218;
                  }
                  unint64_t v164 = v162[2];
                  unint64_t v163 = v162[3];
                  unint64_t v63 = v164 + 1;
                  if (v164 >= v163 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v163 > 1, v164 + 1, 1);
                    uint64_t v162 = (void *)v218;
                  }
                  v162[2] = v63;
                  uint64_t v165 = &v162[2 * v164];
                  v165[4] = v167;
                  v165[5] = v166;
                }
                v161 += 2;
                --v160;
              }
              while (v160);
            }
            else
            {
              uint64_t v162 = (void *)MEMORY[0x1E4FBC860];
            }
            swift_bridgeObjectRelease();
            unint64_t v218 = (unint64_t)v162;
            a2 = v207;
            swift_bridgeObjectRetain();
            uint64_t v170 = v215;
            uint64_t v171 = specialized Collection.first.getter(v215, v207);
            uint64_t v173 = v172;
            swift_bridgeObjectRelease();
            if (v173)
            {
              if (v171 == 47 && v173 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v174 & 1) == 0) {
                  goto LABEL_202;
                }
              }
              specialized Array.replaceSubrange<A>(_:with:)(0, 0, 47, 0xE100000000000000);
            }
LABEL_202:
            swift_bridgeObjectRetain();
            uint64_t v175 = specialized BidirectionalCollection.last.getter(v215, v207);
            uint64_t v177 = v176;
            swift_bridgeObjectRelease();
            if (v177)
            {
              if (v175 == 47 && v177 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v178 & 1) == 0) {
                  goto LABEL_213;
                }
              }
              if (String.count.getter() > 1)
              {
                long long v179 = (void *)v218;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  long long v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v179[2] + 1, 1, v179);
                }
                unint64_t v63 = v179[2];
                unint64_t v180 = v179[3];
                if (v63 >= v180 >> 1) {
                  long long v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v180 > 1), v63 + 1, 1, v179);
                }
                v179[2] = v63 + 1;
                uint64_t v181 = &v179[2 * v63];
                v181[4] = 47;
                v181[5] = 0xE100000000000000;
                swift_bridgeObjectRelease();
                unint64_t v218 = (unint64_t)v179;
                goto LABEL_214;
              }
            }
LABEL_213:
            swift_bridgeObjectRelease();
LABEL_214:
            unint64_t v64 = *(void *)(v218 + 16);
            swift_bridgeObjectRelease();
            id v70 = *(void **)(v211 + 16);
            if ((unint64_t)v70 < v64) {
              goto LABEL_236;
            }
            if ((void *)v64 == v70)
            {
LABEL_216:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v220) {
                MEMORY[0x185309510](v220, -1, -1);
              }
              return;
            }
            BOOL v182 = (unint64_t *)(v211 + 16 * v64 + 40);
            while (1)
            {
              if (v64 >= (unint64_t)v70)
              {
                __break(1u);
LABEL_232:
                __break(1u);
LABEL_233:
                __break(1u);
LABEL_234:
                __break(1u);
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
                goto LABEL_238;
              }
              uint64_t v184 = *(v182 - 1);
              unint64_t v185 = *v182;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v186 = String._appendingPathComponent(_:)(v184, v185, v170, a2);
              unint64_t v188 = v187;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              uint64_t v189 = MEMORY[0x185309640](v214);
              if (!v189) {
                goto LABEL_246;
              }
              uint64_t v190 = (void *)v189;
              swift_bridgeObjectRetain();
              uint64_t v191 = _NativeDictionary.bridged()();
              uint64_t v215 = v186;
              uint64_t v192 = String._bridgeToObjectiveCImpl()();
              unint64_t v218 = 0;
              unsigned __int8 v193 = objc_msgSend(v190, sel_setAttributes_ofItemAtPath_error_, v191, v192, &v218);

              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v63 = v218;
              if (v193)
              {
                id v183 = (id)v218;
                a2 = v188;
              }
              else
              {
                a2 = v188;
                if (!v218)
                {
                  uint64_t v170 = v186;
                  if (one-time initialization token for _nilObjCError != -1) {
                    swift_once();
                  }
                  swift_willThrow();
                  goto LABEL_222;
                }
                id v194 = (id)v218;
                swift_willThrow();
              }
              uint64_t v170 = v186;
LABEL_222:
              ++v64;
              v182 += 2;
              if (v70 == (void *)v64) {
                goto LABEL_216;
              }
            }
          }
          swift_bridgeObjectRetain();
          unint64_t v122 = String.subscript.getter();
          unint64_t v63 = v123;
          unint64_t v64 = 47;
          char v206 = specialized static StringProtocol.== infix<A>(_:_:)(47, 0xE100000000000000, 10, 0xE100000000000000);
          uint64_t v124 = Substring.init<A>(_:)();
          unint64_t v204 = v126;
          unint64_t v209 = v127;
          unint64_t v128 = v63 >> 14;
          unint64_t v129 = v122;
          id v70 = (void *)(v122 >> 14);
          if (v122 >> 14 >= v63 >> 14)
          {
            v213 = (void *)MEMORY[0x1E4FBC860];
          }
          else
          {
            unint64_t v198 = v125;
            unint64_t v200 = v124;
            unint64_t v202 = v124 ^ v125;
            int64_t v197 = (void *)(v122 >> 14);
            uint64_t v130 = (void *)(v122 >> 14);
            v213 = (void *)MEMORY[0x1E4FBC860];
            while (1)
            {
              if (v128 < (unint64_t)v130) {
                goto LABEL_233;
              }
              a2 = v128;
              swift_bridgeObjectRetain();
              unint64_t v131 = v129;
              unint64_t v63 = Substring.subscript.getter();
              unint64_t v133 = v132;
              unint64_t v135 = v134;
              unint64_t v64 = v136;
              swift_bridgeObjectRelease();
              if ((v63 ^ v133) < 0x4000 || v202 < 0x4000) {
                break;
              }
              if (v206)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                unint64_t v63 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v200, v198, v204, v209, 0, 0, 0, 0, 0, v63, v133, v135, v64);
                unint64_t v138 = v137;
                char v140 = v139;
                swift_bridgeObjectRelease_n();
                unint64_t v64 = v209;
              }
              else
              {
                unint64_t v63 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v200, v198, v204, v209, 0, 0, 0, 0, 0, v63, v133, v135, v64);
                unint64_t v138 = v141;
                char v140 = v142;
              }
              swift_bridgeObjectRelease();
              if ((v140 & 1) != 0 || (id v70 = (void *)(v138 >> 14), v63 >> 14 == v138 >> 14))
              {
                id v70 = v130;
                goto LABEL_177;
              }
              if (v63 >> 14 < (unint64_t)v130) {
                goto LABEL_235;
              }
              uint64_t v143 = Substring.subscript.getter();
              unint64_t v64 = v144;
              unint64_t v63 = MEMORY[0x185301F50](v143);
              uint64_t v146 = v145;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                v213 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v213[2] + 1, 1, v213);
              }
              unint64_t v148 = v213[2];
              unint64_t v147 = v213[3];
              if (v148 >= v147 >> 1) {
                v213 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v147 > 1), v148 + 1, 1, v213);
              }
              _OWORD v213[2] = v148 + 1;
              long long v149 = &v213[2 * v148];
              v149[4] = v63;
              v149[5] = v146;
              swift_bridgeObjectRelease();
              uint64_t v130 = (void *)(v138 >> 14);
              unint64_t v128 = a2;
              unint64_t v129 = v131;
              if ((unint64_t)v70 >= a2) {
                goto LABEL_178;
              }
            }
            uint64_t v154 = v213;
            if ((v63 ^ v133) >= 0x4000) {
              uint64_t v154 = (void *)MEMORY[0x1E4FBC860];
            }
            v213 = v154;
            if ((v63 ^ v133) >= 0x4000) {
              id v70 = v197;
            }
            else {
              id v70 = v130;
            }
            swift_bridgeObjectRelease();
LABEL_177:
            unint64_t v128 = a2;
          }
LABEL_178:
          if (v128 < (unint64_t)v70)
          {
            __break(1u);
          }
          else
          {
            uint64_t v155 = Substring.subscript.getter();
            unint64_t v64 = MEMORY[0x185301F50](v155);
            unint64_t v63 = v156;
            a2 = (unint64_t)v213;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_180:
              unint64_t v158 = *(void *)(a2 + 16);
              unint64_t v157 = *(void *)(a2 + 24);
              if (v158 >= v157 >> 1) {
                a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v157 > 1), v158 + 1, 1, (void *)a2);
              }
              *(void *)(a2 + 16) = v158 + 1;
              unint64_t v159 = a2 + 16 * v158;
              *(void *)(v159 + 32) = v64;
              *(void *)(v159 + 40) = v63;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_183;
            }
          }
          a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a2 + 16) + 1, 1, (void *)a2);
          goto LABEL_180;
        }
      }
LABEL_143:
      swift_bridgeObjectRelease();
      goto LABEL_144;
    }
LABEL_246:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_67:
  if (v220) {
    MEMORY[0x185309510](v220, -1, -1);
  }
}

void partial apply for closure #1 in _SearchPathURLs(for:in:expandTilde:)(uint64_t *a1@<X0>, void *a2@<X8>)
{
  closure #1 in _SearchPathURLs(for:in:expandTilde:)(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v21[3] = *MEMORY[0x1E4F143B8];
  if ((a4 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v9 < -1) {
    goto LABEL_23;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    int v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if (v14) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v12;
    }
    a1(v15);
    if (v4) {
      return swift_willThrow();
    }
    else {
      return v21[1];
    }
  }
  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((char *)v20);
    if (v4)
    {
      return MEMORY[0x185309510](v17, -1, -1);
    }
    else
    {
      MEMORY[0x185309510](v17, -1, -1);
      return v21[2];
    }
  }
}

{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char *v15;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  void v21[6];

  v21[5] = *MEMORY[0x1E4F143B8];
  if ((a4 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v9 < -1) {
    goto LABEL_23;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    int v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if (v14) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v12;
    }
    a1(v15);
    if (v4) {
      return swift_willThrow();
    }
    else {
      return v21[1];
    }
  }
  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((char *)v20);
    if (v4)
    {
      return MEMORY[0x185309510](v17, -1, -1);
    }
    else
    {
      MEMORY[0x185309510](v17, -1, -1);
      return v21[3];
    }
  }
}

void partial apply for closure #1 in _FileManagerImpl.attributesOfItem(atPath:)(const char *a1@<X0>, void *a2@<X8>)
{
  closure #1 in _FileManagerImpl.attributesOfItem(atPath:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(char *a1)
{
  return closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(unsigned char *)(v1 + 33), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t partial apply for closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x100, a2, a3, 0, 0, 0, 0, 0, &v85, 0, 0);
    return swift_willThrow();
  }
  bzero(&v85, 0x878uLL);
  if (!statfs(a1, &v85))
  {
    uint64_t f_bsize = v85.f_bsize;
    uint64_t f_blocks = v85.f_blocks;
    if (is_mul_ok(v85.f_blocks, v85.f_bsize))
    {
      uint64_t f_bavail = v85.f_bavail;
      if (is_mul_ok(v85.f_bavail, v85.f_bsize))
      {
        uint64_t v81 = v85.f_fsid.val[0];
        int64_t f_files = v85.f_files;
        int64_t f_ffree = v85.f_ffree;
        uid_t v13 = geteuid();
        *(void *)&long long v86 = 0;
        if ((v13 & 0x80000000) == 0)
        {
          int v14 = v13;
          uint64_t v15 = f_blocks * f_bsize;
          unint64_t v16 = f_bavail * f_bsize;
          uint64_t v82 = f_bavail * f_bsize;
          if (!quotactl(v85.f_mntonname, 458752, v13, (caddr_t)&v86))
          {
            if ((void)v86)
            {
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              if (!quotactl(v85.f_mntonname, 196608, v14, (caddr_t)&v86))
              {
                if ((void)v86)
                {
                  if ((unint64_t)v86 < (unint64_t)v87)
                  {
LABEL_76:
                    __break(1u);
LABEL_77:
                    __break(1u);
                  }
                  if (v15 >= (unint64_t)v86) {
                    uint64_t v15 = v86;
                  }
                  if (v16 >= (void)v86 - (void)v87) {
                    unint64_t v16 = v86 - v87;
                  }
                }
                uint64_t v82 = v16;
                if (DWORD2(v87))
                {
                  if (DWORD2(v87) < v88) {
                    goto LABEL_77;
                  }
                  int64_t v68 = f_files;
                  if (f_files >= (unint64_t)DWORD2(v87)) {
                    int64_t v68 = DWORD2(v87);
                  }
                  int64_t v69 = f_ffree;
                  if (f_ffree >= (unint64_t)(DWORD2(v87) - v88)) {
                    int64_t v69 = (DWORD2(v87) - v88);
                  }
                  int64_t f_files = v68;
                  int64_t f_ffree = v69;
                }
              }
            }
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSFileAttributeKey, Any)>);
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_18210C690;
          *(void *)(v17 + 32) = @"NSFileSystemSize";
          id v18 = objc_allocWithZone((Class)NSNumber);
          char v19 = @"NSFileSystemSize";
          uint64_t v20 = &selRef_initWithLongLong_;
          if (v15 < 0) {
            uint64_t v20 = &selRef_initWithUnsignedLongLong_;
          }
          id v21 = objc_msgSend(v18, *v20, v15);
          uint64_t v22 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          *((void *)&v87 + 1) = v22;
          *(void *)&long long v86 = v21;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 40));
          *(void *)(v17 + 72) = @"NSFileSystemFreeSize";
          id v23 = objc_allocWithZone((Class)NSNumber);
          id v24 = @"NSFileSystemFreeSize";
          if (v82 >= 0) {
            id v25 = &selRef_initWithLongLong_;
          }
          else {
            id v25 = &selRef_initWithUnsignedLongLong_;
          }
          id v26 = [v23 *v25];
          *((void *)&v87 + 1) = v22;
          *(void *)&long long v86 = v26;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 80));
          *(void *)(v17 + 112) = @"NSFileSystemNodes";
          id v27 = objc_allocWithZone((Class)NSNumber);
          uint64_t v28 = @"NSFileSystemNodes";
          if (f_files >= 0) {
            id v29 = &selRef_initWithLongLong_;
          }
          else {
            id v29 = &selRef_initWithUnsignedLongLong_;
          }
          id v30 = [v27 *v29];
          *((void *)&v87 + 1) = v22;
          *(void *)&long long v86 = v30;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 120));
          *(void *)(v17 + 152) = @"NSFileSystemFreeNodes";
          id v31 = objc_allocWithZone((Class)NSNumber);
          uint64_t v32 = @"NSFileSystemFreeNodes";
          if (f_ffree >= 0) {
            uint64_t v33 = &selRef_initWithLongLong_;
          }
          else {
            uint64_t v33 = &selRef_initWithUnsignedLongLong_;
          }
          id v34 = [v31 *v33];
          *((void *)&v87 + 1) = v22;
          *(void *)&long long v86 = v34;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 160));
          *(void *)(v17 + 192) = @"NSFileSystemNumber";
          id v35 = objc_allocWithZone((Class)NSNumber);
          unint64_t v36 = @"NSFileSystemNumber";
          id v37 = objc_msgSend(v35, sel_initWithLongLong_, v81);
          *(void *)(v17 + 224) = v22;
          *(void *)(v17 + 200) = v37;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
          unint64_t v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (Hashable & Sendable)?(v17 + 32, (uint64_t)&v86, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
          uint64_t v39 = v86;
          swift_retain();
          unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
          if ((v41 & 1) == 0)
          {
            unint64_t v42 = v38 + 8;
            *(void *)((char *)v38 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v40;
            *(void *)(v38[6] + 8 * v40) = v39;
            outlined init with take of Any((long long *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v40));
            uint64_t v43 = v38[2];
            BOOL v44 = __OFADD__(v43, 1);
            uint64_t v45 = v43 + 1;
            if (!v44)
            {
              v38[2] = v45;
              outlined init with copy of (Hashable & Sendable)?(v17 + 72, (uint64_t)&v86, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
              uint64_t v46 = v86;
              unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
              if ((v48 & 1) == 0)
              {
                *(void *)((char *)v42 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
                *(void *)(v38[6] + 8 * v47) = v46;
                outlined init with take of Any((long long *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v47));
                uint64_t v49 = v38[2];
                BOOL v44 = __OFADD__(v49, 1);
                uint64_t v50 = v49 + 1;
                if (!v44)
                {
                  v38[2] = v50;
                  outlined init with copy of (Hashable & Sendable)?(v17 + 112, (uint64_t)&v86, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                  uint64_t v51 = v86;
                  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
                  if ((v53 & 1) == 0)
                  {
                    *(void *)((char *)v42 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
                    *(void *)(v38[6] + 8 * v52) = v51;
                    outlined init with take of Any((long long *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v52));
                    uint64_t v54 = v38[2];
                    BOOL v44 = __OFADD__(v54, 1);
                    uint64_t v55 = v54 + 1;
                    if (!v44)
                    {
                      v38[2] = v55;
                      outlined init with copy of (Hashable & Sendable)?(v17 + 152, (uint64_t)&v86, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                      uint64_t v56 = v86;
                      unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
                      if ((v58 & 1) == 0)
                      {
                        *(void *)((char *)v42 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
                        *(void *)(v38[6] + 8 * v57) = v56;
                        outlined init with take of Any((long long *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v57));
                        uint64_t v59 = v38[2];
                        BOOL v44 = __OFADD__(v59, 1);
                        uint64_t v60 = v59 + 1;
                        if (!v44)
                        {
                          v38[2] = v60;
                          outlined init with copy of (Hashable & Sendable)?(v17 + 192, (uint64_t)&v86, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                          uint64_t v61 = v86;
                          unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
                          if ((v63 & 1) == 0)
                          {
                            *(void *)((char *)v42 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
                            *(void *)(v38[6] + 8 * v62) = v61;
                            outlined init with take of Any((long long *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v62));
                            uint64_t v64 = v38[2];
                            BOOL v44 = __OFADD__(v64, 1);
                            uint64_t v65 = v64 + 1;
                            if (!v44)
                            {
                              v38[2] = v65;
                              swift_release();
                              uint64_t result = swift_bridgeObjectRelease();
                              *a4 = v38;
                              return result;
                            }
                            goto LABEL_75;
                          }
LABEL_74:
                          __break(1u);
LABEL_75:
                          __break(1u);
                          goto LABEL_76;
                        }
LABEL_73:
                        __break(1u);
                        goto LABEL_74;
                      }
LABEL_72:
                      __break(1u);
                      goto LABEL_73;
                    }
LABEL_71:
                    __break(1u);
                    goto LABEL_72;
                  }
LABEL_70:
                  __break(1u);
                  goto LABEL_71;
                }
LABEL_69:
                __break(1u);
                goto LABEL_70;
              }
LABEL_68:
              __break(1u);
              goto LABEL_69;
            }
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_65;
  }
  int v8 = MEMORY[0x185301870]();
  uint64_t v9 = 263;
  switch(v8)
  {
    case 1:
    case 13:
      uint64_t v9 = 257;
      goto LABEL_53;
    case 2:
      uint64_t v9 = 260;
      goto LABEL_53;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      goto LABEL_50;
    case 27:
      goto LABEL_53;
    default:
      if (v8 == 63)
      {
        uint64_t v9 = 258;
      }
      else
      {
        if (v8 == 102)
        {
          id v67 = 0;
          uint64_t v9 = 256;
LABEL_61:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v9, a2, a3, v67, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v86, 0, 0);
          return swift_willThrow();
        }
LABEL_50:
        uint64_t v9 = 256;
      }
LABEL_53:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v70 = (int)POSIXErrorCode.rawValue.getter();
        id v71 = objc_allocWithZone((Class)NSError);
        uint64_t v72 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v67 = objc_msgSend(v71, sel_initWithDomain_code_userInfo_, v72, v70, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v73 = objc_msgSend(v67, sel_domain);
        id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        uint64_t v76 = v75;

        if (v74 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v76 != v77)
        {
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v79) {
            goto LABEL_61;
          }
          __break(1u);
        }
        swift_bridgeObjectRelease_n();
        goto LABEL_61;
      }
      *(void *)&long long v86 = 0;
      *((void *)&v86 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&long long v86 = 0xD000000000000014;
      *((void *)&v86 + 1) = 0x80000001823A9780;
      v80._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v80);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  unint64_t v16 = &v6[2 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v16 + 2);
    id v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20]) {
      uint64_t result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      *unint64_t v16 = a3;
      v16[1] = a4;
      *(void *)uint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(const char *a1)
{
  return closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(const char *a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5, unint64_t a6)
{
  if (a1)
  {
    uint64_t result = symlink(a1, a4);
    if (result)
    {
      int v9 = MEMORY[0x185301870]();
      uint64_t v10 = 4;
      switch(v9)
      {
        case 1:
        case 13:
          uint64_t v10 = 513;
          goto LABEL_13;
        case 2:
          goto LABEL_13;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_9;
        case 17:
          uint64_t v10 = 516;
          goto LABEL_13;
        case 28:
        case 69:
          uint64_t v10 = 640;
          goto LABEL_13;
        case 30:
          uint64_t v10 = 642;
          goto LABEL_13;
        case 63:
          uint64_t v10 = 514;
          goto LABEL_13;
        default:
          if (v9 == 102)
          {
            id v13 = 0;
            uint64_t v10 = 512;
LABEL_21:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v10, a5, a6, v13, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v25, 0, 0);
            return swift_willThrow();
          }
LABEL_9:
          uint64_t v10 = 512;
LABEL_13:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v14 = (int)POSIXErrorCode.rawValue.getter();
            id v15 = objc_allocWithZone((Class)NSError);
            uint64_t v16 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v13 = objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, v14, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v17 = objc_msgSend(v13, sel_domain);
            id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
            uint64_t v20 = v19;

            if (v18 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              || v20 != v21)
            {
              char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v23) {
                goto LABEL_21;
              }
              __break(1u);
            }
            swift_bridgeObjectRelease_n();
            goto LABEL_21;
          }
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          break;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x100, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v25, 0, 0);
    return swift_willThrow();
  }
  return result;
}

void partial apply for closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(uint64_t a1)
{
  closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1)
  {
    uint64_t v11 = MEMORY[0x185309640](a4);
    if (v11)
    {
      int v12 = (void *)v11;
      MEMORY[0x1F4188790](v11);
      id v13[2] = a5;
      v13[3] = a6;
      v13[4] = a1;
      v13[5] = a2;
      v13[6] = a3;
      specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(a5, a6, (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:), (uint64_t)v13);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x100, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v14, 0, 0);
    swift_willThrow();
  }
}

uint64_t partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1)
{
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), **(unsigned __int8 **)(v1 + 56) | ((unint64_t)*(unsigned int *)(*(void *)(v1 + 56) + 4) << 32), *(void *)(*(void *)(v1 + 56) + 8));
}

{
  uint64_t v1;

  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), **(unsigned char **)(v1 + 56), *(void *)(*(void *)(v1 + 56) + 8));
}

uint64_t _s10Foundation15_FileOperationsO010linkOrCopyB033_0F974932CC9FBACA9047618113061023LL_3dst4with8delegateySS_SSSo13NSFileManagerCxtKAA04LinkeF8DelegateAELLRzlFZySPys4Int8VGSgKXEfU_AC04copyB0_2toAG7optionsySS_SSAJSo0mnF7OptionsVtKFZ0fbP0L_V_TG5TA_0(uint64_t a1)
{
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 **)(v1 + 56));
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return &type metadata for NSNotificationCenter.Notifications.Iterator;
}

uint64_t PredicateExpressions.Equal.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

void sub_1818F3358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1818F3774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __NSFCShouldLog(int a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = atomic_load(&_NSFCSubarbitrationCount);
  if (v1 < 1) {
    return 1;
  }
  unsigned __int8 v3 = atomic_load(_NSFCDisableLogSuppression);
  if (v3) {
    return 1;
  }
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 == 2) {
    uint64_t v4 = 100;
  }
  if (a1 == 1) {
    uint64_t v5 = 200;
  }
  else {
    uint64_t v5 = v4;
  }
  int64_t add = atomic_fetch_add((atomic_ullong *volatile)&_NSFCSubarbitratedClaimCount, 1uLL);
  if (add == 200)
  {
    if (qword_1EB1EDDD0 != -1) {
      dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
    }
    int64_t v7 = qword_1EB1EDD38;
    if (!os_log_type_enabled((os_log_t)qword_1EB1EDD38, OS_LOG_TYPE_DEFAULT)) {
      return add < v5;
    }
    __int16 v10 = 0;
    int v8 = "Further suppressing excessive logging";
    int v9 = (uint8_t *)&v10;
  }
  else
  {
    if (add != 100) {
      return add < v5;
    }
    if (qword_1EB1EDDD0 != -1) {
      dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
    }
    int64_t v7 = qword_1EB1EDD38;
    if (!os_log_type_enabled((os_log_t)qword_1EB1EDD38, OS_LOG_TYPE_DEFAULT)) {
      return add < v5;
    }
    __int16 v11 = 0;
    int v8 = "Suppressing excessive logging";
    int v9 = (uint8_t *)&v11;
  }
  _os_log_impl(&dword_181795000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
  return add < v5;
}

uint64_t _getTransformerRegistry()
{
  uint64_t result = _transformerRegistry;
  if (!_transformerRegistry)
  {
    _transformerRegistry = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:8];
    uint64_t v1 = objc_alloc_init(_NSNegateBooleanTransformer);
    [(id)_transformerRegistry setObject:v1 forKey:@"NSNegateBoolean"];

    uint64_t v2 = objc_alloc_init(_NSIsNilTransformer);
    [(id)_transformerRegistry setObject:v2 forKey:@"NSIsNil"];

    unsigned __int8 v3 = objc_alloc_init(_NSIsNotNilTransformer);
    [(id)_transformerRegistry setObject:v3 forKey:@"NSIsNotNil"];

    id v4 = [(NSValueTransformer *)[_NSUnarchiveFromDataTransformer alloc] _initForFoundationOnly];
    [(id)_transformerRegistry setObject:v4 forKey:@"NSUnarchiveFromData"];

    id v5 = [(NSValueTransformer *)[_NSKeyedUnarchiveFromDataTransformer alloc] _initForFoundationOnly];
    [(id)_transformerRegistry setObject:v5 forKey:@"NSKeyedUnarchiveFromData"];

    uint64_t v6 = objc_alloc_init(NSSecureUnarchiveFromDataTransformer);
    [(id)_transformerRegistry setObject:v6 forKey:@"NSSecureUnarchiveFromData"];

    return _transformerRegistry;
  }
  return result;
}

void -[NSFileCoordinator _blockOnAccessClaim:withAccessArbiter:](NSFileCoordinator *self, SEL a2, id a3, id a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = [a3 claimID];
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x3052000000;
  uint64_t v16 = __Block_byref_object_copy__24;
  id v17 = __Block_byref_object_dispose__24;
  uint64_t v18 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __70__NSFileCoordinator_NSPrivate___blockOnAccessClaim_withAccessArbiter___block_invoke;
  v12[3] = &unk_1E51FA948;
  v12[5] = a3;
  v12[6] = &v13;
  v12[4] = a4;
  [(NSFileCoordinator *)self _requestAccessClaim:a3 withProcedure:v12];
  int v8 = v14;
  if (v14[5])
  {
    if (_NSFCIP)
    {
      char v9 = objc_msgSend((id)objc_msgSend(a3, "purposeID"), "isEqualToString:", @"com.apple.filecoordination.crash_verifier");
      int v8 = v14;
      if ((v9 & 1) == 0)
      {
        __int16 v10 = v14[5];
        dispatch_time_t v11 = dispatch_time(0, 10000000000);
        if (!dispatch_semaphore_wait(v10, v11))
        {
LABEL_7:
          dispatch_release((dispatch_object_t)v14[5]);
          goto LABEL_8;
        }
        NSLog((NSString *)@"Possible NSFileCoordinator deadlock detected. Requesting debug information...");
        +[NSFileCoordinator _getDebugInfoWithCompletionHandler:&__block_literal_global_97];
        int v8 = v14;
      }
    }
    dispatch_semaphore_wait((dispatch_semaphore_t)v8[5], 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_7;
  }
LABEL_8:
  [(NSFileCoordinator *)self _forgetAccessClaimForID:v7];
  _Block_object_dispose(&v13, 8);
}

void sub_1818F4500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t @objc _NSFileManagerBridge.isReadableFile(atPath:)(void *a1, uint64_t a2, void *a3, int a4)
{
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v8 = v7;
  id v9 = a1;
  LOBYTE(a4) = _FileManagerImpl._fileAccessibleForMode(_:_:)((uint64_t)v6, v8, a4);

  swift_bridgeObjectRelease();
  return a4 & 1;
}

BOOL _FileManagerImpl._fileAccessibleForMode(_:_:)(uint64_t a1, unint64_t a2, int a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (v7 < -1) {
    goto LABEL_19;
  }
  uint64_t v8 = v7 + 1;
  if (v7 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    __int16 v10 = (char *)v18 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v8, 1, a1, a2);
    char v12 = v11;
    swift_bridgeObjectRelease();
    return (v12 & 1) == 0 && access(v10, a3) == 0;
  }
  else
  {
    uint64_t v14 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v8, 1, a1, a2);
    char v16 = v15;
    swift_bridgeObjectRelease();
    BOOL v13 = (v16 & 1) == 0 && access(v14, a3) == 0;
    MEMORY[0x185309510](v14, -1, -1);
  }
  return v13;
}

BOOL _NSFileCompressionTypeIsSafeForMapping(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (qword_1EB1EDC70 != -1) {
    dispatch_once(&qword_1EB1EDC70, &__block_literal_global_70);
  }
  if (!_MergedGlobals_145) {
    return 0;
  }
  memset(v4, 0, sizeof(v4));
  if (_MergedGlobals_145(a1, v4)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = LODWORD(v4[0]) == 5;
  }
  return !v2;
}

void *_attributesAtPath(const char *a1, char a2, NSError **a3)
{
  ssize_t v6 = listxattr(a1, 0, 0, 1);
  if (v6 < 1)
  {
    uint64_t v8 = 0;
LABEL_21:
    char v11 = 0;
    goto LABEL_22;
  }
  size_t v7 = v6;
  uint64_t v8 = (char *)malloc_type_malloc(v6, 0x33EE517DuLL);
  if (!v8) {
    goto LABEL_21;
  }
  ssize_t v9 = listxattr(a1, v8, v7, 1);
  if (v9 < 1) {
    goto LABEL_21;
  }
  ssize_t v10 = v9;
  uint64_t v32 = a3;
  char v11 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:3];
  char v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:4];
  if (v10 << 32 >= 1)
  {
    BOOL v13 = v8;
    do
    {
      if (!strcmp(v13, "com.apple.ResourceFork") && (a2 & 1) != 0
        || !strcmp(v13, "com.apple.FinderInfo")
        || !strcmp(v13, "system.Security"))
      {
        char v16 = v13 - 1;
        while (*(unsigned __int8 *)++v16)
          ;
      }
      else
      {
        uint64_t v14 = [[NSString alloc] initWithUTF8String:v13];
        if (v14)
        {
          char v15 = v14;
          [v12 addObject:v14];
        }
        char v16 = v13 - 1;
        while (*(unsigned __int8 *)++v16)
          ;
      }
      BOOL v13 = v16 + 1;
    }
    while (v16 + 1 < &v8[(int)v10]);
  }
  if ([v12 count])
  {
    id v19 = v12;
  }
  else
  {

    char v12 = 0;
  }
  int v21 = [v12 count];
  if (v21 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = v21;
    do
    {
      Swift::String v24 = (void *)[v12 objectAtIndex:v22];
      uint64_t v25 = (const char *)[v24 UTF8String];
      ssize_t v26 = getxattr(a1, v25, 0, 0, 0, 1);
      if (v26 >= 1)
      {
        size_t v27 = v26;
        uint64_t v28 = malloc_type_malloc(v26, 0x47164B52uLL);
        ssize_t v29 = getxattr(a1, v25, v28, v27, 0, 1);
        if (v29 == -1)
        {
          if (v32)
          {
            uint64_t v31 = *__error();
            *uint64_t v32 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(v31, (uint64_t)+[NSString stringWithUTF8String:a1], 1, 0, 0);
          }
          free(v28);
        }
        else
        {
          uint64_t v30 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v28 length:v29 freeWhenDone:1];
          if (v30) {
            [v11 setObject:v30 forKey:v24];
          }
        }
      }
      ++v22;
    }
    while (v23 != v22);
  }
LABEL_22:
  free(v8);
  if ([v11 count]) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t _NSFileProtectionValueForPath(const char *a1)
{
  v3[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v3[0] = 0x4000000000000005;
  if (getattrlist(a1, v3, &v2, 8uLL, 1u)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return HIDWORD(v2);
  }
}

uint64_t specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBB808];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 1953384789;
      v34._unint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB808], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBB550];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 7630409;
      v34._unint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB550], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC538];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x3436746E4955;
      v34._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC538], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC1C8];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x3436746E49;
      v34._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC1C8], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC358];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x38746E4955;
      v34._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC358], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC0F8];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x3631746E49;
      v34._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC0F8], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC150];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x3233746E49;
      v34._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC150], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC450];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x3631746E4955;
      v34._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC450], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC098];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 947154505;
      v34._unint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC098], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC3D0];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x383231746E49;
      v34._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC3D0], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC4C0];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x3233746E4955;
      v34._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC4C0], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  uint64_t v10 = v8;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  unsigned __int8 v40 = a8;
  int v13 = a3 >> 5;
  if (v13 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v29 = *(void *)(*(void *)(v10 + 32) + 24);
    MEMORY[0x1F4188790](v30);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
    closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v29 + 16), &v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v36;
    }
  }
  else
  {
    if (v13 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      *id v19 = MEMORY[0x1E4FBC5F8];
      char v21 = v40;
      if (v40 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v24 = v37;
        outlined copy of _CodingKey(v37, v38, v39, v40);
        outlined copy of _CodingKey(v37, v38, v39, v40);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v22;
        *(unsigned char *)(v26 + 40) = v21;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v24, v23, v22, v21);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v33._unint64_t object = (void *)0x80000001823B3360;
      v33._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0x383231746E4955;
      v34._unint64_t object = (void *)0xE700000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v35);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(unsigned char *)(v28 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC5F8], a3, v32);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized static FixedWidthInteger._convert<A>(from:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t)specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

{
  uint64_t v4;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

{
  uint64_t v4;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

{
  uint64_t v4;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

{
  uint64_t v4;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t object, uint64_t *a7)
{
  uint64_t v37 = a7;
  unint64_t v40 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    uint64_t v23 = v36;
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, char *, uint64_t, uint64_t))v37)(v20, v21, HIDWORD(v34), v40, v14, a5, object);
    if (!v23) {
      unint64_t object = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    uint64_t v37 = (uint64_t *)((char *)v26
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                             + 48));
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v40);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001823B2190;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496;
    v30._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    unint64_t object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA68], v25);
    swift_willThrow();
  }
  return object;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  uint64_t v37 = a7;
  unint64_t v40 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    uint64_t v23 = v36;
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, char *, uint64_t, uint64_t))v37)(v20, v21, HIDWORD(v34), v40, v14, a5, object);
    if (!v23) {
      unint64_t object = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    uint64_t v37 = (uint64_t *)((char *)v26
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                             + 48));
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v40);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001823B2190;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496;
    v30._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    unint64_t object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA68], v25);
    swift_willThrow();
  }
  return object;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  uint64_t v37 = a7;
  unint64_t v40 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    uint64_t v23 = v36;
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, char *, uint64_t, uint64_t))v37)(v20, v21, HIDWORD(v34), v40, v14, a5, object);
    if (!v23) {
      unint64_t object = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    uint64_t v37 = (uint64_t *)((char *)v26
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                             + 48));
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v40);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001823B2190;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496;
    v30._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    unint64_t object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA68], v25);
    swift_willThrow();
  }
  return object;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  uint64_t v37 = a7;
  unint64_t v40 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    uint64_t v23 = v36;
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, char *, uint64_t, uint64_t))v37)(v20, v21, HIDWORD(v34), v40, v14, a5, object);
    if (!v23) {
      unint64_t object = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    uint64_t v37 = (uint64_t *)((char *)v26
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                             + 48));
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v40);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001823B2190;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496;
    v30._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    unint64_t object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA68], v25);
    swift_willThrow();
  }
  return object;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  uint64_t v37 = a7;
  unint64_t v40 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    uint64_t v23 = v36;
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, char *, uint64_t, uint64_t))v37)(v20, v21, HIDWORD(v34), v40, v14, a5, object);
    if (!v23) {
      unint64_t object = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    uint64_t v37 = (uint64_t *)((char *)v26
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                             + 48));
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v40);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001823B2190;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496;
    v30._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    unint64_t object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA68], v25);
    swift_willThrow();
  }
  return object;
}

uint64_t specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, char *a6, char *a7)
{
  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  v75[19] = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBB550];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v44 + 16), v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75[0];
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBB550];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 7630409;
      v63._unint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB550], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  void v75[21];

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  v75[19] = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBB808];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v44 + 16), v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75[0];
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBB808];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 1953384789;
      v63._unint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB808], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int16 v75;
  uint64_t v76;

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC450];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v44 + 16), &v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75;
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC450];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x3631746E4955;
      v63._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC450], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC4C0];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v44 + 16), &v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75;
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC4C0];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x3233746E4955;
      v63._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC4C0], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC098];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v44 + 16), &v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75;
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC098];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 947154505;
      v63._unint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC098], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int16 v75;
  uint64_t v76;

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC0F8];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v44 + 16), &v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75;
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC0F8];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x3631746E49;
      v63._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC0F8], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC150];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v44 + 16), &v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75;
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC150];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x3233746E49;
      v63._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC150], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  void v75[21];

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  v75[19] = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC1C8];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v44 + 16), v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75[0];
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC1C8];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x3436746E49;
      v63._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC1C8], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC358];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v44 + 16), &v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75;
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC358];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x38746E4955;
      v63._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC358], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  void (*v55)(char *, char *, char *);
  char *v56;
  uint64_t v57;
  uint64_t inited;
  char *v59;
  uint64_t *boxed_opaque_existential_1;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  long long v72;
  uint64_t v73;
  unint64_t v74;
  void v75[21];

  uint64_t v8 = v7;
  int64_t v68 = a7;
  id v71 = a5;
  unint64_t v70 = a4;
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  v75[19] = *MEMORY[0x1E4F143B8];
  unint64_t v66 = (char *)*v7;
  uint64_t v69 = *((void *)a6 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v65 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    unint64_t v39 = v68;
    *(&v65 - 8) = a6;
    *(&v65 - 7) = v39;
    *((unsigned char *)&v65 - 48) = v40;
    *((unsigned char *)&v65 - 47) = v41;
    unint64_t v42 = v70;
    *(&v65 - 5) = (char *)MEMORY[0x1E4FBC538];
    *(&v65 - 4) = (char *)v42;
    uint64_t v43 = v66;
    *(&v65 - 3) = v71;
    *(&v65 - 2) = v43;
    uint64_t v44 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v45);
    *(&v65 - 4) = (char *)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:);
    *(&v65 - 3) = v46;
    unint64_t v47 = (char *)*((void *)&v72 + 1);
    *(&v65 - 2) = (char *)v72;
    *(&v65 - 1) = v47;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 40));
    uint64_t v48 = v67;
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0((void *)(v44 + 16), v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v75[0];
    }
  }
  else
  {
    if (v30 == 5 && v72 == 0 && v26 == 160)
    {
      *((void *)&v72 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x1E4FBC538];
      Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v33(v29, v71, v14);
      v33(v23, v29, v14);
      uint64_t v34 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v23, 1, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v70);
        v35(v29, v14);
      }
      else
      {
        uint64_t v55 = *(void (**)(char *, char *, char *))(v34 + 32);
        *(void *)&long long v72 = v32;
        uint64_t v56 = v65;
        v55(v65, v23, a6);
        uint64_t v57 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v59 = v68;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v59;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, char *))(v34 + 16))(boxed_opaque_existential_1, v56, a6);
        uint64_t v73 = v57;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        uint64_t v61 = v56;
        Swift::String v32 = (void *)v72;
        (*(void (**)(char *, char *))(v34 + 8))(v61, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v73 = 0;
      unint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v62._unint64_t object = (void *)0x80000001823B3360;
      v62._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0x3436746E4955;
      v63._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v64._unint64_t object = (void *)0x80000001823B3380;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(*((void *)&v72 + 1) - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    }
    else
    {
      LODWORD(v67) = v26;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t, __n128))(v15 + 16);
      v36(v20, v71, v14, v27);
      ((void (*)(char *, char *, uint64_t))v36)(v17, v20, v14);
      uint64_t v37 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v69 + 48))(v17, 1, a6) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
        v38(v17, v14);
        _CodingPathNode.path.getter(v70);
        v38(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, char *))(v37 + 32))(v11, v17, a6);
        uint64_t v50 = _CodingPathNode.path.getter(v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v51 = swift_initStackObject();
        *(_OWORD *)(v51 + 16) = xmmword_1821037E0;
        unint64_t v52 = v68;
        *(void *)(v51 + 56) = a6;
        *(void *)(v51 + 64) = v52;
        char v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 32));
        (*(void (**)(uint64_t *, char *, char *))(v37 + 16))(v53, v11, a6);
        uint64_t v73 = v50;
        specialized Array.append<A>(contentsOf:)(v51);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, char *))(v37 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBC538], v67, v54);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

void *_s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_s6UInt64V_TG5TA_0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, a2);
}

uint64_t (*specialized JSONDecoderImpl.decode(_:)(uint64_t (*result)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t)))(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    uint64_t v10 = v4(v6, v7, v9, v8, 0, 0, 0, 255);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    uint64_t v10 = v4(v6, v7, v9, v8, 0, 0, 0, 255);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    uint64_t v10 = v4(v6, v7, v9, v8, 0, 0, 0, 255);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    uint64_t v10 = v4(v6, v7, v9, v8, 0, 0, 0, 255);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    uint64_t v10 = v4(v6, v7, v9, v8, 0, 0, 0, 255);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = a8(a1, a2, a3, a4, *(unsigned __int8 *)(v9 + 16), *(unsigned __int8 *)(v9 + 17), a5, a6, a7);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  uint64_t result = a8(a1, a2, a3, a4, *(unsigned __int8 *)(v9 + 32), *(unsigned __int8 *)(v9 + 33), a5, a6, a7);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

unint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned char *, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v10 = v9;
  unint64_t v11 = a4;
  uint64_t v13 = a2;
  unint64_t v14 = result;
  LOBYTE(v175) = a5;
  if (a5)
  {
    if (a2)
    {
      uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
      if (result == 48)
      {
        uint64_t v165 = a7;
        if (v13 >= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v13;
        }
        if (v13 >= 2)
        {
          unint64_t v17 = v14 + v16;
          unsigned __int8 v18 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v16);
          char v19 = 0;
          if (v18 > 0x57u)
          {
            if (v18 == 120) {
              goto LABEL_12;
            }
            if (v18 != 101)
            {
              if (v18 == 88)
              {
LABEL_12:
                uint64_t v20 = v17 + 1;
                uint64_t result = specialized static Comparable.<= infix(_:_:)(v17 + 1, v14 + v13);
                if (result)
                {
LABEL_13:
                  unsigned __int8 v21 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
                  char v22 = 1;
                  if (!UInt8.isValidHexDigit.getter(v21))
                  {
                    unint64_t v140 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v11);
                    uint64_t v142 = v141;
                    uint64_t v144 = v143;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_OWORD *)uint64_t v145 = xmmword_182112860;
                    *(void *)(v145 + 16) = v21;
                    *(void *)(v145 + 24) = v140;
                    *(void *)(v145 + 32) = v142;
                    *(void *)(v145 + 40) = v144;
                    *(unsigned char *)(v145 + 48) = 1;
                    return swift_willThrow();
                  }
                  char v23 = 0;
LABEL_76:
                  uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned char *)v14, v13, v22, v165);
                  if ((v56 & 1) == 0) {
                    return result;
                  }
                  if (v23)
                  {
                    uint64_t v57 = static String._fromUTF8Repairing(_:)();
                    uint64_t v59 = v58;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v60 = v57;
                    *(void *)(v60 + 8) = v59;
                    *(_OWORD *)(v60 + 16) = 0u;
                    *(_OWORD *)(v60 + 32) = 0u;
                    char v61 = 11;
LABEL_234:
                    *(unsigned char *)(v60 + 48) = v61;
                    return swift_willThrow();
                  }
                  return (unint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v175 & 1, (char *)v14, v13, a3, v11, v20, (uint64_t (*)(char **))a8);
                }
                if (v13 - v16 >= 1)
                {
LABEL_221:
                  unsigned __int8 v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v17);
                  unint64_t v124 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v17, a3, v11);
                  uint64_t v126 = v130;
                  uint64_t v128 = v131;
                  uint64_t v132 = v129;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_OWORD *)uint64_t v60 = xmmword_182112860;
LABEL_231:
                  *(void *)(v60 + 16) = v132;
LABEL_232:
                  *(void *)(v60 + 24) = v124;
                  *(void *)(v60 + 32) = v126;
                  *(void *)(v60 + 40) = v128;
                  goto LABEL_233;
                }
                goto LABEL_290;
              }
LABEL_110:
              __int16 v74 = _asciiNumbers.getter();
              unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v16, a3, v11);
              uint64_t v34 = v75;
              uint64_t v36 = v76;
              if (v18 >= v74)
              {
                unsigned int v37 = HIBYTE(v74);
LABEL_112:
                if (v37 >= v18)
                {
LABEL_113:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v60 = v32;
                  *(void *)(v60 + 8) = v34;
                  *(void *)(v60 + 16) = v36;
                  *(void *)(v60 + 24) = 0;
                  *(void *)(v60 + 32) = 0;
                  *(void *)(v60 + 40) = 0;
                  char v61 = 10;
                  goto LABEL_234;
                }
                goto LABEL_184;
              }
              goto LABEL_184;
            }
            goto LABEL_46;
          }
          uint64_t v20 = v14;
          if (v18 != 46 && v18 != 69) {
            goto LABEL_110;
          }
LABEL_47:
          char v23 = v19;
          unint64_t v48 = v14 + v13;
          unint64_t v49 = v14 + v13 - 1;
          uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49);
          unsigned __int8 v170 = result;
          if ((result | 0x20) != 0x65)
          {
            char v22 = 0;
            goto LABEL_76;
          }
          unint64_t v50 = v49 - a3;
          if (v49 >= a3 && a3 + v11 >= v49)
          {
            unint64_t v51 = v11;
            if (a3 + v11 >= v48) {
              unint64_t v11 = v48;
            }
            else {
              v11 += a3;
            }
            if (v11 > a3)
            {
              unint64_t v166 = v49 - a3;
              unint64_t v52 = v51 + a3;
              uint64_t v53 = -(uint64_t)a3;
              uint64_t v13 = 1;
              unint64_t v175 = v51 + a3;
              a8 = -(uint64_t)a3;
              while (2)
              {
                uint64_t v10 = 0;
                unint64_t v14 = 0;
                unint64_t v54 = v52 - a3;
                a7 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))(v53 + a3);
                while (1)
                {
                  if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v54 + v10) < 1)
                  {
                    __break(1u);
LABEL_255:
                    __break(1u);
                    goto LABEL_256;
                  }
                  uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
                  if (result == 10)
                  {
                    BOOL v55 = __OFADD__(v13++, 1);
                    uint64_t v53 = a8;
                    if (v55) {
                      goto LABEL_276;
                    }
                    a3 += v14 + 1;
                    goto LABEL_72;
                  }
                  if (result == 13) {
                    break;
                  }
                  uint64_t v20 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_255;
                  }
                  ++v14;
                  --v10;
                  if (a3 + v14 >= v11) {
                    goto LABEL_74;
                  }
                }
                uint64_t v20 = a3 + v14;
                uint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v49);
                uint64_t v53 = a8;
                if ((result & 1) == 0) {
                  goto LABEL_70;
                }
                if (((a8 + a3 + v14 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v14 + v54) >= 1)
                {
                  uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1);
                  if (result == 10) {
                    uint64_t v20 = a3 + v14 + 1;
                  }
LABEL_70:
                  BOOL v55 = __OFADD__(v13++, 1);
                  if (v55) {
                    goto LABEL_277;
                  }
                  a3 = v20 + 1;
LABEL_72:
                  unint64_t v52 = v175;
                  if (a3 < v11) {
                    continue;
                  }
                  uint64_t v20 = 0;
LABEL_74:
                  unint64_t v50 = v166;
                  goto LABEL_80;
                }
                goto LABEL_281;
              }
            }
            uint64_t v20 = 0;
            uint64_t v13 = 1;
LABEL_80:
            uint64_t v62 = v170;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v108 = 0xD000000000000010;
            *(void *)(v108 + 8) = 0x80000001823ABAE0;
            *(void *)(v108 + 16) = v62;
            *(void *)(v108 + 24) = v13;
            *(void *)(v108 + 32) = v20;
            *(void *)(v108 + 40) = v50;
            *(unsigned char *)(v108 + 48) = 1;
            return swift_willThrow();
          }
          goto LABEL_272;
        }
      }
      else
      {
        if ((result - 58) < 0xF7u)
        {
          switch((char)result)
          {
            case '+':
            case '-':
              if (v13 < 2)
              {
                if (v13 != 1) {
                  goto LABEL_287;
                }
                uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
                unint64_t v110 = v14 - a3;
                if (v14 >= a3)
                {
                  unsigned __int8 v111 = result;
                  uint64_t result = specialized static Comparable.<= infix(_:_:)(v14, a3 + v11);
                  if ((result & 1) == 0) {
                    goto LABEL_289;
                  }
                  uint64_t result = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
                  if (result <= a3)
                  {
                    uint64_t v120 = 0;
                    uint64_t v115 = 1;
                  }
                  else
                  {
                    unint64_t v112 = result;
                    unsigned __int8 v169 = v111;
                    unint64_t v174 = v14 - a3;
                    unint64_t v113 = v11 + a3;
                    uint64_t v114 = -(uint64_t)a3;
                    uint64_t v115 = 1;
                    unint64_t v178 = v113;
                    uint64_t v183 = -(uint64_t)a3;
                    do
                    {
                      uint64_t v116 = 0;
                      uint64_t v117 = 0;
                      unint64_t v118 = v113 - a3;
                      unint64_t v119 = v114 + a3;
                      while (1)
                      {
                        if ((uint64_t)(v119 + v117) < 0 || (uint64_t)(v118 + v116) < 1) {
                          goto LABEL_269;
                        }
                        uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v117);
                        if (result == 10)
                        {
                          BOOL v55 = __OFADD__(v115++, 1);
                          if (v55) {
                            goto LABEL_294;
                          }
                          a3 += v117 + 1;
                          goto LABEL_212;
                        }
                        if (result == 13) {
                          break;
                        }
                        uint64_t v120 = v117 + 1;
                        if (__OFADD__(v117, 1)) {
                          goto LABEL_270;
                        }
                        ++v117;
                        --v116;
                        if (a3 + v117 >= v112) {
                          goto LABEL_214;
                        }
                      }
                      uint64_t v121 = a3 + v117;
                      uint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v117 + 1, v14);
                      if ((result & 1) == 0) {
                        goto LABEL_210;
                      }
                      if (((v183 + a3 + v117 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v117 + v118) < 1) {
                        goto LABEL_298;
                      }
                      uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v117 + 1);
                      if (result == 10) {
                        uint64_t v121 = a3 + v117 + 1;
                      }
LABEL_210:
                      BOOL v55 = __OFADD__(v115++, 1);
                      if (v55) {
                        goto LABEL_295;
                      }
                      a3 = v121 + 1;
LABEL_212:
                      unint64_t v113 = v178;
                      uint64_t v114 = v183;
                    }
                    while (a3 < v112);
                    uint64_t v120 = 0;
LABEL_214:
                    unsigned __int8 v111 = v169;
                    unint64_t v110 = v174;
                  }
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v139 = 0xD000000000000010;
                  *(void *)(v139 + 8) = 0x80000001823ABAE0;
                  *(void *)(v139 + 16) = v111;
                  *(void *)(v139 + 24) = v115;
                  *(void *)(v139 + 32) = v120;
                  *(void *)(v139 + 40) = v110;
                  *(unsigned char *)(v139 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_288;
              }
              uint64_t v20 = v14 + 1;
              unsigned __int8 v38 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
              if (v38 != 48)
              {
                unsigned __int8 v133 = v38;
                if ((v38 - 58) >= 0xF7u) {
                  goto LABEL_257;
                }
                switch(v38)
                {
                  case '.':
LABEL_256:
                    id v152 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
                    uint64_t result = (unint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v152, v153, a3, v11);
                    if (v10) {
                      return result;
                    }
LABEL_257:
                    uint64_t v165 = a7;
                    char v19 = 0;
                    break;
                  case 'N':
                    uint64_t v154 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
                    uint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v154, v155, a3, v11);
                    if (v9) {
                      return result;
                    }
                    uint64_t v165 = a7;
                    char v19 = 1;
                    break;
                  case 'I':
                    unint64_t v134 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
                    uint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v134, v135, a3, v11);
                    if (v9) {
                      return result;
                    }
                    uint64_t v165 = a7;
                    char v19 = 1;
                    break;
                  default:
                    _StringGuts.grow(_:)(20);
                    v156._uint64_t countAndFlagsBits = 0x27207265746661;
                    v156._unint64_t object = (void *)0xE700000000000000;
                    DefaultStringInterpolation.appendLiteral(_:)(v156);
                    unsigned __int8 v157 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
                    unsigned int v158 = (v157 + 1);
                    if ((v157 & 0x80) != 0) {
                      unsigned int v158 = (((v157 & 0x3F) << 8) | (v157 >> 6)) + 33217;
                    }
                    uint64_t v184 = (v158 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v158) >> 3)) & 7)));
                    v159._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v184);
                    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v159);
                    swift_bridgeObjectRelease();
                    v160._uint64_t countAndFlagsBits = 0x6D756E206E692027;
                    v160._unint64_t object = (void *)0xEB00000000726562;
                    DefaultStringInterpolation.appendLiteral(_:)(v160);
                    unint64_t v161 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v11);
                    uint64_t v163 = v162;
                    uint64_t v96 = v164;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v60 = 0;
                    *(void *)(v60 + 8) = 0xE000000000000000;
                    *(void *)(v60 + 16) = v133;
                    *(void *)(v60 + 24) = v161;
                    *(void *)(v60 + 32) = v163;
                    goto LABEL_148;
                }
                goto LABEL_47;
              }
              uint64_t v165 = a7;
              unint64_t v17 = v14 + 2;
              if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
              {
                char v19 = 0;
                goto LABEL_47;
              }
              unsigned __int8 v147 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v17);
              char v19 = 0;
              int v148 = v147;
              if (v147 <= 0x57u) {
                goto LABEL_249;
              }
              switch(v147)
              {
                case 'x':
                  goto LABEL_246;
                case 'e':
                  goto LABEL_47;
                case 'X':
LABEL_246:
                  uint64_t v20 = v14 + 3;
                  if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
                    goto LABEL_13;
                  }
                  if (v13 - 2 >= 1) {
                    goto LABEL_221;
                  }
                  __break(1u);
LABEL_249:
                  if (v148 == 46 || v148 == 69) {
                    goto LABEL_47;
                  }
                  break;
              }
              __int16 v149 = _asciiNumbers.getter();
              unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v17, a3, v11);
              uint64_t v34 = v150;
              uint64_t v36 = v151;
              if (v147 < v149 || HIBYTE(v149) < v147)
              {
                uint64_t v47 = v147;
                goto LABEL_185;
              }
              goto LABEL_113;
            case '.':
              if (v13 >= 1) {
                uint64_t v122 = 1;
              }
              else {
                uint64_t v122 = v13;
              }
              unint64_t v123 = v14 + v122;
              if (specialized Collection.isEmpty.getter(v14 + v122, v13 - v122))
              {
                unint64_t v124 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v123, a3, v11);
                uint64_t v126 = v125;
                uint64_t v128 = v127;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v60 = 0;
                *(void *)(v60 + 8) = 0;
                *(void *)(v60 + 16) = 46;
                goto LABEL_232;
              }
              uint64_t v165 = a7;
              LOBYTE(v132) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v123);
              __int16 v136 = _asciiNumbers.getter();
              if (v132 >= v136
                && HIBYTE(v136) >= v132)
              {
                goto LABEL_45;
              }
              unint64_t v124 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v123, a3, v11);
              uint64_t v126 = v137;
              uint64_t v128 = v138;
              uint64_t v132 = v132;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v60 = 0xD000000000000013;
              *(void *)(v60 + 8) = 0x80000001823ABAC0;
              goto LABEL_231;
            case 'I':
              uint64_t result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, v11);
              goto LABEL_188;
            case 'N':
              uint64_t result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
              if (v9) {
                return result;
              }
              uint64_t v165 = a7;
              char v19 = 1;
              goto LABEL_46;
            default:
              goto LABEL_286;
          }
        }
        uint64_t v165 = a7;
      }
LABEL_45:
      char v19 = 0;
LABEL_46:
      uint64_t v20 = v14;
      goto LABEL_47;
    }
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  if (!a2) {
    goto LABEL_268;
  }
  uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
  if (result == 48)
  {
    if (v13 >= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v13;
    }
    uint64_t v20 = v14;
    if (v13 >= 2)
    {
      unint64_t v27 = v14 + v26;
      unsigned __int8 v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v26);
      unsigned int v29 = v28;
      BOOL v30 = v28 - 46 > 0x37 || ((1 << (v28 - 46)) & 0x80000000800001) == 0;
      uint64_t v20 = v14;
      if (v30)
      {
        unsigned __int8 v18 = v28;
        __int16 v31 = _asciiNumbers.getter();
        unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a3, a4);
        uint64_t v34 = v33;
        uint64_t v36 = v35;
        if (v29 >= v31)
        {
          unsigned int v37 = HIBYTE(v31);
          goto LABEL_112;
        }
LABEL_184:
        uint64_t v47 = v18;
        goto LABEL_185;
      }
    }
LABEL_138:
    unint64_t v11 = a4;
    if ((a6 & 1) != 0 && v20 + 1 < v14 + v13)
    {
      uint64_t v89 = 0;
      while (1)
      {
        uint64_t v90 = v20 + v89;
        if ((*(unsigned __int8 *)(v20 + v89 + 1) | 0x20) == 0x65) {
          break;
        }
        if (~v20 + v13 + v14 == ++v89) {
          goto LABEL_149;
        }
      }
      uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20 + v89);
      if ((result - 58) <= 0xF5u)
      {
        if (((v20 - v14 + v89 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v20 + v13 + v14 - v89) >= 1)
        {
          unsigned __int8 v91 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 1);
          unint64_t v92 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v90 + 1, a3, a4);
          uint64_t v94 = v93;
          uint64_t v96 = v95;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v60 = xmmword_182112860;
          *(void *)(v60 + 16) = v91;
          *(void *)(v60 + 24) = v92;
          *(void *)(v60 + 32) = v94;
LABEL_148:
          *(void *)(v60 + 40) = v96;
          goto LABEL_233;
        }
        goto LABEL_283;
      }
    }
LABEL_149:
    unint64_t v97 = v14 + v13;
    unint64_t v98 = v14 + v13 - 1;
    uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v98);
    if ((result - 58) > 0xF5u)
    {
      uint64_t result = a9(v14, v13);
      if ((v107 & 1) == 0) {
        return result;
      }
      return (unint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v175 & 1, (char *)v14, v13, a3, v11, v20, (uint64_t (*)(char **))a8);
    }
    unint64_t v50 = v98 - a3;
    if (v98 >= a3 && a3 + a4 >= v98)
    {
      if (a3 + a4 >= v97) {
        unint64_t v99 = v97;
      }
      else {
        unint64_t v99 = a3 + a4;
      }
      if (v99 > a3)
      {
        char v168 = result;
        unint64_t v173 = v98 - a3;
        unint64_t v100 = a4 + a3;
        uint64_t v101 = -(uint64_t)a3;
        uint64_t v13 = 1;
        unint64_t v177 = a4 + a3;
        uint64_t v182 = -(uint64_t)a3;
        while (2)
        {
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          unint64_t v104 = v100 - a3;
          unint64_t v105 = v101 + a3;
          while (1)
          {
            if ((uint64_t)(v105 + v103) < 0 || (uint64_t)(v104 + v102) < 1)
            {
              __break(1u);
LABEL_264:
              __break(1u);
              goto LABEL_265;
            }
            uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v103);
            if (result == 10)
            {
              BOOL v55 = __OFADD__(v13++, 1);
              uint64_t v101 = v182;
              if (v55) {
                goto LABEL_278;
              }
              a3 += v103 + 1;
              goto LABEL_174;
            }
            if (result == 13) {
              break;
            }
            uint64_t v20 = v103 + 1;
            if (__OFADD__(v103, 1)) {
              goto LABEL_264;
            }
            ++v103;
            --v102;
            if (a3 + v103 >= v99) {
              goto LABEL_176;
            }
          }
          uint64_t v106 = a3 + v103;
          uint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v103 + 1, v98);
          uint64_t v101 = v182;
          if ((result & 1) == 0) {
            goto LABEL_172;
          }
          if (((v182 + a3 + v103 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v103 + v104) >= 1)
          {
            uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v103 + 1);
            if (result == 10) {
              uint64_t v106 = a3 + v103 + 1;
            }
LABEL_172:
            BOOL v55 = __OFADD__(v13++, 1);
            if (v55) {
              goto LABEL_279;
            }
            a3 = v106 + 1;
LABEL_174:
            unint64_t v100 = v177;
            if (a3 < v99) {
              continue;
            }
            uint64_t v20 = 0;
LABEL_176:
            LOBYTE(result) = v168;
            unint64_t v50 = v173;
            goto LABEL_180;
          }
          goto LABEL_282;
        }
      }
      uint64_t v20 = 0;
      uint64_t v13 = 1;
LABEL_180:
      uint64_t v62 = result;
      goto LABEL_181;
    }
    goto LABEL_274;
  }
  uint64_t v20 = v14;
  if ((result - 58) >= 0xF7u) {
    goto LABEL_138;
  }
  if (result != 45)
  {
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
  if (v13 >= 2)
  {
    uint64_t v20 = v14 + 1;
    unsigned __int8 v39 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
    if (v39 == 48)
    {
      unint64_t v40 = v14 + 2;
      if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
      {
        unsigned __int8 v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v40);
        unsigned __int8 v42 = v41;
        unsigned int v43 = v41;
        if (v41 - 46 > 0x37 || ((1 << (v41 - 46)) & 0x80000000800001) == 0)
        {
          __int16 v44 = _asciiNumbers.getter();
          unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
          uint64_t v34 = v45;
          uint64_t v36 = v46;
          if (v43 >= v44 && HIBYTE(v44) >= v42) {
            goto LABEL_113;
          }
          uint64_t v47 = v42;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v60 = xmmword_182112860;
          *(void *)(v60 + 16) = v47;
          *(void *)(v60 + 24) = v32;
          *(void *)(v60 + 32) = v34;
          *(void *)(v60 + 40) = v36;
LABEL_233:
          char v61 = 1;
          goto LABEL_234;
        }
      }
    }
    else
    {
      unsigned __int8 v77 = v39;
      if ((v39 - 58) < 0xF7u)
      {
        uint64_t result = specialized static Comparable.<= infix(_:_:)(a3, v14 + 1);
        if (result)
        {
          uint64_t result = specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4);
          if (result)
          {
            uint64_t result = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
            if (result > a3)
            {
              unint64_t v78 = result;
              unint64_t v79 = v11 + a3;
              uint64_t v80 = -(uint64_t)a3;
              uint64_t v81 = 1;
              unint64_t v82 = a3;
              unsigned __int8 v167 = v77;
              unint64_t v172 = v79;
              while (2)
              {
                uint64_t v181 = v81;
                uint64_t v83 = 0;
                uint64_t v84 = 0;
                unint64_t v85 = v79 - v82;
                unint64_t v86 = v80 + v82;
                while (1)
                {
                  if ((uint64_t)(v86 + v84) < 0 || (uint64_t)(v85 + v83) < 1) {
                    goto LABEL_271;
                  }
                  uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v82 + v84);
                  if (result == 10) {
                    break;
                  }
                  if (result == 13)
                  {
                    uint64_t v88 = v82 + v84;
                    uint64_t result = specialized static Comparable.<= infix(_:_:)(v82 + v84 + 1, v20);
                    uint64_t v80 = -(uint64_t)a3;
                    if (result)
                    {
                      if (((v82 - a3 + v84 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v84 + v85) < 1) {
                        goto LABEL_299;
                      }
                      uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v82 + v84 + 1);
                      if (result == 10) {
                        uint64_t v88 = v82 + v84 + 1;
                      }
                    }
                    uint64_t v81 = v181 + 1;
                    if (__OFADD__(v181, 1)) {
                      goto LABEL_297;
                    }
                    unint64_t v82 = v88 + 1;
                    goto LABEL_136;
                  }
                  uint64_t v87 = v84 + 1;
                  if (__OFADD__(v84, 1)) {
                    goto LABEL_273;
                  }
                  ++v84;
                  --v83;
                  if (v82 + v84 >= v78)
                  {
                    unsigned __int8 v77 = v167;
                    uint64_t v81 = v181;
                    goto LABEL_241;
                  }
                }
                uint64_t v80 = -(uint64_t)a3;
                uint64_t v81 = v181 + 1;
                if (__OFADD__(v181, 1)) {
                  goto LABEL_296;
                }
                v82 += v84 + 1;
LABEL_136:
                unint64_t v79 = v172;
                if (v82 < v78) {
                  continue;
                }
                break;
              }
              uint64_t v87 = 0;
              unsigned __int8 v77 = v167;
              goto LABEL_241;
            }
            uint64_t v87 = 0;
            uint64_t v81 = 1;
LABEL_241:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v146 = 0xD000000000000013;
            *(void *)(v146 + 8) = 0x80000001823ABBD0;
            *(void *)(v146 + 16) = v77;
            *(void *)(v146 + 24) = v81;
            *(void *)(v146 + 32) = v87;
            *(void *)(v146 + 40) = v20 - a3;
            *(unsigned char *)(v146 + 48) = 1;
            return swift_willThrow();
          }
          goto LABEL_292;
        }
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
        goto LABEL_293;
      }
    }
    goto LABEL_138;
  }
  unint64_t v63 = v14 - a3;
  if (v14 < a3 || a3 + a4 < v14)
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  if (a3 + a4 >= v14 + 1) {
    unint64_t v64 = v14 + 1;
  }
  else {
    unint64_t v64 = a3 + v11;
  }
  if (v64 <= a3)
  {
    uint64_t v72 = 0;
    uint64_t v67 = 1;
LABEL_183:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v109 = 0xD000000000000010;
    *(void *)(v109 + 8) = 0x80000001823ABAE0;
    *(void *)(v109 + 16) = 45;
    *(void *)(v109 + 24) = v67;
    *(void *)(v109 + 32) = v72;
    *(void *)(v109 + 40) = v63;
    *(unsigned char *)(v109 + 48) = 1;
    return swift_willThrow();
  }
  unint64_t v65 = a4 + a3;
  uint64_t v66 = -(uint64_t)a3;
  uint64_t v67 = 1;
  unint64_t v171 = v14 - a3;
  unint64_t v176 = a4 + a3;
  uint64_t v180 = -(uint64_t)a3;
  while (2)
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    unint64_t v70 = v65 - a3;
    unint64_t v71 = v66 + a3;
    while (1)
    {
      if ((uint64_t)(v71 + v69) < 0 || (uint64_t)(v70 + v68) < 1)
      {
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
      uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v69);
      if (result == 10)
      {
        BOOL v55 = __OFADD__(v67++, 1);
        uint64_t v66 = v180;
        if (v55) {
          goto LABEL_284;
        }
        a3 += v69 + 1;
        goto LABEL_105;
      }
      if (result == 13) {
        break;
      }
      uint64_t v72 = v69 + 1;
      if (__OFADD__(v69, 1)) {
        goto LABEL_266;
      }
      ++v69;
      --v68;
      if (a3 + v69 >= v64) {
        goto LABEL_107;
      }
    }
    uint64_t v73 = a3 + v69;
    uint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v69 + 1, v14);
    uint64_t v66 = v180;
    if ((result & 1) == 0) {
      goto LABEL_103;
    }
    if (((v180 + a3 + v69 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v69 + v70) >= 1)
    {
      uint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v69 + 1);
      if (result == 10) {
        uint64_t v73 = a3 + v69 + 1;
      }
LABEL_103:
      BOOL v55 = __OFADD__(v67++, 1);
      if (v55) {
        goto LABEL_285;
      }
      a3 = v73 + 1;
LABEL_105:
      unint64_t v65 = v176;
      if (a3 < v64) {
        continue;
      }
      uint64_t v72 = 0;
LABEL_107:
      unint64_t v63 = v171;
      goto LABEL_183;
    }
    break;
  }
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    int v3 = *a1;
    if (v3 == 43)
    {
      if (a2 >= 2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = &a1[a2];
        uint64_t v16 = a1 + 1;
        while (1)
        {
          unsigned int v17 = *v16 - 48;
          if (v17 > 9) {
            break;
          }
          uint64_t result = 0;
          uint64_t v18 = (unsigned __int128)(v14 * (__int128)10) >> 64;
          uint64_t v19 = 10 * v14;
          BOOL v20 = v18 != v19 >> 63;
          BOOL v12 = __OFADD__(v19, v17);
          uint64_t v14 = v19 + v17;
          char v21 = v12;
          if (!v20 && (v21 & 1) == 0)
          {
            ++v16;
            uint64_t result = v14;
            if (v16 < v15) {
              continue;
            }
          }
          return result;
        }
      }
    }
    else if (v3 == 45)
    {
      if (a2 >= 2)
      {
        uint64_t v4 = 0;
        uint64_t v5 = &a1[a2];
        uint64_t v6 = a1 + 1;
        while (1)
        {
          unsigned int v7 = *v6 - 48;
          if (v7 > 9) {
            break;
          }
          uint64_t result = 0;
          uint64_t v9 = (unsigned __int128)(v4 * (__int128)10) >> 64;
          uint64_t v10 = 10 * v4;
          BOOL v11 = v9 != v10 >> 63;
          BOOL v12 = __OFSUB__(v10, v7);
          uint64_t v4 = v10 - v7;
          char v13 = v12;
          if (!v11 && (v13 & 1) == 0)
          {
            ++v6;
            uint64_t result = v4;
            if (v6 < v5) {
              continue;
            }
          }
          return result;
        }
      }
    }
    else
    {
      if (a2 < 1) {
        return 0;
      }
      uint64_t v22 = 0;
      char v23 = &a1[a2];
      while (1)
      {
        unsigned int v24 = *v2 - 48;
        if (v24 > 9) {
          break;
        }
        uint64_t result = 0;
        uint64_t v25 = (unsigned __int128)(v22 * (__int128)10) >> 64;
        uint64_t v26 = 10 * v22;
        BOOL v27 = v25 != v26 >> 63;
        BOOL v12 = __OFADD__(v26, v24);
        uint64_t v22 = v26 + v24;
        char v28 = v12;
        if (!v27 && (v28 & 1) == 0)
        {
          ++v2;
          uint64_t result = v22;
          if (v2 < v23) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return 0;
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  __int16 v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  __int16 v16;

  if (!a2)
  {
    uint64_t v6 = 0;
    uint64_t v8 = 1;
    return v6 | (v8 << 8);
  }
  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOBYTE(v9) = 0;
      uint64_t v10 = a1 + 1;
      while (1)
      {
        BOOL v11 = *v10 - 48;
        if (v11 > 9) {
          break;
        }
        uint64_t v6 = 0;
        BOOL v12 = 10 * v9;
        uint64_t v8 = 1;
        if ((v12 & 0xF00) == 0)
        {
          uint64_t v9 = (v12 & 0xFE) + v11;
          if (((v9 >> 8) & 1) == 0)
          {
            uint64_t v8 = 0;
            ++v10;
            uint64_t v6 = v9;
            if (v10 < &a1[a2]) {
              continue;
            }
          }
        }
        return v6 | (v8 << 8);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOBYTE(v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        uint64_t v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        uint64_t v6 = 0;
        unsigned int v7 = 10 * v3;
        int v3 = (10 * v3) - v5;
        uint64_t v8 = 1;
        if ((v7 & 0xF00) == 0 && (v3 & 0xFFFFFF00) == 0)
        {
          uint64_t v8 = 0;
          ++v4;
          uint64_t v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }
        return v6 | (v8 << 8);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      return v6 | (v8 << 8);
    }
    LOBYTE(v13) = 0;
    uint64_t v14 = &a1[a2];
    while (1)
    {
      uint64_t v15 = *a1 - 48;
      if (v15 > 9) {
        break;
      }
      uint64_t v6 = 0;
      uint64_t v16 = 10 * v13;
      uint64_t v8 = 1;
      if ((v16 & 0xF00) == 0)
      {
        char v13 = (v16 & 0xFE) + v15;
        if (((v13 >> 8) & 1) == 0)
        {
          uint64_t v8 = 0;
          ++a1;
          uint64_t v6 = v13;
          if (a1 < v14) {
            continue;
          }
        }
      }
      return v6 | (v8 << 8);
    }
  }
  uint64_t v6 = 0;
  uint64_t v8 = 1;
  return v6 | (v8 << 8);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;

  if (!a2)
  {
    uint64_t v6 = 0;
    uint64_t v8 = 1;
    return v6 | (v8 << 16);
  }
  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOWORD(v9) = 0;
      uint64_t v10 = a1 + 1;
      while (1)
      {
        BOOL v11 = *v10 - 48;
        if (v11 > 9) {
          break;
        }
        uint64_t v6 = 0;
        BOOL v12 = 10 * (unsigned __int16)v9;
        uint64_t v8 = 1;
        if ((v12 & 0xF0000) == 0)
        {
          uint64_t v9 = (v12 & 0xFFFE) + v11;
          if ((v9 & 0x10000) == 0)
          {
            uint64_t v8 = 0;
            ++v10;
            uint64_t v6 = v9;
            if (v10 < &a1[a2]) {
              continue;
            }
          }
        }
        return v6 | (v8 << 16);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOWORD(v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        uint64_t v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        uint64_t v6 = 0;
        unsigned int v7 = 10 * (unsigned __int16)v3;
        int v3 = (unsigned __int16)(10 * v3) - v5;
        uint64_t v8 = 1;
        if ((v7 & 0xF0000) == 0 && (v3 & 0xFFFF0000) == 0)
        {
          uint64_t v8 = 0;
          ++v4;
          uint64_t v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }
        return v6 | (v8 << 16);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      return v6 | (v8 << 16);
    }
    LOWORD(v13) = 0;
    uint64_t v14 = &a1[a2];
    while (1)
    {
      uint64_t v15 = *a1 - 48;
      if (v15 > 9) {
        break;
      }
      uint64_t v6 = 0;
      uint64_t v16 = 10 * (unsigned __int16)v13;
      uint64_t v8 = 1;
      if ((v16 & 0xF0000) == 0)
      {
        char v13 = (v16 & 0xFFFE) + v15;
        if ((v13 & 0x10000) == 0)
        {
          uint64_t v8 = 0;
          ++a1;
          uint64_t v6 = v13;
          if (a1 < v14) {
            continue;
          }
        }
      }
      return v6 | (v8 << 16);
    }
  }
  uint64_t v6 = 0;
  uint64_t v8 = 1;
  return v6 | (v8 << 16);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;

  if (!a2)
  {
    uint64_t v6 = 0;
    uint64_t v10 = 1;
    return v6 | (v10 << 16);
  }
  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOWORD(v11) = 0;
      BOOL v12 = a1 + 1;
      while (1)
      {
        char v13 = *v12 - 48;
        if (v13 > 9) {
          break;
        }
        uint64_t v6 = 0;
        uint64_t v14 = 10 * (__int16)v11;
        uint64_t v15 = (__int16)(10 * v11);
        BOOL v11 = v15 + v13;
        uint64_t v16 = v11 != (__int16)(v15 + v13);
        uint64_t v10 = 1;
        if (v15 == v14 && !v16)
        {
          uint64_t v10 = 0;
          ++v12;
          uint64_t v6 = v11;
          if (v12 < &a1[a2]) {
            continue;
          }
        }
        return v6 | (v10 << 16);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOWORD(v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        uint64_t v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        uint64_t v6 = 0;
        unsigned int v7 = 10 * (__int16)v3;
        uint64_t v8 = (__int16)(10 * v3);
        int v3 = v8 - v5;
        uint64_t v9 = v3 != (__int16)(v8 - v5);
        uint64_t v10 = 1;
        if (v8 == v7 && !v9)
        {
          uint64_t v10 = 0;
          ++v4;
          uint64_t v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }
        return v6 | (v10 << 16);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      uint64_t v6 = 0;
      uint64_t v10 = 0;
      return v6 | (v10 << 16);
    }
    LOWORD(v17) = 0;
    uint64_t v18 = &a1[a2];
    while (1)
    {
      uint64_t v19 = *a1 - 48;
      if (v19 > 9) {
        break;
      }
      uint64_t v6 = 0;
      BOOL v20 = 10 * (__int16)v17;
      char v21 = (__int16)(10 * v17);
      unsigned int v17 = v21 + v19;
      uint64_t v22 = v17 != (__int16)(v21 + v19);
      uint64_t v10 = 1;
      if (v21 == v20 && !v22)
      {
        uint64_t v10 = 0;
        ++a1;
        uint64_t v6 = v17;
        if (a1 < v18) {
          continue;
        }
      }
      return v6 | (v10 << 16);
    }
  }
  uint64_t v6 = 0;
  uint64_t v10 = 1;
  return v6 | (v10 << 16);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;

  if (!a2)
  {
    uint64_t v6 = 0;
    uint64_t v10 = 1;
    return v6 | (v10 << 8);
  }
  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOBYTE(v11) = 0;
      BOOL v12 = a1 + 1;
      while (1)
      {
        char v13 = *v12 - 48;
        if (v13 > 9) {
          break;
        }
        uint64_t v6 = 0;
        uint64_t v14 = 10 * (char)v11;
        uint64_t v15 = (char)(10 * v11);
        BOOL v11 = v15 + (char)v13;
        uint64_t v16 = v11 != (char)(v15 + v13);
        uint64_t v10 = 1;
        if (v15 == v14 && !v16)
        {
          uint64_t v10 = 0;
          ++v12;
          uint64_t v6 = v11;
          if (v12 < &a1[a2]) {
            continue;
          }
        }
        return v6 | (v10 << 8);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOBYTE(v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        uint64_t v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        uint64_t v6 = 0;
        unsigned int v7 = 10 * (char)v3;
        uint64_t v8 = (char)(10 * v3);
        int v3 = v8 - (char)v5;
        uint64_t v9 = v3 != (char)(v8 - v5);
        uint64_t v10 = 1;
        if (v8 == v7 && !v9)
        {
          uint64_t v10 = 0;
          ++v4;
          uint64_t v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }
        return v6 | (v10 << 8);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      uint64_t v6 = 0;
      uint64_t v10 = 0;
      return v6 | (v10 << 8);
    }
    LOBYTE(v17) = 0;
    uint64_t v18 = &a1[a2];
    while (1)
    {
      uint64_t v19 = *a1 - 48;
      if (v19 > 9) {
        break;
      }
      uint64_t v6 = 0;
      BOOL v20 = 10 * (char)v17;
      char v21 = (char)(10 * v17);
      unsigned int v17 = v21 + (char)v19;
      uint64_t v22 = v17 != (char)(v21 + v19);
      uint64_t v10 = 1;
      if (v21 == v20 && !v22)
      {
        uint64_t v10 = 0;
        ++a1;
        uint64_t v6 = v17;
        if (a1 < v18) {
          continue;
        }
      }
      return v6 | (v10 << 8);
    }
  }
  uint64_t v6 = 0;
  uint64_t v10 = 1;
  return v6 | (v10 << 8);
}

{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  if (!a2) {
    return 0;
  }
  uint64_t v2 = a1;
  int v3 = *a1;
  if (v3 == 43)
  {
    if (a2 >= 2)
    {
      char v23 = 0;
      unsigned int v24 = 0;
      uint64_t v25 = &a1[a2];
      uint64_t v26 = a1 + 1;
      while (1)
      {
        BOOL v27 = *v26 - 48;
        if (v27 > 9) {
          break;
        }
        if ((v24 & 0x8000000000000000) != 0)
        {
          uint64_t v10 = v23 == 0;
          unint64_t v32 = -v23;
          uint64_t v33 = -(uint64_t)(v24 + !v10);
          uint64_t v34 = !is_mul_ok(v33, 0xAuLL);
          uint64_t v10 = __CFADD__(((unint64_t)v32 * (unsigned __int128)0xAuLL) >> 64, 10 * v33);
          uint64_t v35 = (__PAIR128__(v33, v32) * 0xA) >> 64;
          if (v10) {
            uint64_t v34 = 1;
          }
          if (v34) {
            return 0;
          }
          uint64_t v36 = 10 * v32;
          uint64_t v10 = v36 == 0;
          BOOL v30 = -v36;
          unsigned int v29 = -(v35 + !v10);
          LOBYTE(v31) = v30 != 0;
        }
        else
        {
          char v28 = !is_mul_ok(v24, 0xAuLL);
          uint64_t v10 = __CFADD__(((unint64_t)v23 * (unsigned __int128)0xAuLL) >> 64, 10 * v24);
          unsigned int v29 = (__PAIR128__(v24, v23) * 0xA) >> 64;
          if (v10) {
            char v28 = 1;
          }
          if (v28) {
            return 0;
          }
          BOOL v30 = 10 * v23;
          __int16 v31 = v29 >> 63;
        }
        uint64_t result = 0;
        char v21 = __OFADD__(__CFADD__(v30, v27), v29);
        unsigned int v24 = (__PAIR128__(v29, v30) + v27) >> 64;
        char v23 = v30 + v27;
        unsigned int v37 = v21;
        if (v31 & 1) != 0 || (v37) {
          return result;
        }
        if (++v26 >= v25) {
          return v23;
        }
      }
    }
  }
  else if (v3 == 45)
  {
    if (a2 >= 2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = &a1[a2];
      unsigned int v7 = a1 + 1;
      while (1)
      {
        uint64_t v8 = *v7 - 48;
        if (v8 > 9) {
          break;
        }
        if ((v5 & 0x8000000000000000) != 0)
        {
          uint64_t v10 = v4 == 0;
          uint64_t v14 = -v4;
          uint64_t v15 = -(uint64_t)(v5 + !v10);
          uint64_t v16 = !is_mul_ok(v15, 0xAuLL);
          uint64_t v10 = __CFADD__((v14 * (unsigned __int128)0xAuLL) >> 64, 10 * v15);
          unsigned int v17 = (__PAIR128__(v15, v14) * 0xA) >> 64;
          if (v10) {
            uint64_t v16 = 1;
          }
          if (v16) {
            return 0;
          }
          uint64_t v18 = 10 * v14;
          uint64_t v10 = v18 == 0;
          BOOL v12 = -v18;
          BOOL v11 = -(v17 + !v10);
          LOBYTE(v13) = v12 != 0;
        }
        else
        {
          uint64_t v9 = !is_mul_ok(v5, 0xAuLL);
          uint64_t v10 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v5);
          BOOL v11 = (__PAIR128__(v5, v4) * 0xA) >> 64;
          if (v10) {
            uint64_t v9 = 1;
          }
          if (v9) {
            return 0;
          }
          BOOL v12 = 10 * v4;
          char v13 = v11 >> 63;
        }
        uint64_t result = 0;
        char v21 = __OFSUB__(__PAIR128__(v11, v12), v8);
        BOOL v20 = v12 - v8;
        uint64_t v5 = (__PAIR128__(v11, v12) - v8) >> 64;
        uint64_t v4 = v20;
        uint64_t v22 = v21;
        if (v13 & 1) != 0 || (v22) {
          return result;
        }
        if (++v7 >= v6) {
          return v20;
        }
      }
    }
  }
  else
  {
    if (a2 < 1) {
      return 0;
    }
    char v23 = 0;
    unsigned __int8 v38 = 0;
    unsigned __int8 v39 = &a1[a2];
    while (1)
    {
      unint64_t v40 = *v2 - 48;
      if (v40 > 9) {
        break;
      }
      if ((v38 & 0x8000000000000000) != 0)
      {
        uint64_t v10 = v23 == 0;
        uint64_t v45 = -v23;
        uint64_t v46 = -(uint64_t)(v38 + !v10);
        uint64_t v47 = !is_mul_ok(v46, 0xAuLL);
        uint64_t v10 = __CFADD__(((unint64_t)v45 * (unsigned __int128)0xAuLL) >> 64, 10 * v46);
        unint64_t v48 = (__PAIR128__(v46, v45) * 0xA) >> 64;
        if (v10) {
          uint64_t v47 = 1;
        }
        if (v47) {
          return 0;
        }
        unint64_t v49 = 10 * v45;
        uint64_t v10 = v49 == 0;
        unsigned int v43 = -v49;
        unsigned __int8 v42 = -(v48 + !v10);
        LOBYTE(v44) = v43 != 0;
      }
      else
      {
        unsigned __int8 v41 = !is_mul_ok(v38, 0xAuLL);
        uint64_t v10 = __CFADD__(((unint64_t)v23 * (unsigned __int128)0xAuLL) >> 64, 10 * v38);
        unsigned __int8 v42 = (__PAIR128__(v38, v23) * 0xA) >> 64;
        if (v10) {
          unsigned __int8 v41 = 1;
        }
        if (v41) {
          return 0;
        }
        unsigned int v43 = 10 * v23;
        __int16 v44 = v42 >> 63;
      }
      uint64_t result = 0;
      char v21 = __OFADD__(__CFADD__(v43, v40), v42);
      unsigned __int8 v38 = (__PAIR128__(v42, v43) + v40) >> 64;
      char v23 = v43 + v40;
      unint64_t v50 = v21;
      if (v44 & 1) != 0 || (v50) {
        return result;
      }
      if (++v2 >= v39) {
        return v23;
      }
    }
  }
  return 0;
}

{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t result;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;

  if (!a2) {
    return 0;
  }
  uint64_t v2 = a1;
  int v3 = *a1;
  if (v3 == 43)
  {
    if (a2 >= 2)
    {
      uint64_t v4 = 0;
      uint64_t v16 = 0;
      unsigned int v17 = &a1[a2];
      uint64_t v18 = a1 + 1;
      while (1)
      {
        uint64_t v19 = *v18 - 48;
        if (v19 > 9) {
          break;
        }
        uint64_t result = 0;
        BOOL v20 = !is_mul_ok(v16, 0xAuLL);
        BOOL v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v16);
        char v21 = (__PAIR128__(v16, v4) * 0xA) >> 64;
        if (v11) {
          BOOL v20 = 1;
        }
        uint64_t v22 = 10 * v4;
        BOOL v11 = __CFADD__(v22, v19);
        uint64_t v4 = v22 + v19;
        char v23 = v11;
        BOOL v11 = __CFADD__(v11, v21);
        uint64_t v16 = v23 + v21;
        unsigned int v24 = v11;
        if (v20 || (v24 & 1) != 0) {
          return result;
        }
        if (++v18 >= v17) {
          return v4;
        }
      }
    }
  }
  else if (v3 == 45)
  {
    if (a2 >= 2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = &a1[a2];
      unsigned int v7 = a1 + 1;
      while (1)
      {
        uint64_t v8 = *v7 - 48;
        if (v8 > 9) {
          break;
        }
        uint64_t result = 0;
        uint64_t v10 = !is_mul_ok(v5, 0xAuLL);
        BOOL v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v5);
        BOOL v12 = (__PAIR128__(v5, v4) * 0xA) >> 64;
        if (v11) {
          uint64_t v10 = 1;
        }
        char v13 = 10 * v4;
        BOOL v11 = v13 >= v8;
        uint64_t v4 = v13 - v8;
        uint64_t v14 = v11;
        BOOL v11 = v12 >= !v11;
        uint64_t v5 = v12 - !v14;
        uint64_t v15 = !v11;
        if (v10 || (v15 & 1) != 0) {
          return result;
        }
        if (++v7 >= v6) {
          return v4;
        }
      }
    }
  }
  else
  {
    if (a2 < 1) {
      return 0;
    }
    uint64_t v4 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = &a1[a2];
    while (1)
    {
      BOOL v27 = *v2 - 48;
      if (v27 > 9) {
        break;
      }
      uint64_t result = 0;
      char v28 = !is_mul_ok(v25, 0xAuLL);
      BOOL v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v25);
      unsigned int v29 = (__PAIR128__(v25, v4) * 0xA) >> 64;
      if (v11) {
        char v28 = 1;
      }
      BOOL v30 = 10 * v4;
      BOOL v11 = __CFADD__(v30, v27);
      uint64_t v4 = v30 + v27;
      __int16 v31 = v11;
      BOOL v11 = __CFADD__(v11, v29);
      uint64_t v25 = v31 + v29;
      unint64_t v32 = v11;
      if (v28 || (v32 & 1) != 0) {
        return result;
      }
      if (++v2 >= v26) {
        return v4;
      }
    }
  }
  return 0;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned char *, uint64_t, uint64_t), uint64_t (*a8)(char *, uint64_t), uint64_t (*a9)(char **))
{
  if (a5)
  {
    uint64_t result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v9)
    {
      uint64_t v18 = result;
      __int16 v19 = v17;
      uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)(__s1, a2, v17 & 1, a7);
      if (v20)
      {
        if ((v19 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(unsigned char *)(v24 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v18, a9);
      }
    }
  }
  else
  {
    uint64_t result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v9)
    {
      uint64_t v18 = result;
      uint64_t result = (char *)a8(__s1, a2);
      if (v26) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v18, a9);
      }
    }
  }
  return result;
}

unsigned __int8 *specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)(unsigned __int8 *result, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_33;
  }
  BOOL v11 = result;
  int v12 = *result;
  if (v12 == 48)
  {
    if (a2 >= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = a2;
    }
    specialized static JSONScanner.validateLeadingZero(in:fullSource:)(&result[v13], a2 - v13, a4, a5);
    unint64_t v6 = (unint64_t)v11;
    if (v5) {
      return (unsigned __int8 *)v6;
    }
    goto LABEL_15;
  }
  if ((v12 - 58) > 0xFFFFFFF6)
  {
    unint64_t v6 = (unint64_t)result;
    goto LABEL_15;
  }
  if (v12 != 45)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a2 < 2)
  {
    unint64_t v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000010;
    *(void *)(v23 + 8) = 0x80000001823ABAE0;
    *(void *)(v23 + 16) = 45;
LABEL_28:
    *(void *)(v23 + 24) = v18;
    *(void *)(v23 + 32) = v20;
    *(void *)(v23 + 40) = v22;
    *(unsigned char *)(v23 + 48) = 1;
    swift_willThrow();
    return (unsigned __int8 *)v6;
  }
  unint64_t v6 = (unint64_t)(result + 1);
  uint64_t v14 = result[1];
  if (v14 == 48)
  {
    specialized static JSONScanner.validateLeadingZero(in:fullSource:)(result + 2, a2 - 2, a4, a5);
    if (v5) {
      return (unsigned __int8 *)v6;
    }
  }
  else if ((v14 - 58) <= 0xFFFFFFF6)
  {
    unint64_t v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)(result + 1), a4, a5);
    uint64_t v20 = v30;
    uint64_t v22 = v31;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000013;
    *(void *)(v23 + 8) = 0x80000001823ABBD0;
    *(void *)(v23 + 16) = v14;
    goto LABEL_28;
  }
LABEL_15:
  if ((a3 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v15 = (unsigned __int8 *)(v6 + 1);
  if (v6 + 1 >= (unint64_t)&v11[a2]) {
    goto LABEL_26;
  }
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = v15[v16];
    if ((v17 | 0x20) == 0x65) {
      break;
    }
    if (&v11[a2 + ~v6] == (unsigned __int8 *)++v16) {
      goto LABEL_26;
    }
  }
  uint64_t result = &v15[v16];
  if (*(unsigned __int8 *)(v6 + v16) - 58 > 0xFFFFFFF5)
  {
LABEL_26:
    char v26 = &v11[a2 - 1];
    uint64_t v27 = *v26;
    if ((v27 - 58) <= 0xFFFFFFF5)
    {
      unint64_t v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v26, a4, a5);
      uint64_t v20 = v28;
      uint64_t v22 = v29;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v23 = 0xD000000000000010;
      *(void *)(v23 + 8) = 0x80000001823ABAE0;
      *(void *)(v23 + 16) = v27;
      goto LABEL_28;
    }
    return (unsigned __int8 *)v6;
  }
  if (((v6 - (void)v11 + v16 + 1) & 0x8000000000000000) == 0 && (uint64_t)&v11[a2 + ~v6 - v16] >= 1)
  {
    unint64_t v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    uint64_t v20 = v24;
    uint64_t v22 = v25;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_182112860;
    *(void *)(v23 + 16) = v17;
    goto LABEL_28;
  }
LABEL_34:
  __break(1u);
  return result;
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, a2, a3, a4, a5);
}

ValueMetadata *type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return &type metadata for String.LocalizationValue.StringInterpolation;
}

uint64_t URLComponents.queryItems.setter(Swift::OpaquePointer_optional a1)
{
  URLComponents._URLComponents.setQueryItems(_:)(a1);

  return swift_bridgeObjectRelease();
}

NSSet protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Set<A>()
{
  return Set._bridgeToObjectiveC()();
}

void *_NSSwiftCalendar.components(_:from:to:options:)@<X0>(int a1@<W0>, const void *a2@<X1>, const void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v10 = v9 + 4;
  BOOL v11 = v9 + 8;
  os_unfair_lock_lock(v9 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v10, &v17);
  os_unfair_lock_unlock(v11);
  long long v16 = v17;
  uint64_t v12 = _fromNSCalendarUnits(_:)(a1);
  memcpy(__dst, a2, 0x11AuLL);
  memcpy(v14, a3, 0x11AuLL);
  Calendar.dateComponents(_:from:to:)(v12, __dst, v14, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100) != 0)
  {
    __src[28] = __src[32];
    LOBYTE(__src[29]) = __src[33];
  }
  return memcpy(a4, __src, 0x11AuLL);
}

void *Calendar.dateComponents(_:from:to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void (*v17)(double *__return_ptr, long long *, uint64_t, uint64_t);
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v21;
  void (*v22)(double *__return_ptr, long long *, uint64_t, uint64_t);
  double v23;
  double v25;
  double v26;
  uint64_t ObjectType;
  double v30;
  double v31;
  uint64_t v32;
  long long v33;
  unsigned char v34[266];

  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unsigned int v7 = a2 + 2;
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v10 = a3 + 2;
  uint64_t v11 = *v4;
  uint64_t v12 = v4[1];
  if (*a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&uint64_t v33 = v5;
    *((void *)&v33 + 1) = v6;
    memcpy(v34, v7, sizeof(v34));
    uint64_t v13 = v8;
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    long long v16 = v10;
    long long v17 = *(void (**)(double *__return_ptr, long long *, uint64_t, uint64_t))(v6 + 176);
    swift_unknownObjectRetain();
    v17(&v31, &v33, ObjectType, v6);
    uint64_t v10 = v16;
    uint64_t v12 = v15;
    uint64_t v11 = v14;
    uint64_t v8 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v18 = swift_getObjectType();
    *(void *)&uint64_t v33 = 0;
    *((void *)&v33 + 1) = v6;
    memcpy(v34, v7, sizeof(v34));
    (*(void (**)(double *__return_ptr, long long *, uint64_t, uint64_t))(v12 + 176))(&v31, &v33, v18, v12);
  }
  uint64_t v19 = v31;
  uint64_t v20 = v32;
  uint64_t v21 = swift_getObjectType();
  if (v9)
  {
    *(void *)&uint64_t v33 = v9;
    *((void *)&v33 + 1) = v8;
    memcpy(v34, v10, sizeof(v34));
    uint64_t v22 = *(void (**)(double *__return_ptr, long long *, uint64_t, uint64_t))(v8 + 176);
    swift_unknownObjectRetain();
    v22(&v31, &v33, v21, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    *(void *)&uint64_t v33 = 0;
    *((void *)&v33 + 1) = v8;
    memcpy(v34, v10, sizeof(v34));
    (*(void (**)(double *__return_ptr, long long *, uint64_t, uint64_t))(v12 + 176))(&v31, &v33, v21, v12);
  }
  uint64_t v23 = v31;
  if ((v20 | v32))
  {
    *(void *)&uint64_t v33 = v11;
    *((void *)&v33 + 1) = v12;
    uint64_t v31 = 0.0;
    unint64_t v32 = 0;
    swift_unknownObjectRetain();
    return (void *)DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v33, (uint64_t *)&v31, 0, 1, 0, 1, 0, 1, (uint64_t)a4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1);
  }
  else
  {
    *(void *)&uint64_t v33 = v11;
    *((void *)&v33 + 1) = v12;
    if (v19 <= 1.59271755e13) {
      uint64_t v25 = v19;
    }
    else {
      uint64_t v25 = 1.59271755e13;
    }
    char v26 = fmax(v25, -2.11845067e11);
    if (v31 > 1.59271755e13) {
      uint64_t v23 = 1.59271755e13;
    }
    uint64_t v30 = fmax(v23, -2.11845067e11);
    uint64_t v31 = v26;
    return Calendar.dateComponents(_:from:to:)(a1, &v31, &v30, a4);
  }
}

__C::_NSRange __swiftcall _NSSwiftCalendar.range(of:in:for:)(NSCalendarUnit of, NSCalendarUnit in, Foundation::Date a3)
{
  double v6 = *v3;
  _fromNSCalendarUnit(_:)(of, (char *)&v27);
  char v7 = v27;
  if (v27 != 18)
  {
    _fromNSCalendarUnit(_:)(in, (char *)&v27);
    char v8 = v27;
    if (v27 != 18)
    {
      uint64_t v9 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
      uint64_t v10 = v9 + 4;
      uint64_t v11 = v9 + 8;
      os_unfair_lock_lock(v9 + 8);
      closure #1 in _NSSwiftCalendar.calendar.getter(v10, &v27);
      os_unfair_lock_unlock(v11);
      uint64_t v12 = *((void *)&v27 + 1);
      v26[0] = v7;
      char v25 = v8;
      double v13 = 1.59271755e13;
      if (v6 <= 1.59271755e13) {
        double v13 = v6;
      }
      double v14 = fmax(v13, -2.11845067e11);
      uint64_t ObjectType = swift_getObjectType();
      double v24 = v14;
      uint64_t v16 = (*(uint64_t (**)(unsigned char *, char *, double *, uint64_t, uint64_t))(v12 + 144))(v26, &v25, &v24, ObjectType, v12);
      uint64_t v18 = v17;
      char v20 = v19;
      swift_unknownObjectRelease();
      if ((v20 & 1) == 0)
      {
        Swift::Int v21 = v18 - v16;
        if (!__OFSUB__(v18, v16)) {
          goto LABEL_10;
        }
        __break(1u);
      }
    }
  }
  uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  Swift::Int v21 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
  Swift::Int v22 = v16;
  result.length = v21;
  result.location = v22;
  return result;
}

uint64_t protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarGregorian(unsigned char *a1, unsigned char *a2, double *a3)
{
  return _CalendarGregorian.range(of:in:for:)(a1, a2, a3);
}

uint64_t _CalendarGregorian.range(of:in:for:)(unsigned char *a1, unsigned char *a2, double *a3)
{
  unsigned int v4 = *a2;
  if (v4 <= 0xF && ((1 << v4) & 0xE100) != 0) {
    return 0;
  }
  unsigned int v7 = *a1;
  double v8 = *a3;
  switch(*a1)
  {
    case 4:
      if (v4 - 4 < 3) {
        return 0;
      }
      char v9 = 4;
      goto LABEL_21;
    case 5:
      if (v4 - 5 < 2) {
        return 0;
      }
      char v9 = 5;
      goto LABEL_21;
    case 6:
      if (v4 == 6) {
        return 0;
      }
      char v9 = 6;
      goto LABEL_21;
    case 7:
      if (v4 - 3 < 5) {
        return 0;
      }
      char v9 = 7;
      goto LABEL_21;
    case 0xD:
      char v9 = 13;
LABEL_21:
      LOBYTE(v16[0]) = v9;
LABEL_22:
      uint64_t result = _CalendarGregorian.maximumRange(of:)((unsigned __int8 *)v16);
      break;
    default:
      switch(*a2)
      {
        case 0:
          if (v7 > 0xB) {
            goto LABEL_47;
          }
          uint64_t result = 1;
          if (((1 << v7) & 0xE0E) != 0)
          {
            LOBYTE(v16[0]) = v7;
            goto LABEL_22;
          }
          if (v7 != 8) {
            goto LABEL_47;
          }
          return result;
        case 1:
          uint64_t result = 1;
          switch(v7)
          {
            case 2u:
              return result;
            case 3u:
            case 0x11u:
              uint64_t v15 = 2;
              double v14 = v8;
              *(_OWORD *)double v13 = *(_OWORD *)(v3 + 104);
              swift_unknownObjectRetain();
              _CalendarGregorian.dateComponents(_:from:in:)(&v15, &v14, v13, v16);
              swift_unknownObjectRelease();
              uint64_t result = outlined release of DateComponents((uint64_t)v16);
              if (v17) {
                __break(1u);
              }
              else {
                uint64_t result = 1;
              }
              break;
            case 8u:
            case 0xAu:
              LOBYTE(v13[0]) = v7;
              char v11 = 1;
              goto LABEL_41;
            case 9u:
            case 0xBu:
              LOBYTE(v13[0]) = v7;
              char v10 = 1;
              goto LABEL_43;
            default:
              goto LABEL_47;
          }
          return result;
        case 2:
          switch(*a1)
          {
            case 3:
            case 8:
            case 0xA:
              LOBYTE(v13[0]) = *a1;
              char v10 = 2;
              goto LABEL_43;
            case 0xB:
              LOBYTE(v13[0]) = 11;
              char v12 = 2;
              goto LABEL_45;
            default:
              goto LABEL_47;
          }
        case 9:
          if (v7 > 0xB) {
            goto LABEL_47;
          }
          if (((1 << v7) & 0x508) != 0)
          {
            LOBYTE(v13[0]) = *a1;
            char v11 = 9;
            goto LABEL_41;
          }
          if (((1 << v7) & 0x804) == 0) {
            goto LABEL_47;
          }
          LOBYTE(v13[0]) = *a1;
          char v12 = 9;
LABEL_45:
          LOBYTE(v15) = v12;
          v16[0] = v8;
          uint64_t result = _CalendarGregorian._algorithmC(smaller:larger:at:)((char *)v13, (char *)&v15, v16);
          break;
        case 0xA:
          if (v7 != 3) {
            goto LABEL_47;
          }
          v16[0] = *a3;
          return _CalendarGregorian._algorithmD(at:)(v16, v8);
        case 0xC:
          if (v7 > 0xB) {
            goto LABEL_47;
          }
          if (((1 << v7) & 0xA04) != 0)
          {
            LOBYTE(v13[0]) = *a1;
            char v10 = 12;
LABEL_43:
            LOBYTE(v15) = v10;
            v16[0] = v8;
            uint64_t result = _CalendarGregorian._algorithmA(smaller:larger:at:)((char *)v13, (char *)&v15, v16);
          }
          else if (((1 << v7) & 0x108) != 0)
          {
            LOBYTE(v13[0]) = *a1;
            char v11 = 12;
LABEL_41:
            LOBYTE(v15) = v11;
            v16[0] = v8;
            uint64_t result = _CalendarGregorian._algorithmB(smaller:larger:at:)((char *)v13, (char *)&v15, v16);
          }
          else
          {
LABEL_47:
            uint64_t result = 0;
          }
          break;
        default:
          goto LABEL_47;
      }
      break;
  }
  return result;
}

__C::_NSRange __swiftcall _NSSwiftCalendar.maximumRange(of:)(NSCalendarUnit of)
{
  _fromNSCalendarUnit(_:)(of, (char *)&v16);
  char v2 = v16;
  if (v16 != 18)
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    unsigned int v4 = v3 + 4;
    uint64_t v5 = v3 + 8;
    os_unfair_lock_lock(v3 + 8);
    closure #1 in _NSSwiftCalendar.calendar.getter(v4, &v16);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *((void *)&v16 + 1);
    uint64_t ObjectType = swift_getObjectType();
    v15[0] = v2;
    uint64_t v8 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v6 + 136))(v15, ObjectType, v6);
    uint64_t v10 = v9;
    LOBYTE(v5) = v11;
    swift_unknownObjectRelease();
    if ((v5 & 1) == 0)
    {
      Swift::Int v12 = v10 - v8;
      if (!__OFSUB__(v10, v8)) {
        goto LABEL_7;
      }
      __break(1u);
    }
  }
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  Swift::Int v12 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_7:
  Swift::Int v13 = v8;
  result.length = v12;
  result.location = v13;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.nextDate(after:matching:value:options:)(Foundation::Date after, NSCalendarUnit matching, Swift::Int value, NSCalendarOptions options)
{
  char v7 = v4;
  uint64_t v9 = v5;
  uint64_t v10 = *(void *)matching;
  if ((v4 & 2) != 0) {
    char v11 = 3;
  }
  else {
    char v11 = 0;
  }
  if ((v4 & 0x100) != 0) {
    char v12 = 2;
  }
  else {
    char v12 = v11;
  }
  if ((v4 & 0x200) != 0) {
    char v12 = 1;
  }
  if ((v4 & 0x400) != 0) {
    char v13 = 0;
  }
  else {
    char v13 = v12;
  }
  BOOL v14 = (v4 & 0x3000) == 0x2000;
  char v15 = _fromNSCalendarUnit(_:)(value, __src);
  char v17 = __src[0];
  if (__src[0] == 18)
  {
    *(void *)uint64_t v9 = 0;
    *(unsigned char *)(v9 + 8) = 1;
  }
  else
  {
    __dst[0] = 0uLL;
    v24[0] = 0;
    v24[1] = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v24, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    LOBYTE(__dst[0]) = v17;
    v30.value = options;
    v30.is_nil = 0;
    DateComponents.setValue(_:for:)(v30, (Foundation::Calendar::Component)__dst);
    uint64_t v18 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
    char v19 = v18 + 4;
    char v20 = v18 + 8;
    os_unfair_lock_lock(v18 + 8);
    closure #1 in _NSSwiftCalendar.calendar.getter(v19, &v28);
    os_unfair_lock_unlock(v20);
    long long v26 = v28;
    uint64_t v25 = v10;
    memcpy(__dst, __src, 0x11AuLL);
    memcpy(v24, __src, 0x11AuLL);
    char v23 = v13;
    BOOL v22 = v14;
    BOOL v21 = (v7 & 4) != 0;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(&v25, v24, &v23, (char *)&v22, (char *)&v21, v9);
    swift_unknownObjectRelease();
    char v15 = outlined release of DateComponents((uint64_t)__dst);
  }
  result.value = *(Foundation::Date *)&v16;
  result.is_nil = v15;
  return result;
}

NSComparisonResult __swiftcall _NSSwiftCalendar.compare(_:to:toUnitGranularity:)(Foundation::Date _, Foundation::Date to, NSCalendarUnit toUnitGranularity)
{
  uint64_t v5 = *(void *)toUnitGranularity;
  _fromNSCalendarUnit(_:)(v3, (char *)_a);
  NSComparisonResult v6 = NSOrderedSame;
  if (LOBYTE(_a[0]._time) != 18)
  {
    char v7 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    uint64_t v8 = v7 + 4;
    uint64_t v9 = v7 + 8;
    os_unfair_lock_lock(v7 + 8);
    closure #1 in _NSSwiftCalendar.calendar.getter(v8, _a);
    os_unfair_lock_unlock(v9);
    long long v13 = *(_OWORD *)&_a[0]._time;
    uint64_t v12 = v5;
    NSComparisonResult v6 = Calendar.compare(_:to:toGranularity:)(_a[0], v10, (Foundation::Calendar::Component)&v12);
    swift_unknownObjectRelease();
  }
  return v6;
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:to:)(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  NSComparisonResult v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v12);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v12[1];
  uint64_t ObjectType = swift_getObjectType();
  v12[0] = v3;
  uint64_t v10 = v5;
  uint64_t v11 = v4;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(v7 + 208))(v12, &v11, &v10, ObjectType, v7);

  return swift_unknownObjectRelease();
}

void *_NSSwiftCalendar.components(_:from:to:options:)@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  uint64_t v10 = _fromNSCalendarUnits(_:)(a1);
  uint64_t v11 = *(os_unfair_lock_s **)&v4[OBJC_IVAR____NSSwiftCalendar__lock];
  uint64_t v12 = v11 + 4;
  long long v13 = v11 + 8;
  os_unfair_lock_lock(v11 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v12, &v26);
  os_unfair_lock_unlock(v13);
  long long v25 = v26;
  uint64_t v23 = v9;
  uint64_t v24 = v8;
  Calendar.dateComponents(_:from:to:)(v10, (double *)&v24, (double *)&v23, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100000) != 0)
  {
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v14 = swift_dynamicCastClass();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + OBJC_IVAR____NSSwiftCalendar__lock);
      Swift::Double v16 = (_OWORD *)(v15 + 16);
      char v17 = (os_unfair_lock_s *)(v15 + 32);
      id v18 = v5;
      os_unfair_lock_lock(v17);
      closure #1 in _NSSwiftCalendar.calendar.getter(v16, &v26);
      os_unfair_lock_unlock(v17);

      uint64_t v20 = *((void *)&v26 + 1);
      uint64_t v19 = v26;
    }
    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v5;
      uint64_t v20 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (void (*)(uint64_t))type metadata accessor for _CalendarBridged);
      id v21 = v5;
    }
    swift_unknownObjectRelease();
    *(void *)&__src[0] = v19;
    *((void *)&__src[0] + 1) = v20;
    if (*(void *)&__src[1])
    {
      long long v26 = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v26);
    }
  }
  if ((a1 & 0x100) != 0)
  {
    *(void *)&__src[14] = *(void *)&__src[16];
    BYTE8(__src[14]) = BYTE8(__src[16]);
  }
  return memcpy(a4, __src, 0x11AuLL);
}

void *Calendar.dateComponents(_:from:to:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  double v7 = *a2;
  double v8 = *a3;
  uint64_t v10 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v11 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v11, v17);
  double v12 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    double v13 = v7;
  }
  else {
    double v13 = 1.59271755e13;
  }
  double v19 = fmax(v13, -2.11845067e11);
  if (v8 <= 1.59271755e13) {
    double v12 = v8;
  }
  double v14 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v18 = v14;
  (*(void (**)(void *__return_ptr, uint64_t *, double *, double *, uint64_t, uint64_t))(v9 + 208))(__src, v17, &v19, &v18, ObjectType, v9);
  if (specialized Set.contains(_:)(0xEu, a1))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    __src[0] = v10;
    __src[1] = v9;
    if (__src[2])
    {
      v17[0] = __src[2];
      v17[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(v17);
    }
  }
  return memcpy(a4, __src, 0x11AuLL);
}

BOOL specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Swift::UInt v3 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Swift::UInt v3 = a1;
  Swift::Int v4 = MEMORY[0x185303FF0](*(void *)(a2 + 40), a1, 1);
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

Swift::Int __swiftcall _NSSwiftCalendar.component(_:from:)(NSCalendarUnit _, Foundation::Date from)
{
  uint64_t v4 = *v2;
  _fromNSCalendarUnit(_:)(_, v13);
  uint64_t v5 = v13[0];
  if (v13[0] == 18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v8 = v7 + 4;
  uint64_t v9 = v7 + 8;
  os_unfair_lock_lock(v7 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v8, &v44);
  os_unfair_lock_unlock(v9);
  long long v12 = v44;
  uint64_t v11 = qword_182183628[v5];
  uint64_t v10 = v4;
  Calendar._dateComponents(_:from:)(&v11, (double *)&v10, v13);
  outlined release of DateComponents((uint64_t)v13);
  swift_unknownObjectRelease();
  switch(v5)
  {
    case 1:
      if (v17) {
        goto LABEL_4;
      }
      return v16;
    case 2:
      if (v19) {
        goto LABEL_4;
      }
      return v18;
    case 3:
      if (v21) {
        goto LABEL_4;
      }
      return v20;
    case 4:
      if (v25) {
        goto LABEL_4;
      }
      return v24;
    case 5:
      if (v27) {
        goto LABEL_4;
      }
      return v26;
    case 6:
      if (v29) {
        goto LABEL_4;
      }
      return v28;
    case 7:
      if (v33) {
        goto LABEL_4;
      }
      return v32;
    case 8:
      if (v35) {
        goto LABEL_4;
      }
      return v34;
    case 9:
      if (v37) {
        goto LABEL_4;
      }
      return v36;
    case 10:
      if (v39) {
        goto LABEL_4;
      }
      return v38;
    case 11:
      if (v41) {
        goto LABEL_4;
      }
      return v40;
    case 12:
      if (v43) {
        goto LABEL_4;
      }
      return v42;
    case 13:
      if (v31) {
        goto LABEL_4;
      }
      return v30;
    case 14:
    case 15:
    case 16:
      goto LABEL_4;
    case 17:
      if (v23) {
        goto LABEL_4;
      }
      Swift::Int result = v22;
      break;
    default:
      if (v15) {
LABEL_4:
      }
        Swift::Int result = 0;
      else {
        Swift::Int result = v14;
      }
      break;
  }
  return result;
}

id @objc _NSSwiftCalendar.date(byAdding:value:to:options:)(void *a1, int a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, void (*a7)(double *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  objc_msgSend(a5, sel_timeIntervalSinceReferenceDate);
  uint64_t v16 = v12;
  id v13 = a1;
  a7(&v17, a3, a4, &v16, a6);

  if (v18) {
    id v14 = 0;
  }
  else {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v17);
  }

  return v14;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(byAdding:value:to:options:)(NSCalendarUnit byAdding, Swift::Int value, Foundation::Date to, NSCalendarOptions options)
{
  uint64_t v7 = v6;
  char v8 = v4;
  uint64_t v10 = v5;
  double v11 = *(double *)options;
  char v12 = _fromNSCalendarUnit(_:)(byAdding, __src);
  char v14 = __src[0];
  if (__src[0] == 18)
  {
    *(void *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + 8) = 1;
  }
  else
  {
    __dst[0] = 0uLL;
    v25[0] = 0;
    v25[1] = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v25, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    LOBYTE(__dst[0]) = v14;
    v29.value = value;
    v29.is_nil = 0;
    DateComponents.setValue(_:for:)(v29, (Foundation::Calendar::Component)__dst);
    char v15 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____NSSwiftCalendar__lock);
    uint64_t v16 = v15 + 4;
    double v17 = v15 + 8;
    os_unfair_lock_lock(v15 + 8);
    closure #1 in _NSSwiftCalendar.calendar.getter(v16, &v27);
    os_unfair_lock_unlock(v17);
    uint64_t v18 = *((void *)&v27 + 1);
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t v19 = v8 & 1;
    memcpy(v25, __src, 0x11AuLL);
    double v20 = 1.59271755e13;
    if (v11 <= 1.59271755e13) {
      double v20 = v11;
    }
    double v21 = fmax(v20, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    double v24 = v21;
    char v23 = *(void (**)(uint64_t *, double *, uint64_t, uint64_t, uint64_t))(v18 + 200);
    outlined retain of DateComponents((uint64_t)__dst);
    v23(v25, &v24, v19, ObjectType, v18);
    outlined release of DateComponents((uint64_t)__dst);
    swift_unknownObjectRelease();
    char v12 = outlined release of DateComponents((uint64_t)__dst);
  }
  result.value = *(Foundation::Date *)&v13;
  result.is_nil = v12;
  return result;
}

uint64_t _fromNSCalendarUnit(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result > 1023)
  {
    if (result >= 0x4000)
    {
      if (result < 0x10000)
      {
        if (result == 0x4000)
        {
          *a2 = 12;
          return result;
        }
        if (result == 0x8000)
        {
          *a2 = 13;
          return result;
        }
      }
      else
      {
        switch(result)
        {
          case 0x10000:
            *a2 = 17;
            return result;
          case 0x100000:
            *a2 = 14;
            return result;
          case 0x200000:
            *a2 = 15;
            return result;
        }
      }
      goto LABEL_37;
    }
    if (result <= 4095)
    {
      if (result == 1024)
      {
        *a2 = 8;
        return result;
      }
      if (result == 2048)
      {
        *a2 = 9;
        return result;
      }
      goto LABEL_37;
    }
    if (result == 4096)
    {
      *a2 = 10;
      return result;
    }
    if (result != 0x2000) {
      goto LABEL_37;
    }
    goto LABEL_27;
  }
  if (result <= 63)
  {
    char v2 = 0;
    switch(result)
    {
      case 2:
        goto LABEL_38;
      case 4:
        *a2 = 1;
        break;
      case 8:
        *a2 = 2;
        break;
      case 16:
        *a2 = 3;
        break;
      case 32:
        *a2 = 4;
        break;
      default:
        goto LABEL_37;
    }
    return result;
  }
  if (result <= 255)
  {
    if (result == 64)
    {
      *a2 = 5;
      return result;
    }
    if (result == 128)
    {
      *a2 = 6;
      return result;
    }
    goto LABEL_37;
  }
  if (result == 256)
  {
LABEL_27:
    *a2 = 11;
    return result;
  }
  if (result == 512)
  {
    *a2 = 7;
    return result;
  }
LABEL_37:
  char v2 = 18;
LABEL_38:
  *a2 = v2;
  return result;
}

void _CalendarGregorian.dateComponents(_:from:to:)(uint64_t *a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  double v9 = *a2;
  double v10 = *a3;
  double v11 = *a3;
  double v12 = *a2;
  if ((*a1 & 0x2000) == 0) {
    goto LABEL_12;
  }
  v66[0] = *a2;
  *(double *)__dst = v10;
  Swift::Double v13 = specialized static Date.subsecondsOffsetInNanoScale(_:_:)(v66, (double *)__dst);
  uint64_t v7 = v13;
  if ((uint64_t)v13 < 1000000000)
  {
    if (v9 != v10)
    {
      if (v9 >= v10) {
        goto LABEL_5;
      }
      goto LABEL_110;
    }
LABEL_10:
    double v12 = v9;
    BOOL v14 = v10 < v9;
    if (v10 == v9) {
      goto LABEL_11;
    }
LABEL_6:
    if (v14) {
      double v11 = ceil(v10);
    }
    else {
      double v11 = floor(v10);
    }
    goto LABEL_12;
  }
  uint64_t v7 = v13 - 125000000;
  if (v9 == v10) {
    goto LABEL_10;
  }
  if (v9 >= v10)
  {
LABEL_110:
    double v12 = ceil(v9);
    BOOL v14 = v10 < v9;
    if (v10 == v9) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
LABEL_5:
  double v12 = floor(v9);
  BOOL v14 = v10 < v9;
  if (v10 != v9) {
    goto LABEL_6;
  }
LABEL_11:
  double v11 = v10;
LABEL_12:
  __dst[0] = 0uLL;
  __src[0] = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)__src, 0, 1, 0, 1, 0, 1, (uint64_t)v66, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  *(void *)&__dst[0] = v8;
  char v15 = orderedComponents #1 (_:) in _CalendarGregorian.dateComponents(_:from:to:)((uint64_t *)__dst);
  uint64_t v16 = v15;
  uint64_t v60 = *((void *)v15 + 2);
  if (!v60)
  {
    swift_bridgeObjectRelease();
    goto LABEL_108;
  }
  unint64_t v17 = 0;
  uint64_t v59 = v15 + 32;
  unint64_t v18 = 0x7FFFFFFFLL;
  if (v9 >= v10) {
    unint64_t v18 = 0xFFFFFFFF80000000;
  }
  Swift::Int _ = v18;
  uint64_t v58 = v15;
  do
  {
    if (v17 >= *((void *)v16 + 2))
    {
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    uint64_t v19 = v59[v17++];
    if (((1 << v19) & 0x23DFF) == 0)
    {
      if (((1 << v19) & 0x1C000) == 0)
      {
        v66[26] = 0.0;
        LOBYTE(v66[27]) = 0;
      }
      continue;
    }
    if (v11 == v12)
    {
      *(double *)&uint64_t v20 = 0.0;
      goto LABEL_23;
    }
    if ((v19 - 1) >= 0xC)
    {
      switch(v19)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          goto LABEL_123;
        case 13:
          double v41 = (v11 - v12) * 1000000000.0;
          if (v41 >= 2147483650.0)
          {
            uint64_t v20 = 0x7FFFFFFFLL;
            goto LABEL_100;
          }
          if (v41 <= -2147483650.0)
          {
            *(double *)&uint64_t v20 = NAN;
            goto LABEL_100;
          }
          if ((~*(void *)&v41 & 0x7FF0000000000000) == 0) {
            goto LABEL_118;
          }
          if (v41 <= -9.22337204e18) {
            goto LABEL_119;
          }
          if (v41 < 9.22337204e18)
          {
            uint64_t v20 = (uint64_t)v41;
LABEL_100:
            LOBYTE(v61) = 13;
            uint64_t v65 = *(void *)&v12;
            __src[0] = *(_OWORD *)(v5 + 104);
            swift_unknownObjectRetain();
            _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v61, (double *)&v65, v20, (double *)__src, (uint64_t)__dst, v62);
            swift_unknownObjectRelease();
            double v12 = v62[0];
            goto LABEL_24;
          }
          break;
        case 14:
        case 15:
        case 16:
          goto LABEL_121;
        case 17:
          goto LABEL_42;
        default:
          *(void *)&v62[0] = 1;
          uint64_t v65 = *(void *)&v12;
          __dst[0] = *(_OWORD *)(v5 + 104);
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v62, (double *)&v65, (uint64_t *)__dst, __src);
          swift_unknownObjectRelease();
          memcpy(__dst, __src, 0x11AuLL);
          outlined release of DateComponents((uint64_t)__dst);
          if (BYTE8(__dst[2])) {
            goto LABEL_122;
          }
          uint64_t v39 = *(void *)&__dst[2];
          uint64_t v65 = 1;
          double v61 = v11;
          __src[0] = *(_OWORD *)(v5 + 104);
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)(&v65, &v61, (uint64_t *)__src, v62);
          swift_unknownObjectRelease();
          memcpy(__src, v62, 0x11AuLL);
          outlined release of DateComponents((uint64_t)__src);
          if (BYTE8(__src[2])) {
            goto LABEL_123;
          }
          BOOL v40 = __OFSUB__(*(void *)&__src[2], v39);
          uint64_t v20 = *(void *)&__src[2] - v39;
          if (!v40) {
            goto LABEL_17;
          }
          goto LABEL_117;
      }
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      return;
    }
LABEL_42:
    *(double *)&uint64_t v20 = 0.0;
    uint64_t v31 = -1;
    if (v12 < v11) {
      uint64_t v31 = 1;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v32 = v31;
        LOBYTE(v61) = v19;
        uint64_t v65 = *(void *)&v12;
        __src[0] = *(_OWORD *)(v5 + 104);
        swift_unknownObjectRetain();
        _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v61, (double *)&v65, v32, (double *)__src, (uint64_t)__dst, v62);
        swift_unknownObjectRelease();
        BOOL v33 = v62[0] < v12;
        if (v12 < v11) {
          BOOL v33 = v12 < v62[0];
        }
        if (!v33)
        {
          *(double *)__dst = v12;
          *((double *)__dst + 1) = v62[0];
          __dst[1] = 0uLL;
          LOBYTE(__dst[2]) = 0x80;
          lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
          swift_willThrowTypedImpl();
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v42 = type metadata accessor for Logger();
          __swift_project_value_buffer(v42, (uint64_t)static _CalendarGregorian.logger);
          char v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v43, v44))
          {
            uint64_t v45 = swift_slowAlloc();
            uint64_t v56 = swift_slowAlloc();
            *(void *)&__dst[0] = v56;
            *(_DWORD *)uint64_t v45 = 134349570;
            *(double *)__src = v12;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v45 + 12) = 2050;
            *(double *)__src = v10;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v45 + 22) = 2082;
            LOBYTE(__src[0]) = v19;
            uint64_t v46 = Calendar.Component.debugDescription.getter();
            *(void *)&__src[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)__dst);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_181795000, v43, v44, "Not advancing in dateComponents(from:start:end:). start: %{public}f end: %{public}f component: %{public}s", (uint8_t *)v45, 0x20u);
            swift_arrayDestroy();
            MEMORY[0x185309510](v56, -1, -1);
            MEMORY[0x185309510](v45, -1, -1);
          }

          uint64_t v16 = v58;
          goto LABEL_106;
        }
        if (v62[0] == v11)
        {
          uint64_t v20 = v32;
          double v12 = v62[0];
          goto LABEL_23;
        }
        if (v12 >= v11) {
          break;
        }
        if (v11 < v62[0]) {
          goto LABEL_61;
        }
        uint64_t v31 = 2 * v32;
        uint64_t v20 = v32;
        if (2 * v32 < 0)
        {
LABEL_54:
          *(void *)&__dst[0] = v19;
          *((double *)__dst + 1) = v12;
          *(void *)&__dst[1] = 0;
          *((double *)&__dst[1] + 1) = v11;
          LOBYTE(__dst[2]) = 0;
          lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
          swift_willThrowTypedImpl();
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v48 = type metadata accessor for Logger();
          __swift_project_value_buffer(v48, (uint64_t)static _CalendarGregorian.logger);
          unint64_t v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v49, v50))
          {
            uint64_t v51 = swift_slowAlloc();
            uint64_t v52 = swift_slowAlloc();
            *(void *)&__dst[0] = v52;
            *(_DWORD *)uint64_t v51 = 134349570;
            *(double *)(v51 + 4) = v12;
            *(_WORD *)(v51 + 12) = 2050;
            *(double *)(v51 + 14) = v10;
            *(_WORD *)(v51 + 22) = 2082;
            LOBYTE(__src[0]) = v19;
            uint64_t v53 = Calendar.Component.debugDescription.getter();
            *(void *)(v51 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)__dst);
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_181795000, v49, v50, "Overflowing in dateComponents(from:start:end:). start: %{public}f. end: %{public}f. component: %{public}s", (uint8_t *)v51, 0x20u);
            swift_arrayDestroy();
            uint64_t v55 = v52;
            uint64_t v16 = v58;
            MEMORY[0x185309510](v55, -1, -1);
            MEMORY[0x185309510](v51, -1, -1);
          }

LABEL_106:
          LOBYTE(__dst[0]) = v19;
          v68.value = _;
          v68.is_nil = 0;
          DateComponents.setValue(_:for:)(v68, (Foundation::Calendar::Component)__dst);
          goto LABEL_18;
        }
      }
      if (v62[0] < v11) {
        break;
      }
      uint64_t v31 = 2 * v32;
      uint64_t v20 = v32;
      if (((2 * v32) & 0x8000000000000000) == 0) {
        goto LABEL_54;
      }
    }
LABEL_61:
    while (v12 < v11)
    {
      uint64_t v35 = v32 - v20;
      if (__OFSUB__(v32, v20)) {
        goto LABEL_116;
      }
      if (v35 <= 1) {
        goto LABEL_92;
      }
LABEL_68:
      uint64_t v36 = v35;
      uint64_t v37 = v20 + v35 / 2;
      if (__OFADD__(v20, v35 / 2)) {
        goto LABEL_114;
      }
      LOBYTE(v61) = v19;
      uint64_t v65 = *(void *)&v12;
      __src[0] = *(_OWORD *)(v5 + 104);
      swift_unknownObjectRetain();
      _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v61, (double *)&v65, v37, (double *)__src, (uint64_t)__dst, v62);
      swift_unknownObjectRelease();
      if (v62[0] == v11)
      {
        v20 += v36 / 2;
        double v12 = v62[0];
        uint64_t v16 = v58;
        goto LABEL_23;
      }
      BOOL v34 = v11 < v62[0];
      if (v12 >= v11) {
        BOOL v34 = v62[0] < v11;
      }
      if (v34) {
        uint64_t v32 = v20 + v36 / 2;
      }
      else {
        v20 += v36 / 2;
      }
      uint64_t v16 = v58;
    }
    if (__OFSUB__(v20, v32)) {
      goto LABEL_115;
    }
    if (v20 - v32 >= 2)
    {
      uint64_t v35 = v32 - v20;
      if (__OFSUB__(v32, v20)) {
        goto LABEL_113;
      }
      goto LABEL_68;
    }
LABEL_92:
    LOBYTE(v61) = v19;
    uint64_t v65 = *(void *)&v12;
    __src[0] = *(_OWORD *)(v5 + 104);
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v61, (double *)&v65, v20, (double *)__src, (uint64_t)__dst, v62);
    swift_unknownObjectRelease();
    double v12 = v62[0];
LABEL_23:
    if (v19 == 13)
    {
LABEL_24:
      *(void *)&double v21 = (char *)v7 + v20;
      BOOL v22 = __OFADD__(v20, v7);
      BOOL v23 = __OFSUB__(v20, v7);
      if (v10 < v9) {
        BOOL v22 = v23;
      }
      if (v22)
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static _CalendarGregorian.logger);
        char v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          *(void *)&__dst[0] = v28;
          *(_DWORD *)uint64_t v27 = 134349570;
          *(double *)(v27 + 4) = v9;
          *(_WORD *)(v27 + 12) = 2050;
          *(double *)(v27 + 14) = v10;
          *(_WORD *)(v27 + 22) = 2082;
          *(void *)(v27 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6F6365736F6E616ELL, 0xEA0000000000646ELL, (uint64_t *)__dst);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_181795000, v25, v26, "Overflowing in dateComponents(from:start:end:). start: %{public}f. end: %{public}f. component: %{public}s", (uint8_t *)v27, 0x20u);
          swift_arrayDestroy();
          uint64_t v29 = v28;
          uint64_t v16 = v58;
          MEMORY[0x185309510](v29, -1, -1);
          MEMORY[0x185309510](v27, -1, -1);
        }

        if (*(double *)&v20 == NAN) {
          double v30 = 0.0;
        }
        else {
          double v30 = *(double *)&v20;
        }
        v66[20] = v30;
        LOBYTE(v66[21]) = v20 == 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        if (v10 < v9) {
          *(void *)&double v21 = v20 - (void)v7;
        }
        BOOL v38 = *(void *)&v21 == 0x7FFFFFFFFFFFFFFFLL;
        if (v21 == NAN) {
          double v21 = 0.0;
        }
        v66[20] = v21;
        LOBYTE(v66[21]) = v38;
      }
    }
    else
    {
LABEL_17:
      LOBYTE(__dst[0]) = v19;
      v67.value = v20;
      v67.is_nil = 0;
      DateComponents.setValue(_:for:)(v67, (Foundation::Calendar::Component)__dst);
    }
LABEL_18:
    ;
  }
  while (v17 != v60);
  swift_bridgeObjectRelease();
LABEL_108:
  memcpy(a4, v66, 0x11AuLL);
}

uint64_t DateComponents.init(component:value:)@<X0>(Swift::Int_optional _@<0:X1, 8:W2.1>, unsigned __int8 *a2@<X0>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  memset(__src, 0, 40);
  BYTE8(__src[2]) = 1;
  *(void *)&__src[3] = 0;
  BYTE8(__src[3]) = 1;
  *(void *)&__src[4] = 0;
  BYTE8(__src[4]) = 1;
  *(void *)&__src[5] = 0;
  BYTE8(__src[5]) = 1;
  *(void *)&__src[6] = 0;
  BYTE8(__src[6]) = 1;
  *(void *)&__src[7] = 0;
  BYTE8(__src[7]) = 1;
  *(void *)&__src[8] = 0;
  BYTE8(__src[8]) = 1;
  *(void *)&__src[9] = 0;
  BYTE8(__src[9]) = 1;
  *(void *)&__src[10] = 0;
  BYTE8(__src[10]) = 1;
  *(void *)&__src[11] = 0;
  BYTE8(__src[11]) = 1;
  *(void *)&__src[12] = 0;
  BYTE8(__src[12]) = 1;
  *(void *)&__src[13] = 0;
  BYTE8(__src[13]) = 1;
  *(void *)&__src[14] = 0;
  BYTE8(__src[14]) = 1;
  *(void *)&__src[15] = 0;
  BYTE8(__src[15]) = 1;
  *(void *)&__src[16] = 0;
  BYTE8(__src[16]) = 1;
  WORD4(__src[17]) = 513;
  *(void *)&__src[17] = 0;
  if ((v4 - 14) > 2)
  {
    v7[0] = v4;
    v9.value = _.value;
    v9.is_nil = 0;
    DateComponents.setValue(_:for:)(v9, (Foundation::Calendar::Component)v7);
    memcpy(v7, __src, 0x11AuLL);
    destructiveProjectEnumData for PredicateCodableError(v7, v5);
  }
  else
  {
    _s10Foundation14DateComponentsVSgWOi0_((uint64_t)v7);
  }
  return outlined init with take of DateComponents?((uint64_t)v7, a3);
}

Swift::Void __swiftcall DateComponents.setValue(_:for:)(Swift::Int_optional _, Foundation::Calendar::Component a2)
{
  switch(*(unsigned char *)a2)
  {
    case 1:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int value = 0;
      }
      else {
        Swift::Int value = _.value;
      }
      *(void *)(v2 + 48) = value;
      *(unsigned char *)(v2 + 56) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 2:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v5 = 0;
      }
      else {
        Swift::Int v5 = _.value;
      }
      *(void *)(v2 + 64) = v5;
      *(unsigned char *)(v2 + 72) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 3:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v6 = 0;
      }
      else {
        Swift::Int v6 = _.value;
      }
      *(void *)(v2 + 80) = v6;
      *(unsigned char *)(v2 + 88) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 4:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v7 = 0;
      }
      else {
        Swift::Int v7 = _.value;
      }
      *(void *)(v2 + 112) = v7;
      *(unsigned char *)(v2 + 120) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 5:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v8 = 0;
      }
      else {
        Swift::Int v8 = _.value;
      }
      *(void *)(v2 + 128) = v8;
      *(unsigned char *)(v2 + 136) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 6:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v9 = 0;
      }
      else {
        Swift::Int v9 = _.value;
      }
      *(void *)(v2 + 144) = v9;
      *(unsigned char *)(v2 + 152) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 7:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v10 = 0;
      }
      else {
        Swift::Int v10 = _.value;
      }
      *(void *)(v2 + 176) = v10;
      *(unsigned char *)(v2 + 184) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 8:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v11 = 0;
      }
      else {
        Swift::Int v11 = _.value;
      }
      *(void *)(v2 + 192) = v11;
      *(unsigned char *)(v2 + 200) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 9:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v12 = 0;
      }
      else {
        Swift::Int v12 = _.value;
      }
      *(void *)(v2 + 208) = v12;
      *(unsigned char *)(v2 + 216) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 0xA:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v13 = 0;
      }
      else {
        Swift::Int v13 = _.value;
      }
      *(void *)(v2 + 240) = v13;
      *(unsigned char *)(v2 + 248) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 0xB:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v14 = 0;
      }
      else {
        Swift::Int v14 = _.value;
      }
      *(void *)(v2 + 256) = v14;
      *(unsigned char *)(v2 + 264) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 0xC:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v15 = 0;
      }
      else {
        Swift::Int v15 = _.value;
      }
      *(void *)(v2 + 272) = v15;
      *(unsigned char *)(v2 + 280) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 0xD:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v16 = 0;
      }
      else {
        Swift::Int v16 = _.value;
      }
      *(void *)(v2 + 160) = v16;
      *(unsigned char *)(v2 + 168) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    case 0xE:
    case 0xF:
    case 0x10:
      return;
    case 0x11:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v17 = 0;
      }
      else {
        Swift::Int v17 = _.value;
      }
      *(void *)(v2 + 96) = v17;
      *(unsigned char *)(v2 + 104) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
    default:
      if (!_.is_nil && _.value == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v3 = 0;
      }
      else {
        Swift::Int v3 = _.value;
      }
      *(void *)(v2 + 32) = v3;
      *(unsigned char *)(v2 + 40) = _.is_nil || _.value == 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
}

char *orderedComponents #1 (_:) in _CalendarGregorian.dateComponents(_:from:to:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*a1 & 1) == 0)
  {
    uint64_t v2 = (char *)MEMORY[0x1E4FBC860];
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v6 = *((void *)v2 + 2);
    unint64_t v5 = *((void *)v2 + 3);
    if (v6 >= v5 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v6 + 1;
    v2[v6 + 32] = 1;
  }
LABEL_12:
  if ((v1 & 0x1000) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v8 = *((void *)v2 + 2);
    unint64_t v7 = *((void *)v2 + 3);
    if (v8 >= v7 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v8 + 1;
    v2[v8 + 32] = 12;
    if ((v1 & 0x200) == 0)
    {
LABEL_14:
      if ((v1 & 4) == 0) {
        goto LABEL_15;
      }
      goto LABEL_36;
    }
  }
  else if ((v1 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v10 = *((void *)v2 + 2);
  unint64_t v9 = *((void *)v2 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v10 + 1;
  v2[v10 + 32] = 9;
  if ((v1 & 4) == 0)
  {
LABEL_15:
    if ((v1 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_36:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v12 = *((void *)v2 + 2);
  unint64_t v11 = *((void *)v2 + 3);
  if (v12 >= v11 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v12 + 1;
  v2[v12 + 32] = 2;
  if ((v1 & 0x800) == 0)
  {
LABEL_16:
    if ((v1 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_41:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v14 = *((void *)v2 + 2);
  unint64_t v13 = *((void *)v2 + 3);
  if (v14 >= v13 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v14 + 1;
  v2[v14 + 32] = 11;
  if ((v1 & 0x400) == 0)
  {
LABEL_17:
    if ((v1 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v16 = *((void *)v2 + 2);
  unint64_t v15 = *((void *)v2 + 3);
  if (v16 >= v15 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v16 + 1;
  v2[v16 + 32] = 10;
  if ((v1 & 8) == 0)
  {
LABEL_18:
    if ((v1 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v18 = *((void *)v2 + 2);
  unint64_t v17 = *((void *)v2 + 3);
  if (v18 >= v17 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v18 + 1;
  v2[v18 + 32] = 3;
  if ((v1 & 0x40000) == 0)
  {
LABEL_19:
    if ((v1 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_56:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v20 = *((void *)v2 + 2);
  unint64_t v19 = *((void *)v2 + 3);
  if (v20 >= v19 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v20 + 1;
  v2[v20 + 32] = 17;
  if ((v1 & 0x80) == 0)
  {
LABEL_20:
    if ((v1 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_61:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v22 = *((void *)v2 + 2);
  unint64_t v21 = *((void *)v2 + 3);
  if (v22 >= v21 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v22 + 1;
  v2[v22 + 32] = 7;
  if ((v1 & 0x100) == 0)
  {
LABEL_21:
    if ((v1 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_66:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v24 = *((void *)v2 + 2);
  unint64_t v23 = *((void *)v2 + 3);
  if (v24 >= v23 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v24 + 1;
  v2[v24 + 32] = 8;
  if ((v1 & 0x10) == 0)
  {
LABEL_22:
    if ((v1 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_76;
  }
LABEL_71:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v26 = *((void *)v2 + 2);
  unint64_t v25 = *((void *)v2 + 3);
  if (v26 >= v25 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v26 + 1;
  v2[v26 + 32] = 4;
  if ((v1 & 0x20) == 0)
  {
LABEL_23:
    if ((v1 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_81;
  }
LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v28 = *((void *)v2 + 2);
  unint64_t v27 = *((void *)v2 + 3);
  if (v28 >= v27 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v28 + 1;
  v2[v28 + 32] = 5;
  if ((v1 & 0x40) == 0)
  {
LABEL_24:
    if ((v1 & 0x2000) == 0) {
      return v2;
    }
    goto LABEL_86;
  }
LABEL_81:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v30 = *((void *)v2 + 2);
  unint64_t v29 = *((void *)v2 + 3);
  if (v30 >= v29 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v30 + 1;
  v2[v30 + 32] = 6;
  if ((v1 & 0x2000) != 0)
  {
LABEL_86:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v32 = *((void *)v2 + 2);
    unint64_t v31 = *((void *)v2 + 3);
    if (v32 >= v31 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v32 + 1;
    v2[v32 + 32] = 13;
  }
  return v2;
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:to:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return _CalendarAutoupdating.dateComponents(_:from:to:)(a1, a2, a3);
}

uint64_t getEnumTagSinglePayload for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181DF9450);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4, a5);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _sSVSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgyyy_SVAbFIegyyy_TRTA_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t partial apply for closure #1 in NSData.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  long long v5 = (void *)v4[2];
  uint64_t v6 = *v5 - a2;
  if (__OFSUB__(*v5, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v8 = v4[3];
  unint64_t v7 = (unsigned char *)v4[4];
  *long long v5 = v6;
  if (v8 < a2) {
    return result;
  }
  if (__OFSUB__(v8, a2))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (v8 - a2 < a3)
  {
    *unint64_t v7 = *(unsigned char *)(result + v6);
    *a4 = 1;
  }
  return result;
}

uint64_t _sSo6NSDataC10FoundationEys5UInt8VSicigySV_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return closure #1 in NSData.subscript.getter(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24), *(unsigned char **)(v4 + 32));
}

void static NumberFormatStyleConfiguration.Notation.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

id partial apply for implicit closure #2 in implicit closure #1 in NSRunLoop.schedule(after:interval:tolerance:options:_:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_invalidate);
}

char *@objc static NSTimeZone._timeZoneWith(abbreviation:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  long long v5 = specialized static NSTimeZone._timeZoneWith(abbreviation:)((uint64_t)v3, v4);
  swift_bridgeObjectRelease();

  return v5;
}

char *specialized static NSTimeZone._timeZoneWith(abbreviation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized static TimeZone.identifierForAbbreviation(_:)(a1, a2);
  if (!v3) {
    return 0;
  }
  if (one-time initialization token for cache != -1) {
    uint64_t v2 = swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v2);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 36);
  partial apply for closure #1 in TimeZoneCache.bridgedFixed(_:)(&v6);
  os_unfair_lock_unlock(v4 + 36);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v6;
}

char *@objc static NSTimeZone._timeZoneWith(name:tryAbbrev:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v7 = specialized static NSTimeZone._timeZoneWith(name:tryAbbrev:)((uint64_t)v5, v6, a4);
  swift_bridgeObjectRelease();

  return v7;
}

char *specialized static NSTimeZone._timeZoneWith(name:tryAbbrev:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = a1;
  if (a3)
  {
    uint64_t v5 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v6 = (os_unfair_lock_s *)static TimeZoneCache.cache;
    swift_retain_n();
    os_unfair_lock_lock(v6 + 36);
    closure #1 in TimeZoneCache.timeZoneAbbreviations()((uint64_t)&v6[4], (uint64_t *)&v12);
    os_unfair_lock_unlock(v6 + 36);
    swift_release_n();
    if (*((void *)v12 + 2))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v4, a2);
      if (v7)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v8 = swift_bridgeObjectRelease();
        unint64_t v9 = (os_unfair_lock_s *)static TimeZoneCache.cache;
        MEMORY[0x1F4188790](v8);
        swift_retain_n();
        os_unfair_lock_lock(v9 + 36);
        closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply(&v12);
        os_unfair_lock_unlock(v9 + 36);
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    a1 = swift_bridgeObjectRelease();
  }
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  unint64_t v10 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v10 + 36);
  closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply(&v12);
  os_unfair_lock_unlock(v10 + 36);
LABEL_11:
  swift_release_n();
  return v12;
}

char *@objc static NSTimeZone._timeZoneWith(name:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 36);
  closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply(&v7);
  os_unfair_lock_unlock(v4 + 36);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = v7;

  return v5;
}

char *closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply@<X0>(char **a1@<X8>)
{
  return partial apply for closure #1 in TimeZoneCache.bridgedFixed(_:)(a1);
}

char *partial apply for closure #1 in TimeZoneCache.bridgedFixed(_:)@<X0>(char **a1@<X8>)
{
  return closure #1 in TimeZoneCache.bridgedFixed(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

char *closure #1 in TimeZoneCache.bridgedFixed(_:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, char **a3@<X8>)
{
  __n128 result = TimeZoneCache.State.bridgedFixed(_:)(a1, a2);
  *a3 = result;
  return result;
}

char *TimeZoneCache.State.bridgedFixed(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v2 + 104);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v9)
    {
      unint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      id v11 = (id)v10;
      goto LABEL_142;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void *)(v4 + 40);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v14)
    {
      long long v116 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v13);
      uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v16 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      unint64_t v17 = (char *)objc_allocWithZone(v16);
      *(_OWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v116;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      uint64_t v18 = swift_allocObject();
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_18218FDB0;
      *(void *)&v17[OBJC_IVAR____NSSwiftTimeZone_lock] = v18;
      v119.receiver = v17;
      v119.super_class = v16;
      swift_unknownObjectRetain();
      id v19 = objc_msgSendSuper2(&v119, sel_init);
      swift_bridgeObjectRetain();
      unint64_t v10 = (unint64_t)v19;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v121 = *(void *)(v4 + 104);
      uint64_t v21 = v121;
      *(void *)(v4 + 104) = 0x8000000000000000;
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      uint64_t v24 = *(void *)(v21 + 16);
      BOOL v25 = (v23 & 1) == 0;
      BOOL v26 = __OFADD__(v24, v25);
      uint64_t v27 = v24 + v25;
      if (!v26)
      {
        LOBYTE(v3) = v23;
        if (*(void *)(v21 + 24) >= v27)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v109 = v22;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
            uint64_t v91 = static _DictionaryStorage.copy(original:)();
            uint64_t v28 = v91;
            if (!*(void *)(v21 + 16)) {
              goto LABEL_138;
            }
            __n128 result = (char *)(v91 + 64);
            __srcb = (char *)(v21 + 64);
            unint64_t v92 = (unint64_t)((1 << *(unsigned char *)(v28 + 32)) + 63) >> 6;
            if (v28 != v21 || result >= &__srcb[8 * v92]) {
              __n128 result = (char *)memmove(result, __srcb, 8 * v92);
            }
            int64_t v118 = 0;
            *(void *)(v28 + 16) = *(void *)(v21 + 16);
            uint64_t v93 = 1 << *(unsigned char *)(v21 + 32);
            uint64_t v94 = -1;
            if (v93 < 64) {
              uint64_t v94 = ~(-1 << v93);
            }
            unint64_t v95 = v94 & *(void *)(v21 + 64);
            int64_t v112 = (unint64_t)(v93 + 63) >> 6;
            while (1)
            {
              if (v95)
              {
                unint64_t v96 = __clz(__rbit64(v95));
                v95 &= v95 - 1;
                unint64_t v97 = v96 | (v118 << 6);
              }
              else
              {
                int64_t v104 = v118 + 1;
                if (__OFADD__(v118, 1)) {
                  goto LABEL_146;
                }
                if (v104 >= v112) {
                  goto LABEL_138;
                }
                unint64_t v105 = *(void *)&__srcb[8 * v104];
                int64_t v106 = v118 + 1;
                if (!v105)
                {
                  int64_t v106 = v118 + 2;
                  if (v118 + 2 >= v112) {
                    goto LABEL_138;
                  }
                  unint64_t v105 = *(void *)&__srcb[8 * v106];
                  if (!v105)
                  {
                    int64_t v106 = v118 + 3;
                    if (v118 + 3 >= v112) {
                      goto LABEL_138;
                    }
                    unint64_t v105 = *(void *)&__srcb[8 * v106];
                    if (!v105)
                    {
                      int64_t v106 = v118 + 4;
                      if (v118 + 4 >= v112) {
                        goto LABEL_138;
                      }
                      unint64_t v105 = *(void *)&__srcb[8 * v106];
                      if (!v105)
                      {
                        int64_t v106 = v118 + 5;
                        if (v118 + 5 >= v112) {
                          goto LABEL_138;
                        }
                        unint64_t v105 = *(void *)&__srcb[8 * v106];
                        if (!v105)
                        {
                          int64_t v106 = v118 + 6;
                          if (v118 + 6 >= v112) {
                            goto LABEL_138;
                          }
                          unint64_t v105 = *(void *)&__srcb[8 * v106];
                          if (!v105)
                          {
                            int64_t v106 = v118 + 7;
                            if (v118 + 7 >= v112) {
                              goto LABEL_138;
                            }
                            unint64_t v105 = *(void *)&__srcb[8 * v106];
                            if (!v105)
                            {
                              int64_t v107 = v118 + 8;
                              if (v118 + 8 >= v112) {
                                goto LABEL_138;
                              }
                              unint64_t v105 = *(void *)&__srcb[8 * v107];
                              if (!v105)
                              {
                                while (1)
                                {
                                  int64_t v106 = v107 + 1;
                                  if (__OFADD__(v107, 1)) {
                                    goto LABEL_149;
                                  }
                                  if (v106 >= v112) {
                                    break;
                                  }
                                  unint64_t v105 = *(void *)&__srcb[8 * v106];
                                  ++v107;
                                  if (v105) {
                                    goto LABEL_137;
                                  }
                                }
LABEL_138:
                                swift_bridgeObjectRelease();
                                unint64_t v22 = v109;
                                if ((v3 & 1) == 0)
                                {
LABEL_139:
                                  specialized _NativeDictionary._insert(at:key:value:)(v22, a1, a2, v10, v28);
                                  swift_bridgeObjectRetain();
LABEL_140:
                                  *(void *)(v4 + 104) = v28;
                                  swift_unknownObjectRelease();
LABEL_141:
                                  swift_bridgeObjectRelease();
LABEL_142:
                                  swift_bridgeObjectRelease();
                                  return (char *)v10;
                                }
LABEL_25:
                                uint64_t v40 = *(void *)(v28 + 56);
                                uint64_t v41 = 8 * v22;

                                *(void *)(v40 + v41) = v10;
                                goto LABEL_140;
                              }
                              int64_t v106 = v118 + 8;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_137:
                unint64_t v95 = (v105 - 1) & v105;
                int64_t v118 = v106;
                unint64_t v97 = __clz(__rbit64(v105)) + (v106 << 6);
              }
              uint64_t v98 = 16 * v97;
              unint64_t v99 = (void *)(*(void *)(v21 + 48) + 16 * v97);
              uint64_t v100 = v99[1];
              uint64_t v101 = 8 * v97;
              uint64_t v102 = *(void **)(*(void *)(v21 + 56) + v101);
              uint64_t v103 = (void *)(*(void *)(v28 + 48) + v98);
              *uint64_t v103 = *v99;
              v103[1] = v100;
              *(void *)(*(void *)(v28 + 56) + v101) = v102;
              swift_bridgeObjectRetain();
              __n128 result = v102;
            }
          }
          uint64_t v28 = v21;
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
          uint64_t v28 = v121;
          unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
          if ((v3 & 1) != (v29 & 1)) {
            goto LABEL_65;
          }
        }
        if ((v3 & 1) == 0) {
          goto LABEL_139;
        }
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for _TimeZoneICU();
  swift_allocObject();
  swift_bridgeObjectRetain();
  unint64_t v30 = _TimeZoneICU.init(identifier:)(a1, a2);
  if (!v30) {
    return 0;
  }
  uint64_t v15 = (uint64_t)v30;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v121 = *(void *)(v4 + 40);
  uint64_t v21 = v121;
  *(void *)(v4 + 40) = 0x8000000000000000;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v32 = *(void *)(v21 + 16);
  BOOL v33 = (v31 & 1) == 0;
  uint64_t v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  LOBYTE(v3) = v31;
  if (*(void *)(v21 + 24) < v34)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
    uint64_t v35 = v121;
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v3 & 1) != (v37 & 1)) {
      goto LABEL_65;
    }
    unint64_t v10 = v36;
    if ((v3 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_21;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_28:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
    uint64_t v42 = static _DictionaryStorage.copy(original:)();
    uint64_t v35 = v42;
    if (*(void *)(v21 + 16))
    {
      __n128 result = (char *)(v42 + 64);
      __src = (char *)(v21 + 64);
      unint64_t v44 = (unint64_t)((1 << *(unsigned char *)(v35 + 32)) + 63) >> 6;
      if (v35 != v21 || result >= &__src[8 * v44]) {
        __n128 result = (char *)memmove(result, __src, 8 * v44);
      }
      int64_t v45 = 0;
      *(void *)(v35 + 16) = *(void *)(v21 + 16);
      uint64_t v46 = 1 << *(unsigned char *)(v21 + 32);
      uint64_t v47 = -1;
      if (v46 < 64) {
        uint64_t v47 = ~(-1 << v46);
      }
      unint64_t v48 = v47 & *(void *)(v21 + 64);
      int64_t v110 = (unint64_t)(v46 + 63) >> 6;
      while (1)
      {
        if (v48)
        {
          unint64_t v49 = __clz(__rbit64(v48));
          v48 &= v48 - 1;
          unint64_t v50 = v49 | (v45 << 6);
        }
        else
        {
          int64_t v57 = v45 + 1;
          if (__OFADD__(v45, 1))
          {
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }
          if (v57 >= v110) {
            break;
          }
          unint64_t v58 = *(void *)&__src[8 * v57];
          ++v45;
          if (!v58)
          {
            int64_t v45 = v57 + 1;
            if (v57 + 1 >= v110) {
              break;
            }
            unint64_t v58 = *(void *)&__src[8 * v45];
            if (!v58)
            {
              int64_t v45 = v57 + 2;
              if (v57 + 2 >= v110) {
                break;
              }
              unint64_t v58 = *(void *)&__src[8 * v45];
              if (!v58)
              {
                int64_t v45 = v57 + 3;
                if (v57 + 3 >= v110) {
                  break;
                }
                unint64_t v58 = *(void *)&__src[8 * v45];
                if (!v58)
                {
                  int64_t v45 = v57 + 4;
                  if (v57 + 4 >= v110) {
                    break;
                  }
                  unint64_t v58 = *(void *)&__src[8 * v45];
                  if (!v58)
                  {
                    int64_t v45 = v57 + 5;
                    if (v57 + 5 >= v110) {
                      break;
                    }
                    unint64_t v58 = *(void *)&__src[8 * v45];
                    if (!v58)
                    {
                      int64_t v45 = v57 + 6;
                      if (v57 + 6 >= v110) {
                        break;
                      }
                      unint64_t v58 = *(void *)&__src[8 * v45];
                      if (!v58)
                      {
                        int64_t v59 = v57 + 7;
                        if (v59 >= v110) {
                          break;
                        }
                        unint64_t v58 = *(void *)&__src[8 * v59];
                        if (!v58)
                        {
                          while (1)
                          {
                            int64_t v45 = v59 + 1;
                            if (__OFADD__(v59, 1)) {
                              break;
                            }
                            if (v45 >= v110) {
                              goto LABEL_60;
                            }
                            unint64_t v58 = *(void *)&__src[8 * v45];
                            ++v59;
                            if (v58) {
                              goto LABEL_59;
                            }
                          }
LABEL_147:
                          __break(1u);
                          goto LABEL_148;
                        }
                        int64_t v45 = v59;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_59:
          unint64_t v48 = (v58 - 1) & v58;
          unint64_t v50 = __clz(__rbit64(v58)) + (v45 << 6);
        }
        uint64_t v51 = 16 * v50;
        uint64_t v52 = (uint64_t *)(*(void *)(v21 + 48) + v51);
        uint64_t v54 = *v52;
        uint64_t v53 = v52[1];
        long long v55 = *(_OWORD *)(*(void *)(v21 + 56) + v51);
        uint64_t v56 = (void *)(*(void *)(v35 + 48) + v51);
        *uint64_t v56 = v54;
        v56[1] = v53;
        *(_OWORD *)(*(void *)(v35 + 56) + v51) = v55;
        swift_bridgeObjectRetain();
        __n128 result = (char *)swift_unknownObjectRetain();
      }
    }
LABEL_60:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_61;
    }
LABEL_21:
    uint64_t v38 = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneICU);
    uint64_t v39 = (uint64_t *)(*(void *)(v35 + 56) + 16 * v10);
    swift_unknownObjectRelease();
    *uint64_t v39 = v15;
    v39[1] = v38;
    goto LABEL_62;
  }
  uint64_t v35 = v21;
  if (v31) {
    goto LABEL_21;
  }
LABEL_61:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a1, a2, v15, (void *)v35);
  swift_bridgeObjectRetain();
LABEL_62:
  *(void *)(v4 + 40) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v60 = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneICU);
  double v61 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v3 = (char *)objc_allocWithZone(v61);
  uint64_t v62 = (uint64_t *)&v3[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *uint64_t v62 = v15;
  v62[1] = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v63 = swift_allocObject();
  *(_DWORD *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 16) = xmmword_18218FDB0;
  *(void *)&v3[OBJC_IVAR____NSSwiftTimeZone_lock] = v63;
  v120.receiver = v3;
  v120.super_class = v61;
  swift_retain();
  id v64 = objc_msgSendSuper2(&v120, sel_init);
  swift_bridgeObjectRetain();
  unint64_t v10 = (unint64_t)v64;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v121 = *(void *)(v4 + 104);
  uint64_t v21 = v121;
  *(void *)(v4 + 104) = 0x8000000000000000;
  unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v67 = *(void *)(v21 + 16);
  BOOL v68 = (v66 & 1) == 0;
  BOOL v26 = __OFADD__(v67, v68);
  uint64_t v69 = v67 + v68;
  if (!v26)
  {
    LOBYTE(v3) = v66;
    if (*(void *)(v21 + 24) >= v69) {
      goto LABEL_66;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v69, isUniquelyReferenced_nonNull_native);
    uint64_t v70 = v121;
    unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v3 & 1) == (v71 & 1)) {
      goto LABEL_68;
    }
LABEL_65:
    unint64_t v65 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_66:
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v70 = v21;
LABEL_68:
      if (v3)
      {
LABEL_69:
        uint64_t v72 = *(void *)(v70 + 56);
        uint64_t v73 = 8 * v65;

        *(void *)(v72 + v73) = v10;
LABEL_105:
        *(void *)(v4 + 104) = v70;
        swift_release();
        goto LABEL_141;
      }
LABEL_104:
      specialized _NativeDictionary._insert(at:key:value:)(v65, a1, a2, v10, v70);
      swift_bridgeObjectRetain();
      goto LABEL_105;
    }
    goto LABEL_71;
  }
  __break(1u);
LABEL_71:
  unint64_t v108 = v65;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
  uint64_t v74 = static _DictionaryStorage.copy(original:)();
  uint64_t v70 = v74;
  if (!*(void *)(v21 + 16))
  {
LABEL_103:
    swift_bridgeObjectRelease();
    unint64_t v65 = v108;
    if (v3) {
      goto LABEL_69;
    }
    goto LABEL_104;
  }
  __n128 result = (char *)(v74 + 64);
  __srca = (char *)(v21 + 64);
  unint64_t v75 = (unint64_t)((1 << *(unsigned char *)(v70 + 32)) + 63) >> 6;
  if (v70 != v21 || result >= &__srca[8 * v75]) {
    __n128 result = (char *)memmove(result, __srca, 8 * v75);
  }
  int64_t v117 = 0;
  *(void *)(v70 + 16) = *(void *)(v21 + 16);
  uint64_t v76 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v77 = -1;
  if (v76 < 64) {
    uint64_t v77 = ~(-1 << v76);
  }
  unint64_t v78 = v77 & *(void *)(v21 + 64);
  int64_t v111 = (unint64_t)(v76 + 63) >> 6;
  while (1)
  {
    if (v78)
    {
      unint64_t v79 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      unint64_t v80 = v79 | (v117 << 6);
      goto LABEL_79;
    }
    int64_t v87 = v117 + 1;
    if (__OFADD__(v117, 1)) {
      goto LABEL_145;
    }
    if (v87 >= v111) {
      goto LABEL_103;
    }
    unint64_t v88 = *(void *)&__srca[8 * v87];
    int64_t v89 = v117 + 1;
    if (!v88)
    {
      int64_t v89 = v117 + 2;
      if (v117 + 2 >= v111) {
        goto LABEL_103;
      }
      unint64_t v88 = *(void *)&__srca[8 * v89];
      if (!v88)
      {
        int64_t v89 = v117 + 3;
        if (v117 + 3 >= v111) {
          goto LABEL_103;
        }
        unint64_t v88 = *(void *)&__srca[8 * v89];
        if (!v88)
        {
          int64_t v89 = v117 + 4;
          if (v117 + 4 >= v111) {
            goto LABEL_103;
          }
          unint64_t v88 = *(void *)&__srca[8 * v89];
          if (!v88)
          {
            int64_t v89 = v117 + 5;
            if (v117 + 5 >= v111) {
              goto LABEL_103;
            }
            unint64_t v88 = *(void *)&__srca[8 * v89];
            if (!v88)
            {
              int64_t v89 = v117 + 6;
              if (v117 + 6 >= v111) {
                goto LABEL_103;
              }
              unint64_t v88 = *(void *)&__srca[8 * v89];
              if (!v88)
              {
                int64_t v89 = v117 + 7;
                if (v117 + 7 >= v111) {
                  goto LABEL_103;
                }
                unint64_t v88 = *(void *)&__srca[8 * v89];
                if (!v88) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_102:
    unint64_t v78 = (v88 - 1) & v88;
    int64_t v117 = v89;
    unint64_t v80 = __clz(__rbit64(v88)) + (v89 << 6);
LABEL_79:
    uint64_t v81 = 16 * v80;
    unint64_t v82 = (void *)(*(void *)(v21 + 48) + 16 * v80);
    uint64_t v83 = v82[1];
    uint64_t v84 = 8 * v80;
    unint64_t v85 = *(void **)(*(void *)(v21 + 56) + v84);
    unint64_t v86 = (void *)(*(void *)(v70 + 48) + v81);
    *unint64_t v86 = *v82;
    v86[1] = v83;
    *(void *)(*(void *)(v70 + 56) + v84) = v85;
    swift_bridgeObjectRetain();
    __n128 result = v85;
  }
  int64_t v90 = v117 + 8;
  if (v117 + 8 >= v111) {
    goto LABEL_103;
  }
  unint64_t v88 = *(void *)&__srca[8 * v90];
  if (v88)
  {
    int64_t v89 = v117 + 8;
    goto LABEL_102;
  }
  while (1)
  {
    int64_t v89 = v90 + 1;
    if (__OFADD__(v90, 1)) {
      break;
    }
    if (v89 >= v111) {
      goto LABEL_103;
    }
    unint64_t v88 = *(void *)&__srca[8 * v89];
    ++v90;
    if (v88) {
      goto LABEL_102;
    }
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneICU);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  id v11 = (void *)(a5[6] + 16 * a1);
  *id v11 = a2;
  v11[1] = a3;
  uint64_t v12 = (void *)(a5[7] + 16 * a1);
  *uint64_t v12 = a4;
  v12[1] = result;
  uint64_t v13 = a5[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

{
  void *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a4, a5[7] + 48 * a1);
  unint64_t v8 = a5[2];
  char v9 = __OFADD__(v8, 1);
  unint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v10 = a5[6];
  id v11 = type metadata accessor for CombineIdentifier();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  BOOL v14 = a5[2];
  uint64_t v15 = __OFADD__(v14, 1);
  unint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

void JSONEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(v3 + 32);
  unint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(v3 + 88);
  char v23 = *(void **)(v3 + 24);
  uint64_t v24 = *(void *)(v3 + 80);
  uint64_t v8 = *(void *)(v3 + 96);
  uint64_t v22 = *(void *)(v3 + 56);
  uint64_t v25 = *(void *)(v3 + 104);
  uint64_t v26 = *(void *)(v3 + 72);
  unint64_t v9 = *(void *)(v3 + 112);
  uint64_t v27 = *(void *)(v3 + 120);
  uint64_t v28 = *(void *)(v3 + 16);
  uint64_t v33 = *(void *)(v3 + 128);
  char v10 = *(unsigned char *)(v3 + 40);
  type metadata accessor for __JSONEncoder();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 32) = v23;
  *(void *)(v11 + 40) = v4;
  *(unsigned char *)(v11 + 48) = v10;
  *(void *)(v11 + 56) = v5;
  *(void *)(v11 + 64) = v22;
  *(void *)(v11 + 72) = v6;
  *(void *)(v11 + 80) = v26;
  *(void *)(v11 + 88) = v24;
  *(void *)(v11 + 96) = v7;
  *(void *)(v11 + 104) = v8;
  *(void *)(v11 + 112) = v25;
  *(void *)(v11 + 120) = v9;
  *(void *)(v11 + 128) = v27;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)(v11 + 136) = v33;
  *(void *)(v11 + 16) = v12;
  *(void *)(v11 + 24) = v28;
  *(_OWORD *)(v11 + 144) = xmmword_18210F290;
  outlined copy of JSONEncoder.DateEncodingStrategy(v23, v4, v10);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v6, v26);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v9);
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3);
  if (v30) {
    goto LABEL_2;
  }
  uint64_t v14 = v13;
  if (!v13)
  {
    uint64_t v16 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v18[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v34 = 0x6576656C2D706F54;
    unint64_t v35 = 0xEA0000000000206CLL;
    v20._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._unint64_t object = (void *)0x80000001823AAF20;
    v21._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBAA0], v16);
    swift_willThrow();
LABEL_2:
    swift_release();
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 96))(&v34);
  char v15 = v34;
  uint64_t v34 = 0;
  LOBYTE(v35) = v15 & 1;
  BYTE1(v35) = (v15 & 2) != 0;
  BYTE2(v35) = (v15 & 8) != 0;
  long long v36 = xmmword_1821115B0;
  JSONWriter.serializeJSON(_:depth:)(v14, 0);
  swift_release();
  swift_release();
}

uint64_t JSONEncoder.outputFormatting.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

uint64_t Data.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v11[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, a1);
      uint64_t result = outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      char v10 = (void *)(a4 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_retain();
      Data.LargeSlice.withUnsafeBytes<A>(_:)((uint64_t)a1, a2, a3, v10);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      uint64_t v8 = (char *)v11;
      goto LABEL_7;
    default:
      v11[0] = a3;
      LOWORD(v11[1]) = a4;
      BYTE2(v11[1]) = BYTE2(a4);
      BYTE3(v11[1]) = BYTE3(a4);
      BYTE4(v11[1]) = BYTE4(a4);
      BYTE5(v11[1]) = BYTE5(a4);
      uint64_t v8 = (char *)v11 + BYTE6(a4);
LABEL_7:
      uint64_t result = a1((uint64_t)v11, (uint64_t)v8);
      break;
  }
  return result;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

void JSONDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a1;
  v29[2] = a4;
  v29[4] = partial apply for closure #1 in JSONDecoder.decode<A>(_:from:);
  v29[5] = &v30;
  static JSONDecoder.withUTF8Representation<A>(of:_:)(a2, a3, (uint64_t (*)(unsigned __int8 *, uint64_t))partial apply for closure #1 in JSONDecoder._decode<A>(_:from:), (uint64_t)v29, a4);
  if (!v5) {
    return;
  }
  id v39 = v5;
  id v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_willThrow();
    return;
  }

  outlined init with take of JSONError((uint64_t)v37, (uint64_t)v38);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v8;
  unint64_t v9 = JSONError.debugDescription.getter();
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v34, &demangling cache variable for type metadata for (String, Any));
  uint64_t v12 = v34[0];
  uint64_t v13 = v34[1];
  swift_retain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
  if (v15)
  {
    __break(1u);
    goto LABEL_11;
  }
  v11[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v16 = (uint64_t *)(v11[6] + 16 * v14);
  *uint64_t v16 = v12;
  v16[1] = v13;
  outlined init with take of Any(&v35, (_OWORD *)(v11[7] + 32 * v14));
  uint64_t v17 = v11[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v11[2] = v19;
  swift_release();
  swift_bridgeObjectRelease();
  long long v36 = v11;
  JSONError.sourceLocation.getter();
  if ((v21 & 1) == 0)
  {
    *((void *)&v35 + 1) = MEMORY[0x1E4FBB550];
    v34[0] = v20;
    specialized Dictionary.subscript.setter((uint64_t)v34, 0xD00000000000001DLL, 0x80000001823AB610);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v22 = objc_allocWithZone((Class)NSError);
  uint64_t v23 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined release of JSONError((uint64_t)v38);
  uint64_t v25 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v27 = v26;
  id v28 = v24;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA78], v25);
  swift_willThrow();
}

uint64_t static JSONDecoder.withUTF8Representation<A>(of:_:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(unsigned __int8 *, uint64_t), uint64_t a4, uint64_t a5)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
      }
      MEMORY[0x1F4188790](a1);
      uint64_t v26 = a5;
      uint64_t v27 = v11;
      uint64_t v28 = v12;
      uint64_t v29 = v13;
      MEMORY[0x1F4188790](v14);
      uint64_t v23 = a5;
      id v24 = partial apply for closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:);
      uint64_t v25 = v15;
      if (a1 >> 32 < (int)a1) {
        goto LABEL_12;
      }
      swift_retain();
      __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, partial apply for closure #1 in Data.withBufferView<A>(_:));
      return outlined consume of Data._Representation(a1, a2);
    case 2uLL:
      if (__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
        goto LABEL_11;
      }
      MEMORY[0x1F4188790](a1);
      uint64_t v26 = a5;
      uint64_t v27 = v17;
      uint64_t v28 = v18;
      uint64_t v29 = v19;
      MEMORY[0x1F4188790](v20);
      uint64_t v23 = a5;
      id v24 = partial apply for closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:);
      uint64_t v25 = v21;
      swift_retain();
      swift_retain();
      Data.LargeSlice.withUnsafeBytes<A>(_:)((uint64_t)partial apply for closure #1 in Data.withBufferView<A>(_:), (uint64_t)&v22, a1, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL));
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v30, 0, 14);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      return closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)((unsigned __int8 *)v30, v9, v10, a3);
    default:
      v30[0] = a1;
      uint64_t v9 = BYTE6(a2);
      LOWORD(v30[1]) = a2;
      BYTE2(v30[1]) = BYTE2(a2);
      BYTE3(v30[1]) = BYTE3(a2);
      BYTE4(v30[1]) = BYTE4(a2);
      BYTE5(v30[1]) = BYTE5(a2);
      uint64_t v10 = BYTE6(a2);
      return closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)((unsigned __int8 *)v30, v9, v10, a3);
  }
}

uint64_t __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = v3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      return a3(v9, v11);
    }
    goto LABEL_10;
  }
  uint64_t v5 = v3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (!v6)
  {
    uint64_t v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = v4 + v7;
      uint64_t v10 = v3[3];
      if (v10 >= v8) {
        uint64_t v10 = v8;
      }
      uint64_t v11 = v9 + v10;
      return a3(v9, v11);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Data.withBufferView<A>(_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in Data.withBufferView<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 24));
}

uint64_t closure #1 in Data.withBufferView<A>(_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (result)
  {
    if (a2 - result >= 0) {
      return a3();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(unsigned __int8 *a1, uint64_t a2)
{
  return closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(a1, a2, *(void *)(v2 + 24), *(uint64_t (**)(unsigned __int8 *, uint64_t))(v2 + 32));
}

uint64_t closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t))
{
  if (a3 < 1)
  {
    uint64_t v11 = 0;
    goto LABEL_5;
  }
  int v6 = *a1;
  BOOL v7 = a3 == 1;
  if (a3 == 1)
  {
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
LABEL_13:
    int v14 = 0;
    int v15 = 0;
    goto LABEL_21;
  }
  int v10 = a1[1];
  if ((unint64_t)a3 < 3)
  {
    int v8 = 0;
    int v9 = 0;
    goto LABEL_13;
  }
  int v14 = a1[2];
  if (a3 == 3)
  {
    int v8 = 0;
    int v15 = 0;
    int v9 = 1;
  }
  else
  {
    int v8 = a1[3];
    int v9 = 1;
    int v15 = 1;
    if (!*a1 && !a1[1] && v14 == 254 && v8 == 255)
    {
      uint64_t v11 = 4;
LABEL_19:
      uint64_t v16 = 2550137088;
      goto LABEL_43;
    }
  }
LABEL_21:
  BOOL v17 = a3 != 1 && v6 == 254;
  BOOL v18 = v17 && v10 == 255;
  char v19 = v18;
  if (v18) {
    int v20 = v9;
  }
  else {
    int v20 = 0;
  }
  if (v14) {
    int v20 = 0;
  }
  BOOL v17 = (v15 & v20 & (v8 == 0)) == 0;
  uint64_t v11 = 2;
  if (v17)
  {
    uint64_t v16 = 2415919360;
  }
  else
  {
    uint64_t v11 = 4;
    uint64_t v16 = 2617245952;
  }
  if (v19) {
    goto LABEL_43;
  }
  uint64_t v16 = 2483028224;
  if (a3 != 1 && v6 == 255 && v10 == 254)
  {
    uint64_t v11 = 2;
    goto LABEL_43;
  }
  if (a3 != 1 && v6 == 239 && v10 == 187) {
    int v27 = v9;
  }
  else {
    int v27 = 0;
  }
  if (v27 == 1 && v14 == 191)
  {
    uint64_t v11 = 3;
    goto LABEL_5;
  }
  if (*a1) {
    int v28 = 0;
  }
  else {
    int v28 = v15;
  }
  if (v28 == 1)
  {
    if (a3 == 1)
    {
      int v6 = 0;
      int v15 = 1;
      goto LABEL_76;
    }
    char v30 = v9 ^ 1;
    if (v10) {
      char v30 = 1;
    }
    if ((v30 & 1) == 0)
    {
      int v10 = 0;
      if (!v14)
      {
        if (v8)
        {
          uint64_t v11 = 0;
          goto LABEL_19;
        }
      }
    }
    if (v9)
    {
      if (!v14 && v10 && v8) {
        goto LABEL_97;
      }
      int v6 = 0;
      if (v10)
      {
        BOOL v7 = 0;
        goto LABEL_102;
      }
LABEL_70:
      char v29 = v15 ^ 1;
      int v10 = 0;
      if (v14) {
        char v29 = 1;
      }
      if (v29)
      {
        BOOL v7 = 0;
      }
      else
      {
        int v15 = 1;
        int v14 = 0;
        BOOL v7 = 0;
        if (!v8 && v6)
        {
          uint64_t v11 = 0;
          uint64_t v16 = 2617245952;
          goto LABEL_43;
        }
      }
LABEL_102:
      uint64_t v11 = 0;
      if (v7) {
        goto LABEL_5;
      }
      if (v10) {
        goto LABEL_5;
      }
      if (!v15) {
        goto LABEL_5;
      }
      uint64_t v11 = 0;
      if (v8 || !v6 || !v14) {
        goto LABEL_5;
      }
LABEL_43:
      if (v11 >= a2) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = v11;
      }
      id v22 = specialized String.init<A>(bytes:encoding:)((char *)&a1[v21], a2 - v21, v16);
      if (v23)
      {
        MEMORY[0x1F4188790](v22);
        specialized String.withUTF8<A>(_:)((uint64_t (*)(void *, uint64_t))partial apply for closure #1 in closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:));
        return swift_bridgeObjectRelease();
      }
      else
      {
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(unsigned char *)(v24 + 48) = 12;
        return swift_willThrow();
      }
    }
    int v6 = 0;
LABEL_92:
    LOBYTE(v7) = 0;
    goto LABEL_93;
  }
  if (a3 != 1 && !v10)
  {
    if (v9) {
      goto LABEL_70;
    }
    int v10 = 0;
    goto LABEL_92;
  }
LABEL_76:
  if (v9) {
    goto LABEL_102;
  }
LABEL_93:
  uint64_t v11 = 0;
  if ((v15 & 1) == 0 && !v7)
  {
    if (!v6 && v10)
    {
LABEL_97:
      uint64_t v11 = 0;
      uint64_t v16 = 2415919360;
      goto LABEL_43;
    }
    uint64_t v11 = 0;
    if (!v10 && v6) {
      goto LABEL_43;
    }
  }
LABEL_5:
  if (v11 >= a2) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = v11;
  }
  return a4(&a1[v12], a2 - v12);
}

uint64_t partial apply for closure #1 in JSONDecoder._decode<A>(_:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in JSONDecoder._decode<A>(_:from:)(a1, a2, *(void *)(v2 + 24), *(void (**)(uint64_t))(v2 + 32));
}

uint64_t JSONDecoder.assumesTopLevelDictionary.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 200))();
  if (!*(void *)(v1 + 16)
    || (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey),
        (v3 & 1) == 0))
  {
    long long v6 = 0u;
    long long v7 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  if (!*((void *)&v7 + 1))
  {
LABEL_7:
    outlined destroy of Any?((uint64_t)&v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  uint64_t result = swift_dynamicCast();
  if (result) {
    return v5;
  }
  return result;
}

uint64_t closure #1 in JSONDecoder._decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if ((*(uint64_t (**)(void))(*(void *)a3 + 224))())
  {
    (*(uint64_t (**)(void))(*(void *)a3 + 248))();
    long long v7 = JSON5Scanner.scan()();
  }
  else
  {
    (*(uint64_t (**)(void))(*(void *)a3 + 248))();
    JSONScanner.scan()();
  }
  int v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    id v39 = a4;
    uint64_t result = JSONMap.loadValue(at:)(0);
    uint64_t v37 = v10;
    uint64_t v38 = result;
    unsigned __int8 v36 = v11;
    if (v11 > 0xFDu)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = (*(uint64_t (**)(void))(*(void *)a3 + 200))();
      uint64_t v13 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8);
      uint64_t v26 = *(void **)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
      uint64_t v27 = v12;
      unint64_t v14 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
      uint64_t v15 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 32);
      uint64_t v30 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
      uint64_t v31 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
      uint64_t v16 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 72);
      uint64_t v28 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 64);
      uint64_t v29 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 56);
      uint64_t v17 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 80);
      uint64_t v32 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 96);
      unint64_t v33 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
      uint64_t v34 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104);
      char v35 = *(unsigned char *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112);
      char v18 = *(unsigned char *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16);
      type metadata accessor for JSONDecoderImpl();
      uint64_t v19 = swift_allocObject();
      int v20 = (void *)MEMORY[0x1E4FBC860];
      *(void *)(v19 + 16) = MEMORY[0x1E4FBC860];
      *(void *)(v19 + 24) = v27;
      *(void *)(v19 + 160) = 0x8000000000000000;
      *(void *)(v19 + 32) = v8;
      *(void *)(v19 + 40) = v26;
      *(void *)(v19 + 48) = v13;
      *(unsigned char *)(v19 + 56) = v18;
      *(void *)(v19 + 64) = v14;
      *(void *)(v19 + 72) = v15;
      *(void *)(v19 + 80) = v31;
      *(void *)(v19 + 88) = v30;
      *(void *)(v19 + 96) = v29;
      *(void *)(v19 + 104) = v28;
      *(void *)(v19 + 112) = v16;
      *(void *)(v19 + 120) = v17;
      *(void *)(v19 + 128) = v33;
      *(void *)(v19 + 136) = v32;
      *(void *)(v19 + 144) = v34;
      *(unsigned char *)(v19 + 152) = v35;
      outlined copy of JSONEncoder.DateEncodingStrategy(v26, v13, v18);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v14);
      outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v31, v30);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v33);
      swift_bridgeObjectRetain();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v19 + 16) = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        int v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        *(void *)(v19 + 16) = v20;
      }
      unint64_t v23 = v20[2];
      unint64_t v22 = v20[3];
      if (v23 >= v22 >> 1) {
        int v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v20);
      }
      void v20[2] = v23 + 1;
      uint64_t v24 = &v20[3 * v23];
      v24[4] = v38;
      v24[5] = v37;
      *((unsigned char *)v24 + 48) = v36;
      *(void *)(v19 + 16) = v20;
      v39(v19);
      swift_release();
      uint64_t v25 = swift_isUniquelyReferenced_nonNull_native();
      swift_retain();
      JSONDecoderImpl.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(v25);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t JSONDecoder.userInfo.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

id outlined copy of JSONEncoder.DateEncodingStrategy(id result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return (id)swift_retain();
  }
  if (!a3) {
    return result;
  }
  return result;
}

void partial apply for closure #1 in JSONDecoder.decode<A>(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(a2, a3, a4, *(ValueMetadata **)(v4 + 32), 0x8000000000000000, 0, 0, 0, 255, *(void *)(v4 + 16));
}

void JSONScanner.scan()()
{
  if (*(unsigned char *)v0 == 1)
  {
    uint64_t v2 = *(unsigned __int8 **)(v0 + 24);
    unint64_t v3 = *(void *)(v0 + 32);
    if ((unint64_t)v2 >= v3) {
      goto LABEL_12;
    }
    while (1)
    {
      unsigned int v4 = *v2;
      if (v4 >= 0x40) {
        break;
      }
      if (((1 << v4) & 0x100002600) != 0)
      {
        *(void *)(v0 + 24) = ++v2;
        if ((unint64_t)v2 < v3) {
          continue;
        }
      }
      goto LABEL_12;
    }
    if (v4 == 123)
    {
      JSONScanner.scanObject()();
      uint64_t v6 = v7;
      if (v7) {
        return;
      }
    }
    else
    {
LABEL_12:
      JSONScanner.scanObject(withoutBraces:)(1);
      uint64_t v6 = v8;
      if (v8) {
        return;
      }
    }
  }
  else
  {
    JSONScanner.scanValue()();
    uint64_t v6 = v5;
    if (v5) {
      return;
    }
  }
  unint64_t v9 = *(void *)(v0 + 24);
  unint64_t v10 = *(void *)(v0 + 32);
  if (v9 < v10)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(v9 + v11);
      if (v12 > 0x20 || ((1 << v12) & 0x100002600) == 0)
      {
        unint64_t v22 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9 + v11, *(void *)(v0 + 8), *(void *)(v0 + 16));
        uint64_t v24 = v23;
        uint64_t v26 = v25;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v27 = 0xD000000000000015;
        *(void *)(v27 + 8) = 0x80000001823ABB00;
        *(void *)(v27 + 16) = v12;
        *(void *)(v27 + 24) = v22;
        *(void *)(v27 + 32) = v24;
        *(void *)(v27 + 40) = v26;
        *(unsigned char *)(v27 + 48) = 1;
        swift_willThrow();
        return;
      }
      if (__OFADD__(v11, 1)) {
        break;
      }
      unint64_t v14 = v9 + ++v11;
      if (v14 >= v10) {
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_22:
  uint64_t v15 = *(void *)(v0 + 48);
  uint64_t v17 = *(void *)(v0 + 8);
  uint64_t v16 = *(void *)(v0 + 16);
  type metadata accessor for JSONMap();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 24) = v16;
  *(void *)(v19 + 32) = 0;
  *(void *)(v18 + 24) = v19;
  *(_DWORD *)(v19 + 40) = 0;
  uint64_t v1 = (os_unfair_lock_s *)(v19 + 40);
  *(void *)(v19 + 16) = v17;
  uint64_t v20 = v19 + 16;
  swift_bridgeObjectRetain();
  JSONMap.loadValue(at:)(0);
  if (v21 > 0xFDu)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((v21 & 0xE0) == 0x20)
  {
    os_unfair_lock_lock(v1);
    closure #1 in XMLPlistMap.copyInBuffer()(v20);
    if (v6)
    {
LABEL_30:
      os_unfair_lock_unlock(v1);
      __break(1u);
      return;
    }
    os_unfair_lock_unlock(v1);
  }
}

uint64_t type metadata accessor for JSONMap()
{
  return self;
}

uint64_t JSONDecoder.allowsJSON5.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112);
}

uint64_t JSONDecoderImpl.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(char a1)
{
  if ((a1 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull_native(), (result & 1) == 0))
  {
    unint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }
  return result;
}

int64_t partial apply for closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 24), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void (**)(id))(v3 + 64), a3, *(void *)(v3 + 72), *(void *)(v3 + 80), *(void *)(v3 + 16));
}

int64_t closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, __n128)@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(id)@<X7>, char *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v43 = a6;
  unint64_t v44 = a7;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v50 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v16 - 8);
  uint64_t v48 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20.n128_f64[0] = MEMORY[0x1F4188790](v19);
  unint64_t v49 = (char *)v42 - v21;
  if (a2 >= 41 && *(_DWORD *)a1 == 1768714338 && *(_DWORD *)(a1 + 3) == 812938089) {
    return a3(a1, a2, v20);
  }
  int64_t result = static PropertyListDecoder.detectEncoding(of:)(&v51, (unsigned __int8 *)a1, a2);
  if (!v10)
  {
    if (result > a2)
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = v51;
      uint64_t v25 = (char *)(a1 + result);
      uint64_t v26 = a2 - result;
      uint64_t v27 = v49;
      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, 1, 1, a10);
      v42[1] = v42;
      MEMORY[0x1F4188790](v28);
      v42[-4] = a10;
      v42[-3] = v27;
      uint64_t v29 = v46;
      v42[-2] = v45;
      v42[-1] = v29;
      specialized static PropertyListDecoder.withUTF8Representation<A>(of:sourceEncoding:_:)(v25, v26, v24, (uint64_t (*)(void *, uint64_t))partial apply for closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:), v42);
      uint64_t v45 = v26;
      uint64_t v46 = v24;
      uint64_t v30 = v50;
      uint64_t v31 = v47;
      uint64_t v32 = v27;
      unint64_t v33 = v27;
      uint64_t v34 = v48;
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v18, v32, v48);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v18, 1, a10) == 1)
      {
        char v35 = *(void (**)(char *, uint64_t))(v31 + 8);
        v35(v18, v34);
        id v36 = specialized String.init<A>(bytes:encoding:)(v25, v45, v46);
        if (v37)
        {
          v43(v36);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v39 = type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v41 = v40;
          _CodingPathNode.path.getter(0x8000000000000000);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, *MEMORY[0x1E4FBBA78], v39);
          swift_willThrow();
        }
        return ((uint64_t (*)(char *, uint64_t))v35)(v49, v34);
      }
      else
      {
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
        v38(v15, v18, a10);
        v38(v44, v15, a10);
        return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v34);
      }
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))closure #1 in PropertyListDecoder._decode<A>(_:from:format:));
}

uint64_t partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[3], v3[4], v3[5], v3[6], v3[2]);
}

uint64_t partial apply for closure #1 in DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in DataProtocol.copyBytes<A>(to:from:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t closure #1 in DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v8 = result;
  uint64_t v9 = *a5;
  if (a3)
  {
    if (a4 - a3 < v9)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (v9 <= 0)
  {
    if (result)
    {
LABEL_4:
      uint64_t v10 = a2 - result;
      if (*a6 < a2 - result) {
        uint64_t v10 = *a6;
      }
      uint64_t v11 = result + v10;
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v11 = 0;
LABEL_10:
    int64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = v11 - v8;
    if (!v8) {
      uint64_t v12 = 0;
    }
    if (__OFADD__(*a5, v12))
    {
      __break(1u);
    }
    else
    {
      *a5 += v12;
      BOOL v13 = __OFSUB__(*a6, v12);
      uint64_t v14 = *a6 - v12;
      if (!v13)
      {
        *a6 = v14;
        return result;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
  return result;
}

void closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(unint64_t *), uint64_t a5, void *a6)
{
  unint64_t v67 = a1;
  unint64_t v68 = a2;
  *(void *)&long long v69 = a1;
  *((void *)&v69 + 1) = a1;
  uint64_t v70 = (_UNKNOWN **)(a1 + a2);
  uint64_t v71 = MEMORY[0x1E4FBC860];
  uint64_t v72 = 0;
  XMLPlistScanner.scanXMLPropertyList()();
  if (!v6)
  {
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_XMLPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    unint64_t v26 = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v11, v12, 0x8000000000000000);
    swift_release();
    *((void *)&v69 + 1) = v13;
    uint64_t v70 = &protocol witness table for _PlistDecoder<A>;
    unint64_t v67 = v26;
    swift_retain();
    a4(&v67);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a6 = 100;
    return;
  }
  swift_bridgeObjectRelease();
  id v73 = v6;
  id v14 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {
LABEL_32:

    return;
  }

  uint64_t v15 = v65[11];
  uint64_t v16 = (void *)v65[12];
  uint64_t v18 = v65[13];
  uint64_t v17 = v65[14];
  uint64_t v19 = v66;
  uint64_t v61 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v62 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v22;
  unint64_t v23 = 0xD00000000000002CLL;
  unint64_t v24 = 0x80000001823AE6C0;
  char v63 = v19;
  switch(v19)
  {
    case 1:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v67 = 0xD000000000000016;
      unint64_t v68 = 0x80000001823AE750;
      goto LABEL_15;
    case 2:
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v67 = 0xD000000000000013;
      unint64_t v68 = 0x80000001823AE730;
      XMLPlistTag.tagName.getter(v15);
      v27._uint64_t countAndFlagsBits = StaticString.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      uint64_t v28 = 0x6E696C206E6F203ELL;
      unint64_t v29 = 0xEA00000000002065;
      goto LABEL_21;
    case 3:
      if (v17)
      {
        unint64_t v67 = 0;
        unint64_t v68 = 0xE000000000000000;
        _StringGuts.grow(_:)(47);
        v30._unint64_t object = (void *)0x80000001823AA880;
        v30._uint64_t countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v30);
        unsigned int v31 = (v15 + 1);
        if ((v15 & 0x80) != 0) {
          unsigned int v31 = (((v15 & 0x3F) << 8) | (v15 >> 6)) + 33217;
        }
        v65[0] = (v31 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v31) >> 3)) & 7)));
        MEMORY[0x185302020](v65);
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = 0x656E696C206E6F20;
        v32._unint64_t object = (void *)0xE900000000000020;
        String.append(_:)(v32);
        v65[0] = v16;
        v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = 32;
        v34._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        swift_bridgeObjectRetain();
        uint64_t v35 = v18;
        uint64_t v36 = v17;
      }
      else
      {
        unint64_t v67 = 0;
        unint64_t v68 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v39._unint64_t object = (void *)0x80000001823AA880;
        v39._uint64_t countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v39);
        unsigned int v40 = (v15 + 1);
        if ((v15 & 0x80) != 0) {
          unsigned int v40 = (((v15 & 0x3F) << 8) | (v15 >> 6)) + 33217;
        }
        v65[0] = (v40 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v40) >> 3)) & 7)));
        MEMORY[0x185302020](v65);
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = 0x656E696C206E6F20;
        unint64_t v29 = 0xE900000000000020;
LABEL_21:
        String.append(_:)(*(Swift::String *)&v28);
        v65[0] = v16;
LABEL_22:
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      }
      String.append(_:)(*(Swift::String *)&v35);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    case 4:
      unint64_t v67 = 0;
      unint64_t v68 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v37._uint64_t countAndFlagsBits = 0xD000000000000036;
      v37._unint64_t object = (void *)0x80000001823AE6F0;
      String.append(_:)(v37);
LABEL_15:
      v65[0] = v15;
      goto LABEL_22;
    case 5:
      swift_bridgeObjectRetain();
      unint64_t v23 = v15;
      unint64_t v24 = (unint64_t)v16;
      goto LABEL_25;
    case 6:
      goto LABEL_25;
    default:
      if (v16)
      {
        unint64_t v67 = 0xD00000000000001BLL;
        unint64_t v68 = 0x80000001823AE790;
        v25._uint64_t countAndFlagsBits = v15;
        v25._unint64_t object = v16;
        String.append(_:)(v25);
LABEL_24:
        unint64_t v23 = v67;
        unint64_t v24 = v68;
      }
      else
      {
        unint64_t v23 = 0xD00000000000001ALL;
        unint64_t v24 = 0x80000001823AE770;
      }
LABEL_25:
      uint64_t v64 = v17;
      uint64_t v41 = v18;
      uint64_t v42 = (uint64_t)v16;
      *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 48) = v23;
      *(void *)(inited + 56) = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      char v43 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v67);
      uint64_t v45 = v67;
      uint64_t v44 = v68;
      swift_retain();
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v44);
      if (v47)
      {
        __break(1u);
        goto LABEL_34;
      }
      v43[(v46 >> 6) + 8] |= 1 << v46;
      uint64_t v48 = (uint64_t *)(v43[6] + 16 * v46);
      *uint64_t v48 = v45;
      v48[1] = v44;
      outlined init with take of Any(&v69, (_OWORD *)(v43[7] + 32 * v46));
      uint64_t v49 = v43[2];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v43[2] = v51;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v52 = objc_allocWithZone((Class)NSError);
      uint64_t v53 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v54 = objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, 3840, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v55 = objc_msgSend(v54, sel_domain);
      id v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      uint64_t v58 = v57;

      if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v58 == v59)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of XMLPlistError(v15, v42, v41, v64, v63);
LABEL_31:
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void))(*(void *)(v61 - 8) + 104))(v62, *MEMORY[0x1E4FBBA78]);
        swift_willThrow();
        goto LABEL_32;
      }
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of XMLPlistError(v15, v42, v41, v64, v63);
      if (v60) {
        goto LABEL_31;
      }
LABEL_35:
      __break(1u);
      return;
  }
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance _PlistDecoder<A>@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance _PlistDecoder<A>(a1, a2, a3, a4);
}

uint64_t partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:)(void *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(v4, v2, v3, v5, v6);
}

uint64_t specialized closure #1 in PropertyListDecoder.decode<A>(_:from:format:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  uint64_t v3 = *(uint64_t (**)(ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v2 + 8);
  unint64_t v4 = lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource();
  return v3(&type metadata for LocalizedStringResource, &type metadata for LocalizedStringResource, v4, v1, v2);
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance _PlistDecoder<A>@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDecoder.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t _PlistDecoder.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  unint64_t v26 = a1;
  uint64_t v27 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v23 = (char *)&v21 - v15;
  uint64_t v16 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = MEMORY[0x185302620](v16, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v28 = v16;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v17 = v22;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v18 = (uint64_t)v23;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v23, v9, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v17);
      swift_bridgeObjectRelease();
      unint64_t v19 = *(void *)(v5 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)(v18, v26, v19, 0, 0, 0, 255, v27, v25);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v18, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

void *specialized static PropertyListDecoder.withUTF8Representation<A>(of:sourceEncoding:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void *, uint64_t)@<X3>, void *a5@<X8>)
{
  if (a3 == 4) {
    return ((void *(*)(void *__return_ptr))a4)(a5);
  }
  id v7 = specialized String.init<A>(bytes:encoding:)(a1, a2, a3);
  if (v8)
  {
    v12[0] = (uint64_t)v7;
    v12[1] = v8;
    _sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(v12, a4);
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v10;
    _CodingPathNode.path.getter(0x8000000000000000);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x1E4FBBA78], v9);
    return (void *)swift_willThrow();
  }
}

unsigned __int8 *partial apply for closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(unsigned __int8 *a1, uint64_t a2)
{
  return closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, *(void *)(v2 + 24), *(uint64_t (**)(unsigned __int8 *, uint64_t))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16));
}

unsigned __int8 *closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a4;
  uint64_t v17 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t v13 = &a1[a2];
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a1;
  uint64_t v21 = a1;
  uint64_t v22 = &a1[a2];
  uint64_t v23 = MEMORY[0x1E4FBC860];
  uint64_t v24 = 0;
  unint64_t result = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(a1);
  if (&a1[a2] < result + 1) {
    return result;
  }
  if (v13 < result)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v13 - result < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (*result == 60)
  {
    unint64_t result = (unsigned __int8 *)v25(a1, a2);
    if (!v6)
    {
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v12, 0, 1, a6);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(v17, v12, v10);
    }
  }
  return result;
}

uint64_t partial apply for closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))closure #2 in PropertyListDecoder._decode<A>(_:from:format:));
}

unint64_t static PropertyListDecoder.detectEncoding(of:)(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a3 < 1) {
    goto LABEL_53;
  }
  if (a3 == 1)
  {
    int v5 = 0;
    int v6 = 0;
LABEL_6:
    int v7 = 0;
    int v8 = 1;
LABEL_7:
    int v9 = 1;
    int v10 = *a2;
    goto LABEL_16;
  }
  int v6 = a2[1];
  if ((unint64_t)a3 < 3)
  {
    int v5 = 0;
    goto LABEL_6;
  }
  int v7 = a2[2];
  if (a3 == 3)
  {
    int v5 = 0;
    int v8 = 0;
    goto LABEL_7;
  }
  int v8 = 0;
  int v9 = 0;
  int v5 = a2[3];
  int v10 = *a2;
  if (!*a2 && !a2[1] && v7 == 254 && v5 == 255)
  {
    uint64_t v11 = 2550137088;
LABEL_33:
    *a1 = v11;
    return 4;
  }
LABEL_16:
  BOOL v13 = a3 != 1 && v10 == 254 && v6 == 255;
  char v14 = !v13;
  if (v13) {
    int v15 = v8;
  }
  else {
    int v15 = 1;
  }
  if (v7) {
    int v15 = 1;
  }
  if (((v9 | v15) & 1) == 0 && !v5)
  {
    uint64_t v11 = 2617245952;
    goto LABEL_33;
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v17 = 2415919360;
    goto LABEL_40;
  }
  if (a3 != 1 && v10 == 255 && v6 == 254)
  {
    uint64_t v17 = 2483028224;
LABEL_40:
    *a1 = v17;
    return 2;
  }
  if (a3 != 1 && v10 == 239 && v6 == 187) {
    char v20 = v8;
  }
  else {
    char v20 = 1;
  }
  if ((v20 & 1) == 0 && v7 == 191)
  {
    *a1 = 4;
    return 3;
  }
LABEL_53:
  unint64_t result = static PropertyListDecoder.scanForExplicitXMLEncoding(in:)((unint64_t)a2, a3, &v21);
  if (!v3)
  {
    unint64_t result = 0;
    *a1 = v21;
  }
  return result;
}

unint64_t static PropertyListDecoder.scanForExplicitXMLEncoding(in:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2 >= 5)
  {
    unint64_t v5 = result;
    unint64_t result = strncmp((const char *)result, "<?xml", 5uLL);
    if (!result && (unint64_t)a2 >= 6)
    {
      uint64_t v6 = 0;
      unint64_t v7 = v5 + a2;
      uint64_t v8 = a2 - 14;
      while (1)
      {
        unint64_t result = v5 + v6 + 5;
        if ((*(unsigned char *)result & 0xFE) == 0x3E) {
          goto LABEL_12;
        }
        if (v7 < result) {
          break;
        }
        if (v6 < 0) {
          goto LABEL_19;
        }
        if (v8 + 9 < 0) {
          goto LABEL_20;
        }
        if ((unint64_t)(v8 + 9) < 0xA)
        {
          uint64_t v9 = type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v11 = v10;
          _CodingPathNode.path.getter(0x8000000000000000);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x1E4FBBA78], v9);
          return swift_willThrow();
        }
        unint64_t result = strncmp((const char *)result, "encoding=", 9uLL);
        if (!result)
        {
          unint64_t result = v5 + v6 + 14;
          if (v7 >= result)
          {
            if (v6 + 14 >= 0)
            {
              if ((v8 & 0x8000000000000000) == 0) {
                return static PropertyListDecoder.readQuotedEncoding(in:)(result, v8, a3);
              }
              goto LABEL_23;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            return result;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        --v8;
        ++v6;
        if (v5 + v6 + 5 >= v7) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
LABEL_12:
  *a3 = 4;
  return result;
}

uint64_t static PropertyListDecoder.readQuotedEncoding(in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a2 || (int v4 = *(unsigned __int8 *)result, v4 != 39) && v4 != 34)
  {
LABEL_11:
    *a3 = 4;
    return result;
  }
  unint64_t v5 = (char *)(result + 1);
  if (a2 < 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 1;
    while (*(unsigned __int8 *)(result + v6) != v4)
    {
      if (a2 == ++v6)
      {
        uint64_t v6 = a2;
        break;
      }
    }
    uint64_t v7 = v6 - 1;
    if (v6 == 6)
    {
      unint64_t result = _stringshims_strncasecmp_l((const char *)(result + 1), "utf-8", 5uLL, 0);
      if (!result) {
        goto LABEL_11;
      }
    }
  }
  id v8 = specialized String.init<A>(bytes:encoding:)(v5, v7, 5);
  if (v9)
  {
    uint64_t v10 = (uint64_t)v8;
    uint64_t v11 = v9;
    CFStringRef v12 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CFStringEncoding v13 = CFStringConvertIANACharSetNameToEncoding(v12);
    swift_unknownObjectRelease();
    if (v13 != -1)
    {
      swift_bridgeObjectRelease();
      unint64_t result = CFStringConvertEncodingToNSStringEncoding(v13);
      *a3 = result;
      return result;
    }
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = v10;
    v17._unint64_t object = v11;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    _CodingPathNode.path.getter(0x8000000000000000);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA78], v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v16 = v15;
    _CodingPathNode.path.getter(0x8000000000000000);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA78], v14);
  }
  return swift_willThrow();
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = specialized Data.InlineSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t closure #1 in XMLPlistMap.copyInBuffer()(uint64_t result)
{
  if (!*(void *)(result + 16))
  {
    uint64_t v1 = (void *)result;
    size_t v2 = *(void *)(result + 8);
    size_t v3 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(const void **)result;
      unint64_t v5 = (unsigned char *)swift_slowAlloc();
      if ((v2 & 0x8000000000000000) != 0)
      {
LABEL_9:
        unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v6 = v5;
      unint64_t result = (uint64_t)memmove(v5, v4, v2);
      v6[v2] = 0;
      if ((v3 & 0x8000000000000000) == 0)
      {
        *uint64_t v1 = v6;
        v1[1] = v3;
        v1[2] = v6;
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return &type metadata for Calendar.RepeatedTimePolicy;
}

ValueMetadata *type metadata accessor for Calendar.SearchDirection()
{
  return &type metadata for Calendar.SearchDirection;
}

ValueMetadata *type metadata accessor for Calendar.MatchingPolicy()
{
  return &type metadata for Calendar.MatchingPolicy;
}

uint64_t closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(char *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4, unsigned __int8 a5, unint64_t a6, char a7, uint64_t a8)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x200, a2, a3, 0, 0, 0, 0, 0, &v191, 0, 0);
    return swift_willThrow();
  }
  CFStringEncoding v13 = a1;
  int v14 = a5;
  uint64_t v15 = a4;
  uint64_t v16 = swift_allocObject();
  _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOi0_((uint64_t)v202);
  outlined init with take of LocalePreferences?((uint64_t)v202, v16 + 16, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  if (v15 == 2)
  {
    id v17 = (id)a3;
    if (v14 == 2)
    {
      *(double *)&uint64_t v186 = 0.0;
      uint64_t v15 = 1;
      if (a7) {
        goto LABEL_34;
      }
      goto LABEL_27;
    }
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v16;
    *(void *)(v21 + 24) = v13;
    uint64_t v20 = v189;
    *(double *)(v21 + 32) = *(double *)&v189;
    *(void *)(v21 + 40) = a3;
    *(unsigned char *)(v21 + 48) = v14;
    *(unsigned char *)(v21 + 49) = 2;
  }
  else
  {
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v16;
    *(void *)(v19 + 24) = v13;
    id v17 = (id)a3;
    *(double *)(v19 + 32) = *(double *)&v189;
    *(void *)(v19 + 40) = a3;
    *(unsigned char *)(v19 + 48) = v14;
    *(unsigned char *)(v19 + 49) = v15;
    if (v15)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      *(double *)&uint64_t v15 = 0.0;
      *(double *)&uint64_t v186 = COERCE_DOUBLE(closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)partial apply);
      if (a7) {
        goto LABEL_34;
      }
      goto LABEL_27;
    }
    uint64_t v20 = v189;
  }
  swift_retain_n();
  swift_bridgeObjectRetain();
  getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(v16, v13, v20, (unint64_t)v17, (uint64_t)v199);
  outlined init with take of LocalePreferences?((uint64_t)v199, (uint64_t)&v200, &demangling cache variable for type metadata for Result<stat, CocoaError>);
  outlined init with take of LocalePreferences?((uint64_t)&v200, (uint64_t)&v191, &demangling cache variable for type metadata for Result<stat, CocoaError>);
  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)&v191) == 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)&v200, (uint64_t)v198, &demangling cache variable for type metadata for Result<stat, CocoaError>);
    unint64_t v194 = *(void *)destructiveProjectEnumData for PredicateCodableError(v198, v22);
    lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
    swift_willThrowTypedImpl();
    goto LABEL_153;
  }
  outlined init with take of LocalePreferences?((uint64_t)&v200, (uint64_t)v198, &demangling cache variable for type metadata for Result<stat, CocoaError>);
  __uint32_t v24 = *(_DWORD *)(destructiveProjectEnumData for PredicateCodableError(v198, v23) + 116);
  unsigned int v25 = v24 & 0xFFFFFFFB;
  if (v14) {
    unsigned int v25 = v24 | 4;
  }
  if (v14 != 2) {
    __uint32_t v24 = v25;
  }
  unsigned int v26 = v24 & 0xFFFFFFFD;
  if (v15) {
    unsigned int v26 = v24 | 2;
  }
  if (v15 == 2) {
    __uint32_t v27 = v24;
  }
  else {
    __uint32_t v27 = v26;
  }
  if (chflags(v13, v27))
  {
    int v28 = MEMORY[0x185301870]();
    LODWORD(v17) = v28;
    uint64_t v29 = 4;
    switch(v28)
    {
      case 1:
      case 13:
        uint64_t v29 = 513;
        goto LABEL_147;
      case 2:
        goto LABEL_147;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_141;
      case 17:
        uint64_t v29 = 516;
        goto LABEL_147;
      case 28:
      case 69:
        uint64_t v29 = 640;
        goto LABEL_147;
      case 30:
        uint64_t v29 = 642;
        goto LABEL_147;
      case 63:
        uint64_t v29 = 514;
        goto LABEL_147;
      default:
        if (v28 == 102)
        {
          id v72 = 0;
          uint64_t v29 = 512;
        }
        else
        {
LABEL_141:
          uint64_t v29 = 512;
LABEL_147:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_292;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v82 = (int)POSIXErrorCode.rawValue.getter();
          id v83 = objc_allocWithZone((Class)NSError);
          uint64_t v84 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v72 = objc_msgSend(v83, sel_initWithDomain_code_userInfo_, v84, v82, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v85 = objc_msgSend(v72, sel_domain);
          id v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
          uint64_t v15 = v87;

          id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          LODWORD(v17) = v89;
          if (v86 == v88 && v15 == v89)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v90 & 1) == 0) {
              goto LABEL_245;
            }
          }
        }
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v29, v189, a3, v72, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v196, 0, 0);
        swift_willThrow();
        break;
    }
LABEL_153:
    swift_release();
    return swift_release_n();
  }
  swift_release();
  swift_release();
  *(double *)&uint64_t v186 = 0.0;
  uint64_t v15 = 1;
  id v17 = (id)a3;
  if (a7) {
    goto LABEL_34;
  }
LABEL_27:
  Swift::String v30 = (double *)swift_allocObject();
  *((void *)v30 + 2) = v13;
  *((void *)v30 + 3) = a6;
  v30[4] = *(double *)&v189;
  *((void *)v30 + 5) = v17;
  if (a6 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_292:
    unint64_t v196 = 0;
    unint64_t v197 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v196 = 0xD000000000000014;
    unint64_t v197 = 0x80000001823A9780;
    v193[0] = v17;
    v176._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v176);
    swift_bridgeObjectRelease();
    goto LABEL_293;
  }
  unsigned int v31 = (char *)v30;
  swift_bridgeObjectRetain();
  if (((unsigned __int16)S_IWUSR.getter() & (unsigned __int16)a6) == 0)
  {
    Swift::String v34 = partial apply for closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:);
    char v180 = 0;
    goto LABEL_35;
  }
  swift_retain();
  if (chmod(v13, a6))
  {
    int v32 = MEMORY[0x185301870]();
    LODWORD(v17) = v32;
    uint64_t v33 = 4;
    uint64_t v15 = (uint64_t)v186;
    switch(v32)
    {
      case 1:
      case 13:
        uint64_t v33 = 513;
        goto LABEL_158;
      case 2:
        goto LABEL_158;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_154;
      case 17:
        uint64_t v33 = 516;
        goto LABEL_158;
      case 28:
      case 69:
        uint64_t v33 = 640;
        goto LABEL_158;
      case 30:
        uint64_t v33 = 642;
        goto LABEL_158;
      case 63:
        uint64_t v33 = 514;
        goto LABEL_158;
      default:
        uint64_t v15 = (uint64_t)v186;
        if (v32 == 102)
        {
          id v72 = 0;
          uint64_t v33 = 512;
LABEL_164:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v33, v189, a3, v72, 0, 0, 0, 0, &v191, 0, 0);
          swift_willThrow();
          swift_release_n();
          uint64_t v68 = v15;
          goto LABEL_165;
        }
LABEL_154:
        uint64_t v33 = 512;
LABEL_158:
        uint64_t v186 = (uint64_t (*)())v15;
        CFStringEncoding v13 = v31;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_289;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v91 = (int)POSIXErrorCode.rawValue.getter();
        id v92 = objc_allocWithZone((Class)NSError);
        uint64_t v93 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v72 = objc_msgSend(v92, sel_initWithDomain_code_userInfo_, v93, v91, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v94 = objc_msgSend(v72, sel_domain);
        id v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        uint64_t v15 = v96;

        id v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        LODWORD(v17) = v98;
        if (v95 == v97 && v15 == v98)
        {
          swift_bridgeObjectRelease_n();
LABEL_163:
          uint64_t v15 = (uint64_t)v186;
          goto LABEL_164;
        }
        char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v99) {
          goto LABEL_163;
        }
        __break(1u);
LABEL_250:
        if (v17 == 63)
        {
          uint64_t v143 = 258;
        }
        else
        {
          if (v17 == 102)
          {
            id v17 = 0;
            uint64_t v188 = 256;
            goto LABEL_282;
          }
LABEL_271:
          uint64_t v143 = 256;
        }
LABEL_276:
        uint64_t v188 = v143;
LABEL_277:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_295;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v165 = (int)POSIXErrorCode.rawValue.getter();
        id v166 = objc_allocWithZone((Class)NSError);
        uint64_t v167 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v17 = objc_msgSend(v166, sel_initWithDomain_code_userInfo_, v167, v165, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v168 = objc_msgSend(v17, sel_domain);
        id v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
        uint64_t v171 = v170;

        id v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v15 = v173;
        if (v169 == v172 && v171 == v173)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v174 & 1) == 0)
          {
LABEL_287:
            __break(1u);
            goto LABEL_288;
          }
        }
LABEL_282:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v188, v189, a3, v17, 0, 0, 0, 0, &v191, 0, 0);
        swift_willThrow();
        if (!v13) {
          goto LABEL_284;
        }
        goto LABEL_283;
    }
  }
  swift_release_n();
LABEL_34:
  Swift::String v34 = 0;
  unsigned int v31 = 0;
  char v180 = 1;
LABEL_35:
  char v179 = v15;
  if (*(void *)(a8 + 16))
  {
    uint64_t v35 = @"NSFileOwnerAccountName";
    uint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
    if (v37) {
      outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v36, (uint64_t)&v191);
    }
    else {
      memset(&v191, 0, 32);
    }

    if (v191.f_bavail)
    {
      int v38 = swift_dynamicCast();
      if (v38) {
        double v39 = v200;
      }
      else {
        double v39 = 0.0;
      }
      if (v38) {
        unint64_t v40 = v201;
      }
      else {
        unint64_t v40 = 0;
      }
      goto LABEL_48;
    }
  }
  else
  {
    memset(&v191, 0, 32);
  }
  outlined destroy of Any?((uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for Any?);
  double v39 = 0.0;
  unint64_t v40 = 0;
LABEL_48:
  uint64_t v183 = v34;
  uint64_t v184 = v16;
  if (*(void *)(a8 + 16))
  {
    uint64_t v41 = @"NSFileOwnerAccountID";
    uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
    if (v43) {
      outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v42, (uint64_t)&v191);
    }
    else {
      memset(&v191, 0, 32);
    }
  }
  else
  {
    memset(&v191, 0, 32);
  }
  uint64_t v185 = (uint64_t)v31;
  unint64_t v44 = (unint64_t)specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)&v191);
  char v46 = v45;
  outlined destroy of Any?((uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*(void *)(a8 + 16))
  {
    memset(&v191, 0, 32);
LABEL_65:
    outlined destroy of Any?((uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for Any?);
    double v181 = 0.0;
    unint64_t v52 = 0;
    goto LABEL_66;
  }
  char v47 = @"NSFileGroupOwnerAccountName";
  uint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47);
  if (v49) {
    outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v48, (uint64_t)&v191);
  }
  else {
    memset(&v191, 0, 32);
  }

  if (!v191.f_bavail) {
    goto LABEL_65;
  }
  int v50 = swift_dynamicCast();
  double v51 = v200;
  if (!v50) {
    double v51 = 0.0;
  }
  double v181 = v51;
  if (v50) {
    unint64_t v52 = v201;
  }
  else {
    unint64_t v52 = 0;
  }
LABEL_66:
  if (*(void *)(a8 + 16))
  {
    uint64_t v53 = @"NSFileGroupOwnerAccountID";
    uint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
    if (v55) {
      outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v54, (uint64_t)&v191);
    }
    else {
      memset(&v191, 0, 32);
    }
  }
  else
  {
    memset(&v191, 0, 32);
  }
  unint64_t v56 = (unint64_t)specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)&v191);
  char v58 = v57;
  outlined destroy of Any?((uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v40)
  {
    if (v46)
    {
      unint64_t v60 = a3;
      uint64_t v15 = *(uint64_t *)v187;
      if (!v52 && (v58 & 1) != 0) {
        goto LABEL_115;
      }
      goto LABEL_95;
    }
    if (HIDWORD(v44))
    {
      unint64_t v60 = a3;
      uint64_t v15 = *(uint64_t *)v187;
      LODWORD(v44) = -1;
      if (v58) {
        goto LABEL_100;
      }
      goto LABEL_98;
    }
LABEL_88:
    swift_bridgeObjectRelease();
    unint64_t v60 = a3;
    uint64_t v15 = *(uint64_t *)v187;
    if (v58) {
      goto LABEL_100;
    }
    goto LABEL_98;
  }
  if ((v46 & 1) == 0 && !HIDWORD(v44)) {
    goto LABEL_88;
  }
  if ((v40 & 0x1000000000000000) != 0) {
    goto LABEL_238;
  }
  if ((v40 & 0x2000000000000000) == 0)
  {
    if ((*(void *)&v39 & 0x1000000000000000) != 0)
    {
      unint64_t v59 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt32VSg_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6h77VSg_TG5038_ss11_StringGutsV11withCStringyxxSPys4a23VGKXEKlFxSRyAEGKXEfU_s6c75Q114_TG5062_s10Foundation16_FileManagerImplV24_userAccountNameToNumberys6f14O29SSFZAGSPys4E7VGXEfU_Tf3nnpf_nTf3nnnpf_nTf1cn_nTm((v40 & 0xFFFFFFFFFFFFFFFLL) + 32, *(void *)&v39 & 0xFFFFFFFFFFFFLL, MEMORY[0x1E4F14880]);
      uint64_t v15 = *(uint64_t *)v187;
      LODWORD(v200) = v59;
      BYTE4(v200) = BYTE4(v59) & 1;
      goto LABEL_79;
    }
LABEL_238:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v15 = *(uint64_t *)v187;
LABEL_79:
    swift_bridgeObjectRelease();
    unint64_t v60 = a3;
    if ((BYTE4(v200) & 1) == 0) {
      goto LABEL_97;
    }
LABEL_95:
    LODWORD(v44) = -1;
    if (v58) {
      goto LABEL_100;
    }
    goto LABEL_98;
  }
  *(double *)&v191.uint64_t f_bsize = v39;
  v191.uint64_t f_blocks = v40 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v61 = getpwnam((const char *)&v191);
  if (v61) {
    uid_t pw_uid = v61->pw_uid;
  }
  else {
    uid_t pw_uid = 0;
  }
  unint64_t v60 = a3;
  uint64_t v15 = *(uint64_t *)v187;
  LODWORD(v200) = pw_uid;
  BYTE4(v200) = v61 == 0;
  swift_bridgeObjectRelease();
  if (BYTE4(v200)) {
    goto LABEL_95;
  }
LABEL_97:
  LODWORD(v44) = LODWORD(v200);
  if (v58) {
    goto LABEL_100;
  }
LABEL_98:
  if (!HIDWORD(v56))
  {
    swift_bridgeObjectRelease();
    goto LABEL_112;
  }
LABEL_100:
  if (!v52)
  {
LABEL_110:
    LODWORD(v56) = -1;
    goto LABEL_112;
  }
  if ((v52 & 0x1000000000000000) != 0)
  {
LABEL_239:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    _StringGuts._slowWithCString<A>(_:)();
    goto LABEL_109;
  }
  if ((v52 & 0x2000000000000000) == 0)
  {
    if ((*(void *)&v181 & 0x1000000000000000) != 0)
    {
      unint64_t v63 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt32VSg_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6h77VSg_TG5038_ss11_StringGutsV11withCStringyxxSPys4a23VGKXEKlFxSRyAEGKXEfU_s6c75Q114_TG5062_s10Foundation16_FileManagerImplV24_userAccountNameToNumberys6f14O29SSFZAGSPys4E7VGXEfU_Tf3nnpf_nTf3nnnpf_nTf1cn_nTm((v52 & 0xFFFFFFFFFFFFFFFLL) + 32, *(void *)&v181 & 0xFFFFFFFFFFFFLL, MEMORY[0x1E4F14870]);
      LODWORD(v200) = v63;
      BYTE4(v200) = BYTE4(v63) & 1;
      goto LABEL_109;
    }
    goto LABEL_239;
  }
  *(double *)&v191.uint64_t f_bsize = v181;
  v191.uint64_t f_blocks = v52 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v64 = getgrnam((const char *)&v191);
  if (v64) {
    gid_t gr_gid = v64->gr_gid;
  }
  else {
    gid_t gr_gid = 0;
  }
  LODWORD(v200) = gr_gid;
  BYTE4(v200) = v64 == 0;
LABEL_109:
  swift_bridgeObjectRelease();
  if (BYTE4(v200)) {
    goto LABEL_110;
  }
  LODWORD(v56) = LODWORD(v200);
LABEL_112:
  if (chown(v13, v44, v56))
  {
    int v66 = MEMORY[0x185301870]();
    LODWORD(v17) = v66;
    uint64_t v67 = 4;
    CFStringEncoding v13 = (char *)v186;
    switch(v66)
    {
      case 1:
      case 13:
        uint64_t v67 = 513;
        goto LABEL_132;
      case 2:
        goto LABEL_132;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_127;
      case 17:
        uint64_t v67 = 516;
        goto LABEL_132;
      case 28:
      case 69:
        uint64_t v67 = 640;
        goto LABEL_132;
      case 30:
        uint64_t v67 = 642;
        goto LABEL_132;
      case 63:
        uint64_t v67 = 514;
        goto LABEL_132;
      default:
        uint64_t v15 = v185;
        CFStringEncoding v13 = (char *)v186;
        if (v66 == 102)
        {
          id v72 = 0;
          uint64_t v67 = 512;
          unint64_t v73 = a3;
          id v17 = v183;
LABEL_137:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v67, v189, v73, v72, 0, 0, 0, 0, &v191, 0, 0);
          swift_willThrow();
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v17);
          uint64_t v68 = (uint64_t)v13;
          goto LABEL_165;
        }
LABEL_127:
        uint64_t v67 = 512;
LABEL_132:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_289;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v74 = (int)POSIXErrorCode.rawValue.getter();
        id v75 = objc_allocWithZone((Class)NSError);
        uint64_t v76 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v72 = objc_msgSend(v75, sel_initWithDomain_code_userInfo_, v76, v74, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v77 = objc_msgSend(v72, sel_domain);
        id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        uint64_t v15 = v79;

        if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v15 == v80)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v73 = a3;
          id v17 = v183;
          goto LABEL_137;
        }
        char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v73 = a3;
        id v17 = v183;
        if (v81) {
          goto LABEL_137;
        }
        __break(1u);
        break;
    }
LABEL_245:
    __break(1u);
LABEL_246:
    if (v17 == 63)
    {
      uint64_t v144 = 258;
    }
    else
    {
      if (v17 == 102)
      {
        id v17 = 0;
        uint64_t v182 = 256;
LABEL_268:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v182, v189, a3, v17, 0, 0, 0, 0, &v191, 0, 0);
        goto LABEL_269;
      }
LABEL_259:
      uint64_t v144 = 256;
    }
LABEL_262:
    uint64_t v182 = v144;
LABEL_263:
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v154 = (int)POSIXErrorCode.rawValue.getter();
      id v155 = objc_allocWithZone((Class)NSError);
      uint64_t v156 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(v155, sel_initWithDomain_code_userInfo_, v156, v154, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v157 = objc_msgSend(v17, sel_domain);
      id v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
      uint64_t v160 = v159;

      id v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v15 = v162;
      if (v158 == v161 && v160 == v162)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_268;
      }
      char v163 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v163) {
        goto LABEL_268;
      }
      goto LABEL_286;
    }
LABEL_295:
    *(void *)&v191.uint64_t f_bsize = 0;
    v191.uint64_t f_blocks = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(void *)&v191.uint64_t f_bsize = v15;
    v191.uint64_t f_blocks = 0x80000001823A9780;
    LODWORD(v194) = v17;
    goto LABEL_290;
  }
LABEL_115:
  specialized static _FileManagerImpl._setCatInfoAttributes(_:path:)(a8, v189, v60);
  if (*(double *)&v15 == 0.0)
  {
    *(double *)&uint64_t v15 = -2.31584178e77;
    uint64_t v69 = String._bridgeToObjectiveCImpl()();
    if (*(void *)(a8 + 16) && (uint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v69), (v71 & 1) != 0)) {
      outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v70, (uint64_t)&v191);
    }
    else {
      memset(&v191, 0, 32);
    }
    swift_unknownObjectRelease();
    if (v191.f_bavail)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      if (swift_dynamicCast())
      {
        specialized static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(*(uint64_t *)&v200, v13, 0);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    if (*(void *)(a8 + 16))
    {
      uint64_t v100 = @"NSFileModificationDate";
      uint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v100);
      if (v102) {
        outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v101, (uint64_t)&v191);
      }
      else {
        memset(&v191, 0, 32);
      }

      if (v191.f_bavail)
      {
        if (swift_dynamicCast())
        {
          unint64_t v103 = COERCE_UNSIGNED_INT64(v200 + 978307200.0) & 0x7FF0000000000000;
          double v104 = trunc(v200 + 978307200.0);
          double v105 = v103 == 0x7FF0000000000000 ? v200 + 978307200.0 : v104;
          if (v105 > -9.22337204e18 && v105 < 9.22337204e18 && v105 == trunc(v105))
          {
            double v106 = (v200 + 978307200.0 - v104) * 1000000.0;
            if (v103 == 0x7FF0000000000000) {
              double v106 = 0.0;
            }
            double v107 = round(v106);
            if (v107 > -2147483650.0 && v107 < 2147483650.0)
            {
              *(void *)&v191.uint64_t f_bsize = (uint64_t)v105;
              LODWORD(v191.f_blocks) = (int)v107;
              v191.f_bfree = (uint64_t)v105;
              LODWORD(v191.f_bavail) = (int)v107;
              if (utimes(v13, (const timeval *)&v191))
              {
                LODWORD(v17) = MEMORY[0x185301870]();
                CocoaError.Code.init(fileErrno:reading:)((Swift::Int32)v17, 0);
                unint64_t v108 = (uint64_t (*)(void))v199[0];
                if (v17 == 102)
                {
                  id v109 = 0;
                  uint64_t v15 = v189;
                  int64_t v110 = v186;
                }
                else
                {
                  int64_t v110 = v186;
                  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
                    goto LABEL_294;
                  }
                  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                  uint64_t v128 = (int)POSIXErrorCode.rawValue.getter();
                  id v129 = objc_allocWithZone((Class)NSError);
                  uint64_t v130 = String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  id v109 = objc_msgSend(v129, sel_initWithDomain_code_userInfo_, v130, v128, _NativeDictionary.bridged()());
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  id v131 = objc_msgSend(v109, sel_domain);
                  id v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
                  uint64_t v134 = v133;

                  if (v132 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                    && v134 == v135)
                  {
                    swift_bridgeObjectRelease_n();
                    uint64_t v15 = v189;
                  }
                  else
                  {
                    char v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    LODWORD(v17) = v184;
                    uint64_t v15 = v189;
                    if ((v137 & 1) == 0)
                    {
                      __break(1u);
LABEL_286:
                      __break(1u);
                      goto LABEL_287;
                    }
                  }
                }
                swift_bridgeObjectRetain();
                specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v108, v15, a3, v109, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v200, 0, 0);
                swift_willThrow();
                outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v183);
                uint64_t v68 = (uint64_t)v110;
                goto LABEL_165;
              }
            }
          }
        }
LABEL_188:
        if (v180)
        {
          uint64_t v111 = v184;
        }
        else
        {
          uint64_t v112 = swift_retain();
          ((void (*)(uint64_t))v183)(v112);
          uint64_t v111 = v184;
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v183);
        }
        if ((v179 & 1) == 0)
        {
          uint64_t v113 = swift_retain();
          ((void (*)(uint64_t))v186)(v113);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v186);
        }
        if (*(void *)(a8 + 16))
        {
          uint64_t v114 = @"NSFileProtectionKey";
          uint64_t v115 = specialized __RawDictionaryStorage.find<A>(_:)(v114);
          if (v116) {
            outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v115, (uint64_t)&v191);
          }
          else {
            memset(&v191, 0, 32);
          }

          if (v191.f_bavail)
          {
            type metadata accessor for NSFileProtectionType(0);
            if ((swift_dynamicCast() & 1) == 0)
            {
LABEL_206:
              uint64_t v120 = (uint64_t)v183;
LABEL_207:
              outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v120);
              uint64_t v68 = (uint64_t)v186;
              goto LABEL_165;
            }
            id v72 = *(id *)&v200;
            unint64_t v117 = NSFileProtectionType.intValue.getter(v72);
            if ((v117 & 0x100000000) != 0)
            {
LABEL_204:

              goto LABEL_206;
            }
            unint64_t v118 = v117;
            getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(v111, v13, v189, a3, (uint64_t)v198);
            outlined init with take of LocalePreferences?((uint64_t)v198, (uint64_t)v199, &demangling cache variable for type metadata for Result<stat, CocoaError>);
            outlined init with take of LocalePreferences?((uint64_t)v199, (uint64_t)&v200, &demangling cache variable for type metadata for Result<stat, CocoaError>);
            if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)&v200) == 1)
            {
              outlined init with take of LocalePreferences?((uint64_t)v199, (uint64_t)&v191, &demangling cache variable for type metadata for Result<stat, CocoaError>);
              destructiveProjectEnumData for PredicateCodableError(&v191, v119);
              lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
LABEL_203:
              swift_willThrowTypedImpl();
              goto LABEL_204;
            }
            outlined init with take of LocalePreferences?((uint64_t)v199, (uint64_t)&v196, &demangling cache variable for type metadata for Result<stat, CocoaError>);
            int v122 = *(unsigned __int16 *)(destructiveProjectEnumData for PredicateCodableError(&v196, v121) + 4);
            int v123 = S_IFMT.getter() & v122;
            if (v123 != (unsigned __int16)S_IFREG.getter())
            {
              getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(v111, v13, v189, a3, (uint64_t)v193);
              outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)&v194, &demangling cache variable for type metadata for Result<stat, CocoaError>);
              outlined init with take of LocalePreferences?((uint64_t)&v194, (uint64_t)&v191, &demangling cache variable for type metadata for Result<stat, CocoaError>);
              if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)&v191) == 1)
              {
                outlined init with take of LocalePreferences?((uint64_t)&v194, (uint64_t)v192, &demangling cache variable for type metadata for Result<stat, CocoaError>);
                destructiveProjectEnumData for PredicateCodableError(v192, v136);
                lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
                goto LABEL_203;
              }
              outlined init with take of LocalePreferences?((uint64_t)&v194, (uint64_t)v192, &demangling cache variable for type metadata for Result<stat, CocoaError>);
              int v139 = *(unsigned __int16 *)(destructiveProjectEnumData for PredicateCodableError(v192, v138) + 4);
              int v140 = S_IFMT.getter() & v139;
              if (v140 != (unsigned __int16)S_IFDIR.getter()) {
                goto LABEL_204;
              }
            }
            unint64_t v124 = specialized static _FileManagerImpl._fileProtectionValueForPath(_:)(v13);
            uint64_t v125 = v183;
            if ((v124 & 0x100000000) != 0 || v124 != v118)
            {
              uint64_t v126 = open(_:_:)();
              if ((v126 & 0x80000000) == 0)
              {
                uint64_t v127 = v126;
                CFStringEncoding v13 = 0;
LABEL_213:
                if (!MEMORY[0x185301890](v127, 64, v118)) {
                  goto LABEL_218;
                }
                v187[0] = v127;
                if (MEMORY[0x185301870]() != 45)
                {
                  LODWORD(v17) = MEMORY[0x185301870]();
                  uint64_t v182 = 263;
                  switch((int)v17)
                  {
                    case 1:
                    case 13:
                      uint64_t v144 = 257;
                      goto LABEL_262;
                    case 2:
                      uint64_t v144 = 260;
                      goto LABEL_262;
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                      goto LABEL_259;
                    case 27:
                      goto LABEL_263;
                    default:
                      goto LABEL_246;
                  }
                }
                bzero(&v191, 0x878uLL);
                if (fstatfs(v127, &v191) || (v191.f_flags & 0x80) == 0)
                {
                  uint64_t v125 = v183;
LABEL_218:
                  if (v13) {
                    closedir((DIR *)v13);
                  }
                  else {
                    close(v127);
                  }
                  goto LABEL_243;
                }
                LODWORD(v17) = 45;
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                  uint64_t v145 = (int)POSIXErrorCode.rawValue.getter();
                  id v146 = objc_allocWithZone((Class)NSError);
                  uint64_t v147 = String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  id v148 = objc_msgSend(v146, sel_initWithDomain_code_userInfo_, v147, v145, _NativeDictionary.bridged()());
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  id v149 = objc_msgSend(v148, sel_domain);
                  id v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
                  uint64_t v15 = v151;

                  id v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                  LODWORD(v17) = v153;
                  if (v150 == v152 && v15 == v153)
                  {
                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    char v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v164 & 1) == 0)
                    {
LABEL_288:
                      __break(1u);
LABEL_289:
                      *(void *)&v191.uint64_t f_bsize = 0;
                      v191.uint64_t f_blocks = 0xE000000000000000;
                      _StringGuts.grow(_:)(22);
                      swift_bridgeObjectRelease();
                      *(void *)&v191.uint64_t f_bsize = 0xD000000000000014;
                      v191.uint64_t f_blocks = 0x80000001823A9780;
                      LODWORD(v200) = v17;
LABEL_290:
                      v175._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                      String.append(_:)(v175);
                      swift_bridgeObjectRelease();
                      goto LABEL_293;
                    }
                  }
                  swift_bridgeObjectRetain();
                  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x100, v189, a3, v148, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v194, 0, 0);
LABEL_269:
                  swift_willThrow();
                  if (!v13)
                  {
                    close(v187[0]);
LABEL_284:

                    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v183);
                    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v186);
                    return swift_release();
                  }
LABEL_283:
                  closedir((DIR *)v13);
                  goto LABEL_284;
                }
                unint64_t v194 = 0;
                unint64_t v195 = 0xE000000000000000;
                _StringGuts.grow(_:)(22);
                swift_bridgeObjectRelease();
                unint64_t v194 = 0xD000000000000014;
                unint64_t v195 = 0x80000001823A9780;
                v193[0] = 45;
                v178._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v178);
                swift_bridgeObjectRelease();
                while (1)
                {
LABEL_293:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_294:
                  double v200 = 0.0;
                  unint64_t v201 = 0xE000000000000000;
                  _StringGuts.grow(_:)(22);
                  swift_bridgeObjectRelease();
                  double v200 = *(double *)&v15;
                  unint64_t v201 = 0x80000001823A9780;
                  v198[0] = v17;
                  v177._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v177);
                  swift_bridgeObjectRelease();
                }
              }
              if (MEMORY[0x185301870]() == 21)
              {
                uint64_t v141 = opendir(v13);
                if (v141)
                {
                  CFStringEncoding v13 = (char *)v141;
                  uint64_t v142 = dirfd(v141);
                  if ((v142 & 0x80000000) == 0)
                  {
                    uint64_t v127 = v142;
                    uint64_t v125 = v183;
                    goto LABEL_213;
                  }
                  if (MEMORY[0x185301870]() == 13)
                  {
                    closedir((DIR *)v13);
                    uint64_t v125 = v183;
                    goto LABEL_243;
                  }
LABEL_236:
                  LODWORD(v17) = MEMORY[0x185301870]();
                  uint64_t v188 = 263;
                  switch((int)v17)
                  {
                    case 1:
                    case 13:
                      uint64_t v143 = 257;
                      goto LABEL_276;
                    case 2:
                      uint64_t v143 = 260;
                      goto LABEL_276;
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                      goto LABEL_271;
                    case 27:
                      goto LABEL_277;
                    default:
                      goto LABEL_250;
                  }
                }
              }
              if (MEMORY[0x185301870]() != 13)
              {
                CFStringEncoding v13 = 0;
                goto LABEL_236;
              }
            }
LABEL_243:

            uint64_t v120 = (uint64_t)v125;
            goto LABEL_207;
          }
        }
        else
        {
          memset(&v191, 0, 32);
        }
        outlined destroy of Any?((uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_206;
      }
    }
    else
    {
      memset(&v191, 0, 32);
    }
    outlined destroy of Any?((uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_188;
  }
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v183);
  uint64_t v68 = (uint64_t)v186;
LABEL_165:
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v68);
  return swift_release();
}

id specialized _readFileAttributePrimitive<A>(_:as:)(uint64_t a1)
{
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v57)
  {
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    uint64_t v7 = &v56;
    goto LABEL_13;
  }
  outlined init with take of Any(&v56, v59);
  outlined init with copy of Any((uint64_t)v59, (uint64_t)&v56);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if (swift_dynamicCast())
  {
    id v1 = *(id *)&v53[0];
    id v2 = objc_msgSend(v1, sel_unsignedIntegerValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if (v4)
    {
      unint64_t v5 = v59;
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
      return v2;
    }
  }
  outlined init with copy of Any((uint64_t)v59, (uint64_t)&v56);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any((uint64_t)v59, (uint64_t)v55);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(v53, (uint64_t)&v56);
      uint64_t v8 = v57;
      uint64_t v9 = v58;
      uint64_t v10 = __swift_project_boxed_opaque_existential_1(&v56, v57);
      double v51 = v43;
      uint64_t v11 = *(void **)(v8 - 8);
      uint64_t v12 = v11[8];
      double v13 = MEMORY[0x1F4188790](v10);
      unint64_t v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v15 = (void (*)(unsigned char *, double))v11[2];
      v15(&v43[-v14], v13);
      uint64_t v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
      char v17 = v16;
      int v50 = v43;
      double v18 = MEMORY[0x1F4188790](v16);
      unint64_t v52 = &v43[-v14];
      char v49 = v15;
      ((void (*)(unsigned char *, unsigned char *, uint64_t, double))v15)(&v43[-v14], &v43[-v14], v8, v18);
      if (v17)
      {
        char v47 = v9;
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t v48 = v43;
        MEMORY[0x1F4188790](AssociatedTypeWitness);
        swift_getAssociatedConformanceWitness();
        uint64_t v20 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        unint64_t v46 = (unint64_t)v43;
        MEMORY[0x1F4188790](v20);
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v21 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v22 = (void (*)(unsigned char *, uint64_t))v11[1];
        v22(&v43[-v14], v8);
        v22(&v43[-v14], v8);
        if (v21)
        {
          v22(v52, v8);
LABEL_34:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
          return 0;
        }
        uint64_t v48 = v11;
      }
      else
      {
        uint64_t v48 = v11;
        uint64_t v22 = (void (*)(unsigned char *, uint64_t))v11[1];
        v22(&v43[-v14], v8);
      }
      uint64_t v23 = v52;
      uint64_t v24 = dispatch thunk of BinaryInteger.bitWidth.getter();
      double v25 = MEMORY[0x1F4188790](v24);
      unsigned int v26 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
      ((void (*)(unsigned char *, unsigned char *, uint64_t, double))v49)(v26, v23, v8, v25);
      if (v24 <= 63)
      {
        v22(&v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
        goto LABEL_19;
      }
      *(void *)&v53[0] = -1;
      char v28 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v28)
      {
        char v47 = v43;
        if (v29 <= 64)
        {
          uint64_t v33 = swift_getAssociatedTypeWitness();
          char v49 = v43;
          MEMORY[0x1F4188790](v33);
          swift_getAssociatedConformanceWitness();
          uint64_t v34 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          char v45 = v43;
          MEMORY[0x1F4188790](v34);
          unint64_t v46 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v35 = &v43[-v46];
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          int v44 = dispatch thunk of static Comparable.> infix(_:_:)();
          uint64_t v36 = v48;
          uint64_t v37 = ((uint64_t (*)(unsigned char *, uint64_t))v22)(v35, v8);
          char v49 = *(unsigned char **)&v53[0];
          double v38 = MEMORY[0x1F4188790](v37);
          double v39 = &v43[-v46];
          (*((void (**)(unsigned char *, unsigned char *, uint64_t, double))v36 + 4))(&v43[-v46], &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v8, v38);
          if ((v44 & 1) == 0)
          {
            v22(v39, v8);
            uint64_t v23 = v52;
            goto LABEL_19;
          }
          unint64_t v40 = dispatch thunk of BinaryInteger._lowWord.getter();
          v22(v39, v8);
          uint64_t v23 = v52;
          if ((unint64_t)v49 >= v40)
          {
LABEL_19:
            id v2 = (id)dispatch thunk of BinaryInteger._lowWord.getter();
            v22(v23, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
            unint64_t v5 = &v56;
            goto LABEL_20;
          }
LABEL_33:
          v22(v23, v8);
          goto LABEL_34;
        }
        MEMORY[0x1F4188790](v29);
        unint64_t v30 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
      }
      else
      {
        if (v29 <= 64)
        {
          unint64_t v41 = dispatch thunk of BinaryInteger._lowWord.getter();
          v22(&v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
          BOOL v42 = *(void *)&v53[0] >= v41;
          uint64_t v23 = v52;
          if (v42) {
            goto LABEL_19;
          }
          goto LABEL_33;
        }
        MEMORY[0x1F4188790](v29);
        unint64_t v30 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
        char v47 = v43;
      }
      unsigned int v31 = &v43[-v30];
      lazy protocol witness table accessor for type UInt and conformance UInt();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v32 = dispatch thunk of static Comparable.< infix(_:_:)();
      v22(v31, v8);
      v22(v26, v8);
      uint64_t v23 = v52;
      if ((v32 & 1) == 0) {
        goto LABEL_19;
      }
      goto LABEL_33;
    }
    uint64_t v54 = 0;
    memset(v53, 0, sizeof(v53));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for BinaryInteger?;
    uint64_t v7 = v53;
LABEL_13:
    outlined destroy of Any?((uint64_t)v7, v6);
    return 0;
  }
  BYTE8(v53[0]) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  return *(id *)&v53[0];
}

uint64_t _getErrorDefaultUserInfo<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v74 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v74 - v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v74 - v10;
  id v12 = (id)dispatch thunk of Error._domain.getter();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v14 == v15) {
    goto LABEL_10;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v17)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    id v75 = 0;
    char v22 = 0;
    goto LABEL_12;
  }
  if (one-time initialization token for _errorDomainUserInfoProviderQueue != -1) {
    swift_once();
  }
  double v18 = _errorDomainUserInfoProviderQueue;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v14;
  uint64_t v20 = swift_allocObject();
  id v75 = partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:);
  *(void *)(v20 + 16) = partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:);
  *(void *)(v20 + 24) = v19;
  uint64_t v82 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  uint64_t v83 = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  char v81 = &block_descriptor_12;
  char v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  char v22 = 1;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v24(v11, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CustomNSError);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    double v25 = v81;
    unsigned int v26 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v27 = (*((uint64_t (**)(void *, uint64_t (*)()))v26 + 4))(v25, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    uint64_t v79 = v27;
    if (v22) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v78 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for CustomNSError?);
    uint64_t v79 = MEMORY[0x1E4FBC868];
    if (v22) {
      goto LABEL_30;
    }
  }
  v24(v8, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    char v28 = v81;
    uint64_t v29 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v30 = (*((uint64_t (**)(void *, uint64_t (*)()))v29 + 2))(v28, v29);
    uint64_t v32 = MEMORY[0x1E4FBB1A0];
    if (v31)
    {
      uint64_t v33 = v30;
      uint64_t v34 = v31;
      id v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedDescription");
      *((void *)&v77 + 1) = v32;
      *(void *)&long long v76 = v33;
      *((void *)&v76 + 1) = v34;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v35, v36);
    }
    uint64_t v37 = v81;
    double v38 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v39 = (*((uint64_t (**)(void *, uint64_t (*)()))v38 + 3))(v37, v38);
    if (v40)
    {
      uint64_t v41 = v39;
      uint64_t v42 = v40;
      id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedFailureReason");
      *((void *)&v77 + 1) = v32;
      *(void *)&long long v76 = v41;
      *((void *)&v76 + 1) = v42;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v43, v44);
    }
    char v45 = v81;
    unint64_t v46 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v47 = (*((uint64_t (**)(void *, uint64_t (*)()))v46 + 4))(v45, v46);
    if (v48)
    {
      uint64_t v49 = v47;
      uint64_t v50 = v48;
      id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoverySuggestion");
      *((void *)&v77 + 1) = v32;
      *(void *)&long long v76 = v49;
      *((void *)&v76 + 1) = v50;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v51, v52);
    }
    uint64_t v53 = v81;
    uint64_t v54 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v55 = (*((uint64_t (**)(void *, uint64_t (*)()))v54 + 5))(v53, v54);
    if (v56)
    {
      uint64_t v57 = v55;
      uint64_t v58 = v56;
      id v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSHelpAnchor");
      *((void *)&v77 + 1) = v32;
      *(void *)&long long v76 = v57;
      *((void *)&v76 + 1) = v58;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v59, v60);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    uint64_t v78 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for LocalizedError?);
  }
  v24(v74, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoveryOptions");
    uint64_t v63 = v62;
    uint64_t v64 = v81;
    unint64_t v65 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v66 = (*((uint64_t (**)(void *, uint64_t (*)()))v65 + 2))(v64, v65);
    *((void *)&v77 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(void *)&long long v76 = v66;
    specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v61, v63);
    id v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSRecoveryAttempter");
    uint64_t v69 = v68;
    uint64_t v70 = type metadata accessor for __NSErrorRecoveryAttempter();
    uint64_t v71 = swift_allocObject();
    *((void *)&v77 + 1) = v70;
    *(void *)&long long v76 = v71;
    specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v67, v69);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    uint64_t v78 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, (uint64_t *)&demangling cache variable for type metadata for RecoverableError?);
  }
LABEL_30:
  uint64_t v72 = _NativeDictionary.bridged()();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v75);
  return v72;
}

uint64_t __DataStorage.__deallocating_deinit()
{
  id v1 = v0;
  id v2 = (void *)v0[2];
  if (v2)
  {
    id v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      uint64_t v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }
    else
    {
      free(v2);
    }
  }
  uint64_t v5 = v1[6];
  v1[6] = 0;
  v1[7] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1[6]);

  return swift_deallocClassInstance();
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1 + 16;
  outlined init with take of LocalePreferences?(a1 + 16, (uint64_t)v35, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v36, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOg((uint64_t)v36) != 1)
  {
    uint64_t v13 = (unint64_t *)v36;
    uint64_t v14 = a5;
LABEL_22:
    outlined init with take of LocalePreferences?((uint64_t)v13, v14, &demangling cache variable for type metadata for Result<stat, CocoaError>);
    return outlined release of Result<stat, CocoaError>?((uint64_t)v35, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Result<stat, CocoaError>?);
  }
  memset(&v30, 0, 28);
  memset(&v30.st_atimespec, 0, 112);
  if (!lstat(a2, &v30))
  {
    stat v32 = v30;
    _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v32);
LABEL_21:
    outlined init with take of LocalePreferences?((uint64_t)&v32, (uint64_t)&v33, &demangling cache variable for type metadata for Result<stat, CocoaError>);
    outlined init with take of LocalePreferences?((uint64_t)&v33, (uint64_t)v31, &demangling cache variable for type metadata for Result<stat, CocoaError>);
    destructiveProjectEnumData for PredicateCodableError(v31, v26);
    outlined init with take of LocalePreferences?(v9, (uint64_t)&v32, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
    outlined init with take of LocalePreferences?((uint64_t)v31, v9, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
    outlined retain of Result<stat, CocoaError>((uint64_t)&v33);
    outlined release of Result<stat, CocoaError>?((uint64_t)&v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Result<stat, CocoaError>?);
    uint64_t v13 = &v33;
    uint64_t v14 = a5;
    goto LABEL_22;
  }
  dev_t v10 = MEMORY[0x185301870]();
  dev_t v11 = v10;
  uint64_t v12 = 4;
  switch(v10)
  {
    case 1:
    case 13:
      uint64_t v12 = 513;
      goto LABEL_14;
    case 2:
      goto LABEL_14;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_10;
    case 17:
      uint64_t v12 = 516;
      goto LABEL_14;
    case 28:
    case 69:
      uint64_t v12 = 640;
      goto LABEL_14;
    case 30:
      uint64_t v12 = 642;
      goto LABEL_14;
    case 63:
      uint64_t v12 = 514;
      goto LABEL_14;
    default:
      if (v10 == 102)
      {
        id v15 = 0;
        uint64_t v16 = 512;
LABEL_20:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v16, a3, a4, v15, 0, 0, 0, 0, &v32, 0, 0);
        _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi0_((uint64_t)&v32);
        goto LABEL_21;
      }
LABEL_10:
      uint64_t v12 = 512;
LABEL_14:
      uint64_t v29 = v12;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v17 = (int)POSIXErrorCode.rawValue.getter();
        id v18 = objc_allocWithZone((Class)NSError);
        uint64_t v19 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v15 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v17, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v20 = objc_msgSend(v15, sel_domain);
        id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v23 = v22;

        if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v23 == v24)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v25 & 1) == 0) {
            __break(1u);
          }
        }
        uint64_t v16 = v29;
        goto LABEL_20;
      }
      unint64_t v33 = 0;
      unint64_t v34 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v33 = 0xD000000000000014;
      unint64_t v34 = 0x80000001823A9780;
      v32.st_dev = v11;
      v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t outlined release of Result<stat, CocoaError>?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 144);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v4);
  return a1;
}

id outlined copy of Result<stat, CocoaError>?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255)
  {
    return outlined copy of Result<stat, CocoaError>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
  }
  return result;
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOg(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 144);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t Error<>._domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t static CustomNSError.errorDomain.getter()
{
  return String.init<A>(reflecting:)();
}

double _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 144) = -1;
  return result;
}

uint64_t specialized static _FileManagerImpl._setCatInfoAttributes(_:path:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a1;
  v105[3] = *MEMORY[0x1E4F143B8];
  uint64_t v95 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v96 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v7 = 0;
  uint64_t v8 = (void *)&unk_1EB1E7000;
  uint64_t v9 = (void *)&unk_1EB1E7000;
  uint64_t v97 = v3;
  while (1)
  {
    do
    {
      if (v6)
      {
        unint64_t v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v11 = v10 | (v7 << 6);
      }
      else
      {
        int64_t v12 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_125;
        }
        if (v12 >= v96) {
          goto LABEL_61;
        }
        unint64_t v13 = *(void *)(v95 + 8 * v12);
        ++v7;
        if (!v13)
        {
          int64_t v7 = v12 + 1;
          if (v12 + 1 >= v96) {
            goto LABEL_61;
          }
          unint64_t v13 = *(void *)(v95 + 8 * v7);
          if (!v13)
          {
            int64_t v7 = v12 + 2;
            if (v12 + 2 >= v96) {
              goto LABEL_61;
            }
            unint64_t v13 = *(void *)(v95 + 8 * v7);
            if (!v13)
            {
              int64_t v7 = v12 + 3;
              if (v12 + 3 >= v96) {
                goto LABEL_61;
              }
              unint64_t v13 = *(void *)(v95 + 8 * v7);
              if (!v13)
              {
                int64_t v7 = v12 + 4;
                if (v12 + 4 >= v96) {
                  goto LABEL_61;
                }
                unint64_t v13 = *(void *)(v95 + 8 * v7);
                if (!v13)
                {
                  int64_t v14 = v12 + 5;
                  if (v14 >= v96) {
                    goto LABEL_61;
                  }
                  unint64_t v13 = *(void *)(v95 + 8 * v14);
                  if (!v13)
                  {
                    while (1)
                    {
                      int64_t v7 = v14 + 1;
                      if (__OFADD__(v14, 1)) {
                        __break(1u);
                      }
                      if (v7 >= v96) {
                        break;
                      }
                      unint64_t v13 = *(void *)(v95 + 8 * v7);
                      ++v14;
                      if (v13) {
                        goto LABEL_24;
                      }
                    }
LABEL_61:
                    swift_release();
                    return swift_bridgeObjectRelease();
                  }
                  int64_t v7 = v14;
                }
              }
            }
          }
        }
LABEL_24:
        unint64_t v6 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v7 << 6);
      }
      id v15 = *(void **)(*(void *)(v3 + 48) + 8 * v11);
      if (v8[56] != -1) {
        swift_once();
      }
      uint64_t v16 = v9[59];
      uint64_t v17 = *(void *)(v16 + 16);
    }
    while (!v17);
    int64_t v98 = v7;
    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v16 + 32));
    uint64_t v20 = v19;
    BOOL v22 = v18 == static String._unconditionallyBridgeFromObjectiveC(_:)(v15) && v20 == v21;
    if (v22
      || (char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(),
          swift_bridgeObjectRetain_n(),
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v23 & 1) != 0))
    {
LABEL_47:
      uint64_t v3 = a2;
      unint64_t v36 = a3;
      goto LABEL_49;
    }
    if (v17 != 1) {
      break;
    }
LABEL_4:
    swift_bridgeObjectRelease_n();
    uint64_t v3 = v97;
    int64_t v7 = v98;
    uint64_t v8 = &unk_1EB1E7000;
    uint64_t v9 = &unk_1EB1E7000;
  }
  id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v16 + 40));
  uint64_t v26 = v25;
  if (v24 != static String._unconditionallyBridgeFromObjectiveC(_:)(v15) || v26 != v27)
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_47;
    }
    if (v17 != 2)
    {
      uint64_t v29 = 6;
      while (1)
      {
        uint64_t v3 = v29 - 3;
        if (__OFADD__(v29 - 4, 1)) {
          break;
        }
        id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v16 + 8 * v29));
        uint64_t v32 = v31;
        if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(v15) && v32 == v33) {
          goto LABEL_48;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v35) {
          goto LABEL_47;
        }
        ++v29;
        if (v3 == v17) {
          goto LABEL_4;
        }
      }
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      swift_once();
      goto LABEL_120;
    }
    goto LABEL_4;
  }
LABEL_48:
  uint64_t v3 = a2;
  unint64_t v36 = a3;
  swift_bridgeObjectRelease_n();
LABEL_49:
  swift_bridgeObjectRelease_n();
  uint64_t v37 = v97;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v38 = specialized Collection.first.getter(v3, v36);
  if (v39)
  {
    if (v38 == 126 && v39 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v40)
    {
LABEL_54:
      unint64_t v41 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v3, v36);
      if (v42)
      {
        uint64_t v44 = HIBYTE(v36) & 0xF;
        if ((v36 & 0x2000000000000000) == 0) {
          uint64_t v44 = v3;
        }
        uint64_t v45 = v44 << 16;
        if ((v36 & 0x1000000000000000) == 0 || (v3 & 0x800000000000000) != 0) {
          unint64_t v43 = v45 | 7;
        }
        else {
          unint64_t v43 = v45 | 0xB;
        }
      }
      else
      {
        unint64_t v43 = v41;
      }
      unint64_t v47 = String.index(after:)();
      if (v43 >> 14 == v47 >> 14)
      {
        uint64_t v48 = 0;
        uint64_t v49 = 0;
      }
      else
      {
        if (v43 >> 14 < v47 >> 14) {
          goto LABEL_127;
        }
        uint64_t v50 = String.subscript.getter();
        uint64_t v48 = MEMORY[0x185301F50](v50);
        uint64_t v49 = v51;
        swift_bridgeObjectRelease();
      }
      unint64_t v52 = static String.homeDirectoryPath(forUser:)(v48, v49);
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v55 = specialized Collection.suffix(from:)(v43, v3, v36);
      uint64_t v57 = v56;
      uint64_t v59 = v58;
      uint64_t v61 = v60;
      swift_bridgeObjectRelease();
      *(void *)&long long v100 = v52;
      *((void *)&v100 + 1) = v54;
      *(void *)&long long v102 = v55;
      *((void *)&v102 + 1) = v57;
      uint64_t v103 = v59;
      uint64_t v104 = v61;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v36 = v54;
      uint64_t v3 = v52;
      uint64_t v37 = v97;
    }
  }
  uint64_t v62 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0) {
    uint64_t v62 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v62)
  {
    swift_bridgeObjectRetain();
    uint64_t v63 = specialized String.withFileSystemRepresentation<A>(_:)(v3, v36, v3, v36);
    if (v64)
    {
      uint64_t v65 = v63;
      unint64_t v66 = v64;
      swift_bridgeObjectRelease();
      uint64_t v3 = v65;
      unint64_t v36 = v66;
    }
  }
  uint64_t v67 = String._standardizingPath.getter(v3, v36);
  unint64_t v69 = v68;
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:isDirectory:)(v67, v69, 0, (uint64_t)v105);
  swift_bridgeObjectRelease();
  uint64_t v99 = MEMORY[0x1E4FBC868];
  if (!*(void *)(v37 + 16))
  {
    long long v100 = 0u;
    long long v101 = 0u;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v100);
    if (*(void *)(v37 + 16)) {
      goto LABEL_82;
    }
LABEL_80:
    long long v100 = 0u;
    long long v101 = 0u;
    goto LABEL_87;
  }
  uint64_t v70 = @"NSFileExtensionHidden";
  uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70);
  if (v72)
  {
    outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v71, (uint64_t)&v100);
  }
  else
  {
    long long v100 = 0u;
    long long v101 = 0u;
  }

  if (!*((void *)&v101 + 1)) {
    goto LABEL_81;
  }
  outlined init with take of Any(&v100, &v102);
  unint64_t v73 = (void *)*MEMORY[0x1E4F1C608];
  outlined init with copy of Any((uint64_t)&v102, (uint64_t)&v100);
  specialized Dictionary.subscript.setter((uint64_t)&v100, v73);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
  if (!*(void *)(v37 + 16)) {
    goto LABEL_80;
  }
LABEL_82:
  uint64_t v74 = @"NSFileCreationDate";
  uint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v74);
  if (v76)
  {
    outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v75, (uint64_t)&v100);
  }
  else
  {
    long long v100 = 0u;
    long long v101 = 0u;
  }

  if (*((void *)&v101 + 1))
  {
    outlined init with take of Any(&v100, &v102);
    long long v77 = (void *)*MEMORY[0x1E4F1C540];
    outlined init with copy of Any((uint64_t)&v102, (uint64_t)&v100);
    specialized Dictionary.subscript.setter((uint64_t)&v100, v77);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
    goto LABEL_88;
  }
LABEL_87:
  outlined destroy of Any?((uint64_t)&v100);
LABEL_88:
  uint64_t v3 = *(void *)(v99 + 16);
  type metadata accessor for NSURLResourceKey(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey();
  swift_bridgeObjectRetain();
  int64_t v78 = 0;
  *(void *)&long long v102 = Set.init(minimumCapacity:)();
  uint64_t v79 = 1 << *(unsigned char *)(v99 + 32);
  uint64_t v80 = -1;
  if (v79 < 64) {
    uint64_t v80 = ~(-1 << v79);
  }
  uint64_t v81 = v99 + 64;
  unint64_t v82 = v80 & *(void *)(v99 + 64);
  int64_t v83 = (unint64_t)(v79 + 63) >> 6;
  while (2)
  {
    if (v82)
    {
      unint64_t v84 = __clz(__rbit64(v82));
      v82 &= v82 - 1;
      unint64_t v85 = v84 | (v78 << 6);
LABEL_92:
      uint64_t v3 = (uint64_t)&v102;
      specialized Set._Variant.insert(_:)(&v100, *(id *)(*(void *)(v99 + 48) + 8 * v85));

      continue;
    }
    break;
  }
  if (__OFADD__(v78++, 1))
  {
    __break(1u);
    goto LABEL_124;
  }
  if (v78 < v83)
  {
    unint64_t v87 = *(void *)(v81 + 8 * v78);
    if (!v87)
    {
      int64_t v88 = v78 + 1;
      if (v78 + 1 >= v83) {
        goto LABEL_115;
      }
      unint64_t v87 = *(void *)(v81 + 8 * v88);
      if (!v87)
      {
        int64_t v88 = v78 + 2;
        if (v78 + 2 >= v83) {
          goto LABEL_115;
        }
        unint64_t v87 = *(void *)(v81 + 8 * v88);
        if (!v87)
        {
          int64_t v88 = v78 + 3;
          if (v78 + 3 >= v83) {
            goto LABEL_115;
          }
          unint64_t v87 = *(void *)(v81 + 8 * v88);
          if (!v87)
          {
            int64_t v88 = v78 + 4;
            if (v78 + 4 >= v83) {
              goto LABEL_115;
            }
            unint64_t v87 = *(void *)(v81 + 8 * v88);
            if (!v87)
            {
              int64_t v88 = v78 + 5;
              if (v78 + 5 >= v83) {
                goto LABEL_115;
              }
              unint64_t v87 = *(void *)(v81 + 8 * v88);
              if (!v87)
              {
                int64_t v88 = v78 + 6;
                if (v78 + 6 >= v83) {
                  goto LABEL_115;
                }
                unint64_t v87 = *(void *)(v81 + 8 * v88);
                if (!v87)
                {
                  while (1)
                  {
                    int64_t v78 = v88 + 1;
                    if (__OFADD__(v88, 1)) {
                      goto LABEL_126;
                    }
                    if (v78 >= v83) {
                      goto LABEL_115;
                    }
                    unint64_t v87 = *(void *)(v81 + 8 * v78);
                    ++v88;
                    if (v87) {
                      goto LABEL_110;
                    }
                  }
                }
              }
            }
          }
        }
      }
      int64_t v78 = v88;
    }
LABEL_110:
    unint64_t v82 = (v87 - 1) & v87;
    unint64_t v85 = __clz(__rbit64(v87)) + (v78 << 6);
    goto LABEL_92;
  }
LABEL_115:
  swift_release();
  uint64_t v3 = v105[0];
  swift_bridgeObjectRetain();
  uint64_t v89 = _NativeDictionary.bridged()();
  *(void *)&long long v102 = 0;
  unsigned int v90 = objc_msgSend((id)v3, sel_setResourceValues_error_, v89, &v102);
  swift_unknownObjectRelease();
  if (v90)
  {
    id v91 = (id)v102;
    goto LABEL_122;
  }
  if ((void)v102)
  {
    (id)v102;
    goto LABEL_121;
  }
  if (one-time initialization token for _nilObjCError != -1) {
    goto LABEL_128;
  }
LABEL_120:
  id v92 = (id)_nilObjCError;
LABEL_121:
  swift_willThrow();
LABEL_122:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

unint64_t NSFileProtectionType.intValue.getter(void *a1)
{
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionComplete");
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v4 == v5)
  {
    uint64_t v9 = 1;
LABEL_12:
    swift_bridgeObjectRelease_n();
    char v8 = 0;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
    char v8 = 0;
    uint64_t v9 = 1;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  unint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    uint64_t v9 = 2;
LABEL_11:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_15;
  }
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUnlessOpen");
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    uint64_t v9 = 2;
    goto LABEL_12;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_15:
    char v8 = 0;
    uint64_t v9 = 2;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  BOOL v22 = (void *)String._bridgeToObjectiveCImpl()();
  id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    uint64_t v9 = 3;
    goto LABEL_11;
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v27) {
    goto LABEL_24;
  }
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUntilFirstUserAuthentication");
  uint64_t v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v30 == v31)
  {
    uint64_t v9 = 3;
    goto LABEL_12;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v32)
  {
LABEL_24:
    char v8 = 0;
    uint64_t v9 = 3;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionNone");
  uint64_t v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v35 == v36)
  {
    uint64_t v9 = 4;
    goto LABEL_12;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v37)
  {
    char v8 = 0;
    uint64_t v9 = 4;
  }
  else
  {
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteWhenUserInactive");
    uint64_t v40 = v39;
    if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v40 == v41) {
      char v42 = 1;
    }
    else {
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42) {
      uint64_t v9 = 7;
    }
    else {
      uint64_t v9 = 0;
    }
    char v8 = v42 ^ 1;
  }
  return v9 | ((unint64_t)(v8 & 1) << 32);
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_(uint64_t result)
{
  *(unsigned char *)(result + 144) = 0;
  return result;
}

void outlined consume of Result<stat, CocoaError>?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255)
  {
    outlined consume of Result<stat, CocoaError>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
  }
}

void type metadata accessor for NSFileProtectionType(uint64_t a1)
{
}

uint64_t CustomNSError.errorUserInfo.getter()
{
  return MEMORY[0x1E4FBC868];
}

{
  return MEMORY[0x1E4FBC868];
}

uint64_t destroy for Date.FormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t static NumberFormatStyleConfiguration.Precision.integerAndFractionLength<A, B>(integerLimits:fractionLimits:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a1);
  uint64_t v7 = v6;
  uint64_t v9 = v8 & 1;
  uint64_t v11 = v10 & 1;
  uint64_t result = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a2);
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = result;
  *(void *)(a3 + 40) = v13 & 1;
  *(void *)(a3 + 48) = v15;
  *(unsigned char *)(a3 + 56) = v14 & 1 | 0x80;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.fractionLength<A>(_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a1);
  double result = 0.0;
  *(_OWORD *)a2 = xmmword_182106C90;
  *(_OWORD *)(a2 + 16) = xmmword_182106C90;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v5 & 1;
  *(void *)(a2 + 48) = v7;
  *(unsigned char *)(a2 + 56) = v6 & 1 | 0x80;
  return result;
}

uint64_t RangeExpression.clampedLowerAndUpperBounds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, double))(v6 + 16))(v9, v10, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  if (swift_dynamicCast())
  {
    char v11 = 0;
    if (v19 >= a2) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = v19;
    }
    if (v19 >= a1) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = a1;
    }
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Int>);
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
    if (!swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
        if (!swift_dynamicCast())
        {
          (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, a3);
          uint64_t result = 0;
          char v17 = 1;
          char v16 = 1;
          goto LABEL_31;
        }
      }
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, a3);
      uint64_t result = 0;
      char v16 = 1;
      goto LABEL_30;
    }
    if (v19 <= a1) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = v19;
    }
    char v11 = 1;
LABEL_22:
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, a3);
    char v16 = 0;
    if (v13 >= a2) {
      uint64_t result = a2;
    }
    else {
      uint64_t result = v13;
    }
    if (v11)
    {
      char v17 = 1;
LABEL_31:
      LOBYTE(v19) = v16;
      v18[8] = v17;
      return result;
    }
LABEL_30:
    char v17 = 0;
    goto LABEL_31;
  }
  if (a1 == a2)
  {
    __break(1u);
  }
  else if (!__OFSUB__(a2, 1))
  {
    char v11 = 0;
    if (a2 - 1 >= v19) {
      uint64_t v15 = v19;
    }
    else {
      uint64_t v15 = a2 - 1;
    }
    if (v19 >= a1) {
      uint64_t v13 = v15;
    }
    else {
      uint64_t v13 = a1;
    }
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t @objc static NSLocale._newLocaleWithIdentifier(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 31);
  partial apply for closure #1 in LocaleCache.fixedNSLocale(identifier:)(&v6);
  os_unfair_lock_unlock(v4 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v6;
}

uint64_t partial apply for closure #1 in LocaleCache.fixedNSLocale(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in LocaleCache.fixedNSLocale(identifier:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in LocaleCache.fixedNSLocale(identifier:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = LocaleCache.State.fixedNSLocale(identifier:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t LocaleCache.State.fixedNSLocale(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v2 + 72);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v9)
    {
      id v10 = *(id *)(*(void *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v10;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void *)(v4 + 32);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v14)
    {
      long long v93 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for _LocaleICU();
  uint64_t v15 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
  _s10Foundation17LocalePreferencesVSgWOi0_(v97);
  outlined init with take of LocalePreferences?((uint64_t)v97, (uint64_t)v96);
  swift_allocObject();
  swift_bridgeObjectRetain();
  char v16 = specialized _LocaleICU.init(identifier:prefs:)(a1, a2, (uint64_t)v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v96[0] = *(void *)(v4 + 32);
  uint64_t v18 = v96[0];
  *(void *)(v4 + 32) = 0x8000000000000000;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v21 = *(void *)(v18 + 16);
  BOOL v22 = (v20 & 1) == 0;
  BOOL v23 = __OFADD__(v21, v22);
  uint64_t v24 = v21 + v22;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v3) = v20;
    if (*(void *)(v18 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v96[0];
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v3 & 1) != (v26 & 1)) {
        goto LABEL_106;
      }
LABEL_15:
      if ((v3 & 1) == 0) {
        goto LABEL_53;
      }
      goto LABEL_16;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v25 = v18;
      goto LABEL_15;
    }
  }
  unint64_t v87 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v28;
  if (!*(void *)(v18 + 16)) {
    goto LABEL_52;
  }
  uint64_t v29 = (char *)(v28 + 64);
  __src = (char *)(v18 + 64);
  unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v18 || v29 >= &__src[8 * v30]) {
    memmove(v29, __src, 8 * v30);
  }
  int64_t v31 = 0;
  *(void *)(v25 + 16) = *(void *)(v18 + 16);
  uint64_t v32 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v18 + 64);
  int64_t v89 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_26;
    }
    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_103;
    }
    if (v43 >= v89) {
      goto LABEL_52;
    }
    unint64_t v44 = *(void *)&__src[8 * v43];
    ++v31;
    if (!v44)
    {
      int64_t v31 = v43 + 1;
      if (v43 + 1 >= v89) {
        goto LABEL_52;
      }
      unint64_t v44 = *(void *)&__src[8 * v31];
      if (!v44)
      {
        int64_t v31 = v43 + 2;
        if (v43 + 2 >= v89) {
          goto LABEL_52;
        }
        unint64_t v44 = *(void *)&__src[8 * v31];
        if (!v44)
        {
          int64_t v31 = v43 + 3;
          if (v43 + 3 >= v89) {
            goto LABEL_52;
          }
          unint64_t v44 = *(void *)&__src[8 * v31];
          if (!v44)
          {
            int64_t v31 = v43 + 4;
            if (v43 + 4 >= v89) {
              goto LABEL_52;
            }
            unint64_t v44 = *(void *)&__src[8 * v31];
            if (!v44)
            {
              int64_t v31 = v43 + 5;
              if (v43 + 5 >= v89) {
                goto LABEL_52;
              }
              unint64_t v44 = *(void *)&__src[8 * v31];
              if (!v44)
              {
                int64_t v31 = v43 + 6;
                if (v43 + 6 >= v89) {
                  goto LABEL_52;
                }
                unint64_t v44 = *(void *)&__src[8 * v31];
                if (!v44)
                {
                  int64_t v31 = v43 + 7;
                  if (v43 + 7 >= v89) {
                    goto LABEL_52;
                  }
                  unint64_t v44 = *(void *)&__src[8 * v31];
                  if (!v44) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_51:
    unint64_t v34 = (v44 - 1) & v44;
    unint64_t v36 = __clz(__rbit64(v44)) + (v31 << 6);
LABEL_26:
    uint64_t v37 = 16 * v36;
    id v38 = (uint64_t *)(*(void *)(v18 + 48) + v37);
    uint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    long long v41 = *(_OWORD *)(*(void *)(v18 + 56) + v37);
    char v42 = (void *)(*(void *)(v25 + 48) + v37);
    *char v42 = v40;
    v42[1] = v39;
    *(_OWORD *)(*(void *)(v25 + 56) + v37) = v41;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  int64_t v45 = v43 + 8;
  if (v45 >= v89) {
    goto LABEL_52;
  }
  unint64_t v44 = *(void *)&__src[8 * v45];
  if (v44)
  {
    int64_t v31 = v45;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v31 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      goto LABEL_105;
    }
    if (v31 >= v89) {
      break;
    }
    unint64_t v44 = *(void *)&__src[8 * v31];
    ++v45;
    if (v44) {
      goto LABEL_51;
    }
  }
LABEL_52:
  swift_bridgeObjectRelease();
  unint64_t v19 = v87;
  if (v3)
  {
LABEL_16:
    char v27 = (void *)(*(void *)(v25 + 56) + 16 * v19);
    swift_unknownObjectRelease();
    *char v27 = v16;
    v27[1] = v15;
    goto LABEL_55;
  }
LABEL_53:
  *(void *)(v25 + 8 * (v19 >> 6) + 64) |= 1 << v19;
  unint64_t v46 = (uint64_t *)(*(void *)(v25 + 48) + 16 * v19);
  *unint64_t v46 = a1;
  v46[1] = a2;
  unint64_t v47 = (void *)(*(void *)(v25 + 56) + 16 * v19);
  *unint64_t v47 = v16;
  v47[1] = v15;
  uint64_t v48 = *(void *)(v25 + 16);
  BOOL v23 = __OFADD__(v48, 1);
  uint64_t v49 = v48 + 1;
  if (v23)
  {
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  *(void *)(v25 + 16) = v49;
  swift_bridgeObjectRetain();
LABEL_55:
  uint64_t v3 = *(void *)(v4 + 32);
  *(void *)(v4 + 32) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v50 = v16;
  *((void *)&v50 + 1) = v15;
  long long v93 = v50;
LABEL_56:
  uint64_t v51 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  unint64_t v52 = objc_allocWithZone(v51);
  uint64_t v53 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  *(_OWORD *)&v52[OBJC_IVAR____NSSwiftLocale_locale] = v93;
  v52[v53] = 2;
  uint64_t v54 = String._bridgeToObjectiveCImpl()();
  v95.receiver = v52;
  v95.super_class = v51;
  swift_unknownObjectRetain();
  id v55 = objc_msgSendSuper2(&v95, sel_initWithLocaleIdentifier_, v54);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  id v56 = v55;
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v97[0] = *(void *)(v4 + 72);
  uint64_t v58 = *(void *)&v97[0];
  *(void *)(v4 + 72) = 0x8000000000000000;
  unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v61 = *(void *)(v58 + 16);
  BOOL v62 = (v59 & 1) == 0;
  uint64_t v63 = v61 + v62;
  if (__OFADD__(v61, v62))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v3) = v59;
    if (*(void *)(v58 + 24) < v63)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, v57);
      uint64_t v64 = *(void *)&v97[0];
      unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v3 & 1) != (v66 & 1)) {
        goto LABEL_106;
      }
      unint64_t v60 = v65;
      if ((v3 & 1) == 0)
      {
LABEL_98:
        specialized _NativeDictionary._insert(at:key:value:)(v60, a1, a2, v56, v64);
        swift_bridgeObjectRetain();
        goto LABEL_99;
      }
LABEL_63:
      uint64_t v67 = *(void *)(v64 + 56);

      *(void *)(v67 + 8 * v60) = v56;
LABEL_99:
      *(void *)(v4 + 72) = v64;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v56;
    }
    if (v57)
    {
      uint64_t v64 = v58;
      if ((v59 & 1) == 0) {
        goto LABEL_98;
      }
      goto LABEL_63;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftLocale>);
  uint64_t v68 = static _DictionaryStorage.copy(original:)();
  uint64_t v64 = v68;
  if (!*(void *)(v58 + 16))
  {
LABEL_97:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_98;
    }
    goto LABEL_63;
  }
  unint64_t v69 = (void *)(v68 + 64);
  unint64_t v70 = (unint64_t)((1 << *(unsigned char *)(v64 + 32)) + 63) >> 6;
  if (v64 != v58 || (unint64_t)v69 >= v58 + 64 + 8 * v70) {
    memmove(v69, (const void *)(v58 + 64), 8 * v70);
  }
  int64_t v71 = 0;
  *(void *)(v64 + 16) = *(void *)(v58 + 16);
  uint64_t v72 = 1 << *(unsigned char *)(v58 + 32);
  uint64_t v73 = -1;
  if (v72 < 64) {
    uint64_t v73 = ~(-1 << v72);
  }
  unint64_t v74 = v73 & *(void *)(v58 + 64);
  uint64_t v88 = v58 + 64;
  int64_t v90 = (unint64_t)(v72 + 63) >> 6;
  while (2)
  {
    if (v74)
    {
      __srca = (void *)((v74 - 1) & v74);
      int64_t v94 = v71;
      unint64_t v75 = __clz(__rbit64(v74)) | (v71 << 6);
LABEL_73:
      uint64_t v76 = 16 * v75;
      long long v77 = (void *)(*(void *)(v58 + 48) + 16 * v75);
      uint64_t v78 = v77[1];
      uint64_t v79 = 8 * v75;
      uint64_t v80 = *(void **)(*(void *)(v58 + 56) + v79);
      uint64_t v81 = (void *)(*(void *)(v64 + 48) + v76);
      *uint64_t v81 = *v77;
      v81[1] = v78;
      *(void *)(*(void *)(v64 + 56) + v79) = v80;
      swift_bridgeObjectRetain();
      id v82 = v80;
      unint64_t v74 = (unint64_t)__srca;
      int64_t v71 = v94;
      continue;
    }
    break;
  }
  int64_t v83 = v71 + 1;
  if (__OFADD__(v71, 1)) {
    goto LABEL_102;
  }
  if (v83 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v83);
  int64_t v85 = v71 + 1;
  if (v84) {
    goto LABEL_96;
  }
  int64_t v85 = v71 + 2;
  if (v71 + 2 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  int64_t v85 = v71 + 3;
  if (v71 + 3 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  int64_t v85 = v71 + 4;
  if (v71 + 4 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  int64_t v85 = v71 + 5;
  if (v71 + 5 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  int64_t v85 = v71 + 6;
  if (v71 + 6 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  int64_t v85 = v71 + 7;
  if (v71 + 7 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v85);
  if (v84)
  {
LABEL_96:
    __srca = (void *)((v84 - 1) & v84);
    int64_t v94 = v85;
    unint64_t v75 = __clz(__rbit64(v84)) + (v85 << 6);
    goto LABEL_73;
  }
  uint64_t v86 = v71 + 8;
  if (v71 + 8 >= v90) {
    goto LABEL_97;
  }
  unint64_t v84 = *(void *)(v88 + 8 * v86);
  if (v84)
  {
    int64_t v85 = v71 + 8;
    goto LABEL_96;
  }
  while (1)
  {
    int64_t v85 = v86 + 1;
    if (__OFADD__(v86, 1)) {
      break;
    }
    if (v85 >= v90) {
      goto LABEL_97;
    }
    unint64_t v84 = *(void *)(v88 + 8 * v85);
    ++v86;
    if (v84) {
      goto LABEL_96;
    }
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static Locale.autoupdatingCurrent.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v6);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v6;
  uint64_t result = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *a1 = v4;
  a1[1] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in LocaleCache.autoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    type metadata accessor for _LocaleAutoupdating();
    uint64_t v5 = swift_allocObject();
    *(void *)(a1 + 88) = v5;
    swift_retain();
  }
  *a2 = v5;
  return swift_retain();
}

NSLocale_optional __swiftcall _NSSwiftLocale._localeWithNewCalendarIdentifier(_:)(Swift::String_optional a1)
{
  if (a1.value._object)
  {
    uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
    static Calendar._fromNSCalendarIdentifier(_:)(v2, &v19);
    swift_unknownObjectRelease();
    char v4 = v19;
    if (v19 == 16)
    {
      uint64_t v1 = 0;
    }
    else
    {
      uint64_t v6 = *(void *)&v1[OBJC_IVAR____NSSwiftLocale_locale + 8];
      uint64_t ObjectType = swift_getObjectType();
      char v19 = v4;
      unint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 40);
      swift_unknownObjectRetain();
      uint64_t v9 = v8(&v19, ObjectType, v6);
      uint64_t v11 = v10;
      swift_unknownObjectRelease();
      uint64_t v12 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      unint64_t v13 = objc_allocWithZone(v12);
      uint64_t v14 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      uint64_t v15 = (uint64_t *)&v13[OBJC_IVAR____NSSwiftLocale_locale];
      uint64_t *v15 = v9;
      v15[1] = v11;
      v13[v14] = 2;
      uint64_t v16 = String._bridgeToObjectiveCImpl()();
      v18.receiver = v13;
      v18.super_class = v12;
      swift_unknownObjectRetain();
      uint64_t v1 = (char *)objc_msgSendSuper2(&v18, sel_initWithLocaleIdentifier_, v16);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v5 = v1;
  }
  char v17 = (objc_class *)v1;
  result.value.super.isa = v17;
  result.is_nil = v3;
  return result;
}

uint64_t type metadata accessor for _NSSwiftLocale()
{
  return self;
}

uint64_t static Calendar._fromNSCalendarIdentifier(_:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C318]);
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v6 == v7)
  {
    char v11 = 0;
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  char v11 = 0;
  if (v9) {
    goto LABEL_14;
  }
  id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C2E8]);
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v14 == v15)
  {
    char v11 = 1;
    goto LABEL_13;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v17)
  {
    char v11 = 1;
    goto LABEL_14;
  }
  id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C2F0]);
  uint64_t v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v20 == v21)
  {
    char v11 = 2;
    goto LABEL_13;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v22)
  {
    char v11 = 2;
    goto LABEL_14;
  }
  id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C2F8]);
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    char v11 = 3;
    goto LABEL_13;
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v27)
  {
    char v11 = 3;
    goto LABEL_14;
  }
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C308]);
  uint64_t v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v30 == v31)
  {
    char v11 = 4;
    goto LABEL_13;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v32)
  {
    char v11 = 4;
    goto LABEL_14;
  }
  id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C300]);
  uint64_t v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v35 == v36)
  {
    char v11 = 5;
    goto LABEL_13;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v37)
  {
    char v11 = 5;
    goto LABEL_14;
  }
  id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C320]);
  uint64_t v40 = v39;
  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v40 == v41)
  {
    char v11 = 6;
    goto LABEL_13;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v42)
  {
    char v11 = 6;
    goto LABEL_14;
  }
  id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C328]);
  uint64_t v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v45 == v46)
  {
    char v11 = 7;
    goto LABEL_13;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v47)
  {
    char v11 = 7;
    goto LABEL_14;
  }
  id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C330]);
  uint64_t v50 = v49;
  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v50 == v51)
  {
    char v11 = 8;
    goto LABEL_13;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v52)
  {
    char v11 = 8;
    goto LABEL_14;
  }
  id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C338]);
  uint64_t v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v55 == v56)
  {
    char v11 = 9;
    goto LABEL_13;
  }
  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v57)
  {
    char v11 = 9;
    goto LABEL_14;
  }
  id v58 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C340]);
  uint64_t v60 = v59;
  if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v60 == v61)
  {
    char v11 = 10;
    goto LABEL_13;
  }
  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v62)
  {
    char v11 = 10;
    goto LABEL_14;
  }
  id v63 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C358]);
  uint64_t v65 = v64;
  if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v65 == v66)
  {
    char v11 = 11;
    goto LABEL_13;
  }
  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v67)
  {
    char v11 = 11;
    goto LABEL_14;
  }
  id v68 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C360]);
  uint64_t v70 = v69;
  if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v70 == v71)
  {
    char v11 = 12;
    goto LABEL_13;
  }
  char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v72)
  {
    char v11 = 12;
    goto LABEL_14;
  }
  id v73 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C368]);
  uint64_t v75 = v74;
  if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v75 == v76)
  {
    char v11 = 13;
    goto LABEL_13;
  }
  char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v77)
  {
    char v11 = 13;
    goto LABEL_14;
  }
  id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C348]);
  uint64_t v80 = v79;
  if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v80 == v81)
  {
    char v11 = 14;
    goto LABEL_13;
  }
  char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v82)
  {
    char v11 = 14;
    goto LABEL_14;
  }
  id v83 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C350]);
  uint64_t v85 = v84;
  if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v85 == v86)
  {
    char v11 = 15;
    goto LABEL_13;
  }
  char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v87) {
    char v11 = 15;
  }
  else {
    char v11 = 16;
  }
LABEL_14:
  *a2 = v11;
  return result;
}

void *_LocaleICU.copy(newCalendarIdentifier:)(char *a1)
{
  uint64_t v2 = v1;
  char v3 = *a1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v4, v5, v13);
  __src[0] = *(_OWORD *)v13;
  __src[1] = *(_OWORD *)&v13[2];
  __src[2] = *(_OWORD *)&v13[4];
  __src[3] = *(_OWORD *)&v13[6];
  __src[4] = *(_OWORD *)&v13[8];
  __src[5] = *(_OWORD *)&v13[10];
  LOBYTE(__src[6]) = v3;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v13[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v13[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v13[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v13[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v13[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v13[23];
  WORD4(__src[12]) = v14;
  __src[13] = v15;
  __src[14] = v16;
  __src[15] = v17;
  __src[16] = v18;
  __src[17] = v19;
  _OWORD __src[18] = v20;
  __src[19] = v21;
  __src[20] = v22;
  __src[21] = v23;
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v6 = Locale.Components.icuIdentifier.getter();
  uint64_t v8 = v7;
  outlined init with take of LocalePreferences?(v2 + 32, (uint64_t)__dst);
  outlined init with take of LocalePreferences?((uint64_t)__dst, (uint64_t)v11);
  swift_allocObject();
  outlined retain of LocalePreferences?((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  char v9 = specialized _LocaleICU.init(identifier:prefs:)(v6, v8, (uint64_t)v11);
  swift_bridgeObjectRelease();
  outlined release of Locale.Components((uint64_t *)__src);
  lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU);
  return v9;
}

void *specialized _LocaleICU.init(identifier:prefs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of LocalePreferences?(a3, (uint64_t)v13);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  CFStringRef v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v4, v5);
  swift_unknownObjectRelease();
  if (CanonicalLocaleIdentifierFromString)
  {
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
    unint64_t v9 = v8;
  }
  else
  {
    id v7 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  v3[2] = v7;
  v3[3] = v9;
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)(v3 + 4));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 560) = 0;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(unsigned char *)(v10 + 112) = 16;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(void *)(v10 + 152) = 0;
  *(void *)(v10 + 160) = 1;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(void *)(v10 + 216) = 0;
  *(unsigned char *)(v10 + 224) = 7;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 248) = 0u;
  *(unsigned char *)(v10 + 280) = 0;
  *(unsigned char *)(v10 + 281) = 1;
  *(void *)(v10 + 288) = 0;
  *(unsigned char *)(v10 + 296) = 1;
  *(unsigned char *)(v10 + 297) = 4;
  *(_OWORD *)(v10 + 304) = 0u;
  *(_OWORD *)(v10 + 320) = 0u;
  *(unsigned char *)(v10 + 336) = 2;
  *(void *)(v10 + 344) = 0;
  *(void *)(v10 + 352) = 1;
  *(void *)(v10 + 360) = 0;
  *(void *)(v10 + 368) = 0;
  *(void *)(v10 + 376) = 0;
  *(void *)(v10 + 384) = 1;
  *(void *)(v10 + 392) = 0;
  *(void *)(v10 + 400) = 0;
  *(void *)(v10 + 408) = 1;
  *(void *)(v10 + 416) = 0;
  *(void *)(v10 + 424) = 0;
  *(void *)(v10 + 432) = 1;
  uint64_t v11 = MEMORY[0x1E4FBC868];
  *(void *)(v10 + 472) = MEMORY[0x1E4FBC868];
  *(void *)(v10 + 480) = v11;
  *(void *)(v10 + 488) = v11;
  *(void *)(v10 + 496) = v11;
  *(void *)(v10 + 504) = v11;
  *(void *)(v10 + 512) = v11;
  *(void *)(v10 + 520) = v11;
  *(void *)(v10 + 528) = v11;
  *(void *)(v10 + 536) = v11;
  *(void *)(v10 + 544) = v11;
  *(void *)(v10 + 552) = v11;
  v3[22] = v10;
  *(_OWORD *)(v10 + 16) = xmmword_182106C90;
  *(_OWORD *)(v10 + 264) = 0u;
  *(_OWORD *)(v10 + 440) = 0u;
  *(_OWORD *)(v10 + 456) = 0u;
  return v3;
}

uint64_t lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _LocaleICU();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Locale.Components.icuIdentifier.getter()
{
  long long v261 = *(_OWORD *)(v0 + 16);
  Swift::String v262 = *(Swift::String *)v0;
  long long v259 = *(_OWORD *)(v0 + 48);
  long long v260 = *(_OWORD *)(v0 + 32);
  unint64_t v1 = *(void *)(v0 + 64);
  uint64_t v257 = *(void *)(v0 + 80);
  unint64_t v258 = *(void *)(v0 + 72);
  uint64_t v266 = *(void *)(v0 + 88);
  int v2 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v250 = *(void *)(v0 + 152);
  uint64_t v251 = *(void *)(v0 + 120);
  uint64_t v252 = *(void *)(v0 + 160);
  uint64_t v265 = *(void *)(v0 + 176);
  uint64_t v249 = *(void *)(v0 + 184);
  uint64_t v269 = *(void *)(v0 + 192);
  uint64_t v264 = *(unsigned __int8 *)(v0 + 200);
  uint64_t v263 = *(unsigned __int8 *)(v0 + 201);
  uint64_t v253 = *(void *)(v0 + 216);
  uint64_t v243 = *(void *)(v0 + 232);
  uint64_t v244 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v242 = *(void *)(v0 + 240);
  uint64_t v267 = *(void *)(v0 + 264);
  uint64_t v268 = *(void *)(v0 + 256);
  uint64_t v254 = *(void *)(v0 + 280);
  uint64_t v245 = *(void *)(v0 + 296);
  uint64_t v246 = *(void *)(v0 + 288);
  Swift::String v7 = *(Swift::String *)(v0 + 304);
  uint64_t v256 = *(void *)(v0 + 328);
  uint64_t v247 = *(void *)(v0 + 344);
  uint64_t v248 = *(void *)(v0 + 336);
  unint64_t countAndFlagsBits = MEMORY[0x1E4FBC868];
  unint64_t v279 = MEMORY[0x1E4FBC868];
  Swift::String v255 = v7;
  if (v2 == 16) {
    goto LABEL_11;
  }
  uint64_t v232 = v6;
  unint64_t v238 = v1;
  unint64_t v1 = Calendar.Identifier.cldrIdentifier.getter();
  uint64_t v10 = v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v271._unint64_t countAndFlagsBits = countAndFlagsBits;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(0x7261646E656C6163, 0xE800000000000000);
  uint64_t v14 = *(void *)(countAndFlagsBits + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15)) {
    goto LABEL_115;
  }
  char v17 = v12;
  if (*(void *)(countAndFlagsBits + 24) < v16)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
    unint64_t countAndFlagsBits = v271._countAndFlagsBits;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(0x7261646E656C6163, 0xE800000000000000);
    if ((v17 & 1) != (v19 & 1)) {
      goto LABEL_333;
    }
    unint64_t v13 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((v12 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  uint64_t v202 = static _DictionaryStorage.copy(original:)();
  uint64_t v203 = MEMORY[0x1E4FBC868];
  unint64_t countAndFlagsBits = v202;
  uint64_t v204 = *(void *)(MEMORY[0x1E4FBC868] + 16);
  if (!v204) {
    goto LABEL_319;
  }
  unint64_t v205 = (void *)(v202 + 64);
  unint64_t v206 = (unint64_t)((1 << *(unsigned char *)(countAndFlagsBits + 32)) + 63) >> 6;
  if (countAndFlagsBits != MEMORY[0x1E4FBC868] || (unint64_t)v205 >= MEMORY[0x1E4FBC868] + 8 * v206 + 64)
  {
    memmove(v205, (const void *)(MEMORY[0x1E4FBC868] + 64), 8 * v206);
    uint64_t v203 = MEMORY[0x1E4FBC868];
  }
  int64_t v207 = 0;
  *(void *)(countAndFlagsBits + 16) = v204;
  uint64_t v208 = 1 << *(unsigned char *)(v203 + 32);
  uint64_t v209 = *(void *)(v203 + 64);
  uint64_t v210 = -1;
  if (v208 < 64) {
    uint64_t v210 = ~(-1 << v208);
  }
  unint64_t v211 = v210 & v209;
  int64_t v229 = (unint64_t)(v208 + 63) >> 6;
  while (1)
  {
    if (v211)
    {
      unint64_t v212 = __clz(__rbit64(v211));
      v211 &= v211 - 1;
      int64_t v231 = v207;
      unint64_t v213 = v212 | (v207 << 6);
      uint64_t v214 = MEMORY[0x1E4FBC868];
      goto LABEL_294;
    }
    BOOL v225 = __OFADD__(v207, 1);
    int64_t v226 = v207 + 1;
    uint64_t v214 = MEMORY[0x1E4FBC868];
    if (v225) {
      goto LABEL_326;
    }
    if (v226 >= v229) {
      goto LABEL_319;
    }
    unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v226 + 64);
    if (!v227) {
      break;
    }
LABEL_314:
    unint64_t v211 = (v227 - 1) & v227;
    int64_t v231 = v226;
    unint64_t v213 = __clz(__rbit64(v227)) + (v226 << 6);
LABEL_294:
    uint64_t v215 = 16 * v213;
    uint64_t v216 = *(void *)(v214 + 56);
    unint64_t v217 = (uint64_t *)(*(void *)(v214 + 48) + v215);
    uint64_t v219 = *v217;
    uint64_t v218 = v217[1];
    uint64_t v220 = v216 + v215;
    uint64_t v221 = *(void *)(v216 + v215);
    uint64_t v222 = *(void *)(v220 + 8);
    v223 = (void *)(*(void *)(countAndFlagsBits + 48) + v215);
    void *v223 = v219;
    v223[1] = v218;
    v224 = (void *)(*(void *)(countAndFlagsBits + 56) + v215);
    void *v224 = v221;
    v224[1] = v222;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v207 = v231;
  }
  int64_t v228 = v226 + 1;
  if (v226 + 1 >= v229) {
    goto LABEL_319;
  }
  unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v228 + 64);
  if (v227) {
    goto LABEL_313;
  }
  int64_t v228 = v226 + 2;
  if (v226 + 2 >= v229) {
    goto LABEL_319;
  }
  unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v228 + 64);
  if (v227) {
    goto LABEL_313;
  }
  int64_t v228 = v226 + 3;
  if (v226 + 3 >= v229) {
    goto LABEL_319;
  }
  unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v228 + 64);
  if (v227) {
    goto LABEL_313;
  }
  int64_t v228 = v226 + 4;
  if (v226 + 4 >= v229) {
    goto LABEL_319;
  }
  unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v228 + 64);
  if (v227) {
    goto LABEL_313;
  }
  int64_t v228 = v226 + 5;
  if (v226 + 5 >= v229) {
    goto LABEL_319;
  }
  unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v228 + 64);
  if (v227) {
    goto LABEL_313;
  }
  int64_t v228 = v226 + 6;
  if (v226 + 6 >= v229) {
    goto LABEL_319;
  }
  unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v228 + 64);
  if (v227) {
    goto LABEL_313;
  }
  int64_t v228 = v226 + 7;
  if (v226 + 7 >= v229) {
    goto LABEL_319;
  }
  unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v228 + 64);
  if (v227)
  {
LABEL_313:
    int64_t v226 = v228;
    goto LABEL_314;
  }
  while (1)
  {
    int64_t v226 = v228 + 1;
    if (__OFADD__(v228, 1)) {
      goto LABEL_332;
    }
    uint64_t v214 = MEMORY[0x1E4FBC868];
    if (v226 >= v229) {
      break;
    }
    unint64_t v227 = *(void *)(MEMORY[0x1E4FBC868] + 8 * v226 + 64);
    ++v228;
    if (v227) {
      goto LABEL_314;
    }
  }
LABEL_319:
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
LABEL_6:
    specialized _NativeDictionary._insert(at:key:value:)(v13, 0x7261646E656C6163, 0xE800000000000000, v1, v10, (void *)countAndFlagsBits);
    goto LABEL_10;
  }
LABEL_9:
  long long v20 = (unint64_t *)(*(void *)(countAndFlagsBits + 56) + 16 * v13);
  *long long v20 = v1;
  v20[1] = v10;
  swift_bridgeObjectRelease();
LABEL_10:
  unint64_t v279 = countAndFlagsBits;
  swift_bridgeObjectRelease();
  uint64_t v6 = v232;
  unint64_t v1 = v238;
LABEL_11:
  if (!v3)
  {
    uint64_t v10 = countAndFlagsBits;
    uint64_t v29 = v266;
    if (v5) {
      goto LABEL_24;
    }
LABEL_18:
    uint64_t v4 = v10;
    uint64_t v10 = v265;
    if (v265) {
      goto LABEL_33;
    }
    goto LABEL_19;
  }
  uint64_t v21 = v6;
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_isUniquelyReferenced_nonNull_native();
  v271._unint64_t countAndFlagsBits = countAndFlagsBits;
  unint64_t v279 = 0x8000000000000000;
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6974616C6C6F63, 0xE90000000000006ELL);
  uint64_t v23 = *(void *)(countAndFlagsBits + 16);
  BOOL v24 = (v22 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24)) {
    goto LABEL_112;
  }
  char v26 = v22;
  if (*(void *)(countAndFlagsBits + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v10);
    uint64_t v10 = v271._countAndFlagsBits;
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6974616C6C6F63, 0xE90000000000006ELL);
    if ((v26 & 1) != (v28 & 1)) {
      goto LABEL_333;
    }
    uint64_t v6 = v27;
    uint64_t v29 = v266;
    if ((v26 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  if (v10)
  {
    uint64_t v10 = countAndFlagsBits;
    uint64_t v29 = v266;
    if ((v22 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  unint64_t v241 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  uint64_t v133 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v133;
  if (!*(void *)(countAndFlagsBits + 16)) {
    goto LABEL_280;
  }
  uint64_t v134 = (void *)(v133 + 64);
  unint64_t v135 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != countAndFlagsBits || (unint64_t)v134 >= countAndFlagsBits + 64 + 8 * v135) {
    memmove(v134, (const void *)(countAndFlagsBits + 64), 8 * v135);
  }
  unint64_t v230 = countAndFlagsBits + 64;
  int64_t v136 = 0;
  *(void *)(v10 + 16) = *(void *)(countAndFlagsBits + 16);
  uint64_t v137 = 1 << *(unsigned char *)(countAndFlagsBits + 32);
  uint64_t v138 = -1;
  if (v137 < 64) {
    uint64_t v138 = ~(-1 << v137);
  }
  unint64_t v139 = v138 & *(void *)(countAndFlagsBits + 64);
  int64_t v235 = (unint64_t)(v137 + 63) >> 6;
  while (2)
  {
    if (v139)
    {
      unint64_t v140 = __clz(__rbit64(v139));
      v139 &= v139 - 1;
      unint64_t v141 = v140 | (v136 << 6);
LABEL_192:
      uint64_t v142 = 16 * v141;
      uint64_t v143 = (uint64_t *)(*(void *)(countAndFlagsBits + 48) + v142);
      uint64_t v145 = *v143;
      uint64_t v144 = v143[1];
      id v146 = (uint64_t *)(*(void *)(countAndFlagsBits + 56) + v142);
      uint64_t v147 = *v146;
      uint64_t v148 = v146[1];
      id v149 = (void *)(*(void *)(v10 + 48) + v142);
      *id v149 = v145;
      v149[1] = v144;
      id v150 = (void *)(*(void *)(v10 + 56) + v142);
      *id v150 = v147;
      v150[1] = v148;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v151 = v136 + 1;
  if (__OFADD__(v136, 1)) {
    goto LABEL_323;
  }
  if (v151 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v151);
  ++v136;
  if (v152) {
    goto LABEL_215;
  }
  int64_t v136 = v151 + 1;
  if (v151 + 1 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v136);
  if (v152) {
    goto LABEL_215;
  }
  int64_t v136 = v151 + 2;
  if (v151 + 2 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v136);
  if (v152) {
    goto LABEL_215;
  }
  int64_t v136 = v151 + 3;
  if (v151 + 3 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v136);
  if (v152) {
    goto LABEL_215;
  }
  int64_t v136 = v151 + 4;
  if (v151 + 4 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v136);
  if (v152) {
    goto LABEL_215;
  }
  int64_t v136 = v151 + 5;
  if (v151 + 5 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v136);
  if (v152) {
    goto LABEL_215;
  }
  int64_t v136 = v151 + 6;
  if (v151 + 6 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v136);
  if (v152)
  {
LABEL_215:
    unint64_t v139 = (v152 - 1) & v152;
    unint64_t v141 = __clz(__rbit64(v152)) + (v136 << 6);
    goto LABEL_192;
  }
  int64_t v153 = v151 + 7;
  if (v153 >= v235) {
    goto LABEL_280;
  }
  unint64_t v152 = *(void *)(v230 + 8 * v153);
  if (v152)
  {
    int64_t v136 = v153;
    goto LABEL_215;
  }
  while (1)
  {
    int64_t v136 = v153 + 1;
    if (__OFADD__(v153, 1)) {
      goto LABEL_329;
    }
    if (v136 >= v235) {
      break;
    }
    unint64_t v152 = *(void *)(v230 + 8 * v136);
    ++v153;
    if (v152) {
      goto LABEL_215;
    }
  }
LABEL_280:
  swift_bridgeObjectRelease();
  unint64_t v1 = v241;
  uint64_t v29 = v266;
  if (v26)
  {
LABEL_16:
    uint64_t v30 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v6);
    uint64_t *v30 = v251;
    v30[1] = v4;
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_22:
  specialized _NativeDictionary._insert(at:key:value:)(v6, 0x6F6974616C6C6F63, 0xE90000000000006ELL, v251, v4, (void *)v10);
LABEL_23:
  unint64_t v279 = v10;
  swift_bridgeObjectRelease();
  uint64_t v6 = v21;
  if (!v5) {
    goto LABEL_18;
  }
LABEL_24:
  uint64_t v5 = v252;
  swift_bridgeObjectRetain();
  LOBYTE(v4) = swift_isUniquelyReferenced_nonNull_native();
  v271._unint64_t countAndFlagsBits = v10;
  unint64_t v279 = 0x8000000000000000;
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(0x79636E6572727563, 0xE800000000000000);
  uint64_t v34 = *(void *)(v10 + 16);
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (__OFADD__(v34, v35)) {
    goto LABEL_113;
  }
  char v37 = v32;
  if (*(void *)(v10 + 24) < v36)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, v4);
    uint64_t v4 = v271._countAndFlagsBits;
    unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(0x79636E6572727563, 0xE800000000000000);
    if ((v37 & 1) != (v39 & 1)) {
      goto LABEL_333;
    }
    unint64_t v33 = v38;
    uint64_t v10 = v265;
    if ((v37 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (v4)
  {
    uint64_t v4 = v10;
    uint64_t v10 = v265;
    if ((v32 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  uint64_t v154 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v154;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_282;
  }
  uint64_t v236 = v6;
  id v155 = (void *)(v154 + 64);
  uint64_t v156 = v10 + 64;
  unint64_t v157 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v10 || (unint64_t)v155 >= v156 + 8 * v157) {
    memmove(v155, (const void *)(v10 + 64), 8 * v157);
  }
  int64_t v158 = 0;
  *(void *)(v4 + 16) = *(void *)(v10 + 16);
  uint64_t v159 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v160 = -1;
  if (v159 < 64) {
    uint64_t v160 = ~(-1 << v159);
  }
  unint64_t v161 = v160 & *(void *)(v10 + 64);
  int64_t v162 = (unint64_t)(v159 + 63) >> 6;
  while (2)
  {
    if (v161)
    {
      unint64_t v163 = __clz(__rbit64(v161));
      v161 &= v161 - 1;
      unint64_t v164 = v163 | (v158 << 6);
LABEL_224:
      uint64_t v165 = 16 * v164;
      id v166 = (uint64_t *)(*(void *)(v10 + 48) + v165);
      uint64_t v168 = *v166;
      uint64_t v167 = v166[1];
      id v169 = (uint64_t *)(*(void *)(v10 + 56) + v165);
      uint64_t v170 = *v169;
      uint64_t v171 = v169[1];
      id v172 = (void *)(*(void *)(v4 + 48) + v165);
      *id v172 = v168;
      v172[1] = v167;
      uint64_t v173 = (void *)(*(void *)(v4 + 56) + v165);
      *uint64_t v173 = v170;
      v173[1] = v171;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v174 = v158 + 1;
  if (__OFADD__(v158, 1)) {
    goto LABEL_324;
  }
  uint64_t v6 = v236;
  if (v174 >= v162) {
    goto LABEL_282;
  }
  unint64_t v175 = *(void *)(v156 + 8 * v174);
  ++v158;
  if (v175) {
    goto LABEL_247;
  }
  int64_t v158 = v174 + 1;
  if (v174 + 1 >= v162) {
    goto LABEL_282;
  }
  unint64_t v175 = *(void *)(v156 + 8 * v158);
  if (v175) {
    goto LABEL_247;
  }
  int64_t v158 = v174 + 2;
  if (v174 + 2 >= v162) {
    goto LABEL_282;
  }
  unint64_t v175 = *(void *)(v156 + 8 * v158);
  if (v175) {
    goto LABEL_247;
  }
  int64_t v158 = v174 + 3;
  if (v174 + 3 >= v162) {
    goto LABEL_282;
  }
  unint64_t v175 = *(void *)(v156 + 8 * v158);
  if (v175) {
    goto LABEL_247;
  }
  int64_t v158 = v174 + 4;
  if (v174 + 4 >= v162) {
    goto LABEL_282;
  }
  unint64_t v175 = *(void *)(v156 + 8 * v158);
  if (v175) {
    goto LABEL_247;
  }
  int64_t v158 = v174 + 5;
  if (v174 + 5 >= v162) {
    goto LABEL_282;
  }
  unint64_t v175 = *(void *)(v156 + 8 * v158);
  if (v175) {
    goto LABEL_247;
  }
  int64_t v158 = v174 + 6;
  if (v174 + 6 >= v162) {
    goto LABEL_282;
  }
  unint64_t v175 = *(void *)(v156 + 8 * v158);
  if (v175)
  {
LABEL_247:
    unint64_t v161 = (v175 - 1) & v175;
    unint64_t v164 = __clz(__rbit64(v175)) + (v158 << 6);
    goto LABEL_224;
  }
  int64_t v176 = v174 + 7;
  if (v176 >= v162) {
    goto LABEL_282;
  }
  unint64_t v177 = v1;
  unint64_t v175 = *(void *)(v156 + 8 * v176);
  if (v175)
  {
    int64_t v158 = v176;
    goto LABEL_247;
  }
  while (1)
  {
    int64_t v158 = v176 + 1;
    if (__OFADD__(v176, 1)) {
      goto LABEL_330;
    }
    unint64_t v1 = v177;
    uint64_t v6 = v236;
    if (v158 >= v162) {
      break;
    }
    unint64_t v175 = *(void *)(v156 + 8 * v158);
    ++v176;
    if (v175) {
      goto LABEL_247;
    }
  }
LABEL_282:
  swift_bridgeObjectRelease();
  uint64_t v29 = v266;
  uint64_t v10 = v265;
  uint64_t v5 = v252;
  if (v37)
  {
LABEL_28:
    uint64_t v40 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v33);
    *uint64_t v40 = v250;
    v40[1] = v5;
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
LABEL_31:
  specialized _NativeDictionary._insert(at:key:value:)(v33, 0x79636E6572727563, 0xE800000000000000, v250, v5, (void *)v4);
LABEL_32:
  unint64_t v279 = v4;
  swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_19:
    uint64_t v5 = v4;
    uint64_t v31 = v264;
    goto LABEL_42;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_isUniquelyReferenced_nonNull_native();
  v271._unint64_t countAndFlagsBits = v4;
  unint64_t v279 = 0x8000000000000000;
  unint64_t countAndFlagsBits = specialized __RawDictionaryStorage.find<A>(_:)(0x737265626D756ELL, 0xE700000000000000);
  uint64_t v42 = *(void *)(v4 + 16);
  BOOL v43 = (v41 & 1) == 0;
  uint64_t v44 = v42 + v43;
  if (__OFADD__(v42, v43)) {
    goto LABEL_114;
  }
  char v45 = v41;
  if (*(void *)(v4 + 24) < v44)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, v5);
    uint64_t v5 = v271._countAndFlagsBits;
    unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(0x737265626D756ELL, 0xE700000000000000);
    if ((v45 & 1) != (v47 & 1)) {
      goto LABEL_333;
    }
    unint64_t countAndFlagsBits = v46;
    uint64_t v31 = v264;
    if ((v45 & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  if (v5)
  {
    uint64_t v5 = v4;
    uint64_t v31 = v264;
    if ((v41 & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  uint64_t v178 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v178;
  if (!*(void *)(v4 + 16)) {
    goto LABEL_284;
  }
  uint64_t v237 = v6;
  char v179 = (void *)(v178 + 64);
  uint64_t v180 = v4 + 64;
  unint64_t v181 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v4 || (unint64_t)v179 >= v180 + 8 * v181) {
    memmove(v179, (const void *)(v4 + 64), 8 * v181);
  }
  int64_t v182 = 0;
  *(void *)(v5 + 16) = *(void *)(v4 + 16);
  uint64_t v183 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v184 = -1;
  if (v183 < 64) {
    uint64_t v184 = ~(-1 << v183);
  }
  unint64_t v185 = v184 & *(void *)(v4 + 64);
  int64_t v186 = (unint64_t)(v183 + 63) >> 6;
  while (2)
  {
    if (v185)
    {
      unint64_t v187 = __clz(__rbit64(v185));
      v185 &= v185 - 1;
      unint64_t v188 = v187 | (v182 << 6);
LABEL_256:
      uint64_t v189 = 16 * v188;
      uint64_t v190 = (uint64_t *)(*(void *)(v4 + 48) + v189);
      uint64_t v192 = *v190;
      uint64_t v191 = v190[1];
      unsigned __int8 v193 = (uint64_t *)(*(void *)(v4 + 56) + v189);
      uint64_t v194 = *v193;
      uint64_t v195 = v193[1];
      unint64_t v196 = (void *)(*(void *)(v5 + 48) + v189);
      *unint64_t v196 = v192;
      v196[1] = v191;
      unint64_t v197 = (void *)(*(void *)(v5 + 56) + v189);
      *unint64_t v197 = v194;
      v197[1] = v195;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v198 = v182 + 1;
  if (__OFADD__(v182, 1)) {
    goto LABEL_325;
  }
  uint64_t v6 = v237;
  if (v198 >= v186) {
    goto LABEL_284;
  }
  unint64_t v199 = *(void *)(v180 + 8 * v198);
  ++v182;
  if (v199) {
    goto LABEL_279;
  }
  int64_t v182 = v198 + 1;
  if (v198 + 1 >= v186) {
    goto LABEL_284;
  }
  unint64_t v199 = *(void *)(v180 + 8 * v182);
  if (v199) {
    goto LABEL_279;
  }
  int64_t v182 = v198 + 2;
  if (v198 + 2 >= v186) {
    goto LABEL_284;
  }
  unint64_t v199 = *(void *)(v180 + 8 * v182);
  if (v199) {
    goto LABEL_279;
  }
  int64_t v182 = v198 + 3;
  if (v198 + 3 >= v186) {
    goto LABEL_284;
  }
  unint64_t v199 = *(void *)(v180 + 8 * v182);
  if (v199) {
    goto LABEL_279;
  }
  int64_t v182 = v198 + 4;
  if (v198 + 4 >= v186) {
    goto LABEL_284;
  }
  unint64_t v199 = *(void *)(v180 + 8 * v182);
  if (v199) {
    goto LABEL_279;
  }
  int64_t v182 = v198 + 5;
  if (v198 + 5 >= v186) {
    goto LABEL_284;
  }
  unint64_t v199 = *(void *)(v180 + 8 * v182);
  if (v199) {
    goto LABEL_279;
  }
  int64_t v182 = v198 + 6;
  if (v198 + 6 >= v186) {
    goto LABEL_284;
  }
  unint64_t v199 = *(void *)(v180 + 8 * v182);
  if (v199)
  {
LABEL_279:
    unint64_t v185 = (v199 - 1) & v199;
    unint64_t v188 = __clz(__rbit64(v199)) + (v182 << 6);
    goto LABEL_256;
  }
  int64_t v200 = v198 + 7;
  if (v200 >= v186) {
    goto LABEL_284;
  }
  unint64_t v201 = v1;
  unint64_t v199 = *(void *)(v180 + 8 * v200);
  if (v199)
  {
    int64_t v182 = v200;
    goto LABEL_279;
  }
  while (1)
  {
    int64_t v182 = v200 + 1;
    if (__OFADD__(v200, 1)) {
      goto LABEL_331;
    }
    unint64_t v1 = v201;
    uint64_t v6 = v237;
    if (v182 >= v186) {
      break;
    }
    unint64_t v199 = *(void *)(v180 + 8 * v182);
    ++v200;
    if (v199) {
      goto LABEL_279;
    }
  }
LABEL_284:
  swift_bridgeObjectRelease();
  uint64_t v29 = v266;
  uint64_t v31 = v264;
  if (v45)
  {
LABEL_37:
    id v48 = (uint64_t *)(*(void *)(v5 + 56) + 16 * countAndFlagsBits);
    *id v48 = v249;
    v48[1] = v269;
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
LABEL_40:
  specialized _NativeDictionary._insert(at:key:value:)(countAndFlagsBits, 0x737265626D756ELL, 0xE700000000000000, v249, v269, (void *)v5);
LABEL_41:
  unint64_t v279 = v5;
  swift_bridgeObjectRelease();
LABEL_42:
  uint64_t v10 = 7239027;
  switch(v31)
  {
    case 1:
      uint64_t v10 = 7237485;
      goto LABEL_49;
    case 2:
      uint64_t v10 = 6649204;
      goto LABEL_49;
    case 3:
      uint64_t v10 = 6579575;
      goto LABEL_49;
    case 4:
      uint64_t v10 = 7694452;
      goto LABEL_49;
    case 5:
      uint64_t v10 = 6910566;
      goto LABEL_49;
    case 6:
      uint64_t v10 = 7627123;
      goto LABEL_49;
    case 7:
      goto LABEL_58;
    default:
LABEL_49:
      char v49 = swift_isUniquelyReferenced_nonNull_native();
      v271._unint64_t countAndFlagsBits = v5;
      unint64_t v279 = 0x8000000000000000;
      unint64_t countAndFlagsBits = specialized __RawDictionaryStorage.find<A>(_:)(30566, 0xE200000000000000);
      uint64_t v51 = *(void *)(v5 + 16);
      BOOL v52 = (v50 & 1) == 0;
      uint64_t v53 = v51 + v52;
      if (__OFADD__(v51, v52)) {
        goto LABEL_110;
      }
      LOBYTE(v4) = v50;
      if (*(void *)(v5 + 24) < v53)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, v49);
        uint64_t v54 = v271._countAndFlagsBits;
        unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(30566, 0xE200000000000000);
        if ((v4 & 1) != (v56 & 1)) {
          goto LABEL_333;
        }
        unint64_t countAndFlagsBits = v55;
        if ((v4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_53:
        char v57 = (uint64_t *)(*(void *)(v54 + 56) + 16 * countAndFlagsBits);
        *char v57 = v10;
        v57[1] = 0xE300000000000000;
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
      if ((v49 & 1) == 0) {
        goto LABEL_116;
      }
      uint64_t v54 = v5;
      if (v50) {
        goto LABEL_53;
      }
LABEL_56:
      specialized _NativeDictionary._insert(at:key:value:)(countAndFlagsBits, 30566, 0xE200000000000000, v10, 0xE300000000000000, (void *)v54);
LABEL_57:
      unint64_t v279 = v54;
      swift_bridgeObjectRelease();
      uint64_t v5 = v54;
LABEL_58:
      uint64_t v10 = 3223912;
      switch(v263)
      {
        case 1:
          uint64_t v10 = 3289448;
          goto LABEL_62;
        case 2:
          uint64_t v10 = 3355240;
          goto LABEL_62;
        case 3:
          uint64_t v10 = 3420776;
          goto LABEL_62;
        case 4:
          goto LABEL_71;
        default:
LABEL_62:
          char v58 = swift_isUniquelyReferenced_nonNull_native();
          v271._unint64_t countAndFlagsBits = v5;
          unint64_t v279 = 0x8000000000000000;
          unint64_t countAndFlagsBits = specialized __RawDictionaryStorage.find<A>(_:)(0x7372756F68, 0xE500000000000000);
          uint64_t v60 = *(void *)(v5 + 16);
          BOOL v61 = (v59 & 1) == 0;
          uint64_t v62 = v60 + v61;
          if (__OFADD__(v60, v61)) {
            goto LABEL_111;
          }
          char v63 = v59;
          if (*(void *)(v5 + 24) < v62)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, v58);
            uint64_t v64 = v271._countAndFlagsBits;
            unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(0x7372756F68, 0xE500000000000000);
            if ((v63 & 1) != (v66 & 1)) {
              goto LABEL_333;
            }
            unint64_t countAndFlagsBits = v65;
            if ((v63 & 1) == 0) {
              goto LABEL_69;
            }
            goto LABEL_66;
          }
          if (v58)
          {
            uint64_t v64 = v5;
            if ((v59 & 1) == 0) {
              goto LABEL_69;
            }
            goto LABEL_66;
          }
          uint64_t v234 = v6;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
          uint64_t v109 = static _DictionaryStorage.copy(original:)();
          uint64_t v64 = v109;
          if (!*(void *)(v5 + 16)) {
            goto LABEL_182;
          }
          unint64_t v240 = v1;
          int64_t v110 = (void *)(v109 + 64);
          uint64_t v111 = v5 + 64;
          unint64_t v112 = (unint64_t)((1 << *(unsigned char *)(v64 + 32)) + 63) >> 6;
          if (v64 != v5 || (unint64_t)v110 >= v111 + 8 * v112) {
            memmove(v110, (const void *)(v5 + 64), 8 * v112);
          }
          int64_t v113 = 0;
          *(void *)(v64 + 16) = *(void *)(v5 + 16);
          uint64_t v114 = 1 << *(unsigned char *)(v5 + 32);
          uint64_t v115 = -1;
          if (v114 < 64) {
            uint64_t v115 = ~(-1 << v114);
          }
          unint64_t v116 = v115 & *(void *)(v5 + 64);
          int64_t v117 = (unint64_t)(v114 + 63) >> 6;
          break;
      }
      break;
  }
  while (1)
  {
    if (v116)
    {
      unint64_t v118 = __clz(__rbit64(v116));
      v116 &= v116 - 1;
      unint64_t v119 = v118 | (v113 << 6);
      goto LABEL_158;
    }
    int64_t v129 = v113 + 1;
    if (__OFADD__(v113, 1))
    {
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
      goto LABEL_327;
    }
    unint64_t v1 = v240;
    if (v129 >= v117) {
      goto LABEL_182;
    }
    unint64_t v130 = *(void *)(v111 + 8 * v129);
    ++v113;
    if (!v130)
    {
      int64_t v113 = v129 + 1;
      if (v129 + 1 >= v117) {
        goto LABEL_182;
      }
      unint64_t v130 = *(void *)(v111 + 8 * v113);
      if (!v130)
      {
        int64_t v113 = v129 + 2;
        if (v129 + 2 >= v117) {
          goto LABEL_182;
        }
        unint64_t v130 = *(void *)(v111 + 8 * v113);
        if (!v130)
        {
          int64_t v113 = v129 + 3;
          if (v129 + 3 >= v117) {
            goto LABEL_182;
          }
          unint64_t v130 = *(void *)(v111 + 8 * v113);
          if (!v130)
          {
            int64_t v113 = v129 + 4;
            if (v129 + 4 >= v117) {
              goto LABEL_182;
            }
            unint64_t v130 = *(void *)(v111 + 8 * v113);
            if (!v130)
            {
              int64_t v113 = v129 + 5;
              if (v129 + 5 >= v117) {
                goto LABEL_182;
              }
              unint64_t v130 = *(void *)(v111 + 8 * v113);
              if (!v130)
              {
                int64_t v113 = v129 + 6;
                if (v129 + 6 >= v117) {
                  goto LABEL_182;
                }
                unint64_t v130 = *(void *)(v111 + 8 * v113);
                if (!v130) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_181:
    unint64_t v116 = (v130 - 1) & v130;
    unint64_t v119 = __clz(__rbit64(v130)) + (v113 << 6);
LABEL_158:
    uint64_t v120 = 16 * v119;
    uint64_t v121 = (uint64_t *)(*(void *)(v5 + 48) + v120);
    uint64_t v123 = *v121;
    uint64_t v122 = v121[1];
    unint64_t v124 = (uint64_t *)(*(void *)(v5 + 56) + v120);
    uint64_t v125 = *v124;
    uint64_t v126 = v124[1];
    uint64_t v127 = (void *)(*(void *)(v64 + 48) + v120);
    *uint64_t v127 = v123;
    v127[1] = v122;
    uint64_t v128 = (void *)(*(void *)(v64 + 56) + v120);
    *uint64_t v128 = v125;
    v128[1] = v126;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  int64_t v131 = v129 + 7;
  if (v131 >= v117) {
    goto LABEL_182;
  }
  uint64_t v132 = v64;
  unint64_t v130 = *(void *)(v111 + 8 * v131);
  if (v130)
  {
    int64_t v113 = v131;
    goto LABEL_181;
  }
  while (1)
  {
    int64_t v113 = v131 + 1;
    if (__OFADD__(v131, 1)) {
      goto LABEL_328;
    }
    uint64_t v64 = v132;
    unint64_t v1 = v240;
    if (v113 >= v117) {
      break;
    }
    unint64_t v130 = *(void *)(v111 + 8 * v113);
    ++v131;
    if (v130) {
      goto LABEL_181;
    }
  }
LABEL_182:
  swift_bridgeObjectRelease();
  uint64_t v29 = v266;
  uint64_t v6 = v234;
  if ((v63 & 1) == 0)
  {
LABEL_69:
    specialized _NativeDictionary._insert(at:key:value:)(countAndFlagsBits, 0x7372756F68, 0xE500000000000000, v10, 0xE300000000000000, (void *)v64);
    goto LABEL_70;
  }
LABEL_66:
  char v67 = (uint64_t *)(*(void *)(v64 + 56) + 16 * countAndFlagsBits);
  *char v67 = v10;
  v67[1] = 0xE300000000000000;
  swift_bridgeObjectRelease();
LABEL_70:
  unint64_t v279 = v64;
  swift_bridgeObjectRelease();
LABEL_71:
  if (v253)
  {
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v244, v243, 0x6572757361656DLL, 0xE700000000000000);
  }
  uint64_t v5 = v257;
  unint64_t countAndFlagsBits = v258;
  if (v6)
  {
    if (v258)
    {
      if (v268 == v257 && v267 == v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_81;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of Locale.LanguageCode?(v242, v6);
      outlined consume of Locale.LanguageCode?(v1, 0);
    }
    v270[0] = v242;
    v270[1] = v6;
    v270[2] = v268;
    v270[3] = v267;
    static Locale.Subdivision.subdivision(for:)(v270, &v271);
    long long v68 = v272;
    swift_bridgeObjectRelease();
    specialized Dictionary.subscript.setter(v68, *((uint64_t *)&v68 + 1), 26482, 0xE200000000000000);
  }
LABEL_81:
  if (v254)
  {
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v246, v245, 25715, 0xE200000000000000);
  }
  if (v255._countAndFlagsBits)
  {
    Swift::String v271 = v255;
    uint64_t v69 = TimeZone.identifier.getter();
    specialized Dictionary.subscript.setter(v69, v70, 0x656E6F7A656D6974, 0xE800000000000000);
  }
  if (v256)
  {
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v248, v247, 24950, 0xE200000000000000);
  }
  Swift::String v271 = v262;
  long long v272 = v261;
  long long v273 = v260;
  long long v274 = v259;
  unint64_t v275 = v1;
  unint64_t v276 = v258;
  uint64_t v277 = v257;
  uint64_t v278 = v29;
  uint64_t v71 = Locale.Language.Components.identifier.getter();
  uint64_t v10 = v72;
  uint64_t v6 = 0;
  uint64_t v4 = v279;
  uint64_t v73 = 1 << *(unsigned char *)(v279 + 32);
  uint64_t v74 = -1;
  if (v73 < 64) {
    uint64_t v74 = ~(-1 << v73);
  }
  unint64_t v75 = v279 + 64;
  unint64_t v1 = v74 & *(void *)(v279 + 64);
  int64_t v76 = (unint64_t)(v73 + 63) >> 6;
  while (2)
  {
    if (v1)
    {
      unint64_t v77 = __clz(__rbit64(v1));
      v1 &= v1 - 1;
      unint64_t v78 = v77 | (v6 << 6);
LABEL_91:
      uint64_t v79 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v78);
      unint64_t countAndFlagsBits = v79[1];
      v271._unint64_t countAndFlagsBits = *v79;
      v271._unint64_t object = (void *)countAndFlagsBits;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v71 = specialized static Locale.identifierWithKeywordValue(_:key:value:)(v71);
      uint64_t v5 = v80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v5;
      continue;
    }
    break;
  }
  int64_t v81 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_109;
  }
  if (v81 >= v76) {
    goto LABEL_107;
  }
  unint64_t v82 = *(void *)(v75 + 8 * v81);
  ++v6;
  if (v82) {
    goto LABEL_106;
  }
  uint64_t v6 = v81 + 1;
  if (v81 + 1 >= v76) {
    goto LABEL_107;
  }
  unint64_t v82 = *(void *)(v75 + 8 * v6);
  if (v82) {
    goto LABEL_106;
  }
  uint64_t v6 = v81 + 2;
  if (v81 + 2 >= v76) {
    goto LABEL_107;
  }
  unint64_t v82 = *(void *)(v75 + 8 * v6);
  if (v82)
  {
LABEL_106:
    unint64_t v1 = (v82 - 1) & v82;
    unint64_t v78 = __clz(__rbit64(v82)) + (v6 << 6);
    goto LABEL_91;
  }
  int64_t v83 = v81 + 3;
  if (v83 >= v76)
  {
LABEL_107:
    swift_release();
    return v71;
  }
  unint64_t v82 = *(void *)(v75 + 8 * v83);
  if (v82)
  {
    uint64_t v6 = v83;
    goto LABEL_106;
  }
  while (1)
  {
    uint64_t v6 = v83 + 1;
    if (__OFADD__(v83, 1)) {
      break;
    }
    if (v6 >= v76) {
      goto LABEL_107;
    }
    unint64_t v82 = *(void *)(v75 + 8 * v6);
    ++v83;
    if (v82) {
      goto LABEL_106;
    }
  }
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  uint64_t v233 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  uint64_t v85 = static _DictionaryStorage.copy(original:)();
  uint64_t v54 = v85;
  if (!*(void *)(v5 + 16))
  {
LABEL_148:
    swift_bridgeObjectRelease();
    uint64_t v29 = v266;
    uint64_t v6 = v233;
    if (v4) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
  unint64_t v239 = v1;
  uint64_t v86 = (void *)(v85 + 64);
  uint64_t v87 = v5 + 64;
  unint64_t v88 = (unint64_t)((1 << *(unsigned char *)(v54 + 32)) + 63) >> 6;
  if (v54 != v5 || (unint64_t)v86 >= v87 + 8 * v88) {
    memmove(v86, (const void *)(v5 + 64), 8 * v88);
  }
  int64_t v89 = 0;
  *(void *)(v54 + 16) = *(void *)(v5 + 16);
  uint64_t v90 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v91 = -1;
  if (v90 < 64) {
    uint64_t v91 = ~(-1 << v90);
  }
  unint64_t v92 = v91 & *(void *)(v5 + 64);
  int64_t v93 = (unint64_t)(v90 + 63) >> 6;
  while (2)
  {
    if (v92)
    {
      unint64_t v94 = __clz(__rbit64(v92));
      v92 &= v92 - 1;
      unint64_t v95 = v94 | (v89 << 6);
LABEL_124:
      uint64_t v96 = 16 * v95;
      uint64_t v97 = (uint64_t *)(*(void *)(v5 + 48) + v96);
      uint64_t v99 = *v97;
      uint64_t v98 = v97[1];
      long long v100 = (uint64_t *)(*(void *)(v5 + 56) + v96);
      uint64_t v101 = *v100;
      uint64_t v102 = v100[1];
      uint64_t v103 = (void *)(*(void *)(v54 + 48) + v96);
      *uint64_t v103 = v99;
      v103[1] = v98;
      uint64_t v104 = (void *)(*(void *)(v54 + 56) + v96);
      *uint64_t v104 = v101;
      v104[1] = v102;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v105 = v89 + 1;
  if (__OFADD__(v89, 1))
  {
    __break(1u);
    goto LABEL_322;
  }
  unint64_t v1 = v239;
  if (v105 >= v93) {
    goto LABEL_148;
  }
  unint64_t v106 = *(void *)(v87 + 8 * v105);
  ++v89;
  if (v106) {
    goto LABEL_147;
  }
  int64_t v89 = v105 + 1;
  if (v105 + 1 >= v93) {
    goto LABEL_148;
  }
  unint64_t v106 = *(void *)(v87 + 8 * v89);
  if (v106) {
    goto LABEL_147;
  }
  int64_t v89 = v105 + 2;
  if (v105 + 2 >= v93) {
    goto LABEL_148;
  }
  unint64_t v106 = *(void *)(v87 + 8 * v89);
  if (v106) {
    goto LABEL_147;
  }
  int64_t v89 = v105 + 3;
  if (v105 + 3 >= v93) {
    goto LABEL_148;
  }
  unint64_t v106 = *(void *)(v87 + 8 * v89);
  if (v106) {
    goto LABEL_147;
  }
  int64_t v89 = v105 + 4;
  if (v105 + 4 >= v93) {
    goto LABEL_148;
  }
  unint64_t v106 = *(void *)(v87 + 8 * v89);
  if (v106) {
    goto LABEL_147;
  }
  int64_t v89 = v105 + 5;
  if (v105 + 5 >= v93) {
    goto LABEL_148;
  }
  unint64_t v106 = *(void *)(v87 + 8 * v89);
  if (v106) {
    goto LABEL_147;
  }
  int64_t v89 = v105 + 6;
  if (v105 + 6 >= v93) {
    goto LABEL_148;
  }
  unint64_t v106 = *(void *)(v87 + 8 * v89);
  if (v106)
  {
LABEL_147:
    unint64_t v92 = (v106 - 1) & v106;
    unint64_t v95 = __clz(__rbit64(v106)) + (v89 << 6);
    goto LABEL_124;
  }
  int64_t v107 = v105 + 7;
  if (v107 >= v93) {
    goto LABEL_148;
  }
  uint64_t v108 = v54;
  unint64_t v106 = *(void *)(v87 + 8 * v107);
  if (v106)
  {
    int64_t v89 = v107;
    goto LABEL_147;
  }
  while (1)
  {
    int64_t v89 = v107 + 1;
    if (__OFADD__(v107, 1)) {
      break;
    }
    uint64_t v54 = v108;
    unint64_t v1 = v239;
    if (v89 >= v93) {
      goto LABEL_148;
    }
    unint64_t v106 = *(void *)(v87 + 8 * v89);
    ++v107;
    if (v106) {
      goto LABEL_147;
    }
  }
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
LABEL_331:
  __break(1u);
LABEL_332:
  __break(1u);
LABEL_333:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Locale.Language.Components.identifier.getter()
{
  unint64_t object = v0[2]._object;
  uint64_t countAndFlagsBits = v0[3]._countAndFlagsBits;
  uint64_t v3 = v0[3]._object;
  uint64_t v5 = v0[4]._object;
  uint64_t v4 = v0[5]._countAndFlagsBits;
  uint64_t v6 = v0[5]._object;
  if (v0->_object) {
    String.append(_:)(v0[1]);
  }
  if (object)
  {
    v7._uint64_t countAndFlagsBits = 45;
    v7._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = countAndFlagsBits;
    v8._unint64_t object = v3;
    String.append(_:)(v8);
  }
  if (v5)
  {
    v9._uint64_t countAndFlagsBits = 95;
    v9._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = v4;
    v10._unint64_t object = v6;
    String.append(_:)(v10);
  }
  return 0;
}

uint64_t specialized static Locale.identifierWithKeywordValue(_:key:value:)(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  uint64_t v2 = String.utf8CString.getter();
  strlcpy(__dst, (const char *)(v2 + 32), 0x9DuLL);
  swift_release();
  String.utf8CString.getter();
  String.utf8CString.getter();
  int v3 = uloc_setKeywordValue();
  swift_release();
  swift_release();
  if (v3 < 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  else
  {
    __dst[v3] = 0;
    a1 = String.init(cString:)();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t Calendar.Identifier.cldrIdentifier.getter()
{
  unint64_t result = 0x6169726F67657267;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7473696864647562;
      break;
    case 2:
      unint64_t result = 0x6573656E696863;
      break;
    case 3:
      unint64_t result = 0x636974706F63;
      break;
    case 4:
      unint64_t result = 0x6369706F69687465;
      break;
    case 5:
      unint64_t result = 0x61616F69687465;
      break;
    case 6:
      unint64_t result = 0x776572626568;
      break;
    case 7:
      unint64_t result = 0x313036386F7369;
      break;
    case 8:
      unint64_t result = 0x6E6169646E69;
      break;
    case 9:
      unint64_t result = 0x63696D616C7369;
      break;
    case 0xA:
    case 0xE:
      unint64_t result = 0x2D63696D616C7369;
      break;
    case 0xB:
      unint64_t result = 0x6573656E6170616ALL;
      break;
    case 0xC:
      unint64_t result = 0x6E616973726570;
      break;
    case 0xD:
      unint64_t result = 6516594;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for _LocaleICU()
{
  return self;
}

double _s10Foundation17LocalePreferencesVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_182106C90;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  *(_OWORD *)((char *)a1 + 124) = 0u;
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  if (!a2)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    char v23 = v22;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      return result;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = v26;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
      uint64_t v50 = static _DictionaryStorage.copy(original:)();
      uint64_t v27 = v50;
      if (*(void *)(v26 + 16))
      {
        uint64_t v51 = (void *)(v50 + 64);
        uint64_t v52 = v26 + 64;
        unint64_t v53 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
        if (v27 != v26 || (unint64_t)v51 >= v52 + 8 * v53) {
          memmove(v51, (const void *)(v26 + 64), 8 * v53);
        }
        int64_t v54 = 0;
        *(void *)(v27 + 16) = *(void *)(v26 + 16);
        uint64_t v55 = 1 << *(unsigned char *)(v26 + 32);
        uint64_t v56 = -1;
        if (v55 < 64) {
          uint64_t v56 = ~(-1 << v55);
        }
        unint64_t v57 = v56 & *(void *)(v26 + 64);
        int64_t v58 = (unint64_t)(v55 + 63) >> 6;
        while (1)
        {
          if (v57)
          {
            unint64_t v59 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            unint64_t v60 = v59 | (v54 << 6);
          }
          else
          {
            int64_t v70 = v54 + 1;
            if (__OFADD__(v54, 1))
            {
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
            if (v70 >= v58) {
              break;
            }
            unint64_t v71 = *(void *)(v52 + 8 * v70);
            ++v54;
            if (!v71)
            {
              int64_t v54 = v70 + 1;
              if (v70 + 1 >= v58) {
                break;
              }
              unint64_t v71 = *(void *)(v52 + 8 * v54);
              if (!v71)
              {
                int64_t v54 = v70 + 2;
                if (v70 + 2 >= v58) {
                  break;
                }
                unint64_t v71 = *(void *)(v52 + 8 * v54);
                if (!v71)
                {
                  int64_t v54 = v70 + 3;
                  if (v70 + 3 >= v58) {
                    break;
                  }
                  unint64_t v71 = *(void *)(v52 + 8 * v54);
                  if (!v71)
                  {
                    int64_t v54 = v70 + 4;
                    if (v70 + 4 >= v58) {
                      break;
                    }
                    unint64_t v71 = *(void *)(v52 + 8 * v54);
                    if (!v71)
                    {
                      int64_t v72 = v70 + 5;
                      if (v72 >= v58) {
                        break;
                      }
                      unint64_t v71 = *(void *)(v52 + 8 * v72);
                      if (!v71)
                      {
                        while (1)
                        {
                          int64_t v54 = v72 + 1;
                          if (__OFADD__(v72, 1)) {
                            break;
                          }
                          if (v54 >= v58) {
                            goto LABEL_79;
                          }
                          unint64_t v71 = *(void *)(v52 + 8 * v54);
                          ++v72;
                          if (v71) {
                            goto LABEL_78;
                          }
                        }
LABEL_82:
                        __break(1u);
                        goto LABEL_83;
                      }
                      int64_t v54 = v72;
                    }
                  }
                }
              }
            }
LABEL_78:
            unint64_t v57 = (v71 - 1) & v71;
            unint64_t v60 = __clz(__rbit64(v71)) + (v54 << 6);
          }
          uint64_t v61 = 16 * v60;
          uint64_t v62 = (uint64_t *)(*(void *)(v26 + 48) + v61);
          uint64_t v64 = *v62;
          uint64_t v63 = v62[1];
          unint64_t v65 = (uint64_t *)(*(void *)(v26 + 56) + v61);
          uint64_t v66 = *v65;
          uint64_t v67 = v65[1];
          long long v68 = (void *)(*(void *)(v27 + 48) + v61);
          *long long v68 = v64;
          v68[1] = v63;
          uint64_t v69 = (void *)(*(void *)(v27 + 56) + v61);
          *uint64_t v69 = v66;
          v69[1] = v67;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
      }
LABEL_79:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v21, v27);
    *uint64_t v6 = v27;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v77 = *v4;
  uint64_t v12 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v5 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      uint64_t v18 = v77;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
      if ((v5 & 1) != (v20 & 1)) {
        goto LABEL_84;
      }
      unint64_t v14 = v19;
      if ((v5 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_15:
      char v28 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v14);
      *char v28 = a1;
      v28[1] = a2;
      swift_bridgeObjectRelease();
LABEL_49:
      *uint64_t v6 = v18;
      return swift_bridgeObjectRelease();
    }
    if (v11)
    {
      uint64_t v18 = v12;
      if (v13) {
        goto LABEL_15;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v29;
  if (!*(void *)(v12 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
  uint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1 << *(unsigned char *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v30 >= v12 + 64 + 8 * v31) {
    memmove(v30, (const void *)(v12 + 64), 8 * v31);
  }
  int64_t v32 = 0;
  *(void *)(v18 + 16) = *(void *)(v12 + 16);
  uint64_t v33 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & *(void *)(v12 + 64);
  uint64_t v73 = v12 + 64;
  int64_t v74 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      uint64_t v75 = (v35 - 1) & v35;
      int64_t v76 = v32;
      unint64_t v36 = __clz(__rbit64(v35)) | (v32 << 6);
      goto LABEL_25;
    }
    int64_t v46 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v46 >= v74) {
      goto LABEL_47;
    }
    unint64_t v47 = *(void *)(v73 + 8 * v46);
    int64_t v48 = v32 + 1;
    if (!v47)
    {
      int64_t v48 = v32 + 2;
      if (v32 + 2 >= v74) {
        goto LABEL_47;
      }
      unint64_t v47 = *(void *)(v73 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v32 + 3;
        if (v32 + 3 >= v74) {
          goto LABEL_47;
        }
        unint64_t v47 = *(void *)(v73 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v32 + 4;
          if (v32 + 4 >= v74) {
            goto LABEL_47;
          }
          unint64_t v47 = *(void *)(v73 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v32 + 5;
            if (v32 + 5 >= v74) {
              goto LABEL_47;
            }
            unint64_t v47 = *(void *)(v73 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v32 + 6;
              if (v32 + 6 >= v74) {
                goto LABEL_47;
              }
              unint64_t v47 = *(void *)(v73 + 8 * v48);
              if (!v47) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v75 = (v47 - 1) & v47;
    int64_t v76 = v48;
    unint64_t v36 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_25:
    uint64_t v37 = 16 * v36;
    unint64_t v38 = (uint64_t *)(*(void *)(v12 + 48) + v37);
    uint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    char v41 = (uint64_t *)(*(void *)(v12 + 56) + v37);
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    uint64_t v44 = (void *)(*(void *)(v18 + 48) + v37);
    *uint64_t v44 = v40;
    v44[1] = v39;
    char v45 = (void *)(*(void *)(v18 + 56) + v37);
    *char v45 = v42;
    v45[1] = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v35 = v75;
    int64_t v32 = v76;
  }
  uint64_t v49 = v32 + 7;
  if (v32 + 7 >= v74) {
    goto LABEL_47;
  }
  unint64_t v47 = *(void *)(v73 + 8 * v49);
  if (v47)
  {
    int64_t v48 = v32 + 7;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v48 >= v74) {
      goto LABEL_47;
    }
    unint64_t v47 = *(void *)(v73 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_46;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t vars8;

  uint64_t v6 = v4;
  if (!a2)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      goto LABEL_50;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v26 = v25;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      uint64_t v50 = static _DictionaryStorage.copy(original:)();
      uint64_t v26 = v50;
      if (*(void *)(v25 + 16))
      {
        uint64_t v51 = (void *)(v50 + 64);
        uint64_t v52 = v25 + 64;
        unint64_t v53 = (unint64_t)((1 << *(unsigned char *)(v26 + 32)) + 63) >> 6;
        if (v26 != v25 || (unint64_t)v51 >= v52 + 8 * v53) {
          memmove(v51, (const void *)(v25 + 64), 8 * v53);
        }
        int64_t v54 = 0;
        *(void *)(v26 + 16) = *(void *)(v25 + 16);
        uint64_t v55 = 1 << *(unsigned char *)(v25 + 32);
        uint64_t v56 = -1;
        if (v55 < 64) {
          uint64_t v56 = ~(-1 << v55);
        }
        unint64_t v57 = v56 & *(void *)(v25 + 64);
        int64_t v58 = (unint64_t)(v55 + 63) >> 6;
        while (1)
        {
          if (v57)
          {
            unint64_t v59 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            unint64_t v60 = v59 | (v54 << 6);
          }
          else
          {
            int64_t v70 = v54 + 1;
            if (__OFADD__(v54, 1))
            {
LABEL_83:
              __break(1u);
              goto LABEL_84;
            }
            if (v70 >= v58) {
              break;
            }
            unint64_t v71 = *(void *)(v52 + 8 * v70);
            ++v54;
            if (!v71)
            {
              int64_t v54 = v70 + 1;
              if (v70 + 1 >= v58) {
                break;
              }
              unint64_t v71 = *(void *)(v52 + 8 * v54);
              if (!v71)
              {
                int64_t v54 = v70 + 2;
                if (v70 + 2 >= v58) {
                  break;
                }
                unint64_t v71 = *(void *)(v52 + 8 * v54);
                if (!v71)
                {
                  int64_t v54 = v70 + 3;
                  if (v70 + 3 >= v58) {
                    break;
                  }
                  unint64_t v71 = *(void *)(v52 + 8 * v54);
                  if (!v71)
                  {
                    int64_t v54 = v70 + 4;
                    if (v70 + 4 >= v58) {
                      break;
                    }
                    unint64_t v71 = *(void *)(v52 + 8 * v54);
                    if (!v71)
                    {
                      int64_t v72 = v70 + 5;
                      if (v72 >= v58) {
                        break;
                      }
                      unint64_t v71 = *(void *)(v52 + 8 * v72);
                      if (!v71)
                      {
                        while (1)
                        {
                          int64_t v54 = v72 + 1;
                          if (__OFADD__(v72, 1)) {
                            break;
                          }
                          if (v54 >= v58) {
                            goto LABEL_81;
                          }
                          unint64_t v71 = *(void *)(v52 + 8 * v54);
                          ++v72;
                          if (v71) {
                            goto LABEL_80;
                          }
                        }
LABEL_84:
                        __break(1u);
                        goto LABEL_85;
                      }
                      int64_t v54 = v72;
                    }
                  }
                }
              }
            }
LABEL_80:
            unint64_t v57 = (v71 - 1) & v71;
            unint64_t v60 = __clz(__rbit64(v71)) + (v54 << 6);
          }
          uint64_t v61 = 16 * v60;
          uint64_t v62 = (uint64_t *)(*(void *)(v25 + 48) + v61);
          uint64_t v64 = *v62;
          uint64_t v63 = v62[1];
          unint64_t v65 = (uint64_t *)(*(void *)(v25 + 56) + v61);
          uint64_t v66 = *v65;
          uint64_t v67 = v65[1];
          long long v68 = (void *)(*(void *)(v26 + 48) + v61);
          *long long v68 = v64;
          v68[1] = v63;
          uint64_t v69 = (void *)(*(void *)(v26 + 56) + v61);
          *uint64_t v69 = v66;
          v69[1] = v67;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
      }
LABEL_81:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v21, v26);
    *uint64_t v6 = v26;
    swift_bridgeObjectRelease();
LABEL_49:
    swift_bridgeObjectRelease();
LABEL_50:
    return swift_bridgeObjectRelease();
  }
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v77 = *v4;
  uint64_t v12 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v5 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      uint64_t v18 = v77;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
      if ((v5 & 1) != (v20 & 1)) {
        goto LABEL_86;
      }
      unint64_t v14 = v19;
      if ((v5 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_13:
      uint64_t v27 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v14);
      swift_bridgeObjectRelease();
      *uint64_t v27 = a1;
      v27[1] = a2;
LABEL_48:
      *uint64_t v6 = v18;
      goto LABEL_49;
    }
    if (v11)
    {
      uint64_t v18 = v12;
      if (v13) {
        goto LABEL_13;
      }
LABEL_47:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v28;
  if (!*(void *)(v12 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  uint64_t v29 = (void *)(v28 + 64);
  uint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v29 >= v12 + 64 + 8 * v30) {
    memmove(v29, (const void *)(v12 + 64), 8 * v30);
  }
  unint64_t v31 = 0;
  *(void *)(v18 + 16) = *(void *)(v12 + 16);
  int64_t v32 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  uint64_t v34 = v33 & *(void *)(v12 + 64);
  uint64_t v73 = v12 + 64;
  int64_t v74 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      uint64_t v75 = (v34 - 1) & v34;
      int64_t v76 = v31;
      unint64_t v35 = __clz(__rbit64(v34)) | (v31 << 6);
      goto LABEL_24;
    }
    char v45 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_83;
    }
    if (v45 >= v74) {
      goto LABEL_46;
    }
    int64_t v46 = *(void *)(v73 + 8 * v45);
    unint64_t v47 = v31 + 1;
    if (!v46)
    {
      unint64_t v47 = v31 + 2;
      if (v31 + 2 >= v74) {
        goto LABEL_46;
      }
      int64_t v46 = *(void *)(v73 + 8 * v47);
      if (!v46)
      {
        unint64_t v47 = v31 + 3;
        if (v31 + 3 >= v74) {
          goto LABEL_46;
        }
        int64_t v46 = *(void *)(v73 + 8 * v47);
        if (!v46)
        {
          unint64_t v47 = v31 + 4;
          if (v31 + 4 >= v74) {
            goto LABEL_46;
          }
          int64_t v46 = *(void *)(v73 + 8 * v47);
          if (!v46)
          {
            unint64_t v47 = v31 + 5;
            if (v31 + 5 >= v74) {
              goto LABEL_46;
            }
            int64_t v46 = *(void *)(v73 + 8 * v47);
            if (!v46)
            {
              unint64_t v47 = v31 + 6;
              if (v31 + 6 >= v74) {
                goto LABEL_46;
              }
              int64_t v46 = *(void *)(v73 + 8 * v47);
              if (!v46) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    uint64_t v75 = (v46 - 1) & v46;
    int64_t v76 = v47;
    unint64_t v35 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_24:
    unint64_t v36 = 16 * v35;
    uint64_t v37 = (uint64_t *)(*(void *)(v12 + 48) + v36);
    uint64_t v39 = *v37;
    unint64_t v38 = v37[1];
    uint64_t v40 = (uint64_t *)(*(void *)(v12 + 56) + v36);
    char v41 = *v40;
    uint64_t v42 = v40[1];
    uint64_t v43 = (void *)(*(void *)(v18 + 48) + v36);
    *uint64_t v43 = v39;
    v43[1] = v38;
    uint64_t v44 = (void *)(*(void *)(v18 + 56) + v36);
    *uint64_t v44 = v41;
    v44[1] = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = v75;
    unint64_t v31 = v76;
  }
  int64_t v48 = v31 + 7;
  if (v31 + 7 >= v74) {
    goto LABEL_46;
  }
  int64_t v46 = *(void *)(v73 + 8 * v48);
  if (v46)
  {
    unint64_t v47 = v31 + 7;
    goto LABEL_45;
  }
  while (1)
  {
    unint64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v47 >= v74) {
      goto LABEL_46;
    }
    int64_t v46 = *(void *)(v73 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_45;
    }
  }
LABEL_85:
  __break(1u);
LABEL_86:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for _LocaleProtocol.copy(newCalendarIdentifier:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 40))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t getEnumTagSinglePayload for URLComponents(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 154)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

Foundation::Date_optional __swiftcall Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(Swift::Int bySettingHour, Swift::Int minute, Swift::Int second, Foundation::Date of, Foundation::Calendar::MatchingPolicy matchingPolicy, Foundation::Calendar::RepeatedTimePolicy repeatedTimePolicy, Foundation::Calendar::SearchDirection direction)
{
  uint64_t v12 = v8;
  double v13 = *(double *)matchingPolicy;
  int v14 = *(unsigned __int8 *)repeatedTimePolicy;
  char v15 = *(unsigned char *)direction;
  char v16 = *v7;
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  LOBYTE(__dst[0]) = 3;
  if (v13 > 1.59271755e13) {
    double v13 = 1.59271755e13;
  }
  double v19 = fmax(v13, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v19;
  unsigned __int8 v21 = (*(void *(**)(double *__return_ptr, long long *, double *, uint64_t, uint64_t))(v18 + 160))(v37, __dst, __src, ObjectType, v18);
  if (v38)
  {
    *(void *)uint64_t v12 = 0;
    *(unsigned char *)(v12 + 8) = 1;
  }
  else
  {
    double v23 = v37[0];
    __dst[0] = 0uLL;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, &v34, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, bySettingHour, 0, minute, 0, second, 0, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    if (v14 == 3) {
      char v24 = 3;
    }
    else {
      char v24 = 0;
    }
    uint64_t v34 = v17;
    uint64_t v35 = v18;
    double v31 = v23 + -0.5;
    memcpy(__dst, __src, 0x11AuLL);
    char v29 = v24;
    char v28 = v15;
    char v27 = v16;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v31, __dst, &v29, &v28, &v27, (uint64_t)&v32);
    double v25 = v32;
    if (v33)
    {
      unsigned __int8 v21 = outlined release of DateComponents((uint64_t)__src);
      *(double *)uint64_t v12 = v25;
      *(unsigned char *)(v12 + 8) = 1;
    }
    else if (v23 <= v32)
    {
      unsigned __int8 v21 = outlined release of DateComponents((uint64_t)__src);
      *(double *)uint64_t v12 = v25;
      *(unsigned char *)(v12 + 8) = 0;
    }
    else
    {
      uint64_t v34 = v17;
      uint64_t v35 = v18;
      double v32 = v23;
      memcpy(__dst, __src, 0x11AuLL);
      LOBYTE(v31) = v14;
      char v29 = v15;
      char v28 = v16;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v32, __dst, (char *)&v31, &v29, &v28, v12);
      unsigned __int8 v21 = outlined release of DateComponents((uint64_t)__src);
    }
  }
  result.Swift::Int value = *(Foundation::Date *)&v22;
  result.is_nil = v21;
  return result;
}

void Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)(double *a1@<X0>, unsigned __int8 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v6 = *a1;
  int v7 = *a2;
  double v8 = *(double *)a3;
  char v9 = *(unsigned char *)(a3 + 8);
  double v11 = *v4;
  double v10 = v4[1];
  DateComponents.highestSetUnit.getter((char *)&v27);
  char v12 = LOBYTE(v27);
  if (LOBYTE(v27) < 2u)
  {
    char v12 = 1;
  }
  else if (LOBYTE(v27) == 18 {
         || LOBYTE(v27) != 12
  }
         && (LOBYTE(v25) = LOBYTE(v27),
             Calendar.Component.nextHigherUnit.getter(&v27),
             char v12 = LOBYTE(v27),
             LOBYTE(v27) == 18))
  {
LABEL_10:
    *(void *)a4 = 0;
LABEL_11:
    char v16 = 1;
LABEL_29:
    *(unsigned char *)(a4 + 8) = v16;
    return;
  }
  LOBYTE(v23) = v12;
  double v13 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v13 = v6;
  }
  double v14 = fmax(v13, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v25 = v14;
  (*(void (**)(double *__return_ptr, double *, double *, uint64_t, double))(*(void *)&v10 + 160))(&v27, &v23, &v25, ObjectType, COERCE_DOUBLE(*(void *)&v10));
  if (v29) {
    goto LABEL_10;
  }
  double v17 = v28;
  if (v7) {
    double v17 = -1.0;
  }
  double v18 = v27 + v17;
  if (v9 & 1) != 0 || (v8 < v18 ? (int v19 = 1) : (int v19 = v7), v19 == 1 && (v18 < v8 || ((v7 ^ 1))))
  {
LABEL_28:
    char v16 = 0;
    *(double *)a4 = v18;
    goto LABEL_29;
  }
  DateComponents.lowestSetUnit.getter((char *)&v27);
  char v21 = LOBYTE(v27);
  if (LOBYTE(v27) != 18)
  {
    double v27 = v11;
    double v28 = v10;
    char v24 = v21;
    if (v7) {
      Swift::Int v22 = -1;
    }
    else {
      Swift::Int v22 = 1;
    }
    double v23 = v8;
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v24, v22, v20, (Swift::Bool)&v23);
    if (v26)
    {
      *(double *)a4 = v25;
      goto LABEL_11;
    }
    double v18 = v25;
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)@<X0>(double *a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, double *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  void (*v36)(void *__return_ptr, void, void, void, void);
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  double v52;
  unsigned __int8 v53;
  long long v54[18];
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  unsigned char __dst[282];
  unsigned char __src[296];

  double v16 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  int v17 = *a3;
  unsigned __int8 v18 = *a4;
  unsigned int v19 = *a5;
  double v20 = *a6;
  double v21 = *(double *)a7;
  char v22 = *(unsigned char *)(a7 + 8);
  double v24 = *v8;
  uint64_t v23 = *((void *)v8 + 1);
  unint64_t v59 = 1;
  int64_t v58 = 0;
  unint64_t v57 = 0;
  *(double *)int64_t v54 = v24;
  *((void *)&v54[0] + 1) = v23;
  uint64_t v43 = v20;
  LOBYTE(v55) = v19;
  Calendar._adjustedComponents(_:date:direction:)(a2, &v43, (unsigned __int8 *)&v55, (uint64_t)__src);
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  unint64_t v47 = *(void *)&v20;
  memcpy(v54, __src, 0x11AuLL);
  LOBYTE(v52) = v19;
  LOBYTE(v51) = v17;
  unint64_t v53 = v18;
  Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)&v47, v54, (unsigned __int8 *)&v52, (unsigned __int8 *)&v51, &v53, (double *)&v55);
  if (v9) {
    return outlined release of DateComponents((uint64_t)__src);
  }
  if (v56) {
    goto LABEL_4;
  }
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  unint64_t v47 = *(void *)&v16;
  uint64_t v51 = v55;
  uint64_t v52 = v20;
  memcpy(v54, __src, 0x11AuLL);
  unint64_t v53 = v19;
  uint64_t v50 = v17;
  uint64_t v49 = v18;
  Calendar._adjustedDateForMismatches(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isForwardDST:isExactMatch:isLeapDay:)(a2, (double *)&v47, &v52, (double *)&v51, v54, (char *)&v53, &v50, &v49, (uint64_t)&v55, &v57, &v59, &v58);
  double v27 = *(double *)&v55;
  if (v56)
  {
    uint64_t v43 = v24;
    uint64_t v44 = v23;
    uint64_t v52 = v20;
    memcpy(v54, a2, 0x11AuLL);
    LOBYTE(v51) = v19;
    unint64_t v47 = v55;
    int64_t v48 = 1;
    Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)(&v52, (unsigned __int8 *)&v51, (uint64_t)&v47, (uint64_t)&v55);
    uint64_t result = outlined release of DateComponents((uint64_t)__src);
    if (!v56) {
      double v20 = *(double *)&v55;
    }
    goto LABEL_5;
  }
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  unint64_t v47 = v55;
  memcpy(v54, a2, 0x11AuLL);
  BOOL v29 = Calendar.date(_:containsMatchingComponents:)(&v55, (double *)&v47, (uint64_t *)v54);
  unint64_t v30 = v55;
  if (v29 && (v59 & 1) == 0) {
    unint64_t v59 = 1;
  }
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  uint64_t v52 = v20;
  memcpy(v54, __dst, 0x11AuLL);
  LOBYTE(v51) = v19;
  unint64_t v47 = *(void *)&v27;
  int64_t v48 = 0;
  Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)(&v52, (unsigned __int8 *)&v51, (uint64_t)&v47, (uint64_t)&v55);
  if (!v56) {
    double v20 = *(double *)&v55;
  }
  if (!(v29 | (v30 >> 13) & 1) && (v30 & 0x200) == 0) {
    unint64_t v59 = 0;
  }
  __int16 v31 = v30;
  if ((v22 & 1) == 0)
  {
    if (v21 >= v27) {
      goto LABEL_21;
    }
LABEL_28:
    uint64_t v32 = -1;
    if ((v19 & 1) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  double v21 = v16;
  if (v16 < v27) {
    goto LABEL_28;
  }
LABEL_21:
  if (v21 > v27) {
    uint64_t v32 = v19;
  }
  else {
    uint64_t v32 = 0;
  }
  if ((v19 & 1) != 0 || v21 <= v27)
  {
LABEL_30:
    uint64_t result = outlined release of DateComponents((uint64_t)__src);
    if (v57 == 1)
    {
      uint64_t v28 = a8;
      if (v59)
      {
        if (!v32)
        {
LABEL_33:
          char v26 = 2;
LABEL_51:
          double v27 = 0.0;
          goto LABEL_6;
        }
LABEL_36:
        char v26 = 1;
        goto LABEL_6;
      }
      char v26 = 2;
      if (v17 == 3 || !v32) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v28 = a8;
      if (v59)
      {
        if (!v32) {
          goto LABEL_33;
        }
        goto LABEL_36;
      }
      char v26 = 2;
      if (v17 == 3 || !v58 || !v32) {
        goto LABEL_51;
      }
    }
    char v26 = 0;
    goto LABEL_6;
  }
  uint64_t v32 = 1;
LABEL_29:
  if ((v31 & 0x2000) != 0) {
    goto LABEL_30;
  }
  DateComponents.highestSetUnit.getter((char *)v54);
  if (LOBYTE(v54[0]) == 4)
  {
    uint64_t v55 = 16;
    if (v27 <= 1.59271755e13) {
      double v33 = v27;
    }
    else {
      double v33 = 1.59271755e13;
    }
    double v34 = fmax(v33, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v43 = v34;
    unint64_t v36 = *(void (**)(void *__return_ptr, void, void, void, void))(v23 + 192);
    v36(v54, &v55, &v43, ObjectType, v23);
    outlined release of DateComponents((uint64_t)v54);
    if (BYTE8(v54[7]))
    {
      uint64_t v37 = 0;
      if ((v19 & 1) == 0)
      {
LABEL_43:
        char v38 = 3600.0;
LABEL_54:
        uint64_t v39 = v38 + v27;
        unint64_t v47 = 16;
        if (v39 <= 1.59271755e13) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = 1.59271755e13;
        }
        uint64_t v52 = fmax(v40, -2.11845067e11);
        v36(&v43, &v47, &v52, ObjectType, v23);
        outlined release of DateComponents((uint64_t)&v43);
        uint64_t result = outlined release of DateComponents((uint64_t)__src);
        if (v46) {
          char v41 = v37 == 0;
        }
        else {
          char v41 = v37 == v45;
        }
        if (v41) {
          double v20 = v39;
        }
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v37 = *(void *)&v54[7];
      if ((v19 & 1) == 0) {
        goto LABEL_43;
      }
    }
    char v38 = -3600.0;
    goto LABEL_54;
  }
LABEL_4:
  uint64_t result = outlined release of DateComponents((uint64_t)__src);
LABEL_5:
  char v26 = 2;
  double v27 = 0.0;
  uint64_t v28 = a8;
LABEL_6:
  *(double *)uint64_t v28 = v27;
  *(unsigned char *)(v28 + 8) = v26;
  *(double *)(v28 + 16) = v20;
  return result;
}

uint64_t Calendar._adjustedComponents(_:date:direction:)@<X0>(void *__src@<X0>, double *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v15)(void *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t *__return_ptr, void *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  uint64_t ObjectType;
  void (*v32)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t);
  Foundation::Date v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  uint64_t *v39;
  long long v40;
  long long v41;
  uint64_t v42;
  char v43;
  long long v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void v76[36];
  uint64_t v77;
  char v78;
  uint64_t v79;
  _OWORD __srca[18];
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  void v92[7];
  char v93;
  uint64_t v94;
  char v95;
  _OWORD __dst[19];

  memcpy(__dst, __src, 0x11AuLL);
  double v9 = *a2;
  int v10 = *a3;
  uint64_t v11 = *v4;
  uint64_t v12 = v4[1];
  DateComponents.highestSetUnit.getter((char *)v92);
  if (LOBYTE(v92[0]) == 3)
  {
    uint64_t v75 = *(void *)&__dst[5];
    uint64_t v28 = BYTE8(__dst[5]);
    if (v9 <= 1.59271755e13) {
      BOOL v29 = v9;
    }
    else {
      BOOL v29 = 1.59271755e13;
    }
    unint64_t v30 = fmax(v29, -2.11845067e11);
    if (v10)
    {
      uint64_t v77 = 8;
      uint64_t ObjectType = swift_getObjectType();
      *(double *)__srca = v30;
      uint64_t v32 = *(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v12 + 192);
      outlined retain of DateComponents((uint64_t)__dst);
      v32(v92, &v77, (uint64_t *)__srca, ObjectType, v12);
      outlined release of DateComponents((uint64_t)v92);
      if ((v28 & 1) != 0 || (!v95 ? (double v34 = v94) : (double v34 = 0), v75 >= v34))
      {
        *(void *)&__srca[0] = v11;
        *((void *)&__srca[0] + 1) = v12;
        uint64_t v91 = 2;
        uint64_t v79 = *(void *)&v9;
        *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v91, -1, v33, (Swift::Bool)&v79);
        if (v76[1])
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        char v38 = *(double *)v76;
        v76[0] = 4;
        if (v38 > 1.59271755e13) {
          char v38 = 1.59271755e13;
        }
        uint64_t v79 = fmax(v38, -2.11845067e11);
      }
      else
      {
        v76[0] = 4;
        uint64_t v79 = *(void *)&v30;
      }
      uint64_t v39 = v76;
      goto LABEL_48;
    }
    v76[0] = 8;
    uint64_t ObjectType = swift_getObjectType();
    *(double *)__srca = v30;
    uint64_t v32 = *(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v12 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v32(v92, v76, (uint64_t *)__srca, ObjectType, v12);
    uint64_t result = outlined release of DateComponents((uint64_t)v92);
    if (v95) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = v94;
    }
    unint64_t v36 = *(void *)&__dst[4];
    uint64_t v37 = BYTE8(__dst[4]);
    if (v28)
    {
      if (v35 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_52;
      }
    }
    else if (v35 >= v75)
    {
LABEL_52:
      LOBYTE(v92[0]) = BYTE8(__dst[2]);
      LOBYTE(__srca[0]) = BYTE8(__dst[3]);
      LOBYTE(v76[0]) = v37;
      LOBYTE(v77) = v28;
      LOBYTE(v79) = BYTE8(__dst[6]);
      uint64_t v91 = BYTE8(__dst[7]);
      uint64_t v90 = BYTE8(__dst[8]);
      int64_t v89 = BYTE8(__dst[9]);
      unint64_t v88 = BYTE8(__dst[10]);
      uint64_t v87 = BYTE8(__dst[11]);
      uint64_t v86 = BYTE8(__dst[12]);
      uint64_t v85 = BYTE8(__dst[13]);
      uint64_t v84 = BYTE8(__dst[14]);
      int64_t v83 = BYTE8(__dst[15]);
      unint64_t v82 = BYTE8(__dst[16]);
      int64_t v81 = BYTE8(__dst[17]);
      uint64_t v40 = __dst[0];
      char v41 = __dst[1];
      *(void *)(a4 + 32) = *(void *)&__dst[2];
      *(unsigned char *)(a4 + 40) = v92[0];
      *(void *)(a4 + 48) = *(void *)&__dst[3];
      *(unsigned char *)(a4 + 56) = __srca[0];
      *(void *)(a4 + 64) = v36;
      *(unsigned char *)(a4 + 72) = v76[0];
      *(void *)(a4 + 80) = v75;
      *(unsigned char *)(a4 + 88) = v77;
      *(void *)(a4 + 96) = *(void *)&__dst[6];
      *(unsigned char *)(a4 + 104) = v79;
      *(void *)(a4 + 112) = *(void *)&__dst[7];
      *(unsigned char *)(a4 + 120) = v91;
      *(void *)(a4 + 128) = *(void *)&__dst[8];
      *(unsigned char *)(a4 + 136) = v90;
      *(void *)(a4 + 144) = *(void *)&__dst[9];
      *(unsigned char *)(a4 + 152) = v89;
      *(void *)(a4 + 160) = *(void *)&__dst[10];
      *(unsigned char *)(a4 + 168) = v88;
      *(void *)(a4 + 176) = *(void *)&__dst[11];
      *(unsigned char *)(a4 + 184) = v87;
      *(void *)(a4 + 192) = *(void *)&__dst[12];
      *(unsigned char *)(a4 + 200) = v86;
      *(void *)(a4 + 208) = *(void *)&__dst[13];
      *(unsigned char *)(a4 + 216) = v85;
      *(void *)(a4 + 224) = *(void *)&__dst[14];
      *(unsigned char *)(a4 + 232) = v84;
      *(void *)(a4 + 240) = *(void *)&__dst[15];
      *(unsigned char *)(a4 + 248) = v83;
      *(void *)(a4 + 256) = *(void *)&__dst[16];
      *(unsigned char *)(a4 + 264) = v82;
      *(void *)(a4 + 272) = *(void *)&__dst[17];
      *(unsigned char *)(a4 + 280) = v81;
      *(unsigned char *)(a4 + 281) = BYTE9(__dst[17]);
      *(_OWORD *)a4 = v40;
      *(_OWORD *)(a4 + 16) = v41;
      return result;
    }
    uint64_t v77 = 4;
    uint64_t v79 = *(void *)&v30;
    uint64_t v39 = &v77;
LABEL_48:
    v32(__srca, v39, &v79, ObjectType, v12);
    uint64_t result = outlined release of DateComponents((uint64_t)__srca);
    unint64_t v36 = *(void *)&__srca[4];
    if (BYTE8(__srca[4])) {
      unint64_t v36 = 0;
    }
    uint64_t v37 = v36 == 0x7FFFFFFFFFFFFFFFLL;
    if (v36 == 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v36 = 0;
    }
    goto LABEL_52;
  }
  if (LOBYTE(v92[0]) != 2)
  {
    memcpy((void *)a4, __src, 0x11AuLL);
    return outlined retain of DateComponents((uint64_t)__dst);
  }
  uint64_t v43 = v10;
  uint64_t v79 = 2;
  double v13 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v13 = v9;
  }
  double v14 = fmax(v13, -2.11845067e11);
  uint64_t v73 = swift_getObjectType();
  *(double *)__srca = v14;
  char v15 = *(void (**)(void *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t))(v12 + 192);
  outlined retain of DateComponents((uint64_t)__dst);
  v15(v92, &v79, __srca, v73, v12);
  outlined release of DateComponents((uint64_t)v92);
  if (v93) {
    double v16 = 0;
  }
  else {
    double v16 = v92[6];
  }
  uint64_t v42 = v16;
  if (v16 == 0x7FFFFFFFFFFFFFFFLL) {
    int v17 = 0;
  }
  else {
    int v17 = v16;
  }
  int64_t v74 = *(void *)&__dst[13];
  unsigned __int8 v18 = BYTE8(__dst[7]);
  unsigned int v19 = v12;
  uint64_t v64 = BYTE8(__dst[16]);
  unint64_t v65 = BYTE8(__dst[17]);
  BYTE8(__srca[16]) = BYTE8(__dst[16]);
  WORD4(__srca[17]) = WORD4(__dst[17]);
  uint64_t v44 = __dst[0];
  __srca[0] = __dst[0];
  unint64_t v53 = *((void *)&__dst[1] + 1);
  int64_t v54 = *(void *)&__dst[1];
  __srca[1] = __dst[1];
  uint64_t v56 = *(void *)&__dst[2];
  *(void *)&__srca[2] = *(void *)&__dst[2];
  char v45 = BYTE8(__dst[2]);
  BYTE8(__srca[2]) = BYTE8(__dst[2]);
  int64_t v72 = v17;
  *(void *)&__srca[3] = v17;
  double v20 = v16 == 0x7FFFFFFFFFFFFFFFLL;
  BYTE8(__srca[3]) = v16 == 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v60 = *(void *)&__dst[4];
  *(void *)&__srca[4] = *(void *)&__dst[4];
  int64_t v48 = BYTE8(__dst[4]);
  BYTE8(__srca[4]) = BYTE8(__dst[4]);
  uint64_t v62 = *(void *)&__dst[5];
  uint64_t v63 = *(void *)&__dst[6];
  *(void *)&__srca[5] = *(void *)&__dst[5];
  uint64_t v50 = BYTE8(__dst[5]);
  uint64_t v51 = BYTE8(__dst[6]);
  BYTE8(__srca[5]) = BYTE8(__dst[5]);
  *(void *)&__srca[6] = *(void *)&__dst[6];
  BYTE8(__srca[6]) = BYTE8(__dst[6]);
  uint64_t v66 = *(void *)&__dst[7];
  uint64_t v67 = *(void *)&__dst[8];
  *(void *)&__srca[7] = *(void *)&__dst[7];
  uint64_t v52 = BYTE8(__dst[8]);
  BYTE8(__srca[7]) = BYTE8(__dst[7]);
  *(void *)&__srca[8] = *(void *)&__dst[8];
  BYTE8(__srca[8]) = BYTE8(__dst[8]);
  long long v68 = *(void *)&__dst[9];
  uint64_t v69 = *(void *)&__dst[10];
  *(void *)&__srca[9] = *(void *)&__dst[9];
  uint64_t v55 = BYTE8(__dst[9]);
  BYTE8(__srca[9]) = BYTE8(__dst[9]);
  *(void *)&__srca[10] = *(void *)&__dst[10];
  unint64_t v57 = BYTE8(__dst[10]);
  int64_t v58 = BYTE8(__dst[11]);
  BYTE8(__srca[10]) = BYTE8(__dst[10]);
  int64_t v70 = *(void *)&__dst[11];
  unint64_t v71 = *(void *)&__dst[12];
  *(void *)&__srca[11] = *(void *)&__dst[11];
  BYTE8(__srca[11]) = BYTE8(__dst[11]);
  *(void *)&__srca[12] = *(void *)&__dst[12];
  unint64_t v59 = BYTE8(__dst[12]);
  BYTE8(__srca[12]) = BYTE8(__dst[12]);
  *(void *)&__srca[13] = *(void *)&__dst[13];
  uint64_t v61 = BYTE8(__dst[13]);
  BYTE8(__srca[13]) = BYTE8(__dst[13]);
  int64_t v46 = *(void *)&__dst[14];
  *(void *)&__srca[14] = *(void *)&__dst[14];
  double v21 = BYTE8(__dst[14]);
  BYTE8(__srca[14]) = BYTE8(__dst[14]);
  unint64_t v47 = *(void *)&__dst[15];
  *(void *)&__srca[15] = *(void *)&__dst[15];
  char v22 = BYTE8(__dst[15]);
  BYTE8(__srca[15]) = BYTE8(__dst[15]);
  uint64_t v23 = *(void *)&__dst[16];
  *(void *)&__srca[16] = *(void *)&__dst[16];
  uint64_t v49 = *(void *)&__dst[17];
  *(void *)&__srca[17] = *(void *)&__dst[17];
  double v24 = BYTE9(__dst[17]);
  memcpy(v76, __srca, 0x11AuLL);
  double v25 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(v19 + 176);
  outlined retain of DateComponents((uint64_t)__srca);
  v25(&v77, v76, v73, v19);
  uint64_t result = outlined release of DateComponents((uint64_t)__srca);
  if (v78)
  {
    double v27 = v72;
LABEL_13:
    LOBYTE(v76[0]) = v45;
    LOBYTE(v77) = v20;
    uint64_t v91 = v48;
    uint64_t v90 = v50;
    int64_t v89 = v51;
    unint64_t v88 = v18;
    uint64_t v87 = v52;
    uint64_t v86 = v55;
    uint64_t v85 = v57;
    uint64_t v84 = v58;
    int64_t v83 = v59;
    unint64_t v82 = v61;
    int64_t v81 = v21;
    *(_OWORD *)a4 = v44;
    *(void *)(a4 + 16) = v54;
    *(void *)(a4 + 24) = v53;
    *(void *)(a4 + 32) = v56;
    *(unsigned char *)(a4 + 40) = v76[0];
    *(void *)(a4 + 48) = v27;
    *(unsigned char *)(a4 + 56) = v77;
    *(void *)(a4 + 64) = v60;
    *(unsigned char *)(a4 + 72) = v91;
    *(void *)(a4 + 80) = v62;
    *(unsigned char *)(a4 + 88) = v90;
    *(void *)(a4 + 96) = v63;
    *(unsigned char *)(a4 + 104) = v89;
    *(void *)(a4 + 112) = v66;
    *(unsigned char *)(a4 + 120) = v88;
    *(void *)(a4 + 128) = v67;
    *(unsigned char *)(a4 + 136) = v87;
    *(void *)(a4 + 144) = v68;
    *(unsigned char *)(a4 + 152) = v86;
    *(void *)(a4 + 160) = v69;
    *(unsigned char *)(a4 + 168) = v85;
    *(void *)(a4 + 176) = v70;
    *(unsigned char *)(a4 + 184) = v84;
    *(void *)(a4 + 192) = v71;
    *(unsigned char *)(a4 + 200) = v83;
    *(void *)(a4 + 208) = v74;
    *(unsigned char *)(a4 + 216) = v82;
    *(void *)(a4 + 224) = v46;
    *(unsigned char *)(a4 + 232) = v81;
    *(void *)(a4 + 240) = v47;
    *(unsigned char *)(a4 + 248) = v22;
    *(void *)(a4 + 256) = v23;
    *(unsigned char *)(a4 + 264) = v64;
    *(void *)(a4 + 272) = v49;
    *(unsigned char *)(a4 + 280) = v65;
    *(unsigned char *)(a4 + 281) = v24;
    return result;
  }
  if ((v43 & 1) == 0)
  {
    double v27 = v72;
    if (*(double *)&v77 >= v9) {
      goto LABEL_13;
    }
    if (v42 != 0x7FFFFFFFFFFFFFFFLL)
    {
      double v20 = v42 == 0x7FFFFFFFFFFFFFFELL;
      if (v42 == 0x7FFFFFFFFFFFFFFELL) {
        double v27 = 0;
      }
      else {
        double v27 = v42 + 1;
      }
      goto LABEL_13;
    }
    goto LABEL_56;
  }
  double v27 = v72;
  if (v9 >= *(double *)&v77) {
    goto LABEL_13;
  }
  if (v42 != 0x7FFFFFFFFFFFFFFFLL)
  {
    double v27 = v42 - 1;
    if (!__OFSUB__(v42, 1))
    {
      double v20 = 0;
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_54;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

void DateComponents.highestSetUnit.getter(char *a1@<X8>)
{
  if (v1[40] == 1)
  {
    int v2 = v1[248];
    if (v1[104]) {
      char v3 = 9;
    }
    else {
      char v3 = 17;
    }
    if (!v1[56]) {
      char v3 = 1;
    }
    unsigned __int8 v4 = v1[56] & v1[104] & v1[216] & v1[72] & v1[88];
    if (v1[72]) {
      char v5 = 3;
    }
    else {
      char v5 = 2;
    }
    if ((v1[56] & v1[104]) & v1[216]) {
      char v6 = v5;
    }
    else {
      char v6 = v3;
    }
    unsigned __int8 v7 = v4 & v1[120] & v1[136];
    if (v1[120]) {
      char v8 = 5;
    }
    else {
      char v8 = 4;
    }
    if ((v1[56] & v1[104] & v1[216]) & (v1[72] & v1[88])) {
      char v6 = v8;
    }
    if (v1[152]) {
      char v9 = 7;
    }
    else {
      char v9 = 6;
    }
    if (v4 & (v1[120] & v1[136])) {
      char v6 = v9;
    }
    int v10 = (v7 & v1[152] & v1[184] & v1[200]);
    if (v1[200]) {
      char v11 = 10;
    }
    else {
      char v11 = 8;
    }
    if (v7 & (v1[152] & v1[184])) {
      char v6 = v11;
    }
    int v12 = v10 & v2;
    if ((v10 & v2) != 0) {
      char v13 = 11;
    }
    else {
      char v13 = v6;
    }
    if (v12) {
      BOOL v14 = v1[264] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      if (v1[168]) {
        char v13 = 18;
      }
      else {
        char v13 = 13;
      }
      if (!v1[280]) {
        char v13 = 12;
      }
    }
    *a1 = v13;
  }
  else
  {
    *a1 = 0;
  }
}

double *Calendar.dateAfterMatchingMinute(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v11)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v12)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  void __dst[36];
  uint64_t v20;
  double __src[36];
  void v22[17];
  char v23;
  uint64_t v24;

  if (*(unsigned char *)(a2 + 136))
  {
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 1;
    return result;
  }
  double v5 = *result;
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(v3 + 8);
  double v24 = 32;
  if (v5 <= 1.59271755e13) {
    double v8 = v5;
  }
  else {
    double v8 = 1.59271755e13;
  }
  double v9 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v9;
  char v11 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v7 + 192);
  v11((double *)v22, &v24, __src, ObjectType, v7);
  outlined release of DateComponents((uint64_t)v22);
  if ((v23 & 1) == 0)
  {
    if (v6 != v22[16]) {
      goto LABEL_8;
    }
LABEL_23:
    LOBYTE(v20) = 5;
    *(double *)__dst = v9;
    uint64_t result = (double *)(*(void *(**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v7 + 160))(__src, &v20, __dst, ObjectType, v7);
    if ((LOBYTE(__src[2]) & 1) == 0) {
      double v5 = __src[0];
    }
LABEL_25:
    *(double *)a3 = v5;
    *(unsigned char *)(a3 + 8) = 0;
    return result;
  }
  if (!v6) {
    goto LABEL_23;
  }
LABEL_8:
  int v12 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v7 + 160);
  LOBYTE(v20) = 5;
  *(double *)__dst = v9;
  v12(__src, &v20, __dst, ObjectType, v7);
  if ((LOBYTE(__src[2]) & 1) == 0)
  {
    while (1)
    {
      char v13 = __src[1] + __src[0];
      double v20 = 32;
      if (__src[1] + __src[0] <= 1.59271755e13) {
        char v15 = __src[1] + __src[0];
      }
      else {
        char v15 = 1.59271755e13;
      }
      double v16 = fmax(v15, -2.11845067e11);
      unsigned __int8 v18 = v16;
      v11(__src, &v20, &v18, ObjectType, v7);
      memcpy(__dst, __src, 0x11AuLL);
      uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
      if (LOBYTE(__dst[17]) == 1)
      {
        if (v13 == v5) {
          goto LABEL_26;
        }
        if (!v6)
        {
LABEL_21:
          double v5 = v13;
          goto LABEL_25;
        }
      }
      else
      {
        if (v13 == v5)
        {
LABEL_26:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)int v17 = v13;
          *(double *)(v17 + 8) = v5;
          *(unsigned char *)(v17 + 16) = 1;
          return (double *)swift_willThrow();
        }
        if (v6 == __dst[16]) {
          goto LABEL_21;
        }
      }
      LOBYTE(v20) = 5;
      *(double *)__dst = v16;
      v12(__src, &v20, __dst, ObjectType, v7);
      double v5 = v13;
      if (LOBYTE(__src[2]) == 1) {
        goto LABEL_10;
      }
    }
  }
  char v13 = v5;
LABEL_10:
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(void *)BOOL v14 = 5;
  *(double *)(v14 + 8) = v13;
  *(unsigned char *)(v14 + 16) = 0;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingHour(startingAt:originalStartDate:components:direction:findLastMatch:isStrictMatching:matchingPolicy:)@<X0>(double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 a5@<W4>, char a6@<W5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X8>)
{
  double *(*v22)(double *__return_ptr, double *, void *, uint64_t, void *);
  double v23;
  double v24;
  double *(*v25)(double *__return_ptr, double *, void *, uint64_t, void *);
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  Foundation::Date v33;
  uint64_t v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  double v40;
  Foundation::Date v41;
  double v42;
  double v43;
  double v44;
  void *(*v45)(double *__return_ptr, double *, void *, void, uint64_t, void *);
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v54;
  double *(*v55)(double *__return_ptr, double *, void *, uint64_t, void *);
  void (*v56)(double *__return_ptr, uint64_t *, double *, uint64_t, void *);
  uint64_t v57;
  double v58;
  double v59;
  void *v60;
  double v61;
  char v62;
  double v63[36];
  uint64_t v64;
  void v65[36];
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  void v75[36];
  uint64_t v76;
  double v77[36];
  void v78[36];
  uint64_t v79;
  double v80[37];
  void __dst[36];
  uint64_t v82;
  void __src[38];

  uint64_t v9 = a8;
  if (*(unsigned char *)(a3 + 120))
  {
    *(void *)a8 = 0;
    *(unsigned char *)(a8 + 8) = 1;
    return result;
  }
  double v11 = *result;
  double v12 = *a2;
  uint64_t v13 = *(void *)(a3 + 112);
  uint64_t v52 = *a4;
  int v14 = *a7;
  double v16 = *v8;
  char v15 = (void *)*((void *)v8 + 1);
  unint64_t v82 = 16;
  if (v11 <= 1.59271755e13) {
    double v17 = v11;
  }
  else {
    double v17 = 1.59271755e13;
  }
  double v18 = fmax(v17, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v80[0] = v18;
  uint64_t v56 = (void (*)(double *__return_ptr, uint64_t *, double *, uint64_t, void *))v15[24];
  v56((double *)__src, &v82, v80, ObjectType, v15);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  unint64_t v57 = v13;
  if ((__dst[15] & 1) == 0)
  {
    uint64_t v21 = v13;
    uint64_t v20 = __dst[14];
    if (v21 || (a6 & 1) != 0)
    {
      if (v57 != __dst[14]) {
        goto LABEL_34;
      }
LABEL_14:
      if (a5)
      {
        int64_t v54 = 0;
        char v22 = (double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v15[20];
        goto LABEL_85;
      }
      goto LABEL_103;
    }
LABEL_17:
    LOBYTE(v77[0]) = 3;
    *(double *)unint64_t v78 = v18;
    char v22 = (double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v15[20];
    v22(v80, v77, v78, ObjectType, v15);
    if ((LOBYTE(v80[2]) & 1) != 0
      || ((uint64_t v23 = v80[0], *(void *)&v77[0] = 16, v80[0] <= 1.59271755e13) ? (v24 = v80[0]) : (v24 = 1.59271755e13),
          (v75[0] = fmax(v24, -2.11845067e11),
           v56(v80, (uint64_t *)v77, (double *)v75, ObjectType, v15),
           memcpy(v78, v80, 0x11AuLL),
           uint64_t result = (double *)outlined release of DateComponents((uint64_t)v78),
           (v78[15] & 1) != 0)
       || !v78[14]))
    {
      if (v57 != v20) {
        goto LABEL_34;
      }
      if ((a5 & 1) == 0) {
        goto LABEL_103;
      }
    }
    else
    {
      if (v20 == v78[14])
      {
        if (!v14) {
          double v11 = v23;
        }
        if (a5) {
          goto LABEL_84;
        }
        goto LABEL_108;
      }
      if (v57 != v20) {
        goto LABEL_34;
      }
      if ((a5 & 1) == 0) {
        goto LABEL_103;
      }
    }
    int64_t v54 = 0;
    goto LABEL_85;
  }
  if (!v13)
  {
    if (a6) {
      goto LABEL_14;
    }
    uint64_t v20 = 0;
    goto LABEL_17;
  }
  uint64_t v20 = 0;
LABEL_34:
  double v25 = (double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v15[20];
  LOBYTE(v77[0]) = 4;
  *(double *)unint64_t v78 = v18;
  v25(v80, v77, v78, ObjectType, v15);
  if (LOBYTE(v80[2]))
  {
    char v26 = v11;
LABEL_66:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)uint64_t v37 = 4;
    *(double *)(v37 + 8) = v26;
    *(unsigned char *)(v37 + 16) = 0;
    return (double *)swift_willThrow();
  }
  uint64_t v51 = v9;
  uint64_t v55 = v25;
  while (1)
  {
    double v27 = v80[1];
    char v26 = v80[0];
    uint64_t v28 = v80[1] + v80[0];
    uint64_t v79 = 16;
    if (v80[1] + v80[0] <= 1.59271755e13) {
      BOOL v29 = v80[1] + v80[0];
    }
    else {
      BOOL v29 = 1.59271755e13;
    }
    v77[0] = fmax(v29, -2.11845067e11);
    v56(v80, &v79, v77, ObjectType, v15);
    memcpy(v78, v80, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v78);
    if (LOBYTE(v78[15])) {
      unint64_t v30 = 0;
    }
    else {
      unint64_t v30 = v78[14];
    }
    __int16 v31 = v26 + v27 + v27;
    int64_t v76 = 16;
    if (v31 <= 1.59271755e13) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 1.59271755e13;
    }
    v65[0] = fmax(v32, -2.11845067e11);
    v56(v77, &v76, (double *)v65, ObjectType, v15);
    memcpy(v75, v77, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v75);
    double v34 = v75[14];
    if (LOBYTE(v75[15])) {
      double v34 = 0;
    }
    if (__OFSUB__(v30, v20))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    if (v30 - v20 == 2 || v20 == 23 && v30 == 1)
    {
      uint64_t v35 = __OFSUB__(v30--, 1);
      char v22 = v55;
      if (v35) {
        goto LABEL_114;
      }
    }
    else
    {
      char v26 = ((v34 == v30) & a5) != 0 ? v31 : v28;
      char v22 = v55;
    }
    if (v26 == v11 && v20 == v30)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)char v38 = v26;
      *(double *)(v38 + 8) = v11;
      *(unsigned char *)(v38 + 16) = 1;
      return (double *)swift_willThrow();
    }
    if (v57 == v30) {
      break;
    }
    LOBYTE(v77[0]) = 4;
    if (v26 <= 1.59271755e13) {
      unint64_t v36 = v26;
    }
    else {
      unint64_t v36 = 1.59271755e13;
    }
    v78[0] = fmax(v36, -2.11845067e11);
    v22(v80, v77, v78, ObjectType, v15);
    double v11 = v26;
    uint64_t v20 = v30;
    if (LOBYTE(v80[2])) {
      goto LABEL_66;
    }
  }
  uint64_t v39 = v52;
  if (v12 >= v26) {
    uint64_t v39 = 0;
  }
  if (v39 != 1)
  {
    double v11 = v26;
    uint64_t v9 = v51;
    goto LABEL_83;
  }
  *(double *)unint64_t v65 = v16;
  v65[1] = v15;
  LOBYTE(v61) = 3;
  unint64_t v59 = v26;
  *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v61, -1, v33, (Swift::Bool)&v59);
  uint64_t v9 = v51;
  if (LOBYTE(v63[1])) {
    goto LABEL_118;
  }
  double v11 = v63[0];
  uint64_t v64 = 16;
  if (v63[0] <= 1.59271755e13) {
    uint64_t v40 = v63[0];
  }
  else {
    uint64_t v40 = 1.59271755e13;
  }
  unint64_t v59 = fmax(v40, -2.11845067e11);
  v56((double *)v65, &v64, &v59, ObjectType, v15);
  memcpy(v63, v65, 0x11AuLL);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v63);
  uint64_t v42 = v63[14];
  if (LOBYTE(v63[15])) {
    uint64_t v42 = 0.0;
  }
  if (__OFSUB__(*(void *)&v42, v57)) {
    goto LABEL_115;
  }
  if (*(void *)&v42 - v57 == 1)
  {
    unint64_t v59 = v16;
    unint64_t v60 = v15;
    int64_t v74 = 4;
    int64_t v58 = v11;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v74, -1, v41, (Swift::Bool)&v58);
    if (v62) {
      goto LABEL_119;
    }
    double v11 = v61;
    goto LABEL_83;
  }
  uint64_t v35 = __OFSUB__(v57, *(void *)&v42);
  uint64_t v50 = v57 - *(void *)&v42;
  if (v35)
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  if (v50 == 1)
  {
    unint64_t v59 = v16;
    unint64_t v60 = v15;
    int64_t v74 = 4;
    int64_t v58 = v11;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v74, 1, v41, (Swift::Bool)&v58);
    if (v62) {
      goto LABEL_120;
    }
    double v11 = v61;
  }
LABEL_83:
  if ((a5 & 1) == 0) {
    goto LABEL_108;
  }
LABEL_84:
  int64_t v54 = 1;
LABEL_85:
  LOBYTE(v77[0]) = 4;
  if (v11 <= 1.59271755e13) {
    uint64_t v43 = v11;
  }
  else {
    uint64_t v43 = 1.59271755e13;
  }
  v78[0] = fmax(v43, -2.11845067e11);
  uint64_t result = v22(v80, v77, v78, ObjectType, v15);
  if (LOBYTE(v80[2]))
  {
LABEL_102:
    if (v54)
    {
LABEL_108:
      *(double *)uint64_t v9 = v11;
      *(unsigned char *)(v9 + 8) = 0;
      return result;
    }
LABEL_103:
    LOBYTE(v77[0]) = 4;
    if (v11 <= 1.59271755e13) {
      uint64_t v49 = v11;
    }
    else {
      uint64_t v49 = 1.59271755e13;
    }
    v78[0] = fmax(v49, -2.11845067e11);
    uint64_t result = (double *)((double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v15[20])(v80, v77, v78, ObjectType, v15);
    if ((LOBYTE(v80[2]) & 1) == 0) {
      double v11 = v80[0];
    }
    goto LABEL_108;
  }
  uint64_t v44 = v80[0];
  char v45 = (void *(*)(double *__return_ptr, double *, void *, void, uint64_t, void *))v15[25];
  if (v52) {
    int64_t v46 = -1;
  }
  else {
    int64_t v46 = 1;
  }
  while (1)
  {
    double v11 = v44;
    LOBYTE(v63[0]) = 1;
    LOBYTE(v59) = 1;
    LOBYTE(v61) = 1;
    LOBYTE(v79) = 1;
    LOBYTE(v76) = 1;
    LOBYTE(v64) = 0;
    LOBYTE(v58) = 1;
    int64_t v74 = 1;
    uint64_t v73 = 1;
    int64_t v72 = 1;
    unint64_t v71 = 1;
    int64_t v70 = 1;
    uint64_t v69 = 1;
    long long v68 = 1;
    uint64_t v67 = 1;
    uint64_t v66 = 1;
    unint64_t v47 = v44 <= 1.59271755e13 ? v44 : 1.59271755e13;
    memset(v80, 0, 40);
    LOBYTE(v80[5]) = LOBYTE(v63[0]);
    v80[6] = 0.0;
    LOBYTE(v80[7]) = LOBYTE(v59);
    v80[8] = 0.0;
    LOBYTE(v80[9]) = LOBYTE(v61);
    v80[10] = 0.0;
    LOBYTE(v80[11]) = v79;
    v80[12] = 0.0;
    LOBYTE(v80[13]) = v76;
    *(void *)&v80[14] = v46;
    LOBYTE(v80[15]) = v64;
    v80[16] = 0.0;
    LOBYTE(v80[17]) = LOBYTE(v58);
    v80[18] = 0.0;
    LOBYTE(v80[19]) = v74;
    v80[20] = 0.0;
    LOBYTE(v80[21]) = v73;
    v80[22] = 0.0;
    LOBYTE(v80[23]) = v72;
    v80[24] = 0.0;
    LOBYTE(v80[25]) = v71;
    v80[26] = 0.0;
    LOBYTE(v80[27]) = v70;
    v80[28] = 0.0;
    LOBYTE(v80[29]) = v69;
    v80[30] = 0.0;
    LOBYTE(v80[31]) = v68;
    v80[32] = 0.0;
    LOBYTE(v80[33]) = v67;
    v80[34] = 0.0;
    LOBYTE(v80[35]) = v66;
    BYTE1(v80[35]) = 2;
    v78[0] = fmax(v47, -2.11845067e11);
    uint64_t result = (double *)v45(v77, v80, v78, 0, ObjectType, v15);
    if (LOBYTE(v77[1])) {
      break;
    }
    uint64_t v44 = v77[0];
    v75[0] = 16;
    if (v77[0] <= 1.59271755e13) {
      int64_t v48 = v77[0];
    }
    else {
      int64_t v48 = 1.59271755e13;
    }
    v65[0] = fmax(v48, -2.11845067e11);
    v56(v80, v75, (double *)v65, ObjectType, v15);
    memcpy(v78, v80, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v78);
    if (LOBYTE(v78[15]) == 1)
    {
      if (v57) {
        goto LABEL_102;
      }
    }
    else if (v78[14] != v57)
    {
      goto LABEL_102;
    }
  }
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
  return result;
}

Foundation::Date __swiftcall _NSSwiftCalendar.startOfDay(for:)(Foundation::Date a1)
{
  int v2 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v3 = v2 + 4;
  unsigned __int8 v4 = v2 + 8;
  os_unfair_lock_lock(v2 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v3, fora);
  os_unfair_lock_unlock(v4);
  Calendar.startOfDay(for:)(fora[0]);

  swift_unknownObjectRelease();
  return result;
}

Foundation::Date __swiftcall Calendar.startOfDay(for:)(Foundation::Date a1)
{
  unsigned __int8 v4 = v2;
  double v5 = *v1;
  uint64_t v6 = *(void *)(v3 + 8);
  char v12 = 3;
  double v7 = 1.59271755e13;
  if (v5 <= 1.59271755e13) {
    double v7 = v5;
  }
  double v8 = fmax(v7, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v11 = v8;
  (*(void (**)(Swift::Double *__return_ptr, char *, double *, uint64_t, uint64_t))(v6 + 160))(v13, &v12, &v11, ObjectType, v6);
  if (v14) {
    result._time = v5 + -1.0;
  }
  else {
    result._time = v13[0];
  }
  *unsigned __int8 v4 = result._time;
  return result;
}

Swift::Bool __swiftcall Calendar.isDateInToday(_:)(Foundation::Date a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  long long v7 = *v2;
  uint64_t v6 = v3;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return Calendar.compare(_:to:toGranularity:)(COERCE_FOUNDATION_DATE((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001), COERCE_FOUNDATION_DATE((double)__tp.tv_nsec * 0.000000001), (Foundation::Calendar::Component)&v6) == NSOrderedSame;
}

NSComparisonResult __swiftcall Calendar.compare(_:to:toGranularity:)(Foundation::Date _, Foundation::Date to, Foundation::Calendar::Component toGranularity)
{
  void (*v36)(double *__return_ptr, uint64_t, uint64_t);
  double v37;
  double v38;
  BOOL v39;
  NSComparisonResult v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  int v70;
  NSComparisonResult v71;
  double v72;
  double v73[5];
  char v74;
  double v75;
  char v76;
  double v77;
  char v78;
  double v79;
  char v80;
  double v81;
  char v82;
  double v83;
  char v84;
  double v85;
  char v86;
  double v87;
  char v88;
  double v89;
  char v90;
  double v91;
  char v92;
  double v93;
  char v94;
  double v95;
  char v96;
  double v97;
  char v98;
  double v99;
  char v100;
  double v101;
  char v102;
  char v103;
  uint64_t v104;
  void v105[2];
  double v106;
  double v107;
  char v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  char v139;
  uint64_t v140;
  void v141[3];

  double v6 = *(double *)toGranularity;
  double v7 = *v3;
  uint64_t v8 = -1;
  if (*v3 < *(double *)toGranularity) {
    uint64_t v8 = 1;
  }
  if (v6 == v7) {
    NSComparisonResult v9 = NSOrderedSame;
  }
  else {
    NSComparisonResult v9 = v8;
  }
  if (v6 < -2.11845067e11 || v6 > 1.59271755e13 || v7 < -2.11845067e11 || v7 > 1.59271755e13) {
    return v9;
  }
  int v10 = *v4;
  uint64_t v12 = *v5;
  uint64_t v11 = v5[1];
  NSComparisonResult result = NSOrderedSame;
  char v14 = (char *)&outlined read-only object #0 of Calendar.compare(_:to:toGranularity:);
  switch(*v4)
  {
    case 3:
    case 4:
      LOBYTE(v141[0]) = *v4;
      double v15 = fmax(v6, -2.11845067e11);
      uint64_t ObjectType = swift_getObjectType();
      v73[0] = v15;
      (*(void (**)(double *__return_ptr, void *, double *, uint64_t, uint64_t))(v11 + 160))(&v106, v141, v73, ObjectType, v11);
      if (v108) {
        return v9;
      }
      if (v107 + v106 < v106)
      {
        __break(1u);
        goto LABEL_114;
      }
      if (v7 < v107 + v106) {
        uint64_t v40 = NSOrderedSame;
      }
      else {
        uint64_t v40 = NSOrderedAscending;
      }
      if (v7 >= v106) {
        return v40;
      }
      else {
        return 1;
      }
    case 5:
      double v17 = floor(floor(v6) / 60.0);
      double v18 = floor(floor(v7) / 60.0);
      goto LABEL_97;
    case 6:
      double v19 = floor(v6);
      double v20 = floor(v7);
      NSComparisonResult v21 = NSOrderedAscending;
      if (v20 < v19) {
        NSComparisonResult v21 = NSOrderedDescending;
      }
      if (v19 == v20) {
        return 0;
      }
      else {
        return v21;
      }
    case 7:
    case 0xA:
      char v14 = (char *)&outlined read-only object #2 of Calendar.compare(_:to:toGranularity:);
      goto LABEL_22;
    case 8:
      char v14 = (char *)&outlined read-only object #1 of Calendar.compare(_:to:toGranularity:);
      goto LABEL_22;
    case 0xB:
    case 0xC:
      goto LABEL_22;
    case 0xD:
      uint64_t v37 = trunc(v6);
      char v38 = trunc(v7);
      if (v37 != v38)
      {
        uint64_t v39 = v38 < v37;
LABEL_109:
        if (v39) {
          return 1;
        }
        else {
          return -1;
        }
      }
      double v15 = (v6 - v37) * 1000000000.0;
      double v7 = (v7 - v38) * 1000000000.0;
      if (one-time initialization token for compatibility1 != -1) {
LABEL_114:
      }
        swift_once();
      double v17 = trunc(v15);
      double v18 = trunc(v7);
      if (static Calendar.compatibility1 != 1)
      {
LABEL_97:
        if (v17 == v18) {
          goto LABEL_90;
        }
        uint64_t v39 = v18 < v17;
        goto LABEL_109;
      }
      if (v17 == v18) {
        goto LABEL_90;
      }
      return (unint64_t)(v17 < v18);
    case 0xE:
    case 0xF:
    case 0x10:
      return result;
    default:
      char v14 = (char *)&outlined read-only object #3 of Calendar.compare(_:to:toGranularity:);
LABEL_22:
      unint64_t v71 = v9;
      uint64_t v22 = *((void *)v14 + 2);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
      unint64_t v106 = COERCE_DOUBLE(Set.init(minimumCapacity:)());
      if (v22)
      {
        uint64_t v23 = (unsigned __int8 *)(v14 + 32);
        uint64_t v24 = v22;
        do
        {
          unsigned int v25 = *v23++;
          specialized Set._Variant.insert(_:)(v73, v25);
          --v24;
        }
        while (v24);
      }
      v141[0] = v12;
      v141[1] = v11;
      uint64_t v26 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v26, &v140);
      v73[0] = fmax(v6, -2.11845067e11);
      Calendar._dateComponents(_:from:)(&v140, v73, &v106);
      swift_bridgeObjectRelease();
      *(void *)&v73[0] = Set.init(minimumCapacity:)();
      if (v22)
      {
        double v27 = (unsigned __int8 *)(v14 + 32);
        uint64_t v28 = v22;
        do
        {
          unsigned int v29 = *v27++;
          specialized Set._Variant.insert(_:)(v105, v29);
          --v28;
        }
        while (v28);
      }
      v105[0] = v12;
      v105[1] = v11;
      uint64_t v30 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v30, &v104);
      int64_t v72 = fmax(v7, -2.11845067e11);
      Calendar._dateComponents(_:from:)(&v104, &v72, v73);
      swift_bridgeObjectRelease();
      if (!v22) {
        goto LABEL_89;
      }
      uint64_t v31 = 0;
      int64_t v54 = v111;
      uint64_t v55 = v109;
      uint64_t v69 = v112;
      int64_t v70 = v110;
      uint64_t v52 = v115;
      unint64_t v53 = v113;
      uint64_t v67 = v116;
      long long v68 = v114;
      uint64_t v50 = v119;
      uint64_t v51 = v117;
      unint64_t v65 = v120;
      uint64_t v66 = v118;
      int64_t v48 = v123;
      uint64_t v49 = v121;
      uint64_t v63 = v124;
      uint64_t v64 = v122;
      int64_t v46 = v127;
      unint64_t v47 = v125;
      uint64_t v61 = v128;
      uint64_t v62 = v126;
      uint64_t v44 = v131;
      char v45 = v129;
      unint64_t v59 = v132;
      unint64_t v60 = v130;
      unint64_t v57 = v136;
      int64_t v58 = v134;
      uint64_t v56 = v138;
      uint64_t v42 = v135;
      uint64_t v43 = v133;
      char v41 = v137;
      while (2)
      {
        uint64_t v32 = v14[v31++ + 32];
        switch(v32)
        {
          case 1:
            if (v69 & 1) != 0 || (v76) {
              goto LABEL_91;
            }
            double v33 = v75;
            uint64_t v34 = v54;
            goto LABEL_76;
          case 2:
            if (v68 & 1) != 0 || (v78) {
              goto LABEL_91;
            }
            double v33 = v77;
            uint64_t v34 = v53;
            goto LABEL_76;
          case 3:
            if (v67 & 1) != 0 || (v80) {
              goto LABEL_91;
            }
            double v33 = v79;
            uint64_t v34 = v52;
            goto LABEL_76;
          case 4:
            if (v65 & 1) != 0 || (v84) {
              goto LABEL_91;
            }
            double v33 = v83;
            uint64_t v34 = v50;
            goto LABEL_76;
          case 5:
            if (v64 & 1) != 0 || (v86) {
              goto LABEL_91;
            }
            double v33 = v85;
            uint64_t v34 = v49;
            goto LABEL_76;
          case 6:
            if (v63 & 1) != 0 || (v88) {
              goto LABEL_91;
            }
            double v33 = v87;
            uint64_t v34 = v48;
            goto LABEL_76;
          case 7:
            if (v61 & 1) != 0 || (v92) {
              goto LABEL_91;
            }
            double v33 = v91;
            uint64_t v34 = v46;
            goto LABEL_76;
          case 8:
            if (v60 & 1) != 0 || (v94) {
              goto LABEL_91;
            }
            double v33 = v93;
            uint64_t v34 = v45;
            goto LABEL_76;
          case 9:
            if (v59 & 1) != 0 || (v96) {
              goto LABEL_91;
            }
            double v33 = v95;
            uint64_t v34 = v44;
            goto LABEL_76;
          case 10:
            if (v58 & 1) != 0 || (v98) {
              goto LABEL_91;
            }
            double v33 = v97;
            uint64_t v34 = v43;
            goto LABEL_76;
          case 11:
            if (v57 & 1) != 0 || (v100) {
              goto LABEL_91;
            }
            double v33 = v99;
            uint64_t v34 = v42;
            goto LABEL_76;
          case 12:
            if (v56 & 1) != 0 || (v102) {
              goto LABEL_91;
            }
            double v33 = v101;
            uint64_t v34 = v41;
            goto LABEL_76;
          case 13:
            if (v62 & 1) != 0 || (v90) {
              goto LABEL_91;
            }
            double v33 = v89;
            uint64_t v34 = v47;
            goto LABEL_76;
          case 14:
          case 15:
          case 16:
            goto LABEL_91;
          case 17:
            if (v66 & 1) != 0 || (v82) {
              goto LABEL_91;
            }
            double v33 = v81;
            uint64_t v34 = v51;
            goto LABEL_76;
          default:
            if (v70 || v74 == 1)
            {
LABEL_91:
              swift_bridgeObjectRelease();
              outlined release of DateComponents((uint64_t)v73);
              outlined release of DateComponents((uint64_t)&v106);
              return v71;
            }
            double v33 = v73[4];
            uint64_t v34 = v55;
LABEL_76:
            if (*(uint64_t *)&v33 < v34)
            {
              swift_bridgeObjectRelease();
              outlined release of DateComponents((uint64_t)v73);
              outlined release of DateComponents((uint64_t)&v106);
              return 1;
            }
            if (v34 < *(uint64_t *)&v33) {
              goto LABEL_106;
            }
            if (v32 != 2) {
              goto LABEL_87;
            }
            uint64_t v35 = swift_getObjectType();
            unint64_t v36 = *(void (**)(double *__return_ptr, uint64_t, uint64_t))(v11 + 24);
            swift_unknownObjectRetain();
            v36(&v72, v35, v11);
            swift_unknownObjectRelease();
            if (LOBYTE(v72) != 2) {
              goto LABEL_87;
            }
            if (v103 == 2)
            {
              if (v139) {
                goto LABEL_112;
              }
            }
            else if (v139)
            {
              if ((v103 & 1) == 0)
              {
LABEL_112:
                outlined release of DateComponents((uint64_t)v73);
                outlined release of DateComponents((uint64_t)&v106);
                swift_bridgeObjectRelease();
                return 1;
              }
            }
            else if (v103)
            {
LABEL_106:
              swift_bridgeObjectRelease();
              outlined release of DateComponents((uint64_t)v73);
              outlined release of DateComponents((uint64_t)&v106);
              return -1;
            }
LABEL_87:
            if (v10 != v32 && v22 != v31) {
              continue;
            }
LABEL_89:
            swift_bridgeObjectRelease();
            outlined release of DateComponents((uint64_t)v73);
            outlined release of DateComponents((uint64_t)&v106);
LABEL_90:
            NSComparisonResult result = NSOrderedSame;
            break;
        }
        return result;
      }
  }
}

Foundation::DateInterval_optional __swiftcall _CalendarGregorian.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  uint64_t v5 = v3;
  int v6 = *(unsigned __int8 *)of;
  double v7 = *v2;
  switch(*(unsigned char *)of)
  {
    case 1:
    case 2:
    case 3:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x11:
      goto LABEL_3;
    case 4:
      uint64_t v13 = *(void *)(v4 + 112);
      uint64_t ObjectType = swift_getObjectType();
      *(double *)__src = v7;
      double v15 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v13 + 40);
      swift_unknownObjectRetain();
      uint64_t v16 = v15(__src, ObjectType, v13);
      of = swift_unknownObjectRelease();
      *(void *)(v5 + 8) = 0x40AC200000000000;
      double v8 = floor((v7 + (double)v16) / 3600.0) * 3600.0;
      a2._time = v8 - (double)v16;
      goto LABEL_11;
    case 5:
      *(void *)(v3 + 8) = 0x404E000000000000;
      double v8 = floor(v7 / 60.0);
      a2._time = v8 * 60.0;
LABEL_11:
      *(double *)uint64_t v5 = a2._time;
      goto LABEL_62;
    case 6:
      a2._time = floor(v7);
      *(double *)uint64_t v3 = a2._time;
      uint64_t v17 = 0x3FF0000000000000;
      goto LABEL_23;
    case 7:
    case 8:
      int v6 = 3;
LABEL_3:
      LOBYTE(v48[0]) = v6;
      *(double *)__dst = v7;
      *(Foundation::Date_optional *)(&of - 8) = _CalendarGregorian.firstInstant(of:at:)((Foundation::Calendar::Component)v48, a2);
      if (BYTE8(__src[0])) {
        goto LABEL_4;
      }
      uint64_t v9 = *(void *)&__src[0];
      double v10 = *(double *)__src;
      double v11 = *(double *)__src;
      switch(v6)
      {
        case 1:
          LOBYTE(v47) = 1;
          goto LABEL_21;
        case 2:
          char v12 = 2;
          goto LABEL_20;
        case 3:
        case 17:
          char v12 = 3;
          goto LABEL_20;
        case 9:
          LOBYTE(v47) = 2;
          *(void *)&long long v46 = *(void *)&__src[0];
          __dst[0] = *(_OWORD *)(v4 + 104);
          swift_unknownObjectRetain();
          uint64_t v18 = 3;
          goto LABEL_22;
        case 10:
          char v12 = 10;
          goto LABEL_20;
        case 11:
          char v12 = 11;
          goto LABEL_20;
        case 12:
          char v12 = 12;
LABEL_20:
          LOBYTE(v47) = v12;
LABEL_21:
          *(void *)&long long v46 = *(void *)&__src[0];
          __dst[0] = *(_OWORD *)(v4 + 104);
          swift_unknownObjectRetain();
          uint64_t v18 = 1;
LABEL_22:
          _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF((unsigned __int8 *)&v47, (double *)&v46, v18, (double *)__dst, (uint64_t)__src, (double *)v48);
          swift_unknownObjectRelease();
          double v11 = *(double *)v48;
          break;
        default:
          break;
      }
      uint64_t v19 = unk_1ECA3B580;
      if ((unk_1ECA3B580 & ~qword_1ECA3B578) == 0) {
        uint64_t v19 = 0;
      }
      uint64_t v20 = v19 | qword_1ECA3B578;
      uint64_t v21 = qword_1ECA3B588;
      if ((qword_1ECA3B588 & ~v20) == 0) {
        uint64_t v21 = 0;
      }
      uint64_t v22 = v21 | v20;
      if ((unk_1ECA3B590 & ~v22) != 0) {
        uint64_t v23 = unk_1ECA3B590;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v23 | v22;
      uint64_t v25 = qword_1ECA3B598;
      if ((qword_1ECA3B598 & ~v24) == 0) {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v25 | v24;
      if ((unk_1ECA3B5A0 & ~v26) != 0) {
        uint64_t v27 = unk_1ECA3B5A0;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = v27 | v26;
      uint64_t v29 = qword_1ECA3B5A8;
      if ((qword_1ECA3B5A8 & ~v28) == 0) {
        uint64_t v29 = 0;
      }
      uint64_t v30 = v29 | v28;
      if ((unk_1ECA3B5B0 & ~v30) != 0) {
        uint64_t v31 = unk_1ECA3B5B0;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = v31 | v30;
      uint64_t v33 = qword_1ECA3B5B8;
      if ((qword_1ECA3B5B8 & ~v32) == 0) {
        uint64_t v33 = 0;
      }
      *(void *)&v48[0] = v33 | v32;
      *(double *)&long long v46 = v11;
      __dst[0] = *(_OWORD *)(v4 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v48, (double *)&v46, (uint64_t *)__dst, __src);
      swift_unknownObjectRelease();
      LOBYTE(v48[0]) = 4;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__src);
      uint64_t v34 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v48, __dst);
      char v36 = v35 & 1;
      if (v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v34;
      }
      LOBYTE(v48[0]) = 5;
      memcpy(__dst, __src, 0x11AuLL);
      uint64_t v38 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v48, __dst);
      char v40 = v39 & 1;
      if (v39) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v38;
      }
      LOBYTE(v48[0]) = 6;
      memcpy(__dst, __src, 0x11AuLL);
      uint64_t v42 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v48, __dst);
      __dst[0] = __src[0];
      __dst[1] = __src[1];
      *(void *)&__dst[2] = *(void *)&__src[2];
      BYTE8(__dst[2]) = BYTE8(__src[2]);
      *(void *)&__dst[3] = *(void *)&__src[3];
      BYTE8(__dst[3]) = BYTE8(__src[3]);
      *(void *)&__dst[4] = *(void *)&__src[4];
      BYTE8(__dst[4]) = BYTE8(__src[4]);
      *(void *)&__dst[5] = *(void *)&__src[5];
      BYTE8(__dst[5]) = BYTE8(__src[5]);
      *(void *)&__dst[6] = *(void *)&__src[6];
      BYTE8(__dst[6]) = BYTE8(__src[6]);
      *(void *)&__dst[7] = v37;
      BYTE8(__dst[7]) = v36;
      *(void *)&__dst[8] = v41;
      BYTE8(__dst[8]) = v40;
      if (v43) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = v42;
      }
      *(void *)&__dst[9] = v44;
      BYTE8(__dst[9]) = v43 & 1;
      *(void *)&__dst[11] = *(void *)&__src[11];
      BYTE8(__dst[11]) = BYTE8(__src[11]);
      *(void *)&__dst[12] = *(void *)&__src[12];
      BYTE8(__dst[12]) = BYTE8(__src[12]);
      *(void *)&__dst[13] = *(void *)&__src[13];
      BYTE8(__dst[13]) = BYTE8(__src[13]);
      *(void *)&__dst[14] = *(void *)&__src[14];
      BYTE8(__dst[14]) = BYTE8(__src[14]);
      *(void *)&__dst[15] = *(void *)&__src[15];
      BYTE8(__dst[15]) = BYTE8(__src[15]);
      BYTE8(__dst[16]) = BYTE8(__src[16]);
      WORD4(__dst[17]) = WORD4(__src[17]);
      *(void *)&__dst[16] = *(void *)&__src[16];
      *(void *)&__dst[17] = *(void *)&__src[17];
      *(void *)&__dst[10] = 0;
      BYTE8(__dst[10]) = 0;
      memcpy(v48, __dst, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.date(from:)(v48, (uint64_t)&v46);
      of = outlined release of DateComponents((uint64_t)__dst);
      if (BYTE8(v46)) {
        goto LABEL_65;
      }
      double v45 = *(double *)&v46;
      uint64_t v47 = v46;
      long long v46 = *(_OWORD *)(v4 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)((double *)&v47, (uint64_t)&v46, (uint64_t)v48);
      outlined release of DateComponents((uint64_t)__src);
      swift_unknownObjectRelease();
      of = outlined release of DateComponents((uint64_t)__dst);
      if (v48[1])
      {
        if (v11 <= v10)
        {
LABEL_4:
          *(void *)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          *(unsigned char *)(v5 + 16) = 1;
          goto LABEL_66;
        }
        if (v45 >= v10)
        {
          a2._time = v45 - v10;
          goto LABEL_59;
        }
      }
      else
      {
        a2._time = v45 - *((double *)v48 + 1);
        if (v45 - *((double *)v48 + 1) >= v10)
        {
          a2._time = a2._time - v10;
LABEL_59:
          *(void *)uint64_t v5 = v9;
          *(double *)(v5 + 8) = a2._time;
LABEL_62:
          *(unsigned char *)(v5 + 16) = 0;
          goto LABEL_66;
        }
        __break(1u);
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      result.value.duration = v8;
      result.value.start = a2;
      result.is_nil = of;
      return result;
    case 0xD:
      double v8 = 0.000000001;
      a2._time = floor(v7 * 1000000000.0) * 0.000000001;
      *(double *)uint64_t v3 = a2._time;
      uint64_t v17 = 0x3E112E0BE826D695;
LABEL_23:
      *(void *)(v5 + 8) = v17;
      goto LABEL_62;
    case 0xE:
    case 0xF:
    case 0x10:
      goto LABEL_4;
    default:
      if (v7 >= -6.3113904e10) {
        *(_OWORD *)&a2._time = xmmword_1822051E0;
      }
      else {
        *(_OWORD *)&a2._time = xmmword_1822051F0;
      }
      *(_OWORD *)uint64_t v3 = *(_OWORD *)&a2._time;
      goto LABEL_62;
  }
}

void Calendar.Component.nextHigherUnit.getter(unsigned char *a1@<X8>)
{
  *a1 = byte_18218B7D6[*v1];
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)@<X0>(uint64_t *a1@<X0>, const void *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  char v12 = *a3;
  char v13 = *a4;
  char v14 = *a5;
  uint64_t v23 = 0;
  char v24 = 1;
  long long v22 = *v6;
  uint64_t v21 = v11;
  char v19 = v12;
  char v18 = v13;
  char v17 = v14;
  uint64_t result = specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v21, __dst, &v19, &v18, &v17, &v22, &v23);
  char v16 = v24;
  *(void *)a6 = v23;
  *(unsigned char *)(a6 + 8) = v16;
  return result;
}

uint64_t specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t a7)
{
  double v9 = *a1;
  unsigned __int8 v10 = *a3;
  unsigned __int8 v11 = *a4;
  unsigned __int8 v12 = *a5;
  uint64_t v14 = *a6;
  uint64_t v13 = a6[1];
  memcpy(__dst, a2, 0x11AuLL);
  uint64_t v26 = v14;
  uint64_t v27 = v13;
  uint64_t result = DateComponents._validate(for:)(&v26);
  if ((result & 1) != 0 && v9 >= -2.11845067e11 && v9 <= 1.59271755e13)
  {
    uint64_t v16 = 101;
    double v17 = v9;
    while (1)
    {
      v20[0] = v14;
      v20[1] = v13;
      id v25 = *(id *)&v9;
      memcpy(__dst, a2, 0x11AuLL);
      unsigned __int8 v24 = v10;
      unsigned __int8 v23 = v11;
      unsigned __int8 v22 = v12;
      double v21 = v17;
      uint64_t v18 = 0;
      LOBYTE(v19) = 1;
      uint64_t result = Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v25, __dst, &v24, &v23, &v22, &v21, (uint64_t)&v18, (uint64_t)&v26);
      if (v27 != 2) {
        break;
      }
      double v17 = v28;
      if (!--v16)
      {
        *(double *)uint64_t v20 = v9;
        uint64_t v26 = v14;
        uint64_t v27 = v13;
        memcpy(__dst, a2, 0x11AuLL);
        LOBYTE(v18) = v12;
        LOBYTE(v25) = v10;
        LOBYTE(v21) = v11;
        return _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v20, &v26, __dst, (unsigned __int8 *)&v18, (unsigned __int8 *)&v25, (unsigned __int8 *)&v21);
      }
    }
    *(void *)a7 = v26;
    *(unsigned char *)(a7 + 8) = 0;
  }
  return result;
}

BOOL DateComponents._validate(for:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *(unsigned char *)(v1 + 40);
  uint64_t v74 = *(void *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 56);
  uint64_t v68 = *(void *)(v1 + 64);
  char v73 = *(unsigned char *)(v1 + 72);
  uint64_t v66 = *(void *)(v1 + 80);
  char v71 = *(unsigned char *)(v1 + 88);
  uint64_t v72 = *(void *)(v1 + 96);
  char v6 = *(unsigned char *)(v1 + 104);
  uint64_t v64 = *(void *)(v1 + 112);
  char v69 = *(unsigned char *)(v1 + 120);
  uint64_t v62 = *(void *)(v1 + 128);
  char v67 = *(unsigned char *)(v1 + 136);
  uint64_t v60 = *(void *)(v1 + 144);
  char v65 = *(unsigned char *)(v1 + 152);
  uint64_t v7 = *(void *)(v1 + 160);
  char v8 = *(unsigned char *)(v1 + 168);
  uint64_t v58 = *(void *)(v1 + 176);
  char v63 = *(unsigned char *)(v1 + 184);
  uint64_t v56 = *(void *)(v1 + 192);
  char v61 = *(unsigned char *)(v1 + 200);
  uint64_t v70 = *(void *)(v1 + 208);
  char v75 = *(unsigned char *)(v1 + 216);
  char v59 = *(unsigned char *)(v1 + 248);
  uint64_t v54 = *(void *)(v1 + 256);
  uint64_t v55 = *(void *)(v1 + 240);
  char v57 = *(unsigned char *)(v1 + 264);
  char v9 = *(unsigned char *)(v1 + 280);
  uint64_t v10 = *(void *)(v1 + 272);
  int v11 = *(unsigned __int8 *)(v1 + 281);
  if (v4) {
    goto LABEL_4;
  }
  char v52 = *(unsigned char *)(v1 + 104);
  char v53 = *(unsigned char *)(v1 + 280);
  uint64_t v12 = *(void *)(v1 + 272);
  int v13 = *(unsigned __int8 *)(v1 + 281);
  char v14 = *(unsigned char *)(v1 + 168);
  uint64_t v15 = *(void *)(v1 + 160);
  uint64_t v16 = *(void *)(v1 + 32);
  uint64_t v77 = *a1;
  uint64_t v78 = v3;
  unsigned __int8 v76 = 0;
  uint64_t v18 = Calendar.validRange(for:)(&v76);
  BOOL result = 0;
  if (v16 >= v18)
  {
    BOOL v20 = v17 < v16;
    uint64_t v7 = v15;
    char v8 = v14;
    int v11 = v13;
    uint64_t v10 = v12;
    char v6 = v52;
    char v9 = v53;
    if (!v20)
    {
LABEL_4:
      if (v5)
      {
        char v21 = v4 ^ 1;
      }
      else
      {
        char v22 = v6;
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        char v21 = 1;
        unsigned __int8 v76 = 1;
        uint64_t v24 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v74 < v24) {
          return result;
        }
        char v6 = v22;
        if (v23 < v74) {
          return result;
        }
      }
      if ((v6 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 17;
        uint64_t v26 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v72 < v26 || v25 < v72) {
          return result;
        }
        char v21 = 1;
      }
      if ((v75 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 9;
        uint64_t v28 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v70 < v28 || v27 < v70) {
          return result;
        }
        char v21 = 1;
      }
      if ((v73 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 2;
        uint64_t v30 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v68 < v30 || v29 < v68) {
          return result;
        }
        char v21 = 1;
      }
      if ((v71 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 3;
        uint64_t v32 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v66 < v32 || v31 < v66) {
          return result;
        }
        char v21 = 1;
      }
      if ((v69 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 4;
        uint64_t v34 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v64 < v34 || v33 < v64) {
          return result;
        }
        char v21 = 1;
      }
      if ((v67 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 5;
        uint64_t v36 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v62 < v36 || v35 < v62) {
          return result;
        }
        char v21 = 1;
      }
      if ((v65 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 6;
        uint64_t v38 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v60 < v38 || v37 < v60) {
          return result;
        }
        char v21 = 1;
      }
      if ((v63 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 7;
        uint64_t v40 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v58 < v40 || v39 < v58) {
          return result;
        }
        char v21 = 1;
      }
      if ((v61 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 8;
        uint64_t v42 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v56 < v42 || v41 < v56) {
          return result;
        }
        char v21 = 1;
      }
      if ((v59 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 10;
        uint64_t v44 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v55 < v44 || v43 < v55) {
          return result;
        }
        char v21 = 1;
      }
      if ((v57 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 11;
        uint64_t v46 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v54 < v46 || v45 < v54) {
          return result;
        }
        char v21 = 1;
      }
      if ((v9 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 12;
        uint64_t v48 = Calendar.validRange(for:)(&v76);
        BOOL result = 0;
        if (v10 < v48 || v47 < v10) {
          return result;
        }
        char v21 = 1;
      }
      if (v8)
      {
        if (v11 == 2) {
          char v49 = 1;
        }
        else {
          char v49 = v21;
        }
        return (v49 & 1) != 0 || (v11 & 1) == 0;
      }
      uint64_t v77 = v2;
      uint64_t v78 = v3;
      unsigned __int8 v76 = 13;
      uint64_t v51 = Calendar.validRange(for:)(&v76);
      BOOL result = 0;
      if (v7 >= v51 && v50 >= v7) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t Calendar.validRange(for:)(unsigned __int8 *a1)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;

  LODWORD(v2) = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (v2 != 12)
  {
    if (v2 == 8) {
      return 1;
    }
    if (v2 != 1)
    {
LABEL_44:
      uint64_t ObjectType = swift_getObjectType();
      BYTE6(v38) = v2;
      uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))((char *)&v38 + 6, ObjectType, v3);
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      if (v30) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v27;
      }
      BYTE5(v38) = v2;
      BOOL result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))((char *)&v38 + 5, ObjectType, v3);
      if ((v34 & 1) == 0)
      {
        uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v31 & 1) == 0) {
          uint64_t v35 = v29;
        }
        if (v32 < result) {
          BOOL result = v32;
        }
        if (v35 <= v33) {
          uint64_t v35 = v33;
        }
        if (v35 < result) {
          goto LABEL_66;
        }
        if (result != v35)
        {
LABEL_58:
          if (!__OFSUB__(v35, 1)) {
            return result;
          }
          goto LABEL_67;
        }
        __break(1u);
      }
      BOOL result = v32 & (v32 >> 63);
      uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_58;
    }
  }
  uint64_t v4 = swift_getObjectType();
  char v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v5((uint64_t *)((char *)&v38 + 2), v4, v3);
  swift_unknownObjectRelease();
  if (BYTE2(v38) != 6)
  {
    swift_unknownObjectRetain();
    v5((uint64_t *)((char *)&v38 + 1), v4, v3);
    swift_unknownObjectRelease();
    if (BYTE1(v38) != 8)
    {
      swift_unknownObjectRetain();
      v5(&v38, v4, v3);
      swift_unknownObjectRelease();
      if (v38 != 12)
      {
        if (v2 != 12) {
          goto LABEL_44;
        }
        uint64_t v17 = swift_getObjectType();
        BYTE4(v38) = 1;
        uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))((char *)&v38 + 4, v17, v3);
        BOOL v20 = v19;
        char v22 = v21;
        if (v21) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v18;
        }
        BYTE3(v38) = 1;
        BOOL result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))((char *)&v38 + 3, v17, v3);
        if (v24)
        {
          BOOL result = v2 & (v2 >> 63);
          uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v22 & 1) == 0) {
            uint64_t v25 = v20;
          }
          if (v2 < result) {
            BOOL result = v2;
          }
          if (v25 <= v23) {
            uint64_t v25 = v23;
          }
          if (v25 < result) {
            goto LABEL_68;
          }
          if (result == v25)
          {
            __break(1u);
            goto LABEL_44;
          }
        }
        if (!__OFSUB__(v25, 1)) {
          return result;
        }
        __break(1u);
        goto LABEL_64;
      }
    }
  }
  uint64_t v37 = v2;
  char v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))(&v37, v4, v3);
  char v8 = v7;
  uint64_t v10 = v9;
  if (v9) {
    int v11 = 0;
  }
  else {
    int v11 = v6;
  }
  uint64_t v36 = v2;
  BOOL result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))(&v36, v4, v3);
  if (v14)
  {
    uint64_t v16 = v11 & (v11 >> 63);
    uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_24;
  }
  if (v10) {
    uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v15 = v8;
  }
  if (v11 >= result) {
    uint64_t v16 = result;
  }
  else {
    uint64_t v16 = v11;
  }
  if (v15 <= v13) {
    uint64_t v15 = v13;
  }
  if (v15 < v16)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v16 == v15)
  {
    __break(1u);
    return 1;
  }
LABEL_24:
  if (__OFSUB__(v15, 1))
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    return result;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFELL;
  }
  if (v16 <= 1) {
    return 1;
  }
  else {
    return v16;
  }
}

uint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarGregorian(unsigned __int8 *a1)
{
  return _CalendarGregorian.maximumRange(of:)(a1);
}

uint64_t _CalendarGregorian.maximumRange(of:)(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = 0;
  switch(v2)
  {
    case 1:
      return 1;
    case 2:
      return 1;
    case 3:
      return 1;
    case 4:
      return 0;
    case 5:
    case 6:
      return 0;
    case 7:
      return 1;
    case 8:
      return 1;
    case 9:
      return 1;
    case 10:
      if ((*(unsigned char *)(v1 + 144) & 1) == 0)
      {
        uint64_t v12 = *(void *)(v1 + 136);
        BOOL v8 = v12 == 1;
        goto LABEL_24;
      }
      if (!*(void *)(v1 + 88))
      {
        BOOL v8 = 1;
LABEL_22:
        uint64_t v12 = 1;
        goto LABEL_24;
      }
      uint64_t v4 = *(void *)(v1 + 96);
      uint64_t ObjectType = swift_getObjectType();
      char v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 344);
      swift_unknownObjectRetain();
      uint64_t v7 = v6(ObjectType, v4);
      uint64_t result = swift_unknownObjectRelease();
      BOOL v8 = v7 == 1;
      if (*(unsigned char *)(v1 + 144) == 1)
      {
        if (*(void *)(v1 + 88))
        {
          uint64_t v9 = *(void *)(v1 + 96);
          uint64_t v10 = swift_getObjectType();
          int v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 344);
          swift_unknownObjectRetain();
          uint64_t v12 = v11(v10, v9);
          uint64_t result = swift_unknownObjectRelease();
          goto LABEL_24;
        }
        goto LABEL_22;
      }
      uint64_t v12 = *(void *)(v1 + 136);
LABEL_24:
      if (__OFSUB__(7, v12))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (__OFADD__(7 - v12, 37))
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      uint64_t result = v8;
      if ((44 - v12) / 7 + 1 < v8) {
LABEL_30:
      }
        __break(1u);
      return result;
    case 11:
      return 1;
    case 12:
      return 140742;
    case 13:
      return 0;
    case 14:
    case 15:
      return 0;
    case 17:
      return 1;
    default:
      return result;
  }
}

uint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarGregorian(unsigned __int8 *a1)
{
  return specialized _CalendarGregorian.minimumRange(of:)(a1);
}

uint64_t specialized _CalendarGregorian.minimumRange(of:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      uint64_t result = 1;
      break;
    case 2:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 0;
      break;
    case 5:
    case 6:
      uint64_t result = 0;
      break;
    case 7:
      uint64_t result = 1;
      break;
    case 8:
    case 9:
    case 10:
      uint64_t result = 1;
      break;
    case 11:
      uint64_t result = 1;
      break;
    case 12:
      uint64_t result = 140742;
      break;
    case 13:
      uint64_t result = 0;
      break;
    case 14:
    case 15:
      uint64_t result = 0;
      break;
    case 17:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void DateComponents.lowestSetUnit.getter(char *a1@<X8>)
{
  if (v1[168] == 1)
  {
    if (v1[264]) {
      char v2 = 10;
    }
    else {
      char v2 = 11;
    }
    if (v1[280]) {
      char v3 = v2;
    }
    else {
      char v3 = 12;
    }
    if (v1[200]) {
      char v4 = 7;
    }
    else {
      char v4 = 8;
    }
    if ((v1[280] & v1[264]) & v1[248]) {
      char v3 = v4;
    }
    if (v1[152]) {
      char v5 = 5;
    }
    else {
      char v5 = 6;
    }
    if ((v1[280] & v1[264] & v1[248]) & (v1[200] & v1[184])) {
      char v3 = v5;
    }
    if (v1[120]) {
      char v6 = 3;
    }
    else {
      char v6 = 4;
    }
    if ((v1[280] & v1[264] & v1[248] & v1[200] & v1[184]) & (v1[152] & v1[136])) {
      char v3 = v6;
    }
    if (v1[72]) {
      char v7 = 9;
    }
    else {
      char v7 = 2;
    }
    if ((v1[280] & v1[264] & v1[248] & v1[200] & v1[184] & v1[152] & v1[136]) & (v1[120] & v1[88])) {
      char v3 = v7;
    }
    if (((v1[280] & v1[264] & v1[248] & v1[200] & v1[184] & v1[152] & v1[136] & v1[120] & v1[88] & v1[72]) & v1[216]) != 0)
    {
      char v3 = 17;
      BOOL v8 = v1[104] == 0;
    }
    else
    {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (v1[40]) {
        char v3 = 18;
      }
      else {
        char v3 = 0;
      }
      if (!v1[56]) {
        char v3 = 1;
      }
    }
    *a1 = v3;
  }
  else
  {
    *a1 = 13;
  }
}

unint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
  }
  return result;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapString<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a2;
  v41[11] = *MEMORY[0x1E4F143B8];
  uint64_t v40 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v16);
  BOOL v20 = (char *)&v37 - v18;
  if (a1 >> 60)
  {
    uint64_t v37 = a6;
    unint64_t v38 = a1;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
    v28((char *)&v37 - v18, a4, v12, v19);
    ((void (*)(char *, char *, uint64_t))v28)(v15, v20, v12);
    uint64_t v29 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v15, 1, a5) == 1)
    {
      uint64_t v30 = *(void (**)(char *, uint64_t))(v13 + 8);
      v30(v15, v12);
      _CodingPathNode.path.getter(a3);
      v30(v20, v12);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v39, v15, a5);
      uint64_t v31 = _CodingPathNode.path.getter(a3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v33 = v37;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v35 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 16))(boxed_opaque_existential_1, v39, a5);
      v41[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E4FBB1A0], v38, v36);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  else
  {
    MEMORY[0x1F4188790](v17);
    *(&v37 - 6) = a5;
    *(&v37 - 5) = a6;
    *((unsigned char *)&v37 - 32) = v21;
    *(&v37 - 3) = a3;
    *(&v37 - 2) = a4;
    uint64_t v22 = *(void *)(v37 + 24);
    *(double *)&long long v24 = MEMORY[0x1F4188790](v23);
    *(&v37 - 4) = (uint64_t)partial apply for closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:);
    *(&v37 - 3) = v25;
    *((_OWORD *)&v37 - 1) = v24;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v22 + 40));
    uint64_t v26 = v38;
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v22 + 16), v41);
    os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 40));
    uint64_t result = swift_release();
    if (!v26) {
      return v41[0];
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _CodingKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance _PlistDecoder<A>@<X0>(uint64_t a1@<X8>)
{
  return _PlistDecoder.unkeyedContainer()(a1);
}

uint64_t _PlistDecoder.unkeyedContainer()@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v25 = a1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v26 = v4;
  uint64_t v27 = v3;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  BOOL v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v23 = (char *)&v22 - v14;
  uint64_t v15 = v1[2];
  swift_bridgeObjectRetain_n();
  uint64_t v16 = MEMORY[0x185302620](v15, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v28 = v15;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v16 = v24;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v17 = v23;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v23, v8, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v16);
      uint64_t v18 = v17;
      swift_bridgeObjectRelease();
      uint64_t v19 = v2[5];
      BOOL v20 = *(void (**)(char *, void *, uint64_t))(v27 + 32);
      swift_retain();
      v20(v18, v2, v19);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v18, AssociatedTypeWitness);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v16);
  __break(1u);
  return result;
}

uint64_t protocol witness for static PlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:) in conformance _BPlistDecodingFormat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static _BPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)(*a1, a2, a3, a4);
}

uint64_t static _BPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 >> 60 == 1)
  {
    uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v17 = *(void *)(v16 + 16);
    a4[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat>);
    a4[4] = lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>();
    uint64_t v18 = swift_allocObject();
    *a4 = v18;
    *(_OWORD *)(v18 + 32) = xmmword_182208990;
    *(void *)(v18 + 16) = a2;
    *(void *)(v18 + 24) = v16;
    *(void *)(v18 + 64) = 0;
    *(void *)(v18 + 72) = a3;
    *(void *)(v18 + 48) = v17;
    *(unsigned char *)(v18 + 56) = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else
  {
    if (a1 >> 60 == 9 && (a1 == 0x9000000000000008 || a1 == 0x9000000000000010))
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      unint64_t v10 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    }
    else
    {
      unint64_t v11 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v11);
      swift_release();
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v12, a1, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v13);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>);
  }
  return result;
}

uint64_t protocol witness for static PlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:) in conformance _XMLPlistDecodingFormat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static _XMLPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)(*a1, a2, a3, a4);
}

uint64_t static _XMLPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 >> 60 == 1)
  {
    uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v18 = *(void *)(a2 + 24);
    a4[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat>);
    a4[4] = lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>();
    uint64_t v19 = swift_allocObject();
    *a4 = v19;
    *(void *)(v19 + 32) = v18;
    *(void *)(v19 + 40) = 0xF000000000000007;
    *(void *)(v19 + 16) = a2;
    *(void *)(v19 + 24) = v16;
    *(void *)(v19 + 64) = 0;
    *(void *)(v19 + 72) = a3;
    *(void *)(v19 + 48) = v17;
    *(unsigned char *)(v19 + 56) = 0;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    if (a1 >> 60 == 8 && a1 == 0x8000000000000000)
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      unint64_t v10 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    }
    else
    {
      unint64_t v11 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v11);
      swift_release();
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v12, a1, v13);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
}

uint64_t specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, void *a4@<X8>)
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x756F662074756220;
  v9._unint64_t object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = a3(a2);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x64616574736E6920;
  v11._unint64_t object = (void *)0xE90000000000002ELL;
  String.append(_:)(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a4 = a1;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v12 = *MEMORY[0x1E4FBBA70];
  uint64_t v13 = type metadata accessor for DecodingError();
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104);

  return v14(a4, v12, v13);
}

unint64_t XMLPlistMap.Value.debugDataTypeDescription.getter(unint64_t a1)
{
  unint64_t v2 = a1 >> 60;
  unint64_t result = 0x676E697274732061;
  switch(v2)
  {
    case 1uLL:
      unint64_t result = 0x7961727261206E61;
      break;
    case 2uLL:
      unint64_t result = 0x6F69746369642061;
      break;
    case 3uLL:
      unint64_t result = 0x7620617461642061;
      break;
    case 4uLL:
      unint64_t result = 0x657461642061;
      break;
    case 5uLL:
      unint64_t result = 0x61656C6F6F622061;
      break;
    case 6uLL:
      unint64_t result = 0x6E206C6165722061;
      break;
    case 7uLL:
      unint64_t result = 0x6765746E69206E61;
      break;
    case 8uLL:
      if (a1 == 0x8000000000000000) {
        unint64_t result = 0x76206C6C756E2061;
      }
      else {
        unint64_t result = 0xD000000000000016;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(a1, a2, (uint64_t (*)(uint64_t))XMLPlistMap.Value.debugDataTypeDescription.getter, a3);
}

{
  return specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(a1, a2, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, a3);
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>);
  }
  return result;
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return 0;
}

uint64_t LocalizedError.failureReason.getter()
{
  return 0;
}

uint64_t _FileManagerImpl.currentDirectoryPath.getter()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  outlined init with copy of _FileManagerImpl(v0, (uint64_t)v12);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) == 0)
  {
    uint64_t v6 = (char *)swift_slowAlloc();
    if (getcwd(v6, 0x402uLL))
    {
      uint64_t v7 = (void *)MEMORY[0x185309640](v12);
      if (!v7) {
        goto LABEL_12;
      }
      Swift::String v8 = v7;
      id v9 = objc_msgSend(v7, sel_stringWithFileSystemRepresentation_length_, v6, strlen(v6));

      id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    }
    else
    {
      id v5 = 0;
    }
    MEMORY[0x185309510](v6, -1, -1);
    goto LABEL_11;
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  if (!getcwd(v11, 0x402uLL))
  {
    id v5 = 0;
    goto LABEL_11;
  }
  unint64_t v2 = (void *)MEMORY[0x185309640](v12);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_stringWithFileSystemRepresentation_length_, v11, strlen(v11));

    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
LABEL_11:
    outlined destroy of _FileManagerImpl((uint64_t)v12);
    return (uint64_t)v5;
  }
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v64[2] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x100, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))v64, 0, 0);
    return swift_willThrow();
  }
  outlined init with copy of _FileManagerImpl(a4, (uint64_t)v64);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) == 0)
  {
    uint64_t v19 = (char *)swift_slowAlloc();
    ssize_t v20 = readlink(a1, v19, 0x402uLL);
    if ((v20 & 0x8000000000000000) == 0)
    {
      ssize_t v21 = v20;
      uint64_t v22 = (void *)MEMORY[0x185309640](v64);
      if (!v22) {
        goto LABEL_47;
      }
      uint64_t v23 = v22;
      id v24 = objc_msgSend(v22, sel_stringWithFileSystemRepresentation_length_, v19, v21);

      id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      *a5 = v25;
      a5[1] = v27;
LABEL_39:
      MEMORY[0x185309510](v19, -1, -1);
      return outlined destroy of _FileManagerImpl((uint64_t)v64);
    }
    int v31 = MEMORY[0x185301870]();
    int v32 = v31;
    uint64_t v33 = 263;
    switch(v31)
    {
      case 1:
      case 13:
        uint64_t v33 = 257;
        goto LABEL_32;
      case 2:
        uint64_t v33 = 260;
        goto LABEL_32;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_21;
      case 27:
        goto LABEL_32;
      default:
        if (v31 == 63)
        {
          uint64_t v33 = 258;
        }
        else
        {
          if (v31 == 102)
          {
            id v35 = 0;
            uint64_t v36 = 256;
LABEL_38:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v36, a2, a3, v35, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v62, 0, 0);
            swift_willThrow();
            goto LABEL_39;
          }
LABEL_21:
          uint64_t v33 = 256;
        }
LABEL_32:
        uint64_t v60 = (uint64_t *)v33;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        {
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          unint64_t v62 = 0xD000000000000014;
          unint64_t v63 = 0x80000001823A9780;
          int v61 = v32;
          goto LABEL_46;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v46 = (int)POSIXErrorCode.rawValue.getter();
        id v47 = objc_allocWithZone((Class)NSError);
        uint64_t v48 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v35 = objc_msgSend(v47, sel_initWithDomain_code_userInfo_, v48, v46, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v49 = objc_msgSend(v35, sel_domain);
        id v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        uint64_t v52 = v51;

        if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v52 == v53)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v54 & 1) == 0) {
            goto LABEL_42;
          }
        }
        uint64_t v36 = (uint64_t)v60;
        goto LABEL_38;
    }
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  ssize_t v10 = readlink(a1, v56, 0x402uLL);
  if (v10 < 0)
  {
    int v28 = MEMORY[0x185301870]();
    int v29 = v28;
    uint64_t v30 = 263;
    switch(v28)
    {
      case 1:
      case 13:
        uint64_t v30 = 257;
        goto LABEL_25;
      case 2:
        uint64_t v30 = 260;
        goto LABEL_25;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_20;
      case 27:
        goto LABEL_25;
      default:
        if (v28 == 63)
        {
          uint64_t v30 = 258;
        }
        else
        {
          if (v28 == 102)
          {
            id v34 = 0;
            uint64_t v30 = 256;
LABEL_30:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v30, a2, a3, v34, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v62, 0, 0);
            swift_willThrow();
            swift_willThrow();
            return outlined destroy of _FileManagerImpl((uint64_t)v64);
          }
LABEL_20:
          uint64_t v30 = 256;
        }
LABEL_25:
        uint64_t v60 = &v59;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v37 = (int)POSIXErrorCode.rawValue.getter();
          id v38 = objc_allocWithZone((Class)NSError);
          uint64_t v39 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v34 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, v37, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v40 = objc_msgSend(v34, sel_domain);
          id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
          uint64_t v43 = v42;

          if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v43 == v44)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_30;
          }
          char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v45) {
            goto LABEL_30;
          }
          __break(1u);
LABEL_42:
          __break(1u);
        }
        unint64_t v62 = 0;
        unint64_t v63 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        unint64_t v62 = 0xD000000000000014;
        unint64_t v63 = 0x80000001823A9780;
        int v61 = v29;
        break;
    }
LABEL_46:
    v55._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    LODWORD(v58) = 0;
    uint64_t v57 = 73;
    goto LABEL_47;
  }
  ssize_t v11 = v10;
  uint64_t v12 = (void *)MEMORY[0x185309640](v64);
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = objc_msgSend(v12, sel_stringWithFileSystemRepresentation_length_, v56, v11);

    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    *a5 = v15;
    a5[1] = v17;
    return outlined destroy of _FileManagerImpl((uint64_t)v64);
  }
LABEL_47:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of _FileManagerImpl(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _FileManagerImpl()
{
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectWeakDestroy();
}

uint64_t outlined init with copy of _FileManagerImpl(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of _FileManagerImpl(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 15) = 0;
  if (!a2)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    return result;
  }
  int64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(a1 + 120) = xmmword_182107DC0;
    return result;
  }
  unint64_t v45 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  id v5 = (unint64_t *)(a2 + 56);
  while (1)
  {
    unint64_t v7 = *(v5 - 3);
    unint64_t v6 = *(v5 - 2);
    unint64_t v9 = *(v5 - 1);
    unint64_t v8 = *v5;
    if ((v6 & 0x1000000000000000) != 0)
    {
      unint64_t v43 = *(v5 - 3);
      uint64_t v44 = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      ssize_t v21 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v22 = (unsigned __int16 *)objc_msgSend(v21, sel__fastCharacterContents);
      id v23 = v21;
      if (v22)
      {
        unint64_t v43 = v7;
        uint64_t v44 = v6;
        id v40 = v22;
        StringProtocol._ephemeralString.getter();
        id v24 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v25 = objc_msgSend(v24, sel_length);
        swift_unknownObjectRelease();
        char v26 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v40, (uint64_t)v25, 0x80u, 1);
      }
      else
      {
        char v26 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v6, 0x80u, 1);
      }
      char v33 = v26;
      swift_bridgeObjectRelease_n();
      if ((v33 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        uint64_t v11 = HIBYTE(v6) & 0xF;
        unint64_t v43 = *(v5 - 3);
        uint64_t v44 = v6 & 0xFFFFFFFFFFFFFFLL;
        ssize_t v10 = (char *)&v43;
      }
      else if ((v7 & 0x1000000000000000) != 0)
      {
        ssize_t v10 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        ssize_t v10 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v12 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v11, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v12) {
        goto LABEL_37;
      }
    }
    unint64_t v43 = v7;
    uint64_t v44 = v6;
    if (v8) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_19:
    unint64_t v17 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
      unint64_t v17 = v45;
    }
    unint64_t v19 = *(void *)(v17 + 16);
    unint64_t v18 = *(void *)(v17 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      unint64_t v17 = v45;
    }
    v5 += 4;
    *(void *)(v17 + 16) = v19 + 1;
    unint64_t v20 = v17 + 16 * v19;
    *(void *)(v20 + 32) = v7;
    *(void *)(v20 + 40) = v6;
    if (!--v4)
    {
      unint64_t v43 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v38 = v37;
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = v36;
      *(void *)(a1 + 128) = v38;
      return result;
    }
  }
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) != 0)
    {
      uint64_t v14 = HIBYTE(v8) & 0xF;
      v42._uint64_t countAndFlagsBits = v9;
      v42._unint64_t object = (void *)(v8 & 0xFFFFFFFFFFFFFFLL);
      uint64_t v13 = (char *)&v42;
    }
    else if ((v9 & 0x1000000000000000) != 0)
    {
      uint64_t v13 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v13 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v13, v14, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_36;
    }
    goto LABEL_18;
  }
  v42._uint64_t countAndFlagsBits = v9;
  v42._unint64_t object = (void *)v8;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  uint64_t v27 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  int v28 = (unsigned __int16 *)objc_msgSend(v27, sel__fastCharacterContents);
  id v29 = v27;
  if (v28)
  {
    v42._uint64_t countAndFlagsBits = v9;
    v42._unint64_t object = (void *)v8;
    id v41 = v28;
    StringProtocol._ephemeralString.getter();
    uint64_t v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(v30, sel_length);
    swift_unknownObjectRelease();
    char v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v41, (uint64_t)v31, 0x40u, 1);
  }
  else
  {
    char v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x40u, 1);
  }
  char v34 = v32;
  swift_bridgeObjectRelease_n();
  if (v34)
  {
LABEL_18:
    v42._uint64_t countAndFlagsBits = 61;
    v42._unint64_t object = (void *)0xE100000000000000;
    v16._uint64_t countAndFlagsBits = v9;
    v16._unint64_t object = (void *)v8;
    String.append(_:)(v16);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v7 = v43;
    unint64_t v6 = v44;
    goto LABEL_19;
  }
LABEL_36:
  swift_bridgeObjectRelease();
LABEL_37:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *id v35 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized _NSFileManagerBridge.contentsOfDirectory(atPath:)(uint64_t a1, unint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  *(void *)(inited + 64) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v6 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int v6 = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 3 * v6;
  if ((unsigned __int128)(v6 * (__int128)3) >> 64 != (3 * v6) >> 63)
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v7 < -1)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v7 < 1024 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    ssize_t v10 = (char *)&v44 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v7 + 1, 1, a1, a2);
    char v12 = v11;
    uint64_t v13 = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)opendir(v10);
    uint64_t v14 = (DIR *)v13;
    if (!v13) {
      goto LABEL_29;
    }
LABEL_15:
    *(void *)(inited + 24) = a1;
    *(void *)(inited + 32) = a2;
    *(void *)(inited + 16) = v14;
    *(unsigned char *)(inited + 56) = 0;
    unint64_t v48 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    *(void *)(inited + 40) = v18;
    *(void *)(inited + 48) = v20;
    ssize_t v21 = *(void **)(inited + 64);
    if (v21)
    {
LABEL_44:
      id v40 = v21;
      swift_willThrow();
      swift_setDeallocating();
      id v41 = *(DIR **)(inited + 16);
      if (v41) {
        closedir(v41);
      }
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return a2;
    }
LABEL_16:
    _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v55);
    outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v55, (uint64_t)v56);
    if (*((void *)&v56[0] + 1))
    {
      a2 = MEMORY[0x1E4FBC860];
      do
      {
        long long v50 = v56[0];
        long long v51 = v56[1];
        char v52 = v57;
        long long v53 = v56[0];
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a2 + 16) + 1, 1, (void *)a2);
        }
        unint64_t v23 = *(void *)(a2 + 16);
        unint64_t v22 = *(void *)(a2 + 24);
        if (v23 >= v22 >> 1) {
          a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, (void *)a2);
        }
        *(void *)(a2 + 16) = v23 + 1;
        *(_OWORD *)(a2 + 16 * v23 + 32) = v53;
        outlined release of String((uint64_t)&v53);
        v54[0] = v51;
        outlined release of String((uint64_t)v54);
        _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v55);
        outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v55, (uint64_t)v56);
      }
      while (*((void *)&v56[0] + 1));
    }
    else
    {
      a2 = MEMORY[0x1E4FBC860];
    }
    swift_setDeallocating();
    id v24 = *(DIR **)(inited + 16);
    if (v24) {
      closedir(v24);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a2;
  }
  BOOL v15 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v15, v7 + 1, 1, a1, a2);
  char v17 = v16;
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v13 = MEMORY[0x185309510](v15, -1, -1);
  }
  else
  {
    uint64_t v14 = opendir(v15);
    uint64_t v13 = MEMORY[0x185309510](v15, -1, -1);
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_29:
  *(void *)(inited + 24) = 0;
  *(void *)(inited + 32) = 0xE000000000000000;
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 48) = 0xE000000000000000;
  *(unsigned char *)(inited + 56) = 0;
  int v25 = MEMORY[0x185301870](v13);
  int v26 = v25;
  uint64_t v27 = 263;
  switch(v25)
  {
    case 1:
    case 13:
      uint64_t v27 = 257;
      goto LABEL_37;
    case 2:
      uint64_t v27 = 260;
      goto LABEL_37;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      goto LABEL_34;
    case 27:
      goto LABEL_37;
    default:
      if (v25 == 63)
      {
        uint64_t v27 = 258;
      }
      else
      {
        if (v25 == 102)
        {
          id v28 = 0;
          uint64_t v29 = 256;
          goto LABEL_43;
        }
LABEL_34:
        uint64_t v27 = 256;
      }
LABEL_37:
      uint64_t v44 = v27;
      uint64_t v45 = a1;
      uint64_t v46 = v2;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v30 = (int)POSIXErrorCode.rawValue.getter();
        id v31 = objc_allocWithZone((Class)NSError);
        uint64_t v32 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v28 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, v30, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v33 = objc_msgSend(v28, sel_domain);
        id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        uint64_t v36 = v35;

        if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v36 == v37)
        {
          swift_bridgeObjectRelease_n();
LABEL_42:
          a1 = v45;
          uint64_t v29 = v44;
LABEL_43:
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v29, a1, a2, v28, 0x7265646C6F46, 0xE600000000000000, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v48, 0, 0);
          ssize_t v21 = (void *)v48;
          uint64_t v39 = *(void **)(inited + 64);
          swift_bridgeObjectRelease();

          *(void *)(inited + 64) = v21;
          if (v21) {
            goto LABEL_44;
          }
          goto LABEL_16;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38) {
          goto LABEL_42;
        }
LABEL_51:
        __break(1u);
      }
      unint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v48 = 0xD000000000000014;
      unint64_t v49 = 0x80000001823A9780;
      int v47 = v26;
      v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
  }
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _POSIXDirectoryContentsSequence.Iterator.Element?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void _POSIXDirectoryContentsSequence.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(DIR **)(v1 + 16);
  if (!v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    __darwin_ino64_t st_ino = 0;
    __uint8_t d_type = 0;
    goto LABEL_21;
  }
  id v5 = readdir(v4);
  if (!v5)
  {
LABEL_20:
    closedir(v4);
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    __darwin_ino64_t st_ino = 0;
    __uint8_t d_type = 0;
    *(void *)(v2 + 16) = 0;
    goto LABEL_21;
  }
  Swift::Int v6 = v5;
  while (1)
  {
    if (!v6->d_namlen || !v6->d_ino) {
      goto LABEL_7;
    }
    uint64_t v7 = String.init(cString:)();
    unint64_t v8 = v12;
    if ((v7 != 46 || v12 != (void *)0xE100000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v7 != 11822 || v8 != (void *)0xE200000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v7 != 24366 || v8 != (void *)0xE200000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    Swift::Int v6 = readdir(v4);
    if (!v6) {
      goto LABEL_20;
    }
  }
  if (*(unsigned char *)(v2 + 56) != 1) {
    goto LABEL_28;
  }
  if (v6->d_type == 4) {
    goto LABEL_27;
  }
  if (v6->d_type) {
    goto LABEL_28;
  }
  memset(&v24, 0, 28);
  memset(&v24.st_atimespec, 0, 112);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 47;
  v13._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v7;
  v14._unint64_t object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v16 = stat((const char *)(v15 + 32), &v24);
  swift_release();
  if (v16) {
    goto LABEL_28;
  }
  int st_mode = v24.st_mode;
  int v18 = S_IFMT.getter() & st_mode;
  if (v18 == (unsigned __int16)S_IFDIR.getter())
  {
LABEL_27:
    __darwin_ino64_t v19 = *(void *)(v2 + 48);
    *(void *)&v24.st_dev = *(void *)(v2 + 40);
    v24.__darwin_ino64_t st_ino = v19;
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v7;
    v20._unint64_t object = v8;
    String.append(_:)(v20);
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = 47;
    v21._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_28:
    __darwin_ino64_t v22 = *(void *)(v2 + 48);
    *(void *)&v24.st_dev = *(void *)(v2 + 40);
    v24.__darwin_ino64_t st_ino = v22;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v7;
    v23._unint64_t object = v8;
    String.append(_:)(v23);
  }
  uint64_t v9 = *(void *)&v24.st_dev;
  __darwin_ino64_t st_ino = v24.st_ino;
  __uint8_t d_type = v6->d_type;
LABEL_21:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = st_ino;
  *(unsigned char *)(a1 + 32) = d_type;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for _POSIXDirectoryContentsSequence.Iterator()
{
  return self;
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.queryItems.setter()
{
  v1.value._rawValue = (void *)swift_bridgeObjectRetain();
  URLComponents._URLComponents.setQueryItems(_:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!a1) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    objc_msgSend(a1, sel_copy);
    uint64_t v7 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = a3(v7);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>, (uint64_t (*)(uint64_t))specialized _arrayForceCast<A, B>(_:));
}

{
  return specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (uint64_t (*)(uint64_t))specialized _arrayForceCast<A, B>(_:));
}

uint64_t specialized _NSSwiftProcessInfo.macCatalystVersionIs(atLeastVersion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = specialized _NSSwiftProcessInfo.operatingSystemVersion.getter();
  BOOL v10 = v7 > a2 || v8 >= a3;
  if (v7 < a2) {
    BOOL v10 = 0;
  }
  unsigned int v11 = v6 > a1 || v10;
  if (v6 >= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized _NSSwiftProcessInfo.operatingSystemVersion.getter()
{
  String._bridgeToObjectiveCImpl()();
  uint64_t v0 = (void *)_CFCopySystemVersionDictionaryValue();
  swift_unknownObjectRelease();
  if (v0)
  {
    id v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    unint64_t v3 = v2;

    v30[0] = 46;
    v30[1] = 0xE100000000000000;
    MEMORY[0x1F4188790](v4);
    v29[2] = v30;
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v29, (uint64_t)v1, v3);
    swift_bridgeObjectRelease();
    if (v5[2])
    {
      uint64_t v6 = v5[4];
      uint64_t v7 = v5[5];
      if ((v7 ^ (unint64_t)v6) >> 14)
      {
        unint64_t v9 = v5[6];
        unint64_t v8 = v5[7];
        uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v5[4], v5[5], v9, v8, 10);
        if ((v11 & 0x100) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v6, v7, v9, v8, 10);
          char v14 = v13;
          swift_bridgeObjectRelease();
          if ((v14 & 1) == 0) {
            goto LABEL_8;
          }
        }
        else if ((v11 & 1) == 0)
        {
          uint64_t v12 = v10;
LABEL_8:
          unint64_t v15 = v5[2];
          if (v15 >= 2)
          {
            uint64_t v16 = v5[8];
            uint64_t v17 = v5[9];
            if ((v17 ^ (unint64_t)v16) >> 14)
            {
              unint64_t v19 = v5[10];
              unint64_t v18 = v5[11];
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v5[8], v5[9], v19, v18, 10);
              if ((v20 & 0x100) != 0)
              {
                swift_bridgeObjectRetain();
                specialized _parseInteger<A, B>(ascii:radix:)(v16, v17, v19, v18, 10);
                char v23 = v22;
                swift_bridgeObjectRelease();
                if ((v23 & 1) == 0) {
                  goto LABEL_17;
                }
              }
              else if ((v20 & 1) == 0)
              {
LABEL_17:
                if (v15 >= 3)
                {
                  if (v5[2] < 3uLL)
                  {
                    __break(1u);
                  }
                  else
                  {
                    unint64_t v24 = v5[12];
                    unint64_t v25 = v5[13];
                    unint64_t v27 = v5[14];
                    unint64_t v26 = v5[15];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    if ((v25 ^ v24) >> 14)
                    {
                      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v24, v25, v27, v26, 10);
                      if ((v28 & 0x100) != 0) {
                        specialized _parseInteger<A, B>(ascii:radix:)(v24, v25, v27, v26, 10);
                      }
                    }
                  }
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          return v12;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  return -1;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    __int16 v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    __int16 v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    __int16 v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  unint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unint64_t v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          id v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v14 >> 14 == v16 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  Swift::Double v13[2] = v27 + 1;
  char v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  unint64_t v15 = v29;
  if (v13[2] != v42)
  {
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
LABEL_29:
  if (v48 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v15 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    Swift::Double v13[2] = v39 + 1;
    unsigned __int8 v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1)
{
  unint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(void *a1)
{
  return specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

ValueMetadata *type metadata accessor for AttributedString._AttributeValue()
{
  return &type metadata for AttributedString._AttributeValue;
}

ValueMetadata *type metadata accessor for LocaleCache.State.IdentifierAndPrefs()
{
  return &type metadata for LocaleCache.State.IdentifierAndPrefs;
}

Swift::Int __swiftcall Calendar.component(_:from:)(Foundation::Calendar::Component _, Foundation::Date from)
{
  uint64_t v4 = *(unsigned __int8 *)_;
  uint64_t v5 = *v2;
  long long v10 = *v3;
  uint64_t v6 = 0x4000;
  switch(v4)
  {
    case 1:
      uint64_t v9 = 2;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[7]) {
        goto LABEL_33;
      }
      return __dst[6];
    case 2:
      uint64_t v9 = 4;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[9]) {
        goto LABEL_33;
      }
      return __dst[8];
    case 3:
      uint64_t v9 = 8;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[11]) {
        goto LABEL_33;
      }
      return __dst[10];
    case 4:
      uint64_t v9 = 16;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[15]) {
        goto LABEL_33;
      }
      return __dst[14];
    case 5:
      uint64_t v9 = 32;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[17]) {
        goto LABEL_33;
      }
      return __dst[16];
    case 6:
      uint64_t v9 = 64;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[19]) {
        goto LABEL_33;
      }
      return __dst[18];
    case 7:
      uint64_t v9 = 128;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[23]) {
        goto LABEL_33;
      }
      return __dst[22];
    case 8:
      uint64_t v9 = 256;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[25]) {
        goto LABEL_33;
      }
      return __dst[24];
    case 9:
      uint64_t v9 = 512;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[27]) {
        goto LABEL_33;
      }
      return __dst[26];
    case 10:
      uint64_t v9 = 1024;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[31]) {
        goto LABEL_33;
      }
      return __dst[30];
    case 11:
      uint64_t v9 = 2048;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[33]) {
        goto LABEL_33;
      }
      return __dst[32];
    case 12:
      uint64_t v9 = 4096;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[35]) {
        goto LABEL_33;
      }
      return __dst[34];
    case 13:
      uint64_t v9 = 0x2000;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[21]) {
        goto LABEL_33;
      }
      return __dst[20];
    case 14:
      goto LABEL_32;
    case 15:
      uint64_t v6 = 0x8000;
      goto LABEL_32;
    case 16:
      uint64_t v6 = 0x10000;
LABEL_32:
      uint64_t v9 = v6;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      goto LABEL_33;
    case 17:
      uint64_t v9 = 0x40000;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (__dst[13]) {
        goto LABEL_33;
      }
      Swift::Int result = __dst[12];
      break;
    default:
      uint64_t v9 = 1;
      uint64_t v8 = v5;
      Calendar._dateComponents(_:from:)(&v9, (double *)&v8, __src);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      if (LOBYTE(__dst[5]) == 1) {
LABEL_33:
      }
        Swift::Int result = 0;
      else {
        Swift::Int result = __dst[4];
      }
      break;
  }
  return result;
}

void *static DecodableAttributedStringKey<>.decode(from:)(void *a1)
{
  unint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    type metadata accessor for NSKeyedUnarchiver();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(AssociatedTypeWitness, v10, v11);
    unint64_t v3 = v5;
    if (v5)
    {
      outlined consume of Data._Representation(v10, v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    }
    else
    {
      unint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      dispatch thunk of Decoder.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA78], v7);
      swift_willThrow();
      outlined consume of Data._Representation(v10, v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    }
  }
  return v3;
}

void static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      uint64_t v6 = __DataStorage.bridgedReference(_:)((int)a2, a2 >> 32);
      outlined consume of Data._Representation(a2, a3);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v6 = __DataStorage.bridgedReference(_:)(v8, v7);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v5 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      *(void *)&long long v15 = a2;
      WORD4(v15) = a3;
      BYTE10(v15) = BYTE2(a3);
      BYTE11(v15) = BYTE3(a3);
      BYTE12(v15) = BYTE4(a3);
      BYTE13(v15) = BYTE5(a3);
      uint64_t v5 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v15, BYTE6(a3));
LABEL_7:
      uint64_t v6 = v5;
      break;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)&long long v15 = 0;
  id v10 = __NSKeyedUnarchiverSecureUnarchiveObjectOfClass(ObjCClassFromMetadata, (uint64_t)v6, (uint64_t)&v15);

  unint64_t v11 = (void *)v15;
  if (v10)
  {
    id v12 = (id)v15;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    id v13 = v11;
  }
  outlined init with take of Any?((uint64_t)&v15, (uint64_t)v17);
  if (v11)
  {
    id v14 = v11;
    swift_willThrow();
    outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  else
  {
    outlined init with take of Any?((uint64_t)v17, (uint64_t)&v15);
    if (*((void *)&v16 + 1)) {
      swift_dynamicCast();
    }
    else {
      outlined destroy of Any?((uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
  }
}

void sub_18191773C(_Unwind_Exception *a1)
{
}

id __NSKeyedUnarchiverSecureUnarchiveObjectOfClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSKeyedUnarchiver unarchivedObjectOfClass:a1 fromData:a2 error:a3];
}

unint64_t type metadata accessor for NSKeyedUnarchiver()
{
  unint64_t result = lazy cache variable for type metadata for NSKeyedUnarchiver;
  if (!lazy cache variable for type metadata for NSKeyedUnarchiver)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

ValueMetadata *type metadata accessor for BPlistMap.Value()
{
  return &type metadata for BPlistMap.Value;
}

id Double.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_doubleValue);
}

void protocol witness for Collection.endIndex.getter in conformance IndexSet.RangeView(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

BOOL static IndexSet.Index.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

id StringProtocol.localizedCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  StringProtocol._ephemeralString.getter();
  uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, *a6, v8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

ValueMetadata *type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return &type metadata for LocalizedStringResource.BundleDescription;
}

ValueMetadata *type metadata accessor for AttributedString.Index()
{
  return &type metadata for AttributedString.Index;
}

void _FileManagerImpl.removeItem(at:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  swift_retain();
  id v8 = v6;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v11 = objc_msgSend(v8, sel_isFileURL);
    swift_release();
    swift_release();

    if (v11) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  v116._uint64_t countAndFlagsBits = (uint64_t)v8;
  v116._unint64_t object = v5;
  uint64_t v117 = v7;
  URL.scheme.getter();
  if (!v9)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }
  Swift::String v10 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v10._countAndFlagsBits == 1701603686 && v10._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_14:
    id v18 = v8;
    swift_retain_n();
    swift_retain_n();
    id v19 = v18;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v114 = v3;
      uint64_t v117 = v7;
      id v20 = v19;
      swift_retain();
      swift_retain();
      Swift::String v21 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v21._countAndFlagsBits;
      Swift::String v116 = v21;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v21._object;
      }
      else
      {
        unint64_t object = (unint64_t)v21._object;
        if ((specialized BidirectionalCollection.last.getter(v21._countAndFlagsBits, (unint64_t)v21._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v116._countAndFlagsBits;
          unint64_t object = (unint64_t)v116._object;
        }
      }
      v115._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v50 = specialized Set._Variant.insert(_:)(&v118, 0x2FuLL);
      uint64_t v51 = v115._countAndFlagsBits;
      uint64_t v52 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v52 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v52)
      {
        id v113 = v20;
        v115._uint64_t countAndFlagsBits = countAndFlagsBits;
        v115._unint64_t object = (void *)object;
        MEMORY[0x1F4188790](v50);
        uint64_t v109 = (uint64_t)&v115;
        uint64_t v110 = v51;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v108, countAndFlagsBits, object);
        if (v53 == 1)
        {
          unint64_t v55 = (unint64_t)v115._object;
          Swift::Int v54 = v115._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v54, v55, v51);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v20 = v113;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v24 = objc_msgSend(v19, sel__parameterString);
      if (v24)
      {
        uint64_t v25 = v24;
        id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        char v28 = v27;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v29 = objc_msgSend(v19, sel_path)) != 0)
        {
          uint64_t v30 = v29;
          id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          uint64_t v33 = v32;

          v116._uint64_t countAndFlagsBits = (uint64_t)v31;
          v116._unint64_t object = v33;
          swift_bridgeObjectRetain();
          v34._uint64_t countAndFlagsBits = 59;
          v34._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v35._uint64_t countAndFlagsBits = (uint64_t)v26;
          v35._unint64_t object = v28;
          String.append(_:)(v35);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v116._uint64_t countAndFlagsBits = 59;
          v116._unint64_t object = (void *)0xE100000000000000;
          v67._uint64_t countAndFlagsBits = (uint64_t)v26;
          v67._unint64_t object = v28;
          String.append(_:)(v67);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v68 = objc_msgSend(v19, sel_path);
        if (v68)
        {
          char v69 = v68;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    char v75 = self;
    uint64_t v76 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    objc_msgSend(v75, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 262, v76, v19, 0, 0, 0, 0);
    goto LABEL_85;
  }
LABEL_10:
  id v13 = v8;
  swift_retain();
  swift_retain();
  id v113 = v4;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v114 = v3;
    uint64_t v117 = v7;
    id v14 = v13;
    swift_retain();
    swift_retain();
    Swift::String v15 = URL.path(percentEncoded:)(1);
    uint64_t v16 = v15._countAndFlagsBits;
    Swift::String v116 = v15;
    swift_bridgeObjectRetain();
    id v112 = v14;
    if (String.count.getter() <= 1)
    {
      unint64_t v17 = (unint64_t)v15._object;
    }
    else
    {
      unint64_t v17 = (unint64_t)v15._object;
      if ((specialized BidirectionalCollection.last.getter(v15._countAndFlagsBits, (unint64_t)v15._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v16 = v116._countAndFlagsBits;
        unint64_t v17 = (unint64_t)v116._object;
      }
    }
    v115._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v56 = specialized Set._Variant.insert(_:)(&v118, 0x2FuLL);
    uint64_t v57 = v115._countAndFlagsBits;
    uint64_t v58 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v58 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v58)
    {
      id v111 = v13;
      v115._uint64_t countAndFlagsBits = v16;
      v115._unint64_t object = (void *)v17;
      MEMORY[0x1F4188790](v56);
      uint64_t v109 = (uint64_t)&v115;
      uint64_t v110 = v57;
      swift_bridgeObjectRetain();
      uint64_t v59 = v114;
      uint64_t v60 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v108, v16, v17);
      uint64_t v114 = v59;
      if (v61 == 1)
      {
        unint64_t v63 = (unint64_t)v115._object;
        Swift::Int v62 = v115._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v64 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v62, v63, v57);
        unint64_t v66 = v65;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v64 = (uint64_t)v60;
        unint64_t v66 = v61;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v13 = v111;
      uint64_t v74 = v112;
      if (!v66)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v64 = 0;
        unint64_t v66 = 0xE000000000000000;
        goto LABEL_55;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v64 = 0;
      unint64_t v66 = 0xE000000000000000;
      uint64_t v74 = v112;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_55:
    swift_release();
    swift_release();

    uint64_t v3 = v114;
    goto LABEL_56;
  }
  id v36 = objc_msgSend(v13, sel__parameterString);
  if (v36)
  {
    uint64_t v37 = v36;
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unsigned __int8 v40 = v39;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v41 = objc_msgSend(v13, sel_path)) != 0)
    {
      uint64_t v42 = v41;
      id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      uint64_t v44 = v13;
      uint64_t v45 = v3;
      uint64_t v47 = v46;

      v116._uint64_t countAndFlagsBits = (uint64_t)v43;
      v116._unint64_t object = v47;
      swift_bridgeObjectRetain();
      v48._uint64_t countAndFlagsBits = 59;
      v48._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      uint64_t v3 = v45;
      id v13 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v49._uint64_t countAndFlagsBits = (uint64_t)v38;
      v49._unint64_t object = v40;
      String.append(_:)(v49);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v116._uint64_t countAndFlagsBits = 59;
      v116._unint64_t object = (void *)0xE100000000000000;
      v70._uint64_t countAndFlagsBits = (uint64_t)v38;
      v70._unint64_t object = v40;
      String.append(_:)(v70);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v64 = v116._countAndFlagsBits;
    unint64_t v66 = (unint64_t)v116._object;
  }
  else
  {
    id v71 = objc_msgSend(v13, sel_path);
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v64 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      unint64_t v66 = v73;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v64 = 0;
      unint64_t v66 = 0xE000000000000000;
    }
  }
LABEL_56:
  uint64_t v77 = HIBYTE(v66) & 0xF;
  if ((v66 & 0x2000000000000000) == 0) {
    uint64_t v77 = v64 & 0xFFFFFFFFFFFFLL;
  }
  if (!v77)
  {
    swift_bridgeObjectRelease();
    id v81 = v13;
    swift_retain_n();
    swift_retain_n();
    id v19 = v81;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v114 = v3;
      v116._uint64_t countAndFlagsBits = (uint64_t)v19;
      v116._unint64_t object = v5;
      uint64_t v117 = v7;
      id v82 = v19;
      swift_retain();
      swift_retain();
      Swift::String v83 = URL.path(percentEncoded:)(1);
      Swift::String v116 = v83;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v83._countAndFlagsBits, (unint64_t)v83._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v115._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v84 = specialized Set._Variant.insert(_:)(&v118, 0x2FuLL);
      uint64_t v85 = v115._countAndFlagsBits;
      uint64_t v86 = v116._countAndFlagsBits;
      uint64_t v87 = v116._object;
      unint64_t v88 = ((unint64_t)v116._object >> 56) & 0xF;
      if (((uint64_t)v116._object & 0x2000000000000000) == 0) {
        unint64_t v88 = v116._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v88)
      {
        id v113 = v82;
        Swift::String v115 = v116;
        MEMORY[0x1F4188790](v84);
        uint64_t v109 = (uint64_t)&v115;
        uint64_t v110 = v85;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v108, v86, (unint64_t)v87);
        if (v89 == 1)
        {
          unint64_t v91 = (unint64_t)v115._object;
          Swift::Int v90 = v115._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v90, v91, v85);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v82 = v113;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v92 = objc_msgSend(v19, sel__parameterString);
      if (v92)
      {
        int64_t v93 = v92;
        id v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        uint64_t v96 = v95;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v97 = objc_msgSend(v19, sel_path)) != 0)
        {
          uint64_t v98 = v97;
          id v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
          uint64_t v101 = v100;

          v116._uint64_t countAndFlagsBits = (uint64_t)v99;
          v116._unint64_t object = v101;
          swift_bridgeObjectRetain();
          v102._uint64_t countAndFlagsBits = 59;
          v102._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v102);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v103._uint64_t countAndFlagsBits = (uint64_t)v94;
          v103._unint64_t object = v96;
          String.append(_:)(v103);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v116._uint64_t countAndFlagsBits = 59;
          v116._unint64_t object = (void *)0xE100000000000000;
          v104._uint64_t countAndFlagsBits = (uint64_t)v94;
          v104._unint64_t object = v96;
          String.append(_:)(v104);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_84;
      }
      id v105 = objc_msgSend(v19, sel_path);
      if (!v105)
      {
        swift_release();
        swift_release();

        goto LABEL_84;
      }
      id v82 = v105;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
      swift_release();
      swift_release();
    }
LABEL_84:
    unint64_t v106 = self;
    uint64_t v107 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    objc_msgSend(v106, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v107, v19, 0, 0, 0, 0);
LABEL_85:
    swift_unknownObjectRelease();

    swift_willThrow();
    return;
  }
  uint64_t v78 = MEMORY[0x185309640](v113);
  if (v78)
  {
    uint64_t v79 = (void *)v78;
    swift_bridgeObjectRetain();
    id v80 = v79;
    specialized String.withFileSystemRepresentation<A>(_:)(v64, v66, v64, v66, v79);
    swift_bridgeObjectRelease();
  }
  else
  {
    LODWORD(v110) = 0;
    uint64_t v109 = 48;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v12 < -1) {
    goto LABEL_21;
  }
  uint64_t v13 = v12 + 1;
  if (v12 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    Swift::String v15 = (char *)v21 - v14;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v15, v13, 1, a1, a2);
    char v17 = v16;
    swift_bridgeObjectRelease();
    if (v17)
    {
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))4, a3, a4, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))v21, 0, 0);
      swift_willThrow();
    }
    else
    {
      specialized static _FileOperations._removeFile(_:_:with:)(v15, a3, a4, a5);
      if (!v5) {
        goto LABEL_18;
      }
    }
    swift_willThrow();
  }
  else
  {
    id v18 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v18, v13, 1, a1, a2);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))4, a3, a4, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))v21, 0, 0);
      swift_willThrow();
    }
    else
    {
      specialized static _FileOperations._removeFile(_:_:with:)(v18, a3, a4, a5);
    }
    MEMORY[0x185309510](v18, -1, -1);
  }
LABEL_18:
  swift_bridgeObjectRelease();
}

uint64_t specialized static _FileOperations._removeFile(_:_:with:)(const char *a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  removefile_state_t v8 = removefile_state_alloc();
  if (!v8) {
LABEL_54:
  }
    __break(1u);
  uint64_t v9 = v8;
  type metadata accessor for _FileOperations._FileRemoveContext();
  Swift::String v10 = (void *)swift_allocObject();
  uint64_t v10[2] = 0;
  v10[3] = a4;
  id v11 = a4;
  removefile_state_set(v9, 2u, v10);
  removefile_state_set(v9, 1u, @objc closure #1 in closure #1 in static _FileOperations._removeFile(_:_:with:));
  removefile_state_set(v9, 4u, v10);
  removefile_state_set(v9, 3u, @objc closure #2 in closure #1 in static _FileOperations._removeFile(_:_:with:));
  if (removefile(a1, v9, 1u) < 0)
  {
    uint64_t v60 = a2;
    if (MEMORY[0x185301870]())
    {
      int v13 = MEMORY[0x185301870]();
      uint64_t v14 = 4;
      switch(v13)
      {
        case 1:
        case 13:
          uint64_t v14 = 513;
          goto LABEL_22;
        case 2:
          goto LABEL_22;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 67:
        case 68:
          goto LABEL_13;
        case 17:
          uint64_t v14 = 516;
          goto LABEL_22;
        case 28:
        case 69:
          uint64_t v14 = 640;
          goto LABEL_22;
        case 30:
          uint64_t v14 = 642;
          goto LABEL_22;
        case 63:
          uint64_t v14 = 514;
          goto LABEL_22;
        case 66:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_55;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v17 = (int)POSIXErrorCode.rawValue.getter();
          id v18 = objc_allocWithZone((Class)NSError);
          uint64_t v19 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v17, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v21 = objc_msgSend(v20, sel_domain);
          id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v24 = v23;

          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v24 == v25)
          {
            swift_bridgeObjectRelease_n();
LABEL_47:
            swift_bridgeObjectRetain();
            uint64_t v52 = 513;
            uint64_t v53 = a2;
            unint64_t v54 = a3;
LABEL_50:
            unint64_t v55 = v20;
            goto LABEL_44;
          }
          char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v56) {
            goto LABEL_47;
          }
          break;
        default:
          if (v13 == 102) {
            goto LABEL_28;
          }
LABEL_13:
          uint64_t v14 = 512;
LABEL_22:
          unint64_t v59 = a3;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_55;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v26 = (int)POSIXErrorCode.rawValue.getter();
          id v27 = objc_allocWithZone((Class)NSError);
          uint64_t v28 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v16 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, v26, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v29 = objc_msgSend(v16, sel_domain);
          id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          uint64_t v32 = v31;

          if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v32 == v33) {
            goto LABEL_40;
          }
          a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 = v59;
          if (a2) {
            goto LABEL_42;
          }
          __break(1u);
          goto LABEL_27;
      }
      goto LABEL_52;
    }
    LODWORD(dst) = 0;
    removefile_state_get(v9, 5u, &dst);
    LODWORD(v16) = dst;
    uint64_t v14 = 4;
    switch((int)dst)
    {
      case 1:
      case 13:
        uint64_t v14 = 513;
        goto LABEL_37;
      case 2:
        goto LABEL_37;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 67:
      case 68:
        goto LABEL_29;
      case 17:
        uint64_t v14 = 516;
        goto LABEL_37;
      case 28:
      case 69:
        uint64_t v14 = 640;
        goto LABEL_37;
      case 30:
        uint64_t v14 = 642;
        goto LABEL_37;
      case 63:
        uint64_t v14 = 514;
        goto LABEL_37;
      case 66:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_55;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v34 = (int)POSIXErrorCode.rawValue.getter();
        id v35 = objc_allocWithZone((Class)NSError);
        uint64_t v36 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v20 = objc_msgSend(v35, sel_initWithDomain_code_userInfo_, v36, v34, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v37 = objc_msgSend(v20, sel_domain);
        id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v40 = v39;

        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v40 == v41)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v42 = a3;
        }
        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v42 = a3;
          if ((v57 & 1) == 0)
          {
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v52 = 513;
        uint64_t v53 = v60;
        unint64_t v54 = v42;
        goto LABEL_50;
      default:
LABEL_27:
        if (v16 == 102)
        {
LABEL_28:
          id v16 = 0;
          uint64_t v14 = 512;
        }
        else
        {
LABEL_29:
          uint64_t v14 = 512;
LABEL_37:
          unint64_t v59 = a3;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
            while (1)
            {
LABEL_55:
              unint64_t dst = 0;
              unint64_t v62 = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              unint64_t dst = 0xD000000000000014;
              unint64_t v62 = 0x80000001823A9780;
              v58._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v58);
              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v43 = (int)POSIXErrorCode.rawValue.getter();
          id v44 = objc_allocWithZone((Class)NSError);
          uint64_t v45 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v16 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, v43, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v46 = objc_msgSend(v16, sel_domain);
          id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
          uint64_t v49 = v48;

          if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v49 == v50)
          {
LABEL_40:
            swift_bridgeObjectRelease_n();
            a3 = v59;
          }
          else
          {
            char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v51 & 1) == 0)
            {
              __break(1u);
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
          }
LABEL_42:
          a2 = v60;
        }
        swift_bridgeObjectRetain();
        uint64_t v52 = v14;
        uint64_t v53 = a2;
        unint64_t v54 = a3;
        unint64_t v55 = v16;
LABEL_44:
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v52, v53, v54, v55, 0x65766F6D6552, 0xE600000000000000, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&dst, 0, 0);
        goto LABEL_45;
    }
  }
  uint64_t v12 = (void *)v10[2];
  if (!v12)
  {
    swift_release();
    return removefile_state_free(v9);
  }
  v12;
LABEL_45:
  swift_willThrow();
  swift_release();
  return removefile_state_free(v9);
}

uint64_t @objc closure #1 in closure #1 in static _FileOperations._removeFile(_:_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t v4 = String.init(cString:)();
  unint64_t v6 = v5;
  uint64_t v7 = *(void **)(a3 + 24);
  if (v7)
  {
    uint64_t v8 = v4;
    id v9 = v7;
    LODWORD(v8) = NSFileManager._shouldRemoveItemAtPath(_:)(v8, v6);

    swift_release();
    swift_bridgeObjectRelease();
    return ~v8 & 1;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
}

unint64_t static String.homeDirectoryPath(forUser:)(uint64_t a1, uint64_t a2)
{
  if (issetugid() || !getenv("CFFIXED_USER_HOME"))
  {
    if (a2)
    {
      uint64_t v3 = String.utf8CString.getter();
      uint64_t v4 = getpwnam((const char *)(v3 + 32));
      swift_release();
      if (!v4) {
        goto LABEL_16;
      }
    }
    else
    {
      uid_t v10 = specialized static Platform.getUGIDs(allowEffectiveRootUID:)(0);
      uint64_t v4 = getpwuid(v10);
      if (!v4) {
        goto LABEL_16;
      }
    }
    if (v4->pw_dir)
    {
      uint64_t v5 = String.init(cString:)();
      unint64_t v7 = v11;
      swift_bridgeObjectRetain();
      uint64_t v12 = specialized Collection.first.getter(v5, v7);
      if (!v13) {
        goto LABEL_45;
      }
      if (v12 == 126 && v13 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0) {
          goto LABEL_45;
        }
      }
      unint64_t v19 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v5, v7);
      if (v20)
      {
        uint64_t v25 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0) {
          uint64_t v25 = v5;
        }
        uint64_t v26 = v25 << 16;
        if ((v7 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0) {
          unint64_t v21 = v26 | 7;
        }
        else {
          unint64_t v21 = v26 | 0xB;
        }
      }
      else
      {
        unint64_t v21 = v19;
      }
      unint64_t v29 = String.index(after:)();
      if (v21 >> 14 == v29 >> 14) {
        goto LABEL_57;
      }
      if (v21 >> 14 >= v29 >> 14) {
        goto LABEL_60;
      }
      __break(1u);
      goto LABEL_42;
    }
LABEL_16:
    uint64_t v14 = 0x706D652F7261762FLL;
    if (a2 || !getenv("HOME")) {
      return v14;
    }
    uint64_t v5 = String.init(cString:)();
    unint64_t v7 = v15;
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized Collection.first.getter(v5, v7);
    if (!v17) {
      goto LABEL_45;
    }
    if (v16 == 126 && v17 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
LABEL_42:
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      goto LABEL_45;
    }
LABEL_43:
    unint64_t v31 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v5, v7);
    if ((v32 & 1) == 0)
    {
      unint64_t v21 = v31;
LABEL_56:
      unint64_t result = String.index(after:)();
      if (v21 >> 14 == result >> 14)
      {
LABEL_57:
        uint64_t v38 = 0;
        uint64_t v39 = 0;
LABEL_61:
        uint64_t v42 = static String.homeDirectoryPath(forUser:)(v38, v39);
        unint64_t v44 = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        specialized Collection.suffix(from:)(v21, v5, v7);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        swift_bridgeObjectRetain();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v5 = v42;
        unint64_t v33 = v44;
        goto LABEL_62;
      }
      if (v21 >> 14 < result >> 14)
      {
        __break(1u);
        return result;
      }
LABEL_60:
      uint64_t v40 = String.subscript.getter();
      uint64_t v38 = MEMORY[0x185301F50](v40);
      uint64_t v39 = v41;
      swift_bridgeObjectRelease();
      goto LABEL_61;
    }
LABEL_50:
    uint64_t v35 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0) {
      uint64_t v35 = v5;
    }
    uint64_t v36 = v35 << 16;
    if ((v7 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0) {
      unint64_t v21 = v36 | 7;
    }
    else {
      unint64_t v21 = v36 | 0xB;
    }
    goto LABEL_56;
  }
  uint64_t v5 = String.init(cString:)();
  unint64_t v7 = v6;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized Collection.first.getter(v5, v7);
  if (v9)
  {
    if (v8 == 126 && v9 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      unint64_t v23 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v5, v7);
      if (v24)
      {
        uint64_t v27 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0) {
          uint64_t v27 = v5;
        }
        uint64_t v28 = v27 << 16;
        if ((v7 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0) {
          unint64_t v21 = v28 | 7;
        }
        else {
          unint64_t v21 = v28 | 0xB;
        }
      }
      else
      {
        unint64_t v21 = v23;
      }
      unint64_t v34 = String.index(after:)();
      if (v21 >> 14 == v34 >> 14) {
        goto LABEL_57;
      }
      if (v21 >> 14 >= v34 >> 14) {
        goto LABEL_60;
      }
      __break(1u);
      goto LABEL_50;
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_26;
    }
  }
LABEL_45:
  unint64_t v33 = v7;
LABEL_62:
  uint64_t v14 = String._standardizingPath.getter(v5, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t String._standardizingPath.getter(Swift::Int a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  if ((a2 & 0x1000000000000000) != 0)
  {
    if (String.UTF8View._foreignCount()() > 1)
    {
      a1 = String.UTF8View._foreignCount()();
LABEL_5:
      MEMORY[0x1F4188790](a1);
      swift_bridgeObjectRetain();
      uint64_t v3 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
      unint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v2 = v6;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = HIBYTE(a2) & 0xE;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFELL;
    }
    if (v4) {
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRetain();
LABEL_9:
  uint64_t v7 = String._droppingTrailingSlashes.getter(v3, v2);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  char v10 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  if (v10)
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v7, v9);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v14 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        uint64_t v14 = v7;
      }
      uint64_t v15 = v14 << 16;
      if ((v9 & 0x1000000000000000) == 0 || (v7 & 0x800000000000000) != 0) {
        unint64_t v11 = v15 | 7;
      }
      else {
        unint64_t v11 = v15 | 0xB;
      }
    }
  }
  else
  {
    unint64_t v11 = 15;
  }
  swift_bridgeObjectRetain();
  unint64_t v16 = specialized Collection.suffix(from:)(v11, v7, v9);
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  LOBYTE(v16) = specialized StringProtocol._hasDotDotComponent()(v16, v18, v20, v22);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v23 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v23 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized String.withFileSystemRepresentation<A>(_:)(v7, v9, v7, v9);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = v24;
      unint64_t v9 = v26;
    }
  }
  else
  {
LABEL_24:
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = String._removingDotSegments.getter(v7, v9);
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = 47;
  v30._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  char v31 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v31) {
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = 47;
  v32._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  char v33 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = 47;
  v34._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  char v35 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35)
  {
LABEL_28:
    unint64_t v36 = String.count.getter();
    swift_bridgeObjectRelease();
    unint64_t v37 = specialized Collection.dropFirst(_:)(v36, v27, v29);
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v44 = MEMORY[0x185301F50](v37, v39, v41, v43);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v47 = 0;
    while (v44 != *(void *)((char *)&outlined read-only object #0 of String._standardizingPath.getter + v47 + 32)
         || v46 != *(void *)((char *)&outlined read-only object #0 of String._standardizingPath.getter + v47 + 40))
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      swift_bridgeObjectRetain_n();
      v49._uint64_t countAndFlagsBits = 47;
      v49._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      char v50 = specialized Sequence<>.starts<A>(with:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v50) {
        break;
      }
      v47 += 16;
      if (v47 == 192)
      {
        id v51 = objc_msgSend(self, sel_defaultManager);
        unsigned int v52 = objc_msgSend(v51, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

        swift_unknownObjectRelease();
        if (v52) {
          uint64_t v27 = v44;
        }
        break;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    unint64_t object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      unint64_t object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  unint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  if (!v6) {
    return 1;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _FileManagerImpl._fileExists(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (v5 < -1) {
    goto LABEL_24;
  }
  uint64_t v6 = v5 + 1;
  if (v5 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v8 = (char *)&v22 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0 || (memset(&v23, 0, 28), memset(&v23.st_atimespec, 0, 112), stat(v8, &v23)))
    {
      BOOL v11 = 0;
      int v12 = 0;
    }
    else
    {
      int st_mode = v23.st_mode;
      int v19 = S_IFMT.getter() & st_mode;
      BOOL v11 = v19 == (unsigned __int16)S_IFDIR.getter();
      int v12 = 1;
    }
  }
  else
  {
    char v13 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v6, 1, a1, a2);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0 || (memset(&v23, 0, 28), memset(&v23.st_atimespec, 0, 112), stat(v13, &v23)))
    {
      BOOL v11 = 0;
      int v12 = 0;
    }
    else
    {
      int v20 = v23.st_mode;
      int v21 = S_IFMT.getter() & v20;
      BOOL v11 = v21 == (unsigned __int16)S_IFDIR.getter();
      int v12 = 1;
    }
    MEMORY[0x185309510](v13, -1, -1);
  }
  if (v11) {
    int v16 = 256;
  }
  else {
    int v16 = 0;
  }
  return v16 | v12;
}

uint64_t specialized StringProtocol._hasDotDotComponent()(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((uint64_t)specialized Collection.count.getter(a1, a2, a3, a4) < 2 || a2 >> 14 == a1 >> 14) {
    return 0;
  }
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  LOBYTE(v12) = 0;
  unint64_t v13 = a1;
  while (1)
  {
    uint64_t result = Substring.UTF8View.subscript.getter();
    char v14 = result;
    if ((v13 & 0xC) == v10) {
      break;
    }
    if ((a4 & 0x1000000000000000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_20:
    switch((char)v12)
    {
      case 1:
        if (v14 == 47) {
          int v16 = 0;
        }
        else {
          int v16 = 3;
        }
        if (v14 == 46) {
          int v12 = 2;
        }
        else {
          int v12 = v16;
        }
        goto LABEL_13;
      case 2:
        if (v14 == 47)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        int v12 = 3;
LABEL_13:
        if (a2 >> 14 == v13 >> 14)
        {
          swift_bridgeObjectRelease();
          return v12 == 2;
        }
        break;
      case 3:
        if (v14 == 47) {
          int v12 = 0;
        }
        else {
          int v12 = 3;
        }
        goto LABEL_13;
      default:
        if (v14 == 47) {
          int v15 = 0;
        }
        else {
          int v15 = 3;
        }
        if (v14 == 46) {
          int v12 = 1;
        }
        else {
          int v12 = v15;
        }
        goto LABEL_13;
    }
  }
  uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, a4);
  unint64_t v13 = result;
  if ((a4 & 0x1000000000000000) == 0) {
    goto LABEL_16;
  }
LABEL_18:
  if (v11 > v13 >> 16)
  {
    unint64_t v13 = String.UTF8View._foreignIndex(after:)();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t String._removingDotSegments.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 4 * v2;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4 << v6;
  uint64_t v71 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v72 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  LOBYTE(v8) = 0;
  uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v10 = 15;
  while (2)
  {
    unint64_t v11 = v10 & 0xC;
    unint64_t v12 = v10;
    if (v11 == v7) {
      unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
    }
    unint64_t v13 = v12 >> 16;
    if (v12 >> 16 < v2)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        char v15 = String.UTF8View._foreignSubscript(position:)();
        if (v11 == v7) {
          goto LABEL_18;
        }
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v73[0] = a1;
        v73[1] = v72;
        char v15 = *((unsigned char *)v73 + v13);
        if (v11 == v7) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v14 = v71;
        if ((a1 & 0x1000000000000000) == 0) {
          uint64_t v14 = _StringObject.sharedUTF8.getter();
        }
        char v15 = *(unsigned char *)(v14 + v13);
        if (v11 == v7)
        {
LABEL_18:
          unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
          if ((a2 & 0x1000000000000000) != 0)
          {
LABEL_19:
            if (v2 <= v10 >> 16) {
              goto LABEL_148;
            }
            unint64_t v10 = String.UTF8View._foreignIndex(after:)();
            goto LABEL_24;
          }
LABEL_23:
          unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_24:
          switch((char)v8)
          {
            case 1:
              if (v15 == 46)
              {
                int v8 = 2;
                goto LABEL_9;
              }
              if (v15 == 47) {
                goto LABEL_41;
              }
              int64_t v16 = *((void *)v9 + 2);
              int64_t v17 = v16 + 2;
              if (__OFADD__(v16, 2)) {
                goto LABEL_151;
              }
              char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
              if (!isUniquelyReferenced_nonNull_native
                || (unint64_t v19 = *((void *)v9 + 3), v20 = v19 >> 1, (uint64_t)(v19 >> 1) < v17))
              {
                if (v16 <= v17) {
                  int64_t v21 = v16 + 2;
                }
                else {
                  int64_t v21 = v16;
                }
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v21, 1, v9);
                unint64_t v19 = *((void *)v9 + 3);
                unint64_t v20 = v19 >> 1;
              }
              unint64_t v22 = *((void *)v9 + 2);
              unint64_t v23 = v22 + 1;
              if (v20 <= v22)
              {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v22 + 1, 1, v9);
                unint64_t v19 = *((void *)v9 + 3);
                unint64_t v20 = v19 >> 1;
              }
              *((void *)v9 + 2) = v23;
              uint64_t v24 = &v9[v22];
              char v25 = 46;
              goto LABEL_119;
            case 2:
              if (v15 == 47)
              {
LABEL_41:
                int v8 = 0;
                goto LABEL_9;
              }
              int64_t v44 = *((void *)v9 + 2);
              int64_t v45 = v44 + 3;
              if (__OFADD__(v44, 3)) {
                goto LABEL_149;
              }
              uint64_t v46 = (char *)swift_isUniquelyReferenced_nonNull_native();
              if (!v46 || (unint64_t v31 = *((void *)v9 + 3), v32 = v31 >> 1, (uint64_t)(v31 >> 1) < v45))
              {
                if (v44 <= v45) {
                  int64_t v47 = v44 + 3;
                }
                else {
                  int64_t v47 = v44;
                }
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46, v47, 1, v9);
                unint64_t v31 = *((void *)v9 + 3);
                unint64_t v32 = v31 >> 1;
              }
              unint64_t v34 = *((void *)v9 + 2);
              unint64_t v35 = v34 + 1;
              if (v32 <= v34)
              {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v34 + 1, 1, v9);
                unint64_t v31 = *((void *)v9 + 3);
                unint64_t v32 = v31 >> 1;
              }
              *((void *)v9 + 2) = v35;
              unint64_t v36 = &v9[v34];
              char v37 = 46;
LABEL_84:
              v36[32] = v37;
              unint64_t v42 = v34 + 2;
              if ((uint64_t)v32 < (uint64_t)(v34 + 2))
              {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v34 + 2, 1, v9);
                unint64_t v31 = *((void *)v9 + 3);
                unint64_t v32 = v31 >> 1;
              }
              *((void *)v9 + 2) = v42;
              v9[v35 + 32] = 46;
              unint64_t v43 = v34 + 3;
              if ((uint64_t)v32 < (uint64_t)(v34 + 3)) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v34 + 3, 1, v9);
              }
              uint64_t v5 = 4 * v2;
LABEL_89:
              *((void *)v9 + 2) = v43;
              uint64_t v48 = &v9[v42];
              goto LABEL_122;
            case 3:
              if (v15 == 46)
              {
                int v8 = 4;
              }
              else if (v15 == 47)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
                }
                unint64_t v27 = *((void *)v9 + 2);
                unint64_t v26 = *((void *)v9 + 3);
                if (v27 >= v26 >> 1) {
                  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v9);
                }
                *((void *)v9 + 2) = v27 + 1;
                v9[v27 + 32] = 47;
                int v8 = 3;
              }
              else
              {
                int64_t v58 = *((void *)v9 + 2);
                int64_t v59 = v58 + 2;
                if (__OFADD__(v58, 2)) {
                  goto LABEL_153;
                }
                uint64_t v60 = (char *)swift_isUniquelyReferenced_nonNull_native();
                if (!v60 || (unint64_t v19 = *((void *)v9 + 3), v20 = v19 >> 1, (uint64_t)(v19 >> 1) < v59))
                {
                  if (v58 <= v59) {
                    int64_t v61 = v58 + 2;
                  }
                  else {
                    int64_t v61 = v58;
                  }
                  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60, v61, 1, v9);
                  unint64_t v19 = *((void *)v9 + 3);
                  unint64_t v20 = v19 >> 1;
                }
                unint64_t v22 = *((void *)v9 + 2);
                unint64_t v23 = v22 + 1;
                if (v20 <= v22)
                {
                  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v22 + 1, 1, v9);
                  unint64_t v19 = *((void *)v9 + 3);
                  unint64_t v20 = v19 >> 1;
                }
                *((void *)v9 + 2) = v23;
                uint64_t v24 = &v9[v22];
                char v25 = 47;
LABEL_119:
                v24[32] = v25;
                int64_t v57 = v22 + 2;
                if ((uint64_t)v20 < v57) {
                  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v57, 1, v9);
                }
LABEL_121:
                *((void *)v9 + 2) = v57;
                uint64_t v48 = &v9[v23];
LABEL_122:
                v48[32] = v15;
                int v8 = 6;
              }
LABEL_9:
              if (v5 != v10 >> 14) {
                continue;
              }
              switch(v8)
              {
                case 3:
                case 4:
                  goto LABEL_127;
                case 5:
                  uint64_t v68 = *((void *)v9 + 2);
                  break;
                default:
                  goto LABEL_132;
              }
              do
              {
                if (!v68) {
                  break;
                }
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  uint64_t v69 = *((void *)v9 + 2);
                  if (!v69) {
                    goto LABEL_145;
                  }
                }
                else
                {
                  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
                  uint64_t v69 = *((void *)v9 + 2);
                  if (!v69)
                  {
LABEL_145:
                    __break(1u);
                    goto LABEL_146;
                  }
                }
                uint64_t v68 = v69 - 1;
                int v70 = v9[v68 + 32];
                *((void *)v9 + 2) = v68;
              }
              while (v70 != 47);
LABEL_127:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
              }
              unint64_t v63 = *((void *)v9 + 2);
              unint64_t v62 = *((void *)v9 + 3);
              if (v63 >= v62 >> 1) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v9);
              }
              *((void *)v9 + 2) = v63 + 1;
              v9[v63 + 32] = 47;
LABEL_132:
              if (swift_isUniquelyReferenced_nonNull_native()) {
                goto LABEL_133;
              }
              goto LABEL_154;
            case 4:
              if (v15 == 46)
              {
                int v8 = 5;
                goto LABEL_9;
              }
              if (v15 == 47)
              {
LABEL_8:
                int v8 = 3;
                goto LABEL_9;
              }
              int64_t v28 = *((void *)v9 + 2);
              int64_t v29 = v28 + 3;
              if (__OFADD__(v28, 3)) {
                goto LABEL_152;
              }
              Swift::String v30 = (char *)swift_isUniquelyReferenced_nonNull_native();
              if (!v30 || (unint64_t v31 = *((void *)v9 + 3), v32 = v31 >> 1, (uint64_t)(v31 >> 1) < v29))
              {
                if (v28 <= v29) {
                  int64_t v33 = v28 + 3;
                }
                else {
                  int64_t v33 = v28;
                }
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30, v33, 1, v9);
                unint64_t v31 = *((void *)v9 + 3);
                unint64_t v32 = v31 >> 1;
              }
              unint64_t v34 = *((void *)v9 + 2);
              unint64_t v35 = v34 + 1;
              if (v32 <= v34)
              {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v34 + 1, 1, v9);
                unint64_t v31 = *((void *)v9 + 3);
                unint64_t v32 = v31 >> 1;
              }
              *((void *)v9 + 2) = v35;
              unint64_t v36 = &v9[v34];
              char v37 = 47;
              goto LABEL_84;
            case 5:
              int64_t v38 = *((void *)v9 + 2);
              if (v15 == 47)
              {
                while (1)
                {
                  if (!v38) {
                    goto LABEL_8;
                  }
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
                    uint64_t v39 = *((void *)v9 + 2);
                    if (!v39) {
                      goto LABEL_146;
                    }
                  }
                  else
                  {
                    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
                    uint64_t v39 = *((void *)v9 + 2);
                    if (!v39)
                    {
LABEL_146:
                      __break(1u);
                      goto LABEL_147;
                    }
                  }
                  int64_t v38 = v39 - 1;
                  int v40 = v9[v39 + 31];
                  *((void *)v9 + 2) = v38;
                  if (v40 == 47) {
                    goto LABEL_8;
                  }
                }
              }
              int64_t v49 = v38 + 4;
              if (__OFADD__(v38, 4)) {
                goto LABEL_150;
              }
              char v50 = (char *)swift_isUniquelyReferenced_nonNull_native();
              if (!v50 || (unint64_t v51 = *((void *)v9 + 3), v52 = v51 >> 1, (uint64_t)(v51 >> 1) < v49))
              {
                if (v38 <= v49) {
                  int64_t v53 = v38 + 4;
                }
                else {
                  int64_t v53 = v38;
                }
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50, v53, 1, v9);
                unint64_t v51 = *((void *)v9 + 3);
                int64_t v52 = v51 >> 1;
              }
              unint64_t v54 = *((void *)v9 + 2);
              unint64_t v55 = v54 + 1;
              if (v52 <= v54)
              {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v54 + 1, 1, v9);
                unint64_t v51 = *((void *)v9 + 3);
                int64_t v52 = v51 >> 1;
              }
              *((void *)v9 + 2) = v55;
              v9[v54 + 32] = 47;
              unint64_t v56 = v54 + 2;
              if (v52 < (uint64_t)(v54 + 2))
              {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v54 + 2, 1, v9);
                unint64_t v51 = *((void *)v9 + 3);
                int64_t v52 = v51 >> 1;
              }
              *((void *)v9 + 2) = v56;
              v9[v55 + 32] = 46;
              unint64_t v23 = v54 + 3;
              if (v52 < (uint64_t)(v54 + 3))
              {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v54 + 3, 1, v9);
                unint64_t v51 = *((void *)v9 + 3);
                int64_t v52 = v51 >> 1;
              }
              *((void *)v9 + 2) = v23;
              v9[v56 + 32] = 46;
              int64_t v57 = v54 + 4;
              if (v52 < (uint64_t)(v54 + 4)) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v54 + 4, 1, v9);
              }
              uint64_t v5 = 4 * v2;
              goto LABEL_121;
            case 6:
              if (v15 != 47) {
                goto LABEL_70;
              }
              goto LABEL_8;
            default:
              if (v15 == 46)
              {
                int v8 = 1;
                goto LABEL_9;
              }
              if (v15 == 47) {
                goto LABEL_8;
              }
LABEL_70:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
              }
              unint64_t v42 = *((void *)v9 + 2);
              unint64_t v41 = *((void *)v9 + 3);
              unint64_t v43 = v42 + 1;
              if (v42 >= v41 >> 1) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v9);
              }
              goto LABEL_89;
          }
        }
      }
      if ((a2 & 0x1000000000000000) != 0) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
    break;
  }
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
LABEL_133:
  unint64_t v65 = *((void *)v9 + 2);
  unint64_t v64 = *((void *)v9 + 3);
  if (v65 >= v64 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v9);
  }
  *((void *)v9 + 2) = v65 + 1;
  v9[v65 + 32] = 0;
  uint64_t v66 = specialized String.init(cString:)((uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v66;
}

uint64_t specialized String.init(cString:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3) {
      return static String._fromUTF8Repairing(_:)();
    }
    uint64_t v4 = 0;
    uint64_t v5 = v1 - 1;
    uint64_t v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++)) {
        return static String._fromUTF8Repairing(_:)();
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t String._droppingTrailingSlashes.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unint64_t v4 = String.index(before:)();
    if (String.subscript.getter() == 47 && v5 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
LABEL_21:
        swift_bridgeObjectRetain();
        String.index(after:)();
        uint64_t v12 = String.subscript.getter();
        uint64_t v14 = v13;
        uint64_t v16 = v15;
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();
        uint64_t v2 = MEMORY[0x185301F50](v12, v14, v16, v18);
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    if (v4 >= 0x4000)
    {
      do
      {
        unint64_t v8 = String.index(before:)();
        if (String.subscript.getter() == 47 && v9 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v11 & 1) == 0) {
            goto LABEL_21;
          }
        }
      }
      while (v8 >= 0x4000);
      return 47;
    }
    else
    {
      return 47;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v2;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t NSFileManager._shouldRemoveItemAtPath(_:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_msgSend(v2, sel__safeDelegate);
  if (!v5) {
    return 1;
  }
  char v6 = v5;
  if ((objc_msgSend(v5, sel_respondsToSelector_, sel_fileManager_shouldRemoveItemAtURL_) & 1) == 0)
  {
    if (objc_msgSend(v6, sel_respondsToSelector_, sel_fileManager_shouldRemoveItemAtPath_))
    {
      uint64_t v9 = String._bridgeToObjectiveCImpl()();
      id v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_fileManager_shouldRemoveItemAtPath_, v2, v9);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      return (uint64_t)v8;
    }
    swift_unknownObjectRelease();
    return 1;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v11);
  char v7 = v11;
  id v8 = objc_msgSend(v6, sel_fileManager_shouldRemoveItemAtURL_, v2, v11);

  swift_unknownObjectRelease_n();
  swift_release();
  swift_release();
  return (uint64_t)v8;
}

uint64_t type metadata accessor for _FileOperations._FileRemoveContext()
{
  return self;
}

unint64_t specialized static Platform.getUGIDs(allowEffectiveRootUID:)(char a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (one-time initialization token for _canChangeUIDs != -1) {
    swift_once();
  }
  if (_canChangeUIDs)
  {
    *(void *)id v5 = 0;
    if (pthread_getugid_np(&v5[1], v5))
    {
      v5[1] = geteuid();
      uint64_t v2 = getegid();
      Swift::UInt32 v3 = v5[1];
      if (a1) {
        return v3 | (unint64_t)(v2 << 32);
      }
    }
    else
    {
      uint64_t v2 = v5[0];
      Swift::UInt32 v3 = v5[1];
      if (a1) {
        return v3 | (unint64_t)(v2 << 32);
      }
    }
    goto LABEL_12;
  }
  if (one-time initialization token for _cachedUGIDs != -1) {
    swift_once();
  }
  Swift::UInt32 v3 = _cachedUGIDs._0;
  uint64_t v2 = _cachedUGIDs._1;
  if ((a1 & 1) == 0)
  {
LABEL_12:
    if (!v3) {
      Swift::UInt32 v3 = getuid();
    }
  }
  return v3 | (unint64_t)(v2 << 32);
}

void NSNotificationCenter.Notifications.makeAsyncIterator()(void *a1@<X8>)
{
  *a1 = v1;
}

void static MeasurementFormatUnitUsage<>.snowfall.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t destroy for _XMLPlistEncodingFormat.Reference(uint64_t a1)
{
  return outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t NSEnumerator.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(unsigned char *)(a1 + 216) = 0;
  return swift_unknownObjectRetain();
}

ValueMetadata *type metadata accessor for Date.FormatStyle.DateStyle()
{
  return &type metadata for Date.FormatStyle.DateStyle;
}

ValueMetadata *type metadata accessor for JSONMap.Value()
{
  return &type metadata for JSONMap.Value;
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance _PlistDecoder<A>()
{
  WeekendRange.start.getter();

  return swift_bridgeObjectRetain();
}

uint64_t WeekendRange.start.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

uint64_t type metadata completion function for AsyncLineSequence()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration()
{
  return &type metadata for PredicateCodableConfiguration;
}

uint64_t _convertNSErrorToError(_:)(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (uint64_t)a1;
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    uint64_t v2 = _nilObjCError;
    id v3 = (id)_nilObjCError;
  }
  id v4 = a1;
  return v2;
}

id _NSLocalizedStringResourceSwiftWrapper.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v4 = v1;
  if (objc_msgSend(a1, sel_allowsKeyedCoding)
    && (uint64_t v5 = specialized NSCoder.decodeObject<A>(of:forKey:)(0xD000000000000020, 0x80000001823B08E0, (unint64_t *)&lazy cache variable for type metadata for NSData)) != 0)
  {
    uint64_t v6 = (void *)v5;
    type metadata accessor for PropertyListDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = MEMORY[0x1E4FBC868];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = 0;
    *(void *)(inited + 24) = v8;
    id v9 = specialized Data.init(referencing:)(v6);
    unint64_t v11 = v10;
    specialized PropertyListDecoder.decode<A>(_:from:format:)((uint64_t)v9, v10, (uint64_t)v24, (uint64_t)&v25);
    swift_release();

    outlined consume of Data._Representation((uint64_t)v9, v11);
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v31;
    long long v16 = v26;
    long long v17 = v30;
    long long v18 = v29;
    long long v19 = v32;
    long long v20 = v33;
    int64_t v21 = &v4[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
    *(void *)int64_t v21 = v25;
    *(_OWORD *)(v21 + 8) = v16;
    *((void *)v21 + 3) = v13;
    *((void *)v21 + 4) = v14;
    *(_OWORD *)(v21 + 40) = v18;
    *(_OWORD *)(v21 + 56) = v17;
    *((void *)v21 + 9) = v15;
    *((_OWORD *)v21 + 5) = v19;
    *((_OWORD *)v21 + 6) = v20;

    v23.receiver = v4;
    v23.super_class = ObjectType;
    id v22 = objc_msgSendSuper2(&v23, sel_init);
  }
  else
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v22;
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return self;
}

uint64_t specialized PropertyListDecoder.decode<A>(_:from:format:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = v4;
  long long v18 = specialized closure #1 in PropertyListDecoder.decode<A>(_:from:format:);
  uint64_t v19 = 0;
  uint64_t v20 = a3;
  uint64_t v12 = v4;
  uint64_t v13 = specialized closure #1 in PropertyListDecoder.decode<A>(_:from:format:);
  uint64_t v14 = 0;
  uint64_t v15 = a3;
  uint64_t v7 = v4;
  uint64_t v8 = a3;
  id v9 = specialized closure #1 in PropertyListDecoder.decode<A>(_:from:format:);
  uint64_t v10 = 0;
  return specialized static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))partial apply for specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v16, (void *(*)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))partial apply for specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v11, (void (*)(id))partial apply for specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)&v6, a4);
}

uint64_t specialized static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, void *(*a5)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(id)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v13[13] = *MEMORY[0x1E4F143B8];
  v13[4] = a3;
  v13[5] = a4;
  void v13[7] = a5;
  v13[8] = a6;
  _OWORD v13[9] = a7;
  void v13[10] = a8;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL), (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:));
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      swift_retain();
      swift_retain();
      _s10Foundation4DataV10LargeSliceV15withUnsafeBytesyxxSWKXEKlFAA23LocalizedStringResourceV_Tg5015_s10Foundation4b56V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23hiJ5V_Tg5AA0N4ViewVys0S0VGxs5Error_pRi_zRi0_zlyAHIsgyrzo_Tf1ncn_n(a1, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL), (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:));
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v13, 0, 14);
      unint64_t v11 = (char *)v13;
      goto LABEL_7;
    default:
      v13[0] = a1;
      LOWORD(v13[1]) = a2;
      BYTE2(v13[1]) = BYTE2(a2);
      BYTE3(v13[1]) = BYTE3(a2);
      BYTE4(v13[1]) = BYTE4(a2);
      BYTE5(v13[1]) = BYTE5(a2);
      unint64_t v11 = (char *)v13 + BYTE6(a2);
LABEL_7:
      uint64_t result = _s10Foundation4DataV14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23LocalizedStringResourceV_Tg50102_s10Foundation19PropertyListDecoderC30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4b7V_xAA10de4Vys5f45VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_AA23ghI5V_Tg5AIxs5Error_pRi_zRi0_zlyAKIsgyrzo_AA0lmN0CXMTAIxsAM_pRi_zRi0_zlyAKIsgyrzo_SS05UTF16E0VxsAM_pRi_zRi0_zlyAKIsggrzo_AOXDXMTTf1nnc_n((uint64_t)v13, (uint64_t)v11, a3, a5, a7, a9);
      break;
  }
  return result;
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n(uint64_t result, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4 = a3[2];
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = a3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    if (!__OFSUB__(a2, result)) {
      __break(1u);
    }
    goto LABEL_13;
  }
  if (!__OFSUB__(a2, result))
  {
    if (a3[3] >= a2 - result) {
      a2 -= result;
    }
    else {
      a2 = a3[3];
    }
    if ((a2 & 0x8000000000000000) == 0) {
      return a4(v4 + v7);
    }
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16), *(void *(**)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))(v3 + 40), *(void (**)(id))(v3 + 56), a3);
}

uint64_t specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t)@<X5>, void (*a5)(id)@<X7>, uint64_t a6@<X8>)
{
  if (a2 >= 41 && *(_DWORD *)a1 == 1768714338 && *(_DWORD *)(a1 + 3) == 812938089) {
    return a3(a1, a2);
  }
  uint64_t result = static PropertyListDecoder.detectEncoding(of:)((uint64_t *)&v27, (unsigned __int8 *)a1, a2);
  if (!v6)
  {
    if (result > a2)
    {
      __break(1u);
    }
    else
    {
      uint64_t v14 = v27;
      uint64_t v15 = (char *)(a1 + result);
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t v16 = a2 - result;
      long long v28 = 0u;
      memset(v29, 0, sizeof(v29));
      long long v27 = 0u;
      uint64_t result = (uint64_t)_s10Foundation19PropertyListDecoderC22withUTF8Representation2of14sourceEncoding_xAA10BufferViewVys5UInt8VG_SSAAE0J0VxAKKXEtKlFZyt_TBm5016_s10Foundation19bcd78C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xAA10kl4Vys5M82VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Tg5AA23LocalizedStringResourceVSgAKxs5Error_pRi_zRi0_zlyAPIsgyrzo_Tf1nnnc_n((unsigned __int8 *)(a1 + result), v16, v14, (uint64_t)&v27, a4);
      uint64_t v17 = *((void *)&v27 + 1);
      if (*((void *)&v27 + 1))
      {
        uint64_t v18 = *((void *)&v29[2] + 1);
        uint64_t v19 = *(void *)&v29[0];
        long long v20 = v28;
        *(void *)a6 = v27;
        *(void *)(a6 + 8) = v17;
        *(_OWORD *)(a6 + 16) = v20;
        *(void *)(a6 + 32) = v19;
        *(_OWORD *)(a6 + 40) = *(_OWORD *)((char *)v29 + 8);
        *(_OWORD *)(a6 + 56) = *(_OWORD *)((char *)&v29[1] + 8);
        *(void *)(a6 + 72) = v18;
        long long v21 = v31;
        *(_OWORD *)(a6 + 80) = v30;
        *(_OWORD *)(a6 + 96) = v21;
      }
      else
      {
        id v22 = specialized String.init<A>(bytes:encoding:)(v15, v16, v14);
        if (v23)
        {
          a5(v22);
          return swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v24 = type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v26 = v25;
          _CodingPathNode.path.getter(0x8000000000000000);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA78], v24);
          swift_willThrow();
          return outlined consume of LocalizedStringResource?(v27, 0, v28, *((uint64_t *)&v28 + 1), *(uint64_t *)&v29[0], *((uint64_t *)&v29[0] + 1), *(uint64_t *)&v29[1], *((uint64_t *)&v29[1] + 1), *(uint64_t *)&v29[2], *((void **)&v29[2] + 1));
        }
      }
    }
  }
  return result;
}

void partial apply for specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(void *)(v3 + 16), *(void (**)(uint64_t *__return_ptr, void *))(v3 + 24), *(void **)(v3 + 40), a3);
}

ValueMetadata *type metadata accessor for Date.FormatStyle.TimeStyle()
{
  return &type metadata for Date.FormatStyle.TimeStyle;
}

void static Date.distantFuture.getter(void *a1@<X8>)
{
  *a1 = 0x422D63C37F000000;
}

uint64_t NSNotificationCenter.Publisher.init(center:name:object:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void sub_18191C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

uint64_t AttributeContainer.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  specialized AttributeContainer.subscript.setter(a1, *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8), a3);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t specialized AttributeContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v21[-v12 - 8];
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16);
  v14(&v21[-v12 - 8], a1, v6, v11);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v14)(v9, v13, v6);
  unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  unint64_t v17 = v16;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v9, a2, a3, (uint64_t)v21);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v21, v15, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v18(v9, v6);
  return ((uint64_t (*)(unsigned char *, uint64_t))v18)(v13, v6);
}

void AttributeContainer.init<A>(_:including:)(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v98 = a3;
  uint64_t v4 = static AttributeScope.scopeDescription.getter(a2);
  swift_bridgeObjectRelease();
  int64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 64);
  long long v131 = MEMORY[0x1E4FBC868];
  uint64_t v100 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  uint64_t v10 = (char *)&v122 + 8;
  double v11 = &v130;
  int64_t v107 = (unint64_t)(v7 + 63) >> 6;
  int64_t v97 = v107 - 1;
  uint64_t v99 = MEMORY[0x1E4FBC838] + 8;
  uint64_t v103 = a1;
  Swift::String v104 = v4;
  Swift::String v102 = (char *)&v122 + 8;
  uint64_t v101 = &v130;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      uint64_t v13 = (v9 - 1) & v9;
      unint64_t v14 = v12 | (v5 << 6);
LABEL_9:
      uint64_t v15 = *(void *)(a1 + 56);
      *(void *)&long long v122 = *(void *)(*(void *)(a1 + 48) + 8 * v14);
      unint64_t v16 = (void *)v122;
      outlined init with copy of Any(v15 + 32 * v14, (uint64_t)v10);
      id v17 = v16;
      goto LABEL_19;
    }
    int64_t v18 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v18 < v107)
    {
      unint64_t v19 = *(void *)(v100 + 8 * v18);
      if (v19) {
        goto LABEL_13;
      }
      v5 += 2;
      if (v18 + 1 >= v107)
      {
        int64_t v5 = v18;
      }
      else
      {
        unint64_t v19 = *(void *)(v100 + 8 * v5);
        if (v19) {
          goto LABEL_16;
        }
        int64_t v74 = v18 + 2;
        if (v18 + 2 < v107)
        {
          unint64_t v19 = *(void *)(v100 + 8 * v74);
          if (v19) {
            goto LABEL_44;
          }
          int64_t v5 = v18 + 3;
          if (v18 + 3 >= v107)
          {
            int64_t v5 = v18 + 2;
          }
          else
          {
            unint64_t v19 = *(void *)(v100 + 8 * v5);
            if (v19)
            {
LABEL_16:
              int64_t v18 = v5;
LABEL_13:
              uint64_t v13 = (v19 - 1) & v19;
              unint64_t v14 = __clz(__rbit64(v19)) + (v18 << 6);
              int64_t v5 = v18;
              goto LABEL_9;
            }
            int64_t v74 = v18 + 4;
            if (v18 + 4 < v107)
            {
              unint64_t v19 = *(void *)(v100 + 8 * v74);
              if (!v19)
              {
                while (1)
                {
                  int64_t v18 = v74 + 1;
                  if (__OFADD__(v74, 1)) {
                    goto LABEL_73;
                  }
                  if (v18 >= v107)
                  {
                    int64_t v5 = v97;
                    goto LABEL_18;
                  }
                  unint64_t v19 = *(void *)(v100 + 8 * v18);
                  ++v74;
                  if (v19) {
                    goto LABEL_13;
                  }
                }
              }
LABEL_44:
              int64_t v18 = v74;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v13 = 0;
    *(void *)&long long v124 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
LABEL_19:
    outlined init with take of LocalePreferences?((uint64_t)&v122, (uint64_t)&v129, &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    id v20 = v129;
    if (!v129)
    {
      swift_bridgeObjectRelease();
      swift_release();
      *uint64_t v98 = v131;
      return;
    }
    unint64_t v132 = v13;
    outlined init with take of Any(v11, &v127);
    id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    if (!v4[2])
    {
      swift_bridgeObjectRelease();
LABEL_5:
      unint64_t v9 = v132;
      goto LABEL_6;
    }
    int64_t v118 = v5;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21, v22);
    if ((v24 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      int64_t v5 = v118;
      goto LABEL_5;
    }
    id v113 = v20;
    uint64_t v25 = (uint64_t *)(v4[7] + 16 * v23);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    swift_bridgeObjectRelease();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v29 = type metadata accessor for Optional();
    id v112 = &v96;
    uint64_t v117 = *(void *)(v29 - 8);
    uint64_t v114 = *(void *)(v117 + 64);
    MEMORY[0x1F4188790](v29);
    Swift::String v115 = (char *)&v96 - v30;
    uint64_t v31 = v128;
    long long v32 = __swift_project_boxed_opaque_existential_1(&v127, v128);
    uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v34 = *(void *)(*(void *)(v31 - 8) + 64);
    uint64_t v111 = v26;
    if (isClassOrObjCExistentialType)
    {
      if (v34 != 8) {
        goto LABEL_70;
      }
      uint64_t v35 = *v32;
      swift_unknownObjectRetain();
    }
    else
    {
      double v75 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
      (*(void (**)(char *, uint64_t *, uint64_t, double))(v77 + 16))((char *)&v96 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v31, v75);
      uint64_t v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    uint64_t v36 = swift_conformsToProtocol2();
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = v27;
    if (v36) {
      uint64_t v39 = v27;
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v116 = v29;
    if (v39)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v40 = swift_dynamicCastUnknownClass();
      if (v40)
      {
        uint64_t v41 = v40;
        uint64_t v42 = swift_getAssociatedTypeWitness();
        double v43 = MEMORY[0x1F4188790](v42);
        uint64_t v44 = v106;
        (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v37 + 32))(v41, v39, v37, v43);
        uint64_t v106 = v44;
        if (v44)
        {
          swift_unknownObjectRelease();
LABEL_68:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_willThrow();

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v127);
          swift_release();
          return;
        }
        int64_t v45 = v115;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
        goto LABEL_38;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v78 = objc_allocWithZone((Class)NSError);
      uint64_t v79 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v80 = objc_msgSend(v78, sel_initWithDomain_code_userInfo_, v79, 4866, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v81 = objc_msgSend(v80, sel_domain);
      id v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      uint64_t v84 = v83;

      if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v84 == v85) {
        goto LABEL_63;
      }
      char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v94) {
        goto LABEL_67;
      }
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    uint64_t v110 = &v96;
    uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
    MEMORY[0x1F4188790](v36);
    uint64_t v48 = (char *)&v96 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v109 = &v96;
    *(void *)&long long v122 = v35;
    MEMORY[0x1F4188790](v49);
    unint64_t v51 = (char *)&v96 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_unknownObjectRetain();
    char v52 = swift_dynamicCast();
    int64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
    if ((v52 & 1) == 0) {
      break;
    }
    v53(v51, 0, 1, AssociatedTypeWitness);
    unint64_t v54 = *(void (**)(void))(v46 + 32);
    ((void (*)(char *, char *, uint64_t))v54)(v48, v51, AssociatedTypeWitness);
    int64_t v45 = v115;
    v54();
    swift_unknownObjectRelease();
LABEL_38:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v45, 0, 1, AssociatedTypeWitness);
    uint64_t v55 = v111;
    unint64_t v56 = v45;
    uint64_t v57 = v38;
    uint64_t v109 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v111 + 24))(v38, v111);
    uint64_t v110 = (uint64_t *)v58;
    uint64_t v108 = &v96;
    unint64_t v59 = (*(void *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x1F4188790](v109);
    id v105 = (char *)&v96 - v59;
    double v61 = MEMORY[0x1F4188790](v60);
    unint64_t v63 = (char *)&v96 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t, double))(v117 + 16))(v63, v56, v116, v61);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v63, 1, AssociatedTypeWitness) == 1)
    {
      uint64_t v64 = v117;
      uint64_t v65 = v116;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v63, v116);
      uint64_t v126 = 0;
      long long v124 = 0u;
      long long v125 = 0u;
      long long v122 = 0u;
      long long v123 = 0u;
      uint64_t v4 = v104;
      uint64_t v10 = v102;
      double v11 = v101;
    }
    else
    {
      uint64_t v66 = v105;
      uint64_t v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 32))(v105, v63, AssociatedTypeWitness);
      double v68 = MEMORY[0x1F4188790](v67);
      uint64_t v69 = (char *)&v96 - v59;
      int v70 = *(void (**)(char *, char *, uint64_t, double))(v46 + 16);
      v70((char *)&v96 - v59, v66, AssociatedTypeWitness, v68);
      *((void *)&v120 + 1) = AssociatedTypeWitness;
      *(void *)&v121[0] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v119);
      ((void (*)(uint64_t *, char *, uint64_t))v70)(boxed_opaque_existential_1, (char *)&v96 - v59, AssociatedTypeWitness);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v55 + 32))(&v122, v57, v55);
      *(_OWORD *)((char *)v121 + 8) = v122;
      BYTE8(v121[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 40))(v57, v55) & 1;
      uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 48))(v57, v55);
      unint64_t v73 = *(void (**)(char *, uint64_t))(v46 + 8);
      v73(v69, AssociatedTypeWitness);
      uint64_t v126 = v72;
      long long v124 = v121[0];
      long long v125 = v121[1];
      long long v122 = v119;
      long long v123 = v120;
      v73(v66, AssociatedTypeWitness);
      uint64_t v4 = v104;
      uint64_t v10 = v102;
      double v11 = v101;
      uint64_t v65 = v116;
      uint64_t v64 = v117;
    }
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v122, (unint64_t)v109, (unint64_t)v110);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v115, v65);
    a1 = v103;
    int64_t v5 = v118;
    unint64_t v9 = v132;
    id v20 = v113;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v127);
  }
  v53(v51, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v51, v116);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v86 = objc_allocWithZone((Class)NSError);
  uint64_t v87 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v88 = objc_msgSend(v86, sel_initWithDomain_code_userInfo_, v87, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v89 = objc_msgSend(v88, sel_domain);
  id v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
  uint64_t v92 = v91;

  if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v92 == v93)
  {
LABEL_63:
    swift_bridgeObjectRelease_n();
    goto LABEL_67;
  }
  char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v95)
  {
LABEL_67:
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_68;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
}

void AttributeContainer.subscript.modify(uint64_t **a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = (*a1)[3];
  if (v2)
  {
    unint64_t v3 = v1[2];
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v5, v3, v2);
  }
  else
  {
    uint64_t v4 = *v1;
    LOBYTE(v5[0]) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v4, (char *)v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(uint64_t a1, char *a2)
{
  char v3 = *a2;
  uint64_t v23 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  unint64_t v9 = &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v8 << 6);
LABEL_7:
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = (void *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v14 = v13[1];
      *(void *)&long long v27 = *v13;
      *((void *)&v27 + 1) = v14;
      outlined init with copy of AttributedString._AttributeValue(v12 + 72 * v11, (uint64_t)&v28);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v15 < v24)
    {
      unint64_t v16 = *(void *)(v23 + 8 * v15);
      if (v16) {
        goto LABEL_11;
      }
      int64_t v17 = v8 + 2;
      ++v8;
      if (v15 + 1 < v24)
      {
        unint64_t v16 = *(void *)(v23 + 8 * v17);
        if (v16) {
          goto LABEL_14;
        }
        int64_t v8 = v15 + 1;
        if (v15 + 2 < v24)
        {
          unint64_t v16 = *(void *)(v23 + 8 * (v15 + 2));
          if (v16)
          {
            v15 += 2;
            goto LABEL_11;
          }
          int64_t v17 = v15 + 3;
          int64_t v8 = v15 + 2;
          if (v15 + 3 < v24) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = 0;
    uint64_t v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
LABEL_26:
    outlined init with take of LocalePreferences?((uint64_t)&v27, (uint64_t)&v33, v9);
    unint64_t v18 = v34;
    if (!v34) {
      return swift_release();
    }
    unint64_t v19 = v33;
    long long v29 = v37;
    long long v30 = v38;
    *(void *)&long long v31 = v39;
    long long v27 = v35;
    long long v28 = v36;
    if (v3)
    {
      id v20 = v9;
      if (*(void *)(*(void *)v25 + 16)
        && (swift_bridgeObjectRetain(),
            specialized __RawDictionaryStorage.find<A>(_:)(v19, v18),
            char v22 = v21,
            swift_bridgeObjectRelease(),
            (v22 & 1) != 0))
      {
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v9 = v20;
      }
      else
      {
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v27, (uint64_t)v26);
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v19, v18);
        swift_bridgeObjectRelease();
        uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
        unint64_t v9 = v20;
      }
    }
    else
    {
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v27, (uint64_t)v26);
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v19, v18);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
    }
  }
  unint64_t v16 = *(void *)(v23 + 8 * v17);
  if (v16)
  {
LABEL_14:
    int64_t v15 = v17;
LABEL_11:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_7;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v24)
    {
      int64_t v8 = v24 - 1;
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v23 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_11;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 40) = *v5;
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)v5;
    *(void *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t ScopedAttributeContainer.subscript.setter(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a2;
  uint64_t v6 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v22 - v11;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))((char *)v22 - v11, a1, v8, v10);
  v22[0] = *(void *)(a4 + 24);
  unint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t))v22[0])(v6, a4);
  unint64_t v15 = v14;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v12, v6, a4, (uint64_t)v23);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v23, v13, v15);
  swift_bridgeObjectRelease();
  unint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(a1, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v17 = ((uint64_t (*)(uint64_t, uint64_t))v22[0])(v6, a4);
    uint64_t v19 = v18;
    swift_release();
    v16(a1, v8);
    uint64_t v20 = v22[2];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v20 + 16) = v17;
    *(void *)(v20 + 24) = v19;
  }
  else
  {
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v16)(a1, v8);
  }
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.subscript.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = v3;
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v93, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((void *)&v94 + 1))
  {
    outlined destroy of Any?((uint64_t)&v93, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = *v3;
      *char v3 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v24 = v23;
        goto LABEL_10;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      uint64_t v57 = static _DictionaryStorage.copy(original:)();
      uint64_t v24 = v57;
      if (!*(void *)(v23 + 16)) {
        goto LABEL_80;
      }
      unint64_t v58 = (char *)(v57 + 64);
      __src = (char *)(v23 + 64);
      unint64_t v59 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
      if (v24 != v23 || v58 >= &__src[8 * v59]) {
        memmove(v58, __src, 8 * v59);
      }
      int64_t v83 = 0;
      *(void *)(v24 + 16) = *(void *)(v23 + 16);
      uint64_t v60 = 1 << *(unsigned char *)(v23 + 32);
      uint64_t v61 = -1;
      if (v60 < 64) {
        uint64_t v61 = ~(-1 << v60);
      }
      unint64_t v87 = v61 & *(void *)(v23 + 64);
      int64_t v79 = (unint64_t)(v60 + 63) >> 6;
      while (1)
      {
        if (v87)
        {
          unint64_t v62 = __clz(__rbit64(v87));
          v87 &= v87 - 1;
          unint64_t v63 = v62 | (v83 << 6);
        }
        else
        {
          int64_t v73 = v83 + 1;
          if (__OFADD__(v83, 1))
          {
LABEL_82:
            __break(1u);
            goto LABEL_83;
          }
          if (v73 >= v79) {
            goto LABEL_80;
          }
          unint64_t v74 = *(void *)&__src[8 * v73];
          int64_t v75 = v83 + 1;
          if (!v74)
          {
            int64_t v75 = v83 + 2;
            if (v83 + 2 >= v79) {
              goto LABEL_80;
            }
            unint64_t v74 = *(void *)&__src[8 * v75];
            if (!v74)
            {
              int64_t v75 = v83 + 3;
              if (v83 + 3 >= v79) {
                goto LABEL_80;
              }
              unint64_t v74 = *(void *)&__src[8 * v75];
              if (!v74)
              {
                int64_t v75 = v83 + 4;
                if (v83 + 4 >= v79) {
                  goto LABEL_80;
                }
                unint64_t v74 = *(void *)&__src[8 * v75];
                if (!v74)
                {
                  int64_t v75 = v83 + 5;
                  if (v83 + 5 >= v79) {
                    goto LABEL_80;
                  }
                  unint64_t v74 = *(void *)&__src[8 * v75];
                  if (!v74)
                  {
                    int64_t v75 = v83 + 6;
                    if (v83 + 6 >= v79) {
                      goto LABEL_80;
                    }
                    unint64_t v74 = *(void *)&__src[8 * v75];
                    if (!v74)
                    {
                      int64_t v76 = v83 + 7;
                      if (v83 + 7 >= v79) {
                        goto LABEL_80;
                      }
                      unint64_t v74 = *(void *)&__src[8 * v76];
                      if (!v74)
                      {
                        while (1)
                        {
                          int64_t v75 = v76 + 1;
                          if (__OFADD__(v76, 1)) {
                            goto LABEL_84;
                          }
                          if (v75 >= v79) {
                            break;
                          }
                          unint64_t v74 = *(void *)&__src[8 * v75];
                          ++v76;
                          if (v74) {
                            goto LABEL_79;
                          }
                        }
LABEL_80:
                        swift_bridgeObjectRelease();
LABEL_10:
                        swift_bridgeObjectRelease();
                        uint64_t v25 = *(void *)(v24 + 56) + 72 * v19;
                        long long v93 = *(_OWORD *)v25;
                        long long v27 = *(_OWORD *)(v25 + 32);
                        long long v26 = *(_OWORD *)(v25 + 48);
                        uint64_t v28 = *(void *)(v25 + 64);
                        long long v94 = *(_OWORD *)(v25 + 16);
                        long long v95 = v27;
                        uint64_t v97 = v28;
                        long long v96 = v26;
                        specialized _NativeDictionary._delete(at:)(v19, v24);
                        *uint64_t v5 = v24;
                        swift_bridgeObjectRelease();
LABEL_49:
                        AttributedString._AttributeStorage._attributeModified(_:old:new:)(a2, a3, (uint64_t)&v93, a1);
                        outlined destroy of Any?(a1, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        return outlined destroy of Any?((uint64_t)&v93, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      }
                      int64_t v75 = v83 + 7;
                    }
                  }
                }
              }
            }
          }
LABEL_79:
          unint64_t v87 = (v74 - 1) & v74;
          int64_t v83 = v75;
          unint64_t v63 = __clz(__rbit64(v74)) + (v75 << 6);
        }
        uint64_t v64 = 16 * v63;
        uint64_t v65 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v63);
        uint64_t v66 = v65[1];
        uint64_t v85 = *v65;
        uint64_t v67 = 72 * v63;
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v23 + 56) + 72 * v63, (uint64_t)&v93);
        double v68 = (void *)(*(void *)(v24 + 48) + v64);
        *double v68 = v85;
        v68[1] = v66;
        uint64_t v69 = *(void *)(v24 + 56) + v67;
        *(_OWORD *)uint64_t v69 = v93;
        long long v70 = v94;
        long long v71 = v95;
        long long v72 = v96;
        *(void *)(v69 + 64) = v97;
        *(_OWORD *)(v69 + 32) = v71;
        *(_OWORD *)(v69 + 48) = v72;
        *(_OWORD *)(v69 + 16) = v70;
        swift_bridgeObjectRetain();
      }
    }
    uint64_t v97 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    goto LABEL_49;
  }
  v91[2] = v95;
  v91[3] = v96;
  uint64_t v92 = v97;
  v91[0] = v93;
  v91[1] = v94;
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v91, (uint64_t)v89);
  char v9 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v88 = *v3;
  uint64_t v10 = *v3;
  *char v3 = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v4 = v11;
    if (*(void *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, v9);
      uint64_t v16 = v88;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v18 & 1)) {
        goto LABEL_85;
      }
      unint64_t v12 = v17;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_13:
      uint64_t v29 = *(void *)(v16 + 56) + 72 * v12;
      long long v93 = *(_OWORD *)v29;
      long long v30 = *(_OWORD *)(v29 + 16);
      long long v31 = *(_OWORD *)(v29 + 32);
      long long v32 = *(_OWORD *)(v29 + 48);
      uint64_t v97 = *(void *)(v29 + 64);
      long long v95 = v31;
      long long v96 = v32;
      long long v94 = v30;
      long long v33 = v89[1];
      long long v34 = v89[2];
      long long v35 = v89[3];
      *(void *)(v29 + 64) = v90;
      *(_OWORD *)(v29 + 32) = v34;
      *(_OWORD *)(v29 + 48) = v35;
      *(_OWORD *)uint64_t v29 = v89[0];
      *(_OWORD *)(v29 + 16) = v33;
LABEL_48:
      *uint64_t v5 = v16;
      swift_bridgeObjectRelease();
      outlined destroy of AttributedString._AttributeValue((uint64_t)v91);
      goto LABEL_49;
    }
    if (v9)
    {
      uint64_t v16 = v10;
      if (v11) {
        goto LABEL_13;
      }
LABEL_47:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, (uint64_t)v89, (void *)v16);
      uint64_t v97 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  uint64_t v36 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v36;
  if (!*(void *)(v10 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  long long v37 = (void *)(v36 + 64);
  unint64_t v38 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  if (v16 != v10 || (unint64_t)v37 >= v10 + 64 + 8 * v38) {
    memmove(v37, (const void *)(v10 + 64), 8 * v38);
  }
  int64_t v39 = 0;
  *(void *)(v16 + 16) = *(void *)(v10 + 16);
  uint64_t v40 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v41 = -1;
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  unint64_t v42 = v41 & *(void *)(v10 + 64);
  uint64_t v77 = v10 + 64;
  int64_t v78 = (unint64_t)(v40 + 63) >> 6;
  while (1)
  {
    if (v42)
    {
      uint64_t v84 = (v42 - 1) & v42;
      int64_t v86 = v39;
      unint64_t v43 = __clz(__rbit64(v42)) | (v39 << 6);
      goto LABEL_24;
    }
    int64_t v52 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
    if (v52 >= v78) {
      goto LABEL_46;
    }
    unint64_t v53 = *(void *)(v77 + 8 * v52);
    int64_t v54 = v39 + 1;
    if (!v53)
    {
      int64_t v54 = v39 + 2;
      if (v39 + 2 >= v78) {
        goto LABEL_46;
      }
      unint64_t v53 = *(void *)(v77 + 8 * v54);
      if (!v53)
      {
        int64_t v54 = v39 + 3;
        if (v39 + 3 >= v78) {
          goto LABEL_46;
        }
        unint64_t v53 = *(void *)(v77 + 8 * v54);
        if (!v53)
        {
          int64_t v54 = v39 + 4;
          if (v39 + 4 >= v78) {
            goto LABEL_46;
          }
          unint64_t v53 = *(void *)(v77 + 8 * v54);
          if (!v53)
          {
            int64_t v54 = v39 + 5;
            if (v39 + 5 >= v78) {
              goto LABEL_46;
            }
            unint64_t v53 = *(void *)(v77 + 8 * v54);
            if (!v53)
            {
              int64_t v54 = v39 + 6;
              if (v39 + 6 >= v78) {
                goto LABEL_46;
              }
              unint64_t v53 = *(void *)(v77 + 8 * v54);
              if (!v53) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    uint64_t v84 = (v53 - 1) & v53;
    int64_t v86 = v54;
    unint64_t v43 = __clz(__rbit64(v53)) + (v54 << 6);
LABEL_24:
    uint64_t v44 = 16 * v43;
    int64_t v45 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v43);
    __srca = (void *)v45[1];
    uint64_t v82 = *v45;
    uint64_t v46 = 72 * v43;
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v10 + 56) + 72 * v43, (uint64_t)&v93);
    uint64_t v47 = (void *)(*(void *)(v16 + 48) + v44);
    *uint64_t v47 = v82;
    v47[1] = __srca;
    uint64_t v48 = *(void *)(v16 + 56) + v46;
    *(_OWORD *)uint64_t v48 = v93;
    long long v49 = v94;
    long long v50 = v95;
    long long v51 = v96;
    *(void *)(v48 + 64) = v97;
    *(_OWORD *)(v48 + 32) = v50;
    *(_OWORD *)(v48 + 48) = v51;
    *(_OWORD *)(v48 + 16) = v49;
    swift_bridgeObjectRetain();
    unint64_t v42 = v84;
    int64_t v39 = v86;
  }
  uint64_t v55 = v39 + 7;
  if (v39 + 7 >= v78) {
    goto LABEL_46;
  }
  unint64_t v53 = *(void *)(v77 + 8 * v55);
  if (v53)
  {
    int64_t v54 = v39 + 7;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v54 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      break;
    }
    if (v54 >= v78) {
      goto LABEL_46;
    }
    unint64_t v53 = *(void *)(v77 + 8 * v54);
    ++v55;
    if (v53) {
      goto LABEL_45;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AttributedString._AttributeStorage._attributeModified(_:old:new:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v7 = a4;
  uint64_t v8 = a3;
  uint64_t v10 = *(void *)(a3 + 24);
  outlined init with copy of (Hashable & Sendable)?(a4, (uint64_t)v196, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  uint64_t v11 = v10 | v197;
  uint64_t result = outlined destroy of Any?((uint64_t)v196, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!v11) {
    return result;
  }
  outlined init with copy of (Hashable & Sendable)?(v7, (uint64_t)&v186, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  unint64_t v164 = v4;
  if (*((void *)&v187 + 1))
  {
    char v13 = AttributedString._AttributeValue.isInvalidatedOnAttributeChange.getter();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
    if (v13)
    {
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v186, a1, a2);
      goto LABEL_22;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v186, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  }
  uint64_t v5 = v6[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v16 = v14 & ~v15;
  if ((*(void *)(v5 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v17 = *(void *)(v5 + 48);
    char v18 = (void *)(v17 + 16 * v16);
    BOOL v19 = *v18 == a1 && v18[1] == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v5 = v6[1];
      *(void *)&long long v186 = v5;
      v6[1] = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_180;
      }
      uint64_t v21 = v5;
LABEL_14:
      uint64_t v5 = *(void *)(*(void *)(v21 + 48) + 16 * v16 + 8);
      specialized _NativeSet._delete(at:)(v16);
      v6[1] = v186;
      swift_bridgeObjectRelease();
    }
    else
    {
      while (1)
      {
        unint64_t v16 = (v16 + 1) & ~v15;
        if (((*(void *)(v5 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
          break;
        }
        char v22 = (void *)(v17 + 16 * v16);
        BOOL v23 = *v22 == a1 && v22[1] == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_22:
  swift_bridgeObjectRelease();
  outlined init with copy of (Hashable & Sendable)?(v8, (uint64_t)&v186, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined init with copy of (Hashable & Sendable)?(v7, (uint64_t)&v191, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (*((void *)&v187 + 1))
  {
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v186, (uint64_t)&v181, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((void *)&v192 + 1))
    {
      uint64_t v7 = (uint64_t)v174;
      long long v178 = v193;
      long long v179 = v194;
      uint64_t v180 = v195;
      long long v176 = v191;
      long long v177 = v192;
      char v24 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)&v181, (uint64_t)&v176);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v176);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v181);
      uint64_t result = outlined destroy of Any?((uint64_t)&v186, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v24) {
        return result;
      }
      goto LABEL_30;
    }
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v181);
    uint64_t v7 = (uint64_t)v174;
  }
  else
  {
    uint64_t v7 = (uint64_t)v174;
    if (!*((void *)&v192 + 1)) {
      return outlined destroy of Any?((uint64_t)&v186, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    }
  }
  outlined destroy of Any?((uint64_t)&v186, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_30:
  uint64_t v8 = v6[1];
  uint64_t v25 = v8 + 56;
  uint64_t v26 = 1 << *(unsigned char *)(v8 + 32);
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  else {
    uint64_t v27 = -1;
  }
  unint64_t v28 = v27 & *(void *)(v8 + 56);
  int64_t v166 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v29 = a1;
  uint64_t v163 = v8;
  uint64_t v165 = v8 + 56;
  while (1)
  {
    if (v28)
    {
      unint64_t v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v31 = v30 | (v16 << 6);
      goto LABEL_54;
    }
    int64_t v32 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    if (v32 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v32);
    ++v16;
    if (v33) {
      goto LABEL_53;
    }
    unint64_t v16 = v32 + 1;
    if (v32 + 1 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v16);
    if (v33) {
      goto LABEL_53;
    }
    unint64_t v16 = v32 + 2;
    if (v32 + 2 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v16);
    if (v33) {
      goto LABEL_53;
    }
    int64_t v34 = v32 + 3;
    if (v34 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v34);
    if (!v33)
    {
      while (1)
      {
        unint64_t v16 = v34 + 1;
        if (__OFADD__(v34, 1)) {
          break;
        }
        if ((uint64_t)v16 >= v166) {
          return swift_release();
        }
        unint64_t v33 = *(void *)(v25 + 8 * v16);
        ++v34;
        if (v33) {
          goto LABEL_53;
        }
      }
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    unint64_t v16 = v34;
LABEL_53:
    unint64_t v28 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v16 << 6);
LABEL_54:
    long long v35 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v31);
    uint64_t v36 = *v35;
    uint64_t v5 = v35[1];
    BOOL v37 = *v35 == v29 && v5 == a2;
    if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      continue;
    }
    uint64_t v38 = *v6;
    if (!*(void *)(*v6 + 16)) {
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    if ((v40 & 1) == 0) {
      goto LABEL_36;
    }
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v38 + 56) + 72 * v39, (uint64_t)&v181);
    uint64_t v41 = v185;
    uint64_t v190 = v185;
    long long v188 = v183;
    long long v189 = v184;
    long long v186 = v181;
    long long v187 = v182;
    if (!v185)
    {
LABEL_35:
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
LABEL_36:
      swift_bridgeObjectRelease();
LABEL_37:
      uint64_t v25 = v165;
      continue;
    }
    uint64_t v8 = v185 + 56;
    uint64_t v42 = 1 << *(unsigned char *)(v185 + 32);
    uint64_t v43 = v42 < 64 ? ~(-1 << v42) : -1;
    unint64_t v44 = v43 & *(void *)(v185 + 56);
    int64_t v45 = (unint64_t)(v42 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    do
    {
      while (1)
      {
        if (v44)
        {
          unint64_t v46 = __clz(__rbit64(v44));
          v44 &= v44 - 1;
          unint64_t v47 = v46 | (v7 << 6);
        }
        else
        {
          int64_t v48 = v7 + 1;
          if (__OFADD__(v7, 1)) {
            goto LABEL_176;
          }
          if (v48 >= v45)
          {
LABEL_34:
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v8 = v163;
            uint64_t v6 = v164;
            unint64_t v29 = a1;
            uint64_t v7 = (uint64_t)v174;
            goto LABEL_35;
          }
          unint64_t v49 = *(void *)(v8 + 8 * v48);
          ++v7;
          if (!v49)
          {
            uint64_t v7 = v48 + 1;
            if (v48 + 1 >= v45) {
              goto LABEL_34;
            }
            unint64_t v49 = *(void *)(v8 + 8 * v7);
            if (!v49)
            {
              uint64_t v7 = v48 + 2;
              if (v48 + 2 >= v45) {
                goto LABEL_34;
              }
              unint64_t v49 = *(void *)(v8 + 8 * v7);
              if (!v49)
              {
                uint64_t v7 = v48 + 3;
                if (v48 + 3 >= v45) {
                  goto LABEL_34;
                }
                unint64_t v49 = *(void *)(v8 + 8 * v7);
                if (!v49)
                {
                  int64_t v50 = v48 + 4;
                  if (v50 >= v45) {
                    goto LABEL_34;
                  }
                  unint64_t v49 = *(void *)(v8 + 8 * v50);
                  if (!v49)
                  {
                    while (1)
                    {
                      uint64_t v7 = v50 + 1;
                      if (__OFADD__(v50, 1)) {
                        break;
                      }
                      if (v7 >= v45) {
                        goto LABEL_34;
                      }
                      unint64_t v49 = *(void *)(v8 + 8 * v7);
                      ++v50;
                      if (v49) {
                        goto LABEL_84;
                      }
                    }
LABEL_178:
                    __break(1u);
LABEL_179:
                    __break(1u);
LABEL_180:
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
                    uint64_t v132 = static _SetStorage.copy(original:)();
                    uint64_t v21 = v132;
                    if (*(void *)(v5 + 16))
                    {
                      uint64_t v133 = (void *)(v132 + 56);
                      uint64_t v134 = v5 + 56;
                      unint64_t v135 = (unint64_t)((1 << *(unsigned char *)(v21 + 32)) + 63) >> 6;
                      if (v21 != v5 || (unint64_t)v133 >= v134 + 8 * v135) {
                        memmove(v133, (const void *)(v5 + 56), 8 * v135);
                      }
                      int64_t v136 = 0;
                      *(void *)(v21 + 16) = *(void *)(v5 + 16);
                      uint64_t v137 = 1 << *(unsigned char *)(v5 + 32);
                      uint64_t v138 = -1;
                      if (v137 < 64) {
                        uint64_t v138 = ~(-1 << v137);
                      }
                      unint64_t v139 = v138 & *(void *)(v5 + 56);
                      int64_t v140 = (unint64_t)(v137 + 63) >> 6;
                      while (1)
                      {
                        if (v139)
                        {
                          unint64_t v141 = __clz(__rbit64(v139));
                          v139 &= v139 - 1;
                          unint64_t v142 = v141 | (v136 << 6);
                        }
                        else
                        {
                          int64_t v147 = v136 + 1;
                          if (__OFADD__(v136, 1)) {
                            goto LABEL_212;
                          }
                          if (v147 >= v140) {
                            break;
                          }
                          unint64_t v148 = *(void *)(v134 + 8 * v147);
                          ++v136;
                          if (!v148)
                          {
                            int64_t v136 = v147 + 1;
                            if (v147 + 1 >= v140) {
                              break;
                            }
                            unint64_t v148 = *(void *)(v134 + 8 * v136);
                            if (!v148)
                            {
                              int64_t v136 = v147 + 2;
                              if (v147 + 2 >= v140) {
                                break;
                              }
                              unint64_t v148 = *(void *)(v134 + 8 * v136);
                              if (!v148)
                              {
                                int64_t v136 = v147 + 3;
                                if (v147 + 3 >= v140) {
                                  break;
                                }
                                unint64_t v148 = *(void *)(v134 + 8 * v136);
                                if (!v148)
                                {
                                  int64_t v136 = v147 + 4;
                                  if (v147 + 4 >= v140) {
                                    break;
                                  }
                                  unint64_t v148 = *(void *)(v134 + 8 * v136);
                                  if (!v148)
                                  {
                                    int64_t v136 = v147 + 5;
                                    if (v147 + 5 >= v140) {
                                      break;
                                    }
                                    unint64_t v148 = *(void *)(v134 + 8 * v136);
                                    if (!v148)
                                    {
                                      int64_t v149 = v147 + 6;
                                      if (v149 >= v140) {
                                        break;
                                      }
                                      unint64_t v148 = *(void *)(v134 + 8 * v149);
                                      if (!v148)
                                      {
                                        while (1)
                                        {
                                          int64_t v136 = v149 + 1;
                                          if (__OFADD__(v149, 1)) {
                                            break;
                                          }
                                          if (v136 >= v140) {
                                            goto LABEL_210;
                                          }
                                          unint64_t v148 = *(void *)(v134 + 8 * v136);
                                          ++v149;
                                          if (v148) {
                                            goto LABEL_209;
                                          }
                                        }
LABEL_215:
                                        __break(1u);
                                        goto LABEL_216;
                                      }
                                      int64_t v136 = v149;
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_209:
                          unint64_t v139 = (v148 - 1) & v148;
                          unint64_t v142 = __clz(__rbit64(v148)) + (v136 << 6);
                        }
                        uint64_t v143 = 16 * v142;
                        uint64_t v144 = (void *)(*(void *)(v5 + 48) + v143);
                        uint64_t v145 = v144[1];
                        id v146 = (void *)(*(void *)(v21 + 48) + v143);
                        *id v146 = *v144;
                        v146[1] = v145;
                        swift_bridgeObjectRetain();
                      }
                    }
LABEL_210:
                    swift_bridgeObjectRelease();
                    *(void *)&long long v186 = v21;
                    uint64_t v6 = v164;
                    goto LABEL_14;
                  }
                  uint64_t v7 = v50;
                }
              }
            }
          }
LABEL_84:
          unint64_t v44 = (v49 - 1) & v49;
          unint64_t v47 = __clz(__rbit64(v49)) + (v7 << 6);
        }
        long long v51 = (void *)(*(void *)(v41 + 48) + 16 * v47);
        uint64_t v52 = v51[1];
        if (v52) {
          break;
        }
        swift_bridgeObjectRelease();
      }
      BOOL v53 = *v51 == a1 && v52 == a2;
    }
    while (!v53 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v185 = 0;
    long long v183 = 0u;
    long long v184 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v181, (uint64_t)&v176, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((void *)&v177 + 1)) {
      break;
    }
    outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v7 = (uint64_t)v164;
    swift_bridgeObjectRetain();
    unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    char v66 = v65;
    swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
    {
      uint64_t v180 = 0;
      long long v178 = 0u;
      long long v179 = 0u;
      long long v176 = 0u;
      long long v177 = 0u;
      unint64_t v29 = a1;
      uint64_t v8 = v163;
      goto LABEL_108;
    }
    char v67 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = *v164;
    *unint64_t v164 = 0x8000000000000000;
    if (v67)
    {
      uint64_t v69 = v68;
      goto LABEL_99;
    }
    unint64_t v152 = v64;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    uint64_t v112 = static _DictionaryStorage.copy(original:)();
    uint64_t v69 = v112;
    if (!*(void *)(v68 + 16)) {
      goto LABEL_172;
    }
    id v113 = (char *)(v112 + 64);
    uint64_t v156 = (char *)(v68 + 64);
    unint64_t v114 = (unint64_t)((1 << *(unsigned char *)(v69 + 32)) + 63) >> 6;
    if (v69 != v68 || v113 >= &v156[8 * v114]) {
      memmove(v113, v156, 8 * v114);
    }
    uint64_t v158 = 0;
    *(void *)(v69 + 16) = *(void *)(v68 + 16);
    uint64_t v115 = 1 << *(unsigned char *)(v68 + 32);
    if (v115 < 64) {
      uint64_t v116 = ~(-1 << v115);
    }
    else {
      uint64_t v116 = -1;
    }
    unint64_t v162 = v116 & *(void *)(v68 + 64);
    __srca = (void *)((unint64_t)(v115 + 63) >> 6);
    while (1)
    {
      if (v162)
      {
        unint64_t v117 = __clz(__rbit64(v162));
        v162 &= v162 - 1;
        unint64_t v118 = v117 | (v158 << 6);
        goto LABEL_150;
      }
      uint64_t v128 = v158 + 1;
      if (__OFADD__(v158, 1)) {
        goto LABEL_214;
      }
      if (v128 >= (uint64_t)__srca) {
        goto LABEL_172;
      }
      unint64_t v129 = *(void *)&v156[8 * v128];
      uint64_t v130 = v158 + 1;
      if (!v129)
      {
        uint64_t v130 = v158 + 2;
        if (v158 + 2 >= (uint64_t)__srca) {
          goto LABEL_172;
        }
        unint64_t v129 = *(void *)&v156[8 * v130];
        if (!v129)
        {
          uint64_t v130 = v158 + 3;
          if (v158 + 3 >= (uint64_t)__srca) {
            goto LABEL_172;
          }
          unint64_t v129 = *(void *)&v156[8 * v130];
          if (!v129)
          {
            uint64_t v130 = v158 + 4;
            if (v158 + 4 >= (uint64_t)__srca) {
              goto LABEL_172;
            }
            unint64_t v129 = *(void *)&v156[8 * v130];
            if (!v129)
            {
              uint64_t v130 = v158 + 5;
              if (v158 + 5 >= (uint64_t)__srca) {
                goto LABEL_172;
              }
              unint64_t v129 = *(void *)&v156[8 * v130];
              if (!v129)
              {
                uint64_t v130 = v158 + 6;
                if (v158 + 6 >= (uint64_t)__srca) {
                  goto LABEL_172;
                }
                unint64_t v129 = *(void *)&v156[8 * v130];
                if (!v129) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_171:
      unint64_t v162 = (v129 - 1) & v129;
      uint64_t v158 = v130;
      unint64_t v118 = __clz(__rbit64(v129)) + (v130 << 6);
LABEL_150:
      uint64_t v119 = 16 * v118;
      long long v120 = (uint64_t *)(*(void *)(v68 + 48) + 16 * v118);
      uint64_t v121 = v120[1];
      uint64_t v160 = *v120;
      uint64_t v122 = 72 * v118;
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v68 + 56) + 72 * v118, (uint64_t)&v176);
      long long v123 = (void *)(*(void *)(v69 + 48) + v119);
      *long long v123 = v160;
      v123[1] = v121;
      uint64_t v124 = *(void *)(v69 + 56) + v122;
      *(_OWORD *)uint64_t v124 = v176;
      long long v125 = v177;
      long long v126 = v178;
      long long v127 = v179;
      *(void *)(v124 + 64) = v180;
      *(_OWORD *)(v124 + 32) = v126;
      *(_OWORD *)(v124 + 48) = v127;
      *(_OWORD *)(v124 + 16) = v125;
      swift_bridgeObjectRetain();
    }
    uint64_t v131 = v158 + 7;
    if (v158 + 7 >= (uint64_t)__srca) {
      goto LABEL_172;
    }
    unint64_t v129 = *(void *)&v156[8 * v131];
    if (v129)
    {
      uint64_t v130 = v158 + 7;
      goto LABEL_171;
    }
    while (1)
    {
      uint64_t v130 = v131 + 1;
      if (__OFADD__(v131, 1)) {
        goto LABEL_217;
      }
      if (v130 >= (uint64_t)__srca) {
        break;
      }
      unint64_t v129 = *(void *)&v156[8 * v130];
      ++v131;
      if (v129) {
        goto LABEL_171;
      }
    }
LABEL_172:
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t)v164;
    unint64_t v64 = v152;
LABEL_99:
    swift_bridgeObjectRelease();
    uint64_t v70 = *(void *)(v69 + 56) + 72 * v64;
    long long v176 = *(_OWORD *)v70;
    long long v72 = *(_OWORD *)(v70 + 32);
    long long v71 = *(_OWORD *)(v70 + 48);
    uint64_t v73 = *(void *)(v70 + 64);
    long long v177 = *(_OWORD *)(v70 + 16);
    long long v178 = v72;
    uint64_t v180 = v73;
    long long v179 = v71;
    specialized _NativeDictionary._delete(at:)(v64, v69);
    *(void *)uint64_t v7 = v69;
    swift_bridgeObjectRelease();
    unint64_t v29 = a1;
    uint64_t v8 = v163;
LABEL_108:
    AttributedString._AttributeStorage._attributeModified(_:old:new:)(v36, v5, &v176, &v181);
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v181, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
    uint64_t v25 = v165;
    uint64_t v6 = (void *)v7;
    uint64_t v7 = (uint64_t)v174;
  }
  v174[3] = v179;
  uint64_t v175 = v180;
  v174[1] = v177;
  v174[2] = v178;
  v174[0] = v176;
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v174, (uint64_t)&v176);
  uint64_t v7 = (uint64_t)v164;
  uint64_t v8 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v168 = *v164;
  uint64_t v54 = *v164;
  *unint64_t v164 = 0x8000000000000000;
  unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
  uint64_t v57 = *(void *)(v54 + 16);
  BOOL v58 = (v56 & 1) == 0;
  BOOL v59 = __OFADD__(v57, v58);
  uint64_t v60 = v57 + v58;
  if (v59) {
    goto LABEL_179;
  }
  char v61 = v56;
  if (*(void *)(v54 + 24) < v60)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, v8);
    uint64_t v62 = v168;
    unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    if ((v61 & 1) != (v63 & 1)) {
      goto LABEL_218;
    }
    goto LABEL_102;
  }
  if (v8)
  {
    uint64_t v62 = v54;
LABEL_102:
    unint64_t v29 = a1;
    uint64_t v8 = v163;
    if (v61)
    {
      uint64_t v74 = *(void *)(v62 + 56) + 72 * v55;
      long long v76 = *(_OWORD *)(v74 + 16);
      long long v75 = *(_OWORD *)(v74 + 32);
      long long v77 = *(_OWORD *)(v74 + 48);
      uint64_t v173 = *(void *)(v74 + 64);
      long long v172 = v77;
      long long v169 = *(_OWORD *)v74;
      long long v170 = v76;
      long long v171 = v75;
      uint64_t v78 = *(void *)(v62 + 56) + 72 * v55;
      long long v79 = v177;
      long long v80 = v178;
      long long v81 = v179;
      *(void *)(v78 + 64) = v180;
      *(_OWORD *)(v78 + 32) = v80;
      *(_OWORD *)(v78 + 48) = v81;
      *(_OWORD *)(v78 + 16) = v79;
      *(_OWORD *)uint64_t v78 = v176;
    }
    else
    {
      *(void *)(v62 + 8 * (v55 >> 6) + 64) |= 1 << v55;
      uint64_t v82 = (uint64_t *)(*(void *)(v62 + 48) + 16 * v55);
      *uint64_t v82 = v36;
      v82[1] = v5;
      uint64_t v83 = *(void *)(v62 + 56) + 72 * v55;
      *(_OWORD *)uint64_t v83 = v176;
      long long v84 = v177;
      long long v85 = v178;
      long long v86 = v179;
      *(void *)(v83 + 64) = v180;
      *(_OWORD *)(v83 + 32) = v85;
      *(_OWORD *)(v83 + 48) = v86;
      *(_OWORD *)(v83 + 16) = v84;
      uint64_t v87 = *(void *)(v62 + 16);
      BOOL v59 = __OFADD__(v87, 1);
      uint64_t v88 = v87 + 1;
      if (v59)
      {
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }
      *(void *)(v62 + 16) = v88;
      uint64_t v173 = 0;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      swift_bridgeObjectRetain();
    }
    *(void *)uint64_t v7 = v62;
    swift_bridgeObjectRelease();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v174);
    outlined init with take of LocalePreferences?((uint64_t)&v169, (uint64_t)&v176, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    goto LABEL_108;
  }
  unint64_t v150 = v55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  uint64_t v89 = static _DictionaryStorage.copy(original:)();
  uint64_t v62 = v89;
  if (!*(void *)(v54 + 16))
  {
LABEL_140:
    swift_bridgeObjectRelease();
    unint64_t v55 = v150;
    goto LABEL_102;
  }
  char v155 = v61;
  uint64_t v90 = (char *)(v89 + 64);
  __src = (char *)(v54 + 64);
  unint64_t v91 = (unint64_t)((1 << *(unsigned char *)(v62 + 32)) + 63) >> 6;
  uint64_t v157 = v54;
  if (v62 != v54 || v90 >= &__src[8 * v91]) {
    memmove(v90, __src, 8 * v91);
  }
  *(void *)(v62 + 16) = *(void *)(v54 + 16);
  uint64_t v92 = 1 << *(unsigned char *)(v54 + 32);
  if (v92 < 64) {
    uint64_t v93 = ~(-1 << v92);
  }
  else {
    uint64_t v93 = -1;
  }
  int64_t v159 = 0;
  unint64_t v161 = v93 & *(void *)(v54 + 64);
  int64_t v151 = (unint64_t)(v92 + 63) >> 6;
  while (2)
  {
    uint64_t v7 = (uint64_t)v164;
    char v61 = v155;
    if (v161)
    {
      unint64_t v94 = __clz(__rbit64(v161));
      v161 &= v161 - 1;
      unint64_t v95 = v94 | (v159 << 6);
      uint64_t v96 = v157;
LABEL_118:
      uint64_t v97 = 16 * v95;
      uint64_t v98 = *(void *)(v96 + 56);
      uint64_t v99 = (uint64_t *)(*(void *)(v96 + 48) + 16 * v95);
      uint64_t v101 = *v99;
      uint64_t v100 = v99[1];
      uint64_t v102 = 72 * v95;
      outlined init with copy of AttributedString._AttributeValue(v98 + 72 * v95, (uint64_t)&v169);
      uint64_t v103 = (void *)(*(void *)(v62 + 48) + v97);
      *uint64_t v103 = v101;
      v103[1] = v100;
      uint64_t v104 = *(void *)(v62 + 56) + v102;
      *(_OWORD *)uint64_t v104 = v169;
      long long v105 = v170;
      long long v106 = v171;
      long long v107 = v172;
      *(void *)(v104 + 64) = v173;
      *(_OWORD *)(v104 + 32) = v106;
      *(_OWORD *)(v104 + 48) = v107;
      *(_OWORD *)(v104 + 16) = v105;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v108 = v159 + 1;
  uint64_t v96 = v157;
  if (__OFADD__(v159, 1)) {
    goto LABEL_213;
  }
  if (v108 >= v151) {
    goto LABEL_140;
  }
  unint64_t v109 = *(void *)&__src[8 * v108];
  int64_t v110 = v159 + 1;
  if (v109) {
    goto LABEL_139;
  }
  int64_t v110 = v159 + 2;
  if (v159 + 2 >= v151) {
    goto LABEL_140;
  }
  unint64_t v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  int64_t v110 = v159 + 3;
  if (v159 + 3 >= v151) {
    goto LABEL_140;
  }
  unint64_t v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  int64_t v110 = v159 + 4;
  if (v159 + 4 >= v151) {
    goto LABEL_140;
  }
  unint64_t v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  int64_t v110 = v159 + 5;
  if (v159 + 5 >= v151) {
    goto LABEL_140;
  }
  unint64_t v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  int64_t v110 = v159 + 6;
  if (v159 + 6 >= v151) {
    goto LABEL_140;
  }
  unint64_t v109 = *(void *)&__src[8 * v110];
  if (v109)
  {
LABEL_139:
    int64_t v159 = v110;
    unint64_t v161 = (v109 - 1) & v109;
    unint64_t v95 = __clz(__rbit64(v109)) + (v110 << 6);
    goto LABEL_118;
  }
  int64_t v111 = v159 + 7;
  if (v159 + 7 >= v151) {
    goto LABEL_140;
  }
  unint64_t v109 = *(void *)&__src[8 * v111];
  if (v109)
  {
    int64_t v110 = v159 + 7;
    uint64_t v96 = v157;
    goto LABEL_139;
  }
  while (1)
  {
    int64_t v110 = v111 + 1;
    if (__OFADD__(v111, 1)) {
      break;
    }
    uint64_t v7 = (uint64_t)v164;
    char v61 = v155;
    uint64_t v96 = v157;
    if (v110 >= v151) {
      goto LABEL_140;
    }
    unint64_t v109 = *(void *)&__src[8 * v110];
    ++v111;
    if (v109) {
      goto LABEL_139;
    }
  }
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AttributedString._AttributeValue.isInvalidatedOnAttributeChange.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16 * i + 8))
    {
      uint64_t v14 = 1;
LABEL_30:
      swift_release();
      swift_bridgeObjectRelease();
      return v14;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v6) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12)
          {
            int64_t v8 = v11 + 4;
            if (v11 + 4 >= v6) {
              goto LABEL_29;
            }
            unint64_t v12 = *(void *)(v2 + 8 * v8);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    unint64_t v5 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_29:
    uint64_t v14 = 0;
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v28 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  BOOL v19 = (char *)&v27 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v28, v8, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v11, AssociatedTypeWitness);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v21(v15, v19, AssociatedTypeWitness);
    *((void *)&v31 + 1) = AssociatedTypeWitness;
    *(void *)int64_t v32 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
    v21((char *)boxed_opaque_existential_1, v15, AssociatedTypeWitness);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v29, a2, a3);
    *(_OWORD *)&unsigned char v32[8] = v29;
    v32[24] = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) & 1;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
    char v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v15, AssociatedTypeWitness);
    *(void *)(a4 + 64) = v23;
    long long v25 = *(_OWORD *)&v32[16];
    *(_OWORD *)(a4 + 32) = *(_OWORD *)v32;
    *(_OWORD *)(a4 + 48) = v25;
    long long v26 = v31;
    *(_OWORD *)a4 = v30;
    *(_OWORD *)(a4 + 16) = v26;
    return ((uint64_t (*)(char *, uint64_t))v24)(v19, AssociatedTypeWitness);
  }
  return result;
}

double static AttributedStringKey.runBoundaries.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_182106C90;
  return result;
}

{
  return static AttributedStringKey.runBoundaries.getter(a1);
}

uint64_t static AttributedStringKey.invalidationConditions.getter()
{
  return 0;
}

uint64_t static AttributedStringKey.inheritedByAddedText.getter()
{
  return 1;
}

uint64_t specialized static AttributedString._AttributeValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v15);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v14);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v15, (uint64_t)&v10, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v14, (uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  if (!v11)
  {
    if (!v13)
    {
      char v5 = 1;
      goto LABEL_9;
    }
    outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    goto LABEL_7;
  }
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
LABEL_7:
    char v5 = 0;
    goto LABEL_9;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v10, (uint64_t)v8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v12, (uint64_t)v7);
  uint64_t v3 = v9;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v5 = openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)((uint64_t)v4, (uint64_t)v7, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
LABEL_9:
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  return v5 & 1;
}

uint64_t openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v18[-v7 - 8];
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v10);
  long long v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, a3);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a3);
  }
  else
  {
    v14(v8, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t Error<>._code.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t JSONEncoder.userInfo.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 128) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();

  return swift_release();
}

void static URL.libraryDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    uint64_t v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 5, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        uint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        uint64_t v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.applicationSupportDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    uint64_t v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 14, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        uint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        uint64_t v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

uint64_t _canonicalStringRepresentation(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v2 = +[NSFileManager defaultManager];
  if ([(NSFileManager *)v2 getFileSystemRepresentation:__s maxLength:1024 withPath:a1])
  {
    return (uint64_t)[(NSFileManager *)v2 stringWithFileSystemRepresentation:__s length:strlen(__s)];
  }
  return a1;
}

void sub_18192327C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1819232C4(_Unwind_Exception *a1)
{
}

uint64_t _nearestPresenterInterestedInSubitemPresenters(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3052000000;
  uint64_t v8 = __Block_byref_object_copy__28;
  uint64_t v9 = __Block_byref_object_dispose__28;
  uint64_t v10 = 0;
  for (unint64_t i = (void *)[a1 parent]; ; unint64_t i = objc_msgSend(i, "parent"))
  {
    uint64_t v2 = v6[5];
    if (!i || v2) {
      break;
    }
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    _OWORD v4[2] = ___nearestPresenterInterestedInSubitemPresenters_block_invoke;
    v4[3] = &unk_1E51FCEB8;
    v4[4] = &v5;
    [i forEachPresenterOfItemPerformProcedure:v4];
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1819234F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181923888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  BOOL v3 = expandTilde;
  __int16 v4 = domainMask;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v7 = [[NSSearchPathEnumerator alloc] initWithDirectory:directory domains:v4 & 0xC0F];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v8 = [(NSSearchPathEnumerator *)v7 countByEnumeratingWithState:&v15 objects:v14 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if (v3 && [*(id *)(*((void *)&v15 + 1) + 8 * i) hasPrefix:@"~"]) {
          id v12 = (void *)[v12 stringByExpandingTildeInPath];
        }
        [v6 addObject:v12];
      }
      uint64_t v9 = [(NSSearchPathEnumerator *)v7 countByEnumeratingWithState:&v15 objects:v14 count:16];
    }
    while (v9);
  }

  if ([v6 count]) {
    return (NSArray *)[MEMORY[0x1E4F1C978] arrayWithArray:v6];
  }
  else {
    return (NSArray *)[MEMORY[0x1E4F1C978] array];
  }
}

void sub_181923E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CopyBasicOperatorAddOptions(void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    unint64_t v4 = [a2 rangeOfString:@"c" options:1] != 0x7FFFFFFFFFFFFFFFLL;
    if ([v2 rangeOfString:@"d" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v4 |= 2uLL;
    }
    if ([v2 rangeOfString:@"n" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v4 |= 4uLL;
    }
    if ([v2 rangeOfString:@"l" options:1] == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v2 = (void *)v4;
    }
    else {
      uint64_t v2 = (void *)(v4 | 8);
    }
  }
  uint64_t v5 = [a1 operatorType];
  uint64_t v6 = [a1 modifier];

  return +[NSPredicateOperator _newOperatorWithType:v5 modifier:v6 options:v2];
}

uint64_t _NSFCLog()
{
  if (qword_1EB1EDDD0 != -1) {
    dispatch_once(&qword_1EB1EDDD0, &__block_literal_global_922);
  }
  return qword_1EB1EDD30;
}

void _qfqp2_InitializedGlobalData()
{
  if ((_qfqp2_InitializedGlobals & 1) == 0)
  {
    _MergedGlobals_136 = +[NSNumber numberWithBool:1];
    qword_1EB1ED9B8 = +[NSNumber numberWithBool:0];
    _qfqp2_ReservedWords = (uint64_t)objc_retain((id)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"AND", @"OR", @"IN", @"NOT", @"ALL", @"ANY", @"SOME", @"NONE", @"LIKE", @"MATCHES", @"TOKENMATCHES", @"CONTAINS", @"BETWEEN", @"BEGINSWITH", @"ENDSWITH", @"UTI-EQUALS", @"UTI-CONFORMS-TO",
                                                      @"NULL",
                                                      @"NIL",
                                                      @"SELF",
                                                      @"TRUEPREDICATE",
                                                      @"FALSEPREDICATE",
                                                      @"TRUE",
                                                      @"YES",
                                                      @"FALSE",
                                                      @"NO",
                                                      @"FIRST",
                                                      @"LAST",
                                                      @"SIZE",
                                                      @"SUBQUERY",
                                                      @"ANYKEY",
                                                      @"CAST",
                                                      @"UNION",
                                                      @"INTERSECTION",
                                                      @"MINUS",
                                                      @"APPLY",
                                                      @"FUNCTION",
                                                      0));
    _qfqp2_InitializedGlobals = 1;
  }
}

id __setProtocolMetadataWithSignature_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  qword_1EB1EDF38 = (uint64_t)(id)objc_msgSend(v0, "setWithObjects:", v1, v2, v3, v4, v5, v6, v7, v8, objc_opt_class(), 0);
  uint64_t v9 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  id result = (id)objc_msgSend(v9, "setWithObjects:", v10, v11, v12, objc_opt_class(), 0);
  qword_1EB1EDF40 = (uint64_t)result;
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)() & 1;
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

uint64_t specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBB1A0];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBB550];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC358];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC450];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  void *v22;
  long long v24;
  ValueMetadata *v25;
  unint64_t v26;
  uint64_t v27;

  uint64_t v2 = v0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  if (v4 < 0xFE)
  {
    uint64_t v8 = *(void *)(v0 + 32);
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v1);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v1 = MEMORY[0x1E4FBB390];
      unint64_t v4 = _CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v8 = *(void *)(v0 + 64);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_4:
        uint64_t v10 = *(void *)(v4 + 16);
        uint64_t v9 = *(void *)(v4 + 24);
        if (v10 >= v9 >> 1) {
          unint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, (void *)v4);
        }
        long long v25 = &type metadata for _CodingKey;
        long long v26 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        unint64_t v11 = swift_allocObject();
        *(void *)&char v24 = v11;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 16) = v8;
        *(unsigned char *)(v11 + 40) = 2;
        *(void *)(v4 + 16) = v10 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v24, v4 + 40 * v10 + 32);
        unint64_t v12 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v14 = v1;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBA80], v12);
        goto LABEL_13;
      }
LABEL_16:
      unint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (void *)v4);
      goto LABEL_4;
    }
    unsigned int v3 = v5;
    uint64_t v8 = v6;
    unint64_t v4 = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v1);
    *(void *)(v0 + 24) = v3;
    *(void *)(v0 + 32) = v8;
    *(unsigned char *)(v0 + 40) = v4;
  }
  if ((v4 & 0xE0) != 0x40)
  {
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v19 = _CodingPathNode.path.getter(*(void *)(v2 + 72));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 56) = &type metadata for _CodingKey;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v21 = swift_allocObject();
    *(void *)(inited + 32) = v21;
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = 0;
    *(void *)(v21 + 32) = 0;
    *(unsigned char *)(v21 + 40) = 2;
    *(void *)&char v24 = v19;
    specialized Array.append<A>(contentsOf:)(inited);
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB390], v4, v22);
    swift_bridgeObjectRelease();
LABEL_13:
    swift_willThrow();
    return v17 & 1;
  }
  long long v15 = *(void *)(v0 + 64);
  long long v16 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  long long v17 = v3 & 1;
  *(void *)(v0 + 64) = v16;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = -2;
  return v17 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBB3D0];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBB470];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC098];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC0F8];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC150];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC1C8];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC3D0];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBB808];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC4C0];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC538];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  ValueMetadata *v21;
  unint64_t v22;

  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x1E4FBC5F8];
      uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&long long v20 = v13;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v10;
      *(unsigned char *)(v13 + 40) = 2;
      uint64_t v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *long long v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
      return swift_willThrow();
    }
    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v3;
  }
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = -2;
    }
  }
  return result;
}

uint64_t (*JSONEncoder.userInfo.modify(void *a1))(void *a1)
{
  unsigned int v3 = *(os_unfair_lock_s **)(v1 + 136);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 128);
  swift_bridgeObjectRetain();
  return JSONEncoder.userInfo.modify;
}

id NSNotificationCenter.publisher(for:object:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  swift_unknownObjectRetain();
  id v4 = v3;

  return a1;
}

unint64_t specialized _NSFileManagerBridge.displayName(atPath:)(uint64_t a1, unint64_t a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  LOBYTE(v66[0]) = 1;
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  swift_bridgeObjectRetain();
  uint64_t v63 = a1;
  URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)v66, (uint64_t)&v70, &v67);
  unint64_t v64 = (void *)v67;
  uint64_t v69 = (void *)*MEMORY[0x1E4F1C6C8];
  id v4 = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v5 = static _SetStorage.allocate(capacity:)();
  uint64_t v6 = v5 + 56;
  id v7 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  Hasher.init(_seed:)();
  id v65 = v7;
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  unint64_t v11 = v10 >> 6;
  uint64_t v12 = *(void *)(v5 + 56 + 8 * (v10 >> 6));
  uint64_t i = 1 << v10;
  if (((1 << v10) & v12) == 0) {
    goto LABEL_30;
  }
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v16 == v17) {
    goto LABEL_16;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_17;
  }
  uint64_t v20 = ~v9;
  unint64_t v10 = (v10 + 1) & v20;
  unint64_t v11 = v10 >> 6;
  uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
  uint64_t i = 1 << v10;
  if ((v12 & (1 << v10)) == 0) {
    goto LABEL_30;
  }
  id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
  uint64_t v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v23 == v24) {
    goto LABEL_16;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_17:
    long long v31 = v65;

    goto LABEL_32;
  }
  unint64_t v10 = (v10 + 1) & v20;
  unint64_t v11 = v10 >> 6;
  uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
  uint64_t i = 1 << v10;
  if ((v12 & (1 << v10)) != 0)
  {
    id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
    uint64_t v29 = v28;
    if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v29 == v30) {
      goto LABEL_16;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v32) {
      goto LABEL_17;
    }
    unint64_t v10 = (v10 + 1) & v20;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
    uint64_t i = 1 << v10;
    if ((v12 & (1 << v10)) != 0)
    {
      id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
      uint64_t v35 = v34;
      if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v35 == v36)
      {
LABEL_16:
        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_17;
      }
      unint64_t v10 = (v10 + 1) & v20;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
      for (uint64_t i = 1 << v10; (v12 & (1 << v10)) != 0; uint64_t i = 1 << v10)
      {
        id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
        uint64_t v40 = v39;
        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v40 == v41) {
          goto LABEL_16;
        }
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v43) {
          goto LABEL_17;
        }
        unint64_t v10 = (v10 + 1) & v20;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
      }
    }
  }
LABEL_30:
  *(void *)(v6 + 8 * v11) = i | v12;
  long long v31 = v65;
  *(void *)(*(void *)(v5 + 48) + 8 * v10) = v65;
  uint64_t v44 = *(void *)(v5 + 16);
  BOOL v45 = __OFADD__(v44, 1);
  uint64_t v46 = v44 + 1;
  if (v45)
  {
    __break(1u);
    goto LABEL_51;
  }
  *(void *)(v5 + 16) = v46;
LABEL_32:
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  uint64_t v47 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v47);
  swift_release();
  uint64_t v48 = _ContiguousArrayBuffer._asCocoaArray()();
  *(void *)&long long v67 = 0;
  unint64_t v10 = (unint64_t)v64;
  id v49 = objc_msgSend(v64, sel_resourceValuesForKeys_error_, v48, &v67);
  swift_unknownObjectRelease();
  int64_t v50 = (void *)v67;
  if (!v49)
  {
    if ((void)v67)
    {
      id v56 = (id)v67;
      swift_willThrow();
      swift_release();

LABEL_48:
      swift_bridgeObjectRetain();
      unint64_t Path = String._lastPathComponent.getter(v63, a2);
      uint64_t v61 = v60;
      swift_bridgeObjectRelease();
      unint64_t v70 = Path;
      uint64_t v71 = v61;
      v66[0] = 58;
      v66[1] = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      return v67;
    }
    if (one-time initialization token for _nilObjCError == -1)
    {
LABEL_47:
      swift_willThrow();
      swift_release();
      goto LABEL_48;
    }
LABEL_51:
    swift_once();
    goto LABEL_47;
  }
  uint64_t v51 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v49);
  id v52 = v50;

  if (*(void *)(v51 + 16))
  {
    id v53 = v31;
    uint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)();
    if (v55)
    {
      outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v54, (uint64_t)&v67);
    }
    else
    {
      long long v67 = 0u;
      long long v68 = 0u;
    }
  }
  else
  {
    long long v67 = 0u;
    long long v68 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
  {
    unint64_t v57 = v70;
    uint64_t v58 = v71;
  }
  else
  {
    uint64_t v58 = 0;
    unint64_t v57 = 0;
    unint64_t v70 = 0;
    uint64_t v71 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_48;
  }

  swift_release();
  swift_release();
  return v57;
}

id _NSGetBoolValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unsigned int v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithBool:*(unsigned __int8 *)(a1 + ivar_getOffset(a3))];

  return v3;
}

void closure #1 in _FileManagerImpl.attributesOfItem(atPath:)(const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  v187[3] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x100, a2, a3, 0, 0, 0, 0, 0, &v182, 0, 0);
LABEL_93:
    swift_willThrow();
    return;
  }
  memset(&v182, 0, 28);
  memset(&v182.st_atimespec, 0, 112);
  if (lstat(a1, &v182))
  {
    int v9 = MEMORY[0x185301870]();
    int v10 = v9;
    uint64_t v11 = 263;
    switch(v9)
    {
      case 1:
      case 13:
        uint64_t v11 = 257;
        goto LABEL_87;
      case 2:
        uint64_t v11 = 260;
        goto LABEL_87;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_81;
      case 27:
        goto LABEL_87;
      default:
        if (v9 == 63)
        {
          uint64_t v11 = 258;
        }
        else
        {
          if (v9 == 102)
          {
            id v65 = 0;
            uint64_t v11 = 256;
            goto LABEL_92;
          }
LABEL_81:
          uint64_t v11 = 256;
        }
LABEL_87:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        {
          *(void *)&long long v185 = 0;
          *((void *)&v185 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          *(void *)&long long v185 = 0xD000000000000014;
          *((void *)&v185 + 1) = 0x80000001823A9780;
          LODWORD(v187[0]) = v10;
          v161._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v161);
          swift_bridgeObjectRelease();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v151 = (int)POSIXErrorCode.rawValue.getter();
        id v152 = objc_allocWithZone((Class)NSError);
        uint64_t v153 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v65 = objc_msgSend(v152, sel_initWithDomain_code_userInfo_, v153, v151, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v154 = objc_msgSend(v65, sel_domain);
        id v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
        unint64_t v47 = v156;

        if (v155 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v47 == v157)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          uint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v45 & 1) == 0) {
            goto LABEL_101;
          }
        }
LABEL_92:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v11, a2, a3, v65, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v185, 0, 0);
        goto LABEL_93;
    }
  }
  uint64_t v170 = a2;
  unint64_t v171 = a3;
  int64_t v166 = a1;
  uint64_t v167 = a4;
  int st_mode = v182.st_mode;
  uint64_t st_nlink = v182.st_nlink;
  uint64_t st_dev = v182.st_dev;
  int64_t st_ino = v182.st_ino;
  *(void *)long long v176 = v182.st_uid;
  *(void *)long long v177 = v182.st_gid;
  uint64_t st_rdev = v182.st_rdev;
  off_t st_size = v182.st_size;
  __uint32_t st_flags = v182.st_flags;
  __darwin_time_t tv_sec = v182.st_mtimespec.tv_sec;
  uint64_t tv_nsec = v182.st_mtimespec.tv_nsec;
  __darwin_time_t v16 = v182.st_ctimespec.tv_sec;
  uint64_t v17 = v182.st_ctimespec.tv_nsec;
  NSFileAttributeType v18 = specialized UInt16._fileType.getter(v182.st_mode);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  long long v179 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSFileAttributeKey, Any)>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1821A4D10;
  *(void *)(v19 + 32) = @"NSFileSize";
  id v20 = objc_allocWithZone((Class)NSNumber);
  id v21 = @"NSFileSize";
  id v22 = objc_msgSend(v20, sel_initWithLongLong_, st_size);
  uint64_t v23 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(void *)(v19 + 40) = v22;
  *(void *)(v19 + 64) = v23;
  *(void *)(v19 + 72) = @"NSFileModificationDate";
  *(double *)(v19 + 80) = (double)tv_sec + -978307200.0 + (double)tv_nsec / 1000000000.0;
  *(void *)(v19 + 104) = &type metadata for Date;
  *(void *)(v19 + 112) = @"NSFileCreationDate";
  *(double *)(v19 + 120) = (double)v16 + -978307200.0 + (double)v17 / 1000000000.0;
  *(void *)(v19 + 144) = &type metadata for Date;
  *(void *)(v19 + 152) = @"NSFilePosixPermissions";
  int v165 = st_mode;
  uint64_t v24 = st_mode & 0xFFF;
  id v25 = objc_allocWithZone((Class)NSNumber);
  char v26 = @"NSFileModificationDate";
  uint64_t v163 = @"NSFileCreationDate";
  id v27 = @"NSFilePosixPermissions";
  uint64_t v28 = v23;
  *(void *)(v19 + 160) = objc_msgSend(v25, sel_initWithLongLong_, v24);
  *(void *)(v19 + 184) = v23;
  *(void *)(v19 + 192) = @"NSFileReferenceCount";
  id v29 = objc_allocWithZone((Class)NSNumber);
  uint64_t v30 = @"NSFileReferenceCount";
  *(void *)(v19 + 200) = objc_msgSend(v29, sel_initWithLongLong_, st_nlink);
  *(void *)(v19 + 224) = v23;
  *(void *)(v19 + 232) = @"NSFileSystemNumber";
  id v31 = objc_allocWithZone((Class)NSNumber);
  char v32 = @"NSFileSystemNumber";
  *(void *)(v19 + 240) = objc_msgSend(v31, sel_initWithLongLong_, st_dev);
  *(void *)(v19 + 264) = v23;
  *(void *)(v19 + 272) = @"NSFileSystemFileNumber";
  id v33 = objc_allocWithZone((Class)NSNumber);
  uint64_t v34 = @"NSFileSystemFileNumber";
  uint64_t v35 = &selRef_initWithUnsignedLongLong_;
  if (st_ino >= 0) {
    uint64_t v35 = &selRef_initWithLongLong_;
  }
  id v36 = [v33 *v35];
  *((void *)&v186 + 1) = v23;
  *(void *)&long long v185 = v36;
  outlined init with take of Any(&v185, (_OWORD *)(v19 + 280));
  *(void *)(v19 + 312) = @"NSFileType";
  uint64_t v37 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(v19 + 320) = v179;
  uint64_t v162 = v37;
  *(void *)(v19 + 344) = v37;
  *(void *)(v19 + 352) = @"NSFileOwnerAccountID";
  id v38 = objc_allocWithZone((Class)NSNumber);
  uint64_t v39 = @"NSFileType";
  swift_unknownObjectRetain();
  uint64_t v40 = @"NSFileOwnerAccountID";
  *(void *)(v19 + 360) = objc_msgSend(v38, sel_initWithLongLong_, *(void *)v176);
  *(void *)(v19 + 384) = v28;
  *(void *)(v19 + 392) = @"NSFileGroupOwnerAccountID";
  id v41 = objc_allocWithZone((Class)NSNumber);
  uint64_t v42 = @"NSFileGroupOwnerAccountID";
  id v43 = objc_msgSend(v41, sel_initWithLongLong_, *(void *)v177);
  *(void *)(v19 + 424) = v28;
  *(void *)(v19 + 400) = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  uint64_t v44 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v45 = (uint64_t)(v44 + 8);
  swift_retain();
  uint64_t v46 = 32;
  unint64_t v47 = (unint64_t)&demangling cache variable for type metadata for (NSFileAttributeKey, Any);
  do
  {
    outlined init with copy of (Hashable & Sendable)?(v19 + v46, (uint64_t)&v185, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
    uint64_t v48 = v185;
    unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v185);
    if (v50)
    {
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      swift_once();
LABEL_95:
      uint64_t v158 = (void *)_nilObjCError;
      id v159 = (id)_nilObjCError;
      swift_willThrow();
      swift_release();

      swift_release();
      swift_release();
      uint64_t v134 = 0;
      unint64_t v135 = v167;
      int v136 = v165;
      goto LABEL_70;
    }
    *(void *)(v45 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    *(void *)(v44[6] + 8 * v49) = v48;
    outlined init with take of Any((long long *)((char *)&v185 + 8), (_OWORD *)(v44[7] + 32 * v49));
    uint64_t v51 = v44[2];
    BOOL v52 = __OFADD__(v51, 1);
    uint64_t v53 = v51 + 1;
    if (v52) {
      goto LABEL_99;
    }
    v44[2] = v53;
    v46 += 40;
  }
  while (v46 != 432);
  swift_release();
  swift_bridgeObjectRelease();
  v187[0] = v44;
  uint64_t v54 = getpwuid(v176[0]);
  if (v54 && v54->pw_name)
  {
    uint64_t v55 = String.init(cString:)();
    *((void *)&v186 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v185 = v55;
    *((void *)&v185 + 1) = v56;
    specialized Dictionary.subscript.setter((uint64_t)&v185, @"NSFileOwnerAccountName");
  }
  unint64_t v57 = getgrgid(v177[0]);
  if (v57 && v57->gr_name)
  {
    uint64_t v58 = String.init(cString:)();
    *((void *)&v186 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v185 = v58;
    *((void *)&v185 + 1) = v59;
    specialized Dictionary.subscript.setter((uint64_t)&v185, @"NSFileGroupOwnerAccountName");
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
  uint64_t v60 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileTypeBlockSpecial");
  uint64_t v63 = v62;
  if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(v60) && v63 == v64)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_25;
  }
  char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v66)
  {
LABEL_25:
    swift_unknownObjectRelease();
    goto LABEL_26;
  }
  id v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileTypeCharacterSpecial");
  uint64_t v149 = v148;
  if (v147 == static String._unconditionallyBridgeFromObjectiveC(_:)(v60) && v149 == v150)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_26:
    long long v67 = __SCR_NSNotification;
LABEL_27:
    id v68 = objc_allocWithZone((Class)v67[5]);
    uint64_t v69 = @"NSFileDeviceIdentifier";
    id v70 = objc_msgSend(v68, sel_initWithLongLong_, st_rdev);
    *((void *)&v186 + 1) = v28;
    *(void *)&long long v185 = v70;
    specialized Dictionary.subscript.setter((uint64_t)&v185, v69);
  }
  else
  {
    char v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v67 = __SCR_NSNotification;
    if (v160) {
      goto LABEL_27;
    }
  }
  id v71 = objc_allocWithZone((Class)v67[5]);
  uint64_t v72 = @"NSFileImmutable";
  id v73 = objc_msgSend(v71, sel_initWithBool_, (st_flags & 0x20002) != 0);
  *((void *)&v186 + 1) = v28;
  *(void *)&long long v185 = v73;
  specialized Dictionary.subscript.setter((uint64_t)&v185, v72);
  id v74 = objc_allocWithZone((Class)v67[5]);
  long long v75 = @"NSFileAppendOnly";
  id v76 = objc_msgSend(v74, sel_initWithBool_, (st_flags & 0x40004) != 0);
  uint64_t v169 = v28;
  *((void *)&v186 + 1) = v28;
  *(void *)&long long v185 = v76;
  specialized Dictionary.subscript.setter((uint64_t)&v185, v75);
  swift_unknownObjectRelease();
  uint64_t v181 = v187[0];
  LOBYTE(v183) = 0;
  long long v185 = 0uLL;
  *(void *)&long long v186 = 0;
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)(v170, v171, (unsigned __int8 *)&v183, (uint64_t)&v185, v187);
  *(void *)long long v176 = v187[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  uint64_t v77 = swift_allocObject();
  uint64_t v78 = (void *)*MEMORY[0x1E4F1C608];
  *(void *)(v77 + 32) = *MEMORY[0x1E4F1C608];
  *(void *)long long v178 = v77 + 32;
  long long v79 = (void *)*MEMORY[0x1E4F1C540];
  *(void *)(v77 + 40) = *MEMORY[0x1E4F1C540];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v80 = static _SetStorage.allocate(capacity:)();
  uint64_t v180 = v80 + 56;
  id v172 = v78;
  id v81 = v79;
  char v82 = 0;
  uint64_t v83 = 0;
  while (2)
  {
    char v84 = v82;
    long long v85 = *(void **)(*(void *)v178 + 8 * v83);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    Hasher.init(_seed:)();
    uint64_t v45 = v85;
    String.hash(into:)();
    Swift::Int v86 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v87 = -1 << *(unsigned char *)(v80 + 32);
    unint64_t v47 = v86 & ~v87;
    unint64_t v88 = v47 >> 6;
    uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
    uint64_t v90 = 1 << v47;
    if (((1 << v47) & v89) != 0)
    {
      id v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      uint64_t v93 = v92;
      if (v91 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v93 == v94) {
        goto LABEL_29;
      }
      char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v96) {
        goto LABEL_30;
      }
      uint64_t v97 = ~v87;
      unint64_t v47 = (v47 + 1) & v97;
      unint64_t v88 = v47 >> 6;
      uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
      uint64_t v90 = 1 << v47;
      if ((v89 & (1 << v47)) == 0) {
        goto LABEL_59;
      }
      id v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      uint64_t v100 = v99;
      if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v100 == v101) {
        goto LABEL_29;
      }
      char v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v103) {
        goto LABEL_30;
      }
      unint64_t v47 = (v47 + 1) & v97;
      unint64_t v88 = v47 >> 6;
      uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
      uint64_t v90 = 1 << v47;
      if ((v89 & (1 << v47)) == 0) {
        goto LABEL_59;
      }
      id v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      uint64_t v106 = v105;
      if (v104 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v106 == v107) {
        goto LABEL_29;
      }
      char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v108) {
        goto LABEL_30;
      }
      unint64_t v47 = (v47 + 1) & v97;
      unint64_t v88 = v47 >> 6;
      uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
      uint64_t v90 = 1 << v47;
      if ((v89 & (1 << v47)) == 0) {
        goto LABEL_59;
      }
      id v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      uint64_t v111 = v110;
      if (v109 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v111 == v112)
      {
LABEL_29:
        swift_bridgeObjectRelease_n();
        goto LABEL_30;
      }
      char v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v113 & 1) == 0)
      {
        do
        {
          unint64_t v47 = (v47 + 1) & v97;
          unint64_t v88 = v47 >> 6;
          uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
          uint64_t v90 = 1 << v47;
          if ((v89 & (1 << v47)) == 0) {
            goto LABEL_59;
          }
          id v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
          uint64_t v116 = v115;
          if (v114 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v116 == v117) {
            goto LABEL_29;
          }
          char v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        while ((v119 & 1) == 0);
      }
LABEL_30:
    }
    else
    {
LABEL_59:
      *(void *)(v180 + 8 * v88) = v90 | v89;
      *(void *)(*(void *)(v80 + 48) + 8 * v47) = v45;
      uint64_t v120 = *(void *)(v80 + 16);
      BOOL v52 = __OFADD__(v120, 1);
      uint64_t v121 = v120 + 1;
      if (v52) {
        goto LABEL_100;
      }
      *(void *)(v80 + 16) = v121;
    }
    char v82 = 1;
    uint64_t v83 = 1;
    if ((v84 & 1) == 0) {
      continue;
    }
    break;
  }
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v122 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v122);
  swift_release();
  uint64_t v123 = _ContiguousArrayBuffer._asCocoaArray()();
  *(void *)&long long v185 = 0;
  id v124 = objc_msgSend(*(id *)v176, sel_resourceValuesForKeys_error_, v123, &v185);
  swift_unknownObjectRelease();
  long long v125 = (void *)v185;
  if (!v124)
  {
    uint64_t v45 = (uint64_t)&v182;
    if ((void)v185)
    {
      id v133 = (id)v185;
      swift_willThrow();

      swift_release();
      swift_release();
      swift_release();
      uint64_t v134 = 0;
      unint64_t v47 = (unint64_t)v166;
      unint64_t v135 = v167;
      int v136 = v165;
      goto LABEL_70;
    }
    unint64_t v47 = (unint64_t)v166;
    if (one-time initialization token for _nilObjCError == -1) {
      goto LABEL_95;
    }
    goto LABEL_102;
  }
  uint64_t v126 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v124);
  id v127 = v125;

  *(void *)&long long v185 = v126;
  *((void *)&v185 + 1) = v80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v128 = URLResourceValues._get(_:)(v172);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = (uint64_t)&v182;
  if (v128 != 2)
  {
    id v129 = objc_allocWithZone((Class)NSNumber);
    uint64_t v130 = @"NSFileExtensionHidden";
    id v131 = objc_msgSend(v129, sel_initWithBool_, v128 & 1);
    *((void *)&v186 + 1) = v169;
    *(void *)&long long v185 = v131;
    specialized Dictionary.subscript.setter((uint64_t)&v185, v130);
  }
  *(void *)&long long v185 = v126;
  *((void *)&v185 + 1) = v80;
  uint64_t v132 = v163;
  URLResourceValues.creationDate.getter((uint64_t)&v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v184)
  {
    long long v185 = 0u;
    long long v186 = 0u;
  }
  else
  {
    *((void *)&v186 + 1) = &type metadata for Date;
    *(void *)&long long v185 = v183;
  }
  unint64_t v135 = v167;
  int v136 = v165;
  uint64_t v134 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v185, v132);

  swift_release();
  swift_release();
  unint64_t v47 = (unint64_t)v166;
LABEL_70:
  uint64_t v137 = specialized _FileManagerImpl._extendedAttributes(at:followSymlinks:)((const char *)v47);
  if (v134)
  {
  }
  else
  {
    uint64_t v138 = v137;
    if (v137)
    {
      unint64_t v139 = (void *)String._bridgeToObjectiveCImpl()();
      *((void *)&v186 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      *(void *)&long long v185 = v138;
      specialized Dictionary.subscript.setter((uint64_t)&v185, v139);
    }
  }
  int v140 = S_IFMT.getter() & v136;
  if (v140 == (unsigned __int16)S_IFREG.getter()
    || (int v141 = S_IFMT.getter() & v136, v141 == (unsigned __int16)S_IFDIR.getter()))
  {
    unint64_t v142 = specialized static _FileManagerImpl._fileProtectionValueForPath(_:)((const char *)v47);
    if ((v142 & 0x100000000) != 0 || (uint64_t v143 = specialized NSFileProtectionType.init(intValue:)(v142)) == 0)
    {
      *(_OWORD *)(v45 + 160) = 0u;
      *(_OWORD *)(v45 + 176) = 0u;
      specialized Dictionary.subscript.setter((uint64_t)&v185, @"NSFileProtectionKey");
    }
    else
    {
      uint64_t v144 = v143;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
      uint64_t v145 = String._bridgeToObjectiveCImpl()();
      id v146 = @"NSFileProtectionKey";
      swift_bridgeObjectRelease();
      *((void *)&v186 + 1) = v162;
      *(void *)&long long v185 = v145;
      specialized Dictionary.subscript.setter((uint64_t)&v185, v146);
    }
  }
  *unint64_t v135 = v181;
}

id _NSGetBoolValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  Swift::Int v8 = objc_msgSend(v5, "initWithBool:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v4;
      unint64_t v5 = (v5 + 1) & v13;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v16 = v15;
          if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v16 == v17) {
            break;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v13;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v20 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v21 = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
        uint64_t v42 = static _DictionaryStorage.copy(original:)();
        uint64_t v21 = v42;
        if (*(void *)(v20 + 16))
        {
          id v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          unint64_t v44 = (unint64_t)((1 << *(unsigned char *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44]) {
            memmove(v43, __srca, 8 * v44);
          }
          int64_t v45 = 0;
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
          uint64_t v46 = 1 << *(unsigned char *)(v20 + 32);
          uint64_t v47 = -1;
          if (v46 < 64) {
            uint64_t v47 = ~(-1 << v46);
          }
          unint64_t v48 = v47 & *(void *)(v20 + 64);
          int64_t v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v45 << 6);
            }
            else
            {
              int64_t v55 = v45 + 1;
              if (__OFADD__(v45, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                int64_t v45 = v55 + 1;
                if (v55 + 1 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)&__srca[8 * v45];
                if (!v56)
                {
                  int64_t v45 = v55 + 2;
                  if (v55 + 2 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)&__srca[8 * v45];
                  if (!v56)
                  {
                    int64_t v45 = v55 + 3;
                    if (v55 + 3 >= v60) {
                      break;
                    }
                    unint64_t v56 = *(void *)&__srca[8 * v45];
                    if (!v56)
                    {
                      int64_t v45 = v55 + 4;
                      if (v55 + 4 >= v60) {
                        break;
                      }
                      unint64_t v56 = *(void *)&__srca[8 * v45];
                      if (!v56)
                      {
                        int64_t v57 = v55 + 5;
                        if (v57 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v45 = v57 + 1;
                            if (__OFADD__(v57, 1)) {
                              break;
                            }
                            if (v45 >= v60) {
                              goto LABEL_79;
                            }
                            unint64_t v56 = *(void *)&__srca[8 * v45];
                            ++v57;
                            if (v56) {
                              goto LABEL_78;
                            }
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        int64_t v45 = v57;
                      }
                    }
                  }
                }
              }
LABEL_78:
              unint64_t v48 = (v56 - 1) & v56;
              unint64_t v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }
            uint64_t v51 = 8 * v50;
            BOOL v52 = *(void **)(*(void *)(v20 + 48) + 8 * v50);
            uint64_t v53 = 32 * v50;
            outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(void *)(*(void *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(void *)(v21 + 56) + v53));
            id v54 = v52;
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(void *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *uint64_t v4 = v21;

      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v65, 0, sizeof(v65));
    }
    return outlined destroy of Any?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v65);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v2;
  uint64_t v7 = v64;
  *uint64_t v2 = 0x8000000000000000;
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    char v3 = v8;
    if (*(void *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      uint64_t v13 = v64;
      uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_84;
      }
      uint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      id v22 = (_OWORD *)(*(void *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *uint64_t v4 = v13;

      return swift_bridgeObjectRelease();
    }
    if (v6)
    {
      uint64_t v13 = v7;
      if (v8) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      id v41 = a2;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v24;
  if (!*(void *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
  id v25 = (void *)(v24 + 64);
  unint64_t v26 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v7 || (unint64_t)v25 >= v7 + 64 + 8 * v26) {
    memmove(v25, (const void *)(v7 + 64), 8 * v26);
  }
  id v27 = 0;
  *(void *)(v13 + 16) = *(void *)(v7 + 16);
  uint64_t v28 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & *(void *)(v7 + 64);
  uint64_t v58 = v7 + 64;
  int64_t v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      unint64_t v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      unint64_t v32 = v31 | ((void)v27 << 6);
      goto LABEL_25;
    }
    int64_t v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v37 >= v59) {
      goto LABEL_47;
    }
    unint64_t v38 = *(void *)(v58 + 8 * v37);
    int64_t v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      int64_t v39 = (int64_t)(v27 + 2);
      if ((uint64_t)(v27 + 2) >= v59) {
        goto LABEL_47;
      }
      unint64_t v38 = *(void *)(v58 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = (int64_t)(v27 + 3);
        if ((uint64_t)(v27 + 3) >= v59) {
          goto LABEL_47;
        }
        unint64_t v38 = *(void *)(v58 + 8 * v39);
        if (!v38)
        {
          int64_t v39 = (int64_t)(v27 + 4);
          if ((uint64_t)(v27 + 4) >= v59) {
            goto LABEL_47;
          }
          unint64_t v38 = *(void *)(v58 + 8 * v39);
          if (!v38)
          {
            int64_t v39 = (int64_t)(v27 + 5);
            if ((uint64_t)(v27 + 5) >= v59) {
              goto LABEL_47;
            }
            unint64_t v38 = *(void *)(v58 + 8 * v39);
            if (!v38)
            {
              int64_t v39 = (int64_t)(v27 + 6);
              if ((uint64_t)(v27 + 6) >= v59) {
                goto LABEL_47;
              }
              unint64_t v38 = *(void *)(v58 + 8 * v39);
              if (!v38) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    unint64_t v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    uint64_t v33 = 8 * v32;
    uint64_t v34 = *(void **)(*(void *)(v7 + 48) + 8 * v32);
    uint64_t v35 = 32 * v32;
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(void *)(*(void *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(void *)(v13 + 56) + v35));
    id v36 = v34;
    id v27 = __src;
  }
  uint64_t v40 = v27 + 7;
  if ((uint64_t)(v27 + 7) >= v59) {
    goto LABEL_47;
  }
  unint64_t v38 = *(void *)(v58 + 8 * (void)v40);
  if (v38)
  {
    int64_t v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v59) {
      goto LABEL_47;
    }
    unint64_t v38 = *(void *)(v58 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_46;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  type metadata accessor for NSAttributedStringKey(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  char *__src;
  char *__srca;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];

  uint64_t v4 = v2;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v20 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v21 = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
        uint64_t v42 = static _DictionaryStorage.copy(original:)();
        uint64_t v21 = v42;
        if (*(void *)(v20 + 16))
        {
          id v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          unint64_t v44 = (unint64_t)((1 << *(unsigned char *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44]) {
            memmove(v43, __srca, 8 * v44);
          }
          int64_t v45 = 0;
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
          uint64_t v46 = 1 << *(unsigned char *)(v20 + 32);
          uint64_t v47 = -1;
          if (v46 < 64) {
            uint64_t v47 = ~(-1 << v46);
          }
          unint64_t v48 = v47 & *(void *)(v20 + 64);
          int64_t v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v45 << 6);
            }
            else
            {
              int64_t v55 = v45 + 1;
              if (__OFADD__(v45, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                int64_t v45 = v55 + 1;
                if (v55 + 1 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)&__srca[8 * v45];
                if (!v56)
                {
                  int64_t v45 = v55 + 2;
                  if (v55 + 2 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)&__srca[8 * v45];
                  if (!v56)
                  {
                    int64_t v45 = v55 + 3;
                    if (v55 + 3 >= v60) {
                      break;
                    }
                    unint64_t v56 = *(void *)&__srca[8 * v45];
                    if (!v56)
                    {
                      int64_t v45 = v55 + 4;
                      if (v55 + 4 >= v60) {
                        break;
                      }
                      unint64_t v56 = *(void *)&__srca[8 * v45];
                      if (!v56)
                      {
                        int64_t v57 = v55 + 5;
                        if (v57 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v45 = v57 + 1;
                            if (__OFADD__(v57, 1)) {
                              break;
                            }
                            if (v45 >= v60) {
                              goto LABEL_79;
                            }
                            unint64_t v56 = *(void *)&__srca[8 * v45];
                            ++v57;
                            if (v56) {
                              goto LABEL_78;
                            }
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        int64_t v45 = v57;
                      }
                    }
                  }
                }
              }
LABEL_78:
              unint64_t v48 = (v56 - 1) & v56;
              unint64_t v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }
            uint64_t v51 = 8 * v50;
            BOOL v52 = *(void **)(*(void *)(v20 + 48) + 8 * v50);
            uint64_t v53 = 32 * v50;
            outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(void *)(*(void *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(void *)(v21 + 56) + v53));
            id v54 = v52;
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(void *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *uint64_t v4 = v21;

      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v65, 0, sizeof(v65));
    }
    return outlined destroy of Any?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v65);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v2;
  uint64_t v7 = v64;
  *uint64_t v2 = 0x8000000000000000;
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    char v3 = v8;
    if (*(void *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      uint64_t v13 = v64;
      uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_84;
      }
      uint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      id v22 = (_OWORD *)(*(void *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *uint64_t v4 = v13;

      return swift_bridgeObjectRelease();
    }
    if (v6)
    {
      uint64_t v13 = v7;
      if (v8) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      id v41 = a2;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v24;
  if (!*(void *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
  id v25 = (void *)(v24 + 64);
  unint64_t v26 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v7 || (unint64_t)v25 >= v7 + 64 + 8 * v26) {
    memmove(v25, (const void *)(v7 + 64), 8 * v26);
  }
  id v27 = 0;
  *(void *)(v13 + 16) = *(void *)(v7 + 16);
  uint64_t v28 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & *(void *)(v7 + 64);
  uint64_t v58 = v7 + 64;
  int64_t v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      unint64_t v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      unint64_t v32 = v31 | ((void)v27 << 6);
      goto LABEL_25;
    }
    int64_t v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v37 >= v59) {
      goto LABEL_47;
    }
    unint64_t v38 = *(void *)(v58 + 8 * v37);
    int64_t v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      int64_t v39 = (int64_t)(v27 + 2);
      if ((uint64_t)(v27 + 2) >= v59) {
        goto LABEL_47;
      }
      unint64_t v38 = *(void *)(v58 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = (int64_t)(v27 + 3);
        if ((uint64_t)(v27 + 3) >= v59) {
          goto LABEL_47;
        }
        unint64_t v38 = *(void *)(v58 + 8 * v39);
        if (!v38)
        {
          int64_t v39 = (int64_t)(v27 + 4);
          if ((uint64_t)(v27 + 4) >= v59) {
            goto LABEL_47;
          }
          unint64_t v38 = *(void *)(v58 + 8 * v39);
          if (!v38)
          {
            int64_t v39 = (int64_t)(v27 + 5);
            if ((uint64_t)(v27 + 5) >= v59) {
              goto LABEL_47;
            }
            unint64_t v38 = *(void *)(v58 + 8 * v39);
            if (!v38)
            {
              int64_t v39 = (int64_t)(v27 + 6);
              if ((uint64_t)(v27 + 6) >= v59) {
                goto LABEL_47;
              }
              unint64_t v38 = *(void *)(v58 + 8 * v39);
              if (!v38) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    unint64_t v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    uint64_t v33 = 8 * v32;
    uint64_t v34 = *(void **)(*(void *)(v7 + 48) + 8 * v32);
    uint64_t v35 = 32 * v32;
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(void *)(*(void *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(void *)(v13 + 56) + v35));
    id v36 = v34;
    id v27 = __src;
  }
  uint64_t v40 = v27 + 7;
  if ((uint64_t)(v27 + 7) >= v59) {
    goto LABEL_47;
  }
  unint64_t v38 = *(void *)(v58 + 8 * (void)v40);
  if (v38)
  {
    int64_t v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v59) {
      goto LABEL_47;
    }
    unint64_t v38 = *(void *)(v58 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_46;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  type metadata accessor for NSFileAttributeKey(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  char *__src;
  char *__srca;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];

  uint64_t v4 = v2;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v20 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v21 = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
        uint64_t v42 = static _DictionaryStorage.copy(original:)();
        uint64_t v21 = v42;
        if (*(void *)(v20 + 16))
        {
          id v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          unint64_t v44 = (unint64_t)((1 << *(unsigned char *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44]) {
            memmove(v43, __srca, 8 * v44);
          }
          int64_t v45 = 0;
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
          uint64_t v46 = 1 << *(unsigned char *)(v20 + 32);
          uint64_t v47 = -1;
          if (v46 < 64) {
            uint64_t v47 = ~(-1 << v46);
          }
          unint64_t v48 = v47 & *(void *)(v20 + 64);
          int64_t v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v45 << 6);
            }
            else
            {
              int64_t v55 = v45 + 1;
              if (__OFADD__(v45, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                int64_t v45 = v55 + 1;
                if (v55 + 1 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)&__srca[8 * v45];
                if (!v56)
                {
                  int64_t v45 = v55 + 2;
                  if (v55 + 2 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)&__srca[8 * v45];
                  if (!v56)
                  {
                    int64_t v45 = v55 + 3;
                    if (v55 + 3 >= v60) {
                      break;
                    }
                    unint64_t v56 = *(void *)&__srca[8 * v45];
                    if (!v56)
                    {
                      int64_t v45 = v55 + 4;
                      if (v55 + 4 >= v60) {
                        break;
                      }
                      unint64_t v56 = *(void *)&__srca[8 * v45];
                      if (!v56)
                      {
                        int64_t v57 = v55 + 5;
                        if (v57 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v45 = v57 + 1;
                            if (__OFADD__(v57, 1)) {
                              break;
                            }
                            if (v45 >= v60) {
                              goto LABEL_79;
                            }
                            unint64_t v56 = *(void *)&__srca[8 * v45];
                            ++v57;
                            if (v56) {
                              goto LABEL_78;
                            }
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        int64_t v45 = v57;
                      }
                    }
                  }
                }
              }
LABEL_78:
              unint64_t v48 = (v56 - 1) & v56;
              unint64_t v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }
            uint64_t v51 = 8 * v50;
            BOOL v52 = *(void **)(*(void *)(v20 + 48) + 8 * v50);
            uint64_t v53 = 32 * v50;
            outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(void *)(*(void *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(void *)(v21 + 56) + v53));
            id v54 = v52;
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(void *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *uint64_t v4 = v21;

      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v65, 0, sizeof(v65));
    }
    return outlined destroy of Any?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v65);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v2;
  uint64_t v7 = v64;
  *uint64_t v2 = 0x8000000000000000;
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    char v3 = v8;
    if (*(void *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      uint64_t v13 = v64;
      uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_84;
      }
      uint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      id v22 = (_OWORD *)(*(void *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *uint64_t v4 = v13;

      return swift_bridgeObjectRelease();
    }
    if (v6)
    {
      uint64_t v13 = v7;
      if (v8) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      id v41 = a2;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v24;
  if (!*(void *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
  id v25 = (void *)(v24 + 64);
  unint64_t v26 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v7 || (unint64_t)v25 >= v7 + 64 + 8 * v26) {
    memmove(v25, (const void *)(v7 + 64), 8 * v26);
  }
  id v27 = 0;
  *(void *)(v13 + 16) = *(void *)(v7 + 16);
  uint64_t v28 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & *(void *)(v7 + 64);
  uint64_t v58 = v7 + 64;
  int64_t v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      unint64_t v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      unint64_t v32 = v31 | ((void)v27 << 6);
      goto LABEL_25;
    }
    int64_t v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v37 >= v59) {
      goto LABEL_47;
    }
    unint64_t v38 = *(void *)(v58 + 8 * v37);
    int64_t v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      int64_t v39 = (int64_t)(v27 + 2);
      if ((uint64_t)(v27 + 2) >= v59) {
        goto LABEL_47;
      }
      unint64_t v38 = *(void *)(v58 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = (int64_t)(v27 + 3);
        if ((uint64_t)(v27 + 3) >= v59) {
          goto LABEL_47;
        }
        unint64_t v38 = *(void *)(v58 + 8 * v39);
        if (!v38)
        {
          int64_t v39 = (int64_t)(v27 + 4);
          if ((uint64_t)(v27 + 4) >= v59) {
            goto LABEL_47;
          }
          unint64_t v38 = *(void *)(v58 + 8 * v39);
          if (!v38)
          {
            int64_t v39 = (int64_t)(v27 + 5);
            if ((uint64_t)(v27 + 5) >= v59) {
              goto LABEL_47;
            }
            unint64_t v38 = *(void *)(v58 + 8 * v39);
            if (!v38)
            {
              int64_t v39 = (int64_t)(v27 + 6);
              if ((uint64_t)(v27 + 6) >= v59) {
                goto LABEL_47;
              }
              unint64_t v38 = *(void *)(v58 + 8 * v39);
              if (!v38) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    unint64_t v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    uint64_t v33 = 8 * v32;
    uint64_t v34 = *(void **)(*(void *)(v7 + 48) + 8 * v32);
    uint64_t v35 = 32 * v32;
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(void *)(*(void *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(void *)(v13 + 56) + v35));
    id v36 = v34;
    id v27 = __src;
  }
  uint64_t v40 = v27 + 7;
  if ((uint64_t)(v27 + 7) >= v59) {
    goto LABEL_47;
  }
  unint64_t v38 = *(void *)(v58 + 8 * (void)v40);
  if (v38)
  {
    int64_t v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v59) {
      goto LABEL_47;
    }
    unint64_t v38 = *(void *)(v58 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_46;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  type metadata accessor for NSURLResourceKey(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  BOOL v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    uid_t v5[2] = ~v7;
    v5[3] = v12;
    _OWORD v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  BOOL v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *BOOL v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void closure #1 in _SearchPathURLs(for:in:expandTilde:)(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = specialized Collection.first.getter(v4, v5);
    if (v7)
    {
      if (v6 == 126 && v7 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0) {
          goto LABEL_25;
        }
      }
      unint64_t v10 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v4, v5);
      if (v11)
      {
        uint64_t v13 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v13 = v4;
        }
        uint64_t v14 = v13 << 16;
        if ((v5 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0) {
          unint64_t v12 = v14 | 7;
        }
        else {
          unint64_t v12 = v14 | 0xB;
        }
      }
      else
      {
        unint64_t v12 = v10;
      }
      unint64_t v15 = String.index(after:)();
      if (v12 >> 14 == v15 >> 14)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      else
      {
        if (v12 >> 14 < v15 >> 14)
        {
          __break(1u);
          return;
        }
        uint64_t v18 = String.subscript.getter();
        uint64_t v16 = MEMORY[0x185301F50](v18);
        uint64_t v17 = v19;
        swift_bridgeObjectRelease();
      }
      unint64_t v20 = static String.homeDirectoryPath(forUser:)(v16, v17);
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v23 = specialized Collection.suffix(from:)(v12, v4, v5);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      v34[0] = v20;
      v34[1] = v22;
      unint64_t v30 = v23;
      uint64_t v31 = v25;
      uint64_t v32 = v27;
      uint64_t v33 = v29;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v20;
      unint64_t v5 = v22;
    }
LABEL_25:
    LOBYTE(v34[0]) = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    goto LABEL_26;
  }
  LOBYTE(v34[0]) = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  swift_bridgeObjectRetain();
LABEL_26:
  URL.init(filePath:directoryHint:relativeTo:)(v4, v5, (unsigned __int8 *)v34, (uint64_t)&v30, a3);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

void URL.init(filePath:directoryHint:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a3;
  char v9 = *(void **)a4;
  uint64_t v78 = *(void **)(a4 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  int v11 = _foundation_swift_url_feature_enabled();
  uint64_t v12 = a2 & 0x2000000000000000;
  uint64_t v13 = HIBYTE(a2) & 0xF;
  uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v15 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    if (!v15) {
      swift_bridgeObjectRelease();
    }
    switch(v8)
    {
      case 1:
        uint64_t v23 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v9)
        {
          swift_release();
          swift_release();
        }
        id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initFileURLWithPath_isDirectory_relativeToURL_, v23, 0, v9);
        break;
      case 2:
        uint64_t v19 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v9)
        {
          swift_release();
          swift_release();
        }
        id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initFileURLWithPath_relativeToURL_, v19, v9);
        break;
      case 3:
        v20._uint64_t countAndFlagsBits = 47;
        v20._unint64_t object = (void *)0xE100000000000000;
        Swift::Bool v21 = String.hasSuffix(_:)(v20);
        uint64_t v22 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v9)
        {
          swift_release();
          swift_release();
        }
        id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initFileURLWithPath_isDirectory_relativeToURL_, v22, v21, v9);
        break;
      default:
        uint64_t v16 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v9)
        {
          swift_release();
          swift_release();
        }
        id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initFileURLWithPath_isDirectory_relativeToURL_, v16, 1, v9);
        break;
    }
    uint64_t v24 = v17;
    swift_unknownObjectRelease();

    uint64_t v25 = static URL._converted(from:)(v24);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    goto LABEL_85;
  }
  if (!v15)
  {
    uint64_t v18 = v78;
    outlined copy of URL?((uint64_t)v9);
    swift_bridgeObjectRelease();
    if (v9)
    {
      outlined consume of URL?(v9);
    }
    else
    {
      static URL.currentDirectoryOrNil()(&v97);
      char v9 = v97;
      uint64_t v18 = v98;
      uint64_t v10 = v99;
    }
    *(void *)&long long v93 = v9;
    *((void *)&v93 + 1) = v18;
    *(void *)&v94[0] = v10;
    outlined copy of URL?((uint64_t)v9);
    URL.init(string:relativeTo:)(0, 0xE000000000000000, (id *)&v93, (uint64_t *)&v97);
    outlined consume of URL?(v9);
    uint64_t v25 = v97;
    if (v97)
    {
      uint64_t v26 = (uint64_t)v98;
      uint64_t v27 = v99;
      outlined consume of URL?(v9);
LABEL_85:
      *a5 = v25;
      a5[1] = v26;
      a5[2] = v27;
      return;
    }
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v75 = 0;
  uint64_t v80 = a1;
  unint64_t v81 = a2;
  if ((specialized Collection.first.getter(a1, a2) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(a1, a2) & 0x1FF) == 0x7E)
  {
    uint64_t v76 = v10;
    int v77 = 1;
  }
  else
  {
    if (!v9)
    {
      static URL.currentDirectoryOrNil()(&v97);
      char v9 = v97;
      uint64_t v78 = v98;
      uint64_t v10 = v99;
    }
    uint64_t v76 = v10;
    int v77 = 0;
  }
  int v28 = 1;
  switch(v8)
  {
    case 1:
      int v28 = 0;
      goto LABEL_60;
    case 2:
      char v29 = v77;
      if (!v9) {
        char v29 = 1;
      }
      if (v29)
      {
        swift_bridgeObjectRetain();
        goto LABEL_59;
      }
      uint64_t v97 = v9;
      id v98 = v78;
      uint64_t v30 = v76;
      uint64_t v99 = v76;
      swift_retain();
      id v31 = v9;
      swift_retain();
      Swift::String v32 = URL.path(percentEncoded:)(1);
      uint64_t v33 = specialized Collection.first.getter(a1, a2);
      if ((v33 & 0x1FF) == 0x2F)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_45:
        uint64_t v34 = v75;
        goto LABEL_47;
      }
      LOBYTE(v97) = 47;
      MEMORY[0x1F4188790](v33);
      uint64_t v70 = (uint64_t)&v97;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v34 = v75;
      specialized BidirectionalCollection.lastIndex(where:)((unint64_t)_sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)v69, v32._countAndFlagsBits, (unint64_t)v32._object);
      if ((v35 & 1) == 0)
      {
        uint64_t v75 = v34;
        swift_bridgeObjectRetain();
        String.index(after:)();
        uint64_t v36 = String.subscript.getter();
        unint64_t v38 = v37;
        uint64_t v40 = v39;
        uint64_t v74 = v41;
        swift_bridgeObjectRelease();
        *(void *)&long long v93 = 0;
        *((void *)&v93 + 1) = 0xE000000000000000;
        uint64_t v42 = String.count.getter();
        uint64_t v72 = v40;
        id v73 = v38;
        uint64_t v43 = v74;
        uint64_t v44 = Substring.distance(from:to:)();
        BOOL v45 = __OFADD__(v42, v44);
        uint64_t v46 = v42 + v44;
        if (v45) {
          __break(1u);
        }
        MEMORY[0x185301FA0](v46);
        uint64_t v97 = (void *)v36;
        id v98 = v73;
        uint64_t v99 = v72;
        *(void *)&long long v100 = v43;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        String.append<A>(contentsOf:)();
        uint64_t v97 = (void *)a1;
        id v98 = (void *)a2;
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        a2 = *((void *)&v93 + 1);
        a1 = v93;
        uint64_t v30 = v76;
        goto LABEL_45;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v30 = v76;
LABEL_47:
      uint64_t v97 = (void *)a1;
      id v98 = (void *)a2;
      swift_bridgeObjectRetain();
      if (String.count.getter() < 2)
      {
        unint64_t v47 = a2;
      }
      else
      {
        unint64_t v47 = a2;
        if ((specialized BidirectionalCollection.last.getter(a1, a2) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          a1 = (uint64_t)v97;
          unint64_t v47 = (unint64_t)v98;
        }
      }
      *(void *)&long long v93 = Set.init(minimumCapacity:)();
      specialized Set._Variant.insert(_:)(&v83, 0x2FuLL);
      uint64_t v48 = v93;
      uint64_t v49 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0) {
        uint64_t v49 = a1 & 0xFFFFFFFFFFFFLL;
      }
      if (v49)
      {
        uint64_t v76 = v30;
        *(void *)&long long v93 = a1;
        *((void *)&v93 + 1) = v47;
        MEMORY[0x1F4188790](v48);
        uint64_t v70 = v51;
        uint64_t v71 = v50;
        uint64_t v52 = v50;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v69, a1, v47);
        if (v53 == 1)
        {
          long long v54 = v93;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v54, *((unint64_t *)&v54 + 1), v52);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v75 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of URL?(v9);
LABEL_59:
      LOBYTE(v97) = 0;
      id v55 = objc_msgSend(self, sel_defaultManager);
      objc_msgSend(v55, sel_fileExistsAtPath_isDirectory_, String._bridgeToObjectiveCImpl()(), &v97);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      int v28 = v97;
      a1 = v80;
      a2 = v81;
      uint64_t v12 = v81 & 0x2000000000000000;
      uint64_t v13 = HIBYTE(v81) & 0xF;
      uint64_t v14 = v80 & 0xFFFFFFFFFFFFLL;
LABEL_60:
      if (v12) {
        uint64_t v56 = v13;
      }
      else {
        uint64_t v56 = v14;
      }
      if (v56)
      {
        __int16 v57 = specialized BidirectionalCollection.last.getter(a1, a2);
        if ((v57 & 0x100) != 0)
        {
          if (!v28) {
            goto LABEL_72;
          }
        }
        else
        {
          if (v57 == 47) {
            char v58 = 0;
          }
          else {
            char v58 = v28;
          }
          if ((v58 & 1) == 0) {
            goto LABEL_72;
          }
        }
        v59._uint64_t countAndFlagsBits = 47;
        v59._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v59);
      }
LABEL_72:
      char v60 = 0;
      char v79 = 1;
      char v105 = 1;
      uint64_t v97 = 0;
      id v98 = 0;
      LOBYTE(v99) = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      uint64_t v104 = 0;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      __int16 v109 = 0;
      uint64_t v61 = v76;
      if (!v77)
      {
LABEL_75:
        unint64_t v64 = v80;
        uint64_t v18 = (void *)v81;
        uint64_t v65 = HIBYTE(v81) & 0xF;
        if ((v81 & 0x2000000000000000) == 0) {
          uint64_t v65 = v80 & 0xFFFFFFFFFFFFLL;
        }
        if (v65)
        {
          swift_bridgeObjectRetain();
          unint64_t v66 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v64, (unint64_t)v18);
          unint64_t v68 = v67;
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v66 = 0;
          unint64_t v68 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0)
        {
          BYTE8(v93) = 0;
          *(_DWORD *)((char *)&v93 + 9) = *(_DWORD *)((char *)&v98 + 1);
          *(_WORD *)((char *)&v93 + 13) = BYTE5(v98);
          HIBYTE(v93) = HIBYTE(v98);
          LOBYTE(v94[0]) = v99;
          *(_OWORD *)((char *)v94 + 8) = v100;
          *(_OWORD *)((char *)&v94[1] + 8) = v101;
          *(_OWORD *)((char *)&v94[2] + 8) = v102;
          *(_OWORD *)((char *)&v94[3] + 8) = v103;
          *((void *)&v94[4] + 1) = v104;
          LOBYTE(v95) = v105;
          *((void *)&v95 + 1) = v66;
          *(void *)&v96[0] = v68;
          *(_OWORD *)((char *)v96 + 8) = v107;
          *(_OWORD *)((char *)&v96[1] + 8) = v108;
          BYTE8(v96[2]) = v60 & 1;
          BYTE9(v96[2]) = HIBYTE(v109);
          long long v90 = v96[0];
          v91[0] = v96[1];
          *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)((char *)&v96[1] + 10);
          long long v85 = v94[1];
          long long v86 = v94[2];
          long long v87 = v94[3];
          *(void *)&long long v93 = v97;
          long long v88 = v94[4];
          long long v89 = v95;
          long long v83 = v93;
          long long v84 = v94[0];
          v82[0] = v9;
          v82[1] = v78;
          v82[2] = v61;
          URLComponents.url(relativeTo:)((uint64_t)v82, v92);
          uint64_t v25 = (void *)v92[0];
          if (v92[0])
          {
LABEL_84:
            uint64_t v26 = v92[1];
            uint64_t v27 = v92[2];
            outlined release of URLComponents((uint64_t)&v93);
            outlined consume of URL?(v9);
            swift_bridgeObjectRelease();
            goto LABEL_85;
          }
          goto LABEL_89;
        }
        BYTE8(v93) = 0;
        *(_DWORD *)((char *)&v93 + 9) = *(_DWORD *)((char *)&v98 + 1);
        *(_WORD *)((char *)&v93 + 13) = BYTE5(v98);
        HIBYTE(v93) = HIBYTE(v98);
        LOBYTE(v94[0]) = v99;
        *(_OWORD *)((char *)v94 + 8) = v100;
        *(_OWORD *)((char *)&v94[1] + 8) = v101;
        *(_OWORD *)((char *)&v94[2] + 8) = v102;
        *(_OWORD *)((char *)&v94[3] + 8) = v103;
        *((void *)&v94[4] + 1) = v104;
        LOBYTE(v95) = v105;
        *((void *)&v95 + 1) = v66;
        *(void *)&v96[0] = v68;
        *(_OWORD *)((char *)v96 + 8) = v107;
        *(_OWORD *)((char *)&v96[1] + 8) = v108;
        BYTE8(v96[2]) = v60 & 1;
        BYTE9(v96[2]) = HIBYTE(v109);
        long long v90 = v96[0];
        v91[0] = v96[1];
        *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)((char *)&v96[1] + 10);
        long long v85 = v94[1];
        long long v86 = v94[2];
        long long v87 = v94[3];
        *(void *)&long long v93 = v97;
        long long v88 = v94[4];
        long long v89 = v95;
        long long v83 = v93;
        long long v84 = v94[0];
        URLComponents.url.getter(v92);
        uint64_t v25 = (void *)v92[0];
        if (v92[0]) {
          goto LABEL_84;
        }
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      v62.value._uint64_t countAndFlagsBits = 1701603686;
      v62.value._unint64_t object = (void *)0xE400000000000000;
      URLComponents._URLComponents.setScheme(_:)(v62);
      if (!v18)
      {
        LOBYTE(v98) = 0;
        BYTE4(v98) = 0;
        HIBYTE(v109) = 0;
        uint64_t v63 = swift_bridgeObjectRelease();
        long long v103 = xmmword_182107DC0;
        LOBYTE(v93) = 37;
        MEMORY[0x1F4188790](v63);
        uint64_t v70 = (uint64_t)&v93;
        char v60 = specialized Sequence.contains(where:)((uint64_t (*)(void *))_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)v69, 0, 0xE000000000000000);
        LOBYTE(v109) = v60 & 1;
        goto LABEL_75;
      }
LABEL_90:

      LODWORD(v71) = 0;
      uint64_t v70 = 714;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    case 3:
      int v28 = (specialized BidirectionalCollection.last.getter(a1, a2) & 0x1FF) == 47;
      goto LABEL_60;
    default:
      goto LABEL_60;
  }
}

uint64_t URLResourceValues._get(_:)(void *a1)
{
  uint64_t v2 = *v1;
  if (!*(void *)(v2 + 16))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_8;
  }
  id v3 = a1;
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    long long v9 = 0u;
    long long v10 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v9);

  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v9);
    return 2;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    return 2;
  }
  id v6 = objc_msgSend(v8, sel_BOOLValue);

  return (uint64_t)v6;
}

unint64_t specialized static _FileManagerImpl._fileProtectionValueForPath(_:)(const char *a1)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  v5[1] = 0;
  uid_t v5[2] = 0;
  uint64_t v4 = 0;
  v5[0] = 0x4000000000000005;
  int v1 = getattrlist(a1, v5, &v4, 8uLL, 1u);
  if (v1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = HIDWORD(v4);
  }
  return v2 | ((unint64_t)(v1 != 0) << 32);
}

uint64_t URLResourceValues.creationDate.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = result ^ 1;
  return result;
}

uint64_t URLResourceValues.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E4F1C540], a1);
}

uint64_t specialized _FileManagerImpl._extendedAttributes(at:followSymlinks:)(const char *a1)
{
  ssize_t v2 = listxattr(a1, 0, 0, 0);
  if (v2 < 1) {
    return 0;
  }
  size_t v3 = v2;
  uint64_t v4 = (char *)swift_slowAlloc();
  if (listxattr(a1, v4, v3, 0) < 1)
  {
    MEMORY[0x185309510](v4, -1, -1);
    return 0;
  }
  path = (char *)a1;
  unint64_t v5 = 0xD000000000000014;
  uint64_t v6 = &v4[v3];
  uint64_t v97 = MEMORY[0x1E4FBC868];
  char v7 = v4;
  while (1)
  {
    uint64_t v9 = String.init(cString:)();
    unint64_t v10 = v8;
    if (v9 == 0xD000000000000016 && v8 == 0x80000001823AEA40
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v9 == 0xD000000000000014 && v10 == 0x80000001823AEA60
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v9 == 0x532E6D6574737973 && v10 == 0xEF79746972756365
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if ((v10 & 0x1000000000000000) != 0)
      {
        Swift::Int v11 = String.UTF8View._foreignCount()();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        if ((v10 & 0x2000000000000000) != 0) {
          Swift::Int v11 = HIBYTE(v10) & 0xF;
        }
        else {
          Swift::Int v11 = v9 & 0xFFFFFFFFFFFFLL;
        }
      }
      goto LABEL_17;
    }
    long long v95 = v4;
    ssize_t v12 = getxattr(path, v7, 0, 0, 0, 1);
    if (v12 == -1) {
      break;
    }
    size_t v13 = v12;
    if (v12 <= 0) {
      goto LABEL_31;
    }
    uint64_t v14 = malloc(v12);
    if (!v14) {
      goto LABEL_113;
    }
    uint64_t v15 = v14;
    ssize_t v16 = getxattr(path, v7, v14, v13, 0, 1);
    if (v16 == -1)
    {
      free(v15);
      uint64_t v59 = String.init(cString:)();
      unint64_t v61 = v64;
      int v65 = MEMORY[0x185301870]();
      uint64_t v66 = 263;
      switch(v65)
      {
        case 1:
        case 13:
          uint64_t v66 = 257;
          goto LABEL_100;
        case 2:
          uint64_t v66 = 260;
          goto LABEL_100;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_97;
        case 27:
          goto LABEL_100;
        default:
          if (v65 == 63)
          {
            uint64_t v66 = 258;
            goto LABEL_100;
          }
          if (v65 != 102) {
            goto LABEL_97;
          }
          break;
      }
LABEL_89:
      id v67 = 0;
      uint64_t v68 = 256;
      unint64_t v5 = (unint64_t)v95;
LABEL_106:
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v68, v59, v61, v67, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v100, 0, 0);
      swift_willThrow();
      swift_bridgeObjectRelease();
      if ((v10 & 0x1000000000000000) == 0)
      {
LABEL_107:
        swift_bridgeObjectRelease();
        return MEMORY[0x185309510](v5, -1, -1);
      }
LABEL_111:
      String.UTF8View._foreignCount()();
      goto LABEL_107;
    }
    unint64_t v17 = v16;
    if (v16 <= 0)
    {
      free(v15);
LABEL_31:
      uint64_t v31 = v97;
      uint64_t v4 = v95;
      if ((v10 & 0x1000000000000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_77;
    }
    type metadata accessor for __DataStorage();
    uint64_t v18 = swift_allocObject();
    if (v17 > 0x3FFFFFFFFFFFFFFELL)
    {
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    *(void *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = 0;
    *(unsigned char *)(v18 + 64) = 0;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 48) = closure #2 in Data.Deallocator._deallocator.getter;
    *(void *)(v18 + 56) = 0;
    uint64_t v19 = specialized Data._Representation.init(_:count:)((void *)v18, v17);
    unint64_t v21 = v20;
    swift_bridgeObjectRetain();
    unint64_t v94 = v21;
    outlined copy of Data._Representation(v19, v21);
    uint64_t v22 = v97;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v100 = v97;
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    uint64_t v26 = *(void *)(v97 + 16);
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      goto LABEL_109;
    }
    if (*(void *)(v97 + 24) >= v28)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v92 = v97;
        if (v24) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v87 = v25;
        int v101 = v24;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
        uint64_t v34 = static _DictionaryStorage.copy(original:)();
        uint64_t v22 = v34;
        if (*(void *)(v97 + 16))
        {
          char v35 = (char *)(v34 + 64);
          __src = (char *)(v97 + 64);
          unint64_t v36 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
          uint64_t v93 = v22;
          if (v22 != v97 || v35 >= &__src[8 * v36]) {
            memmove(v35, __src, 8 * v36);
          }
          int64_t v90 = 0;
          *(void *)(v22 + 16) = *(void *)(v97 + 16);
          uint64_t v37 = 1 << *(unsigned char *)(v97 + 32);
          if (v37 < 64) {
            uint64_t v38 = ~(-1 << v37);
          }
          else {
            uint64_t v38 = -1;
          }
          unint64_t v39 = v38 & *(void *)(v97 + 64);
          int64_t v88 = (unint64_t)(v37 + 63) >> 6;
          while (1)
          {
            if (v39)
            {
              unint64_t v40 = __clz(__rbit64(v39));
              v39 &= v39 - 1;
              unint64_t v41 = v40 | (v90 << 6);
              uint64_t v42 = v97;
            }
            else
            {
              int64_t v49 = v90 + 1;
              uint64_t v42 = v97;
              if (__OFADD__(v90, 1)) {
                goto LABEL_114;
              }
              if (v49 >= v88) {
                break;
              }
              unint64_t v50 = *(void *)&__src[8 * v49];
              int64_t v51 = v90 + 1;
              if (!v50)
              {
                int64_t v51 = v90 + 2;
                if (v90 + 2 >= v88) {
                  break;
                }
                unint64_t v50 = *(void *)&__src[8 * v51];
                if (!v50)
                {
                  int64_t v51 = v90 + 3;
                  if (v90 + 3 >= v88) {
                    break;
                  }
                  unint64_t v50 = *(void *)&__src[8 * v51];
                  if (!v50)
                  {
                    int64_t v51 = v90 + 4;
                    if (v90 + 4 >= v88) {
                      break;
                    }
                    unint64_t v50 = *(void *)&__src[8 * v51];
                    if (!v50)
                    {
                      int64_t v51 = v90 + 5;
                      if (v90 + 5 >= v88) {
                        break;
                      }
                      unint64_t v50 = *(void *)&__src[8 * v51];
                      if (!v50)
                      {
                        int64_t v51 = v90 + 6;
                        if (v90 + 6 >= v88) {
                          break;
                        }
                        unint64_t v50 = *(void *)&__src[8 * v51];
                        if (!v50)
                        {
                          int64_t v51 = v90 + 7;
                          if (v90 + 7 >= v88) {
                            break;
                          }
                          unint64_t v50 = *(void *)&__src[8 * v51];
                          if (!v50)
                          {
                            int64_t v52 = v90 + 8;
                            if (v90 + 8 >= v88) {
                              break;
                            }
                            unint64_t v50 = *(void *)&__src[8 * v52];
                            if (!v50)
                            {
                              while (1)
                              {
                                int64_t v51 = v52 + 1;
                                if (__OFADD__(v52, 1)) {
                                  goto LABEL_115;
                                }
                                uint64_t v42 = v97;
                                uint64_t v22 = v93;
                                if (v51 >= v88) {
                                  goto LABEL_73;
                                }
                                unint64_t v50 = *(void *)&__src[8 * v51];
                                ++v52;
                                if (v50) {
                                  goto LABEL_72;
                                }
                              }
                            }
                            int64_t v51 = v90 + 8;
                            uint64_t v42 = v97;
                            uint64_t v22 = v93;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_72:
              unint64_t v39 = (v50 - 1) & v50;
              int64_t v90 = v51;
              unint64_t v41 = __clz(__rbit64(v50)) + (v51 << 6);
            }
            uint64_t v43 = 16 * v41;
            uint64_t v44 = *(void *)(v42 + 56);
            BOOL v45 = (uint64_t *)(*(void *)(v42 + 48) + v43);
            uint64_t v47 = *v45;
            uint64_t v46 = v45[1];
            long long v91 = *(_OWORD *)(v44 + v43);
            uint64_t v48 = (void *)(*(void *)(v22 + 48) + v43);
            *uint64_t v48 = v47;
            v48[1] = v46;
            *(_OWORD *)(*(void *)(v22 + 56) + v43) = v91;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v91, *((unint64_t *)&v91 + 1));
          }
        }
LABEL_73:
        swift_bridgeObjectRelease();
        unint64_t v25 = v87;
        uint64_t v92 = v22;
        if (v101) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      int v101 = v24;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      if ((v101 & 1) != (v30 & 1)) {
        goto LABEL_116;
      }
      unint64_t v25 = v29;
      uint64_t v22 = v100;
      uint64_t v92 = v100;
      if (v101)
      {
LABEL_38:
        uint64_t v32 = *(void *)(v22 + 56) + 16 * v25;
        outlined consume of Data._Representation(*(void *)v32, *(void *)(v32 + 8));
        unint64_t v33 = v94;
        *(void *)uint64_t v32 = v19;
        *(void *)(v32 + 8) = v94;
        uint64_t v4 = v95;
        goto LABEL_76;
      }
    }
    *(void *)(v22 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    uint64_t v53 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v25);
    *uint64_t v53 = v9;
    v53[1] = v10;
    long long v54 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v25);
    *long long v54 = v19;
    v54[1] = v94;
    uint64_t v55 = *(void *)(v22 + 16);
    BOOL v56 = __OFADD__(v55, 1);
    uint64_t v57 = v55 + 1;
    if (v56) {
      goto LABEL_110;
    }
    *(void *)(v22 + 16) = v57;
    swift_bridgeObjectRetain();
    uint64_t v4 = v95;
    unint64_t v33 = v94;
LABEL_76:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v19, v33);
    uint64_t v31 = v92;
    if ((v10 & 0x1000000000000000) == 0)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      if ((v10 & 0x2000000000000000) != 0) {
        Swift::Int v11 = HIBYTE(v10) & 0xF;
      }
      else {
        Swift::Int v11 = v9 & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_35;
    }
LABEL_77:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease();
LABEL_35:
    uint64_t v97 = v31;
LABEL_17:
    v7 += v11 + 1;
    if (v7 >= v6)
    {
      MEMORY[0x185309510](v4, -1, -1);
      return v97;
    }
  }
  uint64_t v59 = String.init(cString:)();
  unint64_t v61 = v60;
  int v62 = MEMORY[0x185301870]();
  uint64_t v63 = 263;
  switch(v62)
  {
    case 1:
    case 13:
      uint64_t v63 = 257;
      goto LABEL_92;
    case 2:
      uint64_t v63 = 260;
      goto LABEL_92;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      goto LABEL_86;
    case 27:
      goto LABEL_92;
    default:
      if (v62 == 63)
      {
        uint64_t v63 = 258;
      }
      else
      {
        if (v62 == 102) {
          goto LABEL_89;
        }
LABEL_86:
        uint64_t v63 = 256;
      }
LABEL_92:
      uint64_t v98 = v63;
      uint64_t v99 = v59;
      uint64_t v59 = v61;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_117;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v69 = (int)POSIXErrorCode.rawValue.getter();
      id v70 = objc_allocWithZone((Class)NSError);
      uint64_t v71 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v67 = objc_msgSend(v70, sel_initWithDomain_code_userInfo_, v71, v69, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v72 = objc_msgSend(v67, sel_domain);
      id v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      unint64_t v61 = v74;

      if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v61 == v75) {
        goto LABEL_103;
      }
      char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v5 = (unint64_t)v95;
      if (v76) {
        goto LABEL_105;
      }
      __break(1u);
LABEL_97:
      uint64_t v66 = 256;
LABEL_100:
      uint64_t v98 = v66;
      uint64_t v99 = v59;
      uint64_t v59 = v61;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_117;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v77 = (int)POSIXErrorCode.rawValue.getter();
      id v78 = objc_allocWithZone((Class)NSError);
      uint64_t v79 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v67 = objc_msgSend(v78, sel_initWithDomain_code_userInfo_, v79, v77, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v80 = objc_msgSend(v67, sel_domain);
      id v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      uint64_t v83 = v82;

      if (v81 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v83 == v84)
      {
LABEL_103:
        swift_bridgeObjectRelease_n();
        unint64_t v5 = (unint64_t)v95;
LABEL_105:
        unint64_t v61 = v59;
        uint64_t v59 = v99;
        uint64_t v68 = v98;
        goto LABEL_106;
      }
      char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v5 = (unint64_t)v95;
      if (v85) {
        goto LABEL_105;
      }
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_117:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v86._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
  }
}

NSFileAttributeType specialized UInt16._fileType.getter(__int16 a1)
{
  unsigned __int16 v1 = S_IFMT.getter() & a1;
  if ((unsigned __int16)S_IFCHR.getter() == v1)
  {
    ssize_t v2 = &NSFileTypeCharacterSpecial;
  }
  else if ((unsigned __int16)S_IFDIR.getter() == v1)
  {
    ssize_t v2 = &NSFileTypeDirectory;
  }
  else if ((unsigned __int16)S_IFBLK.getter() == v1)
  {
    ssize_t v2 = &NSFileTypeBlockSpecial;
  }
  else if ((unsigned __int16)S_IFREG.getter() == v1)
  {
    ssize_t v2 = &NSFileTypeRegular;
  }
  else if ((unsigned __int16)S_IFLNK.getter() == v1)
  {
    ssize_t v2 = &NSFileTypeSymbolicLink;
  }
  else if ((unsigned __int16)S_IFSOCK.getter() == v1)
  {
    ssize_t v2 = &NSFileTypeSocket;
  }
  else
  {
    ssize_t v2 = &NSFileTypeUnknown;
  }
  return *v2;
}

void *specialized NSFileProtectionType.init(intValue:)(int a1)
{
  int v1 = a1 - 1;
  if ((a1 - 1) > 6 || ((0x4Fu >> v1) & 1) == 0) {
    return 0;
  }
  ssize_t v2 = *off_1E51F5BF8[v1];
  id v3 = v2;
  return v2;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.Runs@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 104);
  long long v4 = *(_OWORD *)(v1 + 120);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyedUnarchiver.Type);
  uint64_t v6 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      unint64_t v8 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
      outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      unint64_t v8 = __DataStorage.bridgedReference(_:)(v10, v9);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      char v7 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      *(void *)&v16[0] = a1;
      WORD4(v16[0]) = a2;
      BYTE10(v16[0]) = BYTE2(a2);
      BYTE11(v16[0]) = BYTE3(a2);
      BYTE12(v16[0]) = BYTE4(a2);
      BYTE13(v16[0]) = BYTE5(a2);
      char v7 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v16, BYTE6(a2));
LABEL_7:
      unint64_t v8 = v7;
      break;
  }
  *(void *)&v16[0] = 0;
  id v11 = (id)__NSKeyedUnarchiverUnarchiveObject(v6, v8, (uint64_t)v16);
  swift_unknownObjectRelease();

  ssize_t v12 = *(void **)&v16[0];
  if (v11)
  {
    id v13 = *(id *)&v16[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    id v14 = v12;
  }
  outlined init with take of Any?((uint64_t)v16, (uint64_t)v17);
  if (!v12) {
    goto LABEL_14;
  }
  id v15 = v12;
  if (objc_msgSend(v15, sel_code) == (id)4865)
  {

LABEL_14:
    outlined init with take of Any?((uint64_t)v17, a3);

    return;
  }
  swift_willThrow();
  outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

uint64_t __NSKeyedUnarchiverUnarchiveObject(void *a1, const char *a2, uint64_t a3)
{
  if (a3) {
    return [a1 unarchiveTopLevelObjectWithData:a2 error:a3];
  }
  else {
    return [a1 unarchiveObjectWithData:a2];
  }
}

BOOL decodingCyclesIsAllowedForCoder(uint64_t a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(a1 + 16));
  if (v1 != *(void *)(a1 + 136)
    || (unint64_t v2 = atomic_load((unint64_t *)(a1 + 16)),
        unint64_t v3 = atomic_load((unint64_t *)(a1 + 16)),
        v3 != *(void *)(a1 + 136))
    || (char v4 = atomic_load((unint64_t *)(a1 + 16)),
        unint64_t v5 = atomic_load((unint64_t *)(a1 + 16)),
        v5 != *(void *)(a1 + 136)))
  {
    __NSPoisoned();
  }
  int v6 = atomic_load((unint64_t *)(a1 + 16));
  int TrustRestrictions = _NSCoderGetTrustRestrictions();
  if ((v4 & 0x20) != 0) {
    return 0;
  }
  return ((v6 << 16) & 0x1000000 | (v2 >> 2) & 1) != 1 || TrustRestrictions != 0;
}

uint64_t _NSCoderGetTrustRestrictions()
{
  if (qword_1EB1ED198 != -1) {
    dispatch_once(&qword_1EB1ED198, &__block_literal_global_5);
  }
  return dword_1EB1ED194;
}

void protocol witness for Subscription.request(_:) in conformance Notification.Subscription<A>(uint64_t a1)
{
}

void Notification.Subscription.request(_:)(uint64_t a1)
{
  unint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(v1 + 32);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    char v5 = static Subscribers.Demand.== infix(_:_:)();
    uint64_t v6 = static Subscribers.Demand.unlimited.getter();
    if ((v5 & 1) == 0)
    {
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
      {
        if ((v4 | a1) < 0)
        {
          __break(1u);
          goto LABEL_14;
        }
        uint64_t v6 = v4 + a1;
        if (!__OFADD__(v4, a1))
        {
          if ((v6 & 0x8000000000000000) == 0) {
            goto LABEL_9;
          }
LABEL_14:
          __break(1u);
          return;
        }
      }
      uint64_t v6 = static Subscribers.Demand.unlimited.getter();
    }
LABEL_9:
    *(void *)(v1 + 32) = v6;
  }

  os_unfair_lock_unlock(v3);
}

uint64_t Locale.measurementSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 296))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 296))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleICU@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.measurementSystem.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));

  return swift_release();
}

uint64_t _LocaleICU.usesMetricSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.measurementSystem.getter((void *)(v1 + 16), (uint64_t)v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  if (one-time initialization token for us != -1) {
    swift_once();
  }
  if (v2 == (void)xmmword_1E8ED61C0 && v3 == *((void *)&xmmword_1E8ED61C0 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

uint64_t partial apply for closure #1 in _LocaleICU.measurementSystem.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in _LocaleICU.measurementSystem.getter(a1, v2, a2);
}

uint64_t closure #1 in _LocaleICU.measurementSystem.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[36];
  uint64_t v7 = a1[37];
  uint64_t v6 = a1[38];
  uint64_t v8 = a1[39];
  if (!v7)
  {
    uint64_t v30 = v5;
    uint64_t v10 = specialized static Locale.keywordValue(identifier:key:)();
    if (v11)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v11;
      BOOL v14 = v10 == 0x6C61697265706D69 && v11 == 0xE800000000000000;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for uk != -1) {
          swift_once();
        }
        uint64_t v21 = static Locale.MeasurementSystem.uk;
        uint64_t v20 = unk_1E8ED2BA0;
        long long v22 = xmmword_1E8ED2BA8;
        a1[36] = static Locale.MeasurementSystem.uk;
        a1[37] = v20;
        *((_OWORD *)a1 + 19) = v22;
        *(void *)a3 = v21;
        *(void *)(a3 + 8) = v20;
        *(_OWORD *)(a3 + 16) = v22;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        goto LABEL_30;
      }
      Swift::String v23 = String.lowercased()();
      a1[36] = v12;
      a1[37] = v13;
      *((Swift::String *)a1 + 19) = v23;
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = v13;
      *(Swift::String *)(a3 + 16) = v23;
    }
    else
    {
      outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v35);
      outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v36);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v36) == 1
        || (LocalePreferences.measurementSystem.getter((uint64_t)&v31), (uint64_t v15 = v32) == 0))
      {
        String.utf8CString.getter();
        int MeasurementSystem = ulocdata_getMeasurementSystem();
        swift_release();
        if (MeasurementSystem == 2)
        {
          if (one-time initialization token for uk != -1) {
            swift_once();
          }
          int v24 = &static Locale.MeasurementSystem.uk;
        }
        else if (MeasurementSystem == 1)
        {
          if (one-time initialization token for us != -1) {
            swift_once();
          }
          int v24 = &static Locale.MeasurementSystem.us;
        }
        else
        {
          if (one-time initialization token for metric != -1) {
            swift_once();
          }
          int v24 = &static Locale.MeasurementSystem.metric;
        }
        uint64_t v25 = v24[2];
        uint64_t v26 = v24[3];
        uint64_t v28 = *v24;
        uint64_t v27 = v24[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a1[36] = v28;
        a1[37] = v27;
        a1[38] = v25;
        a1[39] = v26;
        *(void *)a3 = v28;
        *(void *)(a3 + 8) = v27;
        *(void *)(a3 + 16) = v25;
        *(void *)(a3 + 24) = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
      uint64_t v16 = v33;
      uint64_t v17 = v34;
      uint64_t v18 = v31;
      a1[36] = v31;
      a1[37] = v15;
      a1[38] = v16;
      a1[39] = v17;
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v15;
      *(void *)(a3 + 16) = v16;
      *(void *)(a3 + 24) = v17;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_30:
    uint64_t v5 = v30;
    return outlined copy of Locale.LanguageCode?(v5, v7);
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v6;
  *(void *)(a3 + 24) = v8;
  return outlined copy of Locale.LanguageCode?(v5, v7);
}

uint64_t LocalePreferences.measurementSystem.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  int v4 = v1[136];
  if (v3 == 2)
  {
    if (v4 == 2 || (v4 & 1) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if ((v3 & 1) == 0)
    {
      if (one-time initialization token for us != -1) {
        swift_once();
      }
      uint64_t v5 = &static Locale.MeasurementSystem.us;
      goto LABEL_18;
    }
    if (v4 == 2)
    {
LABEL_10:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
    }
    if (v4)
    {
      if (one-time initialization token for uk != -1) {
        swift_once();
      }
      uint64_t v5 = &static Locale.MeasurementSystem.uk;
      goto LABEL_18;
    }
  }
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v5 = &static Locale.MeasurementSystem.metric;
LABEL_18:
  uint64_t v6 = v5[1];
  uint64_t v7 = v5[2];
  uint64_t v8 = v5[3];
  *(void *)a1 = *v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t DateComponents.weekOfYear.getter()
{
  return *(void *)(v0 + 256);
}

uint64_t __NSComparatorTranslator(void *a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void))a3)(*a1, *a2, *(void *)(a3 + 8));
}

double URLComponents.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt64(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (const char **)&selRef_initWithUnsignedLongLong_);
}

__n128 AttributedString.Runs.Run.range.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 48);
  long long v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void NSKVODeallocate(void *a1, const char *a2)
{
  v23[6] = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  BOOL v5 = _NSKVOUsesBaseClassObservationInfoImplementationForClass(Class);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  Method InstanceMethod = class_getInstanceMethod(*IndexedIvars, a2);
  Method v8 = InstanceMethod;
  if (v5)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __NSKVODeallocate_block_invoke;
    v23[3] = &unk_1E51F8B80;
    v23[4] = a1;
    v23[5] = InstanceMethod;
    _NSKVOPerformWithDeallocatingObservable(a1, (uint64_t)v23);
  }
  else
  {
    uint64_t v20 = (uint64_t)a1;
    id v21 = _NSKeyValueRetainedObservationInfoForObject(a1, 0);
    uint64_t v22 = 0;
    _NSKeyValueAddObservationInfoWatcher((uint64_t)&v20);
    int v9 = objc_msgSend(objc_getAssociatedObject(a1, &_NSKeyValueObservingObservationInfoOverriderMayThrowOnDealloc), "isEqual:", MEMORY[0x1E4F1CC38]);
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __NSKVODeallocate_block_invoke_2;
    uint64_t v19[3] = &unk_1E51F8B80;
    v19[4] = a1;
    v19[5] = v8;
    _NSKVOPerformWithDeallocatingObservable(a1, (uint64_t)v19);
    if (v21)
    {
      unsigned int program_sdk_version = dyld_get_program_sdk_version();
      if (v9) {
        int v9 = [v21 containsOnlyInternalObservationHelpers] ^ 1;
      }
      Boolean keyExistsAndHasValidFormat = 0;
      if (CFPreferencesGetAppBooleanValue(@"NSKVODeallocateCleansUpBeforeThrowing", (CFStringRef)*MEMORY[0x1E4F1D3D8], &keyExistsAndHasValidFormat))
      {
        BOOL v11 = keyExistsAndHasValidFormat == 0;
      }
      else
      {
        BOOL v11 = 1;
      }
      char v12 = v11;
      if (program_sdk_version < 0x80000) {
        char v13 = v12;
      }
      else {
        char v13 = 0;
      }
      if ((v13 & 1) == 0 && ((v9 ^ 1) & 1) == 0)
      {
        char v15 = v12;
        uint64_t v16 = [v21 description];
        if ((v15 & 1) == 0) {
          _NSKeyValueRemoveObservationInfoForObject(v20);
        }
        uint64_t v17 = +[NSString stringWithFormat:@"An instance %p of class %@ was deallocated while key value observers were still registered with it. Current observation info: %@", a1, *IndexedIvars, v16];
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v17 userInfo:0]);
      }
      if (program_sdk_version < 0x80000) {
        int v14 = 1;
      }
      else {
        int v14 = v9;
      }
      if (v14 == 1)
      {
        NSLog((NSString *)@"An instance %p of class %@ was deallocated while key value observers were still registered with it. Observation info was leaked, and may even become mistakenly attached to some other object. Set a breakpoint on NSKVODeallocateBreak to stop here in the debugger. Here's the current observation info:\n%@", a1, *IndexedIvars, v21);
        NSKVODeallocateBreak((uint64_t)a1);
      }
    }
    _NSKeyValueRemoveObservationInfoWatcher((uint64_t)&v20);
  }
}

void sub_18192DA88(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18192D9D8);
  }
  _Unwind_Resume(exception_object);
}

void _NSKVOPerformWithDeallocatingObservable(const void *a1, uint64_t a2)
{
  uint64_t v4 = _CFGetTSD();
  if (!v4)
  {
    BOOL v5 = malloc_default_zone();
    uint64_t v4 = (uint64_t)malloc_type_zone_calloc(v5, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  uint64_t v6 = *(__CFArray **)(v4 + 80);
  CFMutableCharacterSetRef Mutable = v6;
  if (!v6)
  {
    CFMutableCharacterSetRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 1, 0);
    *(void *)(v4 + 80) = Mutable;
  }
  CFArrayInsertValueAtIndex(Mutable, 0, a1);
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  CFArrayRemoveValueAtIndex(Mutable, 0);
  if (!v6)
  {
    if (CFArrayGetCount(Mutable)) {
      __assert_rtn("_NSKVOPerformWithDeallocatingObservable", "NSKeyValueObserving.m", 2832, "CFArrayGetCount(stack) == 0");
    }
    CFRelease(Mutable);
    *(void *)(v4 + 80) = 0;
  }
}

void sub_18192DC04(_Unwind_Exception *a1)
{
}

void __NSKVODeallocate_block_invoke()
{
}

void __NSKVODeallocate_block_invoke_2()
{
}

void _NSKeyValueRemoveObservationInfoWatcher(uint64_t a1)
{
  uint64_t v2 = _CFGetTSD();
  if (!v2)
  {
    int v3 = malloc_default_zone();
    uint64_t v2 = (uint64_t)malloc_type_zone_calloc(v3, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4 != a1) {
    NSLog((NSString *)@"_NSKeyValueRemoveObservationInfoWatcher() was called in a surprising way.");
  }
  if (v4) {
    *(void *)(v2 + 8) = *(void *)(v4 + 16);
  }
}

uint64_t _NSKeyValueAddObservationInfoWatcher(uint64_t a1)
{
  uint64_t result = _CFGetTSD();
  int v3 = (void *)result;
  if (!result)
  {
    uint64_t v4 = malloc_default_zone();
    int v3 = malloc_type_zone_calloc(v4, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    uint64_t result = _CFSetTSD();
  }
  *(void *)(a1 + 16) = v3[1];
  v3[1] = a1;
  return result;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), result))
      {
        uint64_t v8 = (int)v8;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_19;
    case 2uLL:
      uint64_t v10 = *(void *)(result + 16);
      uint64_t v9 = *(void *)(result + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      break;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_20;
          }
          uint64_t v12 = (int)v12;
          goto LABEL_11;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (v11) {
            goto LABEL_21;
          }
          goto LABEL_11;
        case 3uLL:
          BOOL v15 = v8 == 0;
          goto LABEL_17;
        default:
          uint64_t v12 = BYTE6(a4);
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              BOOL v15 = 1;
            }
            else
            {
              outlined copy of Data._Representation(a3, a4);
              BOOL v15 = specialized Data._Representation.withUnsafeBytes<A>(_:)(v7, a2, a3, a4);
            }
          }
          else
          {
            BOOL v15 = 0;
          }
LABEL_17:
          uint64_t result = v15;
          break;
      }
      break;
  }
  return result;
}

BOOL specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      BOOL v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      outlined consume of Data._Representation(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      BOOL v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      outlined consume of Data._Representation(a3, a4);
      return v5;
    case 3uLL:
      memset(v15, 0, 14);
      goto LABEL_8;
    default:
      v15[0] = a1;
      LOWORD(v15[1]) = a2;
      BYTE2(v15[1]) = BYTE2(a2);
      BYTE3(v15[1]) = BYTE3(a2);
      BYTE4(v15[1]) = BYTE4(a2);
      BYTE5(v15[1]) = BYTE5(a2);
LABEL_8:
      closure #1 in static Data.== infix(_:_:)(v15, a3, a4, &v14);
      outlined consume of Data._Representation(a3, a4);
      if (!v4) {
        return v14;
      }
      return v5;
  }
}

BOOL specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (!v6)
  {
    if (!__OFSUB__(a2, result))
    {
      uint64_t v10 = 0;
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a3 + 40);
  BOOL v8 = __OFSUB__(result, v7);
  uint64_t v9 = result - v7;
  if (v8)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (__OFSUB__(a2, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = (const void *)(v6 + v9);
LABEL_7:
  closure #1 in static Data.== infix(_:_:)(v10, a4, a5, &v12);
  if (!v5) {
    return v12;
  }
  return v11;
}

const void *closure #1 in static Data.== infix(_:_:)@<X0>(const void *result@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, BOOL *a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v5 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v5)
      {
LABEL_26:
        if (result) {
          goto LABEL_33;
        }
        goto LABEL_27;
      }
      uint64_t v9 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v4 = (int)a2 - v9;
      if (__OFSUB__((int)a2, v9)) {
LABEL_24:
      }
        __break(1u);
      if (!result)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        if (!__OFSUB__(v5, v4))
        {
          if (result)
          {
LABEL_34:
            __break(1u);
            return result;
          }
LABEL_30:
          __break(1u);
        }
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      BOOL v8 = (uint64_t *)(v5 + v4);
      if (*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a2 >> 32) - (int)a2) {
        size_t v7 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v7 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      }
LABEL_18:
      uint64_t result = (const void *)memcmp(result, v8, v7);
      BOOL v15 = result == 0;
LABEL_21:
      *a4 = v15;
      return result;
    case 2uLL:
      uint64_t v4 = *(void *)(a2 + 16);
      uint64_t v5 = *(void *)(a2 + 24);
      uint64_t v10 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v10) {
        goto LABEL_28;
      }
      uint64_t v11 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v12 = __OFSUB__(v4, v11);
      uint64_t v13 = v4 - v11;
      if (v12) {
        goto LABEL_23;
      }
      BOOL v12 = __OFSUB__(v5, v4);
      int64_t v14 = v5 - v4;
      if (v12) {
        goto LABEL_31;
      }
      if (!result) {
        goto LABEL_30;
      }
      BOOL v8 = (uint64_t *)(v10 + v13);
      if (*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v14) {
        size_t v7 = v14;
      }
      else {
        size_t v7 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      }
      goto LABEL_18;
    case 3uLL:
      if (!result) {
        goto LABEL_32;
      }
      BOOL v15 = 1;
      goto LABEL_21;
    default:
      uint64_t v16 = a2;
      __int16 v17 = a3;
      char v18 = BYTE2(a3);
      char v19 = BYTE3(a3);
      char v20 = BYTE4(a3);
      char v21 = BYTE5(a3);
      if (result)
      {
        size_t v7 = BYTE6(a3);
        BOOL v8 = &v16;
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_26;
  }
}

void protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance NSRunLoop(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

unint64_t protocol witness for ConnectablePublisher.connect() in conformance NSTimer.TimerPublisher@<X0>(void *a1@<X8>)
{
  return NSTimer.TimerPublisher.connect()(a1);
}

unint64_t NSTimer.TimerPublisher.connect()@<X0>(void *a1@<X8>)
{
  double v3 = *(double *)(v1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.connect();
  *(void *)(v4 + 24) = v1;
  v9[4] = partial apply for closure #1 in NSTimer.TimerPublisher.connect();
  v9[5] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  uint64_t v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  void v9[3] = &block_descriptor_20;
  uint64_t v5 = _Block_copy(v9);
  uint64_t v6 = self;
  swift_retain_n();
  id v7 = objc_msgSend(v6, sel_timerWithTimeInterval_repeats_block_, 1, v5, v3);
  _Block_release(v5);
  swift_release();
  objc_msgSend(*(id *)(v1 + 40), sel_addTimer_forMode_, v7, *(void *)(v1 + 48));
  a1[3] = &unk_1ECA50568;
  unint64_t result = lazy protocol witness table accessor for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()();
  a1[4] = result;
  *a1 = v7;
  a1[1] = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  unint64_t result = lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect();
  if (!lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect());
  }
  return result;
}

void NSRunLoop.schedule(after:tolerance:options:_:)(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8 = *a1;
  double v9 = *a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  id v11 = objc_allocWithZone(MEMORY[0x1E4F1CB00]);
  id v12 = objc_allocWithZone(MEMORY[0x1E4F1C9C8]);
  swift_retain();
  id v13 = objc_msgSend(v12, sel_initWithTimeIntervalSinceReferenceDate_, v8);
  v16[4] = partial apply for closure #1 in NSRunLoop.schedule(after:tolerance:options:_:);
  v16[5] = v10;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1107296256;
  _OWORD v16[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v16[3] = &block_descriptor_6;
  int64_t v14 = _Block_copy(v16);
  id v15 = objc_msgSend(v11, sel_initWithFireDate_interval_repeats_block_, v13, 0, v14, 0.0);
  _Block_release(v14);

  swift_release();
  objc_msgSend(v15, sel_setTolerance_, v9);
  objc_msgSend(v5, sel_addTimer_forMode_, v15, *MEMORY[0x1E4F1C3A0]);
}

void protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance NSRunLoop(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
}

void NSRunLoop.schedule(after:interval:tolerance:options:_:)(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  double v10 = *a1;
  double v11 = *a2;
  double v12 = *a3;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F1CB00]);
  id v15 = objc_allocWithZone(MEMORY[0x1E4F1C9C8]);
  swift_retain();
  id v16 = objc_msgSend(v15, sel_initWithTimeIntervalSinceReferenceDate_, v10);
  v23[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v23[5] = v13;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1107296256;
  v23[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v23[3] = &block_descriptor_12;
  __int16 v17 = _Block_copy(v23);
  id v18 = objc_msgSend(v14, sel_initWithFireDate_interval_repeats_block_, v16, 1, v17, v11);
  _Block_release(v17);

  swift_release();
  objc_msgSend(v18, sel_setTolerance_, v12);
  objc_msgSend(v6, sel_addTimer_forMode_, v18, *MEMORY[0x1E4F1C3A0]);
  *(void *)(swift_allocObject() + 16) = v18;
  uint64_t v19 = type metadata accessor for AnyCancellable();
  swift_allocObject();
  id v20 = v18;
  uint64_t v21 = AnyCancellable.init(_:)();
  uint64_t v22 = MEMORY[0x1E4F1AB08];
  a6[3] = v19;
  a6[4] = v22;

  *a6 = v21;
}

ValueMetadata *type metadata accessor for _BPlistDecodingFormat()
{
  return &type metadata for _BPlistDecodingFormat;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.State()
{
  return &type metadata for _NSSwiftProcessInfo.State;
}

ValueMetadata *type metadata accessor for _ProcessInfo.State()
{
  return &type metadata for _ProcessInfo.State;
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t static CharacterSet.urlQueryAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E4F1CB80], a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.NotEqual<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.NotEqual<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t PredicateExpressions.NotEqual<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v36 = a3;
  uint64_t v32 = a5;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  double v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  char v35 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v13;
  v37[0] = v13;
  v37[1] = v14;
  double v37[2] = v15;
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  uint64_t v18 = type metadata accessor for PredicateExpressions.NotEqual();
  uint64_t v30 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  id v20 = (char *)&v26 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v28 = v20;
  unint64_t v29 = a1;
  uint64_t v27 = v18;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  uint64_t v21 = v35;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v22 = v28;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v28, v21, v40);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v27;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v22[*(int *)(v27 + 60)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  uint64_t v24 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v22, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v22, v23);
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.SequenceContains();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 68), a2, a4);
}

{
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.CollectionContainsCollection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 76), a2, a4);
}

{
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.StringContainsRegex();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 68), a2, a4);
}

uint64_t type metadata accessor for PredicateExpressions.SequenceContains()
{
  return swift_getGenericMetadata();
}

uint64_t static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  char v11 = *a3;
  uint64_t v12 = type metadata accessor for PredicateExpressions.Comparison();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(&a6[*(int *)(v12 + 60)], a1, a4);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(&a6[*(int *)(v12 + 64)], a2, a5);
  *a6 = v11;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.Comparison()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Equal<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Equal<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t PredicateExpressions.Equal<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v36 = a3;
  uint64_t v32 = a5;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  double v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  char v35 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v13;
  v37[0] = v13;
  v37[1] = v14;
  double v37[2] = v15;
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  uint64_t v18 = type metadata accessor for PredicateExpressions.Equal();
  uint64_t v30 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  id v20 = (char *)&v26 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v28 = v20;
  unint64_t v29 = a1;
  uint64_t v27 = v18;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  uint64_t v21 = v35;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v22 = v28;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v28, v21, v40);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v27;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v22[*(int *)(v27 + 60)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  uint64_t v24 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v22, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v22, v23);
}

uint64_t static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v27 = a6;
  uint64_t v30 = a3;
  uint64_t v31 = a2;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void (**)(char *, double))(v17 + 16);
  v22(v21, v19);
  ((void (*)(uint64_t, char *, uint64_t))v22)(a9, v21, a4);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  unint64_t add_explicit = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  v32[0] = a4;
  v32[1] = v27;
  v32[2] = a5;
  v32[3] = v28;
  v32[4] = v29;
  v32[5] = a10;
  uint64_t v24 = type metadata accessor for PredicateExpressions.OptionalFlatMap();
  *(void *)(a9 + *(int *)(v24 + 72)) = add_explicit;
  v32[0] = add_explicit;
  v31(v32);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a9 + *(int *)(v24 + 68), v15, a5);
}

{
  return static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  return static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t destroy for PredicateExpressions.Comparison(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v5);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  id v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (v5 + *(void *)(v4 + 56) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t destroy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t destroy for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t destroy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t destroy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t type metadata accessor for PredicateExpressions.OptionalFlatMap()
{
  return swift_getGenericMetadata();
}

unsigned char *initializeWithCopy for PredicateExpressions.Comparison(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t initializeWithCopy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  *(void *)((*(void *)(v9 + 48) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 48) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t static PredicateExpressions.build_NotEqual<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.NotEqual();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t type metadata accessor for PredicateExpressions.NotEqual()
{
  return swift_getGenericMetadata();
}

uint64_t static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.Conjunction();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.Equal();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t initializeWithCopy for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithCopy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t type metadata accessor for PredicateExpressions.Equal()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PredicateExpressions.Conjunction()
{
  return swift_getGenericMetadata();
}

uint64_t static AttributedString.== infix(_:_:)(_OWORD **a1, _OWORD **a2)
{
  return specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(*a1, *a2);
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return &type metadata for NSRunLoop.SchedulerOptions;
}

id StringProtocol.removingPercentEncoding.getter()
{
  StringProtocol._ephemeralString.getter();
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_stringByRemovingPercentEncoding);
  swift_unknownObjectRelease();
  if (!v1) {
    return 0;
  }
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id specialized static URL.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  id result = (id)_foundation_swift_url_feature_enabled();
  if (!result) {
    return objc_msgSend(v2, sel_isEqual_, v5);
  }
  if (!v3)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (!v6)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  BOOL v9 = *(void *)(v3 + 16) == *(void *)(v6 + 16) && *(void *)(v3 + 24) == *(void *)(v6 + 24);
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    if (v4)
    {
      uint64_t v12 = *(void *)(v4 + 16);
      uint64_t v11 = *(void *)(v4 + 24);
      swift_bridgeObjectRetain();
      if (!v7)
      {
        if (!v11) {
          return objc_msgSend(v2, sel_isEqual_, v5);
        }
LABEL_22:
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      if (!v7) {
        return objc_msgSend(v2, sel_isEqual_, v5);
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v14 = *(void *)(v7 + 16);
    uint64_t v13 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain();
    if (v11)
    {
      if (v13)
      {
        if (v12 == v14 && v11 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id result = 0;
          if ((v15 & 1) == 0) {
            return result;
          }
        }
        return objc_msgSend(v2, sel_isEqual_, v5);
      }
      goto LABEL_22;
    }
    if (v13) {
      goto LABEL_22;
    }
    return objc_msgSend(v2, sel_isEqual_, v5);
  }
  return result;
}

void *Locale.calendar.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 192))(ObjectType, v2);
  v5[0] = v1;
  v5[1] = v2;
  swift_unknownObjectRetain();
  return Calendar.locale.setter(v5);
}

void *Calendar.locale.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  id result = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t))(v4 + 32))(&v14, ObjectType, v4);
  if (!v2)
  {
    if (!(void)v14) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  if (!(void)v14)
  {
    swift_unknownObjectRetain();
LABEL_10:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  long long v11 = v14;
  swift_unknownObjectRetain_n();
  char v7 = specialized static Locale.== infix(_:_:)((uint64_t)&v12, (uint64_t)&v11);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_11:
    *(void *)&long long v14 = v2;
    *((void *)&v14 + 1) = v3;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v8 = (*(uint64_t (**)(long long *, uint64_t *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v4 + 112))(&v14, &v12, 0, 1, 0, 1, ObjectType, v4);
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    id result = (void *)swift_unknownObjectRelease();
    *uint64_t v1 = v8;
    v1[1] = v10;
    return result;
  }

  return (void *)swift_unknownObjectRelease();
}

void sub_181932C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void *Calendar.locale.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  id result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 32))(v10, ObjectType, v3);
  uint64_t v6 = v10[0];
  if (v10[0])
  {
    uint64_t v7 = v10[1];
  }
  else
  {
    if (one-time initialization token for cache != -1) {
      id result = (void *)swift_once();
    }
    uint64_t v8 = (os_unfair_lock_s *)static LocaleCache.cache;
    MEMORY[0x1F4188790](result);
    swift_retain_n();
    os_unfair_lock_lock(v8 + 31);
    partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v8[4], &v9);
    os_unfair_lock_unlock(v8 + 31);
    id result = (void *)swift_release_n();
    uint64_t v7 = *((void *)&v9 + 1);
    uint64_t v6 = v9;
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for _CalendarProtocol.locale.getter in conformance _CalendarGregorian@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 88);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Locale()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 488))(ObjectType, v1);
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (NSLocale)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 488))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleICU()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  partial apply for closure #1 in LocaleCache.fixedNSLocale(_:)(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t partial apply for closure #1 in LocaleCache.fixedNSLocale(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in LocaleCache.fixedNSLocale(_:)(a1, v2, a2);
}

uint64_t forEachUnit(uint64_t result, uint64_t a2)
{
  __int16 v3 = result;
  if ((result & 4) != 0)
  {
    id result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 4);
    if ((v3 & 8) == 0)
    {
LABEL_3:
      if ((v3 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((result & 8) == 0)
  {
    goto LABEL_3;
  }
  id result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 8);
  if ((v3 & 0x1000) == 0)
  {
LABEL_4:
    if ((v3 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  id result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 4096);
  if ((v3 & 0x10) == 0)
  {
LABEL_5:
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  id result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 16);
  if ((v3 & 0x20) == 0)
  {
LABEL_6:
    if ((v3 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    id result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 64);
    if ((v3 & 0x80) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  id result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 32);
  if ((v3 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v3 & 0x80) == 0) {
    return result;
  }
LABEL_15:
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);

  return v4(a2, 128);
}

uint64_t icuUnitFromNSUnit(uint64_t a1)
{
  if (a1 <= 31)
  {
    switch(a1)
    {
      case 4:
        return 0;
      case 8:
        return 1;
      case 16:
        return 2;
      default:
        goto LABEL_17;
    }
  }
  else if (a1 > 127)
  {
    if (a1 == 128)
    {
      return 6;
    }
    else
    {
      if (a1 != 4096) {
        goto LABEL_17;
      }
      return 3;
    }
  }
  else
  {
    if (a1 != 32)
    {
      if (a1 == 64) {
        return 5;
      }
LABEL_17:
      abort();
    }
    return 4;
  }
}

uint64_t protocol witness for _CalendarProtocol.locale.getter in conformance _CalendarAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v4[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleICU@<X0>(uint64_t *a1@<X8>)
{
  __int16 v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.calendar.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);

  return swift_release();
}

void partial apply for closure #1 in _LocaleICU.calendar.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in _LocaleICU.calendar.getter(a1, v2, a2);
}

void closure #1 in _LocaleICU.calendar.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = _LocaleICU._lockedCalendarIdentifier(_:)(a1, v37);
  uint64_t v7 = v37[0];
  if (one-time initialization token for cache != -1) {
    uint64_t v6 = swift_once();
  }
  uint64_t v8 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](v6);
  swift_retain_n();
  os_unfair_lock_lock(v8 + 15);
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v8[4], &v40);
  if (!v3)
  {
    os_unfair_lock_unlock(v8 + 15);
    swift_release_n();
    uint64_t v10 = *((void *)&v40 + 1);
    uint64_t v9 = v40;
    uint64_t ObjectType = swift_getObjectType();
    outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v36);
    outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)v37);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v37) == 1)
    {
LABEL_23:
      *a3 = v9;
      a3[1] = v10;
      return;
    }
    uint64_t v12 = v38;
    if (v38 && *(void *)(v38 + 16) && (uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v14 & 1) != 0))
    {
      int v15 = 0;
      uint64_t v41 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
      uint64_t v16 = v39;
      if (!v39) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v41 = 0;
      int v15 = 1;
      uint64_t v16 = v39;
      if (!v39) {
        goto LABEL_18;
      }
    }
    if (*(void *)(v16 + 16))
    {
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if (v18)
      {
        uint64_t v19 = *(void *)(v16 + 56);
        char v20 = 0;
        uint64_t v21 = *(void *)(v19 + 8 * v17);
        if (v15) {
          goto LABEL_19;
        }
        goto LABEL_14;
      }
    }
LABEL_18:
    uint64_t v21 = 0;
    char v20 = 1;
    if (v15)
    {
LABEL_19:
      outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)v35);
      outlined retain of LocalePreferences(v35);
      if (v20)
      {
LABEL_22:
        outlined retain of LocalePreferences?((uint64_t)v36, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_23;
      }
LABEL_20:
      uint64_t v27 = swift_getObjectType();
      if (v21 != (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 72))(v27, v10))
      {
        v35[0] = 0;
        v35[1] = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v28 = (*(uint64_t (**)(void *, uint64_t *, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v10 + 112))(v35, &v33, 0, 1, v21, 0, v27, v10);
        uint64_t v10 = v29;
        swift_unknownObjectRelease();
        uint64_t v9 = v28;
      }
      goto LABEL_22;
    }
LABEL_14:
    char v30 = v20;
    uint64_t v31 = v21;
    uint64_t v22 = ObjectType;
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
    outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)v35);
    outlined retain of LocalePreferences(v35);
    uint64_t v24 = v23(v22, v10);
    if (v41 != v24)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      v32[0] = 0;
      v32[1] = 0;
      uint64_t v25 = (*(uint64_t (**)(uint64_t *, void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v10 + 112))(&v33, v32, v41, 0, 0, 1, v22, v10);
      uint64_t v10 = v26;
      swift_unknownObjectRelease();
      uint64_t v9 = v25;
    }
    uint64_t v21 = v31;
    if (v30) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  os_unfair_lock_unlock(v8 + 15);
  __break(1u);
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrentNSLocale()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id @objc static NSLocale._autoupdatingCurrent.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrentNSLocale()(v0, &v4);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  id v2 = v4;

  return v2;
}

id closure #1 in LocaleCache.autoupdatingCurrentNSLocale()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3)
  {
    id v4 = *(id *)(a1 + 56);
  }
  else
  {
    if (*(void *)(a1 + 88))
    {
      uint64_t v6 = *(void *)(a1 + 88);
    }
    else
    {
      type metadata accessor for _LocaleAutoupdating();
      uint64_t v6 = swift_allocObject();
      *(void *)(a1 + 88) = v6;
      swift_retain();
    }
    uint64_t v7 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
    uint64_t v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
    uint64_t v9 = objc_allocWithZone(v8);
    uint64_t v10 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
    long long v11 = (uint64_t *)&v9[OBJC_IVAR____NSSwiftLocale_locale];
    *long long v11 = v6;
    v11[1] = v7;
    v9[v10] = 2;
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    v15.receiver = v9;
    v15.super_class = v8;
    swift_retain();
    id v13 = objc_msgSendSuper2(&v15, sel_initWithLocaleIdentifier_, v12);
    swift_unknownObjectRelease();
    *(void *)(a1 + 56) = v13;
    id v4 = v13;
    uint64_t v3 = 0;
  }
  *a2 = v4;
  return v3;
}

uint64_t icuStyleFromNSStyle(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5) {
    abort();
  }
  return dword_182323628[a1 - 1];
}

unint64_t instantiation function for generic protocol witness table for _LocaleAutoupdating(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating;
  if (!lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating)
  {
    type metadata accessor for _LocaleAutoupdating();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating;
  if (!lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating)
  {
    type metadata accessor for _LocaleAutoupdating();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating);
  }
  return result;
}

uint64_t type metadata accessor for _LocaleAutoupdating()
{
  return self;
}

uint64_t JSONDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void sub_181935280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  NSDataBase64EncodingOptions v5 = options;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (v1 >> 32 >= (int)v1)
      {
        if (v1 >> 32 == (int)v1)
        {
          id v8 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
          outlined copy of Data._Representation(v4, v3);
          id v9 = objc_msgSend(v8, sel_init);
          id v10 = objc_msgSend(v9, sel_base64EncodedStringWithOptions_, v5);
LABEL_18:
          id v35 = v10;
          id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          uint64_t v30 = v36;

          outlined consume of Data._Representation(v4, v3);
          goto LABEL_19;
        }
        uint64_t v31 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v31)
        {
          uint64_t v32 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          if (!__OFSUB__((int)v1, v32))
          {
            uint64_t v33 = v31 + (int)v1 - v32;
            id v34 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            outlined copy of Data._Representation(v4, v3);
            id v9 = objc_msgSend(v34, sel_initWithBytesNoCopy_length_freeWhenDone_, v33, (v4 >> 32) - (int)v4, 0);
            id v10 = objc_msgSend(v9, sel_base64EncodedStringWithOptions_, v5);
            goto LABEL_18;
          }
LABEL_23:
          __break(1u);
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      __break(1u);
      goto LABEL_21;
    case 2uLL:
      uint64_t v11 = *(void *)(v1 + 16);
      uint64_t v12 = *(void *)(v1 + 24);
      if (v11 != v12)
      {
        uint64_t v20 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v20)
        {
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v21 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v22 = __OFSUB__(v11, v21);
        uint64_t v23 = v11 - v21;
        if (v22)
        {
LABEL_21:
          __break(1u);
        }
        else
        {
          uint64_t v24 = v12 - v11;
          if (!__OFSUB__(v12, v11))
          {
            uint64_t v25 = v20 + v23;
            id v26 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            swift_retain();
            swift_retain();
            id v14 = objc_msgSend(v26, sel_initWithBytesNoCopy_length_freeWhenDone_, v25, v24, 0);
            id v15 = objc_msgSend(v14, sel_base64EncodedStringWithOptions_, v5);
            goto LABEL_14;
          }
        }
        __break(1u);
        goto LABEL_23;
      }
      id v13 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
      swift_retain();
      swift_retain();
      id v14 = objc_msgSend(v13, sel_init);
      id v15 = objc_msgSend(v14, sel_base64EncodedStringWithOptions_, v5);
LABEL_14:
      id v27 = v15;
      id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v30 = v29;
      swift_release();
      swift_release();

LABEL_19:
      options = (NSDataBase64EncodingOptions)v28;
      uint64_t v1 = v30;
LABEL_26:
      result._unint64_t object = (void *)v1;
      result._uint64_t countAndFlagsBits = options;
      return result;
    case 3uLL:
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      id v7 = objc_msgSend(v6, sel_base64EncodedStringWithOptions_, v5);
      goto LABEL_9;
    default:
      uint64_t v38 = v1;
      __int16 v39 = v2;
      char v40 = BYTE2(v2);
      char v41 = BYTE3(v2);
      char v42 = BYTE4(v2);
      char v43 = BYTE5(v2);
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v38, BYTE6(v2), 0);
      id v7 = objc_msgSend(v6, sel_base64EncodedStringWithOptions_, v5);
LABEL_9:
      id v16 = v7;
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = v18;

      options = (NSDataBase64EncodingOptions)v17;
      uint64_t v1 = v19;
      goto LABEL_26;
  }
}

void __JSONEncoder.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v131 = a1;
  uint64_t v127 = a4;
  unint64_t v129 = a3;
  unint64_t v130 = a2;
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  uint64_t v128 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v126 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t *)((char *)&v120 - v11);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  id v16 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (uint64_t *)((char *)&v120 - v18);
  MEMORY[0x1F4188790](v20);
  BOOL v22 = (char *)&v120 - v21;
  v24.n128_f64[0] = MEMORY[0x1F4188790](v23);
  id v26 = (char *)&v120 - v25;
  id v133 = v6;
  unint64_t v27 = v6[7];
  if (!v27)
  {
    uint64_t v125 = a6;
    unint64_t v32 = v133[2];
    uint64_t v126 = (char *)(v133 + 2);
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      id v124 = (void (*)(uint64_t, unint64_t, uint64_t *))_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v124 = *(void (**)(uint64_t, unint64_t, uint64_t *))((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v33 = v128;
    id v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
    v34(v26, v127, v13, v24);
    ((void (*)(char *, char *, uint64_t))v34)(v22, v26, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v22, 1, a5) == 1)
    {
      id v35 = *(void (**)(char *, uint64_t))(v14 + 8);
      v35(v26, v13);
      v35(v22, v13);
      uint64_t v36 = v133;
      uint64_t v38 = v133[18];
      uint64_t v37 = v133[19];
      unint64_t v39 = v129;
      unint64_t v40 = v129 >> 62;
      v133[18] = v129;
      if (v39 >> 62)
      {
        uint64_t v41 = v132;
        uint64_t v19 = (uint64_t *)v126;
        if (v40 != 1)
        {
          uint64_t v42 = 0;
          goto LABEL_38;
        }
        uint64_t v42 = *(void *)((v39 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        swift_retain();
      }
      else
      {
        uint64_t v42 = *(void *)(v39 + 64);
        swift_retain();
        uint64_t v41 = v132;
        uint64_t v19 = (uint64_t *)v126;
      }
LABEL_37:
      swift_retain();
LABEL_38:
      v36[19] = v42;
      uint64_t v83 = *(uint64_t (**)(uint64_t))(*v36 + 208);
      uint64_t v84 = swift_retain();
      if (v83(v84))
      {
        type metadata accessor for JSONReference();
        uint64_t v85 = swift_allocObject();
        *(void *)(v85 + 16) = MEMORY[0x1E4FBC860];
        *(void *)(v85 + 24) = 0;
        *(unsigned char *)(v85 + 32) = 3;
        uint64_t v86 = swift_retain();
        MEMORY[0x185302590](v86);
        if (*(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_50;
      }
      uint64_t v87 = *v19;
      if ((unint64_t)*v19 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
        if (v88)
        {
LABEL_44:
          unint64_t v89 = v88 - 1;
          if (!__OFSUB__(v88, 1))
          {
            if ((v87 & 0xC000000000000001) == 0)
            {
              if ((v89 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v89 < *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                uint64_t v85 = *(void *)(v87 + 8 * v89 + 32);
                swift_retain();
                goto LABEL_49;
              }
              __break(1u);
              goto LABEL_105;
            }
LABEL_102:
            uint64_t v85 = MEMORY[0x185303120](v89, v87);
LABEL_49:
            swift_bridgeObjectRelease();
            if (*(unsigned char *)(v85 + 32) != 3)
            {
              swift_release();
              __break(1u);
              goto LABEL_119;
            }
LABEL_50:
            uint64_t v90 = v36[18];
            uint64_t v137 = &unk_1ECA41F28;
            unint64_t v91 = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
            uint64_t v134 = (uint64_t)v36;
            uint64_t v135 = v85;
            uint64_t v138 = v91;
            uint64_t v136 = v90;
            swift_retain();
            swift_retain();
            specialized Data._Representation.withUnsafeBytes<A>(_:)(v131, v130, (uint64_t)&v134);
            if (v41)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
              swift_release();
              v36[18] = v38;
              swift_retain();
              swift_release();
              v36[19] = v37;
              swift_release();
              swift_release();
              unint64_t v92 = v36[2];
              if (v92 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v93 = *(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              if ((uint64_t)v124 >= v93) {
                goto LABEL_57;
              }
              if (!((unint64_t)*v19 >> 62))
              {
                if (!*(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_111;
                }
LABEL_56:
                specialized RangeReplaceableCollection<>.popLast()();
                swift_release();
LABEL_57:
                swift_willThrow();
                return;
              }
LABEL_110:
              swift_bridgeObjectRetain();
              uint64_t v118 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v118)
              {
LABEL_111:
                __break(1u);
LABEL_112:
                __break(1u);
                goto LABEL_113;
              }
              goto LABEL_56;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
            swift_release();
            v36[18] = v38;
            swift_retain();
            swift_release();
            v36[19] = v37;
            swift_release();
            swift_release();
            unint64_t v94 = v36[2];
            if (v94 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v116 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v116) {
                goto LABEL_60;
              }
            }
            else if (*(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_60:
              specialized RangeReplaceableCollection<>.popLast()();
              return;
            }
            __break(1u);
            goto LABEL_108;
          }
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
      }
      else
      {
        uint64_t v88 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v88) {
          goto LABEL_44;
        }
      }
      unint64_t v89 = swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_101;
    }
    uint64_t v57 = *(void (**)(uint64_t *, char *, uint64_t))(v33 + 32);
    v57(v12, v22, a5);
    char v58 = (uint64_t *)swift_allocObject();
    uint64_t v59 = v125;
    v58[5] = a5;
    v58[6] = v59;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58 + 2);
    v57(boxed_opaque_existential_1, (char *)v12, a5);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
    unint64_t v61 = v129;
    v58[7] = v129;
    unint64_t v62 = v61 >> 62;
    if (v61 >> 62)
    {
      uint64_t v41 = v132;
      uint64_t v36 = v133;
      uint64_t v19 = (uint64_t *)v126;
      if (v62 != 1)
      {
        uint64_t v42 = 1;
        if (!__OFSUB__(v62, 1)) {
          goto LABEL_36;
        }
        goto LABEL_63;
      }
      uint64_t v63 = (uint64_t *)((v61 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v63 = (uint64_t *)(v61 + 64);
      uint64_t v41 = v132;
      uint64_t v36 = v133;
      uint64_t v19 = (uint64_t *)v126;
    }
    uint64_t v81 = *v63;
    swift_retain();
    BOOL v82 = __OFADD__(v81, 1);
    uint64_t v42 = v81 + 1;
    if (!v82)
    {
LABEL_36:
      v58[8] = v42;
      uint64_t v38 = v36[18];
      uint64_t v37 = v36[19];
      v36[18] = v58;
      goto LABEL_37;
    }
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v27 == 1)
  {
    unint64_t v28 = v130;
    uint64_t v29 = v131;
    switch(v130 >> 62)
    {
      case 1uLL:
        if (v131 >> 32 < (int)v131) {
          goto LABEL_112;
        }
        if (v131 >> 32 == (int)v131)
        {
          id v69 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
          outlined copy of Data._Representation(v29, v28);
          id v70 = objc_msgSend(v69, sel_init);
          id v71 = objc_msgSend(v70, sel_base64EncodedStringWithOptions_, 0);
LABEL_93:
          id v113 = v71;
          id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
          uint64_t v80 = v114;

          outlined consume of Data._Representation(v29, v28);
LABEL_94:
          type metadata accessor for JSONReference();
          uint64_t v115 = swift_allocObject();
          *(void *)(v115 + 16) = v78;
          *(void *)(v115 + 24) = v80;
          *(unsigned char *)(v115 + 32) = 0;
          return;
        }
        uint64_t v109 = *(void *)((v130 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v109) {
          goto LABEL_120;
        }
        uint64_t v110 = *(void *)((v130 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)v131, v110))
        {
          uint64_t v111 = v109 + (int)v131 - v110;
          id v112 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
          outlined copy of Data._Representation(v29, v28);
          id v70 = objc_msgSend(v112, sel_initWithBytesNoCopy_length_freeWhenDone_, v111, (v29 >> 32) - (int)v29, 0);
          id v71 = objc_msgSend(v70, sel_base64EncodedStringWithOptions_, 0);
          goto LABEL_93;
        }
        break;
      case 2uLL:
        uint64_t v19 = (uint64_t *)(v130 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v72 = *(void *)(v131 + 16);
        uint64_t v73 = *(void *)(v131 + 24);
        if (v72 != v73) {
          goto LABEL_85;
        }
        id v74 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        id v75 = objc_msgSend(v74, sel_init);
        id v76 = objc_msgSend(v75, sel_base64EncodedStringWithOptions_, 0);
        goto LABEL_89;
      case 3uLL:
        id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
        id v31 = objc_msgSend(v30, sel_base64EncodedStringWithOptions_, 0);
        goto LABEL_29;
      default:
        uint64_t v134 = v131;
        LODWORD(v135) = v130;
        WORD2(v135) = WORD2(v130);
        id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v134, BYTE6(v130), 0);
        id v31 = objc_msgSend(v30, sel_base64EncodedStringWithOptions_, 0);
LABEL_29:
        id v77 = v31;
        id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        uint64_t v80 = v79;

        goto LABEL_94;
    }
LABEL_117:
    __break(1u);
  }
  uint64_t v125 = a6;
  char v43 = v133;
  uint64_t v44 = v133[8];
  unint64_t v45 = v133[2];
  uint64_t v121 = v133 + 2;
  uint64_t v123 = v44;
  if (v45 >> 62)
  {
    outlined copy of JSONEncoder.KeyEncodingStrategy(v27);
    swift_bridgeObjectRetain();
    uint64_t v122 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v122 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  id v124 = (void (*)(uint64_t, unint64_t, uint64_t *))v27;
  uint64_t v46 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16);
  v46(v19, v127, v13);
  v46((uint64_t *)v16, (uint64_t)v19, v13);
  uint64_t v47 = v128;
  int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48))(v16, 1, a5);
  unint64_t v49 = v129;
  unint64_t v50 = v129 >> 62;
  if (v48 == 1)
  {
    int64_t v51 = *(void (**)(uint64_t *, uint64_t))(v14 + 8);
    v51(v19, v13);
    v51((uint64_t *)v16, v13);
    uint64_t v52 = v43[18];
    uint64_t v53 = v43[19];
    v43[18] = v49;
    if (v50)
    {
      uint64_t v54 = v131;
      uint64_t v55 = v132;
      if (v50 != 1)
      {
        uint64_t v56 = 0;
        goto LABEL_68;
      }
      uint64_t v56 = *(void *)((v49 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      swift_retain();
    }
    else
    {
      uint64_t v56 = *(void *)(v49 + 64);
      swift_retain();
      uint64_t v54 = v131;
      uint64_t v55 = v132;
    }
LABEL_67:
    swift_retain();
LABEL_68:
    v43[19] = v56;
    uint64_t v137 = (void *)type metadata accessor for __JSONEncoder();
    uint64_t v138 = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
    uint64_t v134 = (uint64_t)v43;
    swift_retain();
    v124(v54, v130, &v134);
    if (v55)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
      v43[18] = v52;
      swift_retain();
      swift_release();
      v43[19] = v53;
      swift_release();
      swift_release();
      unint64_t v96 = v43[2];
      if (v96 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v97 = *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v122 >= v97) {
        goto LABEL_75;
      }
      if (!(*v121 >> 62))
      {
        if (*(void *)((*v121 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_74:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
LABEL_75:
          swift_willThrow();
          outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v124);
          return;
        }
        goto LABEL_109;
      }
LABEL_108:
      swift_bridgeObjectRetain();
      uint64_t v117 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v117) {
        goto LABEL_74;
      }
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
    v43[18] = v52;
    swift_retain();
    swift_release();
    v43[19] = v53;
    swift_release();
    swift_release();
    unint64_t v98 = v43[2];
    if (!(v98 >> 62))
    {
      uint64_t v99 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_78;
    }
LABEL_105:
    swift_bridgeObjectRetain();
    uint64_t v99 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_78:
    if (v122 >= v99)
    {
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v124);
      type metadata accessor for JSONReference();
      uint64_t v100 = swift_allocObject();
      *(void *)(v100 + 16) = MEMORY[0x1E4FBC868];
      *(void *)(v100 + 24) = 0;
      *(unsigned char *)(v100 + 32) = 4;
      return;
    }
    if (!(*v121 >> 62))
    {
      if (!*(void *)((*v121 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
LABEL_81:
      specialized RangeReplaceableCollection<>.popLast()();
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v124);
      return;
    }
LABEL_113:
    swift_bridgeObjectRetain();
    uint64_t v119 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v119) {
      goto LABEL_114;
    }
    goto LABEL_81;
  }
  uint64_t v128 = *(void *)(v47 + 32);
  unint64_t v64 = v126;
  ((void (*)(char *, char *, uint64_t))v128)(v126, v16, a5);
  uint64_t v65 = v49;
  uint64_t v12 = (uint64_t *)swift_allocObject();
  uint64_t v66 = v125;
  v12[5] = a5;
  v12[6] = v66;
  id v67 = __swift_allocate_boxed_opaque_existential_1(v12 + 2);
  ((void (*)(uint64_t *, char *, uint64_t))v128)(v67, v64, a5);
  (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v19, v13);
  void v12[7] = v65;
  if (v50)
  {
    uint64_t v54 = v131;
    uint64_t v55 = v132;
    if (v50 != 1)
    {
      char v43 = v133;
      uint64_t v56 = 1;
      goto LABEL_66;
    }
    uint64_t v68 = (uint64_t *)((v129 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v68 = (uint64_t *)(v129 + 64);
  uint64_t v54 = v131;
  uint64_t v55 = v132;
LABEL_65:
  char v43 = v133;
  uint64_t v95 = *v68;
  swift_retain();
  BOOL v82 = __OFADD__(v95, 1);
  uint64_t v56 = v95 + 1;
  if (!v82)
  {
LABEL_66:
    v12[8] = v56;
    uint64_t v52 = v43[18];
    uint64_t v53 = v43[19];
    v43[18] = v12;
    goto LABEL_67;
  }
  __break(1u);
LABEL_85:
  uint64_t v101 = v19[2];
  if (v101)
  {
    uint64_t v102 = v19[5];
    BOOL v82 = __OFSUB__(v72, v102);
    uint64_t v103 = v72 - v102;
    if (!v82)
    {
      uint64_t v104 = v73 - v72;
      if (!__OFSUB__(v73, v72))
      {
        uint64_t v105 = v101 + v103;
        id v106 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        id v75 = objc_msgSend(v106, sel_initWithBytesNoCopy_length_freeWhenDone_, v105, v104, 0);
        id v76 = objc_msgSend(v75, sel_base64EncodedStringWithOptions_, 0);
LABEL_89:
        id v107 = v76;
        id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
        uint64_t v80 = v108;

        swift_release();
        swift_release();
        goto LABEL_94;
      }
      goto LABEL_116;
    }
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
}

void sub_181936CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSDataCreateDispatchDataFromData(void *a1, char a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x3052000000;
  uint64_t v9 = __Block_byref_object_copy__1;
  uint64_t v10 = __Block_byref_object_dispose__1;
  uint64_t v11 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  uint64_t v4[2] = ___NSDataCreateDispatchDataFromData_block_invoke;
  v4[3] = &unk_1E51F71F8;
  char v5 = a2;
  v4[4] = a1;
  void v4[5] = &v6;
  [a1 enumerateByteRangesUsingBlock:v4];
  uint64_t v2 = v7[5];
  if (!v2)
  {
    uint64_t v2 = MEMORY[0x1E4F14410];
    v7[5] = MEMORY[0x1E4F14410];
  }
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_181936FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18193743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Block_object_dispose((const void *)(v26 - 104), 8);
  _Unwind_Resume(a1);
}

void NSObject.KVOSubscription.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 176));
  os_unfair_lock_lock(v2);
  unint64_t v3 = (void *)v0[2];
  if (v3)
  {
    uint64_t v13 = v3;
    os_unfair_lock_unlock(v2);
    uint64_t v4 = (void *)v0[2];
    v0[2] = 0;

    char v5 = (char *)v0 + *(void *)(*v0 + 144);
    uint64_t v6 = *(void *)(v1 + 96);
    uint64_t v7 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    uint64_t v8 = (char *)v0 + *(void *)(*v0 + 136);
    uint64_t v9 = *(void *)(v1 + 88);
    uint64_t v10 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    uint64_t v11 = MEMORY[0x185309640](&v13[OBJC_IVAR____NSKeyValueObservation_helper]);
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      NSKeyValueObservation.Helper.invalidate()();
    }
    swift_unknownObjectWeakAssign();
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t AttributedString.Guts.getUniformValues(in:)()
{
  uint64_t v1 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v3 = v0[8];
  if (v3) {
    uint64_t v4 = v0[10];
  }
  else {
    uint64_t v4 = 0;
  }
  if (v1 < 0 || v4 < v1)
  {
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
    goto LABEL_309;
  }
  uint64_t v5 = result;
  uint64_t v120 = result;
  uint64_t v121 = v1;
  uint64_t v6 = v0[9];
  uint64_t v122 = v0[11];
  if (!v3 || (*(_WORD *)(v3 + 16) ? (BOOL v7 = v121 < v0[10]) : (BOOL v7 = 0), !v7))
  {
    swift_retain_n();
    unint64_t v8 = swift_unknownObjectRetain_n();
    unint64_t v9 = specialized Rope._endPath.getter(v8);
    swift_unknownObjectRelease();
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (!v3) {
      goto LABEL_60;
    }
    while (2)
    {
      swift_unknownObjectRetain();
      uint64_t v118 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v122, v9, v10, v3, v6);
      swift_release();
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_61:
      uint64_t v30 = v121;
      uint64_t v31 = v121 - v11;
      if (__OFSUB__(v121, v11)) {
        goto LABEL_303;
      }
      uint64_t v119 = v0;
      unint64_t v32 = v9;
      char v116 = 1;
      uint64_t v117 = MEMORY[0x1E4FBC868];
      while (1)
      {
        uint64_t v33 = v119[8];
        if (v30 == v5) {
          break;
        }
        unint64_t v35 = v32;
        if (!v33)
        {
          uint64_t v41 = v122;
          uint64_t v39 = v118;
          uint64_t v0 = v119;
          if (!v31) {
            goto LABEL_254;
          }
          goto LABEL_131;
        }
        uint64_t v39 = v118;
        uint64_t v0 = v119;
        uint64_t v40 = v119[10];
LABEL_130:
        uint64_t v41 = v122;
        if (v31 == v40)
        {
LABEL_254:
          uint64_t v107 = v117;
LABEL_255:
          swift_release();
          return v107;
        }
LABEL_131:
        if (v41 != v0[11])
        {
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
          goto LABEL_278;
        }
        if (v10)
        {
          uint64_t v54 = (void *)(v10 + 24 * ((v35 >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xF));
          uint64_t v55 = v54[4];
          uint64_t v56 = v54[5];
          unint64_t v57 = v54[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v58 = v55;
          uint64_t v115 = v56;
        }
        else
        {
          uint64_t v59 = v0[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v35, v59);
          uint64_t v58 = v60;
          uint64_t v62 = v61;
          uint64_t result = swift_unknownObjectRelease();
          if (v122 != v0[11]) {
            goto LABEL_284;
          }
          uint64_t v115 = v62;
          uint64_t v63 = v0[8];
          swift_unknownObjectRetain();
          unint64_t v57 = specialized Rope._Node.subscript.getter(v35, v63);
          uint64_t v5 = v120;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v64 = v31 + v57;
        if (__OFADD__(v31, v57)) {
          goto LABEL_264;
        }
        if (v5 >= v31) {
          uint64_t v65 = v31;
        }
        else {
          uint64_t v65 = v5;
        }
        uint64_t v66 = v121;
        if (v31 < v121) {
          uint64_t v65 = v121;
        }
        if (v64 > v121) {
          uint64_t v66 = v31 + v57;
        }
        if (v5 >= v64) {
          uint64_t v67 = v66;
        }
        else {
          uint64_t v67 = v5;
        }
        if (v65 == v67) {
          goto LABEL_265;
        }
        uint64_t v68 = v67 - v65;
        if (__OFSUB__(v67, v65)) {
          goto LABEL_266;
        }
        uint64_t v69 = v0[8];
        uint64_t v70 = v0[11];
        uint64_t v124 = v122;
        unint64_t v125 = v35;
        uint64_t v126 = v10;
        BOOL v19 = __OFADD__(v39, 1);
        uint64_t v71 = v39 + 1;
        if (v19) {
          goto LABEL_267;
        }
        if (v122 != v70) {
          goto LABEL_268;
        }
        uint64_t v113 = v68;
        if (v10)
        {
          unint64_t v72 = *(void *)(v10 + 24 * ((v35 >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          swift_retain();
          swift_unknownObjectRetain();
          unint64_t v72 = specialized Rope._Node.subscript.getter(v35, v69);
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v19 = __OFADD__(v31, v72);
        v31 += v72;
        if (v19) {
          goto LABEL_269;
        }
        if (v69)
        {
          unint64_t v73 = ((-15 << ((4 * *(unsigned char *)(v69 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v69 + 18) | ((unint64_t)*(unsigned __int16 *)(v69 + 16) << ((4 * *(unsigned char *)(v69 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v73 = 0;
        }
        uint64_t v30 = v121;
        if (v35 >= v73) {
          goto LABEL_270;
        }
        if (v10)
        {
          char v74 = (4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C;
          unint64_t v75 = ((v35 >> v74) & 0xF) + 1;
          if (v75 < *(unsigned __int16 *)(v10 + 16))
          {
            unint64_t v76 = (v75 << v74) | ((-15 << v74) - 1) & v35;
            uint64_t result = swift_unknownObjectRelease_n();
            goto LABEL_167;
          }
        }
        int v77 = *(unsigned __int8 *)(v69 + 18);
        char v78 = (4 * v77 + 8) & 0x3C;
        uint64_t v79 = (v35 >> v78) & 0xF;
        uint64_t v123 = v79;
        if (!v77)
        {
          uint64_t v81 = v79 + 1;
          if (v79 + 1 < (unint64_t)*(unsigned __int16 *)(v69 + 16))
          {
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v76 = (v81 << v78) | ((-15 << v78) - 1) & v35;
            uint64_t v10 = v69;
            goto LABEL_167;
          }
LABEL_169:
          if (v69)
          {
            int v82 = *(unsigned __int8 *)(v69 + 18);
            uint64_t v83 = *(unsigned __int16 *)(v69 + 16);
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v76 = ((-15 << ((4 * v82 + 8) & 0x3C)) - 1) & v82 | (unint64_t)(v83 << ((4 * v82 + 8) & 0x3C));
          }
          else
          {
            unint64_t v76 = 0;
          }
          uint64_t v5 = v120;
          uint64_t v10 = 0;
          uint64_t v124 = v122;
          if (v31 < v120) {
            goto LABEL_168;
          }
LABEL_173:
          uint64_t v84 = v5;
          uint64_t v85 = v0[8];
          if (v121 != v84)
          {
            uint64_t v122 = v0[11];
            if (v85)
            {
              uint64_t v71 = v0[9];
              uint64_t v31 = v0[10];
              int v100 = *(unsigned __int8 *)(v85 + 18);
              uint64_t v101 = *(unsigned __int16 *)(v85 + 16);
              swift_release();
              uint64_t v10 = 0;
              unint64_t v76 = ((-15 << ((4 * v100 + 8) & 0x3C)) - 1) & v100 | (unint64_t)(v101 << ((4 * v100 + 8) & 0x3C));
            }
            else
            {
              swift_release();
              unint64_t v76 = 0;
              uint64_t v10 = 0;
              uint64_t v71 = 0;
              uint64_t v31 = 0;
            }
            uint64_t v5 = v120;
            goto LABEL_234;
          }
          if (v85) {
            uint64_t v86 = v0[10];
          }
          else {
            uint64_t v86 = 0;
          }
          if (v86 < v121) {
            goto LABEL_290;
          }
          uint64_t v122 = v0[11];
          if (v85)
          {
            uint64_t v87 = v0[9];
            uint64_t v88 = *(unsigned __int8 *)(v85 + 18);
            if (*(_WORD *)(v85 + 16) && v121 < v0[10])
            {
              if (*(unsigned char *)(v85 + 18))
              {
                uint64_t result = swift_unknownObjectRetain_n();
                uint64_t v89 = v121;
                uint64_t v90 = v85;
                while (1)
                {
                  unint64_t v92 = *(unsigned __int16 *)(v90 + 16);
                  if (!*(_WORD *)(v90 + 16)) {
                    goto LABEL_184;
                  }
                  uint64_t v93 = *(void *)(v90 + 40);
                  BOOL v19 = __OFSUB__(v89, v93);
                  uint64_t v94 = v89 - v93;
                  if (v19) {
                    goto LABEL_272;
                  }
                  if (__OFADD__(v94, 1)) {
                    goto LABEL_273;
                  }
                  if (v94 + 1 <= 0)
                  {
                    unint64_t v92 = 0;
                  }
                  else
                  {
                    if (v92 == 1) {
                      goto LABEL_183;
                    }
                    uint64_t v95 = *(void *)(v90 + 64);
                    uint64_t v89 = v94 - v95;
                    if (__OFSUB__(v94, v95)) {
                      goto LABEL_286;
                    }
                    if (__OFADD__(v89, 1)) {
                      goto LABEL_287;
                    }
                    if (v89 + 1 < 1)
                    {
                      unint64_t v92 = 1;
                      uint64_t v89 = v94;
                    }
                    else
                    {
                      if (v92 == 2) {
                        goto LABEL_184;
                      }
                      uint64_t v96 = *(void *)(v90 + 88);
                      BOOL v19 = __OFSUB__(v89, v96);
                      uint64_t v94 = v89 - v96;
                      if (v19) {
                        goto LABEL_298;
                      }
                      if (__OFADD__(v94, 1)) {
                        goto LABEL_299;
                      }
                      if (v94 + 1 >= 1)
                      {
                        if (v92 != 3)
                        {
                          uint64_t v97 = 3;
                          if (v92 > 3) {
                            uint64_t v97 = *(unsigned __int16 *)(v90 + 16);
                          }
                          unint64_t v98 = (void *)(v90 + 112);
                          uint64_t v99 = 3;
                          while (v97 != v99)
                          {
                            uint64_t v89 = v94 - *v98;
                            if (__OFSUB__(v94, *v98)) {
                              goto LABEL_279;
                            }
                            if (__OFADD__(v89, 1)) {
                              goto LABEL_280;
                            }
                            if (v89 + 1 < 1)
                            {
                              unint64_t v92 = v99;
                              uint64_t v89 = v94;
                              goto LABEL_185;
                            }
                            ++v99;
                            v98 += 3;
                            uint64_t v94 = v89;
                            if (v92 == v99) {
                              goto LABEL_184;
                            }
                          }
LABEL_278:
                          __break(1u);
LABEL_279:
                          __break(1u);
LABEL_280:
                          __break(1u);
LABEL_281:
                          __break(1u);
                          goto LABEL_282;
                        }
LABEL_183:
                        uint64_t v89 = v94;
LABEL_184:
                        if (v89) {
                          goto LABEL_271;
                        }
                        goto LABEL_185;
                      }
                      unint64_t v92 = 2;
                    }
                  }
LABEL_185:
                  char v91 = (4 * *(unsigned char *)(v90 + 18) + 8) & 0x3C;
                  uint64_t v88 = ((-15 << v91) - 1) & v88 | (v92 << v91);
                  uint64_t v10 = *(void *)(v90 + 24 + 24 * v92);
                  swift_unknownObjectRetain();
                  uint64_t result = swift_unknownObjectRelease();
                  uint64_t v90 = v10;
                  if (!*(unsigned char *)(v10 + 18)) {
                    goto LABEL_219;
                  }
                }
              }
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v88 = 0;
              uint64_t v89 = v121;
              uint64_t v10 = v85;
LABEL_219:
              unint64_t v102 = *(unsigned __int16 *)(v10 + 16);
              if (!*(_WORD *)(v10 + 16)) {
                goto LABEL_230;
              }
              uint64_t v103 = *(void *)(v10 + 24);
              BOOL v19 = __OFSUB__(v89, v103);
              uint64_t v104 = v89 - v103;
              if (v19) {
                goto LABEL_305;
              }
              if (__OFADD__(v104, 1)) {
                goto LABEL_306;
              }
              if (v104 + 1 <= 0)
              {
                unint64_t v102 = 0;
              }
              else
              {
                if (v102 == 1) {
                  goto LABEL_224;
                }
                uint64_t v105 = *(void *)(v10 + 48);
                uint64_t v89 = v104 - v105;
                if (__OFSUB__(v104, v105)) {
                  goto LABEL_318;
                }
                if (__OFADD__(v89, 1)) {
                  goto LABEL_319;
                }
                if (v89 + 1 < 1)
                {
                  unint64_t v102 = 1;
                  uint64_t v89 = v104;
                }
                else
                {
                  if (v102 == 2) {
                    goto LABEL_230;
                  }
                  uint64_t v108 = *(void *)(v10 + 72);
                  BOOL v19 = __OFSUB__(v89, v108);
                  uint64_t v104 = v89 - v108;
                  if (v19) {
                    goto LABEL_322;
                  }
                  if (__OFADD__(v104, 1)) {
                    goto LABEL_323;
                  }
                  if (v104 + 1 < 1)
                  {
                    unint64_t v102 = 2;
                  }
                  else
                  {
                    if (v102 != 3)
                    {
                      uint64_t v109 = 3;
                      if (v102 > 3) {
                        uint64_t v109 = *(unsigned __int16 *)(v10 + 16);
                      }
                      uint64_t v110 = (void *)(v10 + 96);
                      uint64_t v111 = 3;
                      while (v109 != v111)
                      {
                        uint64_t v89 = v104 - *v110;
                        if (__OFSUB__(v104, *v110)) {
                          goto LABEL_313;
                        }
                        if (__OFADD__(v89, 1)) {
                          goto LABEL_314;
                        }
                        if (v89 + 1 < 1)
                        {
                          unint64_t v102 = v111;
                          uint64_t v89 = v104;
                          goto LABEL_231;
                        }
                        ++v111;
                        v110 += 3;
                        uint64_t v104 = v89;
                        if (v102 == v111) {
                          goto LABEL_230;
                        }
                      }
LABEL_312:
                      __break(1u);
LABEL_313:
                      __break(1u);
LABEL_314:
                      __break(1u);
LABEL_315:
                      __break(1u);
LABEL_316:
                      __break(1u);
                      goto LABEL_317;
                    }
LABEL_224:
                    uint64_t v89 = v104;
LABEL_230:
                    if (v89) {
                      goto LABEL_304;
                    }
                  }
                }
              }
LABEL_231:
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v76 = v88 & 0xFFFFFFFFFFFFF0FFLL | (v102 << 8);
              uint64_t v30 = v121;
            }
            else
            {
              unint64_t v76 = ((-15 << ((4 * v88 + 8) & 0x3C)) - 1) & v88 | ((unint64_t)*(unsigned __int16 *)(v85 + 16) << ((4 * v88 + 8) & 0x3C));
              swift_unknownObjectRetain();
              uint64_t v89 = 0;
              uint64_t v10 = 0;
            }
            swift_unknownObjectRetain();
            uint64_t v71 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v122, v76, v10, v85, v87);
            swift_release();
            uint64_t result = swift_unknownObjectRelease_n();
          }
          else
          {
            uint64_t result = swift_release();
            uint64_t v89 = 0;
            uint64_t v10 = 0;
            unint64_t v76 = 0;
            uint64_t v71 = 0;
          }
          uint64_t v31 = v30 - v89;
          uint64_t v5 = v120;
          if (__OFSUB__(v30, v89)) {
            goto LABEL_291;
          }
          goto LABEL_234;
        }
        swift_unknownObjectRetain();
        char v80 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v69 + 24, &v123, (uint64_t)&v124, v69, v77);
        uint64_t result = swift_unknownObjectRelease();
        if ((v80 & 1) == 0) {
          goto LABEL_169;
        }
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v76 = v125;
        uint64_t v122 = v124;
        uint64_t v10 = v126;
LABEL_167:
        uint64_t v5 = v120;
        if (v31 >= v120) {
          goto LABEL_173;
        }
LABEL_168:
        swift_release();
LABEL_234:
        unint64_t v32 = v76;
        uint64_t v118 = v71;
        if (v116)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          char v116 = 0;
          uint64_t v117 = v58;
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v106 = swift_bridgeObjectRetain();
          uint64_t v107 = specialized _NativeDictionary.filter(_:)(v106, v113, v58, v115);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          char v116 = 0;
          uint64_t v117 = v107;
          if (!*(void *)(v107 + 16)) {
            goto LABEL_255;
          }
        }
      }
      uint64_t v6 = v119[10];
      if (v33) {
        uint64_t v34 = v119[10];
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34 < v30) {
        goto LABEL_276;
      }
      unint64_t v35 = v32;
      if (!v33)
      {
        uint64_t v3 = 0;
        uint64_t v0 = v119;
        goto LABEL_129;
      }
      uint64_t v0 = v119;
      uint64_t v112 = v119[11];
      uint64_t v114 = v119[9];
      uint64_t v12 = *(unsigned __int8 *)(v33 + 18);
      if (*(_WORD *)(v33 + 16)) {
        BOOL v36 = v30 < v6;
      }
      else {
        BOOL v36 = 0;
      }
      if (!v36)
      {
        unint64_t v37 = ((-15 << ((4 * v12 + 8) & 0x3C)) - 1) & v12 | ((unint64_t)*(unsigned __int16 *)(v33 + 16) << ((4 * v12 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v3 = 0;
        uint64_t v38 = 0;
LABEL_128:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v112, v37, v38, v33, v114);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v5 = v120;
LABEL_129:
        uint64_t v40 = v30 - v3;
        uint64_t v39 = v118;
        if (__OFSUB__(v30, v3)) {
          goto LABEL_277;
        }
        goto LABEL_130;
      }
      if (*(unsigned char *)(v33 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v3 = v30;
        uint64_t v42 = v33;
        while (1)
        {
          uint64_t v27 = *(unsigned __int16 *)(v42 + 16);
          if (!*(_WORD *)(v42 + 16)) {
            break;
          }
          uint64_t v29 = *(void *)(v42 + 40);
          uint64_t v44 = v3 - v29;
          if (__OFSUB__(v3, v29)) {
            goto LABEL_260;
          }
          uint64_t v29 = v44 + 1;
          if (__OFADD__(v44, 1)) {
            goto LABEL_261;
          }
          if (v29 <= 0)
          {
            uint64_t v27 = 0;
            goto LABEL_83;
          }
          if (v27 == 1)
          {
            uint64_t v3 = v44;
            break;
          }
          uint64_t v45 = *(void *)(v42 + 64);
          BOOL v19 = __OFSUB__(v44, v45);
          uint64_t v29 = v44 - v45;
          if (v19) {
            goto LABEL_274;
          }
          if (__OFADD__(v29, 1)) {
            goto LABEL_275;
          }
          if (v29 + 1 < 1)
          {
            uint64_t v27 = 1;
            uint64_t v3 = v44;
            goto LABEL_83;
          }
          if (v27 == 2)
          {
            uint64_t v3 = v29;
            break;
          }
          uint64_t v46 = (void *)(v42 + 88);
          uint64_t v47 = 2;
          while (1)
          {
            if (v27 == v47)
            {
              __break(1u);
LABEL_257:
              __break(1u);
LABEL_258:
              __break(1u);
              goto LABEL_259;
            }
            uint64_t v3 = v29 - *v46;
            if (__OFSUB__(v29, *v46)) {
              goto LABEL_257;
            }
            if (__OFADD__(v3, 1)) {
              goto LABEL_258;
            }
            if (v3 + 1 < 1) {
              break;
            }
            ++v47;
            v46 += 3;
            uint64_t v29 = v3;
            if (v27 == v47) {
              goto LABEL_82;
            }
          }
          uint64_t v27 = v47;
          uint64_t v3 = v29;
LABEL_83:
          char v43 = (4 * *(unsigned char *)(v42 + 18) + 8) & 0x3C;
          uint64_t v12 = ((-15 << v43) - 1) & v12 | (v27 << v43);
          uint64_t v38 = *(void *)(v42 + 24 + 24 * v27);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v42 = v38;
          if (!*(unsigned char *)(v38 + 18)) {
            goto LABEL_105;
          }
        }
LABEL_82:
        if (!v3) {
          goto LABEL_83;
        }
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        uint64_t v23 = v29;
        uint64_t v11 = v27;
LABEL_59:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v9 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v23 << 8);
        uint64_t v5 = v120;
        if (v3) {
          continue;
        }
LABEL_60:
        uint64_t result = swift_release();
        uint64_t v118 = 0;
        goto LABEL_61;
      }
      break;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v12 = 0;
    uint64_t v3 = v30;
    uint64_t v38 = v33;
LABEL_105:
    uint64_t v48 = *(unsigned __int16 *)(v38 + 16);
    if (!*(_WORD *)(v38 + 16)) {
      goto LABEL_114;
    }
    uint64_t v49 = *(void *)(v38 + 24);
    BOOL v19 = __OFSUB__(v3, v49);
    uint64_t v50 = v3 - v49;
    if (v19) {
      goto LABEL_296;
    }
    if (__OFADD__(v50, 1)) {
      goto LABEL_297;
    }
    if (v50 + 1 <= 0)
    {
      uint64_t v48 = 0;
    }
    else
    {
      if (v48 == 1)
      {
LABEL_115:
        if (v50) {
          goto LABEL_295;
        }
        uint64_t v3 = 0;
        goto LABEL_127;
      }
      uint64_t v51 = *(void *)(v38 + 48);
      uint64_t v3 = v50 - v51;
      if (__OFSUB__(v50, v51)) {
        goto LABEL_307;
      }
      if (__OFADD__(v3, 1)) {
        goto LABEL_308;
      }
      if (v3 + 1 < 1)
      {
        uint64_t v48 = 1;
        uint64_t v3 = v50;
      }
      else
      {
        if (v48 == 2)
        {
LABEL_114:
          uint64_t v50 = v3;
          goto LABEL_115;
        }
        uint64_t v52 = (void *)(v38 + 72);
        uint64_t v53 = 2;
        while (1)
        {
          if (v48 == v53) {
            goto LABEL_292;
          }
          uint64_t v50 = v3 - *v52;
          if (__OFSUB__(v3, *v52)) {
            goto LABEL_293;
          }
          if (__OFADD__(v50, 1)) {
            goto LABEL_294;
          }
          if (v50 + 1 < 1) {
            break;
          }
          ++v53;
          v52 += 3;
          uint64_t v3 = v50;
          if (v48 == v53) {
            goto LABEL_115;
          }
        }
        uint64_t v48 = v53;
      }
    }
LABEL_127:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v37 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v48 << 8);
    uint64_t v30 = v121;
    goto LABEL_128;
  }
  uint64_t v12 = *(unsigned __int8 *)(v3 + 18);
  if (*(unsigned char *)(v3 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    uint64_t v11 = v121;
    uint64_t v13 = v3;
    while (1)
    {
      uint64_t v15 = *(unsigned __int16 *)(v13 + 16);
      if (!*(_WORD *)(v13 + 16)) {
        goto LABEL_16;
      }
      uint64_t v16 = *(void *)(v13 + 40);
      uint64_t v17 = v11 - v16;
      if (__OFSUB__(v11, v16)) {
        goto LABEL_288;
      }
      if (__OFADD__(v17, 1)) {
        goto LABEL_289;
      }
      if (v17 + 1 <= 0)
      {
        uint64_t v15 = 0;
        goto LABEL_17;
      }
      if (v15 == 1) {
        break;
      }
      uint64_t v18 = *(void *)(v13 + 64);
      BOOL v19 = __OFSUB__(v17, v18);
      uint64_t v20 = v17 - v18;
      if (v19) {
        goto LABEL_300;
      }
      if (__OFADD__(v20, 1)) {
        goto LABEL_301;
      }
      if (v20 + 1 < 1)
      {
        uint64_t v15 = 1;
        uint64_t v11 = v17;
        goto LABEL_17;
      }
      if (v15 == 2)
      {
        uint64_t v11 = v20;
        goto LABEL_16;
      }
      uint64_t v21 = (void *)(v13 + 88);
      uint64_t v22 = 2;
      while (1)
      {
        if (v15 == v22) {
          goto LABEL_281;
        }
        uint64_t v11 = v20 - *v21;
        if (__OFSUB__(v20, *v21))
        {
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
          goto LABEL_285;
        }
        if (__OFADD__(v11, 1)) {
          goto LABEL_283;
        }
        if (v11 + 1 < 1) {
          break;
        }
        ++v22;
        v21 += 3;
        uint64_t v20 = v11;
        if (v15 == v22) {
          goto LABEL_16;
        }
      }
      uint64_t v15 = v22;
      uint64_t v11 = v20;
LABEL_17:
      char v14 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
      uint64_t v12 = ((-15 << v14) - 1) & v12 | (v15 << v14);
      uint64_t v10 = *(void *)(v13 + 24 + 24 * v15);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v13 = v10;
      if (!*(unsigned char *)(v10 + 18)) {
        goto LABEL_39;
      }
    }
    v11 -= v16;
LABEL_16:
    if (!v11) {
      goto LABEL_17;
    }
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
    goto LABEL_302;
  }
  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain_n();
  uint64_t v11 = v121;
  uint64_t v10 = v3;
LABEL_39:
  uint64_t v23 = *(unsigned __int16 *)(v10 + 16);
  if (!*(_WORD *)(v10 + 16))
  {
LABEL_58:
    if (v11) {
      goto LABEL_315;
    }
    goto LABEL_59;
  }
  uint64_t v24 = *(void *)(v10 + 24);
  uint64_t v25 = v11 - v24;
  if (__OFSUB__(v11, v24)) {
    goto LABEL_316;
  }
  if (__OFADD__(v25, 1))
  {
LABEL_317:
    __break(1u);
LABEL_318:
    __break(1u);
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
    goto LABEL_321;
  }
  if (v25 + 1 <= 0)
  {
    uint64_t v23 = 0;
    goto LABEL_59;
  }
  if (v23 == 1)
  {
    v11 -= v24;
    goto LABEL_58;
  }
  uint64_t v26 = *(void *)(v10 + 48);
  BOOL v19 = __OFSUB__(v25, v26);
  uint64_t v27 = v25 - v26;
  if (v19) {
    goto LABEL_320;
  }
  if (!__OFADD__(v27, 1))
  {
    if (v27 + 1 < 1)
    {
      uint64_t v23 = 1;
      uint64_t v11 = v25;
      goto LABEL_59;
    }
    if (v23 != 2)
    {
      unint64_t v28 = (void *)(v10 + 72);
      uint64_t v29 = 2;
      while (v23 != v29)
      {
        uint64_t v11 = v27 - *v28;
        if (__OFSUB__(v27, *v28)) {
          goto LABEL_310;
        }
        if (__OFADD__(v11, 1)) {
          goto LABEL_311;
        }
        if (v11 + 1 < 1) {
          goto LABEL_262;
        }
        ++v29;
        v28 += 3;
        uint64_t v27 = v11;
        if (v23 == v29) {
          goto LABEL_58;
        }
      }
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
      goto LABEL_312;
    }
    uint64_t v11 = v27;
    goto LABEL_58;
  }
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of LocalizedError.recoverySuggestion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LocalizedError.errorDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocalizedError.failureReason.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

double *Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)@<X0>(double *a1@<X0>, const void *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, double *a6@<X8>)
{
  unint64_t v35 = a6;
  double v12 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  unsigned __int8 v13 = *a3;
  int v23 = *a4;
  unsigned __int8 v14 = *a5;
  uint64_t v15 = *v6;
  uint64_t v16 = v6[1];
  char v33 = 1;
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  double v28 = v12;
  memcpy(v27, a2, 0x11AuLL);
  LOBYTE(v26) = v13;
  uint64_t result = Calendar.dateAfterMatchingEra(startingAt:components:direction:matchedEra:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, &v33, (uint64_t)&v31);
  if (v32) {
    double v18 = v12;
  }
  else {
    double v18 = v31;
  }
  double v19 = 0.0;
  char v20 = v33;
  if (v33 == 1)
  {
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    uint64_t result = Calendar.dateAfterMatchingYear(startingAt:components:direction:)(&v28, v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (v7) {
      return result;
    }
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingYearForWeekOfYear(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingQuarter(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekOfYear(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingDayOfYear(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingMonth(startingAt:components:direction:strictMatching:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, v23 == 3, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekOfMonth(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekdayOrdinal(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekday(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    double v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    unsigned __int8 v25 = v13;
    Calendar.dateAfterMatchingDay(startingAt:originalStartDate:components:direction:)(&v28, &v26, (uint64_t)v27, &v25, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    double v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    unsigned __int8 v25 = v13;
    unsigned __int8 v24 = v23;
    Calendar.dateAfterMatchingHour(startingAt:originalStartDate:components:direction:findLastMatch:isStrictMatching:matchingPolicy:)(&v28, &v26, (uint64_t)v27, &v25, v14, v23 == 3, &v24, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    Calendar.dateAfterMatchingMinute(startingAt:components:direction:)(&v28, (uint64_t)v27, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    double v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    unsigned __int8 v25 = v13;
    Calendar.dateAfterMatchingSecond(startingAt:originalStartDate:components:direction:)(&v28, &v26, (uint64_t)v27, &v25, (uint64_t)&v31);
    if (v32) {
      double v21 = v18;
    }
    else {
      double v21 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v21;
    memcpy(v27, __dst, 0x11AuLL);
    uint64_t result = Calendar.dateAfterMatchingNanosecond(startingAt:components:direction:)(&v28, (uint64_t)v27, (uint64_t)&v31);
    double v19 = v31;
    if (v32) {
      double v19 = v21;
    }
  }
  uint64_t v22 = v35;
  *unint64_t v35 = v19;
  *((unsigned char *)v22 + 8) = v20 ^ 1;
  return result;
}

double *Calendar.dateAfterMatchingWeekdayOrdinal(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v42)(long long *__return_ptr, uint64_t, void);
  double v43;
  char v44;
  uint64_t v45;
  double v46;
  double v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  double *v52;
  uint64_t v53;
  char v54;
  void (*v55)(double *__return_ptr, double *, uint64_t *, uint64_t, void);
  void (*v56)(double *__return_ptr, uint64_t *, double *, uint64_t, void);
  long long v57;
  long long v58;
  uint64_t v59[36];
  double v60[36];
  uint64_t v61;
  void v62[36];
  double v63[36];
  void __dst[36];
  void __src[37];
  uint64_t v66;

  if (*(unsigned char *)(a2 + 200)) {
    goto LABEL_2;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 176);
  uint64_t v54 = *(unsigned char *)(a2 + 184);
  uint64_t v8 = *(void *)(a2 + 192);
  int v9 = *a3;
  double v10 = *v4;
  double v11 = v4[1];
  uint64_t v66 = 256;
  if (v6 <= 1.59271755e13) {
    double v12 = v6;
  }
  else {
    double v12 = 1.59271755e13;
  }
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v63[0] = v13;
  uint64_t v56 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, void))(*(void *)&v11 + 192);
  v56((double *)__src, &v66, v63, ObjectType, *(void *)&v11);
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if (__dst[25])
  {
    if (!v8) {
      goto LABEL_2;
    }
  }
  else if (v8 == __dst[24])
  {
LABEL_2:
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  uint64_t v53 = v7;
  uint64_t v52 = (double *)a4;
  uint64_t v55 = *(void (**)(double *__return_ptr, double *, uint64_t *, uint64_t, void))(*(void *)&v11 + 160);
  double v15 = v6;
  do
  {
    uint64_t v16 = v8;
    LOBYTE(v60[0]) = 8;
    if (v15 <= 1.59271755e13) {
      double v17 = v15;
    }
    else {
      double v17 = 1.59271755e13;
    }
    v62[0] = fmax(v17, -2.11845067e11);
    v55(v63, v60, v62, ObjectType, *(void *)&v11);
    if (LOBYTE(v63[2]))
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(void *)uint64_t v24 = 8;
      *(double *)(v24 + 8) = v15;
      *(unsigned char *)(v24 + 16) = 0;
      return (double *)swift_willThrow();
    }
    if (v9) {
      double v18 = v63[0] - v63[1];
    }
    else {
      double v18 = v63[1] + v63[0];
    }
    *(void *)&v60[0] = 256;
    if (v18 <= 1.59271755e13) {
      double v19 = v18;
    }
    else {
      double v19 = 1.59271755e13;
    }
    v62[0] = fmax(v19, -2.11845067e11);
    v56(v63, (uint64_t *)v60, (double *)v62, ObjectType, *(void *)&v11);
    memcpy(v62, v63, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v62);
    uint64_t v20 = v62[24];
    if (LOBYTE(v62[25])) {
      uint64_t v20 = 0;
    }
    BOOL v21 = v15 >= v18;
    if (v9) {
      BOOL v21 = v18 >= v15;
    }
    if (v21)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)uint64_t v25 = v18;
      *(double *)(v25 + 8) = v15;
      char v26 = 1;
LABEL_37:
      *(unsigned char *)(v25 + 16) = v26;
      return (double *)swift_willThrow();
    }
    double v15 = v18;
  }
  while (v8 != v20);
  uint64_t v22 = v7;
  if (v54) {
    goto LABEL_40;
  }
  uint64_t v61 = 128;
  if (v18 <= 1.59271755e13) {
    double v23 = v18;
  }
  else {
    double v23 = 1.59271755e13;
  }
  v60[0] = fmax(v23, -2.11845067e11);
  v56(v63, &v61, v60, ObjectType, *(void *)&v11);
  memcpy(v62, v63, 0x11AuLL);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v62);
  if (v62[23])
  {
    if (v7)
    {
      if ((v7 & 0x8000000000000000) == 0) {
        goto LABEL_57;
      }
      goto LABEL_44;
    }
LABEL_40:
    double v28 = v52;
    *uint64_t v52 = v18;
    goto LABEL_41;
  }
  uint64_t v27 = v62[22];
  if (v7 == v62[22]) {
    goto LABEL_40;
  }
  if (v7 >= v62[22])
  {
    uint64_t v33 = v16;
    uint64_t v34 = v16;
    goto LABEL_55;
  }
LABEL_44:
  LOBYTE(v58) = 8;
  *(double *)uint64_t v59 = v13;
  v55(v60, (double *)&v58, v59, ObjectType, *(void *)&v11);
  if (LOBYTE(v60[2])) {
    goto LABEL_57;
  }
  double v29 = v60[0];
  double v6 = v60[0];
  uint64_t v30 = qword_18218B7E8[byte_1ECA4BB11] | qword_18218B7E8[byte_1ECA4BB10];
  v59[0] = v30;
  if (v60[0] <= 1.59271755e13) {
    double v31 = v60[0];
  }
  else {
    double v31 = 1.59271755e13;
  }
  *(void *)&uint64_t v58 = fmax(v31, -2.11845067e11);
  v56(v60, v59, (double *)&v58, ObjectType, *(void *)&v11);
  if ((v30 & 0x4000) != 0)
  {
    v60[0] = v10;
    v60[1] = v11;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&v60[2])
    {
      *(double *)uint64_t v59 = v60[2];
      *(double *)&v59[1] = v60[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(v59);
    }
  }
  memcpy(v59, v60, 0x11AuLL);
  uint64_t v22 = v53;
  if ((v59[23] & 1) == 0 && (v59[25] & 1) == 0)
  {
    uint64_t v27 = v59[22];
    uint64_t v34 = v59[24];
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v59);
    uint64_t v33 = v16;
LABEL_55:
    if (v22 != v27 || v33 != v34)
    {
LABEL_57:
      double v35 = v6;
      while (1)
      {
        LOBYTE(v58) = 3;
        if (v35 <= 1.59271755e13) {
          double v36 = v35;
        }
        else {
          double v36 = 1.59271755e13;
        }
        v59[0] = fmax(v36, -2.11845067e11);
        v55(v60, (double *)&v58, v59, ObjectType, *(void *)&v11);
        if (LOBYTE(v60[2]))
        {
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(void *)uint64_t v25 = 3;
          *(double *)(v25 + 8) = v35;
          char v26 = 2;
          goto LABEL_37;
        }
        double v6 = v60[1] + v60[0];
        uint64_t v37 = qword_18218B7E8[byte_1ECA4BAE9] | qword_18218B7E8[byte_1ECA4BAE8];
        v59[0] = v37;
        if (v60[1] + v60[0] <= 1.59271755e13) {
          double v38 = v60[1] + v60[0];
        }
        else {
          double v38 = 1.59271755e13;
        }
        *(void *)&uint64_t v58 = fmax(v38, -2.11845067e11);
        v56(v60, v59, (double *)&v58, ObjectType, *(void *)&v11);
        if ((v37 & 0x4000) != 0)
        {
          v60[0] = v10;
          v60[1] = v11;
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          double v39 = v60[2];
          if (*(void *)&v60[2])
          {
            double v40 = v60[3];
            *(double *)uint64_t v59 = v60[2];
            *(double *)&v59[1] = v60[3];
            uint64_t v41 = swift_getObjectType();
            uint64_t v42 = *(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)&v11 + 48);
            char v43 = v39;
            swift_unknownObjectRetain();
            v42(&v58, v41, *(void *)&v11);
            unint64_t v57 = v58;
            uint64_t v44 = specialized static TimeZone.== infix(_:_:)((uint64_t)v59, (uint64_t)&v57);
            swift_unknownObjectRelease();
            if (v44)
            {
              swift_unknownObjectRelease();
            }
            else
            {
              v59[0] = 0;
              v59[1] = 0;
              *(double *)&uint64_t v58 = v43;
              *((double *)&v58 + 1) = v40;
              uint64_t v45 = (*(uint64_t (**)(uint64_t *, long long *, void, uint64_t, void, uint64_t, uint64_t, double))(*(void *)&v11 + 112))(v59, &v58, 0, 1, 0, 1, v41, COERCE_DOUBLE(*(void *)&v11));
              uint64_t v47 = v46;
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              *(void *)&v60[0] = v45;
              v60[1] = v47;
            }
            uint64_t v22 = v53;
          }
        }
        memcpy(v59, v60, 0x11AuLL);
        if (v59[23] & 1) != 0 || (v59[25])
        {
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(void *)uint64_t v32 = 7;
          *(double *)(v32 + 8) = v6;
          goto LABEL_80;
        }
        uint64_t v48 = v35 >= v6;
        if (v9) {
          uint64_t v48 = v6 >= v35;
        }
        if (v48) {
          break;
        }
        uint64_t v49 = v59[22];
        uint64_t v50 = v59[24];
        uint64_t result = (double *)outlined release of DateComponents((uint64_t)v59);
        double v35 = v6;
        if (v22 == v49)
        {
          double v35 = v6;
          if (v16 == v50) {
            goto LABEL_78;
          }
        }
      }
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)uint64_t v32 = v6;
      *(double *)(v32 + 8) = v35;
      uint64_t v51 = 1;
      goto LABEL_83;
    }
LABEL_78:
    double v28 = v52;
    *uint64_t v52 = v6;
LABEL_41:
    *((unsigned char *)v28 + 8) = 0;
    return result;
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(void *)uint64_t v32 = 8;
  *(double *)(v32 + 8) = v29;
LABEL_80:
  uint64_t v51 = 2;
LABEL_83:
  *(unsigned char *)(v32 + 16) = v51;
  swift_willThrow();
  return (double *)outlined release of DateComponents((uint64_t)v59);
}

double *Calendar.dateAfterMatchingWeekOfMonth(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v12)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t);
  int v29;
  double v30;
  _OWORD v31[2];
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  double v81;
  char v82;
  uint64_t v83;
  void v84[36];
  double v85[36];
  void __dst[36];
  uint64_t v87;
  void __src[37];

  if (*(unsigned char *)(a2 + 248)) {
    goto LABEL_2;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 240);
  double v29 = *a3;
  uint64_t v8 = *(void *)(v4 + 8);
  uint64_t v87 = 1024;
  if (v6 <= 1.59271755e13) {
    double v9 = v6;
  }
  else {
    double v9 = 1.59271755e13;
  }
  double v10 = fmax(v9, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v85[0] = v10;
  double v12 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v8 + 192);
  v12((double *)__src, &v87, v85, ObjectType, v8);
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if (__dst[31])
  {
    if (v7)
    {
      double v13 = 0;
      goto LABEL_10;
    }
LABEL_2:
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  double v13 = __dst[30];
  if (v7 == __dst[30]) {
    goto LABEL_2;
  }
LABEL_10:
  unsigned __int8 v14 = *(void (**)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t))(v8 + 160);
  LOBYTE(v31[0]) = 10;
  *(double *)uint64_t v84 = v10;
  double v28 = v14;
  v14(v85, v31, v84, ObjectType, v8);
  if ((LOBYTE(v85[2]) & 1) == 0)
  {
    uint64_t v27 = a4;
    if (v29) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = 1;
    }
    do
    {
      double v17 = v6;
      double v6 = v85[0];
      if (v29)
      {
        if (v7 != 1 || v13 >= 3)
        {
          double v18 = v85[0] + -1.0;
          LOBYTE(v31[0]) = 10;
          if (v85[0] + -1.0 > 1.59271755e13) {
            double v18 = 1.59271755e13;
          }
          v84[0] = fmax(v18, -2.11845067e11);
          v28(v85, v31, v84, ObjectType, v8);
          if ((LOBYTE(v85[2]) & 1) == 0)
          {
            double v6 = v85[0];
            goto LABEL_41;
          }
        }
      }
      else
      {
        double v19 = v85[1];
        LOBYTE(v84[0]) = 10;
        LOBYTE(v31[0]) = 2;
        v85[0] = v10;
        uint64_t result = (double *)(*(uint64_t (**)(void *, _OWORD *, double *, uint64_t, uint64_t))(v8 + 144))(v84, v31, v85, ObjectType, v8);
        if (v21)
        {
          if (v7 != 1) {
            goto LABEL_40;
          }
          uint64_t result = 0;
          uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v7 != 1)
        {
          goto LABEL_40;
        }
        if (__OFSUB__(v20, result))
        {
          __break(1u);
          return result;
        }
        if (v13 != v20 - (void)result)
        {
LABEL_40:
          double v6 = v19 + v6;
          goto LABEL_41;
        }
      }
      while (1)
      {
        uint64_t v83 = 8;
        uint64_t v22 = v6 <= 1.59271755e13 ? v6 : 1.59271755e13;
        double v23 = fmax(v22, -2.11845067e11);
        *(double *)double v31 = v23;
        v12(v85, &v83, (double *)v31, ObjectType, v8);
        memcpy(v84, v85, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v84);
        if ((v84[11] & 1) == 0 && v84[10] == 1) {
          break;
        }
        char v80 = 1;
        uint64_t v79 = 1;
        char v78 = 1;
        int v77 = 0;
        unint64_t v76 = 1;
        unint64_t v75 = 1;
        char v74 = 1;
        unint64_t v73 = 1;
        unint64_t v72 = 1;
        uint64_t v71 = 1;
        uint64_t v70 = 1;
        uint64_t v69 = 1;
        uint64_t v68 = 1;
        uint64_t v67 = 1;
        uint64_t v66 = 1;
        uint64_t v65 = 1;
        uint64_t v32 = 0;
        memset(v31, 0, sizeof(v31));
        uint64_t v33 = 1;
        uint64_t v34 = 0;
        double v35 = 1;
        double v36 = 0;
        uint64_t v37 = 1;
        double v38 = v16;
        double v39 = 0;
        double v40 = 0;
        uint64_t v41 = 1;
        uint64_t v42 = 0;
        char v43 = 1;
        uint64_t v44 = 0;
        uint64_t v45 = 1;
        uint64_t v46 = 0;
        uint64_t v47 = 1;
        uint64_t v48 = 0;
        uint64_t v49 = 1;
        uint64_t v50 = 0;
        uint64_t v51 = 1;
        uint64_t v52 = 0;
        uint64_t v53 = 1;
        uint64_t v54 = 0;
        uint64_t v55 = 1;
        uint64_t v56 = 0;
        unint64_t v57 = 1;
        uint64_t v58 = 0;
        uint64_t v59 = 1;
        uint64_t v60 = 0;
        uint64_t v61 = 1;
        uint64_t v62 = 0;
        uint64_t v63 = 1;
        uint64_t v64 = 2;
        uint64_t v30 = v23;
        (*(void (**)(double *__return_ptr, _OWORD *, double *, void, uint64_t, uint64_t))(v8 + 200))(&v81, v31, &v30, 0, ObjectType, v8);
        if (v82) {
          break;
        }
        double v6 = v81;
      }
LABEL_41:
      *(void *)&v31[0] = 1024;
      if (v6 <= 1.59271755e13) {
        uint64_t v24 = v6;
      }
      else {
        uint64_t v24 = 1.59271755e13;
      }
      double v10 = fmax(v24, -2.11845067e11);
      uint64_t v81 = v10;
      v12(v85, (uint64_t *)v31, &v81, ObjectType, v8);
      memcpy(v84, v85, 0x11AuLL);
      uint64_t result = (double *)outlined release of DateComponents((uint64_t)v84);
      if (LOBYTE(v84[31]) == 1)
      {
        if (v29)
        {
          if (v6 >= v17) {
            goto LABEL_53;
          }
        }
        else if (v17 >= v6)
        {
          goto LABEL_53;
        }
        if (!v7) {
          goto LABEL_52;
        }
        double v13 = 0;
      }
      else
      {
        uint64_t v25 = v17 >= v6;
        if (v29) {
          uint64_t v25 = v6 >= v17;
        }
        if (v25)
        {
LABEL_53:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)char v26 = v6;
          *(double *)(v26 + 8) = v17;
          *(unsigned char *)(v26 + 16) = 1;
          return (double *)swift_willThrow();
        }
        double v13 = v84[30];
        if (v7 == v84[30])
        {
LABEL_52:
          *(double *)uint64_t v27 = v6;
          *(unsigned char *)(v27 + 8) = 0;
          return result;
        }
      }
      LOBYTE(v31[0]) = 10;
      *(double *)uint64_t v84 = v10;
      v28(v85, v31, v84, ObjectType, v8);
    }
    while ((LOBYTE(v85[2]) & 1) == 0);
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(void *)double v15 = 10;
  *(double *)(v15 + 8) = v6;
  *(unsigned char *)(v15 + 16) = 0;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingWeekOfYear(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  double v23;
  void __dst[36];
  uint64_t v25;
  double __src[36];
  void v27[33];
  char v28;
  uint64_t v29;

  if (*(unsigned char *)(a2 + 264)) {
    goto LABEL_26;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 256);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  double v29 = 2048;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v11;
  double v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v27, &v29, __src, ObjectType, v9);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v27);
  if (v28)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_26:
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  if (v7 == v27[32]) {
    goto LABEL_26;
  }
LABEL_7:
  uint64_t v22 = a4;
  unsigned __int8 v14 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v9 + 160);
  while (1)
  {
    LOBYTE(v25) = 11;
    if (v6 <= 1.59271755e13) {
      double v15 = v6;
    }
    else {
      double v15 = 1.59271755e13;
    }
    __dst[0] = fmax(v15, -2.11845067e11);
    v14(__src, &v25, __dst, ObjectType, v9);
    if (LOBYTE(__src[2]))
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      BOOL v21 = 0;
      *(void *)uint64_t v20 = 11;
      goto LABEL_29;
    }
    if (v8) {
      uint64_t v16 = __src[0] - __src[1];
    }
    else {
      uint64_t v16 = __src[1] + __src[0];
    }
    uint64_t v25 = 2048;
    if (v16 <= 1.59271755e13) {
      double v17 = v16;
    }
    else {
      double v17 = 1.59271755e13;
    }
    double v23 = fmax(v17, -2.11845067e11);
    v13(__src, &v25, &v23, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    double v18 = __dst[32];
    if (LOBYTE(__dst[33])) {
      double v18 = 0;
    }
    double v19 = v6 >= v16;
    if (v8) {
      double v19 = v16 >= v6;
    }
    if (v19) {
      break;
    }
    double v6 = v16;
    if (v7 == v18)
    {
      *(double *)uint64_t v22 = v16;
      *(unsigned char *)(v22 + 8) = 0;
      return result;
    }
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)uint64_t v20 = v16;
  BOOL v21 = 1;
LABEL_29:
  *(double *)(v20 + 8) = v6;
  *(unsigned char *)(v20 + 16) = v21;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingDayOfYear(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void __dst[36];
  uint64_t v24;
  double __src[36];
  void v26[13];
  char v27;
  uint64_t v28;

  if (*(unsigned char *)(a2 + 104)) {
    goto LABEL_26;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 96);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  double v28 = 0x40000;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v11;
  double v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v26, &v28, __src, ObjectType, v9);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v26);
  if (v27)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_26:
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  if (v7 == v26[12]) {
    goto LABEL_26;
  }
LABEL_7:
  uint64_t v22 = a4;
  unsigned __int8 v14 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v9 + 160);
  while (1)
  {
    LOBYTE(v24) = 17;
    if (v6 <= 1.59271755e13) {
      double v15 = v6;
    }
    else {
      double v15 = 1.59271755e13;
    }
    __dst[0] = fmax(v15, -2.11845067e11);
    v14(__src, &v24, __dst, ObjectType, v9);
    if (LOBYTE(__src[2]))
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      BOOL v21 = 0;
      *(void *)uint64_t v20 = 17;
      goto LABEL_29;
    }
    if (v8) {
      uint64_t v16 = __src[0] - __src[1];
    }
    else {
      uint64_t v16 = __src[1] + __src[0];
    }
    uint64_t v24 = 0x40000;
    if (v16 <= 1.59271755e13) {
      double v17 = v16;
    }
    else {
      double v17 = 1.59271755e13;
    }
    __dst[0] = fmax(v17, -2.11845067e11);
    v13(__src, &v24, (double *)__dst, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    double v18 = __dst[12];
    if (LOBYTE(__dst[13])) {
      double v18 = 0;
    }
    double v19 = v6 >= v16;
    if (v8) {
      double v19 = v16 >= v6;
    }
    if (v19) {
      break;
    }
    double v6 = v16;
    if (v7 == v18)
    {
      *(double *)uint64_t v22 = v16;
      *(unsigned char *)(v22 + 8) = 0;
      return result;
    }
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)uint64_t v20 = v16;
  BOOL v21 = 1;
LABEL_29:
  *(double *)(v20 + 8) = v6;
  *(unsigned char *)(v20 + 16) = v21;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingWeekday(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  void __dst[36];
  uint64_t v27;
  double __src[36];
  void v29[23];
  char v30;
  uint64_t v31;

  if (*(unsigned char *)(a2 + 184)) {
    goto LABEL_2;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 176);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  double v31 = 128;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v11;
  double v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v29, &v31, __src, ObjectType, v9);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v29);
  if (v30)
  {
    if (!v7) {
      goto LABEL_2;
    }
  }
  else if (v7 == v29[22])
  {
LABEL_2:
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  uint64_t v24 = a4;
  unsigned __int8 v14 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v9 + 160);
  LOBYTE(v27) = 7;
  *(double *)__unint64_t dst = v11;
  v14(__src, &v27, __dst, ObjectType, v9);
  if (LOBYTE(__src[2]))
  {
LABEL_11:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)double v15 = 7;
    *(double *)(v15 + 8) = v6;
    *(unsigned char *)(v15 + 16) = 0;
    return (double *)swift_willThrow();
  }
  while (1)
  {
    uint64_t v16 = v6;
    double v18 = __src[0];
    double v17 = __src[1];
    if (v8)
    {
      double v19 = __src[0] + -1.0;
      LOBYTE(v27) = 3;
      if (__src[0] + -1.0 > 1.59271755e13) {
        double v19 = 1.59271755e13;
      }
      __dst[0] = fmax(v19, -2.11845067e11);
      v14(__src, &v27, __dst, ObjectType, v9);
      double v6 = (LOBYTE(__src[2]) & 1) != 0 ? v18 - v17 : __src[0];
    }
    else
    {
      double v6 = __src[1] + __src[0];
    }
    uint64_t v27 = 128;
    uint64_t v20 = v6 <= 1.59271755e13 ? v6 : 1.59271755e13;
    BOOL v21 = fmax(v20, -2.11845067e11);
    uint64_t v25 = v21;
    v13(__src, &v27, &v25, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    if (LOBYTE(__dst[23]) != 1) {
      break;
    }
    if (v8)
    {
      if (v6 >= v16) {
        goto LABEL_35;
      }
    }
    else if (v16 >= v6)
    {
      goto LABEL_35;
    }
    if (!v7) {
      goto LABEL_34;
    }
LABEL_15:
    LOBYTE(v27) = 7;
    *(double *)__unint64_t dst = v21;
    v14(__src, &v27, __dst, ObjectType, v9);
    if (LOBYTE(__src[2])) {
      goto LABEL_11;
    }
  }
  uint64_t v22 = v16 >= v6;
  if (v8) {
    uint64_t v22 = v6 >= v16;
  }
  if (!v22)
  {
    if (v7 == __dst[22])
    {
LABEL_34:
      *(double *)uint64_t v24 = v6;
      *(unsigned char *)(v24 + 8) = 0;
      return result;
    }
    goto LABEL_15;
  }
LABEL_35:
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)double v23 = v6;
  *(double *)(v23 + 8) = v16;
  *(unsigned char *)(v23 + 16) = 1;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingQuarter(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void *(*v13)(double *__return_ptr, char *, double *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;
  char v30;

  if (*(unsigned char *)(a2 + 216))
  {
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 208);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v30 = 1;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  char v26 = v11;
  double v13 = *(void *(**)(double *__return_ptr, char *, double *, uint64_t, uint64_t))(v9 + 160);
  uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
  if ((v29 & 1) == 0)
  {
    double v6 = v27;
    if (v8)
    {
      double v6 = v27 + v28 + -1.0;
      if (v7 == 4) {
        goto LABEL_31;
      }
      uint64_t v30 = 9;
      if (v6 <= 1.59271755e13) {
        uint64_t v16 = v27 + v28 + -1.0;
      }
      else {
        uint64_t v16 = 1.59271755e13;
      }
      char v26 = fmax(v16, -2.11845067e11);
      uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
      if (v29) {
        goto LABEL_54;
      }
      double v6 = v27 - v28;
      if (v7 == 3) {
        goto LABEL_31;
      }
      uint64_t v30 = 9;
      if (v6 <= 1.59271755e13) {
        double v17 = v27 - v28;
      }
      else {
        double v17 = 1.59271755e13;
      }
      char v26 = fmax(v17, -2.11845067e11);
      uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
      if (v29) {
        goto LABEL_54;
      }
      double v6 = v27 - v28;
      if (v7 == 2) {
        goto LABEL_31;
      }
      uint64_t v30 = 9;
      if (v6 <= 1.59271755e13) {
        double v18 = v27 - v28;
      }
      else {
        double v18 = 1.59271755e13;
      }
      char v26 = fmax(v18, -2.11845067e11);
      uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
      if (v29) {
        goto LABEL_54;
      }
      double v6 = v27 - v28;
      if (v7 == 1)
      {
LABEL_31:
        *(double *)a4 = v6;
        *(unsigned char *)(a4 + 8) = 0;
        return result;
      }
      uint64_t v30 = 9;
      if (v6 <= 1.59271755e13) {
        double v19 = v27 - v28;
      }
      else {
        double v19 = 1.59271755e13;
      }
      char v26 = fmax(v19, -2.11845067e11);
      uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
      if ((v29 & 1) == 0)
      {
        double v6 = v27 - v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (v7 == 1) {
        goto LABEL_31;
      }
      if ((unint64_t)(v7 - 2) >= 3) {
        uint64_t v20 = 3;
      }
      else {
        uint64_t v20 = v7 - 2;
      }
      uint64_t v30 = 9;
      if (v27 <= 1.59271755e13) {
        BOOL v21 = v27;
      }
      else {
        BOOL v21 = 1.59271755e13;
      }
      char v26 = fmax(v21, -2.11845067e11);
      uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
      if ((v29 & 1) == 0)
      {
        double v6 = v28 + v27;
        if (!v20) {
          goto LABEL_31;
        }
        uint64_t v30 = 9;
        if (v6 <= 1.59271755e13) {
          uint64_t v22 = v28 + v27;
        }
        else {
          uint64_t v22 = 1.59271755e13;
        }
        char v26 = fmax(v22, -2.11845067e11);
        uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
        if ((v29 & 1) == 0)
        {
          double v23 = v20 + 1;
          double v6 = v28 + v27;
          if (v23 == 2) {
            goto LABEL_31;
          }
          uint64_t v30 = 9;
          if (v6 <= 1.59271755e13) {
            uint64_t v24 = v28 + v27;
          }
          else {
            uint64_t v24 = 1.59271755e13;
          }
          char v26 = fmax(v24, -2.11845067e11);
          uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
          if ((v29 & 1) == 0)
          {
            double v6 = v28 + v27;
            if (v23 == 3) {
              goto LABEL_31;
            }
            uint64_t v30 = 9;
            if (v6 <= 1.59271755e13) {
              uint64_t v25 = v28 + v27;
            }
            else {
              uint64_t v25 = 1.59271755e13;
            }
            char v26 = fmax(v25, -2.11845067e11);
            uint64_t result = (double *)v13(&v27, &v30, &v26, ObjectType, v9);
            if ((v29 & 1) == 0)
            {
              double v6 = v28 + v27;
              goto LABEL_31;
            }
          }
        }
      }
    }
LABEL_54:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    double v15 = 9;
    goto LABEL_55;
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  double v15 = 1;
LABEL_55:
  *(void *)unsigned __int8 v14 = v15;
  *(double *)(v14 + 8) = v6;
  *(unsigned char *)(v14 + 16) = 0;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingMonth(startingAt:components:direction:strictMatching:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, void *);
  BOOL v14;
  char v15;
  double v16;
  double v17;
  void (*v18)(double *__return_ptr, void *, double *, uint64_t, void *);
  uint64_t v19;
  double v20;
  double v21;
  void (*v22)(double *__return_ptr, uint64_t *, void *, uint64_t, void *);
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void (*v28)(double *__return_ptr, void *, uint64_t *, uint64_t, void *);
  double v29;
  unint64_t v30;
  double v31;
  double v32;
  BOOL v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;
  uint64_t v40;
  void (*v41)(double *__return_ptr, void *, double *, uint64_t, void *);
  void (*v44)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, void *);
  uint64_t v45;
  double v46;
  void v47[36];
  uint64_t v48;
  uint64_t v49;
  double v50[36];
  double v51[36];
  void __dst[36];
  uint64_t v53;
  uint64_t __src[37];

  if (*(unsigned char *)(a2 + 72))
  {
    *(void *)a5 = 0;
    *(unsigned char *)(a5 + 8) = 1;
    return result;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 64);
  int v8 = *a3;
  uint64_t v9 = *(void **)(v5 + 8);
  int v10 = *(unsigned __int8 *)(a2 + 281);
  uint64_t ObjectType = swift_getObjectType();
  double v12 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v9[3];
  swift_unknownObjectRetain();
  v12(__src, ObjectType, v9);
  swift_unknownObjectRelease();
  unsigned __int8 v14 = LOBYTE(__src[0]) != 2 || v10 == 2;
  double v15 = (v10 & 1) == 0 || v14;
  uint64_t v53 = 4;
  if (v6 <= 1.59271755e13) {
    uint64_t v16 = v6;
  }
  else {
    uint64_t v16 = 1.59271755e13;
  }
  double v17 = fmax(v16, -2.11845067e11);
  v51[0] = v17;
  uint64_t v44 = (void (*)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, void *))v9[24];
  v44(__src, &v53, v51, ObjectType, v9);
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[9] & 1) == 0)
  {
    if (v7 != __dst[8]) {
      goto LABEL_17;
    }
LABEL_22:
    if (v15 & 1 | ((a4 & 1) == 0)) {
      goto LABEL_90;
    }
    goto LABEL_23;
  }
  if (!v7) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v45 = v7;
  double v18 = (void (*)(double *__return_ptr, void *, double *, uint64_t, void *))v9[20];
  LOBYTE(v47[0]) = 2;
  v50[0] = v17;
  v18(v51, v47, v50, ObjectType, v9);
  if (LOBYTE(v51[2]))
  {
LABEL_18:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)double v19 = 2;
    *(double *)(v19 + 8) = v6;
    goto LABEL_19;
  }
  uint64_t v41 = v18;
  while (1)
  {
    uint64_t v24 = v6;
    uint64_t v25 = v51[1];
    char v26 = v51[0];
    if (!v8)
    {
      double v28 = (void (*)(double *__return_ptr, void *, uint64_t *, uint64_t, void *))v44;
      goto LABEL_51;
    }
    v47[0] = 4;
    if (v51[0] <= 1.59271755e13) {
      uint64_t v27 = v51[0];
    }
    else {
      uint64_t v27 = 1.59271755e13;
    }
    v50[0] = fmax(v27, -2.11845067e11);
    double v28 = (void (*)(double *__return_ptr, void *, uint64_t *, uint64_t, void *))v44;
    v44((uint64_t *)v51, v47, v50, ObjectType, v9);
    memcpy(v50, v51, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v50);
    if ((LOBYTE(v50[9]) & 1) != 0 || *(void *)&v50[8] != 3) {
      goto LABEL_48;
    }
    swift_unknownObjectRetain();
    v12(&v49, ObjectType, v9);
    swift_unknownObjectRelease();
    if ((_BYTE)v49)
    {
      swift_unknownObjectRetain();
      v12(&v49, ObjectType, v9);
      swift_unknownObjectRelease();
      if (v49 != 1)
      {
        swift_unknownObjectRetain();
        v12(&v49, ObjectType, v9);
        swift_unknownObjectRelease();
        if (v49 != 11)
        {
          swift_unknownObjectRetain();
          v12(&v49, ObjectType, v9);
          swift_unknownObjectRelease();
          if (v49 != 7)
          {
            swift_unknownObjectRetain();
            v12(&v49, ObjectType, v9);
            swift_unknownObjectRelease();
            double v18 = v41;
            if (v49 == 13) {
              *(double *)&uint64_t v30 = -259200.0;
            }
            else {
LABEL_48:
            }
              *(double *)&uint64_t v30 = -86400.0;
            double v29 = *(double *)&v30;
            goto LABEL_50;
          }
        }
      }
    }
    double v29 = -259200.0;
    double v18 = v41;
LABEL_50:
    uint64_t v25 = -(v25 + v29);
LABEL_51:
    double v6 = v26 + v25;
    v47[0] = 4;
    double v31 = v6 <= 1.59271755e13 ? v6 : 1.59271755e13;
    uint64_t v32 = fmax(v31, -2.11845067e11);
    uint64_t v49 = *(void *)&v32;
    v28(v51, v47, &v49, ObjectType, v9);
    memcpy(v50, v51, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v50);
    if (LOBYTE(v50[9]) == 1) {
      break;
    }
    uint64_t v33 = v24 >= v6;
    if (v8) {
      uint64_t v33 = v6 >= v24;
    }
    if (v33)
    {
LABEL_63:
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)uint64_t v34 = v6;
      *(double *)(v34 + 8) = v24;
      *(unsigned char *)(v34 + 16) = 1;
      return (double *)swift_willThrow();
    }
    uint64_t v7 = v45;
    if (v45 == *(void *)&v50[8]) {
      goto LABEL_89;
    }
LABEL_33:
    LOBYTE(v47[0]) = 2;
    v50[0] = v32;
    v18(v51, v47, v50, ObjectType, v9);
    if (LOBYTE(v51[2]) == 1) {
      goto LABEL_18;
    }
  }
  if (v8)
  {
    if (v6 >= v24) {
      goto LABEL_63;
    }
  }
  else if (v24 >= v6)
  {
    goto LABEL_63;
  }
  if (v45) {
    goto LABEL_33;
  }
  uint64_t v7 = 0;
LABEL_89:
  if (v15 & 1 | ((a4 & 1) == 0))
  {
LABEL_90:
    double v23 = v6;
    goto LABEL_91;
  }
LABEL_23:
  uint64_t v49 = 4;
  if (v6 <= 1.59271755e13) {
    uint64_t v20 = v6;
  }
  else {
    uint64_t v20 = 1.59271755e13;
  }
  BOOL v21 = fmax(v20, -2.11845067e11);
  v50[0] = v21;
  v44((uint64_t *)v51, &v49, v50, ObjectType, v9);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v51);
  if (BYTE1(v51[35])) {
    goto LABEL_90;
  }
  uint64_t v22 = (void (*)(double *__return_ptr, uint64_t *, void *, uint64_t, void *))v9[20];
  LOBYTE(v48) = 2;
  *(double *)uint64_t v47 = v21;
  v22(v50, &v48, v47, ObjectType, v9);
  if (LOBYTE(v50[2]))
  {
    double v23 = v6;
LABEL_29:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)double v19 = 2;
    *(double *)(v19 + 8) = v23;
LABEL_19:
    *(unsigned char *)(v19 + 16) = 0;
    return (double *)swift_willThrow();
  }
  while (2)
  {
    double v35 = v50[1];
    if (v8)
    {
      if (v50[1] / 86400.0 > 30.0)
      {
        double v36 = -172800.0;
        goto LABEL_71;
      }
      if (v50[1] / 86400.0 > 28.0)
      {
        double v36 = -86400.0;
LABEL_71:
        double v35 = v50[1] + v36;
      }
      double v35 = -v35;
    }
    double v23 = v50[0] + v35;
    uint64_t v48 = 4;
    if (v50[0] + v35 <= 1.59271755e13) {
      uint64_t v37 = v50[0] + v35;
    }
    else {
      uint64_t v37 = 1.59271755e13;
    }
    double v38 = fmax(v37, -2.11845067e11);
    uint64_t v46 = v38;
    v44((uint64_t *)v50, &v48, &v46, ObjectType, v9);
    memcpy(v47, v50, 0x11AuLL);
    if (LOBYTE(v47[9]) != 1)
    {
      if (v47[8] == v7) {
        goto LABEL_80;
      }
      goto LABEL_81;
    }
    if (v7 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_81;
    }
LABEL_80:
    if ((v47[35] & 0x100) == 0)
    {
LABEL_81:
      if (v6 < v23) {
        double v39 = 1;
      }
      else {
        double v39 = v8;
      }
      if (v39 != 1 || (v8 & 1) != 0 && v23 >= v6)
      {
        lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
        swift_allocError();
        *(double *)double v40 = v23;
        *(double *)(v40 + 8) = v6;
        *(unsigned char *)(v40 + 16) = 1;
        swift_willThrow();
        return (double *)outlined release of DateComponents((uint64_t)v47);
      }
      outlined release of DateComponents((uint64_t)v47);
      LOBYTE(v48) = 2;
      *(double *)uint64_t v47 = v38;
      v22(v50, &v48, v47, ObjectType, v9);
      double v6 = v23;
      if (LOBYTE(v50[2]) == 1) {
        goto LABEL_29;
      }
      continue;
    }
    break;
  }
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v47);
LABEL_91:
  *(double *)a5 = v23;
  *(unsigned char *)(a5 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingYear(startingAt:components:direction:)@<X0>(double *result@<X0>, long long *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = *((unsigned char *)a2 + 56);
  if (v6)
  {
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  uint64_t v8 = *((void *)a2 + 6);
  int v29 = *a3;
  uint64_t v10 = *v4;
  uint64_t v9 = v4[1];
  double v11 = *result;
  uint64_t v12 = qword_18218B7E8[byte_1ECA4BA71] | qword_18218B7E8[byte_1ECA4BA70];
  __dst[0] = v12;
  if (v11 > 1.59271755e13) {
    double v11 = 1.59271755e13;
  }
  *(void *)&long long v31 = fmax(v11, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t *, long long *))(v9 + 192))(__src, __dst, &v31);
  if ((v12 & 0x4000) != 0)
  {
    __src[0] = v10;
    __src[1] = v9;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (__src[2])
    {
      __dst[0] = __src[2];
      __dst[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(__dst);
    }
  }
  memcpy(__dst, __src, 0x11AuLL);
  if ((__dst[7] & 1) != 0 || v8 == __dst[6])
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(void *)a4 = 0;
LABEL_10:
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  uint64_t v13 = v8;
  *(void *)&long long v31 = v10;
  *((void *)&v31 + 1) = v9;
  if (LOBYTE(__dst[5])) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = __dst[4];
  }
  Calendar.dateIfEraHasYear(era:year:)(v14, v8, (uint64_t)&v51);
  double v15 = v51;
  if (v52)
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v15;
    goto LABEL_10;
  }
  long long v16 = a2[1];
  long long v31 = *a2;
  long long v32 = v16;
  long long v33 = a2[2];
  long long v17 = *(long long *)((char *)a2 + 249);
  long long v49 = *(long long *)((char *)a2 + 265);
  long long v18 = *(long long *)((char *)a2 + 217);
  long long v47 = *(long long *)((char *)a2 + 233);
  long long v48 = v17;
  long long v19 = *(long long *)((char *)a2 + 153);
  long long v43 = *(long long *)((char *)a2 + 169);
  long long v20 = *(long long *)((char *)a2 + 201);
  long long v44 = *(long long *)((char *)a2 + 185);
  long long v45 = v20;
  long long v46 = v18;
  long long v21 = *(long long *)((char *)a2 + 89);
  long long v39 = *(long long *)((char *)a2 + 105);
  long long v22 = *(long long *)((char *)a2 + 137);
  long long v40 = *(long long *)((char *)a2 + 121);
  long long v41 = v22;
  long long v42 = v19;
  long long v23 = *(long long *)((char *)a2 + 73);
  long long v36 = *(long long *)((char *)a2 + 57);
  long long v37 = v23;
  uint64_t v34 = v13;
  char v35 = v6;
  char v50 = *((unsigned char *)a2 + 281);
  long long v38 = v21;
  DateComponents.setUnits.getter((uint64_t *)&v51);
  int v24 = v29;
  if ((*(void *)&v51 & (*(void *)&v51 - 1)) == 0) {
    int v24 = 0;
  }
  if (v24 == 1)
  {
    char v30 = 1;
    if (v15 <= 1.59271755e13) {
      double v25 = v15;
    }
    else {
      double v25 = 1.59271755e13;
    }
    double v51 = fmax(v25, -2.11845067e11);
    (*(void (**)(long long *__return_ptr, char *, double *, uint64_t, uint64_t))(v9 + 160))(&v31, &v30, &v51, ObjectType, v9);
    if (v32)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(void *)uint64_t v26 = 1;
      *(double *)(v26 + 8) = v15;
      *(unsigned char *)(v26 + 16) = 0;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)__dst);
    }
    double v27 = *((double *)&v31 + 1);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v27 + -1.0 + v15;
  }
  else
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v15;
  }
  *(unsigned char *)(a4 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingEra(startingAt:components:direction:matchedEra:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t);
  double v17;
  double v18;
  unsigned char *v19;
  double v20;
  uint64_t __dst[36];
  uint64_t v22;
  char v23;
  long long __src[18];
  _OWORD v25[6];
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  void v42[4];
  uint64_t v43;
  char v44;
  uint64_t v45[3];

  if (*(unsigned char *)(a2 + 40)) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = *a3;
  uint64_t v10 = *(void *)(v5 + 8);
  double v11 = *result;
  v45[0] = 1;
  if (v11 > 1.59271755e13) {
    double v11 = 1.59271755e13;
  }
  double v12 = fmax(v11, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)double v25 = v12;
  uint64_t v14 = *(void (**)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v10 + 192);
  v14(v42, v45, (double *)v25, ObjectType, v10);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v42);
  if (v44)
  {
    if (!v8)
    {
LABEL_10:
      *(void *)a5 = 0;
      *(unsigned char *)(a5 + 8) = 1;
      return result;
    }
    if (v9)
    {
      if (v8 > 0)
      {
LABEL_8:
        *a4 = 0;
        goto LABEL_10;
      }
    }
    else if (v8 < 0)
    {
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == v43) {
      goto LABEL_10;
    }
    if (v9)
    {
      if (v43 < v8) {
        goto LABEL_8;
      }
    }
    else if (v8 < v43)
    {
      goto LABEL_8;
    }
  }
  __src[0] = 0uLL;
  __dst[0] = 0;
  __dst[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, __dst, 0, 1, 0, 1, 0, 1, (uint64_t)v25, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    double v15 = 0;
  }
  else {
    double v15 = v8;
  }
  __src[0] = v25[0];
  __src[1] = v25[1];
  *(void *)&__src[2] = v15;
  BYTE8(__src[2]) = v8 == 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&__src[3] = 1;
  BYTE8(__src[3]) = 0;
  *(void *)&__src[4] = 1;
  BYTE8(__src[4]) = 0;
  *(void *)&__src[5] = 1;
  BYTE8(__src[5]) = 0;
  *(void *)&__src[6] = v26;
  BYTE8(__src[6]) = v27;
  *(void *)&__src[7] = 0;
  BYTE8(__src[7]) = 0;
  *(void *)&__src[8] = 0;
  BYTE8(__src[8]) = 0;
  *(void *)&__src[9] = 0;
  BYTE8(__src[9]) = 0;
  *(void *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
  *(void *)&__src[11] = v28;
  BYTE8(__src[11]) = v29;
  *(void *)&__src[12] = v30;
  BYTE8(__src[12]) = v31;
  *(void *)&__src[13] = v32;
  BYTE8(__src[13]) = v33;
  *(void *)&__src[14] = v34;
  BYTE8(__src[14]) = v35;
  *(void *)&__src[15] = v36;
  BYTE8(__src[15]) = v37;
  BYTE8(__src[16]) = v39;
  *(void *)&__src[16] = v38;
  *(void *)&__src[17] = v40;
  WORD4(__src[17]) = v41;
  memcpy(__dst, __src, 0x11AuLL);
  long long v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v10 + 176);
  outlined retain of DateComponents((uint64_t)__src);
  v16(&v22, __dst, ObjectType, v10);
  outlined release of DateComponents((uint64_t)__src);
  long long v17 = *(double *)&v22;
  if (v23)
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__src);
    *a4 = 0;
    *(double *)a5 = v17;
    *(unsigned char *)(a5 + 8) = 1;
    return result;
  }
  long long v18 = *(double *)&v22;
  long long v22 = 1;
  if (v17 > 1.59271755e13) {
    long long v18 = 1.59271755e13;
  }
  long long v20 = fmax(v18, -2.11845067e11);
  v14(__dst, &v22, &v20, ObjectType, v10);
  outlined release of DateComponents((uint64_t)__dst);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)__src);
  if ((__dst[5] & 1) == 0)
  {
    long long v19 = a4;
    if (__dst[4] == v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  long long v19 = a4;
  if (v8) {
LABEL_24:
  }
    *long long v19 = 0;
LABEL_25:
  *(double *)a5 = v17;
  *(unsigned char *)(a5 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingDay(startingAt:originalStartDate:components:direction:)@<X0>(double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  void (*v14)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(double *__return_ptr, void *, double *, uint64_t, uint64_t);
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  void (*v23)(double *__return_ptr, void *, void *, uint64_t, uint64_t);
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  double v39;
  void v40[36];
  uint64_t v41;
  void v42[36];
  void v43[36];
  uint64_t v44;
  double v45[36];
  double v46[2];
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  void __dst[36];
  uint64_t v54;
  void __src[37];

  if (*(unsigned char *)(a3 + 88))
  {
    *(void *)a5 = 0;
    *(unsigned char *)(a5 + 8) = 1;
  }
  else
  {
    double v6 = *result;
    double v7 = *a2;
    long long v38 = *(void *)(a3 + 80);
    int v8 = *a4;
    uint64_t v9 = *(void *)(v5 + 8);
    char v10 = *(unsigned char *)(a3 + 72);
    uint64_t v54 = 8;
    if (v6 <= 1.59271755e13) {
      double v11 = v6;
    }
    else {
      double v11 = 1.59271755e13;
    }
    double v12 = fmax(v11, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    v46[0] = v12;
    uint64_t v14 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
    v14((double *)__src, &v54, v46, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    if (LOBYTE(__dst[11])) {
      double v15 = 0;
    }
    else {
      double v15 = __dst[10];
    }
    if ((v10 & 1) == 0 && ((v8 ^ 1) & 1) == 0)
    {
      LOBYTE(v43[0]) = 2;
      v45[0] = v12;
      long long v16 = *(void (**)(double *__return_ptr, void *, double *, uint64_t, uint64_t))(v9 + 160);
      v16(v46, v43, v45, ObjectType, v9);
      if ((v47 & 1) == 0)
      {
        long long v17 = v46[1] + v46[0] + -1.0;
        if (v7 >= v17)
        {
          LOBYTE(v43[0]) = 3;
          if (v17 > 1.59271755e13) {
            long long v17 = 1.59271755e13;
          }
          v45[0] = fmax(v17, -2.11845067e11);
          v16(v46, v43, v45, ObjectType, v9);
          if ((v47 & 1) == 0)
          {
            double v6 = v46[0];
            *(void *)&v45[0] = 8;
            if (v46[0] <= 1.59271755e13) {
              long long v18 = v46[0];
            }
            else {
              long long v18 = 1.59271755e13;
            }
            v43[0] = fmax(v18, -2.11845067e11);
            v14(v46, (uint64_t *)v45, (double *)v43, ObjectType, v9);
            outlined release of DateComponents((uint64_t)v46);
            if (v51) {
              double v15 = 0;
            }
            else {
              double v15 = v50;
            }
          }
        }
        else
        {
          double v6 = v7;
        }
      }
    }
    if (v6 <= 1.59271755e13) {
      long long v19 = v6;
    }
    else {
      long long v19 = 1.59271755e13;
    }
    long long v20 = fmax(v19, -2.11845067e11);
    if (v38 == v15)
    {
      LOBYTE(v43[0]) = 3;
      v45[0] = v20;
      uint64_t result = (double *)(*(void *(**)(double *__return_ptr, void *, double *, uint64_t, uint64_t))(v9 + 160))(v46, v43, v45, ObjectType, v9);
      if (v47) {
        long long v21 = v6;
      }
      else {
        long long v21 = v46[0];
      }
LABEL_68:
      *(double *)a5 = v21;
      *(unsigned char *)(a5 + 8) = 0;
    }
    else
    {
      char v52 = 4;
      v45[0] = v20;
      v14(v46, &v52, v45, ObjectType, v9);
      outlined release of DateComponents((uint64_t)v46);
      long long v22 = v48;
      if (v49) {
        long long v22 = 0;
      }
      long long v37 = v22;
      long long v23 = *(void (**)(double *__return_ptr, void *, void *, uint64_t, uint64_t))(v9 + 160);
      LOBYTE(v42[0]) = 3;
      *(double *)long long v43 = v20;
      v23(v45, v42, v43, ObjectType, v9);
      if (LOBYTE(v45[2]))
      {
        long long v21 = v6;
LABEL_33:
        lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
        swift_allocError();
        *(void *)int v24 = 3;
        *(double *)(v24 + 8) = v21;
        *(unsigned char *)(v24 + 16) = 0;
        return (double *)swift_willThrow();
      }
      else
      {
        while (1)
        {
          double v25 = v45[1];
          uint64_t v26 = v45[0];
          if (v8)
          {
            double v27 = v45[0] + -1.0;
            LOBYTE(v42[0]) = 3;
            if (v45[0] + -1.0 > 1.59271755e13) {
              double v27 = 1.59271755e13;
            }
            v43[0] = fmax(v27, -2.11845067e11);
            v23(v45, v42, v43, ObjectType, v9);
            long long v21 = (LOBYTE(v45[2]) & 1) != 0 ? v26 - v25 : v45[0];
          }
          else
          {
            long long v21 = v45[1] + v45[0];
          }
          long long v44 = 8;
          double v28 = v21 <= 1.59271755e13 ? v21 : 1.59271755e13;
          int v29 = fmax(v28, -2.11845067e11);
          *(double *)long long v42 = v29;
          v14(v45, &v44, (double *)v42, ObjectType, v9);
          memcpy(v43, v45, 0x11AuLL);
          outlined release of DateComponents((uint64_t)v43);
          char v30 = LOBYTE(v43[11]) ? 0 : v43[10];
          long long v41 = 4;
          long long v39 = v29;
          v14((double *)v42, &v41, &v39, ObjectType, v9);
          memcpy(v40, v42, 0x11AuLL);
          uint64_t result = (double *)outlined release of DateComponents((uint64_t)v40);
          if (LOBYTE(v40[9]) == 1)
          {
            if (v8)
            {
              if (v21 >= v6) {
                goto LABEL_66;
              }
            }
            else if (v6 >= v21)
            {
              goto LABEL_66;
            }
            long long v32 = 0;
          }
          else
          {
            long long v31 = v6 >= v21;
            if (v8) {
              long long v31 = v21 >= v6;
            }
            if (v31)
            {
LABEL_66:
              lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
              swift_allocError();
              *(double *)char v35 = v21;
              *(double *)(v35 + 8) = v6;
              *(unsigned char *)(v35 + 16) = 1;
              return (double *)swift_willThrow();
            }
            long long v32 = v40[8];
          }
          long long v33 = __OFSUB__(v32, v37);
          uint64_t v34 = v32 - v37;
          if (v33) {
            break;
          }
          if (v34 < 0)
          {
            long long v33 = __OFSUB__(0, v34);
            uint64_t v34 = -v34;
            if (v33) {
              goto LABEL_70;
            }
          }
          if (v34 >= 2)
          {
            long long v21 = v21 - v25;
            goto LABEL_68;
          }
          if (v38 == v30) {
            goto LABEL_68;
          }
          LOBYTE(v42[0]) = 3;
          *(double *)long long v43 = v29;
          v23(v45, v42, v43, ObjectType, v9);
          double v6 = v21;
          if (LOBYTE(v45[2])) {
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_70:
        __break(1u);
      }
    }
  }
  return result;
}

double *Calendar.dateAfterMatchingYearForWeekOfYear(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a2 + 280)) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(a2 + 272);
  int v19 = *a3;
  double v9 = *v4;
  double v8 = v4[1];
  double v10 = *result;
  uint64_t v11 = qword_18218B7E8[byte_1ECA4A9A9] | qword_18218B7E8[byte_1ECA4A9A8];
  __dst[0] = v11;
  if (v10 > 1.59271755e13) {
    double v10 = 1.59271755e13;
  }
  double v12 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v21 = v12;
  (*(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, double))(*(void *)&v8 + 192))(__src, __dst, &v21, ObjectType, COERCE_DOUBLE(*(void *)&v8));
  if ((v11 & 0x4000) != 0)
  {
    __src[0] = v9;
    __src[1] = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&__src[2])
    {
      *(double *)__unint64_t dst = __src[2];
      *(double *)&__dst[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(__dst);
    }
  }
  memcpy(__dst, __src, 0x11AuLL);
  if (LOBYTE(__dst[35]) == 1)
  {
    if (v7 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (__dst[34] == v7)
  {
LABEL_15:
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
LABEL_16:
    *(void *)a4 = 0;
LABEL_17:
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
LABEL_9:
  double v21 = v9;
  double v22 = v8;
  if (LOBYTE(__dst[5])) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = __dst[4];
  }
  Calendar.dateIfEraHasYearForWeekOfYear(era:yearForWeekOfYear:)(v14, v7, (uint64_t)&v24);
  if (v5) {
    return (double *)outlined release of DateComponents((uint64_t)__dst);
  }
  double v15 = v24;
  if (v25)
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v15;
    goto LABEL_17;
  }
  if (v19)
  {
    char v20 = 12;
    if (v24 <= 1.59271755e13) {
      double v16 = v24;
    }
    else {
      double v16 = 1.59271755e13;
    }
    double v24 = fmax(v16, -2.11845067e11);
    (*(void (**)(double *__return_ptr, char *, double *, uint64_t, double))(*(void *)&v8 + 160))(&v21, &v20, &v24, ObjectType, COERCE_DOUBLE(*(void *)&v8));
    if (v23)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(void *)uint64_t v17 = 12;
      *(double *)(v17 + 8) = v15;
      *(unsigned char *)(v17 + 16) = 0;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)__dst);
    }
    double v18 = v22;
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v18 + -1.0 + v15;
    *(unsigned char *)(a4 + 8) = 0;
  }
  else
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v15;
    *(unsigned char *)(a4 + 8) = 0;
  }
  return result;
}

double *Calendar.dateAfterMatchingNanosecond(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a2 + 168))
  {
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 160);
    uint64_t v6 = *v3;
    uint64_t v5 = v3[1];
    double v7 = *result;
    uint64_t v8 = qword_18218B7E8[byte_1ECA4BAC1] | qword_18218B7E8[byte_1ECA4BAC0] | qword_18218B7E8[byte_1ECA4BAC2] | qword_18218B7E8[byte_1ECA4BAC3] | qword_18218B7E8[byte_1ECA4BAC4] | qword_18218B7E8[byte_1ECA4BAC5] | qword_18218B7E8[byte_1ECA4BAC6];
    __dst[0] = v8;
    if (v7 > 1.59271755e13) {
      double v7 = 1.59271755e13;
    }
    double v9 = fmax(v7, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    double v15 = v9;
    (*(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v5 + 192))(__src, __dst, &v15, ObjectType, v5);
    uint64_t v11 = __src[0];
    if ((v8 & 0x4000) != 0)
    {
      __src[0] = v6;
      __src[1] = v5;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (__src[2])
      {
        __dst[0] = __src[2];
        __dst[1] = __src[3];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter(__dst);
        uint64_t v11 = __src[0];
      }
      else
      {
        uint64_t v11 = v6;
      }
    }
    __src[0] = v11;
    if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v4;
    }
    __src[20] = v12;
    LOBYTE(__src[21]) = v4 == 0x7FFFFFFFFFFFFFFFLL;
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 176);
    outlined retain of DateComponents((uint64_t)__src);
    v13(__dst, ObjectType, v5);
    outlined release of DateComponents((uint64_t)__src);
    return (double *)outlined release of DateComponents((uint64_t)__src);
  }
  return result;
}

void DateComponents.date.getter(uint64_t a1@<X8>)
{
  void (*v8)(long long *__return_ptr, uint64_t, uint64_t);
  char v9;
  uint64_t v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  void (*v27)(long long *, uint64_t, uint64_t);
  void v28[2];
  long long v29;
  long long v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  _OWORD v47[3];

  uint64_t v2 = *v1;
  if (!*v1)
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return;
  }
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v5 = (long long *)(v1 + 4);
  uint64_t v6 = v1[3];
  if (v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v8(&v30, ObjectType, v4);
    swift_unknownObjectRelease();
    int v29 = v30;
    v28[0] = v3;
    v28[1] = v6;
    double v9 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v29, (uint64_t)v28);
    swift_unknownObjectRelease();
    if ((v9 & 1) == 0)
    {
      *(void *)&int v29 = v2;
      *((void *)&v29 + 1) = v4;
      *(void *)&char v30 = v3;
      *((void *)&v30 + 1) = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v30);
      double v18 = *((void *)&v29 + 1);
      int v19 = swift_getObjectType();
      *(void *)&char v30 = v2;
      *((void *)&v30 + 1) = v4;
      long long v31 = v3;
      long long v32 = v6;
      *(_OWORD *)((char *)v47 + 10) = *(long long *)((char *)v5 + 234);
      char v20 = v5[13];
      long long v45 = v5[12];
      long long v46 = v20;
      v47[0] = v5[14];
      double v21 = v5[9];
      long long v41 = v5[8];
      long long v42 = v21;
      double v22 = v5[11];
      long long v43 = v5[10];
      long long v44 = v22;
      char v23 = v5[5];
      long long v37 = v5[4];
      long long v38 = v23;
      double v24 = v5[7];
      long long v39 = v5[6];
      long long v40 = v24;
      char v25 = v5[1];
      long long v33 = *v5;
      uint64_t v34 = v25;
      uint64_t v26 = v5[3];
      char v35 = v5[2];
      long long v36 = v26;
      double v27 = *(void (**)(long long *, uint64_t, uint64_t))(v18 + 176);
      swift_unknownObjectRetain();
      v27(&v30, v19, v18);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      goto LABEL_9;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
  }
  double v10 = swift_getObjectType();
  *(void *)&char v30 = v2;
  *((void *)&v30 + 1) = v4;
  long long v31 = v3;
  long long v32 = v6;
  *(_OWORD *)((char *)v47 + 10) = *(long long *)((char *)v5 + 234);
  uint64_t v11 = v5[13];
  long long v45 = v5[12];
  long long v46 = v11;
  v47[0] = v5[14];
  uint64_t v12 = v5[9];
  long long v41 = v5[8];
  long long v42 = v12;
  uint64_t v13 = v5[11];
  long long v43 = v5[10];
  long long v44 = v13;
  uint64_t v14 = v5[5];
  long long v37 = v5[4];
  long long v38 = v14;
  double v15 = v5[7];
  long long v39 = v5[6];
  long long v40 = v15;
  double v16 = v5[1];
  long long v33 = *v5;
  uint64_t v34 = v16;
  uint64_t v17 = v5[3];
  char v35 = v5[2];
  long long v36 = v17;
  (*(void (**)(long long *, uint64_t, uint64_t))(v4 + 176))(&v30, v10, v4);
LABEL_9:
  swift_unknownObjectRelease();
}

uint64_t protocol witness for _CalendarProtocol.date(from:) in conformance _CalendarAutoupdating(const void *a1)
{
  return _CalendarAutoupdating.date(from:)(a1);
}

uint64_t _CalendarAutoupdating.date(from:)(const void *a1)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(__dst);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = __dst[1];
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, a1, 0x11AuLL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 176))(__dst, ObjectType, v3);

  return swift_unknownObjectRelease();
}

uint64_t Calendar.date(from:)(void *__src)
{
  memcpy(v5, __src, 0x11AuLL);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v2 + 176))(v5, ObjectType, v2);
}

uint64_t _NSSwiftCalendar._date(from:)(const void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 8;
  os_unfair_lock_lock(v3 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v4, &v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, a1, 0x11AuLL);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 176))(__dst, ObjectType, v6);

  return swift_unknownObjectRelease();
}

double *Calendar.dateAfterMatchingSecond(startingAt:originalStartDate:components:direction:)@<X0>(double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  void (*v17)(double *__return_ptr, uint64_t *, double *, uint64_t, void);
  void (*v18)(double *__return_ptr, uint64_t *, void *, uint64_t, void);
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  Foundation::Date v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  char v30;
  int v31;
  void (*v32)(double *__return_ptr, uint64_t *, void *, uint64_t, void);
  double v33;
  void v34[36];
  uint64_t v35;
  double v36[36];
  void v37[17];
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void v42[36];
  uint64_t v43;
  double v44[36];
  void __dst[36];
  void __src[37];
  uint64_t v47;

  if (*(unsigned char *)(a3 + 152))
  {
    *(void *)a5 = 0;
LABEL_3:
    *(unsigned char *)(a5 + 8) = 1;
    return result;
  }
  double v7 = v5;
  double v8 = *result;
  double v9 = *a2;
  uint64_t v10 = *(void *)(a3 + 128);
  uint64_t v11 = *(void *)(a3 + 144);
  char v30 = *(unsigned char *)(a3 + 136);
  long long v31 = *a4;
  double v12 = *v5;
  double v13 = v7[1];
  long long v47 = 64;
  if (v8 <= 1.59271755e13) {
    double v14 = v8;
  }
  else {
    double v14 = 1.59271755e13;
  }
  double v15 = fmax(v14, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v44[0] = v15;
  uint64_t v17 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, void))(*(void *)&v13 + 192);
  v17((double *)__src, &v47, v44, ObjectType, *(void *)&v13);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  if (__dst[19])
  {
    if (v11) {
      goto LABEL_9;
    }
  }
  else if (v11 != __dst[18])
  {
LABEL_9:
    double v18 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, void))(*(void *)&v13 + 160);
    LOBYTE(v37[0]) = 6;
    *(double *)long long v42 = v15;
    long long v32 = v18;
    v18(v44, v37, v42, ObjectType, *(void *)&v13);
    if (LOBYTE(v44[2]))
    {
      int v19 = v8;
LABEL_11:
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      double v21 = 6;
      goto LABEL_12;
    }
    while (1)
    {
      int v19 = v44[1] + v44[0];
      long long v43 = 64;
      if (v44[1] + v44[0] <= 1.59271755e13) {
        double v22 = v44[1] + v44[0];
      }
      else {
        double v22 = 1.59271755e13;
      }
      char v23 = fmax(v22, -2.11845067e11);
      *(double *)long long v37 = v23;
      v17(v44, &v43, (double *)v37, ObjectType, *(void *)&v13);
      memcpy(v42, v44, 0x11AuLL);
      uint64_t result = (double *)outlined release of DateComponents((uint64_t)v42);
      if (LOBYTE(v42[19]) == 1)
      {
        if (v19 == v8) {
          goto LABEL_71;
        }
        if (!v11)
        {
          if (v9 >= v19) {
            goto LABEL_70;
          }
          if (v31)
          {
            uint64_t v11 = 0;
            goto LABEL_36;
          }
LABEL_43:
          long long v41 = 32;
          v36[0] = v23;
          v17((double *)v37, &v41, v36, ObjectType, *(void *)&v13);
          uint64_t result = (double *)outlined release of DateComponents((uint64_t)v37);
          if (v30) {
            goto LABEL_70;
          }
          uint64_t v26 = v38 ? 0 : v37[16];
          if (v10 >= v26) {
            goto LABEL_70;
          }
          LOBYTE(v35) = 5;
          *(double *)uint64_t v34 = v23;
          v32(v36, &v35, v34, ObjectType, *(void *)&v13);
          if ((LOBYTE(v36[2]) & 1) == 0)
          {
            do
            {
              double v8 = v19;
              int v19 = v36[0] - v36[1];
              char v35 = 32;
              if (v36[0] - v36[1] <= 1.59271755e13) {
                double v27 = v36[0] - v36[1];
              }
              else {
                double v27 = 1.59271755e13;
              }
              double v28 = fmax(v27, -2.11845067e11);
              long long v33 = v28;
              v17(v36, &v35, &v33, ObjectType, *(void *)&v13);
              memcpy(v34, v36, 0x11AuLL);
              uint64_t result = (double *)outlined release of DateComponents((uint64_t)v34);
              if (LOBYTE(v34[17]) == 1)
              {
                if (v31)
                {
                  if (v19 >= v8) {
                    goto LABEL_71;
                  }
                }
                else if (v8 >= v19)
                {
                  goto LABEL_71;
                }
                if ((v10 & 0x8000000000000000) == 0) {
                  goto LABEL_70;
                }
              }
              else
              {
                if (v31)
                {
                  if (v19 >= v8) {
                    goto LABEL_71;
                  }
                }
                else if (v8 >= v19)
                {
                  goto LABEL_71;
                }
                if (v10 >= v34[16]) {
                  goto LABEL_70;
                }
              }
              LOBYTE(v35) = 5;
              *(double *)uint64_t v34 = v28;
              v32(v36, &v35, v34, ObjectType, *(void *)&v13);
            }
            while (LOBYTE(v36[2]) != 1);
          }
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          double v21 = 5;
LABEL_12:
          *(void *)char v20 = v21;
          *(double *)(v20 + 8) = v19;
LABEL_16:
          *(unsigned char *)(v20 + 16) = 0;
          return (double *)swift_willThrow();
        }
      }
      else
      {
        if (v19 == v8)
        {
LABEL_71:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)int v29 = v19;
          *(double *)(v29 + 8) = v8;
          *(unsigned char *)(v29 + 16) = 1;
          return (double *)swift_willThrow();
        }
        if (v11 == v42[18])
        {
          if (v9 >= v19) {
            goto LABEL_70;
          }
          if (!v31) {
            goto LABEL_43;
          }
LABEL_36:
          long long v41 = 64;
          if (v9 <= 1.59271755e13) {
            double v24 = v9;
          }
          else {
            double v24 = 1.59271755e13;
          }
          v36[0] = fmax(v24, -2.11845067e11);
          v17((double *)v37, &v41, v36, ObjectType, *(void *)&v13);
          uint64_t result = (double *)outlined release of DateComponents((uint64_t)v37);
          if (v40)
          {
            if (v11 <= 0) {
              goto LABEL_70;
            }
          }
          else if (v39 >= v11)
          {
            goto LABEL_70;
          }
          v36[0] = v12;
          v36[1] = v13;
          LOBYTE(v33) = 5;
          char v35 = *(void *)&v19;
          *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v33, -1, v25, (Swift::Bool)&v35);
          if (v34[1])
          {
            *(void *)a5 = v34[0];
            goto LABEL_3;
          }
          int v19 = *(double *)v34;
          goto LABEL_70;
        }
      }
      LOBYTE(v37[0]) = 6;
      *(double *)long long v42 = v23;
      v32(v44, v37, v42, ObjectType, *(void *)&v13);
      double v8 = v19;
      if (LOBYTE(v44[2])) {
        goto LABEL_11;
      }
    }
  }
  LOBYTE(v37[0]) = 6;
  *(double *)long long v42 = v15;
  uint64_t result = (double *)(*(void *(**)(double *__return_ptr, void *, void *, uint64_t, double))(*(void *)&v13 + 160))(v44, v37, v42, ObjectType, COERCE_DOUBLE(*(void *)&v13));
  if (LOBYTE(v44[2]))
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)char v20 = 6;
    *(double *)(v20 + 8) = v8;
    goto LABEL_16;
  }
  int v19 = v44[0];
LABEL_70:
  *(double *)a5 = v19;
  *(unsigned char *)(a5 + 8) = 0;
  return result;
}

uint64_t destroy for SortDescriptor(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unsigned int v3 = *(unsigned __int8 *)(a1 + 120);
  if (v3 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    swift_release();
    swift_release();
    swift_release();
  }
  else if (v3 > 1)
  {
    return result;
  }

  return swift_release();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "NSArray * _Nonnull NSAllMapTableKeys(NSMapTable * _Nonnull)");
  }

  return (NSArray *)[(NSMapTable *)table allKeys];
}

ValueMetadata *type metadata accessor for IndexSet.RangeView()
{
  return &type metadata for IndexSet.RangeView;
}

uint64_t DateComponents.weekday.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t base witness table accessor for Cancellable in Notification.Subscription<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in Notification.Subscription<A>()
{
  return swift_getWitnessTable();
}

CFTypeRef _NSAttributedStringDescriptionWithLocaleFunc(void *a1, uint64_t a2)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    a1 = (void *)[a1 string];
  }

  return _NSDescriptionWithLocaleFunc(a1, a2);
}

ValueMetadata *type metadata accessor for AttributedString.UnicodeScalarView()
{
  return &type metadata for AttributedString.UnicodeScalarView;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance NSObject.KeyValueObservingPublisher<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NSObject.KeyValueObservingPublisher.receive<A>(subscriber:)(a1, a4, a2);
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance URL(void *a1, uint64_t a2)
{
  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(void *)a2 = v5;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

void partial apply for closure #1 in closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  closure #1 in closure #1 in NSURLSession.data(for:delegate:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, void, uint64_t))_PlistKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

id specialized static IndexPath._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of IndexPath?(*(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
  unint64_t v4 = (unint64_t)objc_msgSend(a1, sel_length);
  if (v4 == 2)
  {
    long long v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    char v10 = 1;
    id result = objc_msgSend(a1, sel_indexAtPosition_, 1);
    goto LABEL_9;
  }
  unint64_t v5 = v4;
  if (v4 == 1)
  {
    long long v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    id result = 0;
    char v10 = 0;
    goto LABEL_9;
  }
  if (!v4)
  {
    long long v6 = (void *)specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E4FBC860]);
    id result = v7;
    char v10 = v9;
LABEL_9:
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = result;
    *(unsigned char *)(a2 + 16) = v10;
    return result;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    long long v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v6[2] = v5;
    objc_msgSend(a1, sel_getIndexes_range_, v6 + 4, 0, v5);
    id result = 0;
    v6[2] = v5;
    char v10 = 2;
    goto LABEL_9;
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of IndexPath?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of IndexPath.Storage(a1, a2, a3);
  }
  return a1;
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerTimeType.Stride()
{
  return &type metadata for NSRunLoop.SchedulerTimeType.Stride;
}

uint64_t JSONDecoder.dataDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);

  return swift_release();
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.Unit()
{
  return &type metadata for Duration.UnitsFormatStyle.Unit;
}

void static MeasurementFormatUnitUsage.asProvided.getter(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance __PlistDictionaryDecoder()
{
  return swift_bridgeObjectRetain();
}

void URLRequest.url.getter(SEL *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = *(id *)(*(void *)v2 + 16);
  id v6 = [v5 *a1];
  if (v6)
  {
    double v7 = v6;
    URL.init(reference:)(v6, &v10);

    uint64_t v8 = v10;
    long long v9 = v11;
  }
  else
  {

    uint64_t v8 = 0;
    long long v9 = 0uLL;
  }
  *(void *)a2 = v8;
  *(_OWORD *)(a2 + 8) = v9;
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance URL()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result) {
    return Hasher._finalize()();
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    return Hasher._finalize()();
  }
  __break(1u);
  return result;
}

void NSKeyValueWillChangeForObservance(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  NSKeyValueWillChangeWithPerThreadPendingNotifications(a1, a2, a3, (void (*)(long long *__return_ptr, uint64_t, uint64_t, void, void, uint64_t, char *))NSKeyValueWillChangeBySetting, 0, a4);
}

void NSKeyValueDidChangeForObservance(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  NSKeyValueDidChangeWithPerThreadPendingNotifications(a1, a2, a3, (void (*)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _OWORD *))NSKeyValueDidChangeBySetting, a4);
}

void type metadata accessor for stat(uint64_t a1)
{
}

uint64_t _NSSwiftLocale.languageIdentifier.getter()
{
  void (*v3)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v1 + 352);
  swift_unknownObjectRetain();
  v3(v24, ObjectType, v1);
  swift_unknownObjectRelease();
  id v4 = *((void *)&v24[0] + 1);
  id v5 = v26;
  double v21 = *(void *)&v24[0];
  double v22 = v25;
  id v6 = v27;
  double v7 = v28;
  uint64_t v8 = v30;
  char v23 = v29;
  long long v9 = v31;
  uint64_t v10 = v32;
  if (*((void *)&v24[0] + 1)) {
    String.append(_:)((Swift::String)v24[1]);
  }
  if (v5)
  {
    v11._uint64_t countAndFlagsBits = 45;
    v11._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = v6;
    v12._unint64_t object = v7;
    String.append(_:)(v12);
  }
  if (v8)
  {
    v13._uint64_t countAndFlagsBits = 95;
    v13._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = v9;
    v14._unint64_t object = v10;
    String.append(_:)(v14);
  }
  outlined consume of Locale.LanguageCode?(v21, v4);
  outlined consume of Locale.LanguageCode?(v22, v5);
  double v15 = outlined consume of Locale.LanguageCode?(v23, v8);
  if (one-time initialization token for cache != -1) {
    double v15 = swift_once();
  }
  double v16 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v15);
  swift_retain_n();
  os_unfair_lock_lock(v16 + 31);
  partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v16[4], v24);
  os_unfair_lock_unlock(v16 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v17 = *((void *)&v24[0] + 1);
  double v18 = swift_getObjectType();
  LOBYTE(v24[0]) = 1;
  int v19 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 416))(v24, v18, v17);
  swift_unknownObjectRelease();
  return v19;
}

double Calendar.init(identifier:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  uint64_t v3 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 15);
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v3[4], &v5);
  os_unfair_lock_unlock(v3 + 15);
  swift_release_n();
  double result = *(double *)&v5;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.identifier(_:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifier(_:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.identifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.identifier(_:)(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in _LocaleICU.identifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 464);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v10)
    {
      long long v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
      uint64_t v12 = v11[1];
      *a4 = *v11;
      a4[1] = v12;
      return swift_bridgeObjectRetain();
    }
  }
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v83 = a4;
  if ((_BYTE)a2)
  {
    if (a2 != 1)
    {
      swift_bridgeObjectRetain();
      specialized _withFixedCharBuffer(size:_:)(257);
      uint64_t v18 = v19;
      swift_bridgeObjectRelease();
      if (v18)
      {
        lazy protocol witness table accessor for type String and conformance String();
        LOBYTE(v13) = lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
        swift_bridgeObjectRelease();
        uint64_t v17 = v79;
        uint64_t v18 = v82;
        if (v79 == 6581877 && v82 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
          swift_bridgeObjectRelease();
          uint64_t v17 = v79;
          uint64_t v18 = v82;
        }
        goto LABEL_15;
      }
LABEL_20:
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v81 = *(void *)(a1 + 464);
      uint64_t v17 = v81;
      *(void *)(a1 + 464) = 0x8000000000000000;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      uint64_t v31 = *(void *)(v81 + 16);
      BOOL v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (!__OFADD__(v31, v32))
      {
        char v34 = v29;
        if (*(void *)(v81 + 24) < v33)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
          uint64_t v35 = v81;
          uint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
          if ((v34 & 1) != (v37 & 1)) {
            goto LABEL_108;
          }
          unint64_t v30 = v36;
          long long v38 = v83;
          if ((v34 & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_30;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v35 = v81;
          long long v38 = v83;
          if ((v29 & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_30;
        }
        unint64_t v76 = v30;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
        uint64_t v58 = static _DictionaryStorage.copy(original:)();
        uint64_t v35 = v58;
        if (!*(void *)(v81 + 16)) {
          goto LABEL_100;
        }
        uint64_t v59 = (char *)(v58 + 64);
        __srca = (char *)(v81 + 64);
        unint64_t v60 = (unint64_t)((1 << *(unsigned char *)(v35 + 32)) + 63) >> 6;
        if (v35 != v81 || v59 >= &__srca[8 * v60]) {
          memmove(v59, __srca, 8 * v60);
        }
        int64_t v61 = 0;
        *(void *)(v35 + 16) = *(void *)(v81 + 16);
        uint64_t v62 = 1 << *(unsigned char *)(v81 + 32);
        uint64_t v63 = -1;
        if (v62 < 64) {
          uint64_t v63 = ~(-1 << v62);
        }
        unint64_t v64 = v63 & *(void *)(v81 + 64);
        int64_t v65 = (unint64_t)(v62 + 63) >> 6;
        while (1)
        {
          if (v64)
          {
            unint64_t v66 = __clz(__rbit64(v64));
            v64 &= v64 - 1;
            unint64_t v67 = v66 | (v61 << 6);
          }
          else
          {
            int64_t v72 = v61 + 1;
            if (__OFADD__(v61, 1))
            {
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            if (v72 >= v65) {
              goto LABEL_100;
            }
            unint64_t v73 = *(void *)&__srca[8 * v72];
            ++v61;
            if (!v73)
            {
              int64_t v61 = v72 + 1;
              if (v72 + 1 >= v65) {
                goto LABEL_100;
              }
              unint64_t v73 = *(void *)&__srca[8 * v61];
              if (!v73)
              {
                int64_t v61 = v72 + 2;
                if (v72 + 2 >= v65) {
                  goto LABEL_100;
                }
                unint64_t v73 = *(void *)&__srca[8 * v61];
                if (!v73)
                {
                  int64_t v61 = v72 + 3;
                  if (v72 + 3 >= v65) {
                    goto LABEL_100;
                  }
                  unint64_t v73 = *(void *)&__srca[8 * v61];
                  if (!v73)
                  {
                    int64_t v61 = v72 + 4;
                    if (v72 + 4 >= v65) {
                      goto LABEL_100;
                    }
                    unint64_t v73 = *(void *)&__srca[8 * v61];
                    if (!v73)
                    {
                      int64_t v61 = v72 + 5;
                      if (v72 + 5 >= v65) {
                        goto LABEL_100;
                      }
                      unint64_t v73 = *(void *)&__srca[8 * v61];
                      if (!v73)
                      {
                        int64_t v61 = v72 + 6;
                        if (v72 + 6 >= v65) {
                          goto LABEL_100;
                        }
                        unint64_t v73 = *(void *)&__srca[8 * v61];
                        if (!v73)
                        {
                          int64_t v74 = v72 + 7;
                          if (v74 >= v65) {
                            goto LABEL_100;
                          }
                          unint64_t v73 = *(void *)&__srca[8 * v74];
                          if (!v73)
                          {
                            while (1)
                            {
                              int64_t v61 = v74 + 1;
                              if (__OFADD__(v74, 1)) {
                                goto LABEL_107;
                              }
                              if (v61 >= v65) {
                                break;
                              }
                              unint64_t v73 = *(void *)&__srca[8 * v61];
                              ++v74;
                              if (v73) {
                                goto LABEL_99;
                              }
                            }
LABEL_100:
                            swift_bridgeObjectRelease();
                            long long v38 = v83;
                            unint64_t v30 = v76;
                            if ((v34 & 1) == 0)
                            {
LABEL_101:
                              specialized _NativeDictionary._insert(at:key:value:)(v30, a2, v14, v13, (void *)v35);
LABEL_102:
                              *(void *)(a1 + 464) = v35;
                              swift_bridgeObjectRelease();
                              *long long v38 = v14;
                              v38[1] = v13;
                              return swift_bridgeObjectRetain();
                            }
LABEL_30:
                            long long v40 = (uint64_t *)(*(void *)(v35 + 56) + 16 * v30);
                            swift_bridgeObjectRelease();
                            *long long v40 = v14;
                            v40[1] = v13;
                            goto LABEL_102;
                          }
                          int64_t v61 = v74;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_99:
            unint64_t v64 = (v73 - 1) & v73;
            unint64_t v67 = __clz(__rbit64(v73)) + (v61 << 6);
          }
          uint64_t v68 = (uint64_t *)(*(void *)(v81 + 56) + 16 * v67);
          uint64_t v70 = *v68;
          uint64_t v69 = v68[1];
          *(unsigned char *)(*(void *)(v35 + 48) + v67) = *(unsigned char *)(*(void *)(v81 + 48) + v67);
          uint64_t v71 = (void *)(*(void *)(v35 + 56) + 16 * v67);
          *uint64_t v71 = v70;
          v71[1] = v69;
          swift_bridgeObjectRetain();
        }
      }
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    uint64_t v15 = specialized _withFixedCharBuffer(size:_:)(257);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = specialized _withFixedCharBuffer(size:_:)(157, v14, v13);
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_20;
  }
LABEL_15:
  swift_bridgeObjectRetain();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v80 = *(void *)(a1 + 464);
  uint64_t isUniquelyReferenced_nonNull_native = v80;
  *(void *)(a1 + 464) = 0x8000000000000000;
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v23 = *(void *)(v80 + 16);
  BOOL v24 = (v22 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    LOBYTE(v13) = v22;
    if (*(void *)(v80 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
      uint64_t v26 = v80;
      uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v13 & 1) != (v28 & 1)) {
        goto LABEL_108;
      }
      uint64_t v14 = v27;
      if ((v13 & 1) == 0) {
        goto LABEL_66;
      }
LABEL_27:
      long long v39 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v14);
      swift_bridgeObjectRelease();
      *long long v39 = v17;
      v39[1] = v18;
LABEL_67:
      *(void *)(a1 + 464) = v26;
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v83 = v17;
      v83[1] = v18;
      return result;
    }
    if (v20)
    {
      uint64_t v26 = v80;
      if (v22) {
        goto LABEL_27;
      }
LABEL_66:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, v17, v18, (void *)v26);
      goto LABEL_67;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
  uint64_t v41 = static _DictionaryStorage.copy(original:)();
  uint64_t v26 = v41;
  if (!*(void *)(isUniquelyReferenced_nonNull_native + 16))
  {
LABEL_65:
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_27;
    }
    goto LABEL_66;
  }
  long long v42 = (char *)(v41 + 64);
  __src = (char *)(isUniquelyReferenced_nonNull_native + 64);
  unint64_t v43 = (unint64_t)((1 << *(unsigned char *)(v26 + 32)) + 63) >> 6;
  if (v26 != isUniquelyReferenced_nonNull_native || v42 >= &__src[8 * v43]) {
    memmove(v42, __src, 8 * v43);
  }
  int64_t v44 = 0;
  *(void *)(v26 + 16) = *(void *)(isUniquelyReferenced_nonNull_native + 16);
  uint64_t v45 = 1 << *(unsigned char *)(isUniquelyReferenced_nonNull_native + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & *(void *)(isUniquelyReferenced_nonNull_native + 64);
  int64_t v75 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    if (v47)
    {
      unint64_t v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      unint64_t v49 = v48 | (v44 << 6);
      goto LABEL_41;
    }
    int64_t v54 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_105;
    }
    if (v54 >= v75) {
      goto LABEL_65;
    }
    unint64_t v55 = *(void *)&__src[8 * v54];
    ++v44;
    if (!v55)
    {
      int64_t v44 = v54 + 1;
      if (v54 + 1 >= v75) {
        goto LABEL_65;
      }
      unint64_t v55 = *(void *)&__src[8 * v44];
      if (!v55)
      {
        int64_t v44 = v54 + 2;
        if (v54 + 2 >= v75) {
          goto LABEL_65;
        }
        unint64_t v55 = *(void *)&__src[8 * v44];
        if (!v55)
        {
          int64_t v44 = v54 + 3;
          if (v54 + 3 >= v75) {
            goto LABEL_65;
          }
          unint64_t v55 = *(void *)&__src[8 * v44];
          if (!v55)
          {
            int64_t v44 = v54 + 4;
            if (v54 + 4 >= v75) {
              goto LABEL_65;
            }
            unint64_t v55 = *(void *)&__src[8 * v44];
            if (!v55)
            {
              int64_t v44 = v54 + 5;
              if (v54 + 5 >= v75) {
                goto LABEL_65;
              }
              unint64_t v55 = *(void *)&__src[8 * v44];
              if (!v55)
              {
                int64_t v44 = v54 + 6;
                if (v54 + 6 >= v75) {
                  goto LABEL_65;
                }
                unint64_t v55 = *(void *)&__src[8 * v44];
                if (!v55) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_64:
    unint64_t v47 = (v55 - 1) & v55;
    unint64_t v49 = __clz(__rbit64(v55)) + (v44 << 6);
LABEL_41:
    char v50 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v49);
    uint64_t v52 = *v50;
    uint64_t v51 = v50[1];
    *(unsigned char *)(*(void *)(v26 + 48) + v49) = *(unsigned char *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + v49);
    uint64_t v53 = (void *)(*(void *)(v26 + 56) + 16 * v49);
    *uint64_t v53 = v52;
    v53[1] = v51;
    swift_bridgeObjectRetain();
  }
  int64_t v56 = v54 + 7;
  if (v56 >= v75) {
    goto LABEL_65;
  }
  unint64_t v55 = *(void *)&__src[8 * v56];
  if (v55)
  {
    int64_t v44 = v56;
    goto LABEL_64;
  }
  while (1)
  {
    int64_t v44 = v56 + 1;
    if (__OFADD__(v56, 1)) {
      break;
    }
    if (v44 >= v75) {
      goto LABEL_65;
    }
    unint64_t v55 = *(void *)&__src[8 * v44];
    ++v56;
    if (v55) {
      goto LABEL_64;
    }
  }
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id _NSSwiftCalendar.init(checkedCalendarIdentifier:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = static Calendar._fromNSCalendarIdentifier(_:)(a1, (char *)&v11);
  if (v11 == 16)
  {

    type metadata accessor for _NSSwiftCalendar();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    if (one-time initialization token for cache != -1) {
      uint64_t v4 = swift_once();
    }
    id v6 = (os_unfair_lock_s *)static CalendarCache.cache;
    MEMORY[0x1F4188790](v4);
    swift_retain_n();
    os_unfair_lock_lock(v6 + 15);
    closure #1 in CalendarCache.fixed(_:)partial apply((uint64_t)&v6[4], &v11);
    os_unfair_lock_unlock(v6 + 15);
    swift_release_n();
    long long v9 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
    uint64_t v7 = swift_allocObject();
    *(_DWORD *)(v7 + 32) = 0;
    *(_OWORD *)(v7 + 16) = v9;
    *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v7;

    v10.receiver = v3;
    v10.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
    id v5 = objc_msgSendSuper2(&v10, sel_initWithCheckedCalendarIdentifier_, a1);
  }
  return v5;
}

uint64_t closure #1 in CalendarCache.fixed(_:)partial apply@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return partial apply for closure #1 in CalendarCache.fixed(_:)(a1, a2);
}

uint64_t partial apply for closure #1 in CalendarCache.fixed(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #1 in CalendarCache.fixed(_:)(a1, *(unsigned __int8 *)(v2 + 16), a2);
}

uint64_t closure #1 in CalendarCache.fixed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  CalendarCache.State.check()();
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v9)
    {
      long long v47 = *(_OWORD *)(*(void *)(v7 + 56) + 16 * v8);
      uint64_t result = swift_unknownObjectRetain();
      long long v11 = v47;
LABEL_54:
      *a3 = v11;
      return result;
    }
  }
  unint64_t v48 = a3;
  if ((_BYTE)a2)
  {
    uint64_t v12 = type metadata accessor for _CalendarICU();
    uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
    uint64_t v14 = type metadata accessor for _CalendarICU;
  }
  else
  {
    uint64_t v12 = type metadata accessor for _CalendarGregorian();
    uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
    uint64_t v14 = type metadata accessor for _CalendarGregorian;
  }
  uint64_t v15 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(v13, (void (*)(uint64_t))v14);
  char v53 = a2;
  v52[0] = 0;
  v52[1] = 0;
  v51[0] = 0;
  v51[1] = 0;
  uint64_t v49 = 0;
  char v50 = 1;
  uint64_t v16 = (*(uint64_t (**)(char *, void *, void *, void, uint64_t, void, uint64_t, uint64_t *, uint64_t, uint64_t))(v15 + 16))(&v53, v52, v51, 0, 1, 0, 1, &v49, v12, v15);
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v52[0] = *(void *)(a1 + 24);
  uint64_t v18 = v52[0];
  *(void *)(a1 + 24) = 0x8000000000000000;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v21 = *(void *)(v18 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v3 = v19;
  if (*(void *)(v18 + 24) >= v23)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v24 = v18;
      if ((v19 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_unknownObjectRelease();
      *uint64_t v27 = v16;
      v27[1] = v15;
LABEL_53:
      *(void *)(a1 + 24) = v24;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)&long long v11 = v16;
      *((void *)&v11 + 1) = v15;
      a3 = v48;
      goto LABEL_54;
    }
LABEL_16:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, _CalendarProtocol>);
    uint64_t v28 = static _DictionaryStorage.copy(original:)();
    uint64_t v24 = v28;
    if (*(void *)(v18 + 16))
    {
      char v29 = (void *)(v28 + 64);
      unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
      __src = (void *)(v18 + 64);
      if (v24 != v18 || (unint64_t)v29 >= v18 + 64 + 8 * v30) {
        memmove(v29, __src, 8 * v30);
      }
      int64_t v31 = 0;
      *(void *)(v24 + 16) = *(void *)(v18 + 16);
      uint64_t v32 = 1 << *(unsigned char *)(v18 + 32);
      uint64_t v33 = -1;
      if (v32 < 64) {
        uint64_t v33 = ~(-1 << v32);
      }
      unint64_t v34 = v33 & *(void *)(v18 + 64);
      int64_t v46 = (unint64_t)(v32 + 63) >> 6;
      while (1)
      {
        if (v34)
        {
          unint64_t v35 = __clz(__rbit64(v34));
          v34 &= v34 - 1;
          unint64_t v36 = v35 | (v31 << 6);
        }
        else
        {
          int64_t v38 = v31 + 1;
          if (__OFADD__(v31, 1)) {
            goto LABEL_56;
          }
          if (v38 >= v46) {
            break;
          }
          unint64_t v39 = *((void *)__src + v38);
          ++v31;
          if (!v39)
          {
            int64_t v31 = v38 + 1;
            if (v38 + 1 >= v46) {
              break;
            }
            unint64_t v39 = *((void *)__src + v31);
            if (!v39)
            {
              int64_t v31 = v38 + 2;
              if (v38 + 2 >= v46) {
                break;
              }
              unint64_t v39 = *((void *)__src + v31);
              if (!v39)
              {
                int64_t v31 = v38 + 3;
                if (v38 + 3 >= v46) {
                  break;
                }
                unint64_t v39 = *((void *)__src + v31);
                if (!v39)
                {
                  int64_t v31 = v38 + 4;
                  if (v38 + 4 >= v46) {
                    break;
                  }
                  unint64_t v39 = *((void *)__src + v31);
                  if (!v39)
                  {
                    int64_t v31 = v38 + 5;
                    if (v38 + 5 >= v46) {
                      break;
                    }
                    unint64_t v39 = *((void *)__src + v31);
                    if (!v39)
                    {
                      int64_t v31 = v38 + 6;
                      if (v38 + 6 >= v46) {
                        break;
                      }
                      unint64_t v39 = *((void *)__src + v31);
                      if (!v39)
                      {
                        int64_t v31 = v38 + 7;
                        if (v38 + 7 >= v46) {
                          break;
                        }
                        unint64_t v39 = *((void *)__src + v31);
                        if (!v39)
                        {
                          int64_t v40 = v38 + 8;
                          if (v40 >= v46) {
                            break;
                          }
                          unint64_t v39 = *((void *)__src + v40);
                          if (!v39)
                          {
                            while (1)
                            {
                              int64_t v31 = v40 + 1;
                              if (__OFADD__(v40, 1)) {
                                goto LABEL_57;
                              }
                              if (v31 >= v46) {
                                goto LABEL_50;
                              }
                              unint64_t v39 = *((void *)__src + v31);
                              ++v40;
                              if (v39) {
                                goto LABEL_49;
                              }
                            }
                          }
                          int64_t v31 = v40;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_49:
          unint64_t v34 = (v39 - 1) & v39;
          unint64_t v36 = __clz(__rbit64(v39)) + (v31 << 6);
        }
        long long v37 = *(_OWORD *)(*(void *)(v18 + 56) + 16 * v36);
        *(unsigned char *)(*(void *)(v24 + 48) + v36) = *(unsigned char *)(*(void *)(v18 + 48) + v36);
        *(_OWORD *)(*(void *)(v24 + 56) + 16 * v36) = v37;
        swift_unknownObjectRetain();
      }
    }
LABEL_50:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_51;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
  uint64_t v24 = v52[0];
  uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v3 & 1) != (v26 & 1)) {
    goto LABEL_58;
  }
  unint64_t v20 = v25;
  if (v3) {
    goto LABEL_14;
  }
LABEL_51:
  *(void *)(v24 + 8 * (v20 >> 6) + 64) |= 1 << v20;
  *(unsigned char *)(*(void *)(v24 + 48) + v20) = a2;
  uint64_t v41 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
  *uint64_t v41 = v16;
  v41[1] = v15;
  uint64_t v42 = *(void *)(v24 + 16);
  BOOL v43 = __OFADD__(v42, 1);
  uint64_t v44 = v42 + 1;
  if (!v43)
  {
    *(void *)(v24 + 16) = v44;
    goto LABEL_53;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

__n128 LocalizedStringResource.init(stringInterpolation:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 2);
  long long v16 = *a1;
  uint64_t v17 = v3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v18 = static LocaleCache.cache;
  *(void *)&long long v15 = LocaleCache.current.getter();
  *((void *)&v15 + 1) = v4;
  memset(v13, 0, sizeof(v13));
  char v14 = 2;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)((uint64_t *)&v16, 0, 0, &v15, (uint64_t)v13, (uint64_t)&v18);
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  uint64_t v7 = v24;
  __n128 result = v19;
  long long v9 = v23;
  long long v10 = v22;
  long long v11 = v25;
  long long v12 = v26;
  *(void *)a2 = v18;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 40) = v10;
  *(_OWORD *)(a2 + 56) = v9;
  *(void *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 80) = v11;
  *(_OWORD *)(a2 + 96) = v12;
  return result;
}

void *closure #2 in LocaleCache.current.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  outlined retain of LocalePreferences((void *)a2);
  LocaleCache.State.resetCurrentIfNeeded()();
  if (*a1)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = *a1;
  }
  else
  {
    type metadata accessor for _LocaleICU();
    uint64_t v8 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
    long long v10 = *(_OWORD *)(a2 + 112);
    void v16[6] = *(_OWORD *)(a2 + 96);
    v17[0] = v10;
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a2 + 124);
    long long v11 = *(_OWORD *)(a2 + 48);
    _OWORD v16[2] = *(_OWORD *)(a2 + 32);
    v16[3] = v11;
    long long v12 = *(_OWORD *)(a2 + 80);
    v16[4] = *(_OWORD *)(a2 + 64);
    v16[5] = v12;
    long long v13 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v13;
    swift_allocObject();
    outlined retain of LocalePreferences((void *)a2);
    uint64_t v14 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0, 0, (uint64_t *)v16, 0);
    uint64_t v9 = v14;
    if (a3)
    {
      *a1 = v14;
      a1[1] = v8;
      swift_retain();
    }
  }
  swift_unknownObjectRetain();
  __n128 result = outlined release of LocalePreferences((void *)a2);
  *a4 = v9;
  a4[1] = v8;
  return result;
}

id closure #2 in LocaleCache.currentNSLocale()@<X0>(_OWORD *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  long long v5 = a1[7];
  v11[6] = a1[6];
  v12[0] = v5;
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)a1 + 124);
  long long v6 = a1[3];
  uint64_t v11[2] = a1[2];
  void v11[3] = v6;
  long long v7 = a1[5];
  v11[4] = a1[4];
  v11[5] = v7;
  long long v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  destructiveProjectEnumData for PredicateCodableError(v11, a1);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v10);
  id result = LocaleCache.State.currentNSLocale(preferences:cache:)((uint64_t)v10, a2);
  *a3 = result;
  return result;
}

id LocaleCache.State.currentNSLocale(preferences:cache:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  outlined init with take of LocalePreferences?(a1, (uint64_t)v32);
  LocaleCache.State.resetCurrentIfNeeded()();
  long long v5 = (void *)v2[6];
  id v6 = v5;
  if (!v5)
  {
    uint64_t v7 = *v2;
    if (*v3)
    {
      uint64_t v8 = v3[1];
      uint64_t v9 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      long long v10 = objc_allocWithZone(v9);
      uint64_t v11 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      long long v12 = (uint64_t *)&v10[OBJC_IVAR____NSSwiftLocale_locale];
      *long long v12 = v7;
      v12[1] = v8;
      v10[v11] = 2;
      uint64_t v13 = String._bridgeToObjectiveCImpl()();
      v24.receiver = v10;
      v24.super_class = v9;
      swift_unknownObjectRetain_n();
      id v6 = objc_msgSendSuper2(&v24, sel_initWithLocaleIdentifier_, v13);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v30);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v30) == 1)
      {
        id v6 = 0;
        goto LABEL_5;
      }
      v26[6] = v30[6];
      v27[0] = v31[0];
      *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)((char *)v31 + 12);
      v26[2] = v30[2];
      v26[3] = v30[3];
      v26[4] = v30[4];
      v26[5] = v30[5];
      v26[0] = v30[0];
      v26[1] = v30[1];
      type metadata accessor for _LocaleICU();
      swift_allocObject();
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v28);
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)&v29);
      outlined retain of LocalePreferences(&v29);
      outlined retain of LocalePreferences(v28);
      uint64_t v17 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0, 0, (uint64_t *)v26, 0);
      uint64_t v18 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
      __n128 v19 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      uint64_t v20 = objc_allocWithZone(v19);
      uint64_t v21 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      long long v22 = (uint64_t *)&v20[OBJC_IVAR____NSSwiftLocale_locale];
      uint64_t *v22 = v17;
      v22[1] = v18;
      v20[v21] = 2;
      uint64_t v23 = String._bridgeToObjectiveCImpl()();
      v25.receiver = v20;
      v25.super_class = v19;
      swift_retain();
      id v6 = objc_msgSendSuper2(&v25, sel_initWithLocaleIdentifier_, v23);
      swift_unknownObjectRelease();
      outlined retain of LocalePreferences?((uint64_t)v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if ((a2 & 1) == 0)
      {
        swift_release();
        goto LABEL_5;
      }
      *uint64_t v3 = v17;
      v3[1] = v18;
    }
    v3[6] = (uint64_t)v6;
    id v14 = v6;
  }
LABEL_5:
  id v15 = v5;
  return v6;
}

uint64_t Locale.Language.minimalIdentifier.getter(uint64_t (*a1)(uint64_t, void, unint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v4 = (void *)v2[3];
  uint64_t v6 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v7 = (void *)v2[7];
  uint64_t v10 = v2[8];
  uint64_t v9 = v2[9];
  uint64_t v11 = v2[10];
  long long v12 = (void *)v2[11];
  uint64_t v30 = v3;
  uint64_t v32 = v2[4];
  uint64_t v31 = *v2;
  uint64_t v13 = *v2;
  if (v3)
  {
    uint64_t v14 = v2[4];
    outlined copy of Locale.LanguageCode?(v13, v3);
    outlined copy of Locale.LanguageCode?(v14, v6);
    outlined copy of Locale.LanguageCode?(v10, v9);
    v15._uint64_t countAndFlagsBits = v5;
    v15._unint64_t object = v4;
    String.append(_:)(v15);
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v28 = v2[4];
  outlined copy of Locale.LanguageCode?(v13, 0);
  outlined copy of Locale.LanguageCode?(v28, v6);
  outlined copy of Locale.LanguageCode?(v10, v9);
  if (v6)
  {
LABEL_3:
    v16._uint64_t countAndFlagsBits = 45;
    v16._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = v8;
    v17._unint64_t object = v7;
    String.append(_:)(v17);
  }
LABEL_4:
  if (v9)
  {
    v18._uint64_t countAndFlagsBits = 95;
    v18._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = v11;
    v19._unint64_t object = v12;
    String.append(_:)(v19);
  }
  outlined consume of Locale.LanguageCode?(v31, v30);
  outlined consume of Locale.LanguageCode?(v32, v6);
  outlined consume of Locale.LanguageCode?(v10, v9);
  uint64_t v20 = 0;
  swift_bridgeObjectRetain();
  uint64_t v21 = a1(257, 0, 0xE000000000000000);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    uint64_t v24 = a2(257, v21, v23);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_bridgeObjectRelease();
      return v24;
    }
  }
  return v20;
}

uint64_t _LocaleICU.init(name:prefs:disableBundleMatching:)(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v173 = v7;
  uint64_t v174 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  id v172 = (char *)&v168 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  Swift::String v16 = (char *)&v168 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  Swift::String v19 = (char *)&v168 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v168 - v20;
  uint64_t v176 = *a3;
  uint64_t v22 = a3[1];
  uint64_t v23 = a3[2];
  unint64_t v24 = a3[3];
  long long v25 = *((_OWORD *)a3 + 5);
  long long v201 = *((_OWORD *)a3 + 4);
  long long v202 = v25;
  long long v203 = *((_OWORD *)a3 + 6);
  uint64_t v26 = a3[14];
  uint64_t v27 = a3[15];
  uint64_t v178 = v23;
  uint64_t v179 = v27;
  uint64_t v204 = v26;
  long long v28 = *((_OWORD *)a3 + 3);
  long long v199 = *((_OWORD *)a3 + 2);
  long long v200 = v28;
  uint64_t v181 = (void *)a3[16];
  uint64_t v182 = v22;
  int v175 = *((_DWORD *)a3 + 34);
  unint64_t v180 = v24;
  if (a2)
  {
    CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    CFStringRef v30 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v29, v30);
    swift_unknownObjectRelease();
    if (CanonicalLocaleIdentifierFromString)
    {
      id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v32 = 0;
      unint64_t v34 = 0xE000000000000000;
    }
    uint64_t v42 = v179;
    uint64_t v40 = v182;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    BOOL v43 = static _LocaleICU.log;
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      swift_bridgeObjectRetain_n();
      Locale.Components.init(identifier:)((uint64_t)v32, v34, &v184);
      if (*((void *)&v189 + 1))
      {
        swift_bridgeObjectRelease();
        outlined release of Locale.Components((uint64_t *)&v184);
      }
      else
      {
        unint64_t v67 = v43;
        Logger.init(_:)();
        swift_bridgeObjectRetain();
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          uint64_t v71 = swift_slowAlloc();
          *(void *)&v198[0] = v71;
          *(_DWORD *)uint64_t v70 = 136446210;
          id v172 = (char *)(v70 + 4);
          swift_bridgeObjectRetain();
          *(void *)&long long v196 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v32, v34, (uint64_t *)v198);
          uint64_t v42 = v179;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_181795000, v68, v69, "Current locale fetched with overriding locale identifier '%{public}s' which does not have a country code", v70, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x185309510](v71, -1, -1);
          MEMORY[0x185309510](v70, -1, -1);

          outlined release of Locale.Components((uint64_t *)&v184);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          outlined release of Locale.Components((uint64_t *)&v184);
        }
        (*(void (**)(char *, uint64_t))(v174 + 8))(v21, v173);
        uint64_t v40 = v182;
      }
    }
    CFStringRef v73 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    int64_t v74 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v29, v73);
    swift_unknownObjectRelease();
    if (v74)
    {
      uint64_t v75 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      unint64_t v77 = v76;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v75 = 0;
      unint64_t v77 = 0xE000000000000000;
    }
    uint64_t v78 = v178;
    unint64_t v41 = v180;
    goto LABEL_116;
  }
  unint64_t v35 = self;
  swift_bridgeObjectRetain();
  id v36 = objc_msgSend(v35, sel_mainBundle);
  id v37 = objc_msgSend(v36, sel__objectForUnlocalizedInfoDictionaryKey_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any?((uint64_t)&v184, (uint64_t)&v196);
  if (!v197)
  {
    outlined destroy of Any?((uint64_t)&v196, (uint64_t *)&demangling cache variable for type metadata for Any?);
    BOOL v39 = 0;
    uint64_t v40 = v182;
    unint64_t v41 = v180;
LABEL_32:
    unsigned __int8 v38 = a4;
    goto LABEL_33;
  }
  outlined init with take of Any(&v196, v198);
  outlined init with copy of Any((uint64_t)v198, (uint64_t)&v196);
  unsigned __int8 v38 = a4;
  if (swift_dynamicCast())
  {
    BOOL v39 = v183;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
LABEL_7:
    uint64_t v40 = v182;
    unint64_t v41 = v180;
    goto LABEL_33;
  }
  outlined init with copy of Any((uint64_t)v198, (uint64_t)&v196);
  if (swift_dynamicCast())
  {
    unint64_t v171 = (unint64_t)v35;
    long long v169 = v183;
    long long v196 = v183;
    swift_bridgeObjectRetain();
    uint64_t v170 = (void *)Substring.init<A>(_:)();
    unint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    *(void *)&long long v196 = 1702195828;
    *((void *)&v196 + 1) = 0xE400000000000000;
    unint64_t v51 = Substring.init<A>(_:)();
    uint64_t v55 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v51, v52, v53, v54, 0, 0, 1, 0, 0, (unint64_t)v170, v46, v48, v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v55)
    {
      long long v196 = v169;
      swift_bridgeObjectRetain();
      uint64_t v170 = (void *)Substring.init<A>(_:)();
      unint64_t v57 = v56;
      uint64_t v59 = v58;
      uint64_t v61 = v60;
      *(void *)&long long v196 = 5457241;
      *((void *)&v196 + 1) = 0xE300000000000000;
      unint64_t v62 = Substring.init<A>(_:)();
      uint64_t v66 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v62, v63, v64, v65, 0, 0, 1, 0, 0, (unint64_t)v170, v57, v59, v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v39 = v66 == 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
      swift_bridgeObjectRelease();
      BOOL v39 = 1;
    }
    uint64_t v40 = v182;
    unint64_t v41 = v180;
    unint64_t v35 = (void *)v171;
    goto LABEL_32;
  }
  outlined init with copy of Any((uint64_t)v198, (uint64_t)&v196);
  if (swift_dynamicCast())
  {
    uint64_t v72 = v183;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
    BOOL v39 = v72 != 0;
    goto LABEL_7;
  }
  outlined init with take of Any(v198, &v196);
  int v79 = swift_dynamicCast();
  uint64_t v40 = v182;
  unint64_t v41 = v180;
  if (v79) {
    BOOL v39 = *(double *)&v183 != 0.0;
  }
  else {
    BOOL v39 = 0;
  }
LABEL_33:
  outlined destroy of Any?((uint64_t)&v184, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v40)
  {
    if (v41)
    {
      if (((v38 | v39) & 1) == 0)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        id v80 = objc_msgSend(v35, sel_mainBundle);
        id v81 = objc_msgSend(v80, sel_localizations);
        uint64_t v78 = v178;
        if (v81)
        {
          uint64_t v82 = v81;
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }
          uint64_t v83 = v35;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v84 = swift_dynamicCastClass();
          if (v84)
          {
            uint64_t v85 = v84;
          }
          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v82, sel_copy);
            unint64_t v120 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            uint64_t v85 = specialized _arrayForceCast<A, B>(_:)(v120);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          uint64_t v83 = v35;
          uint64_t v85 = MEMORY[0x1E4FBC860];
        }
        uint64_t v121 = specialized static Locale.canonicalizeLocalizations(_:)(v85);
        swift_bridgeObjectRelease();
        if (!v121[2] || !*(void *)(v40 + 16)) {
          goto LABEL_81;
        }
        uint64_t v122 = HIBYTE(v41) & 0xF;
        if ((v41 & 0x2000000000000000) == 0) {
          uint64_t v122 = v78 & 0xFFFFFFFFFFFFLL;
        }
        if (!v122)
        {
LABEL_81:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();

LABEL_112:
          uint64_t v42 = v179;
LABEL_113:
          CFAllocatorRef v149 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
          CFStringRef v150 = (const __CFString *)String._bridgeToObjectiveCImpl()();
          uint64_t v151 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v149, v150);
          swift_unknownObjectRelease();
          if (v151)
          {
            uint64_t v75 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
            unint64_t v77 = v152;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v75 = 0;
            unint64_t v77 = 0xE000000000000000;
          }
          goto LABEL_116;
        }
        swift_bridgeObjectRetain();
        specialized static Locale.canonicalizeLocalizations(_:)(v40);
        swift_bridgeObjectRetain();
        uint64_t v123 = _ContiguousArrayBuffer._asCocoaArray()();
        id v124 = objc_msgSend(v83, sel_preferredLocalizationsFromArray_forPreferences_, v123, _ContiguousArrayBuffer._asCocoaArray()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v124)
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v125 = swift_dynamicCastClass();
          if (v125)
          {
            uint64_t v126 = (void *)v125;
          }
          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v124, sel_copy);
            unint64_t v132 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            uint64_t v126 = (void *)specialized _arrayForceCast<A, B>(_:)(v132);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          uint64_t v126 = (void *)MEMORY[0x1E4FBC860];
        }
        if (!v126[2])
        {
          swift_bridgeObjectRelease();
          uint64_t v141 = v182;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();

          uint64_t v40 = v141;
LABEL_111:
          swift_bridgeObjectRelease();
          goto LABEL_112;
        }
        uint64_t v133 = v126[5];
        uint64_t v174 = v126[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v134 = specialized _withFixedCharBuffer(size:_:)(257, v78, v41);
        uint64_t v136 = v135;
        swift_bridgeObjectRelease();
        if (v136)
        {
          Locale.Components.init(identifier:)(v134, v136, &v184);
          if (*((void *)&v184 + 1))
          {
            uint64_t v137 = (void *)*((void *)&v187 + 1);
            if (*((void *)&v187 + 1))
            {
              uint64_t v138 = v187;
              v198[0] = v184;
              outlined copy of Locale.LanguageCode?(v187, *((uint64_t *)&v187 + 1));
              swift_bridgeObjectRetain();
              v139._uint64_t countAndFlagsBits = 45;
              v139._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v139);
              swift_bridgeObjectRetain();
              unint64_t v41 = v180;
              outlined consume of Locale.LanguageCode?(v138, (uint64_t)v137);
              v140._uint64_t countAndFlagsBits = v138;
              v140._unint64_t object = v137;
              String.append(_:)(v140);
              swift_bridgeObjectRelease();
              outlined release of Locale.Components((uint64_t *)&v184);
              uint64_t v173 = *((void *)&v198[0] + 1);
              uint64_t v134 = *(void *)&v198[0];
              goto LABEL_100;
            }
          }
          outlined release of Locale.Components((uint64_t *)&v184);
          uint64_t v134 = 0;
        }
        uint64_t v173 = 0;
LABEL_100:
        uint64_t v40 = v182;
        swift_bridgeObjectRetain();
        uint64_t v142 = specialized _withFixedCharBuffer(size:_:)(257, v174, v133);
        uint64_t v144 = v143;
        swift_bridgeObjectRelease();
        if (v144)
        {
          Locale.Components.init(identifier:)(v142, v144, &v184);
          if (*((void *)&v184 + 1) && (uint64_t v145 = (void *)*((void *)&v187 + 1)) != 0)
          {
            uint64_t v146 = v187;
            v198[0] = v184;
            outlined copy of Locale.LanguageCode?(v187, *((uint64_t *)&v187 + 1));
            swift_bridgeObjectRetain();
            v147._uint64_t countAndFlagsBits = 45;
            v147._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v147);
            swift_bridgeObjectRetain();
            uint64_t v78 = v178;
            uint64_t v40 = v182;
            outlined consume of Locale.LanguageCode?(v146, (uint64_t)v145);
            v148._uint64_t countAndFlagsBits = v146;
            unint64_t v41 = v180;
            v148._unint64_t object = v145;
            String.append(_:)(v148);
            swift_bridgeObjectRelease();
            outlined release of Locale.Components((uint64_t *)&v184);
            uint64_t v144 = *((void *)&v198[0] + 1);
            uint64_t v142 = *(void *)&v198[0];
          }
          else
          {
            outlined release of Locale.Components((uint64_t *)&v184);
            uint64_t v142 = 0;
            uint64_t v144 = 0;
          }
        }
        if (v173 && v144)
        {
          if (v134 == v142 && v173 == v144)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_126:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t v75 = v78;
            unint64_t v77 = v41;
            uint64_t v42 = v179;
LABEL_116:
            uint64_t v153 = HIBYTE(v77) & 0xF;
            if ((v77 & 0x2000000000000000) == 0) {
              uint64_t v153 = v75 & 0xFFFFFFFFFFFFLL;
            }
            if (!v153) {
              swift_bridgeObjectRelease();
            }
            goto LABEL_120;
          }
          char v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v166)
          {

            goto LABEL_126;
          }
          uint64_t v75 = specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)(v174, v133, v78, v41);
          unint64_t v77 = v167;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if (v77)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v42 = v179;
            goto LABEL_116;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
        }
        goto LABEL_111;
      }
LABEL_42:
      uint64_t v78 = v178;
      uint64_t v42 = v179;
      goto LABEL_113;
    }
    uint64_t v86 = swift_bridgeObjectRetain();
    uint64_t v87 = specialized static Locale.canonicalizeLocalizations(_:)(v86);
    swift_bridgeObjectRelease();
    if (v87[2])
    {
      CFAllocatorRef v88 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
      CFStringRef v89 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      uint64_t v90 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v88, v89);
      swift_unknownObjectRelease();
      if (v90)
      {
        id v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        unint64_t v171 = v92;
        swift_bridgeObjectRelease();

        uint64_t v93 = v181;
        if (v181)
        {
LABEL_46:
          uint64_t v94 = one-time initialization token for log;
          swift_bridgeObjectRetain();
          if (v94 != -1) {
            swift_once();
          }
          id v95 = (id)static _LocaleICU.log;
          Logger.init(_:)();
          swift_bridgeObjectRetain_n();
          uint64_t v96 = Logger.logObject.getter();
          os_log_type_t v97 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v96, v97))
          {
            unint64_t v98 = (uint8_t *)swift_slowAlloc();
            uint64_t v99 = swift_slowAlloc();
            uint64_t v170 = v87;
            uint64_t v100 = v99;
            *(void *)&long long v184 = v99;
            *(_DWORD *)unint64_t v98 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v101 = v179;
            *(void *)&v198[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, (unint64_t)v181, (uint64_t *)&v184);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_181795000, v96, v97, "Locale.current constructing a locale identifier from preferred languages by combining with set country code '%{public}s'", v98, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x185309510](v100, -1, -1);
            unint64_t v102 = v98;
            uint64_t v93 = v181;
            MEMORY[0x185309510](v102, -1, -1);

            (*(void (**)(char *, uint64_t))(v174 + 8))(v172, v173);
            uint64_t v40 = v182;
            uint64_t v78 = v178;
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v174 + 8))(v172, v173);
            uint64_t v40 = v182;
            uint64_t v78 = v178;
            uint64_t v101 = v179;
          }
          *(void *)&long long v184 = v91;
          *((void *)&v184 + 1) = v171;
          v127._uint64_t countAndFlagsBits = 95;
          v127._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v127);
          v128._uint64_t countAndFlagsBits = v101;
          v128._unint64_t object = v93;
          String.append(_:)(v128);
          swift_bridgeObjectRelease();
          CFStringRef v129 = (const __CFString *)String._bridgeToObjectiveCImpl()();
          unint64_t v130 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v88, v129);
          swift_unknownObjectRelease();
          uint64_t v42 = v101;
          if (v130)
          {
            uint64_t v75 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
            unint64_t v77 = v131;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v75 = 0;
            unint64_t v77 = 0xE000000000000000;
          }
          unint64_t v41 = v180;
          goto LABEL_116;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        id v91 = 0;
        unint64_t v171 = 0xE000000000000000;
        uint64_t v93 = v181;
        if (v181) {
          goto LABEL_46;
        }
      }
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      id v113 = (id)static _LocaleICU.log;
      Logger.init(_:)();
      uint64_t v114 = Logger.logObject.getter();
      os_log_type_t v115 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v114, v115))
      {
        char v116 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v116 = 0;
        _os_log_impl(&dword_181795000, v114, v115, "Locale.current constructing a locale identifier from preferred languages without a set country code", v116, 2u);
        MEMORY[0x185309510](v116, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v174 + 8))(v16, v173);
      CFStringRef v117 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      uint64_t v118 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v88, v117);
      swift_unknownObjectRelease();
      uint64_t v78 = v178;
      if (v118)
      {
        uint64_t v75 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
        unint64_t v77 = v119;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v75 = 0;
        unint64_t v77 = 0xE000000000000000;
      }
      uint64_t v42 = v179;
      unint64_t v41 = v180;
      goto LABEL_116;
    }
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    id v108 = (id)static _LocaleICU.log;
    Logger.init(_:)();
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.debug.getter();
    BOOL v111 = os_log_type_enabled(v109, v110);
    uint64_t v42 = v179;
    if (v111)
    {
      uint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v112 = 0;
      _os_log_impl(&dword_181795000, v109, v110, "Value for 'AppleLanguages' found in preferences contains no valid entries; falling back to default locale identifier as current",
        v112,
        2u);
      MEMORY[0x185309510](v112, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v174 + 8))(v11, v173);
    swift_bridgeObjectRelease();
    uint64_t v78 = v178;
    unint64_t v41 = v180;
  }
  else
  {
    if (((v41 != 0) & (v38 | v39)) != 0) {
      goto LABEL_42;
    }
    uint64_t v78 = v178;
    uint64_t v42 = v179;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    id v103 = (id)static _LocaleICU.log;
    Logger.init(_:)();
    uint64_t v104 = Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v104, v105))
    {
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v106 = 0;
      _os_log_impl(&dword_181795000, v104, v105, "Lookup of 'AppleLanguages' from current preferences failed lookup (app preferences do not contain the key); like"
        "ly falling back to default locale identifier as current",
        v106,
        2u);
      uint64_t v107 = v106;
      uint64_t v78 = v178;
      MEMORY[0x185309510](v107, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v174 + 8))(v19, v173);
    if (v41) {
      goto LABEL_113;
    }
  }
LABEL_120:
  CFAllocatorRef v154 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  CFStringRef v155 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  unint64_t v156 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v154, v155);
  swift_unknownObjectRelease();
  if (v156)
  {
    id v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
    unint64_t v159 = v158;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v157 = 0;
    unint64_t v159 = 0xE000000000000000;
  }
  uint64_t v161 = v176;
  uint64_t v162 = v177;
  *(void *)(v177 + 16) = v157;
  *(void *)(v162 + 24) = v159;
  *(void *)&long long v184 = v161;
  *((void *)&v184 + 1) = v40;
  uint64_t v185 = v78;
  unint64_t v186 = v41;
  long long v189 = v201;
  long long v190 = v202;
  long long v191 = v203;
  long long v187 = v199;
  long long v188 = v200;
  uint64_t v192 = v204;
  uint64_t v193 = v42;
  unint64_t v194 = (unint64_t)v181;
  int v195 = v175;
  destructiveProjectEnumData for PredicateCodableError(&v184, v160);
  outlined init with take of LocalePreferences?((uint64_t)&v184, v162 + 32);
  LOBYTE(v198[0]) = 1;
  LOBYTE(v196) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  uint64_t v163 = swift_allocObject();
  *(_DWORD *)(v163 + 560) = 0;
  *(_OWORD *)(v163 + 32) = 0u;
  *(_OWORD *)(v163 + 48) = 0u;
  *(_OWORD *)(v163 + 64) = 0u;
  *(_OWORD *)(v163 + 80) = 0u;
  *(_OWORD *)(v163 + 96) = 0u;
  *(unsigned char *)(v163 + 112) = 16;
  *(_OWORD *)(v163 + 120) = 0u;
  *(_OWORD *)(v163 + 136) = 0u;
  *(void *)(v163 + 152) = 0;
  *(void *)(v163 + 160) = 1;
  *(_OWORD *)(v163 + 168) = 0u;
  *(_OWORD *)(v163 + 184) = 0u;
  *(_OWORD *)(v163 + 200) = 0u;
  *(void *)(v163 + 216) = 0;
  *(unsigned char *)(v163 + 224) = 7;
  *(_OWORD *)(v163 + 232) = 0u;
  *(_OWORD *)(v163 + 248) = 0u;
  *(unsigned char *)(v163 + 280) = 0;
  *(unsigned char *)(v163 + 281) = v198[0];
  *(void *)(v163 + 288) = 0;
  *(unsigned char *)(v163 + 296) = v196;
  *(unsigned char *)(v163 + 297) = 4;
  *(_OWORD *)(v163 + 304) = 0u;
  *(_OWORD *)(v163 + 320) = 0u;
  *(unsigned char *)(v163 + 336) = 2;
  *(void *)(v163 + 344) = 0;
  *(void *)(v163 + 352) = 1;
  *(void *)(v163 + 360) = 0;
  *(void *)(v163 + 368) = 0;
  *(void *)(v163 + 376) = 0;
  *(void *)(v163 + 384) = 1;
  *(void *)(v163 + 392) = 0;
  *(void *)(v163 + 400) = 0;
  *(void *)(v163 + 408) = 1;
  *(void *)(v163 + 416) = 0;
  *(void *)(v163 + 424) = 0;
  *(void *)(v163 + 432) = 1;
  uint64_t v164 = MEMORY[0x1E4FBC868];
  *(void *)(v163 + 472) = MEMORY[0x1E4FBC868];
  *(void *)(v163 + 480) = v164;
  *(void *)(v163 + 488) = v164;
  *(void *)(v163 + 496) = v164;
  *(void *)(v163 + 504) = v164;
  *(void *)(v163 + 512) = v164;
  *(void *)(v163 + 520) = v164;
  *(void *)(v163 + 528) = v164;
  *(void *)(v163 + 536) = v164;
  *(void *)(v163 + 544) = v164;
  *(void *)(v163 + 552) = v164;
  *(void *)(v162 + 176) = v163;
  *(_OWORD *)(v163 + 16) = xmmword_182106C90;
  *(_OWORD *)(v163 + 264) = 0u;
  *(_OWORD *)(v163 + 440) = 0u;
  *(_OWORD *)(v163 + 456) = 0u;
  return v162;
}

id @objc static NSLocale._localeIdentifierByAddingLikelySubtags(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  specialized _withFixedCharBuffer(size:_:)(257, (uint64_t)v3, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7) {
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, char *, uint64_t, char *))
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v4 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v4 < 0) {
    goto LABEL_15;
  }
  uint64_t v6 = isStackAllocationSafe;
  if (v4 < 1025 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v8 = (char *)&v16 - v7;
    HIDWORD(v16) = 0;
    uint64_t v9 = String.utf8CString.getter();
    int v10 = a4(v9 + 32, v8, v6, (char *)&v16 + 4);
    swift_release();
    uint64_t v11 = 0;
    if (SHIDWORD(v16) <= 0 && v10 > 0)
    {
      v8[v10] = 0;
      return MEMORY[0x185301F80](v8);
    }
  }
  else
  {
    uint64_t v12 = swift_slowAlloc();
    HIDWORD(v16) = 0;
    uint64_t v13 = String.utf8CString.getter();
    int v14 = a4(v13 + 32, (char *)v12, v6, (char *)&v16 + 4);
    swift_release();
    uint64_t v11 = 0;
    if (SHIDWORD(v16) <= 0 && v14 > 0)
    {
      *(unsigned char *)(v12 + v14) = 0;
      uint64_t v11 = MEMORY[0x185301F80](v12);
    }
    MEMORY[0x185309510](v12, -1, -1);
  }
  return v11;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = (uint64_t (*)(uint64_t, char *, uint64_t, char *))MEMORY[0x1E4FBA650];

  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, v3);
}

{
  uint64_t (*v3)(uint64_t, char *, uint64_t, char *);
  uint64_t vars8;

  id v3 = (uint64_t (*)(uint64_t, char *, uint64_t, char *))MEMORY[0x1E4FBA698];

  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, v3);
}

{
  uint64_t (*v3)(uint64_t, char *, uint64_t, char *);
  uint64_t vars8;

  id v3 = (uint64_t (*)(uint64_t, char *, uint64_t, char *))MEMORY[0x1E4FBA5D8];

  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, v3);
}

__n128 LocalizedStringResource.init(stringLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v16[0] = MEMORY[0x1E4FBC860];
  v16[1] = a1;
  _OWORD v16[2] = a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v17 = static LocaleCache.cache;
  *(void *)&long long v15 = LocaleCache.current.getter();
  *((void *)&v15 + 1) = v4;
  memset(v13, 0, sizeof(v13));
  char v14 = 2;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, &v15, (uint64_t)v13, (uint64_t)&v17);
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  uint64_t v7 = v23;
  __n128 result = v18;
  long long v9 = v22;
  long long v10 = v21;
  long long v11 = v24;
  long long v12 = v25;
  *(void *)a3 = v17;
  *(__n128 *)(a3 + 8) = result;
  *(void *)(a3 + 24) = v5;
  *(void *)(a3 + 32) = v6;
  *(_OWORD *)(a3 + 40) = v10;
  *(_OWORD *)(a3 + 56) = v9;
  *(void *)(a3 + 72) = v7;
  *(_OWORD *)(a3 + 80) = v11;
  *(_OWORD *)(a3 + 96) = v12;
  return result;
}

void LocalizedStringResource.init(_:table:locale:bundle:comment:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a1[1];
  uint64_t v23 = *a1;
  uint64_t v10 = a1[2];
  long long v24 = *a4;
  long long v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8);
  uint64_t v13 = *(void *)(a5 + 16);
  char v14 = *(unsigned char *)(a5 + 24);
  swift_bridgeObjectRetain();
  LocalizedStringResource.BundleDescription.resolvedURL.getter((uint64_t)v25);
  outlined consume of LocalizedStringResource.BundleDescription(v11, v12, v13, v14);
  long long v15 = (void *)v25[0];
  uint64_t v16 = v25[1];
  uint64_t v17 = v25[2];
  swift_retain();
  id v18 = v15;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    URL.scheme.getter();
    if (v19)
    {
      Swift::String v20 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v20._countAndFlagsBits == 1701603686 && v20._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
LABEL_9:
        *(void *)a6 = v9;
        *(void *)(a6 + 8) = v10;
        *(void *)(a6 + 16) = v23;
        *(void *)(a6 + 24) = v9;
        *(void *)(a6 + 32) = v10;
        *(void *)(a6 + 40) = a2;
        *(void *)(a6 + 48) = a3;
        *(_OWORD *)(a6 + 56) = v24;
        *(void *)(a6 + 72) = v18;
        *(void *)(a6 + 80) = v16;
        *(void *)(a6 + 96) = 0;
        *(void *)(a6 + 104) = 0;
        *(void *)(a6 + 88) = v17;
        return;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if (v22) {
        goto LABEL_9;
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  else
  {
    unsigned __int8 v21 = objc_msgSend(v18, sel_isFileURL);
    swift_release();
    swift_release();

    if (v21) {
      goto LABEL_9;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *outlined consume of LocalizedStringResource.BundleDescription(void *result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1)
  {

    swift_release();
    return (void *)swift_release();
  }
  return result;
}

void LocalizedStringResource.BundleDescription.resolvedURL.getter(uint64_t a1@<X8>)
{
  id v3 = *(void **)v1;
  if (!*(unsigned char *)(v1 + 24))
  {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v9 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    id v10 = objc_msgSend(v9, sel_bundleURL);

    if (v10) {
      goto LABEL_9;
    }
    __break(1u);
LABEL_8:
    id v11 = objc_msgSend(self, sel_mainBundle);
    id v10 = objc_msgSend(v11, sel_bundleURL);

    if (!v10)
    {
      __break(1u);
      return;
    }
LABEL_9:
    URL.init(reference:)(v10, &v13);

    long long v12 = v14;
    *(void *)a1 = v13;
    *(_OWORD *)(a1 + 8) = v12;
    return;
  }
  if (*(unsigned char *)(v1 + 24) != 1) {
    goto LABEL_8;
  }
  uint64_t v6 = v1 + 8;
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v6 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  swift_retain();
  id v7 = v3;

  swift_retain();
}

void *specialized static Locale.canonicalizeLocalizations(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  uint64_t v3 = swift_bridgeObjectRetain() + 40;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    CFStringRef v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v2, v5);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      unint64_t v9 = v8;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v7 = 0;
      unint64_t v9 = 0xE000000000000000;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    }
    unint64_t v11 = v4[2];
    unint64_t v10 = v4[3];
    if (v11 >= v10 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v4);
    }
    v3 += 16;
    uint64_t v4[2] = v11 + 1;
    long long v12 = &v4[2 * v11];
    void v12[4] = v7;
    v12[5] = v9;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v1 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v1 < 0) {
    goto LABEL_15;
  }
  if (v1 < 1025 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    int v4 = uloc_toLanguageTag();
    swift_release();
    uint64_t v5 = 0;
    if (SHIDWORD(v9) <= 0 && v4 > 0)
    {
      v3[v4] = 0;
      return MEMORY[0x185301F80](v3);
    }
  }
  else
  {
    uint64_t v6 = swift_slowAlloc();
    String.utf8CString.getter();
    int v7 = uloc_toLanguageTag();
    swift_release();
    uint64_t v5 = 0;
    if (v7 > 0)
    {
      *(unsigned char *)(v6 + v7) = 0;
      uint64_t v5 = MEMORY[0x185301F80](v6);
    }
    MEMORY[0x185309510](v6, -1, -1);
  }
  return v5;
}

{
  uint64_t vars8;

  return specialized _withFixedCharBuffer(size:_:)(isStackAllocationSafe);
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int Language;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v1 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v1 < 0) {
    goto LABEL_15;
  }
  if (v1 < 1025 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    int Language = uloc_getLanguage();
    swift_release();
    uint64_t v5 = 0;
    if (SHIDWORD(v9) <= 0 && Language > 0)
    {
      v3[Language] = 0;
      return MEMORY[0x185301F80](v3);
    }
  }
  else
  {
    uint64_t v6 = swift_slowAlloc();
    String.utf8CString.getter();
    int v7 = uloc_getLanguage();
    swift_release();
    uint64_t v5 = 0;
    if (v7 > 0)
    {
      *(unsigned char *)(v6 + v7) = 0;
      uint64_t v5 = MEMORY[0x185301F80](v6);
    }
    MEMORY[0x185309510](v6, -1, -1);
  }
  return v5;
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int Variant;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v1 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v1 < 0) {
    goto LABEL_15;
  }
  if (v1 < 1025 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    Variant = uloc_getVariant();
    swift_release();
    uint64_t v5 = 0;
    if (SHIDWORD(v9) <= 0 && Variant > 0)
    {
      v3[Variant] = 0;
      return MEMORY[0x185301F80](v3);
    }
  }
  else
  {
    uint64_t v6 = swift_slowAlloc();
    String.utf8CString.getter();
    int v7 = uloc_getVariant();
    swift_release();
    uint64_t v5 = 0;
    if (v7 > 0)
    {
      *(unsigned char *)(v6 + v7) = 0;
      uint64_t v5 = MEMORY[0x185301F80](v6);
    }
    MEMORY[0x185309510](v6, -1, -1);
  }
  return v5;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a5[6] + result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarICU(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int8 v19 = *a1;
  char v12 = *(unsigned char *)(a8 + 8);
  char v13 = a5 & 1;
  char v14 = a7 & 1;
  uint64_t v17 = *(void *)a8;
  char v18 = v12;
  uint64_t v15 = swift_allocObject();
  _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v19, a2, a3, a4, v13, a6, v14, &v17);
  return v15;
}

uint64_t destroy for NSObject.KeyValueObservingPublisher(id *a1)
{
  return swift_release();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNumber(uint64_t a1@<X8>)
{
  id v2 = *v1;
  NSNumber._toCustomAnyHashable()(a1);
}

void NSNumber._toCustomAnyHashable()(uint64_t a1@<X8>)
{
  id v2 = v1;
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = v2;
    objc_msgSend(v5, sel_decimalValue);
    type metadata accessor for NSDecimal(0);
    lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal();
    AnyHashable.init<A>(_:)();

    return;
  }
  if (!*MEMORY[0x1E4F1CFD0])
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((void *)*MEMORY[0x1E4F1CFD0] == v1)
  {
LABEL_9:
    AnyHashable.init<A>(_:)();
    return;
  }
  if (!*MEMORY[0x1E4F1CFC8])
  {
LABEL_16:
    __break(1u);
    return;
  }
  if ((void *)*MEMORY[0x1E4F1CFC8] == v1) {
    goto LABEL_9;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, objc_msgSend(v1, sel_longLongValue));
  char v8 = static NSObject.== infix(_:_:)();

  if (v8)
  {
    objc_msgSend(v1, sel_longLongValue);
    goto LABEL_9;
  }
  id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, objc_msgSend(v1, sel_unsignedLongLongValue));
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
    objc_msgSend(v1, sel_unsignedLongLongValue);
    goto LABEL_9;
  }
  objc_msgSend(v1, sel_doubleValue);
  id v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v11);
  char v13 = static NSObject.== infix(_:_:)();

  if (v13)
  {
    objc_msgSend(v2, sel_doubleValue);
    goto LABEL_9;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

void static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void sub_18194255C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_181942574(_Unwind_Exception *a1)
{
}

ValueMetadata *type metadata accessor for AttributedString._InternalRun()
{
  return &type metadata for AttributedString._InternalRun;
}

uint64_t hashBoundPath(uint64_t a1)
{
  return [*(id *)(a1 + 16) hash];
}

uint64_t outlined retain of Result<stat, CocoaError>(uint64_t a1)
{
  return a1;
}

id outlined copy of Result<stat, CocoaError>(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19) {
    return result;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <A> PredicateExpressions.Value<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Value<A>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t PredicateExpressions.Value<A>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v18[6] = a3;
  uint64_t v17 = a4;
  uint64_t v16 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PredicateExpressions.Value();
  uint64_t v15 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  double v11 = (char *)&v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v14 = v9;
    __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v11, v8, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v11, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for PredicateExpressions.Value()
{
  return __swift_instantiateGenericMetadata();
}

void CharacterSet.formUnion(_:)(uint64_t *a1)
{
}

Swift::Void __swiftcall CharacterSet.insert(charactersIn:)(Swift::String charactersIn)
{
}

uint64_t type metadata accessor for PredicateExpressions.NilLiteral()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for Locale.Language(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    uint64_t v8 = *(void *)(a2 + 72);
    if (v8) {
      goto LABEL_4;
    }
LABEL_7:
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    return a1;
  }
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 72);
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t Locale.LanguageCode.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  *(void *)(v0 + 32) = **(void **)(v0 + 24);
  return MEMORY[0x1F4188298](_sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY1_, 0, 0);
}

uint64_t _KeyValueCodingAndObserving.didChangeValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:)(a1, a2, (SEL *)&selRef_didChangeValueForKey_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:)(a1, a2, (SEL *)&selRef_willChangeValueForKey_);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexSet(void *a1, void *a2))(void, void)
{
  *a1 = *a2;
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t _FileOperations._FileRemoveContext.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void (*URLComponents.queryItems.modify(void *a1))(Swift::OpaquePointer_optional a1)
{
  uint64_t v3 = (char *)malloc(0xB0uLL);
  *a1 = v3;
  *((void *)v3 + 21) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  return URLComponents.queryItems.modify;
}

unint64_t URLComponents.queryItems.getter()
{
  return (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
}

id @objc _NSSwiftURLComponents.queryItems.getter(char *a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____NSSwiftURLComponents_lock];
  long long v5 = (_OWORD *)(v4 + 16);
  long long v6 = (os_unfair_lock_s *)(v4 + 172);
  long long v7 = a1;
  os_unfair_lock_lock(v6);
  closure #1 in _NSSwiftURLComponents.components.getter(v5, &v13);
  os_unfair_lock_unlock(v6);
  v11[6] = v19;
  _OWORD v11[7] = v20;
  v12[0] = v21[0];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v21 + 10);
  uint64_t v11[2] = v15;
  void v11[3] = v16;
  v11[4] = v17;
  v11[5] = v18;
  v11[0] = v13;
  v11[1] = v14;
  unsigned char v21[8] = v19;
  v21[9] = v20;
  v22[0] = v21[0];
  *(_OWORD *)((char *)v22 + 10) = *(_OWORD *)((char *)v21 + 10);
  void v21[4] = v15;
  v21[5] = v16;
  v21[6] = v17;
  v21[7] = v18;
  void v21[2] = v13;
  uint64_t v21[3] = v14;
  unint64_t v8 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(a3 & 1);
  outlined release of URLComponents((uint64_t)v11);

  if (v8) {
    uint64_t v9 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  else {
    uint64_t v9 = 0;
  }

  return v9;
}

void (*URLComponents.query.getter(uint64_t a1))(char *, void)
{
  return URLComponents._URLComponents.query.getter(a1);
}

void (*URLComponents._URLComponents.query.getter(uint64_t a1))(char *, void)
{
  if (*(void *)(v1 + 128))
  {
    uint64_t v2 = *(void *)(v1 + 120);
    unint64_t v3 = *(void *)(v1 + 128);
  }
  else
  {
    if ((*(unsigned char *)(v1 + 15) & 1) == 0) {
      return 0;
    }
    outlined init with take of LocalePreferences?(v1, (uint64_t)v16, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(unsigned char *)(v17 + 192) & 1) != 0) {
      return 0;
    }
    uint64_t v11 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x185301F50](v11);
    unint64_t v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    Swift::Int v14 = v2;
    unint64_t v15 = v3;
    MEMORY[0x1F4188790](a1);
    Swift::Double v13[2] = &v14;
    void v13[3] = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v5 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v13, v2, v3);
    if (v6 == 1)
    {
      Swift::Int v7 = v14;
      unint64_t v8 = v15;
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x1E4FBC870]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = (void (*)(char *, void))v5;
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

Swift::OpaquePointer_optional __swiftcall URLComponents._URLComponents.queryItems(percentEncoded:)(Swift::Bool percentEncoded)
{
  if (*(void *)(v1 + 128))
  {
    unint64_t v2 = *(void *)(v1 + 120);
    unint64_t v3 = *(void *)(v1 + 128);
  }
  else
  {
    if ((*(unsigned char *)(v1 + 15) & 1) == 0
      || (outlined init with take of LocalePreferences?(v1, (uint64_t)v25, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v25, (uint64_t)&v26, &demangling cache variable for type metadata for URLParseInfo?), !v26)|| (*(unsigned char *)(v26 + 192) & 1) != 0)
    {
      unint64_t v19 = 0;
LABEL_46:
      unint64_t v11 = v19;
      goto LABEL_51;
    }
    uint64_t v20 = String.subscript.getter();
    unint64_t v2 = MEMORY[0x185301F50](v20);
    unint64_t v3 = v21;
    swift_bridgeObjectRelease();
  }
  if ((v3 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(v3) & 0xF;
  }
  else {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v19 = MEMORY[0x1E4FBC860];
    goto LABEL_46;
  }
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v5 = swift_allocObject();
  unint64_t v6 = 15;
  *(void *)(v5 + 16) = 15;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 15;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(unsigned char *)(v8 + 24) = 1;
  uint64_t v9 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  swift_bridgeObjectRetain();
  unint64_t v11 = swift_bridgeObjectRetain();
  while (1)
  {
    if ((v6 & 0xC) == v10)
    {
      unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v2, v3);
      unint64_t v6 = v11;
    }
    unint64_t v13 = v6 >> 16;
    if (v6 >> 16 >= v4) {
      break;
    }
    if ((v3 & 0x1000000000000000) != 0)
    {
      char v15 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v3 & 0x2000000000000000) != 0)
    {
      v24[0] = v2;
      v24[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      char v15 = *((unsigned char *)v24 + v13);
    }
    else
    {
      uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000) == 0) {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      char v15 = *(unsigned char *)(v14 + v13);
    }
    if (v15 == 38)
    {
      addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)(v8, v2, v3, v7, v2, v3, v5, percentEncoded, v22);
      unint64_t v11 = *(void *)(v5 + 16);
      if ((v11 & 0xC) == v10)
      {
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v2, v3);
        if ((v3 & 0x1000000000000000) != 0) {
          goto LABEL_30;
        }
LABEL_27:
        uint64_t v18 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      else
      {
        if ((v3 & 0x1000000000000000) == 0) {
          goto LABEL_27;
        }
LABEL_30:
        if (v4 <= v11 >> 16) {
          goto LABEL_50;
        }
        uint64_t v18 = String.UTF8View._foreignIndex(after:)();
      }
      uint64_t v17 = 0;
      *(void *)(v7 + 16) = v18;
      char v16 = 1;
LABEL_33:
      *(void *)(v8 + 16) = v17;
      *(unsigned char *)(v8 + 24) = v16;
      goto LABEL_34;
    }
    if (v15 == 61 && *(unsigned char *)(v8 + 24) == 1)
    {
      char v16 = 0;
      uint64_t v17 = *(void *)(v5 + 16);
      goto LABEL_33;
    }
LABEL_34:
    unint64_t v11 = *(void *)(v5 + 16);
    if ((v11 & 0xC) == v10)
    {
      unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v2, v3);
      if ((v3 & 0x1000000000000000) == 0)
      {
LABEL_10:
        unint64_t v6 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_11;
      }
    }
    else if ((v3 & 0x1000000000000000) == 0)
    {
      goto LABEL_10;
    }
    if (v4 <= v11 >> 16) {
      goto LABEL_49;
    }
    unint64_t v11 = String.UTF8View._foreignIndex(after:)();
    unint64_t v6 = v11;
LABEL_11:
    *(void *)(v5 + 16) = v6;
    if (4 * v4 == v6 >> 14)
    {
      addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)(v8, v2, v3, v7, v2, v3, v5, percentEncoded, v22);
      swift_bridgeObjectRelease_n();
      unint64_t v19 = *(void *)(v22 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  result.value._rawValue = (void *)v11;
  result.is_nil = v12;
  return result;
}

unint64_t addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  char v17 = *(unsigned char *)(a1 + 24);
  unint64_t v18 = *(void *)(a4 + 16);
  if (v17)
  {
    if (*(void *)(a7 + 16) >> 14 >= v18 >> 14)
    {
      uint64_t v19 = String.subscript.getter();
      uint64_t v10 = MEMORY[0x185301F50](v19);
      unint64_t v9 = v20;
      uint64_t v21 = swift_bridgeObjectRelease();
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      uint64_t v24 = a9;
      if (a8) {
        goto LABEL_31;
      }
LABEL_13:
      uint64_t v31 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        uint64_t v31 = v10 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v32 = MEMORY[0x1E4FBC870];
      if (v31)
      {
        Swift::Int v56 = v10;
        unint64_t v57 = v9;
        MEMORY[0x1F4188790](v21);
        uint64_t v54 = &v56;
        uint64_t v55 = v32;
        swift_bridgeObjectRetain();
        unint64_t v33 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v53, v10, v9);
        if (v34 == 1)
        {
          Swift::Int v35 = v56;
          unint64_t v36 = v57;
          swift_bridgeObjectRetain();
          uint64_t v10 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v35, v36, MEMORY[0x1E4FBC870]);
          unint64_t v38 = v37;
          swift_bridgeObjectRelease_n();
          uint64_t v39 = swift_bridgeObjectRelease();
          unint64_t v9 = v38;
          if (v38) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v10 = (uint64_t)v33;
          unint64_t v40 = v34;
          uint64_t v39 = swift_bridgeObjectRelease_n();
          unint64_t v9 = v40;
          if (v40) {
            goto LABEL_22;
          }
        }
      }
      else
      {
        uint64_t v39 = swift_bridgeObjectRelease();
      }
      uint64_t v10 = 0;
      unint64_t v9 = 0xE000000000000000;
LABEL_22:
      if (v23)
      {
        uint64_t v41 = HIBYTE(v23) & 0xF;
        if ((v23 & 0x2000000000000000) == 0) {
          uint64_t v41 = v22 & 0xFFFFFFFFFFFFLL;
        }
        if (v41)
        {
          Swift::Int v56 = v22;
          unint64_t v57 = v23;
          MEMORY[0x1F4188790](v39);
          uint64_t v54 = &v56;
          uint64_t v55 = v32;
          swift_bridgeObjectRetain();
          uint64_t v42 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v53, v22, v23);
          if (v43 == 1)
          {
            Swift::Int v44 = v56;
            unint64_t v45 = v57;
            swift_bridgeObjectRetain();
            uint64_t v22 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v44, v45, MEMORY[0x1E4FBC870]);
            unint64_t v47 = v46;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v22 = (uint64_t)v42;
            unint64_t v47 = v43;
            swift_bridgeObjectRelease_n();
          }
          unint64_t v23 = v47;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v22 = 0;
          unint64_t v23 = 0xE000000000000000;
        }
      }
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  if (v13 >> 14 < v18 >> 14)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v11 = a6;
  unint64_t v12 = a5;
  uint64_t v25 = String.subscript.getter();
  uint64_t v10 = MEMORY[0x185301F50](v25);
  unint64_t v9 = v26;
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v28 = (v12 >> 59) & 1;
  if ((v11 & 0x1000000000000000) == 0) {
    LOBYTE(v28) = 1;
  }
  if ((v13 & 0xC) == 4 << v28)
  {
LABEL_38:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v12, v11);
    unint64_t v13 = result;
    if ((v11 & 0x1000000000000000) != 0) {
      goto LABEL_39;
    }
LABEL_10:
    unint64_t result = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_11;
  }
  if ((v11 & 0x1000000000000000) == 0) {
    goto LABEL_10;
  }
LABEL_39:
  unint64_t v52 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    unint64_t v52 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v52 <= v13 >> 16) {
    goto LABEL_44;
  }
  unint64_t result = String.UTF8View._foreignIndex(after:)();
LABEL_11:
  if (*(void *)(a7 + 16) >> 14 < result >> 14)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    return result;
  }
  uint64_t v29 = String.subscript.getter();
  uint64_t v22 = MEMORY[0x185301F50](v29);
  unint64_t v23 = v30;
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v24 = a9;
  if ((a8 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_31:
  uint64_t v48 = *(void **)(v24 + 16);
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v24 + 16) = v48;
  if ((result & 1) == 0)
  {
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
    uint64_t v48 = (void *)result;
    *(void *)(v24 + 16) = result;
  }
  unint64_t v50 = v48[2];
  unint64_t v49 = v48[3];
  if (v50 >= v49 >> 1)
  {
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v48);
    uint64_t v48 = (void *)result;
    *(void *)(v24 + 16) = result;
  }
  v48[2] = v50 + 1;
  unint64_t v51 = &v48[4 * v50];
  v51[4] = v10;
  v51[5] = v9;
  v51[6] = v22;
  v51[7] = v23;
  return result;
}

void *specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(void *(*a1)(long long *__return_ptr, void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0) {
    return (void *)xmmword_182106C90;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v7 = HIBYTE(a4) & 0xF;
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v6 = v9;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v6 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v6 = (void *)_StringObject.sharedUTF8.getter();
  }
  unint64_t result = a1(&v10, v6, v7);
  if (!v4) {
    return (void *)v10;
  }
  return result;
}

uint64_t closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, a3);
}

uint64_t partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, *(void *)(v3 + 24), a3);
}

uint64_t _sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL9excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), a3);
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  if (a2 < 0) {
    __break(1u);
  }
  unint64_t v6 = (unsigned __int8 *)isStackAllocationSafe;
  if (a2 < 1025 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v7 = v13;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v9 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v13 - v8, v6, a2, a3, (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
    if (!v3) {
      return (uint64_t)v9;
    }
    swift_willThrow();

    __break(1u);
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    unint64_t v11 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v7, v6, a2, a3, (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
    if (!v3)
    {
      long long v10 = v11;
      MEMORY[0x185309510](v7, -1, -1);
      return (uint64_t)v10;
    }
  }

  uint64_t result = MEMORY[0x185309510](v7, -1, -1);
  __break(1u);
  return result;
}

void (*specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void)))(char *, void)
{
  *(void *)&v28[5] = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    uint64_t v9 = 0;
    return specialized String.init<A, B>(_validating:as:)(0, v9, a1);
  }
  uint64_t v7 = 0;
  LOBYTE(v8) = 0;
  uint64_t v9 = 0;
  long long v10 = &a2[a3];
  uint64_t v11 = a4 + 56;
  unint64_t v12 = a2;
  do
  {
    int v16 = *v12++;
    int v15 = v16;
    if (v16 == 37)
    {
      uint64_t result = 0;
      if (v7 || v12 == v10) {
        return result;
      }
      int v15 = *v12;
      if (v15 == 37) {
        return 0;
      }
      unint64_t v12 = a2 + 2;
      uint64_t v7 = 2;
    }
    else if (v7 <= 0)
    {
      *(unsigned char *)(a1 + v9) = v15;
      BOOL v17 = __OFADD__(v9++, 1);
      if (v17) {
        goto LABEL_108;
      }
      goto LABEL_9;
    }
    uint64_t result = 0;
    switch(v15)
    {
      case '0':
        __int16 v14 = 0;
        if (v7 == 1) {
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        goto LABEL_7;
      case '1':
        if (v7 == 1)
        {
          __int16 v14 = 1;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 16;
        goto LABEL_7;
      case '2':
        if (v7 == 1)
        {
          __int16 v14 = 2;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 32;
        goto LABEL_7;
      case '3':
        if (v7 == 1)
        {
          __int16 v14 = 3;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 48;
        goto LABEL_7;
      case '4':
        if (v7 == 1)
        {
          __int16 v14 = 4;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 64;
        goto LABEL_7;
      case '5':
        if (v7 == 1)
        {
          __int16 v14 = 5;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 80;
        goto LABEL_7;
      case '6':
        if (v7 == 1)
        {
          __int16 v14 = 6;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 96;
        goto LABEL_7;
      case '7':
        if (v7 == 1)
        {
          __int16 v14 = 7;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 112;
        goto LABEL_7;
      case '8':
        if (v7 == 1)
        {
          __int16 v14 = 8;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = 0x80;
        goto LABEL_7;
      case '9':
        if (v7 == 1)
        {
          __int16 v14 = 9;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = -112;
        goto LABEL_7;
      case 'A':
      case 'a':
        if (v7 == 1)
        {
          __int16 v14 = 10;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = -96;
        goto LABEL_7;
      case 'B':
      case 'b':
        if (v7 == 1)
        {
          __int16 v14 = 11;
          goto LABEL_83;
        }
        if (v7 == 2)
        {
          LOBYTE(v14) = -80;
          goto LABEL_7;
        }
        goto LABEL_8;
      case 'C':
      case 'c':
        if (v7 == 1)
        {
          __int16 v14 = 12;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = -64;
        goto LABEL_7;
      case 'D':
      case 'd':
        if (v7 == 1)
        {
          __int16 v14 = 13;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = -48;
        goto LABEL_7;
      case 'E':
      case 'e':
        if (v7 == 1)
        {
          __int16 v14 = 14;
          goto LABEL_83;
        }
        if (v7 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v14) = -32;
        goto LABEL_7;
      case 'F':
      case 'f':
        if (v7 == 1)
        {
          __int16 v14 = 15;
LABEL_83:
          __int16 v8 = v14 + v8;
          if ((v8 & 0x100) != 0) {
            goto LABEL_106;
          }
          if (!*(void *)(a4 + 16)) {
            goto LABEL_99;
          }
          uint64_t v18 = MEMORY[0x185303FF0](*(void *)(a4 + 40), v8, 1);
          uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
          unint64_t v20 = v18 & ~v19;
          if (((*(void *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_99;
          }
          uint64_t v21 = *(void *)(a4 + 48);
          if (*(unsigned __int8 *)(v21 + v20) != v8)
          {
            uint64_t v22 = ~v19;
            while (1)
            {
              unint64_t v20 = (v20 + 1) & v22;
              if (((*(void *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
                break;
              }
              if (*(unsigned __int8 *)(v21 + v20) == v8) {
                goto LABEL_90;
              }
            }
LABEL_99:
            *(unsigned char *)(a1 + v9) = v8;
            BOOL v17 = __OFADD__(v9++, 1);
            if (v17) {
              goto LABEL_107;
            }
            LOBYTE(v8) = 0;
            goto LABEL_8;
          }
LABEL_90:
          if (__OFADD__(v9, 2)) {
            goto LABEL_109;
          }
          if (v9 + 2 < v9) {
            goto LABEL_110;
          }
          LOBYTE(v26) = 37;
          HIBYTE(v26) = a5(v8 >> 4);
          char v27 = v15;
          if (a1)
          {
            unint64_t v23 = a1 + v9;
            if ((unint64_t)&v26 < a1 + v9 + 3 && v23 < (unint64_t)v28)
            {
              uint64_t result = (void (*)(char *, void))_fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            __int16 v24 = v26;
            *(unsigned char *)(v23 + 2) = v27;
            *(_WORD *)unint64_t v23 = v24;
          }
          BOOL v17 = __OFADD__(v9, 3);
          v9 += 3;
          if (v17) {
            goto LABEL_111;
          }
        }
        else if (v7 == 2)
        {
          LOBYTE(v14) = -16;
LABEL_7:
          LOBYTE(v8) = v14;
        }
LABEL_8:
        --v7;
        break;
      default:
        return result;
    }
LABEL_9:
    a2 = v12;
  }
  while (v12 != v10);
  if (!v7)
  {
    if (v9 < 0)
    {
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
    }
    return specialized String.init<A, B>(_validating:as:)(0, v9, a1);
  }
  return 0;
}

void (*specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2, uint64_t a3))(char *, void)
{
  uint64_t v5 = a1;
  unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (a2 - a1) & ~((a2 - a1) >> 63), 0, MEMORY[0x1E4FBC860]);
  unsigned int v7 = 0;
  unsigned __int8 v8 = 0;
  unsigned int v38 = 0;
  unsigned __int8 v39 = 0;
  uint64_t v9 = MEMORY[0x1E4FBC670];
  char v10 = 1;
  while (v8)
  {
    if ((v7 & 0x80) != 0) {
      goto LABEL_8;
    }
    lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
    uint64_t result = (void (*)(char *, void))Locale.Language.components.modify();
    char v32 = *(unsigned char *)(v31 + 4);
    if (!v32)
    {
      __break(1u);
      return result;
    }
    *(_DWORD *)v31 >>= 8;
    *(unsigned char *)(v31 + 4) = v32 - 8;
    result(v37, 0);
    unsigned int v13 = (v7 + 1);
    uint64_t v9 = MEMORY[0x1E4FBC670];
    if ((_BYTE)v7 != 0xFF) {
      goto LABEL_36;
    }
LABEL_2:
    unsigned __int8 v8 = v39;
    unsigned int v7 = v38;
  }
  if (v5 == a2) {
    goto LABEL_50;
  }
  int v11 = *(char *)(a3 + v5);
  int v12 = *(unsigned __int8 *)(a3 + v5++);
  if ((v11 & 0x80000000) == 0)
  {
    unsigned int v13 = v12 + 1;
LABEL_36:
    unint64_t v23 = *((void *)v6 + 2);
    do
    {
      unsigned int v24 = v13;
      while (1)
      {
        unint64_t v25 = *((void *)v6 + 3);
        if (v23 >= v25 >> 1)
        {
          char v27 = v6;
          uint64_t v28 = v9;
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v23 + 1, 1, v27);
          uint64_t v9 = v28;
          unint64_t v6 = v29;
        }
        unsigned int v13 = v24 >> 8;
        *((void *)v6 + 2) = v23 + 1;
        v6[v23 + 32] = v24 - 1;
        if ((v10 & ((char)(v24 - 1) < 0)) == 1) {
          break;
        }
        ++v23;
        BOOL v26 = v24 >= 0x100;
        v24 >>= 8;
        if (!v26) {
          goto LABEL_2;
        }
      }
      char v10 = 0;
      ++v23;
    }
    while (v24 >= 0x100);
    goto LABEL_2;
  }
  unsigned int v7 = v7 & 0xFFFFFF00 | v12;
  unsigned __int8 v8 = 8;
LABEL_8:
  if (v5 == a2)
  {
    unsigned __int8 v14 = v8;
    uint64_t v5 = a2;
    goto LABEL_24;
  }
  uint64_t v15 = v5 + 1;
  unsigned int v7 = (*(unsigned __int8 *)(a3 + v5) << v8) | ((-255 << v8) - 1) & v7;
  unsigned __int8 v14 = v8 + 8;
  if ((v8 + 8) > 0x1Fu) {
    goto LABEL_23;
  }
  if (v15 != a2)
  {
    char v16 = v8 + 8;
    int v17 = *(unsigned __int8 *)(a3 + v15);
    uint64_t v15 = v5 + 2;
    unsigned int v7 = ((-255 << v14) - 1) & v7 | (v17 << v14);
    unsigned __int8 v18 = v8 + 16;
    if ((v8 + 8) < 0x18u)
    {
      if (v15 == a2)
      {
LABEL_16:
        unsigned __int8 v14 = v18;
        uint64_t v5 = a2;
        goto LABEL_24;
      }
      int v19 = *(unsigned __int8 *)(a3 + v15);
      uint64_t v15 = v5 + 3;
      unsigned int v7 = ((-65280 << v16) - 1) & v7 | (v19 << v18);
      unsigned __int8 v18 = v8 + 24;
      if ((v8 + 8) <= 0xFu)
      {
        if (v15 == a2) {
          goto LABEL_16;
        }
        int v20 = *(unsigned __int8 *)(a3 + v15);
        uint64_t v15 = v5 + 4;
        unsigned int v7 = ((-16711680 << v16) - 1) & v7 | (v20 << v18);
        unsigned __int8 v18 = v8 + 32;
        if (v8 >= 0xF8u)
        {
          if (v15 == a2) {
            goto LABEL_16;
          }
          int v21 = *(unsigned __int8 *)(a3 + v15);
          uint64_t v15 = v5 + 5;
          unsigned int v7 = ((0x1000000 << v16) - 1) & v7 | (v21 << v18);
          unsigned __int8 v18 = v16 + 32;
        }
      }
    }
    unsigned __int8 v14 = v18;
LABEL_23:
    uint64_t v5 = v15;
LABEL_24:
    if ((v7 & 0xC0E0) == 0x80C0)
    {
      if ((v7 & 0x1E) == 0) {
        goto LABEL_49;
      }
      unsigned int v22 = 16;
    }
    else if ((v7 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v7 & 0x200F) == 0 || (v7 & 0x200F) == 0x200D) {
        goto LABEL_49;
      }
      unsigned int v22 = 24;
    }
    else
    {
      if ((v7 & 0xC0C0C0F8) != 0x808080F0 || (v7 & 0x3007) == 0 || __rev16(v7 & 0x3007) > 0x400)
      {
LABEL_49:
        Swift::UInt8 v33 = Unicode.UTF8.ForwardParser._invalidLength()();
        unsigned int v38 = (unint64_t)v7 >> ((8 * v33) & 0x38);
        unsigned __int8 v39 = v14 - 8 * v33;
        swift_bridgeObjectRelease();
        return 0;
      }
      unsigned int v22 = 32;
    }
    unsigned int v38 = (unint64_t)v7 >> v22;
    unsigned __int8 v39 = v14 - v22;
    unsigned int v13 = ((1 << (v22 >> 1) << (v22 >> 1)) - 1) & (v7 + 16843009);
    if (v13) {
      goto LABEL_36;
    }
    goto LABEL_2;
  }
  uint64_t v5 = a2;
  if (v8 != 0xF8) {
    goto LABEL_24;
  }
LABEL_50:
  swift_bridgeObjectRetain();
  uint64_t v34 = static String._tryFromUTF8(_:)();
  uint64_t v36 = v35;
  swift_bridgeObjectRelease_n();
  if (v36) {
    return (void (*)(char *, void))v34;
  }
  else {
    return 0;
  }
}

id StringProtocol.caseInsensitiveCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_caseInsensitiveCompare_);
}

uint64_t type metadata accessor for NSObject.KeyValueObservingPublisher()
{
  return __swift_instantiateGenericMetadata();
}

char *specialized withVaList<A>(_:_:)(uint64_t a1)
{
  type metadata accessor for __VaListBuilder();
  unint64_t v2 = (void *)swift_allocObject();
  v2[2] = 8;
  v2[3] = 0;
  uint64_t v3 = v2 + 3;
  v2[4] = 0;
  v2[5] = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_25:
    va_list v20 = (va_list)__VaListBuilder.va_list()();
    int v21 = (NSString *)String._bridgeToObjectiveCImpl()();
    NSLogv(v21, v20);
    swift_bridgeObjectRelease();
    swift_release();
    return (char *)swift_unknownObjectRelease();
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v6 + 40 * v5, (uint64_t)v22);
    __swift_project_boxed_opaque_existential_1(v22, v22[3]);
    uint64_t result = (char *)dispatch thunk of CVarArg._cVarArgEncoding.getter();
    uint64_t v8 = *v3;
    uint64_t v9 = *((void *)result + 2);
    BOOL v10 = __OFADD__(*v3, v9);
    uint64_t v11 = *v3 + v9;
    if (v10) {
      break;
    }
    int v12 = result;
    uint64_t v13 = v2[4];
    if (v13 >= v11) {
      goto LABEL_18;
    }
    if (v13 + 0x4000000000000000 < 0) {
      goto LABEL_28;
    }
    unsigned __int8 v14 = (char *)v2[5];
    if (2 * v13 > v11) {
      uint64_t v11 = 2 * v13;
    }
    v2[4] = v11;
    if ((unint64_t)(v11 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_29;
    }
    uint64_t result = (char *)swift_slowAlloc();
    v2[5] = result;
    if (v14)
    {
      if (result != v14 || result >= &v14[8 * v8]) {
        memmove(result, v14, 8 * v8);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t result = (char *)v2[5];
    }
    if (!result) {
      goto LABEL_30;
    }
    uint64_t v16 = *((void *)v12 + 2);
    if (v16)
    {
      int v17 = (uint64_t *)(v12 + 32);
      uint64_t v18 = *v3;
      while (1)
      {
        uint64_t v19 = *v17++;
        *(void *)&result[8 * v18] = v19;
        uint64_t v18 = *v3 + 1;
        if (__OFADD__(*v3, 1)) {
          break;
        }
        *uint64_t v3 = v18;
        if (!--v16) {
          goto LABEL_3;
        }
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v5;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    if (v5 == v4) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void NSLog(NSString *format, ...)
{
}

uint64_t _NSLogv()
{
  _CFAutoreleasePoolPush();
  _CFLogvEx3();

  return _CFAutoreleasePoolPop();
}

void NSLogv(NSString *format, va_list args)
{
}

uint64_t readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, off_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, char **a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v440 = a6;
  v441 = a8;
  id v445 = a5;
  LODWORD(v444) = a4;
  off_t v443 = a3;
  int v442 = a2;
  uint64_t v456 = *MEMORY[0x1E4F143B8];
  BOOL v10 = *(void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  int v12 = *(uint64_t (**)(void))(a1 + 16);
  int v13 = *(unsigned __int8 *)(a1 + 24);
  v439 = a7;
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v19 = (uint64_t)v10;
    uint64_t f_blocks = v11;
    goto LABEL_28;
  }
  swift_retain_n();
  id v14 = v10;
  swift_retain_n();
  uint64_t v15 = (void **)v14;
  id v449 = (id)v9;
  if ((_foundation_swift_url_feature_enabled() & 1) == 0)
  {
    id v21 = objc_msgSend(v15, sel__parameterString);
    if (v21)
    {
      unsigned int v22 = v21;
      id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      unint64_t v25 = v24;

      if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        || (id v26 = objc_msgSend(v15, sel_path)) == 0)
      {
        *(void *)&v455.uint64_t f_bsize = 59;
        v455.uint64_t f_blocks = 0xE100000000000000;
        v44._uint64_t countAndFlagsBits = (uint64_t)v23;
        v44.___darwin_ino64_t object = v25;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        uint64_t v19 = 59;
        uint64_t f_blocks = 0xE100000000000000;
        goto LABEL_26;
      }
      char v27 = v26;
      v447 = v10;
      v448 = v12;
      id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v11;
      int v30 = v13;
      uint64_t v32 = v31;

      *(void *)&v455.uint64_t f_bsize = v28;
      v455.uint64_t f_blocks = v32;
      swift_bridgeObjectRetain();
      v33._uint64_t countAndFlagsBits = 59;
      v33.___darwin_ino64_t object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      int v13 = v30;
      uint64_t v11 = v29;
      BOOL v10 = v447;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = (uint64_t)v23;
      v34.___darwin_ino64_t object = v25;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      int v12 = v448;
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v447, v11, (uint64_t)v448, 1);
      uint64_t v19 = *(void *)&v455.f_bsize;
      uint64_t f_blocks = v455.f_blocks;
    }
    else
    {
      id v45 = objc_msgSend(v15, sel_path);
      if (!v45)
      {
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        swift_release();
        swift_release();

        uint64_t v19 = 0;
        uint64_t f_blocks = 0xE000000000000000;
        goto LABEL_27;
      }
      unint64_t v46 = v45;
      uint64_t v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t f_blocks = v47;

      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    }
    outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    goto LABEL_26;
  }
  v455.f_bfree = (uint64_t)v12;
  uint64_t v15 = v15;
  swift_retain();
  v448 = v12;
  swift_retain();
  Swift::String v16 = URL.path(percentEncoded:)(1);
  uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  *(void *)&v455.uint64_t f_bsize = v16._countAndFlagsBits;
  v455.uint64_t f_blocks = (uint64_t)v16._object;
  swift_bridgeObjectRetain();
  v447 = v10;
  LODWORD(v446) = v13;
  if (String.count.getter() <= 1)
  {
    __darwin_ino64_t object = (__darwin_ino64_t)v16._object;
  }
  else
  {
    __darwin_ino64_t object = (__darwin_ino64_t)v16._object;
    if ((specialized BidirectionalCollection.last.getter(v16._countAndFlagsBits, (unint64_t)v16._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
      __darwin_ino64_t object = v455.f_blocks;
    }
  }
  *(void *)&v452.uint64_t st_dev = Set.init(minimumCapacity:)();
  uint64_t v35 = specialized Set._Variant.insert(_:)(&v453, 0x2FuLL);
  uint64_t v36 = *(void *)&v452.st_dev;
  uint64_t v37 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v37 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v37)
  {
    v438 = v15;
    *(void *)&v452.uint64_t st_dev = countAndFlagsBits;
    v452.__darwin_ino64_t st_ino = object;
    MEMORY[0x1F4188790](v35);
    uint64_t v435 = (uint64_t)&v452;
    uint64_t v436 = v36;
    swift_bridgeObjectRetain();
    id v38 = v449;
    unsigned __int8 v39 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v434, countAndFlagsBits, object);
    id v449 = v38;
    if (v40 == 1)
    {
      Swift::Int v41 = *(void *)&v452.st_dev;
      __darwin_ino64_t st_ino = v452.st_ino;
      swift_bridgeObjectRetain();
      uint64_t v19 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v41, st_ino, v36);
      uint64_t f_blocks = v43;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = (uint64_t)v39;
      uint64_t f_blocks = v40;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v13 = v446;
    BOOL v10 = v447;
    uint64_t v15 = v438;
    if (!f_blocks)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v12 = v448;
      outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      swift_release();
      swift_release();

      uint64_t v19 = 0;
      uint64_t f_blocks = 0xE000000000000000;
      goto LABEL_26;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    uint64_t f_blocks = 0xE000000000000000;
    BOOL v10 = v447;
    int v13 = v446;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v12 = v448;
  outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
  swift_release();
  swift_release();

LABEL_26:
  swift_release();
  swift_release();

LABEL_27:
  uint64_t v9 = (uint64_t)v449;
LABEL_28:
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, v13);
  uint64_t v48 = HIBYTE(f_blocks) & 0xF;
  if ((f_blocks & 0x2000000000000000) == 0) {
    uint64_t v48 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v48)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v67 = objc_allocWithZone((Class)NSError);
    uint64_t v68 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v69 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, 258, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    int v12 = (uint64_t (*)(void))objc_msgSend(v69, sel_domain);
    id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v72 = v71;

    if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v72 == v73)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
      {
        __break(1u);
        goto LABEL_47;
      }
    }
    return swift_willThrow();
  }
  LODWORD(v446) = v13;
  if ((v13 & 1) == 0)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    id v64 = v10;
    uint64_t v66 = v11;
    goto LABEL_65;
  }
  swift_retain_n();
  id v49 = v10;
  swift_retain_n();
  id v50 = v49;
  char v51 = _foundation_swift_url_feature_enabled();
  id v449 = (id)v9;
  if ((v51 & 1) == 0)
  {
    id v76 = objc_msgSend(v50, sel__parameterString);
    if (v76)
    {
      unint64_t v77 = v76;
      id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
      id v80 = v79;

      if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        || (id v81 = objc_msgSend(v50, sel_path)) == 0)
      {
        *(void *)&v455.uint64_t f_bsize = 59;
        v455.uint64_t f_blocks = 0xE100000000000000;
        v89._uint64_t countAndFlagsBits = (uint64_t)v78;
        v89.___darwin_ino64_t object = v80;
        String.append(_:)(v89);
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        id v64 = *(id *)&v455.f_bsize;
        uint64_t v66 = v455.f_blocks;
        goto LABEL_63;
      }
      uint64_t v82 = v81;
      id v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v448 = v12;
      id v84 = v83;
      uint64_t v86 = v85;

      *(void *)&v455.uint64_t f_bsize = v84;
      v455.uint64_t f_blocks = v86;
      swift_bridgeObjectRetain();
      v87._uint64_t countAndFlagsBits = 59;
      v87.___darwin_ino64_t object = (void *)0xE100000000000000;
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v88._uint64_t countAndFlagsBits = (uint64_t)v78;
      v88.___darwin_ino64_t object = v80;
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      int v12 = v448;
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      id v64 = *(id *)&v455.f_bsize;
      uint64_t v66 = v455.f_blocks;
    }
    else
    {
      id v90 = objc_msgSend(v50, sel_path);
      if (!v90)
      {
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        swift_release();
        swift_release();

        id v64 = 0;
        uint64_t v66 = 0xE000000000000000;
        goto LABEL_64;
      }
      id v91 = v90;
      id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      uint64_t v66 = v92;

      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    }
    outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    goto LABEL_63;
  }
  v447 = v10;
  *(void *)&v455.uint64_t f_bsize = v50;
  v455.uint64_t f_blocks = v11;
  v455.f_bfree = (uint64_t)v12;
  id v50 = v50;
  swift_retain();
  v448 = v12;
  swift_retain();
  Swift::String v52 = URL.path(percentEncoded:)(1);
  *(void *)&v455.uint64_t f_bsize = v52._countAndFlagsBits;
  v455.uint64_t f_blocks = (uint64_t)v52._object;
  swift_bridgeObjectRetain();
  if (String.count.getter() > 1
    && (specialized BidirectionalCollection.last.getter(v52._countAndFlagsBits, (unint64_t)v52._object) & 0x1FF) == 0x2F)
  {
    specialized RangeReplaceableCollection<>.popLast()();
    swift_bridgeObjectRelease();
  }
  *(void *)&v452.uint64_t st_dev = Set.init(minimumCapacity:)();
  uint64_t v53 = specialized Set._Variant.insert(_:)(&v453, 0x2FuLL);
  uint64_t v54 = *(void *)&v452.st_dev;
  uint64_t v55 = *(void *)&v455.f_bsize;
  uint64_t v56 = v455.f_blocks;
  uint64_t v57 = HIBYTE(v455.f_blocks) & 0xF;
  if ((v455.f_blocks & 0x2000000000000000) == 0) {
    uint64_t v57 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
  }
  if (v57)
  {
    *(void *)&v452.uint64_t st_dev = *(void *)&v455.f_bsize;
    v452.__darwin_ino64_t st_ino = v455.f_blocks;
    MEMORY[0x1F4188790](v53);
    uint64_t v435 = (uint64_t)&v452;
    uint64_t v436 = v54;
    swift_bridgeObjectRetain();
    uint64_t v58 = v55;
    id v59 = v449;
    uint64_t v60 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v434, v58, v56);
    id v449 = v59;
    if (v61 == 1)
    {
      Swift::Int v62 = *(void *)&v452.st_dev;
      __darwin_ino64_t v63 = v452.st_ino;
      swift_bridgeObjectRetain();
      id v64 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v62, v63, v54);
      uint64_t v66 = v65;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v64 = v60;
      uint64_t v66 = v61;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v10 = v447;
    if (!v66)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v12 = v448;
      outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      swift_release();
      swift_release();

      id v64 = 0;
      uint64_t v66 = 0xE000000000000000;
      goto LABEL_63;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    id v64 = 0;
    uint64_t v66 = 0xE000000000000000;
    BOOL v10 = v447;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v12 = v448;
  outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
  swift_release();
  swift_release();

LABEL_63:
  swift_release();
  swift_release();

LABEL_64:
  uint64_t v9 = (uint64_t)v449;
LABEL_65:
  uint64_t v93 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v64, v66);
  if (v9) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v94 = v93;
  uint64_t v95 = swift_bridgeObjectRelease();
  if ((v94 & 0x80000000) != 0)
  {
    dev_t v101 = MEMORY[0x185301870](v95);
    dev_t v102 = v101;
    v447 = v10;
    if (v446)
    {
      v448 = v12;
      uint64_t v103 = 263;
      switch(v101)
      {
        case 1:
        case 13:
          uint64_t v103 = 257;
          goto LABEL_229;
        case 2:
          uint64_t v103 = 260;
          goto LABEL_229;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_147;
        case 27:
          goto LABEL_229;
        default:
          if (v101 == 63)
          {
            uint64_t v103 = 258;
          }
          else
          {
            if (v101 == 102)
            {
              swift_retain_n();
              id v143 = v10;
              swift_retain_n();
              id v144 = v143;
              id v449 = 0;
              uint64_t v446 = 256;
              goto LABEL_235;
            }
LABEL_147:
            uint64_t v103 = 256;
          }
LABEL_229:
          uint64_t v446 = v103;
          swift_retain_n();
          id v271 = v10;
          swift_retain_n();
          id v272 = v271;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v273 = (int)POSIXErrorCode.rawValue.getter();
            id v274 = objc_allocWithZone((Class)NSError);
            uint64_t v275 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v276 = objc_msgSend(v274, sel_initWithDomain_code_userInfo_, v275, v273, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v449 = v276;
            id v277 = objc_msgSend(v276, sel_domain);
            id v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(v277);
            uint64_t v280 = v279;

            if (v278 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v280 == v281)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v282 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v282 & 1) == 0)
              {
LABEL_372:
                __break(1u);
                goto LABEL_373;
              }
            }
            BOOL v10 = v447;
            int v12 = v448;
LABEL_235:
            id v283 = v10;
            swift_retain();
            swift_retain();
            if (!_foundation_swift_url_feature_enabled())
            {
              id v296 = objc_msgSend(v283, sel__parameterString);
              if (v296)
              {
                v297 = v296;
                id v298 = static String._unconditionallyBridgeFromObjectiveC(_:)(v296);
                v300 = v299;

                int Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
                id v302 = v449;
                if (Enum && (id v303 = objc_msgSend(v283, sel_path)) != 0)
                {
                  v304 = v303;
                  id v305 = static String._unconditionallyBridgeFromObjectiveC(_:)(v303);
                  uint64_t v307 = v306;

                  *(void *)&v455.uint64_t f_bsize = v305;
                  v455.uint64_t f_blocks = v307;
                  swift_bridgeObjectRetain();
                  v308._uint64_t countAndFlagsBits = 59;
                  v308.___darwin_ino64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v308);
                  id v302 = v449;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v309._uint64_t countAndFlagsBits = (uint64_t)v298;
                  v309.___darwin_ino64_t object = v300;
                  String.append(_:)(v309);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  *(void *)&v455.uint64_t f_bsize = 59;
                  v455.uint64_t f_blocks = 0xE100000000000000;
                  v310._uint64_t countAndFlagsBits = (uint64_t)v298;
                  v310.___darwin_ino64_t object = v300;
                  String.append(_:)(v310);
                }
                swift_bridgeObjectRelease();
                v311 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
              }
              else
              {
                id v312 = objc_msgSend(v283, sel_path);
                id v302 = v449;
                if (v312)
                {
                  v313 = v312;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
                  v311 = v12;

                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                }
                else
                {
                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                  v311 = v12;
                }
              }
              goto LABEL_270;
            }
            *(void *)&v455.uint64_t f_bsize = v283;
            v455.uint64_t f_blocks = v11;
            v455.f_bfree = (uint64_t)v12;
            id v284 = v283;
            swift_retain();
            swift_retain();
            Swift::String v285 = URL.path(percentEncoded:)(1);
            *(void *)&v455.uint64_t f_bsize = v285._countAndFlagsBits;
            v455.uint64_t f_blocks = (uint64_t)v285._object;
            swift_bridgeObjectRetain();
            if (String.count.getter() > 1
              && (specialized BidirectionalCollection.last.getter(v285._countAndFlagsBits, (unint64_t)v285._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }
            *(void *)&v452.uint64_t st_dev = Set.init(minimumCapacity:)();
            uint64_t v286 = specialized Set._Variant.insert(_:)(&v453, 0x2FuLL);
            uint64_t v287 = *(void *)&v452.st_dev;
            uint64_t v288 = *(void *)&v455.f_bsize;
            uint64_t v289 = v455.f_blocks;
            uint64_t v290 = HIBYTE(v455.f_blocks) & 0xF;
            if ((v455.f_blocks & 0x2000000000000000) == 0) {
              uint64_t v290 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
            }
            if (v290)
            {
              id v445 = (id)v11;
              *(void *)&v452.uint64_t st_dev = *(void *)&v455.f_bsize;
              v452.__darwin_ino64_t st_ino = v455.f_blocks;
              MEMORY[0x1F4188790](v286);
              uint64_t v435 = (uint64_t)&v452;
              uint64_t v436 = v287;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v434, v288, v289);
              if (v291 == 1)
              {
                Swift::Int v292 = *(void *)&v452.st_dev;
                __darwin_ino64_t v293 = v452.st_ino;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v292, v293, v287);
                uint64_t v295 = v294;
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v295 = v291;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = (uint64_t)v445;
              id v302 = v449;
              BOOL v10 = v447;
              if (!v295)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v332 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
                outlined consume of PathOrURL(v10, v11, (uint64_t)v332, 1);
                goto LABEL_269;
              }
              id v445 = v283;
            }
            else
            {
              id v445 = v283;
              swift_bridgeObjectRelease();
              BOOL v10 = v447;
              id v302 = v449;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v314 = v448;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
            outlined consume of PathOrURL(v10, v11, (uint64_t)v314, 1);
            id v283 = v445;
LABEL_269:
            v311 = v448;
LABEL_270:
            uint64_t v333 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v334 = v283;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v311, 1);
            if (v302)
            {
              *(void *)&v455.uint64_t f_bsize = v302;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              id v335 = v302;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }
              else
              {
                swift_allocError();
                void *v337 = v335;
              }
              id v449 = v335;
              v336 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }
            else
            {
              v336 = 0;
            }
            objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v446, v333, v334, v336, 0, 0, 0);

            swift_unknownObjectRelease();
            outlined consume of PathOrURL(v10, v11, (uint64_t)v311, 1);
            return swift_willThrow();
          }
          break;
      }
LABEL_380:
      *(void *)&v455.uint64_t f_bsize = 0;
      v455.uint64_t f_blocks = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&v455.uint64_t f_bsize = 0xD000000000000014;
      v455.uint64_t f_blocks = 0x80000001823A9780;
      v452.uint64_t st_dev = v102;
      goto LABEL_381;
    }
    uint64_t v123 = 263;
    switch(v101)
    {
      case 1:
      case 13:
        uint64_t v123 = 257;
        goto LABEL_258;
      case 2:
        uint64_t v123 = 260;
        goto LABEL_258;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_148;
      case 27:
        goto LABEL_258;
      default:
        if (v101 == 63)
        {
          uint64_t v123 = 258;
        }
        else
        {
          if (v101 == 102)
          {
            id v145 = 0;
            uint64_t v123 = 256;
LABEL_263:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v123, (uint64_t)v10, v11, v145, 0, 0, 0, 0, &v455, 0, 0);
            return swift_willThrow();
          }
LABEL_148:
          uint64_t v123 = 256;
        }
LABEL_258:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_380;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v315 = (int)POSIXErrorCode.rawValue.getter();
        id v316 = objc_allocWithZone((Class)NSError);
        uint64_t v317 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v145 = objc_msgSend(v316, sel_initWithDomain_code_userInfo_, v317, v315, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v318 = objc_msgSend(v145, sel_domain);
        id v319 = static String._unconditionallyBridgeFromObjectiveC(_:)(v318);
        uint64_t v321 = v320;

        if (v319 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v321 == v322)
        {
          swift_bridgeObjectRelease_n();
          BOOL v10 = v447;
        }
        else
        {
          char v323 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v10 = v447;
          if ((v323 & 1) == 0)
          {
LABEL_373:
            __break(1u);
            goto LABEL_374;
          }
        }
        goto LABEL_263;
    }
  }
  char v96 = (char)v445;
  if ((v445 & 2) != 0) {
    MEMORY[0x185301890](v94, 48, 1);
  }
  memset(&v452, 0, 28);
  memset(&v452.st_atimespec, 0, 112);
  int v97 = fstat(v94, &v452);
  LODWORD(v449) = v94;
  if (v97)
  {
    Swift::Int32 v98 = MEMORY[0x185301870]();
    Swift::Int32 st_mode = v98;
    v447 = v10;
    if (v446)
    {
      v448 = v12;
      uint64_t v100 = 263;
      switch(v98)
      {
        case 1:
        case 13:
          uint64_t v100 = 257;
          goto LABEL_175;
        case 2:
          uint64_t v100 = 260;
          goto LABEL_175;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_145;
        case 27:
          goto LABEL_175;
        default:
          if (v98 == 63)
          {
            uint64_t v100 = 258;
          }
          else
          {
            if (v98 == 102)
            {
              swift_retain_n();
              id v140 = v10;
              swift_retain_n();
              id v141 = v140;
              uint64_t v446 = 0;
              uint64_t v444 = 256;
              goto LABEL_181;
            }
LABEL_145:
            uint64_t v100 = 256;
          }
LABEL_175:
          uint64_t v444 = v100;
          swift_retain_n();
          id v207 = v10;
          swift_retain_n();
          id v208 = v207;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_379;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v209 = (int)POSIXErrorCode.rawValue.getter();
          id v210 = objc_allocWithZone((Class)NSError);
          uint64_t v211 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v212 = objc_msgSend(v210, sel_initWithDomain_code_userInfo_, v211, v209, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v446 = (uint64_t)v212;
          id v213 = objc_msgSend(v212, sel_domain);
          id v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
          uint64_t v216 = v215;

          if (v214 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v216 == v217)
          {
            swift_bridgeObjectRelease_n();
LABEL_180:
            BOOL v10 = v447;
            int v12 = v448;
LABEL_181:
            id v219 = v10;
            swift_retain();
            swift_retain();
            if (!_foundation_swift_url_feature_enabled())
            {
              id v232 = objc_msgSend(v219, sel__parameterString);
              if (v232)
              {
                uint64_t v233 = v232;
                id v234 = static String._unconditionallyBridgeFromObjectiveC(_:)(v232);
                uint64_t v236 = v235;

                int v237 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
                id v238 = (id)v446;
                if (v237 && (id v239 = objc_msgSend(v219, sel_path)) != 0)
                {
                  unint64_t v240 = v239;
                  id v241 = static String._unconditionallyBridgeFromObjectiveC(_:)(v239);
                  uint64_t v243 = v242;

                  *(void *)&v455.uint64_t f_bsize = v241;
                  v455.uint64_t f_blocks = v243;
                  swift_bridgeObjectRetain();
                  v244._uint64_t countAndFlagsBits = 59;
                  v244.___darwin_ino64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v244);
                  id v238 = (id)v446;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v245._uint64_t countAndFlagsBits = (uint64_t)v234;
                  v245.___darwin_ino64_t object = v236;
                  String.append(_:)(v245);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  *(void *)&v455.uint64_t f_bsize = 59;
                  v455.uint64_t f_blocks = 0xE100000000000000;
                  v246._uint64_t countAndFlagsBits = (uint64_t)v234;
                  v246.___darwin_ino64_t object = v236;
                  String.append(_:)(v246);
                }
                swift_bridgeObjectRelease();
                uint64_t v247 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
              }
              else
              {
                id v248 = objc_msgSend(v219, sel_path);
                id v238 = (id)v446;
                if (v248)
                {
                  uint64_t v249 = v248;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
                  uint64_t v247 = v12;

                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                }
                else
                {
                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                  uint64_t v247 = v12;
                }
              }
              goto LABEL_217;
            }
            *(void *)&v455.uint64_t f_bsize = v219;
            v455.uint64_t f_blocks = v11;
            v455.f_bfree = (uint64_t)v12;
            id v220 = v219;
            swift_retain();
            swift_retain();
            Swift::String v221 = URL.path(percentEncoded:)(1);
            *(void *)&v455.uint64_t f_bsize = v221._countAndFlagsBits;
            v455.uint64_t f_blocks = (uint64_t)v221._object;
            swift_bridgeObjectRetain();
            if (String.count.getter() > 1
              && (specialized BidirectionalCollection.last.getter(v221._countAndFlagsBits, (unint64_t)v221._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }
            v453._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
            uint64_t v222 = specialized Set._Variant.insert(_:)(&v450, 0x2FuLL);
            uint64_t v223 = v453._countAndFlagsBits;
            uint64_t v224 = *(void *)&v455.f_bsize;
            uint64_t v225 = v455.f_blocks;
            uint64_t v226 = HIBYTE(v455.f_blocks) & 0xF;
            if ((v455.f_blocks & 0x2000000000000000) == 0) {
              uint64_t v226 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
            }
            if (v226)
            {
              id v445 = (id)v11;
              v453._uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
              v453.___darwin_ino64_t object = (void *)v455.f_blocks;
              MEMORY[0x1F4188790](v222);
              uint64_t v435 = (uint64_t)&v453;
              uint64_t v436 = v223;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v434, v224, v225);
              if (v227 == 1)
              {
                Swift::Int v228 = v453._countAndFlagsBits;
                int64_t v229 = v453._object;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v228, (unint64_t)v229, v223);
                uint64_t v231 = v230;
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v231 = v227;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = (uint64_t)v445;
              id v238 = (id)v446;
              BOOL v10 = v447;
              if (!v231)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                long long v261 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
                outlined consume of PathOrURL(v10, v11, (uint64_t)v261, 1);
                goto LABEL_216;
              }
              id v445 = v219;
            }
            else
            {
              id v445 = v219;
              swift_bridgeObjectRelease();
              id v238 = (id)v446;
              BOOL v10 = v447;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v250 = v448;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
            outlined consume of PathOrURL(v10, v11, (uint64_t)v250, 1);
            id v219 = v445;
LABEL_216:
            uint64_t v247 = v448;
LABEL_217:
            uint64_t v262 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v263 = v219;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v247, 1);
            if (v238)
            {
              *(void *)&v455.uint64_t f_bsize = v238;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              id v264 = v238;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }
              else
              {
                swift_allocError();
                *uint64_t v266 = v264;
              }
              uint64_t v446 = (uint64_t)v264;
              uint64_t v265 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }
            else
            {
              uint64_t v265 = 0;
            }
            objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v444, v262, v263, v265, 0, 0, 0);

            swift_unknownObjectRelease();
            uint64_t v267 = v10;
            uint64_t v268 = v11;
            uint64_t v269 = v247;
            goto LABEL_224;
          }
          char v218 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v218) {
            goto LABEL_180;
          }
          __break(1u);
          break;
      }
      goto LABEL_371;
    }
    uint64_t v122 = 263;
    switch(v98)
    {
      case 1:
      case 13:
        uint64_t v122 = 257;
        goto LABEL_204;
      case 2:
        uint64_t v122 = 260;
        goto LABEL_204;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_146;
      case 27:
        goto LABEL_204;
      default:
        if (v98 == 63)
        {
          uint64_t v122 = 258;
        }
        else
        {
          if (v98 == 102)
          {
            id v142 = 0;
            uint64_t v122 = 256;
            goto LABEL_210;
          }
LABEL_146:
          uint64_t v122 = 256;
        }
LABEL_204:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_379;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v251 = (int)POSIXErrorCode.rawValue.getter();
        id v252 = objc_allocWithZone((Class)NSError);
        uint64_t v253 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v142 = objc_msgSend(v252, sel_initWithDomain_code_userInfo_, v253, v251, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v254 = objc_msgSend(v142, sel_domain);
        id v255 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
        uint64_t v257 = v256;

        if (v255 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v257 != v258)
        {
          char v259 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v10 = v447;
          LODWORD(v94) = v449;
          if ((v259 & 1) == 0)
          {
LABEL_371:
            __break(1u);
            goto LABEL_372;
          }
LABEL_210:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v122, (uint64_t)v10, v11, v142, 0, 0, 0, 0, &v455, 0, 0);
LABEL_225:
          swift_willThrow();
          goto LABEL_226;
        }
        swift_bridgeObjectRelease_n();
        BOOL v10 = v447;
        break;
    }
LABEL_208:
    LODWORD(v94) = v449;
    goto LABEL_210;
  }
  off_t st_size = v452.st_size;
  off_t v105 = v443;
  if (v452.st_size < v443) {
    off_t v105 = v452.st_size;
  }
  if ((v444 & 1) == 0) {
    off_t st_size = v105;
  }
  uint64_t v444 = st_size;
  char v106 = v96;
  Swift::Int32 st_mode = v452.st_mode;
  __int16 v107 = S_IFMT.getter();
  if ((v106 & 8) != 0)
  {
    BOOL IsSafeForMapping = 1;
    goto LABEL_103;
  }
  if ((v106 & 1) == 0
    || fcntl(_:_:)(v94, 63) < 0
    || (bzero(&v455, 0x878uLL), fstatfs(v94, &v455))
    || (v455.f_flags & 0x1200) != 0x1000)
  {
    BOOL IsSafeForMapping = 0;
    goto LABEL_103;
  }
  v447 = v10;
  v448 = v12;
  if (v446)
  {
    swift_retain_n();
    id v108 = v10;
    swift_retain_n();
    id v109 = v108;
    if (_foundation_swift_url_feature_enabled())
    {
      v453._uint64_t countAndFlagsBits = (uint64_t)v109;
      v453.___darwin_ino64_t object = (void *)v11;
      v454 = v12;
      v438 = (void **)v109;
      swift_retain();
      swift_retain();
      Swift::String v110 = URL.path(percentEncoded:)(1);
      Swift::String v453 = v110;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v110._countAndFlagsBits, (unint64_t)v110._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v437 = v110._object;
      v450._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v111 = specialized Set._Variant.insert(_:)(&v451, 0x2FuLL);
      uint64_t v112 = v450._countAndFlagsBits;
      uint64_t v113 = v453._countAndFlagsBits;
      uint64_t v114 = v453._object;
      unint64_t v115 = ((unint64_t)v453._object >> 56) & 0xF;
      if (((uint64_t)v453._object & 0x2000000000000000) == 0) {
        unint64_t v115 = v453._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v115)
      {
        id v445 = (id)v11;
        Swift::String v450 = v453;
        MEMORY[0x1F4188790](v111);
        uint64_t v435 = (uint64_t)&v450;
        uint64_t v436 = v112;
        swift_bridgeObjectRetain();
        char v116 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v434, v113, (unint64_t)v114);
        off_t v443 = v117;
        if (v117 == 1)
        {
          unint64_t v119 = (unint64_t)v450._object;
          Swift::Int v118 = v450._countAndFlagsBits;
          swift_bridgeObjectRetain();
          uint64_t v120 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v118, v119, v112);
          off_t v443 = v121;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v120 = (uint64_t)v116;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v427 = v438;
        uint64_t v11 = (uint64_t)v445;
        v426 = v447;
        if (!v443)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v432 = v448;
          outlined consume of PathOrURL(v426, v11, (uint64_t)v448, 1);
          outlined consume of PathOrURL(v426, v11, (uint64_t)v432, 1);
          swift_release();
          swift_release();

          uint64_t v120 = 0;
          off_t v443 = 0xE000000000000000;
LABEL_367:
          swift_release();
          swift_release();

          if ((v443 & 0x1000000000000000) != 0) {
            goto LABEL_368;
          }
          goto LABEL_327;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v120 = 0;
        off_t v443 = 0xE000000000000000;
        v426 = v447;
        v427 = v438;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v431 = v448;
      outlined consume of PathOrURL(v426, v11, (uint64_t)v448, 1);
      outlined consume of PathOrURL(v426, v11, (uint64_t)v431, 1);
      swift_release();
      swift_release();

      goto LABEL_367;
    }
    id v410 = objc_msgSend(v109, sel__parameterString);
    id v445 = v109;
    if (v410)
    {
      v411 = v410;
      off_t v443 = (off_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v410);
      v413 = v412;

      if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        || (id v414 = objc_msgSend(v445, sel_path)) == 0)
      {
        v453._uint64_t countAndFlagsBits = 59;
        v453.___darwin_ino64_t object = (void *)0xE100000000000000;
        v425._uint64_t countAndFlagsBits = v443;
        v425.___darwin_ino64_t object = v413;
        String.append(_:)(v425);
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        uint64_t v120 = v453._countAndFlagsBits;
        off_t v443 = (off_t)v453._object;
        goto LABEL_361;
      }
      v415 = v414;
      id v416 = static String._unconditionallyBridgeFromObjectiveC(_:)(v414);
      v418 = v417;

      v453._uint64_t countAndFlagsBits = (uint64_t)v416;
      v453.___darwin_ino64_t object = v418;
      swift_bridgeObjectRetain();
      v419._uint64_t countAndFlagsBits = 59;
      v419.___darwin_ino64_t object = (void *)0xE100000000000000;
      String.append(_:)(v419);
      BOOL v10 = v447;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v420._uint64_t countAndFlagsBits = v443;
      v420.___darwin_ino64_t object = v413;
      String.append(_:)(v420);
      swift_bridgeObjectRelease();
      int v12 = v448;
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      uint64_t v120 = v453._countAndFlagsBits;
      off_t v443 = (off_t)v453._object;
    }
    else
    {
      id v428 = objc_msgSend(v109, sel_path);
      if (!v428)
      {
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        swift_release();
        swift_release();

        uint64_t v120 = 0;
        off_t v443 = 0xE000000000000000;
        goto LABEL_327;
      }
      v429 = v428;
      uint64_t v120 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v428);
      off_t v443 = v430;

      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    }
    outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
LABEL_361:
    swift_release();
    swift_release();

    if ((v443 & 0x1000000000000000) != 0) {
      goto LABEL_368;
    }
    goto LABEL_327;
  }
  swift_bridgeObjectRetain();
  uint64_t v120 = (uint64_t)v10;
  off_t v443 = v11;
  if ((v11 & 0x1000000000000000) != 0)
  {
LABEL_368:
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_333;
  }
LABEL_327:
  if ((v443 & 0x2000000000000000) != 0) {
    Swift::Int isStackAllocationSafe = HIBYTE(v443) & 0xF;
  }
  else {
    Swift::Int isStackAllocationSafe = v120 & 0xFFFFFFFFFFFFLL;
  }
LABEL_333:
  uint64_t v393 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_378;
  }
  if (v393 < -1)
  {
LABEL_378:
    __break(1u);
    goto LABEL_379;
  }
  id v445 = (id)v120;
  uint64_t v394 = v393 + 1;
  if (v393 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v438 = &v437;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    v396 = (char *)&v437 - v395;
    unint64_t v397 = v443;
    swift_bridgeObjectRetain();
    BOOL IsSafeForMapping = 1;
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v396, v394, 1, (uint64_t)v445, v397);
    char v399 = v398;
    swift_bridgeObjectRelease();
    if ((v399 & 1) == 0) {
      BOOL IsSafeForMapping = _NSFileCompressionTypeIsSafeForMapping((uint64_t)v396);
    }
  }
  else
  {
    uint64_t v421 = swift_slowAlloc();
    unint64_t v422 = v443;
    swift_bridgeObjectRetain();
    BOOL IsSafeForMapping = 1;
    String._decomposed(_:into:nullTerminated:)(1, v421, v394, 1, (uint64_t)v445, v422);
    char v424 = v423;
    swift_bridgeObjectRelease();
    if ((v424 & 1) == 0) {
      BOOL IsSafeForMapping = _NSFileCompressionTypeIsSafeForMapping(v421);
    }
    MEMORY[0x185309510](v421, -1, -1);
  }
  swift_bridgeObjectRelease();
  BOOL v10 = v447;
  int v12 = v448;
LABEL_103:
  int v125 = (unsigned __int16)(v107 & st_mode);
  if (v125 != (unsigned __int16)S_IFREG.getter())
  {
    if (v125 == (unsigned __int16)S_IFDIR.getter()) {
      Swift::Int32 st_mode = 21;
    }
    else {
      Swift::Int32 st_mode = 13;
    }
    if ((v446 & 1) == 0)
    {
      uint64_t v146 = (uint64_t)v10;
      CocoaError.Code.init(fileErrno:reading:)(st_mode, 1);
      v448 = (uint64_t (*)(void))v453._countAndFlagsBits;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_382;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v147 = (int)POSIXErrorCode.rawValue.getter();
      id v148 = objc_allocWithZone((Class)NSError);
      uint64_t v149 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v150 = objc_msgSend(v148, sel_initWithDomain_code_userInfo_, v149, v147, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v151 = objc_msgSend(v150, sel_domain);
      id v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
      uint64_t v154 = v153;

      if (v152 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v154 == v155)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v156 = v146;
        int v157 = (int)v449;
      }
      else
      {
        char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v156 = v146;
        int v157 = (int)v449;
        if ((v191 & 1) == 0)
        {
LABEL_375:
          __break(1u);
LABEL_376:
          __break(1u);
        }
      }
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v448, v156, v11, v150, 0, 0, 0, 0, &v455, 0, 0);
LABEL_318:
      swift_willThrow();
      int v270 = v157;
      return close(v270);
    }
    CocoaError.Code.init(fileErrno:reading:)(st_mode, 1);
    uint64_t v446 = v450._countAndFlagsBits;
    v448 = v12;
    swift_retain_n();
    v447 = v10;
    id v128 = v10;
    id v445 = (id)v11;
    swift_retain_n();
    id v129 = v128;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v130 = (int)POSIXErrorCode.rawValue.getter();
      id v131 = objc_allocWithZone((Class)NSError);
      uint64_t v132 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v133 = objc_msgSend(v131, sel_initWithDomain_code_userInfo_, v132, v130, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v134 = objc_msgSend(v133, sel_domain);
      id v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
      uint64_t v137 = v136;

      id v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v444 = (uint64_t)v133;
      if (v135 == v138 && v137 == v139)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v174 & 1) == 0)
        {
LABEL_374:
          __break(1u);
          goto LABEL_375;
        }
      }
      uint64_t v11 = (uint64_t)v129;
      uint64_t v175 = (uint64_t)v445;
      swift_retain();
      uint64_t v176 = v448;
      swift_retain();
      char v177 = _foundation_swift_url_feature_enabled();
      uint64_t v178 = v447;
      if ((v177 & 1) == 0)
      {
        id v192 = objc_msgSend((id)v11, sel__parameterString);
        if (v192)
        {
          uint64_t v193 = v192;
          id v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
          long long v196 = v195;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (id v197 = objc_msgSend((id)v11, sel_path)) != 0)
          {
            int64_t v198 = v197;
            id v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(v197);
            uint64_t v201 = v200;

            *(void *)&v455.uint64_t f_bsize = v199;
            v455.uint64_t f_blocks = v201;
            swift_bridgeObjectRetain();
            v202._uint64_t countAndFlagsBits = 59;
            v202.___darwin_ino64_t object = (void *)0xE100000000000000;
            String.append(_:)(v202);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v203._uint64_t countAndFlagsBits = (uint64_t)v194;
            v203.___darwin_ino64_t object = v196;
            String.append(_:)(v203);
            swift_bridgeObjectRelease();
          }
          else
          {
            *(void *)&v455.uint64_t f_bsize = 59;
            v455.uint64_t f_blocks = 0xE100000000000000;
            v340._uint64_t countAndFlagsBits = (uint64_t)v194;
            v340.___darwin_ino64_t object = v196;
            String.append(_:)(v340);
          }
          swift_bridgeObjectRelease();
          uint64_t v341 = (uint64_t)v445;
          uint64_t v176 = v448;
          outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v448, 1);
        }
        else
        {
          id v360 = objc_msgSend((id)v11, sel_path);
          if (v360)
          {
            v361 = v360;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v360);
          }
          uint64_t v341 = (uint64_t)v445;
          outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v176, 1);
        }
        goto LABEL_311;
      }
      *(void *)&v455.uint64_t f_bsize = v11;
      v455.uint64_t f_blocks = v175;
      v455.f_bfree = (uint64_t)v176;
      id v179 = (id)v11;
      swift_retain();
      swift_retain();
      Swift::String v180 = URL.path(percentEncoded:)(1);
      *(void *)&v455.uint64_t f_bsize = v180._countAndFlagsBits;
      v455.uint64_t f_blocks = (uint64_t)v180._object;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v180._countAndFlagsBits, (unint64_t)v180._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v453._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v181 = specialized Set._Variant.insert(_:)(&v451, 0x2FuLL);
      uint64_t v182 = v453._countAndFlagsBits;
      uint64_t v183 = *(void *)&v455.f_bsize;
      uint64_t v184 = v455.f_blocks;
      uint64_t v185 = HIBYTE(v455.f_blocks) & 0xF;
      if ((v455.f_blocks & 0x2000000000000000) == 0) {
        uint64_t v185 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
      }
      if (v185)
      {
        v453._uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
        v453.___darwin_ino64_t object = (void *)v455.f_blocks;
        MEMORY[0x1F4188790](v181);
        uint64_t v435 = (uint64_t)&v453;
        uint64_t v436 = v182;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v434, v183, v184);
        if (v186 == 1)
        {
          Swift::Int v187 = v453._countAndFlagsBits;
          long long v188 = v453._object;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v187, (unint64_t)v188, v182);
          uint64_t v190 = v189;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v190 = v186;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v178 = v447;
        if (!v190)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v376 = (uint64_t)v445;
          v377 = v448;
          outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v448, 1);
          outlined consume of PathOrURL(v178, v376, (uint64_t)v377, 1);
          goto LABEL_310;
        }
LABEL_305:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v374 = (uint64_t)v445;
        v375 = v448;
        outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v448, 1);
        outlined consume of PathOrURL(v178, v374, (uint64_t)v375, 1);
LABEL_310:
        uint64_t v341 = (uint64_t)v445;
        uint64_t v176 = v448;
LABEL_311:
        uint64_t v378 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v379 = (id)v11;
        outlined consume of PathOrURL(v178, v341, (uint64_t)v176, 1);
        v380 = (void *)v444;
        if (v444)
        {
          *(void *)&v455.uint64_t f_bsize = v444;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          id v381 = v380;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }
          else
          {
            swift_allocError();
            void *v384 = v381;
          }
          uint64_t v383 = v446;
          v382 = (void *)_swift_stdlib_bridgeErrorToNSError();
        }
        else
        {
          v382 = 0;
          uint64_t v383 = v446;
        }
        objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v383, v378, v379, v382, 0, 0, 0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v178, v341, (uint64_t)v448, 1);
        int v157 = (int)v449;
        goto LABEL_318;
      }
LABEL_295:
      swift_bridgeObjectRelease();
      uint64_t v178 = v447;
      goto LABEL_305;
    }
LABEL_379:
    *(void *)&v455.uint64_t f_bsize = 0;
    v455.uint64_t f_blocks = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(void *)&v455.uint64_t f_bsize = 0xD000000000000014;
    v455.uint64_t f_blocks = 0x80000001823A9780;
    LODWORD(v453._countAndFlagsBits) = st_mode;
    goto LABEL_381;
  }
  size_t v126 = v444;
  if (v444 < 0)
  {
    if (v446)
    {
      CocoaError.Code.init(fileErrno:reading:)(12, 1);
      uint64_t v446 = v450._countAndFlagsBits;
      v448 = v12;
      swift_retain_n();
      v447 = v10;
      id v158 = v10;
      swift_retain_n();
      id v159 = v158;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v160 = (int)POSIXErrorCode.rawValue.getter();
        id v161 = objc_allocWithZone((Class)NSError);
        uint64_t v162 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v163 = objc_msgSend(v161, sel_initWithDomain_code_userInfo_, v162, v160, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v444 = (uint64_t)v163;
        id v164 = objc_msgSend(v163, sel_domain);
        id v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
        uint64_t v167 = v166;

        if (v165 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v167 == v168)
        {
          long long v169 = (void *)v11;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          long long v169 = (void *)v11;
          char v342 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v342 & 1) == 0) {
            goto LABEL_376;
          }
        }
        id v343 = v159;
        swift_retain();
        v344 = v448;
        swift_retain();
        char v345 = _foundation_swift_url_feature_enabled();
        v346 = v447;
        if ((v345 & 1) == 0)
        {
          id v362 = objc_msgSend(v343, sel__parameterString);
          if (v362)
          {
            v363 = v362;
            id v364 = static String._unconditionallyBridgeFromObjectiveC(_:)(v362);
            v366 = v365;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v367 = objc_msgSend(v343, sel_path)) != 0)
            {
              v368 = v367;
              id v369 = static String._unconditionallyBridgeFromObjectiveC(_:)(v367);
              uint64_t v371 = v370;

              *(void *)&v455.uint64_t f_bsize = v369;
              v455.uint64_t f_blocks = v371;
              swift_bridgeObjectRetain();
              v372._uint64_t countAndFlagsBits = 59;
              v372.___darwin_ino64_t object = (void *)0xE100000000000000;
              String.append(_:)(v372);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v373._uint64_t countAndFlagsBits = (uint64_t)v364;
              v373.___darwin_ino64_t object = v366;
              String.append(_:)(v373);
              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&v455.uint64_t f_bsize = 59;
              v455.uint64_t f_blocks = 0xE100000000000000;
              v386._uint64_t countAndFlagsBits = (uint64_t)v364;
              v386.___darwin_ino64_t object = v366;
              String.append(_:)(v386);
            }
            swift_bridgeObjectRelease();
            uint64_t v387 = (uint64_t)v169;
            v344 = v448;
            outlined consume of PathOrURL(v346, (uint64_t)v169, (uint64_t)v448, 1);
          }
          else
          {
            id v388 = objc_msgSend(v343, sel_path);
            if (v388)
            {
              v389 = v388;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v388);
            }
            uint64_t v387 = (uint64_t)v169;
            outlined consume of PathOrURL(v346, (uint64_t)v169, (uint64_t)v344, 1);
          }
          goto LABEL_343;
        }
        *(void *)&v455.uint64_t f_bsize = v343;
        v455.uint64_t f_blocks = (uint64_t)v169;
        v455.f_bfree = (uint64_t)v344;
        id v347 = v343;
        id v445 = v169;
        swift_retain();
        swift_retain();
        Swift::String v348 = URL.path(percentEncoded:)(1);
        *(void *)&v455.uint64_t f_bsize = v348._countAndFlagsBits;
        v455.uint64_t f_blocks = (uint64_t)v348._object;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v348._countAndFlagsBits, (unint64_t)v348._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v453._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
        uint64_t v349 = specialized Set._Variant.insert(_:)(&v451, 0x2FuLL);
        uint64_t v350 = v453._countAndFlagsBits;
        uint64_t v351 = *(void *)&v455.f_bsize;
        uint64_t v352 = v455.f_blocks;
        uint64_t v353 = HIBYTE(v455.f_blocks) & 0xF;
        if ((v455.f_blocks & 0x2000000000000000) == 0) {
          uint64_t v353 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
        }
        if (v353)
        {
          v453._uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
          v453.___darwin_ino64_t object = (void *)v455.f_blocks;
          MEMORY[0x1F4188790](v349);
          uint64_t v435 = (uint64_t)&v453;
          uint64_t v436 = v350;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v434, v351, v352);
          if (v354 == 1)
          {
            Swift::Int v355 = v453._countAndFlagsBits;
            v356 = v453._object;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v355, (unint64_t)v356, v350);
            uint64_t v358 = v357;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v358 = v354;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v346 = v447;
          if (!v358)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v400 = (uint64_t)v445;
            v401 = v448;
            outlined consume of PathOrURL(v346, (uint64_t)v445, (uint64_t)v448, 1);
            outlined consume of PathOrURL(v346, v400, (uint64_t)v401, 1);
            goto LABEL_342;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v346 = v447;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v391 = (uint64_t)v445;
        v392 = v448;
        outlined consume of PathOrURL(v346, (uint64_t)v445, (uint64_t)v448, 1);
        outlined consume of PathOrURL(v346, v391, (uint64_t)v392, 1);
LABEL_342:
        uint64_t v387 = (uint64_t)v445;
        v344 = v448;
LABEL_343:
        v402 = (void *)v444;
        uint64_t v403 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v404 = v343;
        outlined consume of PathOrURL(v346, v387, (uint64_t)v344, 1);
        *(void *)&v455.uint64_t f_bsize = v402;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        id v405 = v402;
        uint64_t v406 = v387;
        if (_getErrorEmbeddedNSError<A>(_:)())
        {
        }
        else
        {
          swift_allocError();
          void *v407 = v405;
        }
        uint64_t v408 = v446;
        v409 = self;
        objc_msgSend(v409, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v408, v403, v404, _swift_stdlib_bridgeErrorToNSError(), 0, 0, 0);

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v267 = v447;
        uint64_t v269 = v448;
        uint64_t v268 = v406;
LABEL_224:
        outlined consume of PathOrURL(v267, v268, (uint64_t)v269, 1);
        LODWORD(v94) = v449;
        goto LABEL_225;
      }
      *(void *)&v455.uint64_t f_bsize = 0;
      v455.uint64_t f_blocks = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&v455.uint64_t f_bsize = 0xD000000000000014;
      v455.uint64_t f_blocks = 0x80000001823A9780;
      LODWORD(v453._countAndFlagsBits) = 12;
      while (1)
      {
LABEL_381:
        v433._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        Swift::Int32 st_mode = (Swift::Int32)v433._object;
        String.append(_:)(v433);
        swift_bridgeObjectRelease();
        LODWORD(v436) = 0;
        uint64_t v435 = 73;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_382:
        *(void *)&v455.uint64_t f_bsize = 0;
        v455.uint64_t f_blocks = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(void *)&v455.uint64_t f_bsize = 0xD000000000000014;
        v455.uint64_t f_blocks = 0x80000001823A9780;
        LODWORD(v450._countAndFlagsBits) = st_mode;
      }
    }
    CocoaError.Code.init(fileErrno:reading:)(12, 1);
    uint64_t v122 = v453._countAndFlagsBits;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
    {
      *(void *)&v455.uint64_t f_bsize = 0;
      v455.uint64_t f_blocks = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&v455.uint64_t f_bsize = 0xD000000000000014;
      v455.uint64_t f_blocks = 0x80000001823A9780;
      LODWORD(v450._countAndFlagsBits) = 12;
      goto LABEL_381;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v324 = (int)POSIXErrorCode.rawValue.getter();
    id v325 = objc_allocWithZone((Class)NSError);
    uint64_t v326 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v142 = objc_msgSend(v325, sel_initWithDomain_code_userInfo_, v326, v324, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v327 = objc_msgSend(v142, sel_domain);
    id v328 = static String._unconditionallyBridgeFromObjectiveC(_:)(v327);
    uint64_t v330 = v329;

    if (v328 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v330 == v331)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_208;
    }
    char v359 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v94) = v449;
    if (v359) {
      goto LABEL_210;
    }
    __break(1u);
    goto LABEL_295;
  }
  if (v442)
  {
    id v127 = objc_msgSend(self, sel_currentProgress);

    if (v127)
    {
      type metadata accessor for NSProgress();
      id v127 = @nonobjc NSProgress.__allocating_init(totalUnitCount:)(v126);
    }
  }
  else
  {
    id v127 = 0;
  }
  if (!v126)
  {
    if (v127)
    {
      objc_msgSend(v127, sel_setTotalUnitCount_, 1);
      objc_msgSend(v127, sel_setCompletedUnitCount_, 1);
    }
    unint64_t v171 = 0;
    uint64_t v444 = 0;
    uint64_t v204 = 4;
    LODWORD(v94) = v449;
    goto LABEL_172;
  }
  if (!IsSafeForMapping)
  {
    long long v260 = (char *)malloc(v126);
    if (!v260)
    {
      *(void *)&v455.uint64_t f_bsize = v10;
      v455.uint64_t f_blocks = v11;
      v455.f_bfree = (uint64_t)v12;
      LOBYTE(v455.f_bavail) = v446;
      static CocoaError.errorWithFilePath(_:errno:reading:variant:source:destination:)(12, (uint64_t)&v455, 1, 0, 0, 0, 0, 0, &v453, 0);
      swift_willThrow();

      int v270 = (int)v449;
      return close(v270);
    }
    unint64_t v171 = v260;
    LODWORD(v94) = v449;
    if (v127) {
      objc_msgSend(v127, sel_becomeCurrentWithPendingUnitCount_, v126);
    }
    *(void *)&v455.uint64_t f_bsize = v10;
    v455.uint64_t f_blocks = v11;
    v455.f_bfree = (uint64_t)v12;
    LOBYTE(v455.f_bavail) = v446;
    readBytesFromFileDescriptor(_:path:buffer:length:readUntilLength:reportProgress:)(v94, (uint64_t)&v455, v171, v126, 1, v442 & 1);
    uint64_t v444 = v385;
    objc_msgSend(v127, sel_resignCurrent);
    uint64_t v204 = 2;
    goto LABEL_172;
  }
  LODWORD(v94) = v449;
  uint64_t v170 = (char *)mmap(0, v126, 1, 2, (int)v449, 0);
  if (v170)
  {
    unint64_t v171 = v170;
    uint64_t v172 = MAP_FAILED.getter();
    if (!v172 || v171 != (char *)v172)
    {
      uint64_t v204 = 1;
      if (v127)
      {
        objc_msgSend(v127, sel_setTotalUnitCount_, 1);
        objc_msgSend(v127, sel_setCompletedUnitCount_, 1);
      }
LABEL_172:
      uint64_t v206 = v440;
      unint64_t v205 = v441;
      if (specialized Collection.isEmpty.getter(v440))
      {
      }
      else
      {
        v338 = v439;
        swift_bridgeObjectRelease();
        uint64_t v94 = readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(v94, v206);

        uint64_t *v338 = v94;
        LODWORD(v94) = v449;
      }
      uint64_t v339 = v444;
      *unint64_t v205 = v171;
      v205[1] = (char *)v339;
      v205[2] = (char *)v204;
      v205[3] = 0;
      goto LABEL_226;
    }
  }
  *(void *)&v455.uint64_t f_bsize = v10;
  v455.uint64_t f_blocks = v11;
  v455.f_bfree = (uint64_t)v12;
  LOBYTE(v455.f_bavail) = v446;
  Swift::Int32 v173 = MEMORY[0x185301870]();
  static CocoaError.errorWithFilePath(_:errno:reading:variant:source:destination:)(v173, (uint64_t)&v455, 1, 0, 0, 0, 0, 0, &v453, 0);
  swift_willThrow();

LABEL_226:
  int v270 = v94;
  return close(v270);
}

uint64_t outlined consume of PathOrURL(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {

    swift_release();
    return swift_release();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v5 < -1)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  uint64_t v6 = v5 + 1;
  if (v5 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v8 = (char *)v34 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return open(_:_:_:)();
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v12 = objc_allocWithZone((Class)NSError);
    uint64_t v13 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 258, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v15 = objc_msgSend(v14, sel_domain);
    id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
    {
      swift_bridgeObjectRelease_n();
LABEL_17:
      swift_willThrow();
      return swift_willThrow();
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }
  uint64_t v20 = swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, v20, v6, 1, a1, a2);
  char v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    uint64_t v23 = open(_:_:_:)();
    MEMORY[0x185309510](v20, -1, -1);
    return v23;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v25 = objc_allocWithZone((Class)NSError);
  uint64_t v26 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(v25, sel_initWithDomain_code_userInfo_, v26, 258, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v28 = objc_msgSend(v27, sel_domain);
  id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v31 == v32)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
      goto LABEL_27;
    }
  }
  swift_willThrow();
  return MEMORY[0x185309510](v20, -1, -1);
}

{
  Swift::Int isStackAllocationSafe;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void v16[2];

  v16[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (v5 < -1) {
    goto LABEL_19;
  }
  uint64_t v6 = v5 + 1;
  if (v5 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v8 = (char *)v16 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return 0xFFFFFFFFLL;
    }
    else {
      return foundation_sandbox_check_path();
    }
  }
  else
  {
    id v12 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v12, v6, 1, a1, a2);
    id v14 = v13;
    swift_bridgeObjectRelease();
    if (v14) {
      uint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v11 = foundation_sandbox_check_path();
    }
    MEMORY[0x185309510](v12, -1, -1);
  }
  return v11;
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0;
}

void readBytesFromFileDescriptor(_:path:buffer:length:readUntilLength:reportProgress:)(int a1, uint64_t a2, char *a3, uint64_t a4, int a5, char a6)
{
  id v12 = *(void **)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  uint64_t v120 = *(void *)(a2 + 16);
  int v13 = *(unsigned __int8 *)(a2 + 24);
  int v122 = a5;
  int v123 = v13;
  id v14 = self;
  id v15 = objc_msgSend(v14, sel_currentProgress);

  id v126 = 0;
  uint64_t v16 = a4;
  if (v15)
  {
    if (a6)
    {
      id v126 = objc_msgSend(v14, sel_progressWithTotalUnitCount_, a4);
      uint64_t v16 = a4 / 100;
      if (a4 / 100 <= 4096) {
        uint64_t v16 = 4096;
      }
    }
  }
  if (a4 < 1)
  {
    uint64_t v18 = a4;
    unint64_t v19 = (unint64_t)v126;
    goto LABEL_42;
  }
  uint64_t v117 = v6;
  uint64_t v118 = v16;
  off_t v121 = v12;
  unint64_t v119 = v11;
  if (v16 >= 0x7FFFFFFF) {
    uint64_t v17 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v17 = v16;
  }
  id v125 = (id)v17;
  uint64_t v124 = v17;
  uint64_t v18 = a4;
  unint64_t v19 = (unint64_t)v126;
  while (1)
  {
    if (v19)
    {
      uint64_t v20 = v16;
      id v21 = (id)v19;
      if (objc_msgSend(v21, sel_isCancelled))
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v103 = objc_allocWithZone((Class)NSError);
        uint64_t v104 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v105 = objc_msgSend(v103, sel_initWithDomain_code_userInfo_, v104, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v106 = objc_msgSend(v105, sel_domain);
        id v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
        uint64_t v109 = v108;

        if (v107 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v109 != v110)
        {
          char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v112) {
            goto LABEL_118;
          }
          __break(1u);
        }
LABEL_117:
        swift_bridgeObjectRelease_n();
        goto LABEL_118;
      }

      unint64_t v19 = (unint64_t)v126;
      uint64_t v16 = v20;
    }
    if (v16 < 0)
    {
      size_t v23 = 0;
    }
    else
    {
      uint64_t v22 = (unint64_t)v18 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v18;
      size_t v23 = v18 < (unint64_t)v125 ? v22 : v124;
    }
    while (1)
    {
      if (!v19) {
        goto LABEL_23;
      }
      id v21 = (id)v19;
      if (objc_msgSend(v21, sel_isCancelled))
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v31 = objc_allocWithZone((Class)NSError);
        uint64_t v32 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v26 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v33 = objc_msgSend(v26, sel_domain);
        id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        uint64_t v36 = v35;

        if (v34 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v36 != v37)
        {
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) == 0)
          {
            __break(1u);
LABEL_55:
            uint64_t v40 = 263;
            switch((int)v26)
            {
              case 1:
              case 13:
                uint64_t v40 = 257;
                goto LABEL_95;
              case 2:
                uint64_t v40 = 260;
                goto LABEL_95;
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
                goto LABEL_64;
              case 27:
                goto LABEL_95;
              default:
                if (v26 == 63)
                {
                  uint64_t v40 = 258;
                }
                else
                {
                  if (v26 == 102)
                  {
                    id v45 = 0;
                    uint64_t v40 = 256;
                    goto LABEL_99;
                  }
LABEL_64:
                  uint64_t v40 = 256;
                }
LABEL_95:
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
                  goto LABEL_129;
                }
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                uint64_t v84 = (int)POSIXErrorCode.rawValue.getter();
                id v85 = objc_allocWithZone((Class)NSError);
                uint64_t v86 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v45 = objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v86, v84, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v87 = objc_msgSend(v45, sel_domain);
                id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
                uint64_t v90 = v89;

                if (v88 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  || v90 != v91)
                {
                  char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v92 = (uint64_t)v121;
                  if ((v93 & 1) == 0) {
                    goto LABEL_128;
                  }
LABEL_101:
                  swift_bridgeObjectRetain();
                  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v40, v92, v119, v45, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v132, 0, 0);
                  goto LABEL_110;
                }
                swift_bridgeObjectRelease_n();
LABEL_99:
                uint64_t v92 = (uint64_t)v121;
                goto LABEL_101;
            }
          }
LABEL_118:
          swift_willThrow();

          return;
        }
        goto LABEL_117;
      }

      unint64_t v19 = (unint64_t)v126;
LABEL_23:
      ssize_t v24 = read(a1, a3, v23);
      if (v24 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        uint64_t v18 = 0;
        if (v122) {
          goto LABEL_125;
        }
        BOOL v113 = v23 > v19;
        unint64_t v19 = (unint64_t)v126;
        if (!v113) {
LABEL_42:
        }

        if (!__OFSUB__(a4, v18)) {
          return;
        }
        __break(1u);
LABEL_46:
        LODWORD(v26) = MEMORY[0x185301870]();
        v27._uint64_t countAndFlagsBits = 1684104562;
        v27._unint64_t object = (void *)0xE400000000000000;
        logFileIOErrno(_:at:)((Swift::Int32)v26, v27);
        if (v123)
        {
          uint64_t v28 = v119;
          uint64_t v29 = 263;
          uint64_t v30 = v120;
          switch((int)v26)
          {
            case 1:
            case 13:
              uint64_t v29 = 257;
              goto LABEL_68;
            case 2:
              uint64_t v29 = 260;
              goto LABEL_68;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
              goto LABEL_63;
            case 27:
              goto LABEL_68;
            default:
              uint64_t v30 = v120;
              if (v26 == 63)
              {
                uint64_t v29 = 258;
              }
              else
              {
                if (v26 == 102)
                {
                  swift_retain_n();
                  Swift::Int v41 = v121;
                  uint64_t v42 = v121;
                  swift_retain_n();
                  id v43 = v42;
                  id v44 = 0;
                  uint64_t v29 = 256;
                  goto LABEL_73;
                }
LABEL_63:
                uint64_t v29 = 256;
              }
LABEL_68:
              swift_retain_n();
              unint64_t v46 = v121;
              swift_retain_n();
              id v47 = v46;
              if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
                goto LABEL_129;
              }
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              uint64_t v48 = (int)POSIXErrorCode.rawValue.getter();
              id v49 = objc_allocWithZone((Class)NSError);
              uint64_t v50 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v44 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, v48, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              id v51 = objc_msgSend(v44, sel_domain);
              id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
              uint64_t v54 = v53;

              if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v54 == v55)
              {
                swift_bridgeObjectRelease_n();
                Swift::Int v41 = v121;
              }
              else
              {
                char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                Swift::Int v41 = v121;
                if ((v56 & 1) == 0) {
                  goto LABEL_127;
                }
              }
LABEL_73:
              id v57 = v41;
              swift_retain();
              swift_retain();
              if (_foundation_swift_url_feature_enabled())
              {
                uint64_t v124 = v29;
                id v125 = v44;
                uint64_t v131 = v30;
                id v58 = v57;
                swift_retain();
                swift_retain();
                Swift::String v59 = URL.path(percentEncoded:)(1);
                uint64_t countAndFlagsBits = v59._countAndFlagsBits;
                Swift::String v130 = v59;
                swift_bridgeObjectRetain();
                if (String.count.getter() <= 1)
                {
                  unint64_t object = (unint64_t)v59._object;
                }
                else
                {
                  unint64_t object = (unint64_t)v59._object;
                  if ((specialized BidirectionalCollection.last.getter(v59._countAndFlagsBits, (unint64_t)v59._object) & 0x1FF) == 0x2F)
                  {
                    specialized RangeReplaceableCollection<>.popLast()();
                    swift_bridgeObjectRelease();
                    uint64_t countAndFlagsBits = v130._countAndFlagsBits;
                    unint64_t object = (unint64_t)v130._object;
                  }
                }
                uint64_t v127 = Set.init(minimumCapacity:)();
                uint64_t v75 = specialized Set._Variant.insert(_:)(&v129, 0x2FuLL);
                uint64_t v76 = v127;
                uint64_t v77 = HIBYTE(object) & 0xF;
                if ((object & 0x2000000000000000) == 0) {
                  uint64_t v77 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                }
                if (v77)
                {
                  uint64_t v127 = countAndFlagsBits;
                  unint64_t v128 = object;
                  MEMORY[0x1F4188790](v75);
                  v115[2] = &v127;
                  v115[3] = v76;
                  swift_bridgeObjectRetain();
                  specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v115, countAndFlagsBits, object);
                  if (v78 == 1)
                  {
                    Swift::Int v79 = v127;
                    unint64_t v80 = v128;
                    swift_bridgeObjectRetain();
                    specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v79, v80, v76);
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v28 = v119;
                  uint64_t v30 = v120;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  uint64_t v28 = v119;
                  uint64_t v30 = v120;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                Swift::Int v41 = v121;
                outlined consume of PathOrURL(v121, v28, v30, 1);
                outlined consume of PathOrURL(v41, v28, v30, 1);
                uint64_t v29 = v124;
                id v44 = v125;
              }
              else
              {
                id v62 = objc_msgSend(v57, sel__parameterString);
                if (v62)
                {
                  __darwin_ino64_t v63 = v62;
                  id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                  uint64_t v66 = v65;

                  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                    && (id v67 = objc_msgSend(v57, sel_path)) != 0)
                  {
                    uint64_t v68 = v67;
                    id v69 = v57;
                    id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
                    id v125 = v44;
                    uint64_t v72 = v71;

                    v130._uint64_t countAndFlagsBits = (uint64_t)v70;
                    v130._unint64_t object = v72;
                    swift_bridgeObjectRetain();
                    v73._uint64_t countAndFlagsBits = 59;
                    v73._unint64_t object = (void *)0xE100000000000000;
                    String.append(_:)(v73);
                    id v44 = v125;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    v74._uint64_t countAndFlagsBits = (uint64_t)v64;
                    v74._unint64_t object = v66;
                    String.append(_:)(v74);
                    swift_bridgeObjectRelease();
                    id v57 = v69;
                    Swift::Int v41 = v121;
                  }
                  else
                  {
                    v130._uint64_t countAndFlagsBits = 59;
                    v130._unint64_t object = (void *)0xE100000000000000;
                    v81._uint64_t countAndFlagsBits = (uint64_t)v64;
                    v81._unint64_t object = v66;
                    String.append(_:)(v81);
                  }
                  swift_bridgeObjectRelease();
                  outlined consume of PathOrURL(v41, v119, v30, 1);
                }
                else
                {
                  id v82 = objc_msgSend(v57, sel_path);
                  if (v82)
                  {
                    id v83 = v82;
                    static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
                  }
                  outlined consume of PathOrURL(v41, v119, v30, 1);
                }
              }
              uint64_t v94 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v95 = v57;
              outlined consume of PathOrURL(v41, v28, v30, 1);
              if (v44)
              {
                uint64_t v96 = v30;
                uint64_t v97 = v28;
                uint64_t v98 = v29;
                v130._uint64_t countAndFlagsBits = (uint64_t)v44;
                lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                id v99 = v44;
                if (_getErrorEmbeddedNSError<A>(_:)())
                {
                  id v100 = v99;
                }
                else
                {
                  swift_allocError();
                  id v100 = v99;
                  *dev_t v102 = v99;
                }
                dev_t v101 = (void *)_swift_stdlib_bridgeErrorToNSError();
                id v44 = v100;
                uint64_t v29 = v98;
                uint64_t v28 = v97;
                uint64_t v30 = v96;
                Swift::Int v41 = v121;
              }
              else
              {
                dev_t v101 = 0;
              }
              objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v29, v94, v95, v101, 0, 0, 0);

              swift_unknownObjectRelease();
              outlined consume of PathOrURL(v41, v28, v30, 1);
              break;
          }
LABEL_110:
          swift_willThrow();

          return;
        }
        goto LABEL_55;
      }
      if (v24 > 0x7FFFFFFF) {
        goto LABEL_121;
      }
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      if (MEMORY[0x185301870]() != 4) {
        goto LABEL_46;
      }
    }
    unint64_t v19 = v24;
    if (!v24) {
      goto LABEL_125;
    }
    uint64_t v25 = v24;
    v18 -= v24;
    if (v18 < 0) {
      break;
    }
    if (v126) {
      goto LABEL_35;
    }
    if ((v122 & 1) == 0) {
      goto LABEL_37;
    }
LABEL_38:
    a3 += v25;
    unint64_t v19 = (unint64_t)v126;
    uint64_t v16 = v118;
    if (!v18) {
      goto LABEL_42;
    }
  }
  if (!v126) {
    goto LABEL_122;
  }
  uint64_t v18 = 0;
LABEL_35:
  if (!__OFSUB__(a4, v18))
  {
    uint64_t v116 = v24;
    objc_msgSend(v126, sel_setCompletedUnitCount_, a4 - v18);
    uint64_t v25 = v116;
    if (v122) {
      goto LABEL_38;
    }
LABEL_37:
    if (v23 <= v19) {
      goto LABEL_38;
    }
LABEL_125:
    unint64_t v19 = (unint64_t)v126;
    goto LABEL_42;
  }
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v114._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v114);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t JSONDecoder.nonConformingFloatDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v8 + 4);
  swift_release();
  char v9 = (void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  v9[5] = v2;
  void v9[6] = v3;
  v9[7] = v4;
  unsigned char v9[8] = v5;
  v9[9] = v6;
  v9[10] = v7;
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);

  return swift_release();
}

uint64_t PredicateExpressions.KeyPath.kind.getter@<X0>(char *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v4 = AssociatedTypeWitness;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    return static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)(a1);
  }
  else
  {
    *a1 = 4;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NSObject.KeyValueObservingPublisher(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_retain();
  return a1;
}

void static MeasurementFormatUnitUsage<>.wind.getter(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t Locale.Language.maximalIdentifier.getter()
{
  return Locale.Language.minimalIdentifier.getter((uint64_t (*)(uint64_t, void, unint64_t))specialized _withFixedCharBuffer(size:_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _withFixedCharBuffer(size:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSCalendarIdentifier(void **a1, void **a2)
{
  uint64_t v2 = *a2;
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t Locale.Language.init(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  if (Language <= 0)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    v29[Language] = 0;
    uint64_t v3 = MEMORY[0x185301F80](v29);
    uint64_t v25 = v4;
    uint64_t v26 = v3;
  }
  MEMORY[0x1F4188790](v3);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v6 = swift_release();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (Script > 0)
  {
    v23[Script] = 0;
    uint64_t v6 = MEMORY[0x185301F80](v23);
    uint64_t v7 = v6;
    uint64_t v8 = v9;
  }
  MEMORY[0x1F4188790](v6);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((int)v27 <= 0 && Country > 0)
  {
    v23[Country] = 0;
    uint64_t v11 = MEMORY[0x185301F80](v23);
    uint64_t v12 = v13;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  if (v25)
  {
    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    unint64_t object = v15._object;
    if (v8) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    if (v12) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v11 = 0;
    uint64_t result = 0;
    id v21 = 0;
    goto LABEL_16;
  }
  uint64_t v26 = 0;
  uint64_t countAndFlagsBits = 0;
  unint64_t object = 0;
  if (!v8) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v17 = String._capitalized()();
  uint64_t v18 = v17._countAndFlagsBits;
  unint64_t v19 = v17._object;
  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_15;
  }
LABEL_12:
  Swift::String v22 = String.uppercased()();
  id v21 = v22._object;
  uint64_t result = v22._countAndFlagsBits;
LABEL_16:
  *a1 = v26;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v18;
  a1[7] = (uint64_t)v19;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Month()
{
  return &type metadata for Date.FormatStyle.Symbol.Month;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Day()
{
  return &type metadata for Date.FormatStyle.Symbol.Day;
}

void oq_set_property_qos(uint64_t a1, uint64_t a2)
{
  if (a2 > 16)
  {
    switch(a2)
    {
      case 17:
        int v2 = 17;
        goto LABEL_15;
      case 33:
        int v2 = 33;
        goto LABEL_15;
      case 25:
        int v2 = 25;
        goto LABEL_15;
    }
  }
  else
  {
    switch(a2)
    {
      case -1:
        int v2 = 21;
        goto LABEL_15;
      case 5:
        int v2 = 5;
        goto LABEL_15;
      case 9:
        int v2 = 9;
        goto LABEL_15;
    }
  }
  int v2 = 0;
LABEL_15:
  if (v2 != atomic_exchange((atomic_uchar *volatile)(a1 + 502), v2))
  {
    uint64_t v3 = *(NSObject **)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    *(unsigned char *)(a1 + 200) = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(a1, a2, a3, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
  *a4 = result;
  a4[1] = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(a1, a2, a3, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(a1, a2, *(unsigned __int8 *)(v4 + 24), a3);
  *a4 = result;
  a4[1] = v7;
  return result;
}

uint64_t specialized static RFC3986Parser.percentEncodePath<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a1 >> 14;
  unint64_t v5 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized Collection<>.firstIndex(of:)(0x2Fu, a1, a2, a3, a4);
  char v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if (v13)
  {
    unint64_t v71 = a1;
    unint64_t v72 = a2;
    unint64_t v73 = a3;
    unint64_t v74 = a4;
    MEMORY[0x1F4188790](result);
    uint64_t v66 = &v71;
    char v67 = 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v65, a1, a2, a3, a4);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    if (v27) {
      return v6;
    }
    unint64_t v28 = v71;
    unint64_t v29 = v72;
    unint64_t v30 = v73;
    unint64_t v31 = v74;
    swift_bridgeObjectRetain();
    unint64_t v21 = v28;
    unint64_t v22 = v29;
    unint64_t v23 = v30;
    unint64_t v24 = v31;
    unsigned __int8 v25 = 32;
    goto LABEL_9;
  }
  if (v11 >> 14 == v4)
  {
    unint64_t v71 = a1;
    unint64_t v72 = a2;
    unint64_t v73 = a3;
    unint64_t v74 = a4;
    MEMORY[0x1F4188790](result);
    uint64_t v66 = &v71;
    char v67 = 16;
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v65, a1, a2, a3, a4);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (v16) {
      return v6;
    }
    unint64_t v17 = v71;
    unint64_t v18 = v72;
    unint64_t v19 = v73;
    unint64_t v20 = v74;
    swift_bridgeObjectRetain();
    unint64_t v21 = v17;
    unint64_t v22 = v18;
    unint64_t v23 = v19;
    unint64_t v24 = v20;
    unsigned __int8 v25 = 16;
LABEL_9:
    uint64_t v6 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease();
    return v6;
  }
  if (v11 >> 14 >= v4)
  {
    uint64_t v32 = Substring.subscript.getter();
    unint64_t v34 = v33;
    unint64_t v71 = v32;
    unint64_t v72 = v35;
    unint64_t v73 = v36;
    unint64_t v74 = v33;
    MEMORY[0x1F4188790](v32);
    uint64_t v66 = &v71;
    char v67 = 32;
    uint64_t v40 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v65, v38, v39, v37, v34);
    if (v41)
    {
      unint64_t v42 = v41;
      id v70 = v40;
    }
    else
    {
      uint64_t v69 = 0;
      id v70 = (void *)v71;
      unint64_t v43 = v72;
      unint64_t v68 = v73;
      unint64_t v44 = v74;
      swift_bridgeObjectRetain();
      id v70 = (void *)specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v70, v43, v68, v44, 0x20u);
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      unint64_t v42 = v46;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 >= v11 >> 14)
    {
      uint64_t v47 = Substring.subscript.getter();
      unint64_t v49 = v48;
      unint64_t v71 = v47;
      unint64_t v72 = v50;
      unint64_t v73 = v51;
      unint64_t v74 = v48;
      MEMORY[0x1F4188790](v47);
      uint64_t v66 = &v71;
      char v67 = 16;
      uint64_t v55 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v65, v53, v54, v52, v49);
      if (v56)
      {
        uint64_t v57 = (uint64_t)v55;
        id v58 = v56;
      }
      else
      {
        unint64_t v59 = v71;
        unint64_t v60 = v72;
        unint64_t v61 = v73;
        unint64_t v62 = v74;
        swift_bridgeObjectRetain();
        uint64_t v57 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v59, v60, v61, v62, 0x10u);
        id v58 = v63;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      unint64_t v71 = (unint64_t)v70;
      unint64_t v72 = v42;
      swift_bridgeObjectRetain();
      v64._uint64_t countAndFlagsBits = v57;
      v64._unint64_t object = v58;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v71;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5(void *(*a1)(void *__return_ptr, void, void), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((a6 & 0x1000000000000000) != 0) {
    return 0;
  }
  if ((a6 & 0x2000000000000000) != 0)
  {
    v13[0] = a5;
    v13[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v11 = v13;
  }
  else if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t v11 = (void *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n(v11, a3, a4, a5, a6, a1);
}

void *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n(void *result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void *(*a6)(void *__return_ptr, void, void))
{
  void *(*v16)(void *__return_ptr, void, void);
  unint64_t v17;
  unint64_t v18;
  void *(*v19)(void *__return_ptr, void, void);
  void *(*v20)(void *__return_ptr, void, void);
  unint64_t v21;
  void *(*v22)(void *__return_ptr, void, void);
  void *v23;
  char *v24;
  void *(*v25)(void *__return_ptr, void, void);
  uint64_t v26;
  uint64_t v27;

  unint64_t v10 = a2;
  unint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t v27 = v6;
    uint64_t v16 = a6;
    uint64_t result = (void *)_StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a6 = v16;
    a2 = (unint64_t)result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      uint64_t v15 = (char *)(a2 >> 16);
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unsigned __int8 v25 = a6;
  uint64_t v27 = v6;
  unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v17 = HIBYTE(a5) & 0xF;
  }
  if (v17 < a2 >> 16) {
    goto LABEL_33;
  }
  uint64_t result = (void *)String.UTF8View._foreignDistance(from:to:)();
  uint64_t v15 = (char *)result;
  uint64_t v6 = v27;
  a6 = v25;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t v18 = v10;
    unint64_t v19 = a6;
    uint64_t result = (void *)_StringGuts._slowEnsureMatchingEncoding(_:)(v18, a4, a5);
    a6 = v19;
    unint64_t v10 = (unint64_t)result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t v20 = a6;
    uint64_t result = (void *)_StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a6 = v20;
    a3 = (unint64_t)result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (void *)((a3 >> 16) - (v10 >> 16));
    goto LABEL_21;
  }
  unint64_t v21 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v21 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v21 < v10 >> 16) {
    goto LABEL_31;
  }
  if (v21 < a3 >> 16)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  unint64_t v22 = a6;
  uint64_t result = (void *)String.UTF8View._foreignDistance(from:to:)();
  a6 = v22;
LABEL_21:
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v23 = result;
  if ((uint64_t)((char *)result + (unint64_t)v15) < (uint64_t)v15)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v11) {
    unint64_t v24 = &v15[(void)v11];
  }
  else {
    unint64_t v24 = 0;
  }
  uint64_t result = a6(&v26, v24, v23);
  if (!v6) {
    return (void *)v26;
  }
  return result;
}

uint64_t _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, *(unsigned __int8 *)(v3 + 24), a3);
}

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v4 < -1) {
    goto LABEL_9;
  }
  uint64_t v8 = isStackAllocationSafe;
  uint64_t v9 = v4 + 1;
  if (v4 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    return a4();
  }
  else
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4)(v11, v9, v8, a2, a3);
    MEMORY[0x185309510](v11, -1, -1);
  }
  return v10;
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(uint64_t result, uint64_t a2, unsigned char *a3, uint64_t a4, unsigned __int8 a5)
{
  if (!result) {
    goto LABEL_40;
  }
  uint64_t v5 = 0;
  if (!a3 || !a4)
  {
LABEL_34:
    if (v5 >= a2) {
      goto LABEL_39;
    }
    *(unsigned char *)(result + v5) = 0;
    return String.init(cString:)();
  }
  while (2)
  {
    unint64_t v6 = *a3;
    switch(*a3)
    {
      case '!':
      case '$':
      case '\'':
      case '(':
      case ')':
      case '*':
      case ',':
LABEL_8:
        if ((a5 & 0xF6) != 0) {
          goto LABEL_27;
        }
        goto LABEL_30;
      case '&':
LABEL_16:
        if ((a5 & 0x76) == 0) {
          goto LABEL_30;
        }
        goto LABEL_27;
      case '+':
        if ((a5 & 0xF7) == 0) {
          goto LABEL_30;
        }
        goto LABEL_27;
      case '-':
      case '.':
        goto LABEL_26;
      case '/':
LABEL_14:
        if (a5 < 0x10u) {
          goto LABEL_30;
        }
        goto LABEL_27;
      default:
        if ((v6 - 58) <= 0xFFFFFFF5)
        {
          switch(*a3)
          {
            case ':':
              if ((a5 & 0xD2) == 0) {
                goto LABEL_30;
              }
              goto LABEL_27;
            case ';':
              goto LABEL_8;
            case '=':
              goto LABEL_16;
            case '?':
              if (a5 < 0x40u) {
                goto LABEL_30;
              }
              goto LABEL_27;
            case '@':
              goto LABEL_14;
            default:
              if ((v6 - 91) > 0xFFFFFFE5) {
                break;
              }
              if (v6 == 95) {
                goto LABEL_24;
              }
              if ((v6 - 123) > 0xFFFFFFE5) {
                break;
              }
              if (v6 != 126) {
                goto LABEL_30;
              }
LABEL_24:
              if (a5 < 2u) {
                goto LABEL_30;
              }
              goto LABEL_27;
          }
        }
LABEL_26:
        if (!a5)
        {
LABEL_30:
          if (v5 >= a2) {
            goto LABEL_37;
          }
          *(unsigned char *)(result + v5) = 37;
          if (v5 + 1 >= a2) {
            goto LABEL_38;
          }
          *(unsigned char *)(result + v5 + 1) = byte_182107E70[v6 >> 4];
          uint64_t v8 = v5 + 2;
          if (v5 + 2 >= a2)
          {
            __break(1u);
            goto LABEL_34;
          }
          LOBYTE(v6) = byte_182107E70[v6 & 0xF];
          uint64_t v7 = 3;
LABEL_6:
          *(unsigned char *)(result + v8) = v6;
          v5 += v7;
          ++a3;
          if (!--a4) {
            goto LABEL_34;
          }
          continue;
        }
LABEL_27:
        if (v5 < a2)
        {
          uint64_t v8 = v5;
          uint64_t v7 = 1;
          goto LABEL_6;
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
    }
  }
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result) {
    goto LABEL_40;
  }
  uint64_t v5 = 0;
  if (!a3 || !a4)
  {
LABEL_34:
    if (v5 >= a2) {
      goto LABEL_39;
    }
    *(unsigned char *)(result + v5) = 0;
    return String.init(cString:)();
  }
  while (2)
  {
    unint64_t v6 = *a3;
    switch(*a3)
    {
      case '!':
      case '$':
      case '\'':
      case '(':
      case ')':
      case '*':
      case ',':
LABEL_8:
        if ((a5 & 0xF6) != 0) {
          goto LABEL_27;
        }
        goto LABEL_30;
      case '&':
LABEL_16:
        if ((a5 & 0x76) == 0) {
          goto LABEL_30;
        }
        goto LABEL_27;
      case '+':
        if ((a5 & 0xF7) == 0) {
          goto LABEL_30;
        }
        goto LABEL_27;
      case '-':
      case '.':
        goto LABEL_26;
      case '/':
LABEL_14:
        if (a5 < 0x10u) {
          goto LABEL_30;
        }
        goto LABEL_27;
      default:
        if ((v6 - 58) <= 0xFFFFFFF5)
        {
          switch(*a3)
          {
            case ':':
              if ((a5 & 0xD2) == 0) {
                goto LABEL_30;
              }
              goto LABEL_27;
            case ';':
              goto LABEL_8;
            case '=':
              goto LABEL_16;
            case '?':
              if (a5 < 0x40u) {
                goto LABEL_30;
              }
              goto LABEL_27;
            case '@':
              goto LABEL_14;
            default:
              if ((v6 - 91) > 0xFFFFFFE5) {
                break;
              }
              if (v6 == 95) {
                goto LABEL_24;
              }
              if ((v6 - 123) > 0xFFFFFFE5) {
                break;
              }
              if (v6 != 126) {
                goto LABEL_30;
              }
LABEL_24:
              if (a5 < 2u) {
                goto LABEL_30;
              }
              goto LABEL_27;
          }
        }
LABEL_26:
        if (!a5)
        {
LABEL_30:
          if (v5 >= a2) {
            goto LABEL_37;
          }
          *(unsigned char *)(result + v5) = 37;
          if (v5 + 1 >= a2) {
            goto LABEL_38;
          }
          *(unsigned char *)(result + v5 + 1) = byte_182107E70[v6 >> 4];
          uint64_t v8 = v5 + 2;
          if (v5 + 2 >= a2)
          {
            __break(1u);
            goto LABEL_34;
          }
          LOBYTE(v6) = byte_182107E70[v6 & 0xF];
          uint64_t v7 = 3;
LABEL_6:
          *(unsigned char *)(result + v8) = v6;
          v5 += v7;
          ++a3;
          if (!--a4) {
            goto LABEL_34;
          }
          continue;
        }
LABEL_27:
        if (v5 < a2)
        {
          uint64_t v8 = v5;
          uint64_t v7 = 1;
          goto LABEL_6;
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
    }
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5 = a3 >> 14;
  if (a3 >> 14 == a2 >> 14) {
    return 0;
  }
  uint64_t result = Substring.UTF8View.subscript.getter();
  if (result == a1) {
    return a2;
  }
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v14 = HIBYTE(a5) & 0xF;
  }
  else {
    unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v6 = a2;
  while (1)
  {
    if ((v6 & 0xC) == v13)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a4, a5);
      unint64_t v6 = result;
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_13:
        unint64_t v6 = (v6 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_17;
      }
    }
    else if ((a5 & 0x1000000000000000) == 0)
    {
      goto LABEL_13;
    }
    if (v14 <= v6 >> 16) {
      break;
    }
    unint64_t v6 = String.UTF8View._foreignIndex(after:)();
LABEL_17:
    if (v6 >> 14 == v5) {
      return 0;
    }
    uint64_t result = Substring.UTF8View.subscript.getter();
    if (result == a1) {
      return v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.Percent.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t FloatingPointFormatStyle.Percent.format(_:)(uint64_t a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Currency.format(_:)(a1, a2, (uint64_t)type metadata accessor for ICUPercentNumberFormatter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUPercentNumberFormatter.create<A>(for:));
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes;
}

id _NSKeyValueGetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  CFSetRef v6 = (const __CFSet *)_MergedGlobals_98;
  if (!_MergedGlobals_98)
  {
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    CFSetRef v6 = CFSetCreateMutable(0, 0, &v11);
    _MergedGlobals_98 = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    CFSetRef v6 = (const __CFSet *)_MergedGlobals_98;
  }
  else
  {
    CFHashCode v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend(a3, sel__createValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)_MergedGlobals_98, Value);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18194BA2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id StringProtocol.hash.getter()
{
  StringProtocol._ephemeralString.getter();
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_hash);
  swift_unknownObjectRelease();
  return v1;
}

id @objc static NSTimeZone._autoupdating()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  id v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedAutoupdatingCurrent.getter(v0, &v4);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  id v2 = v4;

  return v2;
}

id closure #1 in TimeZoneCache.bridgedAutoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    id v4 = *(id *)(a1 + 88);
  }
  else
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v6 = *(void *)(a1 + 16);
    }
    else
    {
      type metadata accessor for _TimeZoneAutoupdating();
      uint64_t v6 = swift_allocObject();
      *(void *)(a1 + 16) = v6;
      swift_retain();
    }
    uint64_t v7 = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
    CFHashCode v8 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
    uint64_t v9 = (char *)objc_allocWithZone(v8);
    uint64_t v10 = (uint64_t *)&v9[OBJC_IVAR____NSSwiftTimeZone_timeZone];
    *uint64_t v10 = v6;
    v10[1] = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
    uint64_t v11 = swift_allocObject();
    *(_DWORD *)(v11 + 32) = 0;
    *(_OWORD *)(v11 + 16) = xmmword_18218FDB0;
    *(void *)&v9[OBJC_IVAR____NSSwiftTimeZone_lock] = v11;
    v14.receiver = v9;
    v14.super_class = v8;
    swift_retain();
    id v12 = objc_msgSendSuper2(&v14, sel_init);
    *(void *)(a1 + 88) = v12;
    id v4 = v12;
    uint64_t v3 = 0;
  }
  *a2 = v4;
  return v3;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneAutoupdating(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating;
  if (!lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating)
  {
    type metadata accessor for _TimeZoneAutoupdating();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating);
  }
  return result;
}

uint64_t type metadata accessor for _TimeZoneAutoupdating()
{
  return self;
}

__n128 __swift_memcpy154_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Year()
{
  return &type metadata for Date.FormatStyle.Symbol.Year;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Hour()
{
  return &type metadata for Date.FormatStyle.Symbol.Hour;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle()
{
  return &type metadata for Date.FormatStyle.Symbol.Hour.AMPMStyle;
}

CFIndex protocol witness for Error._code.getter in conformance CFErrorRef()
{
  return CFErrorGetCode(*v0);
}

uint64_t ____immutablePlaceholderNSURL_block_invoke()
{
  uint64_t result = objc_msgSend(MEMORY[0x1E4F1CB10], "__unurl");
  qword_1EB1ED838 = result;
  return result;
}

void static Calendar._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
      uint64_t v6 = (_OWORD *)(v5 + 16);
      long long v7 = (os_unfair_lock_s *)(v5 + 32);
      id v8 = a1;
      os_unfair_lock_lock(v7);
      closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v12);
      os_unfair_lock_unlock(v7);

      unint64_t v10 = *((void *)&v12 + 1);
      uint64_t v9 = v12;
    }
    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = a1;
      unint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
      id v11 = a1;
    }
    *a2 = v9;
    a2[1] = v10;
  }
  else
  {
    __break(1u);
  }
}

double static Date.timeIntervalSinceReferenceDate.getter()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  __tp.__darwin_time_t tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
}

ValueMetadata *type metadata accessor for Locale.Components()
{
  return &type metadata for Locale.Components;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Second()
{
  return &type metadata for Date.FormatStyle.Symbol.Second;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Minute()
{
  return &type metadata for Date.FormatStyle.Symbol.Minute;
}

ValueMetadata *type metadata accessor for Locale.Language.Components()
{
  return &type metadata for Locale.Language.Components;
}

uint64_t instantiation function for generic protocol witness table for _LocaleICU(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    uint64_t v11 = v10;
    long long v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0);
    unint64_t v13 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)&v19, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11)
    {
      __break(1u);
LABEL_18:
      __break(1u);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v12 = (void *)MEMORY[0x1E4FBC860];
  }
  ufmt_open();
  if (v12[2] >> 31) {
    goto LABEL_18;
  }
  unum_parseToUFormattable();
  swift_release();
  *a5 = 0;
  if (!ufmt_getDecNumChars())
  {
    ufmt_close();
    unint64_t v14 = 0;
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }
  unint64_t v17 = MEMORY[0x185301F80]();
  unint64_t v14 = v18;
  if (!v18)
  {
    ufmt_close();
    goto LABEL_8;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v17, v18, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v21);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v21, (uint64_t)&v19);
  char v15 = v20;
  if (v20 == 1) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v19;
  }
  ufmt_close();
LABEL_9:
  LOBYTE(v19) = v15;
  return v14;
}

void *_TimeZoneICU.init(identifier:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = a1;
  uint64_t v6 = specialized static TimeZone.tryParseGMTName(_:)();
  if ((v7 & 1) != 0 || (uint64_t v8 = specialized static TimeZone.nameForSecondsFromGMT(_:)(v6), !v9))
  {
    swift_bridgeObjectRetain();
    long long v12 = specialized _copyCollectionToContiguousArray<A>(_:)(v5, v3);
    swift_bridgeObjectRelease();
    specialized _withResizingUCharBuffer(initialSize:_:)(32, (uint64_t)(v12 + 4), v12[2]);
    uint64_t v14 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  swift_bridgeObjectRelease();
  uint64_t v5 = v10;
  unint64_t v3 = v11;
LABEL_8:
  v2[3] = v5;
  v2[4] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_TimeZoneICU.State>._Buffer);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = 0;
  v2[2] = v15;
  return v2;
}

uint64_t IntegerParseStrategy.parse(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v224 = a1;
  uint64_t v223 = a2;
  uint64_t v208 = a4;
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v221 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v215 = &v192[-v10];
  uint64_t v205 = *(void *)(a3 + 32);
  uint64_t v210 = *(void *)(v205 + 24);
  uint64_t v214 = *(void *)(v210 + 16);
  uint64_t v213 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v213);
  id v212 = &v192[-v11];
  uint64_t v216 = v8;
  uint64_t v217 = v7;
  uint64_t v219 = swift_getAssociatedTypeWitness();
  uint64_t v211 = *(void *)(v219 - 8);
  MEMORY[0x1F4188790](v219);
  id v220 = &v192[-v12];
  uint64_t v222 = AssociatedTypeWitness;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v206 = *(void *)(v13 - 8);
  uint64_t v207 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v204 = &v192[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  uint64_t v209 = &v192[-v16];
  uint64_t v17 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v226 = *(void *)(v17 - 8);
  uint64_t v18 = *(void *)(v226 + 64);
  MEMORY[0x1F4188790](v17);
  uint64_t v227 = &v192[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (uint64_t)&v192[-v20];
  uint64_t v22 = *(int *)(a3 + 44);
  uint64_t v23 = v4 + *(int *)(a3 + 48);
  unint64_t v24 = (uint64_t *)(v4 + *(int *)(a3 + 52));
  uint64_t inited = *v24;
  uint64_t v26 = v24[1];
  uint64_t v218 = v4;
  LODWORD(v228) = *(unsigned __int8 *)(v4 + v22);
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v23, (uint64_t)&v192[-v20], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v29 = v28(ObjectType, v26);
  uint64_t v31 = v30;
  swift_unknownObjectRelease();
  uint64_t v32 = (uint64_t *)(v21 + *(int *)(v17 + 20));
  *uint64_t v32 = v29;
  v32[1] = v31;
  uint64_t v203 = v17;
  *(unsigned char *)(v21 + *(int *)(v17 + 24)) = v228;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v34 = static ICULegacyNumberFormatter.cache;
  unint64_t v33 = (char *)unk_1E8ED3298;
  unint64_t v35 = v227;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v21, (uint64_t)v227, type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v36 = (*(unsigned __int8 *)(v226 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
  uint64_t v228 = swift_allocObject();
  uint64_t v37 = _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v35, v228 + v36, type metadata accessor for ICULegacyNumberFormatter.Signature);
  MEMORY[0x1F4188790](v37);
  *(void *)&v192[-16] = v21;
  unint64_t v38 = v33 + 16;
  int64_t v39 = (int64_t)(v33 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)v33 + 6);
  uint64_t v40 = v225;
  _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICULegacyNumberB0C9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLV_AJTG5TA_0((uint64_t)(v33 + 16), v230);
  uint64_t v225 = v40;
  if (v40)
  {
LABEL_113:
    os_unfair_lock_unlock((os_unfair_lock_t)v39);
    __break(1u);
    goto LABEL_114;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v33 + 6);
  swift_release();
  uint64_t v41 = v230[0];
  if (!v230[0])
  {
    uint64_t v69 = v225;
    uint64_t v70 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    if (v69)
    {

      swift_release();
      outlined destroy of ICULegacyNumberFormatter.Signature(v21, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v71;
      v230[0] = 0;
      v230[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      strcpy((char *)v230, "Cannot parse ");
      HIWORD(v230[1]) = -4864;
      v72._unint64_t object = v223;
      v72._uint64_t countAndFlagsBits = v224;
      String.append(_:)(v72);
      v73._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v73._unint64_t object = (void *)0x80000001823B1040;
      String.append(_:)(v73);
      uint64_t v74 = v230[0];
      uint64_t v75 = v230[1];
      *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 48) = v74;
      *(void *)(inited + 56) = v75;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v76 = (void *)static _DictionaryStorage.allocate(capacity:)();
      int64_t v39 = (int64_t)v230;
      outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v230, &demangling cache variable for type metadata for (String, Any));
      uint64_t v21 = v230[0];
      unint64_t v33 = (char *)v230[1];
      swift_retain();
      unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v21, (uint64_t)v33);
      if ((v45 & 1) == 0)
      {
        v76[(v77 >> 6) + 8] |= 1 << v77;
        uint64_t v78 = (uint64_t *)(v76[6] + 16 * v77);
        *uint64_t v78 = v21;
        v78[1] = (uint64_t)v33;
        outlined init with take of Any(v231, (_OWORD *)(v76[7] + 32 * v77));
        uint64_t v79 = v76[2];
        BOOL v60 = __OFADD__(v79, 1);
        uint64_t v80 = v79 + 1;
        if (!v60)
        {
          v76[2] = v80;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v81 = objc_allocWithZone((Class)NSError);
          uint64_t v82 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          int64_t v39 = (int64_t)objc_msgSend(v81, sel_initWithDomain_code_userInfo_, v82, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v33 = (char *)objc_msgSend((id)v39, sel_domain);
          id v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          uint64_t v85 = v84;

          id v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          uint64_t inited = v87;
          if (v83 == v86 && v85 == v87)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            uint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v21 & 1) == 0) {
              goto LABEL_69;
            }
          }
          return swift_willThrow();
        }
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    uint64_t v41 = v70;
    uint64_t v225 = 0;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)v33 + 6);
    uint64_t v134 = *(void *)(*((void *)v33 + 2) + 16);
    uint64_t v202 = *((void *)v33 + 2);
    if (v34 >= v134) {
      swift_bridgeObjectRetain();
    }
    else {
      *unint64_t v38 = MEMORY[0x1E4FBC868];
    }
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v229 = (void *)*v38;
    uint64_t v155 = v229;
    *unint64_t v38 = 0x8000000000000000;
    unint64_t v38 = v155;
    unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
    uint64_t v156 = v38[2];
    BOOL v157 = (v45 & 1) == 0;
    uint64_t v158 = v156 + v157;
    if (__OFADD__(v156, v157)) {
      goto LABEL_68;
    }
    if (v38[3] >= v158)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_72;
      }
      uint64_t v160 = v38;
      id v164 = (os_unfair_lock_s *)(v33 + 24);
      if ((v45 & 1) == 0) {
        goto LABEL_107;
      }
    }
    else
    {
      char v159 = v45;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v158, isUniquelyReferenced_nonNull_native);
      uint64_t v160 = v229;
      unint64_t v161 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      if ((v159 & 1) != (v162 & 1)) {
        goto LABEL_115;
      }
      unint64_t v46 = v161;
      char v163 = v159;
      id v164 = (os_unfair_lock_s *)(v33 + 24);
      if ((v163 & 1) == 0) {
        goto LABEL_107;
      }
    }
    goto LABEL_56;
  }
  swift_release();
  int64_t v39 = (int64_t)v223;
  while (1)
  {
    unint64_t v38 = (void *)v224;
    outlined destroy of ICULegacyNumberFormatter.Signature(v21, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    specialized BidirectionalCollection._trimmingCharacters(while:)((unint64_t)v38, v39);
    unint64_t v33 = v42;
    swift_bridgeObjectRelease();
    uint64_t inited = String.init(_:)();
    unint64_t v44 = v43;
    swift_bridgeObjectRetain();
    uint64_t v21 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(inited, v44);
    swift_bridgeObjectRelease();
    LODWORD(v230[0]) = 0;
    if (*(void *)(v21 + 16) >> 31)
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    unint64_t v33 = (char *)unum_parseInt64();
    swift_release();
    if (SLODWORD(v230[0]) <= 0)
    {
      swift_bridgeObjectRelease();
      v230[0] = (uint64_t)v33;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v88 = (uint64_t)v209;
      uint64_t v89 = v222;
      dispatch thunk of Numeric.init<A>(exactly:)();
      uint64_t v90 = v221;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48))(v88, 1, v89) != 1) {
        goto LABEL_36;
      }
      (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v88, v207);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v91;
      v230[0] = 0;
      v230[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(94);
      v92._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
      v92._unint64_t object = (void *)0xED00002065737261;
      String.append(_:)(v92);
      v93._uint64_t countAndFlagsBits = (uint64_t)v38;
      v93._unint64_t object = (void *)v39;
      String.append(_:)(v93);
      v94._unint64_t object = (void *)0x80000001823B1060;
      v94._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
      String.append(_:)(v94);
      uint64_t v95 = v230[0];
      uint64_t v96 = v230[1];
      *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 48) = v95;
      *(void *)(inited + 56) = v96;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v97 = (void *)static _DictionaryStorage.allocate(capacity:)();
      int64_t v39 = (int64_t)v230;
      outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v230, &demangling cache variable for type metadata for (String, Any));
      uint64_t v21 = v230[0];
      unint64_t v33 = (char *)v230[1];
      swift_retain();
      unint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(v21, (uint64_t)v33);
      if (v45) {
        goto LABEL_66;
      }
      v97[(v98 >> 6) + 8] |= 1 << v98;
      id v99 = (uint64_t *)(v97[6] + 16 * v98);
      *id v99 = v21;
      v99[1] = (uint64_t)v33;
      outlined init with take of Any(v231, (_OWORD *)(v97[7] + 32 * v98));
      uint64_t v100 = v97[2];
      BOOL v60 = __OFADD__(v100, 1);
      uint64_t v101 = v100 + 1;
      if (v60) {
        goto LABEL_67;
      }
      v97[2] = v101;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v102 = objc_allocWithZone((Class)NSError);
      uint64_t v103 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      int64_t v39 = (int64_t)objc_msgSend(v102, sel_initWithDomain_code_userInfo_, v103, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v104 = objc_msgSend((id)v39, sel_domain);
      id v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
      uint64_t v107 = v106;

      if (v105 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v107 == v108) {
        goto LABEL_47;
      }
      char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v109) {
        goto LABEL_58;
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t inited = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(inited, v44);
      swift_bridgeObjectRelease();
      LODWORD(v230[0]) = 0;
      if (*(void *)(inited + 16) >> 31) {
        goto LABEL_60;
      }
      unum_parseDouble();
      double v5 = v47;
      swift_bridgeObjectRelease();
      swift_release();
      if (SLODWORD(v230[0]) > 0)
      {
        uint64_t v48 = v222;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        unint64_t v49 = v215;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        (*(void (**)(unsigned char *, uint64_t))(v217 + 48))(v49, v216);
        (*(void (**)(unsigned char *, uint64_t))(v221 + 8))(v49, v48);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
        *(void *)(inited + 40) = v50;
        v230[0] = 0;
        v230[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
        v51._unint64_t object = (void *)0xED00002065737261;
        String.append(_:)(v51);
        v52._uint64_t countAndFlagsBits = (uint64_t)v38;
        v52._unint64_t object = (void *)v39;
        String.append(_:)(v52);
        v53._uint64_t countAndFlagsBits = 0xD000000000000038;
        v53._unint64_t object = (void *)0x80000001823AA980;
        String.append(_:)(v53);
        unint64_t v38 = (void *)v219;
        _print_unlocked<A, B>(_:_:)();
        uint64_t v54 = v230[0];
        uint64_t v55 = v230[1];
        *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
        *(void *)(inited + 48) = v54;
        *(void *)(inited + 56) = v55;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        char v56 = (void *)static _DictionaryStorage.allocate(capacity:)();
        int64_t v39 = (int64_t)v230;
        outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v230, &demangling cache variable for type metadata for (String, Any));
        uint64_t v21 = v230[0];
        unint64_t v33 = (char *)v230[1];
        swift_retain();
        unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v21, (uint64_t)v33);
        if ((v45 & 1) == 0)
        {
          v56[(v57 >> 6) + 8] |= 1 << v57;
          id v58 = (uint64_t *)(v56[6] + 16 * v57);
          uint64_t *v58 = v21;
          v58[1] = (uint64_t)v33;
          outlined init with take of Any(v231, (_OWORD *)(v56[7] + 32 * v57));
          uint64_t v59 = v56[2];
          BOOL v60 = __OFADD__(v59, 1);
          uint64_t v61 = v59 + 1;
          if (!v60)
          {
            _OWORD v56[2] = v61;
            swift_release();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
            id v62 = objc_allocWithZone((Class)NSError);
            uint64_t v63 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            int64_t v39 = (int64_t)objc_msgSend(v62, sel_initWithDomain_code_userInfo_, v63, 2048, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v33 = (char *)objc_msgSend((id)v39, sel_domain);
            id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
            uint64_t v66 = v65;

            id v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
            uint64_t inited = v68;
            if (v64 == v67 && v66 == v68)
            {
              swift_bridgeObjectRelease_n();
LABEL_38:
              swift_willThrow();
              swift_release();
              return (*(uint64_t (**)(unsigned char *, void *))(v211 + 8))(v220, v38);
            }
            uint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v21) {
              goto LABEL_38;
            }
            goto LABEL_65;
          }
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
    }
    uint64_t v89 = v222;
    if (fabs(v5) < 9.00719925e15)
    {
      *(double *)uint64_t v230 = v5;
      lazy protocol witness table accessor for type Double and conformance Double();
      uint64_t v88 = (uint64_t)v204;
      dispatch thunk of BinaryInteger.init<A>(exactly:)();
      uint64_t v90 = v221;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48))(v88, 1, v89) != 1) {
        goto LABEL_36;
      }
      (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v88, v207);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v110 = swift_initStackObject();
      *(_OWORD *)(v110 + 16) = xmmword_1821037E0;
      *(void *)(v110 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(v110 + 40) = v111;
      v230[0] = 0;
      v230[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(94);
      v112._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
      v112._unint64_t object = (void *)0xED00002065737261;
      String.append(_:)(v112);
      v113._uint64_t countAndFlagsBits = (uint64_t)v38;
      v113._unint64_t object = (void *)v39;
      String.append(_:)(v113);
      v114._unint64_t object = (void *)0x80000001823B1060;
      v114._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
      String.append(_:)(v114);
      uint64_t v115 = v230[0];
      uint64_t v116 = v230[1];
      *(void *)(v110 + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(v110 + 48) = v115;
      *(void *)(v110 + 56) = v116;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v117 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (Hashable & Sendable)?(v110 + 32, (uint64_t)v230, &demangling cache variable for type metadata for (String, Any));
      uint64_t v118 = v230[0];
      uint64_t v119 = v230[1];
      swift_retain();
      unint64_t v120 = specialized __RawDictionaryStorage.find<A>(_:)(v118, v119);
      if (v121)
      {
        __break(1u);
      }
      else
      {
        v117[(v120 >> 6) + 8] |= 1 << v120;
        int v122 = (uint64_t *)(v117[6] + 16 * v120);
        *int v122 = v118;
        v122[1] = v119;
        outlined init with take of Any(v231, (_OWORD *)(v117[7] + 32 * v120));
        uint64_t v123 = v117[2];
        BOOL v60 = __OFADD__(v123, 1);
        uint64_t v124 = v123 + 1;
        if (!v60)
        {
          v117[2] = v124;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v125 = objc_allocWithZone((Class)NSError);
          uint64_t v126 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v127 = objc_msgSend(v125, sel_initWithDomain_code_userInfo_, v126, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v128 = objc_msgSend(v127, sel_domain);
          id v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
          uint64_t v89 = v130;

          id v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          uint64_t v90 = v132;
          if (v129 == v131 && v89 == v132) {
            goto LABEL_47;
          }
          uint64_t v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v88)
          {
LABEL_58:
            swift_willThrow();
            return swift_release();
          }
          __break(1u);
LABEL_36:
          swift_release();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 32))(v208, v88, v89);
        }
      }
      __break(1u);
      goto LABEL_111;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 40) = v135;
    v230[0] = 0;
    v230[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v136._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
    v136._unint64_t object = (void *)0xED00002065737261;
    String.append(_:)(v136);
    v137._uint64_t countAndFlagsBits = (uint64_t)v38;
    v137._unint64_t object = (void *)v39;
    String.append(_:)(v137);
    v138._uint64_t countAndFlagsBits = 0xD000000000000043;
    v138._unint64_t object = (void *)0x80000001823B10B0;
    String.append(_:)(v138);
    uint64_t v139 = v230[0];
    uint64_t v140 = v230[1];
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = v139;
    *(void *)(inited + 56) = v140;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    id v141 = (void *)static _DictionaryStorage.allocate(capacity:)();
    int64_t v39 = (int64_t)v230;
    outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v230, &demangling cache variable for type metadata for (String, Any));
    uint64_t v21 = v230[0];
    unint64_t v33 = (char *)v230[1];
    swift_retain();
    unint64_t v142 = specialized __RawDictionaryStorage.find<A>(_:)(v21, (uint64_t)v33);
    if (v45) {
      goto LABEL_70;
    }
    v141[(v142 >> 6) + 8] |= 1 << v142;
    id v143 = (uint64_t *)(v141[6] + 16 * v142);
    *id v143 = v21;
    v143[1] = (uint64_t)v33;
    outlined init with take of Any(v231, (_OWORD *)(v141[7] + 32 * v142));
    uint64_t v144 = v141[2];
    BOOL v60 = __OFADD__(v144, 1);
    uint64_t v145 = v144 + 1;
    if (!v60)
    {
      v141[2] = v145;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v146 = objc_allocWithZone((Class)NSError);
      uint64_t v147 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v148 = objc_msgSend(v146, sel_initWithDomain_code_userInfo_, v147, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v149 = objc_msgSend(v148, sel_domain);
      id v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
      uint64_t v152 = v151;

      if (v150 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v152 == v153)
      {
LABEL_47:
        swift_bridgeObjectRelease_n();
        goto LABEL_58;
      }
      char v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v167) {
        goto LABEL_58;
      }
LABEL_111:
      __break(1u);
    }
LABEL_71:
    __break(1u);
LABEL_72:
    int v193 = v45;
    unint64_t v194 = v46;
    int v195 = (os_unfair_lock_s *)v39;
    uint64_t v196 = v21;
    uint64_t v197 = inited;
    uint64_t v198 = v41;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    uint64_t v203 = static _DictionaryStorage.copy(original:)();
    uint64_t v201 = v38;
    if (v38[2]) {
      break;
    }
LABEL_106:
    swift_bridgeObjectRelease();
    uint64_t v41 = v198;
    uint64_t v21 = v196;
    unint64_t v46 = v194;
    uint64_t v160 = (void *)v203;
    id v164 = v195;
    if (v193)
    {
LABEL_56:
      uint64_t v165 = v160[7];
      uint64_t v166 = 8 * v46;
      swift_release();
      *(void *)(v165 + v166) = v41;
    }
    else
    {
LABEL_107:
      uint64_t v187 = v21;
      uint64_t v188 = v21;
      uint64_t v189 = v227;
      unint64_t v190 = v46;
      outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v187, (uint64_t)v227, type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v191 = (uint64_t)v189;
      uint64_t v21 = v188;
      specialized _NativeDictionary._insert(at:key:value:)(v190, v191, v41, v160);
    }
    int64_t v39 = (int64_t)v223;
    *((void *)v33 + 2) = v160;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v164);
    swift_release_n();
    swift_bridgeObjectRelease();
  }
  uint64_t v168 = (char *)(v203 + 64);
  uint64_t v169 = 1 << *(unsigned char *)(v203 + 32);
  uint64_t v200 = (char *)(v201 + 8);
  unint64_t v170 = (unint64_t)(v169 + 63) >> 6;
  if ((void *)v203 != v201 || v168 >= &v200[8 * v170]) {
    memmove(v168, v200, 8 * v170);
  }
  int64_t v39 = 0;
  unint64_t v171 = v201;
  *(void *)(v203 + 16) = v201[2];
  uint64_t v172 = 1 << *((unsigned char *)v171 + 32);
  uint64_t v173 = v171[8];
  uint64_t v174 = -1;
  if (v172 < 64) {
    uint64_t v174 = ~(-1 << v172);
  }
  unint64_t v175 = v174 & v173;
  int64_t v199 = (unint64_t)(v172 + 63) >> 6;
  uint64_t v176 = v227;
  while (2)
  {
    if (v175)
    {
      unint64_t v177 = __clz(__rbit64(v175));
      v175 &= v175 - 1;
      unint64_t v178 = v177 | (v39 << 6);
LABEL_80:
      id v179 = v201;
      unint64_t v180 = *(void *)(v226 + 72) * v178;
      outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v201[6] + v180, (uint64_t)v176, type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v181 = 8 * v178;
      uint64_t v182 = *(void *)(v179[7] + 8 * v178);
      uint64_t v183 = v203;
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v176, *(void *)(v203 + 48) + v180, type metadata accessor for ICULegacyNumberFormatter.Signature);
      *(void *)(*(void *)(v183 + 56) + v181) = v182;
      swift_retain();
      continue;
    }
    break;
  }
  int64_t v184 = v39 + 1;
  if (__OFADD__(v39, 1))
  {
    __break(1u);
    goto LABEL_113;
  }
  if (v184 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v184];
  ++v39;
  if (v185) {
    goto LABEL_105;
  }
  int64_t v39 = v184 + 1;
  if (v184 + 1 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v39];
  if (v185) {
    goto LABEL_105;
  }
  int64_t v39 = v184 + 2;
  if (v184 + 2 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v39];
  if (v185) {
    goto LABEL_105;
  }
  int64_t v39 = v184 + 3;
  if (v184 + 3 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v39];
  if (v185) {
    goto LABEL_105;
  }
  int64_t v39 = v184 + 4;
  if (v184 + 4 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v39];
  if (v185) {
    goto LABEL_105;
  }
  int64_t v39 = v184 + 5;
  if (v184 + 5 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v39];
  if (v185) {
    goto LABEL_105;
  }
  int64_t v39 = v184 + 6;
  if (v184 + 6 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v39];
  if (v185) {
    goto LABEL_105;
  }
  int64_t v39 = v184 + 7;
  if (v184 + 7 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v39];
  if (v185)
  {
LABEL_105:
    unint64_t v175 = (v185 - 1) & v185;
    unint64_t v178 = __clz(__rbit64(v185)) + (v39 << 6);
    goto LABEL_80;
  }
  int64_t v186 = v184 + 8;
  if (v186 >= v199) {
    goto LABEL_106;
  }
  unint64_t v185 = *(void *)&v200[8 * v186];
  if (v185)
  {
    int64_t v39 = v186;
    goto LABEL_105;
  }
  while (1)
  {
    int64_t v39 = v186 + 1;
    if (__OFADD__(v186, 1)) {
      break;
    }
    if (v39 >= v199) {
      goto LABEL_106;
    }
    unint64_t v185 = *(void *)&v200[8 * v39];
    ++v186;
    if (v185) {
      goto LABEL_105;
    }
  }
LABEL_114:
  __break(1u);
LABEL_115:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *initializeWithCopy for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v17 = v16[9];
      uint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      uint64_t v26 = v16[10];
      uint64_t v27 = &a1[v26];
      unint64_t v28 = &a2[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      a1[v16[11]] = a2[v16[11]];
      a1[v16[12]] = a2[v16[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v23 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v23;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      unint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v9[9];
      uint64_t v11 = &a1[v24];
      uint64_t v12 = &a2[v24];
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
LABEL_9:
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v11, v12, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_15:
        uint64_t v29 = v9[10];
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        *(void *)uint64_t v30 = *(void *)v31;
        unsigned char v30[8] = v31[8];
        a1[v9[11]] = a2[v9[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v8 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      unint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v10 = v9[9];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
        goto LABEL_9;
      }
      goto LABEL_14;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_17:
  uint64_t v32 = *(int *)(a3 + 20);
  uint64_t v33 = *(int *)(a3 + 24);
  uint64_t v34 = &a1[v32];
  unint64_t v35 = &a2[v32];
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v36;
  a1[v33] = a2[v33];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with take of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_5;
  }
  uint64_t v4 = String.UTF16View._nativeGetOffset(for:)();
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0);
    swift_bridgeObjectRetain();
    unint64_t v2 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (uint64_t)(v5 + 4), v4, a1, v2);
    swift_bridgeObjectRelease();
    if (v2 == v4) {
      break;
    }
    __break(1u);
LABEL_5:
    uint64_t v4 = String.UTF16View._foreignCount()();
    if (!v4) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v5;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (!a2)
  {
    uint64_t v12 = 0;
    __int16 v13 = 0;
    a3 = 0;
    char v16 = 1;
    goto LABEL_39;
  }
  uint64_t result = swift_bridgeObjectRetain();
  if (!a3)
  {
    uint64_t v12 = 0;
    __int16 v13 = 0;
    char v16 = 1;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v12 = 0;
  __int16 v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = a5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v27 = a1;
  char v16 = 1;
  while (1)
  {
    if ((v16 & 1) == 0)
    {
      char v16 = 1;
      LOWORD(v17) = v13;
      __int16 v13 = 0;
      goto LABEL_9;
    }
    if (v12 >= v8) {
      break;
    }
    if ((a5 & 0x1000000000000000) != 0)
    {
      uint64_t v22 = v15;
      unsigned int v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      uint64_t v15 = v22;
      unsigned int v17 = v23;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        uint64_t v18 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          uint64_t v26 = v15;
          uint64_t v18 = _StringObject.sharedUTF8.getter();
          uint64_t v15 = v26;
        }
        unsigned int v17 = *(unsigned __int8 *)(v18 + v12);
        if (*(char *)(v18 + v12) < 0)
        {
          switch(__clz(v17 ^ 0xFF))
          {
            case 0x1Au:
              LOWORD(v17) = *(unsigned char *)(v12 + v18 + 1) & 0x3F | ((v17 & 0x1F) << 6);
              uint64_t v19 = 2;
              goto LABEL_18;
            case 0x1Bu:
              LOWORD(v17) = ((v17 & 0xF) << 12) | ((*(unsigned char *)(v12 + v18 + 1) & 0x3F) << 6) | *(unsigned char *)(v12 + v18 + 2) & 0x3F;
              uint64_t v19 = 3;
              goto LABEL_18;
            case 0x1Cu:
              uint64_t v21 = (char *)(v12 + v18);
              goto LABEL_29;
            default:
              break;
          }
        }
        uint64_t v19 = 1;
LABEL_18:
        v12 += v19;
        char v16 = 1;
        goto LABEL_9;
      }
      v28[0] = a4;
      v28[1] = v15;
      unsigned int v17 = *((unsigned __int8 *)v28 + v12);
      if (*((char *)v28 + v12) < 0)
      {
        switch(__clz(v17 ^ 0xFF))
        {
          case 0x1Au:
            unsigned int v17 = *((unsigned char *)v28 + v12 + 1) & 0x3F | ((v17 & 0x1F) << 6);
            uint64_t v20 = 2;
            break;
          case 0x1Bu:
            unsigned int v17 = ((v17 & 0xF) << 12) | ((*((unsigned char *)v28 + v12 + 1) & 0x3F) << 6) | *((unsigned char *)v28 + v12 + 2) & 0x3F;
            uint64_t v20 = 3;
            break;
          case 0x1Cu:
            uint64_t v21 = (char *)v28 + v12;
LABEL_29:
            unsigned int v17 = ((v17 & 0xF) << 18) | ((v21[1] & 0x3F) << 12) | ((v21[2] & 0x3F) << 6) | v21[3] & 0x3F;
            uint64_t v20 = 4;
            break;
          default:
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        uint64_t v20 = 1;
      }
    }
    v12 += v20;
    if (HIWORD(v17))
    {
      uint64_t v24 = v15;
      __int16 v13 = Unicode.Scalar.UTF16View.subscript.getter();
      __int16 v25 = Unicode.Scalar.UTF16View.subscript.getter();
      uint64_t v15 = v24;
      LOWORD(v17) = v25;
      char v16 = 0;
    }
    else
    {
      char v16 = 1;
    }
LABEL_9:
    *(_WORD *)(a2 + 2 * v14++) = v17;
    if (a3 == v14) {
      goto LABEL_37;
    }
  }
  char v16 = 1;
  a3 = v14;
LABEL_37:
  a1 = v27;
LABEL_38:
  swift_bridgeObjectRelease();
LABEL_39:
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 34) = v16;
  return a3;
}

unint64_t specialized BidirectionalCollection._trimmingCharacters(while:)(unint64_t a1, unint64_t a2)
{
  uint64_t v56 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x1F4188790](v56);
  uint64_t v55 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v50 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v51 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a2) & 0xF;
  }
  unint64_t v57 = v6;
  unint64_t v58 = a1;
  if ((a2 & 0x1000000000000000) != 0) {
    uint64_t v7 = (a1 >> 59) & 1;
  }
  else {
    uint64_t v7 = 1;
  }
  uint64_t v8 = (uint64_t (**)(char *, uint64_t))(4 * v6);
  uint64_t v48 = v4;
  uint64_t v49 = v7;
  unint64_t v9 = 0;
  if (!v6)
  {
    unint64_t v12 = 15;
LABEL_50:
    LOBYTE(v11) = v49;
    uint64_t v23 = 11;
    if (v49) {
      uint64_t v23 = 7;
    }
    if (v9 == v8) {
      return String.UnicodeScalarView.subscript.getter();
    }
    unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(v23 | (v57 << 16), v58, a2);
    if (result < 0x4000) {
      goto LABEL_125;
    }
    unint64_t v25 = result;
    if ((a2 & 0x1000000000000000) != 0) {
      goto LABEL_126;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v59 = v58;
      uint64_t v60 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v30 = (char *)&v59 + (result >> 16);
      if ((*(v30 - 1) & 0xC0) == 0x80)
      {
        uint64_t v27 = 0;
        uint64_t v31 = v30 - 2;
        do
          int v32 = v31[v27--] & 0xC0;
        while (v32 == 128);
        goto LABEL_65;
      }
    }
    else
    {
      if ((v58 & 0x1000000000000000) != 0) {
        unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      unint64_t v26 = (v25 >> 16) + result;
      if ((*(unsigned char *)(v26 - 1) & 0xC0) == 0x80)
      {
        uint64_t v27 = 0;
        unint64_t v28 = v26 - 2;
        do
          int v29 = *(unsigned char *)(v28 + v27--) & 0xC0;
        while (v29 == 128);
LABEL_65:
        uint64_t v33 = 1 - v27;
        goto LABEL_67;
      }
    }
    uint64_t v33 = 1;
LABEL_67:
    unint64_t v34 = (v25 - (v33 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
    if ((unint64_t)v9 >= v34 >> 14) {
      goto LABEL_127;
    }
    goto LABEL_68;
  }
  uint64_t v10 = 4 << v7;
  Swift::String v52 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v53 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v11 = v4 + 8;
  unint64_t v12 = 15;
  while (1)
  {
    uint64_t v54 = (uint64_t)v9;
    unint64_t v9 = (uint64_t (**)(char *, uint64_t))(v12 & 0xC);
    BOOL v13 = (v12 & 1) == 0 || v9 == (uint64_t (**)(char *, uint64_t))v10;
    BOOL v14 = v13;
    if (v13) {
      break;
    }
    if (v12 >> 16 >= v57) {
      goto LABEL_118;
    }
LABEL_24:
    if ((a2 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      swift_bridgeObjectRetain();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v59 = v58;
      uint64_t v60 = v53;
      swift_bridgeObjectRetain();
      _decodeScalar(_:startingAt:)();
    }
    else
    {
      if ((v58 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      swift_bridgeObjectRetain();
      _decodeScalar(_:startingAt:)();
    }
    char v16 = v55;
    Unicode.Scalar.properties.getter();
    char v17 = Unicode.Scalar.Properties.isWhitespace.getter();
    (*(void (**)(char *, uint64_t))v11)(v16, v56);
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      unint64_t v9 = (uint64_t (**)(char *, uint64_t))v54;
      goto LABEL_50;
    }
    if (v14)
    {
      if (v9 == (uint64_t (**)(char *, uint64_t))v10) {
        unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v58, a2);
      }
      if (v57 <= v12 >> 16) {
        goto LABEL_119;
      }
      if ((v12 & 1) == 0) {
        unint64_t v12 = v12 & 0xC | _StringGuts.scalarAlignSlow(_:)(v12, v58, a2) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else if (v57 <= v12 >> 16)
    {
      goto LABEL_120;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t v12 = String.UnicodeScalarView._foreignIndex(after:)();
    }
    else
    {
      unint64_t v18 = v12 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        unint64_t v59 = v58;
        uint64_t v60 = v53;
        int v20 = *((unsigned __int8 *)&v59 + v18);
      }
      else
      {
        uint64_t v19 = (uint64_t)v52;
        if ((v58 & 0x1000000000000000) == 0) {
          uint64_t v19 = _StringObject.sharedUTF8.getter();
        }
        int v20 = *(unsigned __int8 *)(v19 + v18);
      }
      int v21 = (char)v20;
      unsigned int v22 = __clz(v20 ^ 0xFF) - 24;
      if (v21 >= 0) {
        LOBYTE(v22) = 1;
      }
      unint64_t v12 = ((v18 + v22) << 16) | 5;
    }
    unint64_t v9 = (uint64_t (**)(char *, uint64_t))(v12 >> 14);
    if (v12 >> 14 >= (unint64_t)v8) {
      goto LABEL_50;
    }
  }
  unint64_t v15 = v12;
  if (v9 == (uint64_t (**)(char *, uint64_t))v10) {
    unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v58, a2);
  }
  if (v15 >> 16 < v57)
  {
    if ((v15 & 1) == 0) {
      _StringGuts.scalarAlignSlow(_:)(v15, v58, a2);
    }
    goto LABEL_24;
  }
  while (2)
  {
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
      unint64_t v34 = result;
      if ((unint64_t)v9 >= result >> 14)
      {
LABEL_127:
        if (v8 < v9) {
          goto LABEL_131;
        }
        return String.UnicodeScalarView.subscript.getter();
      }
LABEL_68:
      uint64_t v35 = 4 << v11;
      uint64_t v53 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v54 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v8 = (uint64_t (**)(char *, uint64_t))(v48 + 8);
      Swift::String v52 = (char *)&v58 + 6;
      uint64_t v36 = v55;
LABEL_70:
      unint64_t v11 = v34 & 0xC;
      BOOL v37 = (v34 & 1) == 0 || v11 == v35;
      char v38 = v37;
      if (v37)
      {
        unint64_t v39 = v34;
        if (v11 == v35) {
          unint64_t v39 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v58, a2);
        }
        if (v39 >> 16 >= v57) {
          continue;
        }
        if ((v39 & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(v39, v58, a2);
        }
      }
      else if (v34 >> 16 >= v57)
      {
        goto LABEL_122;
      }
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        unint64_t v59 = v58;
        uint64_t v60 = v54;
      }
      else if ((v58 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v40 = Unicode.Scalar.Properties.isWhitespace.getter();
    unint64_t result = (*v8)(v36, v56);
    if (v40)
    {
      if (v38)
      {
        if (v11 == v35) {
          unint64_t v34 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v58, a2);
        }
        if (v57 < v34 >> 16) {
          goto LABEL_123;
        }
        if ((v34 & 1) == 0) {
          unint64_t v34 = v34 & 0xC | _StringGuts.scalarAlignSlow(_:)(v34, v58, a2) & 0xFFFFFFFFFFFFFFF3 | 1;
        }
      }
      else if (v57 < v34 >> 16)
      {
        goto LABEL_124;
      }
      if (v34 < 0x4000)
      {
        __break(1u);
        continue;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t v34 = String.UnicodeScalarView._foreignIndex(before:)();
        goto LABEL_70;
      }
      unint64_t v41 = v34 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        unint64_t v59 = v58;
        uint64_t v60 = v54;
        if ((*((unsigned char *)&v59 + v41 - 1) & 0xC0) != 0x80) {
          goto LABEL_112;
        }
        uint64_t v43 = 0;
        do
          int v45 = v52[v41 + v43--] & 0xC0;
        while (v45 == 128);
LABEL_111:
        uint64_t v46 = 1 - v43;
      }
      else
      {
        uint64_t v42 = v53;
        if ((v58 & 0x1000000000000000) == 0) {
          uint64_t v42 = _StringObject.sharedUTF8.getter();
        }
        if ((*(unsigned char *)(v41 + v42 - 1) & 0xC0) == 0x80)
        {
          uint64_t v43 = 0;
          do
            int v44 = *(unsigned char *)(v42 + v41 - 2 + v43--) & 0xC0;
          while (v44 == 128);
          goto LABEL_111;
        }
LABEL_112:
        uint64_t v46 = 1;
      }
      unint64_t v34 = (v34 - (v46 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      goto LABEL_70;
    }
    break;
  }
  if ((unint64_t)v9 <= v34 >> 14)
  {
    specialized ClosedRange.relative<A>(to:)(v58, a2, v12, v34);
    return String.UnicodeScalarView.subscript.getter();
  }
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

uint64_t StringProtocol.trimmingCharacters(in:)(uint64_t a1, uint64_t a2)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  uint64_t v9 = String.init<A>(_:)();
  specialized BidirectionalCollection<>._trimmingCharacters(in:)(v7, v9, v10);
  swift_bridgeObjectRelease();
  return String.init(_:)();
}

uint64_t specialized BidirectionalCollection<>._trimmingCharacters(in:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v49 = a1;
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v5 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  }
  int v6 = (a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0;
  unint64_t v7 = 4 * v5;
  int v45 = v6;
  unint64_t v8 = 0;
  if (v5)
  {
    uint64_t v9 = 4 << v6;
    uint64_t v46 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v47 = a3 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v10 = 15;
    while (1)
    {
      unint64_t v11 = v10 & 0xC;
      BOOL v12 = (v10 & 1) == 0 || v11 == v9;
      int v13 = v12;
      if (v12)
      {
        unint64_t v14 = v10;
        if (v11 == v9) {
          unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v4, a3);
        }
        if (v14 >> 16 >= v5)
        {
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if ((v14 & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(v14, v4, a3);
        }
      }
      else if (v10 >> 16 >= v5)
      {
        goto LABEL_125;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        UTF32Char v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        swift_bridgeObjectRetain();
      }
      else if ((a3 & 0x2000000000000000) != 0)
      {
        unint64_t v50 = v4;
        uint64_t v51 = v47;
        swift_bridgeObjectRetain();
        UTF32Char v15 = _decodeScalar(_:startingAt:)();
      }
      else
      {
        if ((v4 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        swift_bridgeObjectRetain();
        UTF32Char v15 = _decodeScalar(_:startingAt:)();
        unint64_t v4 = a2;
        unint64_t v7 = 4 * v5;
      }
      int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v49 + 16), v15);
      swift_bridgeObjectRelease();
      if (IsLongCharacterMember)
      {
        if (v13)
        {
          if (v11 == v9)
          {
            unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v4, a3);
            if (v5 <= v10 >> 16) {
              goto LABEL_127;
            }
          }
          else if (v5 <= v10 >> 16)
          {
            goto LABEL_127;
          }
          if ((v10 & 1) == 0) {
            unint64_t v10 = v10 & 0xC | _StringGuts.scalarAlignSlow(_:)(v10, v4, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
          }
        }
        else if (v5 <= v10 >> 16)
        {
          goto LABEL_126;
        }
        if ((a3 & 0x1000000000000000) != 0)
        {
          unint64_t v10 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          unint64_t v17 = v10 >> 16;
          if ((a3 & 0x2000000000000000) != 0)
          {
            unint64_t v50 = v4;
            uint64_t v51 = v47;
            int v19 = *((unsigned __int8 *)&v50 + v17);
          }
          else
          {
            uint64_t v18 = v46;
            if ((v4 & 0x1000000000000000) == 0) {
              uint64_t v18 = _StringObject.sharedUTF8.getter();
            }
            int v19 = *(unsigned __int8 *)(v18 + v17);
          }
          int v20 = (char)v19;
          unsigned int v21 = __clz(v19 ^ 0xFF) - 24;
          if (v20 >= 0) {
            LOBYTE(v21) = 1;
          }
          unint64_t v10 = ((v17 + v21) << 16) | 5;
        }
        unint64_t v8 = v10 >> 14;
        if (v10 >> 14 < v7) {
          continue;
        }
      }
      break;
    }
  }
  LOBYTE(v9) = v45;
  uint64_t v22 = 11;
  if (v45) {
    uint64_t v22 = 7;
  }
  if (v8 == v7) {
    return String.UnicodeScalarView.subscript.getter();
  }
  unint64_t v23 = _StringGuts.validateInclusiveScalarIndex(_:)(v22 | (v5 << 16), v4, a3);
  if (v23 < 0x4000) {
    goto LABEL_132;
  }
  unint64_t v24 = v23;
  if ((a3 & 0x1000000000000000) != 0)
  {
LABEL_133:
    unint64_t v31 = String.UnicodeScalarView._foreignIndex(before:)();
    if (v8 < v31 >> 14) {
      goto LABEL_68;
    }
    goto LABEL_134;
  }
  unint64_t v25 = v23 >> 16;
  if ((a3 & 0x2000000000000000) != 0)
  {
    unint64_t v50 = v4;
    uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
    if ((*((unsigned char *)&v50 + v25 - 1) & 0xC0) == 0x80)
    {
      uint64_t v27 = 0;
      do
        int v29 = *((unsigned char *)&v50 + v25 + v27-- - 2) & 0xC0;
      while (v29 == 128);
      goto LABEL_65;
    }
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0) {
      uint64_t v26 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v26 = _StringObject.sharedUTF8.getter();
    }
    if ((*(unsigned char *)(v25 + v26 - 1) & 0xC0) == 0x80)
    {
      uint64_t v27 = 0;
      do
        int v28 = *(unsigned char *)(v25 + v26 - 2 + v27--) & 0xC0;
      while (v28 == 128);
LABEL_65:
      uint64_t v30 = 1 - v27;
      goto LABEL_67;
    }
  }
  uint64_t v30 = 1;
LABEL_67:
  unint64_t v31 = (v24 - (v30 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  if (v8 < v31 >> 14)
  {
LABEL_68:
    uint64_t v32 = 4 << v9;
    while (1)
    {
      unint64_t v33 = v31 & 0xC;
      BOOL v34 = (v31 & 1) == 0 || v33 == v32;
      LODWORD(v9) = v34;
      if (v34)
      {
        unint64_t v35 = v31;
        if (v33 == v32) {
          unint64_t v35 = _StringGuts._slowEnsureMatchingEncoding(_:)(v31, v4, a3);
        }
        unint64_t v4 = v35 >> 16;
        if (v35 >> 16 >= v5) {
          goto LABEL_128;
        }
        if ((v35 & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(v35, a2, a3);
        }
      }
      else
      {
        unint64_t v4 = v31 >> 16;
        if (v31 >> 16 >= v5) {
          goto LABEL_129;
        }
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        unint64_t v4 = a2;
        UTF32Char v37 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a3 & 0x2000000000000000) == 0)
        {
          if ((a2 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          UTF32Char v36 = _decodeScalar(_:startingAt:)();
          unint64_t v4 = a2;
          goto LABEL_92;
        }
        unint64_t v50 = a2;
        uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v4 = a2;
        UTF32Char v37 = _decodeScalar(_:startingAt:)();
      }
      UTF32Char v36 = v37;
LABEL_92:
      if (!CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v49 + 16), v36))
      {
        if (v8 > v31 >> 14) {
          goto LABEL_138;
        }
        _StringGuts.validateScalarIndex(_:)(v31, v4, a3);
        if ((a3 & 0x1000000000000000) != 0)
        {
          String.UnicodeScalarView._foreignIndex(after:)();
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          unint64_t v50 = v4;
          uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v4 & 0x1000000000000000) == 0)
        {
          goto LABEL_139;
        }
        return String.UnicodeScalarView.subscript.getter();
      }
      if (v9)
      {
        if (v33 == v32)
        {
          unint64_t v31 = _StringGuts._slowEnsureMatchingEncoding(_:)(v31, v4, a3);
          if (v5 < v31 >> 16) {
            goto LABEL_131;
          }
        }
        else if (v5 < v31 >> 16)
        {
          goto LABEL_131;
        }
        if ((v31 & 1) == 0) {
          unint64_t v31 = v31 & 0xC | _StringGuts.scalarAlignSlow(_:)(v31, v4, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
        }
      }
      else if (v5 < v31 >> 16)
      {
        goto LABEL_130;
      }
      if (v31 < 0x4000)
      {
        __break(1u);
        goto LABEL_124;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        unint64_t v31 = String.UnicodeScalarView._foreignIndex(before:)();
      }
      else
      {
        unint64_t v38 = v31 >> 16;
        if ((a3 & 0x2000000000000000) != 0)
        {
          unint64_t v50 = v4;
          uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v50 + v38 - 1) & 0xC0) == 0x80)
          {
            uint64_t v40 = 0;
            do
              int v42 = *((unsigned char *)&v49 + v38 + v40-- + 6) & 0xC0;
            while (v42 == 128);
            goto LABEL_111;
          }
        }
        else
        {
          uint64_t v39 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v4 & 0x1000000000000000) == 0) {
            uint64_t v39 = _StringObject.sharedUTF8.getter();
          }
          if ((*(unsigned char *)(v38 + v39 - 1) & 0xC0) == 0x80)
          {
            uint64_t v40 = 0;
            do
              int v41 = *(unsigned char *)(v39 + v38 - 2 + v40--) & 0xC0;
            while (v41 == 128);
LABEL_111:
            uint64_t v43 = 1 - v40;
            goto LABEL_113;
          }
        }
        uint64_t v43 = 1;
LABEL_113:
        unint64_t v31 = (v31 - (v43 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
    }
  }
LABEL_134:
  if (4 * v5 < v8)
  {
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    _StringObject.sharedUTF8.getter();
  }
  return String.UnicodeScalarView.subscript.getter();
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

uint64_t _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICULegacyNumberB0C9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLV_AJTG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t specialized ClosedRange.relative<A>(to:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    String.UnicodeScalarView._foreignIndex(after:)();
  }
  else if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
  {
    _StringObject.sharedUTF8.getter();
  }
  return a3;
}

uint64_t specialized static TimeZone.tryParseGMTName(_:)()
{
  uint64_t v0 = String.count.getter();
  if ((unint64_t)(v0 - 10) < 0xFFFFFFFFFFFFFFF9) {
    return 0;
  }
  unint64_t v1 = v0;
  char v2 = specialized Sequence<>.starts<A>(with:)();
  char v3 = specialized Sequence<>.starts<A>(with:)();
  if ((v2 & 1) == 0 && (v3 & 1) == 0) {
    return 0;
  }
  if (v1 == 3) {
    return 0;
  }
  if (v1 < 5) {
    return 0;
  }
  String.index(_:offsetBy:)();
  uint64_t v6 = String.subscript.getter();
  uint64_t v7 = v5;
  if (v6 == 43 && v5 == 0xE100000000000000)
  {
    char v8 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (v6 == 45 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      char v9 = 1;
      goto LABEL_17;
    }
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  char v9 = v8 ^ 1 | v10;
  if ((v8 & 1) == 0 && (v10 & 1) == 0) {
    return 0;
  }
LABEL_17:
  String.index(after:)();
  String.subscript.getter();
  __int16 v11 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if ((v11 & 0x100) != 0 || (v11 - 58) < 0xF6u) {
    return result;
  }
  unint64_t v12 = (v11 - 48);
  if (v1 == 5)
  {
    if (v9) {
      return -3600 * (int)v12;
    }
    return 3600 * v12;
  }
  String.index(after:)();
  String.subscript.getter();
  __int16 v13 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  if ((v13 & 0x100) != 0) {
    return 0;
  }
  if (v13 > 0x2Fu)
  {
    if (v13 != 58)
    {
      if (v13 > 0x39u) {
        return 0;
      }
      unint64_t v12 = 10 * v12 + (v13 - 48);
      if (v12 > 0x12) {
        return 0;
      }
      if (v1 == 6)
      {
        if (v9) {
          return -3600 * (int)v12;
        }
        return 3600 * v12;
      }
    }
  }
  else if (v13 != 46)
  {
    return 0;
  }
  if (v1 < 8) {
    return 0;
  }
  String.index(after:)();
  String.subscript.getter();
  __int16 v14 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  if ((v14 & 0x100) != 0) {
    return 0;
  }
  if (v14 < 0x30u)
  {
    uint64_t result = 0;
    if (v1 != 9 || v14 != 46) {
      return result;
    }
    goto LABEL_40;
  }
  if (v14 == 58)
  {
    if (v1 == 9)
    {
LABEL_40:
      String.index(after:)();
      goto LABEL_43;
    }
    return 0;
  }
  uint64_t result = 0;
  if (v1 != 8 || v14 >= 0x36u) {
    return result;
  }
LABEL_43:
  String.subscript.getter();
  __int16 v15 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  String.index(after:)();
  String.subscript.getter();
  __int16 v16 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if ((v16 & 0x100) != 0 || (v16 - 58) < 0xF6u) {
    return result;
  }
  if ((v15 & 0x100) != 0) {
    unsigned __int8 v17 = 0;
  }
  else {
    unsigned __int8 v17 = v15;
  }
  int v18 = v17 - 48;
  if ((v18 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  __int16 v19 = 10 * v18;
  if ((v19 & 0xF00) != 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  unsigned int v20 = v19 + (v16 - 48);
  if ((v20 >> 8))
  {
LABEL_59:
    __break(1u);
    return result;
  }
  if (v12 == 18 && (_BYTE)v20) {
    return 0;
  }
  if (v9) {
    return -3600 * (int)v12 - 60 * v20;
  }
  return 3600 * v12 + 60 * v20;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  char v9 = (void *)result;
  if (!a2)
  {
    uint64_t v13 = 0;
    unint64_t v19 = a4;
LABEL_72:
    *char v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    void v9[3] = a7;
    v9[4] = v19;
    return v13;
  }
  if (!a3)
  {
    unint64_t v19 = a4;
LABEL_71:
    uint64_t v13 = a3;
    goto LABEL_72;
  }
  uint64_t v10 = ((unint64_t)a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  if ((a7 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a7) & 0xF;
  }
  else {
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFLL;
  }
  if ((a7 & 0x2000000000000000) != 0) {
    BOOL v12 = (a7 & 0x4000000000000000) != 0;
  }
  else {
    BOOL v12 = a6 < 0;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = 0;
    unint64_t v14 = a5 >> 14;
    uint64_t v15 = 4 << v10;
    unint64_t v16 = a4 >> 14;
    uint64_t v17 = a7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v18 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    unint64_t v19 = a4;
    while (1)
    {
      unint64_t v20 = v19 >> 14;
      if (v19 >> 14 == v14) {
        goto LABEL_72;
      }
      unint64_t v21 = v19;
      if ((v19 & 0xC) == v15)
      {
        uint64_t v93 = a2;
        unint64_t v101 = a4;
        uint64_t v70 = a3;
        uint64_t v77 = v17;
        unint64_t v109 = a5;
        uint64_t v27 = v9;
        unint64_t v28 = v11;
        BOOL v85 = v12;
        unint64_t v29 = v16;
        uint64_t v65 = v18;
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, a6, a7);
        uint64_t v18 = v65;
        a3 = v70;
        uint64_t v17 = v77;
        unint64_t v16 = v29;
        BOOL v12 = v85;
        unint64_t v11 = v28;
        a2 = v93;
        a4 = v101;
        char v9 = v27;
        a5 = v109;
        unint64_t v21 = result;
        unint64_t v20 = result >> 14;
        if (result >> 14 < v29)
        {
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          break;
        }
      }
      else if (v20 < v16)
      {
        goto LABEL_73;
      }
      if (v20 >= v14) {
        goto LABEL_73;
      }
      if ((a7 & 0x1000000000000000) != 0)
      {
        uint64_t v94 = a2;
        unint64_t v102 = a4;
        uint64_t v71 = a3;
        uint64_t v78 = v17;
        unint64_t v110 = a5;
        uint64_t v30 = v9;
        unint64_t v31 = v11;
        BOOL v86 = v12;
        unint64_t v23 = v16;
        uint64_t v66 = v18;
        uint64_t result = String.UTF16View._foreignSubscript(position:)();
        uint64_t v18 = v66;
        a3 = v71;
        uint64_t v17 = v78;
        unint64_t v16 = v23;
        BOOL v12 = v86;
        unint64_t v11 = v31;
        a2 = v94;
        a4 = v102;
        char v9 = v30;
        a5 = v110;
        LOWORD(v23) = result;
        goto LABEL_47;
      }
      if (v21)
      {
        unint64_t v22 = v21 >> 16;
        if ((a7 & 0x2000000000000000) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v95 = a2;
        unint64_t v103 = a4;
        uint64_t v72 = a3;
        uint64_t v79 = v17;
        unint64_t v111 = a5;
        uint64_t v32 = v9;
        unint64_t v33 = v11;
        BOOL v87 = v12;
        unint64_t v62 = v16;
        uint64_t v67 = v18;
        uint64_t result = _StringGuts.scalarAlignSlow(_:)(v21, a6, a7);
        unint64_t v16 = v62;
        uint64_t v18 = v67;
        a3 = v72;
        uint64_t v17 = v79;
        BOOL v12 = v87;
        unint64_t v11 = v33;
        a2 = v95;
        a4 = v103;
        char v9 = v32;
        a5 = v111;
        unint64_t v22 = (result & 0xFFFFFFFFFFFFFFF2 | 1) >> 16;
        if ((a7 & 0x2000000000000000) == 0)
        {
LABEL_22:
          uint64_t result = v18;
          if ((a6 & 0x1000000000000000) == 0)
          {
            uint64_t v98 = a2;
            unint64_t v106 = a4;
            unint64_t v114 = a5;
            Swift::String v52 = v9;
            uint64_t v75 = a3;
            uint64_t v82 = v17;
            unint64_t v60 = v11;
            unint64_t v63 = v16;
            BOOL v90 = v12;
            uint64_t v68 = v18;
            uint64_t result = _StringObject.sharedUTF8.getter();
            unint64_t v16 = v63;
            uint64_t v18 = v68;
            a3 = v75;
            uint64_t v17 = v82;
            BOOL v12 = v90;
            unint64_t v11 = v60;
            a2 = v98;
            a4 = v106;
            char v9 = v52;
            a5 = v114;
          }
          LODWORD(v23) = *(unsigned __int8 *)(result + v22);
          if (*(char *)(result + v22) < 0)
          {
            switch(__clz(v23 ^ 0xFF))
            {
              case 0x1Au:
                unint64_t v24 = (char *)(v22 + result);
                goto LABEL_36;
              case 0x1Bu:
                unint64_t v25 = (char *)(v22 + result);
                goto LABEL_38;
              case 0x1Cu:
                uint64_t v26 = (char *)(v22 + result);
                goto LABEL_40;
              default:
                goto LABEL_42;
            }
          }
          goto LABEL_42;
        }
      }
      uint64_t v117 = a6;
      uint64_t v118 = v17;
      LODWORD(v23) = *((unsigned __int8 *)&v117 + v22);
      if (*((char *)&v117 + v22) < 0)
      {
        switch(__clz(v23 ^ 0xFF))
        {
          case 0x1Au:
            unint64_t v24 = (char *)&v117 + v22;
LABEL_36:
            LODWORD(v23) = v24[1] & 0x3F | ((v23 & 0x1F) << 6);
            break;
          case 0x1Bu:
            unint64_t v25 = (char *)&v117 + v22;
LABEL_38:
            char v34 = v25[1];
            char v35 = v25[2];
            int v36 = ((v23 & 0xF) << 12) | ((v34 & 0x3F) << 6);
            goto LABEL_41;
          case 0x1Cu:
            uint64_t v26 = (char *)&v117 + v22;
LABEL_40:
            char v37 = v26[1];
            char v38 = v26[2];
            char v35 = v26[3];
            int v36 = ((v23 & 0xF) << 18) | ((v37 & 0x3F) << 12) | ((v38 & 0x3F) << 6);
LABEL_41:
            LODWORD(v23) = v36 & 0xFFFFFFC0 | v35 & 0x3F;
            break;
          default:
            break;
        }
      }
LABEL_42:
      if ((v21 & 0xC000) == 0x4000)
      {
        if (v23 < 0x10000) {
          goto LABEL_75;
        }
        LOWORD(v23) = v23 & 0x3FF | 0xDC00;
      }
      else if (v23 >= 0x10000)
      {
        LODWORD(v23) = ((v23 + 67043328) >> 10) - 10240;
      }
LABEL_47:
      if ((v19 & 0xC) == v15)
      {
        unint64_t v42 = v19;
        uint64_t v96 = a2;
        unint64_t v104 = a4;
        uint64_t v73 = a3;
        uint64_t v80 = v17;
        unint64_t v112 = a5;
        uint64_t v43 = v9;
        unint64_t v44 = v11;
        BOOL v88 = v12;
        unint64_t v45 = v16;
        uint64_t v46 = v18;
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v42, a6, a7);
        uint64_t v18 = v46;
        a3 = v73;
        uint64_t v17 = v80;
        unint64_t v16 = v45;
        BOOL v12 = v88;
        unint64_t v11 = v44;
        a2 = v96;
        a4 = v104;
        char v9 = v43;
        a5 = v112;
        unint64_t v19 = result;
      }
      unint64_t v39 = v19 >> 16;
      if (v19 >> 16 >= v11) {
        goto LABEL_74;
      }
      if ((a7 & 0x1000000000000000) != 0)
      {
        unint64_t v47 = v19;
        uint64_t v97 = a2;
        unint64_t v105 = a4;
        uint64_t v74 = a3;
        uint64_t v81 = v17;
        unint64_t v113 = a5;
        uint64_t v48 = v9;
        unint64_t v49 = v11;
        BOOL v89 = v12;
        unint64_t v50 = v16;
        uint64_t v51 = v18;
        uint64_t result = MEMORY[0x185302270](v47, a6, a7);
        uint64_t v18 = v51;
        a3 = v74;
        uint64_t v17 = v81;
        unint64_t v16 = v50;
        BOOL v12 = v89;
        unint64_t v11 = v49;
        a2 = v97;
        a4 = v105;
        char v9 = v48;
        a5 = v113;
        unint64_t v19 = result;
      }
      else
      {
        if (!v12)
        {
          if ((v19 & 0xC001) != 0)
          {
            if ((a7 & 0x2000000000000000) == 0) {
              goto LABEL_54;
            }
LABEL_63:
            uint64_t v117 = a6;
            uint64_t v118 = v17;
            LODWORD(v40) = *((unsigned __int8 *)&v117 + v39);
            if ((v40 & 0x80) == 0)
            {
LABEL_64:
              uint64_t v40 = 1;
LABEL_65:
              v19 += v40 << 16;
              unsigned __int16 v41 = 5;
              goto LABEL_66;
            }
          }
          else
          {
            unint64_t v53 = v19;
            uint64_t v99 = a2;
            unint64_t v107 = a4;
            uint64_t v76 = a3;
            uint64_t v83 = v17;
            unint64_t v115 = a5;
            uint64_t v54 = v9;
            unint64_t v55 = v11;
            BOOL v91 = v12;
            unint64_t v56 = v16;
            uint64_t v57 = v18;
            uint64_t result = _StringGuts.scalarAlignSlow(_:)(v53, a6, a7);
            uint64_t v18 = v57;
            a3 = v76;
            uint64_t v17 = v83;
            unint64_t v16 = v56;
            BOOL v12 = v91;
            unint64_t v11 = v55;
            a2 = v99;
            a4 = v107;
            char v9 = v54;
            a5 = v115;
            unint64_t v19 = result & 0xFFFFFFFFFFFFFFF2 | 1;
            unint64_t v39 = result >> 16;
            if ((a7 & 0x2000000000000000) != 0) {
              goto LABEL_63;
            }
LABEL_54:
            uint64_t result = v18;
            if ((a6 & 0x1000000000000000) != 0)
            {
              LODWORD(v40) = *(unsigned __int8 *)(v18 + v39);
              if ((v40 & 0x80) == 0) {
                goto LABEL_64;
              }
            }
            else
            {
              uint64_t v100 = a2;
              unint64_t v108 = a4;
              unint64_t v116 = a5;
              unint64_t v58 = v9;
              uint64_t v59 = a3;
              unint64_t v61 = v11;
              unint64_t v64 = v16;
              BOOL v92 = v12;
              uint64_t v84 = v17;
              uint64_t v69 = v18;
              uint64_t result = _StringObject.sharedUTF8.getter();
              unint64_t v16 = v64;
              uint64_t v18 = v69;
              uint64_t v17 = v84;
              BOOL v12 = v92;
              unint64_t v11 = v61;
              a2 = v100;
              a4 = v108;
              a3 = v59;
              char v9 = v58;
              a5 = v116;
              LODWORD(v40) = *(unsigned __int8 *)(result + v39);
              if ((v40 & 0x80) == 0) {
                goto LABEL_64;
              }
            }
          }
          LODWORD(v40) = __clz(v40 ^ 0xFF) - 24;
          if (v40 != 4)
          {
            uint64_t v40 = v40;
            goto LABEL_65;
          }
          if ((v19 & 0xC000) != 0)
          {
            uint64_t v40 = 4;
            goto LABEL_65;
          }
          unsigned __int16 v41 = 16388;
LABEL_66:
          unint64_t v19 = v19 & 0xFFFFFFFFFFFF0000 | v41;
          goto LABEL_14;
        }
        unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65549;
      }
LABEL_14:
      *(_WORD *)(a2 + 2 * v13++) = v23;
      if (a3 == v13) {
        goto LABEL_71;
      }
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall URLRequest.addValue(_:forHTTPHeaderField:)(Swift::String _, Swift::String forHTTPHeaderField)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  specialized URLRequest._applyMutation<A>(_:)(v2);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Float()
{
  int v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v3) = v1;

  return objc_msgSend(v2, sel_initWithFloat_, v3);
}

unint64_t StringProtocol.rangeOfCharacter(from:options:range:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = *v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v12, v7);
  unint64_t v14 = Substring.init<A>(_:)();
  unint64_t v16 = v15;
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  if ((a5 & 1) == 0)
  {
    unint64_t v14 = Substring.subscript.getter();
    unint64_t v16 = v21;
    unint64_t v18 = v22;
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    unint64_t v20 = v24;
  }
  if ((v16 ^ v14) >> 14)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v25 = specialized Substring.UnicodeScalarView._rangeOfCharacter(anchored:backwards:matchingPredicate:)((a2 >> 3) & 1, (a2 & 4) != 0, v14, v16, v18, v20, v10);
    swift_bridgeObjectRelease_n();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v25;
}

unint64_t specialized Substring.UnicodeScalarView._rangeOfCharacter(anchored:backwards:matchingPredicate:)(unint64_t result, char a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v7 = a3 >> 14;
  unint64_t v8 = a4 >> 14;
  if (a3 >> 14 == a4 >> 14)
  {
    return 0;
  }
  else
  {
    char v14 = result;
    if (a2)
    {
      uint64_t result = Substring.UnicodeScalarView.index(before:)();
      unint64_t v9 = result;
      if (v14) {
        unint64_t v15 = result;
      }
      else {
        unint64_t v15 = a3;
      }
    }
    else
    {
      if (result)
      {
        unint64_t v15 = a3;
      }
      else
      {
        uint64_t result = Substring.UnicodeScalarView.index(before:)();
        unint64_t v15 = result;
      }
      unint64_t v9 = a3;
    }
    uint64_t v16 = (a5 >> 59) & 1;
    if ((a6 & 0x1000000000000000) == 0) {
      LOBYTE(v16) = 1;
    }
    uint64_t v17 = 4 << v16;
    unint64_t v20 = v15;
    for (i = 4 << v16; ; uint64_t v17 = i)
    {
      if ((v9 & 0xC) == v17 || (v9 & 1) == 0)
      {
        uint64_t result = v9;
        if ((v9 & 0xC) == v17) {
          uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a5, a6);
        }
        if (result >> 14 < v7 || result >> 14 >= v8)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if ((result & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(result, a5, a6);
        }
      }
      else
      {
        if (v9 >> 14 < v7) {
          goto LABEL_39;
        }
        uint64_t result = v9;
        if (v9 >> 14 >= v8) {
          goto LABEL_39;
        }
      }
      if ((a6 & 0x1000000000000000) != 0)
      {
        UTF32Char v19 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a6 & 0x2000000000000000) == 0 && (a5 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        UTF32Char v19 = _decodeScalar(_:startingAt:)();
        unint64_t v15 = v20;
      }
      if (CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(a7 + 16), v19)) {
        break;
      }
      if ((v9 ^ v15) < 0x4000) {
        return 0;
      }
      uint64_t result = Substring.UnicodeScalarView.index(_:offsetBy:)();
      unint64_t v9 = result;
    }
    uint64_t result = Substring.UnicodeScalarView.index(after:)();
    if (result >> 14 >= v9 >> 14) {
      return v9;
    }
LABEL_40:
    __break(1u);
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in NSObject.KeyValueObservingPublisher<A, B>()
{
  return MEMORY[0x1E4FBC278];
}

uint64_t Data.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  return Data._Representation.withUnsafeMutableBytes<A>(_:)(a1);
}

uint64_t Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v6 = *v1;
      *((void *)&v6 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)int v1 = xmmword_1821115B0;
      uint64_t result = Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(a1);
      uint64_t v4 = v6;
      unint64_t v5 = *((void *)&v6 + 1) | 0x4000000000000000;
      goto LABEL_6;
    case 2uLL:
      *(void *)&long long v6 = *v1;
      *((void *)&v6 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)int v1 = xmmword_1821115B0;
      uint64_t result = Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(a1);
      uint64_t v4 = v6;
      unint64_t v5 = *((void *)&v6 + 1) | 0x8000000000000000;
      goto LABEL_6;
    case 3uLL:
      *(void *)((char *)&v6 + 7) = 0;
      *(void *)&long long v6 = 0;
      return a1((uint64_t)&v6, (uint64_t)&v6);
    default:
      *(void *)&long long v6 = *v1;
      WORD4(v6) = v2;
      BYTE10(v6) = BYTE2(v2);
      BYTE11(v6) = BYTE3(v2);
      BYTE12(v6) = BYTE4(v2);
      BYTE13(v6) = BYTE5(v2);
      BYTE14(v6) = BYTE6(v2);
      uint64_t result = a1((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v2));
      uint64_t v4 = v6;
      unint64_t v5 = DWORD2(v6) | ((unint64_t)BYTE12(v6) << 32) | ((unint64_t)BYTE13(v6) << 40) | ((unint64_t)BYTE14(v6) << 48);
LABEL_6:
      *int v1 = v4;
      v1[1] = v5;
      return result;
  }
}

uint64_t Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  unint64_t v2 = v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v6 = *v1;
    uint64_t v5 = v2[1];
    if ((int)v5 < (int)v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v7 = *((void *)v2 + 1);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 40);
      BOOL v10 = __OFSUB__(v6, v9);
      uint64_t v11 = v6 - v9;
      if (v10)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      unint64_t v12 = v8 + v11;
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v13 = v5 - v6;
    type metadata accessor for __DataStorage();
    uint64_t v14 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v6);
    *((void *)v2 + 1) = v14;
    uint64_t result = swift_release();
  }
  uint64_t v15 = *v2;
  uint64_t v16 = v2[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v17 = (void *)*((void *)v2 + 1);
  uint64_t v18 = v17[2];
  if (!v18)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v19 = v17[5];
  BOOL v10 = __OFSUB__(v15, v19);
  uint64_t v20 = v15 - v19;
  if (v10) {
    goto LABEL_15;
  }
  uint64_t v21 = v16 - v15;
  if (v17[3] < v21) {
    uint64_t v21 = v17[3];
  }
  return a1(v18 + v20, v18 + v20 + v21);
}

ValueMetadata *type metadata accessor for URLComponents._URLComponents()
{
  return &type metadata for URLComponents._URLComponents;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Data(uint64_t a1@<X8>)
{
  Data.customMirror.getter(*(void *)v1, *(void *)(v1 + 8), a1);
}

uint64_t initializeWithCopy for Date.FormatStyle(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance IndexSet(Swift::Int *a1, Swift::Int *a2)
{
  *a1 = IndexSet.insert(_:)(*a2).memberAfterInsert;
  return 1;
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  if (*(unsigned char *)(*(void *)v1 + 24) != 1)
  {
    uint64_t v4 = *(void **)(*(void *)v1 + 16);
LABEL_6:
    id v5 = v4;
    objc_msgSend(v5, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v10;
    *(unsigned char *)(v6 + 24) = 1;
    *(void *)uint64_t v1 = v6;
    id v7 = v10;
    swift_release();
    objc_msgSend(v7, sel_addIndex_, a1);

    goto LABEL_7;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void **)(*(void *)v1 + 16);
  if ((*(unsigned char *)(*(void *)v1 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_6;
  }
  objc_msgSend(v4, sel_addIndex_, a1);
LABEL_7:
  Swift::Bool v8 = 1;
  Swift::Int v9 = a1;
  result.memberAfterInsert = v9;
  result.inserted = v8;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSFileAttributeKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v1 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v1;
}

ValueMetadata *type metadata accessor for XMLPlistMap.Value()
{
  return &type metadata for XMLPlistMap.Value;
}

uint64_t PredicateExpressions.Conjunction.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t Default = _loadDefaultAttributes()(a1);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  uint64_t v7 = Default;
  AttributedString.init(from:configuration:)(v8, &v7, &v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2) {
    *a2 = v9;
  }
  return result;
}

uint64_t AttributedString.init(from:configuration:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  char v159 = a3;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.AttributeKey>);
  uint64_t v171 = *(void *)(v167 - 8);
  MEMORY[0x1F4188790](v167);
  uint64_t v166 = (long long *)&v151[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v169 = &v151[-v8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.CodingKeys>);
  MEMORY[0x1F4188790](v9);
  uint64_t v170 = *a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v3)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v179, (uint64_t)&v172);
    __swift_project_boxed_opaque_existential_1(&v172, v173[1]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v219 = 0;
    swift_bridgeObjectRelease();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v186, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v179);
    uint64_t v128 = *(void *)&v179[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v172);
    goto LABEL_76;
  }

  uint64_t v180 = 0;
  memset(v179, 0, sizeof(v179));
  outlined destroy of Any?((uint64_t)v179, &demangling cache variable for type metadata for SingleValueDecodingContainer?);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  unint64_t v161 = a1;
  uint64_t v219 = 0;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v179, (uint64_t)&v172);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v172, (uint64_t)v184);
  uint64_t v160 = 0;
  BigString.init(stringLiteral:)();
  *(void *)&long long v172 = 0;
  MEMORY[0x185309530](&v172, 8);
  uint64_t v10 = v172;
  uint64_t v183 = 0;
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  __swift_project_boxed_opaque_existential_1(v184, v185);
  if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter())
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v181;
    if (!v181 || !*(_WORD *)(v181 + 16))
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v129 = type metadata accessor for DecodingError();
      uint64_t v130 = swift_allocError();
      uint64_t v132 = v131;
      dispatch thunk of Decoder.codingPath.getter();
LABEL_78:
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v129 - 8) + 104))(v132, *MEMORY[0x1E4FBBA78], v129);
      uint64_t v219 = v130;
      swift_willThrow();
      goto LABEL_85;
    }
    uint64_t v12 = v182;
    uint64_t v13 = v183;
    v208[0] = v176;
    v208[1] = v177;
    v208[2] = v178;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v208);
    swift_unknownObjectRetain();
    uint64_t v165 = v11;
    uint64_t v14 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v208, v11, v12, v13, v10);
    long long v15 = v14[1];
    long long v16 = v14[2];
    v207[2] = v14[3];
    v207[1] = v16;
    v207[0] = v15;
    swift_retain();
    outlined retain of Locale((uint64_t)v207);
    uint64_t v17 = BigString.startIndex.getter();
    uint64_t v19 = v18;
    uint64_t v170 = v21;
    uint64_t v171 = v20;
    outlined release of Locale((uint64_t)v207);
    long long v22 = v14[1];
    long long v23 = v14[2];
    long long v206 = v14[3];
    v205[1] = v23;
    v205[0] = v22;
    long long v24 = v14[1];
    long long v25 = v14[2];
    v209[2] = v206;
    v209[1] = v25;
    v209[0] = v24;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v209, (uint64_t)v210);
    outlined retain of Locale((uint64_t)v210);
    uint64_t v26 = BigString.endIndex.getter();
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    outlined release of Locale((uint64_t)v205);
    uint64_t v33 = v17;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_96;
    }
    char v35 = v14 + 1;
    uint64_t v197 = v33;
    uint64_t v198 = v19;
    uint64_t v199 = v171;
    uint64_t v200 = v170;
    uint64_t v201 = v26;
    uint64_t v202 = v28;
    uint64_t v203 = v30;
    uint64_t v204 = v32;
    uint64_t v167 = (uint64_t)v14;
    AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
    long long v36 = v14[1];
    long long v37 = v14[2];
    long long v196 = v14[3];
    v195[0] = v36;
    v195[1] = v37;
    long long v38 = v14[1];
    long long v39 = v14[2];
    v211[2] = v196;
    v211[1] = v39;
    v211[0] = v38;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v211, (uint64_t)v212);
    outlined retain of Locale((uint64_t)v212);
    uint64_t v40 = BigString.startIndex.getter();
    unint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    outlined release of Locale((uint64_t)v195);
    long long v47 = *v35;
    long long v48 = v35[2];
    v194[1] = v35[1];
    v194[2] = v48;
    v194[0] = v47;
    long long v49 = *v35;
    long long v50 = v35[1];
    uint64_t v166 = v35;
    _OWORD v213[2] = v48;
    v213[1] = v50;
    v213[0] = v49;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v213, (uint64_t)v214);
    outlined retain of Locale((uint64_t)v214);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v194);
    uint64_t v171 = v40;
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v51 = v166;
      uint64_t v52 = v171;
      while (1)
      {
        long long v53 = *v51;
        long long v54 = v51[2];
        v193[1] = v51[1];
        v193[2] = v54;
        v193[0] = v53;
        long long v55 = *v51;
        long long v56 = v51[1];
        v215[2] = v54;
        v215[1] = v56;
        v215[0] = v55;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v215, (uint64_t)v216);
        outlined retain of Locale((uint64_t)v216);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v193);
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          break;
        }
        v192[0] = v52;
        v192[1] = v42;
        v192[2] = v44;
        v192[3] = v46;
        v192[4] = v52;
        v192[5] = v42;
        v192[6] = v44;
        v192[7] = v46;
        specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v192, (uint64_t *)&v172);
        uint64_t result = outlined release of Locale((uint64_t)&v190);
        uint64_t v171 = v175;
        if (v175 == 2) {
          goto LABEL_103;
        }
        uint64_t v57 = v174[2];
        uint64_t v169 = (unsigned char *)v174[1];
        uint64_t v170 = v174[0];
        uint64_t v58 = BigString.Index.utf8Offset.getter();
        long long v172 = 0uLL;
        uint64_t v59 = v167;
        uint64_t v60 = AttributedString.Guts._constrainedAttributes(at:with:)(v58, (uint64_t *)&v172);
        unint64_t v61 = v169;
        uint64_t v62 = BigString.Index.utf8Offset.getter();
        unint64_t v63 = v61;
        uint64_t v44 = v57;
        uint64_t result = BigString.Index.utf8Offset.getter();
        if (result < v62) {
          goto LABEL_88;
        }
        uint64_t v64 = result;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString._InternalRunsSlice.updateEach(with:)(v59, v62, v64, v60);
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v51 = v166;
        long long v65 = *v166;
        long long v66 = v166[2];
        v191[1] = v166[1];
        v191[2] = v66;
        v191[0] = v65;
        long long v67 = *v166;
        v217[1] = v166[1];
        v217[2] = v66;
        v217[0] = v67;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v217, (uint64_t)v218);
        outlined retain of Locale((uint64_t)v218);
        BigString.endIndex.getter();
        uint64_t v168 = v68;
        outlined release of Locale((uint64_t)v191);
        uint64_t v52 = v170;
        unint64_t v42 = v63;
        uint64_t v46 = v171;
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      return result;
    }
LABEL_14:
    swift_unknownObjectRelease();
    uint64_t v128 = v167;
    swift_release();
    outlined release of Locale((uint64_t)v208);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
    a1 = v161;
LABEL_76:
    *char v159 = v128;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v152 = 0;
  uint64_t v154 = v171 + 8;
  uint64_t v153 = v160 + 32;
  BOOL v157 = v173;
  uint64_t v158 = &v188;
  uint64_t v155 = v174;
  uint64_t v156 = &v189;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
    uint64_t v69 = v219;
    uint64_t v163 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    if (v69)
    {
      uint64_t v219 = v69;
      swift_bridgeObjectRelease();
      goto LABEL_84;
    }
    unint64_t v162 = v70;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
    unint64_t v71 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v164 = v10;
    if (!v160)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v129 = type metadata accessor for DecodingError();
      uint64_t v130 = swift_allocError();
      uint64_t v132 = v146;
      dispatch thunk of Decoder.codingPath.getter();
      goto LABEL_78;
    }
    unint64_t v72 = v71;
    if ((v71 & 0x8000000000000000) != 0 || v71 >= *(void *)(v160 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v133 = a1[3];
      uint64_t v219 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v133);
      *(void *)&long long v172 = 0;
      *((void *)&v172 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      v134._unint64_t object = (void *)0x80000001823B3D80;
      v134._uint64_t countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v134);
      *(void *)&v179[0] = v72;
      v135._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v135);
      swift_bridgeObjectRelease();
      v136._uint64_t countAndFlagsBits = 0xD000000000000036;
      v136._unint64_t object = (void *)0x80000001823B3DA0;
      String.append(_:)(v136);
      uint64_t v137 = *(void *)(v160 + 16);
      swift_bridgeObjectRelease();
      *(void *)&v179[0] = v137 - 1;
      v138._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v138);
      swift_bridgeObjectRelease();
      v139._uint64_t countAndFlagsBits = 93;
      v139._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v139);
      uint64_t v140 = type metadata accessor for DecodingError();
      uint64_t v141 = swift_allocError();
      uint64_t v143 = v142;
      dispatch thunk of Decoder.codingPath.getter();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      uint64_t v144 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v140 - 8) + 104);
      uint64_t v145 = v140;
      a1 = v161;
      v144(v143, *MEMORY[0x1E4FBBA78], v145);
      swift_bridgeObjectRelease();
      uint64_t v219 = v141;
      swift_willThrow();
      goto LABEL_85;
    }
    uint64_t v219 = 0;
    uint64_t v73 = (uint64_t *)(v153 + 16 * v71);
    uint64_t v75 = *v73;
    uint64_t v74 = v73[1];
    swift_bridgeObjectRetain();
    uint64_t v171 = v74;
    swift_bridgeObjectRetain();
    Swift::Int v76 = (v162 & 0x2000000000000000) != 0 ? HIBYTE(v162) & 0xF : v163 & 0xFFFFFFFFFFFFLL;
    if (!v76)
    {
      uint64_t v77 = v181;
      uint64_t v78 = v182;
      uint64_t v79 = v183;
      if (v181)
      {
        unint64_t v80 = *(unsigned __int8 *)(v181 + 18);
        unint64_t v81 = ((-15 << ((4 * v80 + 8) & 0x3C)) - 1) & v80 | ((unint64_t)*(unsigned __int16 *)(v181 + 16) << ((4 * v80 + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v80 = 0;
        unint64_t v81 = 0;
      }
      uint64_t v82 = specialized BidirectionalCollection._distance(from:to:)(v10, v80, 0, v10, v81, 0, v77, v78, v79, v10);
      swift_unknownObjectRelease();
      if (v82 > 0) {
        break;
      }
      __swift_project_boxed_opaque_existential_1(v184, v185);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0 || *(void *)(v75 + 16)) {
        break;
      }
    }
    swift_bridgeObjectRetain();
    BigString.append(contentsOf:)();
    uint64_t v83 = v181;
    if (v181 && *(_WORD *)(v181 + 16))
    {
      unint64_t v84 = ((-15 << ((4 * *(unsigned char *)(v181 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v181 + 18) | ((unint64_t)*(unsigned __int16 *)(v181 + 16) << ((4 * *(unsigned char *)(v181 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
      *(void *)&long long v172 = v10;
      *((void *)&v172 + 1) = v84;
      v173[0] = 0;
      unint64_t v85 = *(unsigned __int8 *)(v83 + 18);
      if (v84 <= v85) {
        goto LABEL_89;
      }
      char v86 = (4 * v85 + 8) & 0x3C;
      uint64_t v87 = (v84 >> v86) & 0xF;
      *(void *)&v179[0] = v87;
      if (v85)
      {
        swift_unknownObjectRetain();
        char v88 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v83 + 16, v83 + 24, (uint64_t *)v179, (uint64_t)&v172, v85);
        uint64_t result = swift_unknownObjectRelease();
        if ((v88 & 1) == 0) {
          goto LABEL_90;
        }
        if ((void)v172 != v10) {
          goto LABEL_91;
        }
        unint64_t v90 = *((void *)&v172 + 1);
        uint64_t v89 = v173[0];
        if (!v173[0])
        {
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v90, v83);
          uint64_t v92 = v91;
          uint64_t v94 = v93;
          swift_unknownObjectRelease_n();
          goto LABEL_41;
        }
      }
      else
      {
        if (!v87) {
          goto LABEL_90;
        }
        unint64_t v90 = ((v87 - 1) << v86) | ((-15 << v86) - 1) & v84;
        uint64_t v89 = v83;
      }
      unint64_t v95 = v89 + 24 * ((v90 >> ((4 * *(unsigned char *)(v89 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v92 = *(void *)(v95 + 32);
      uint64_t v94 = *(void *)(v95 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
LABEL_41:
      if ((specialized static Dictionary<>.== infix(_:_:)(v92, v75) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_55;
      }
      char v96 = specialized static Set.== infix(_:_:)(v94, v171);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v96 & 1) == 0) {
        goto LABEL_55;
      }
      unint64_t v97 = ((-15 << ((4 * *(unsigned char *)(v83 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v83 + 18) | ((unint64_t)*(unsigned __int16 *)(v83 + 16) << ((4 * *(unsigned char *)(v83 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
      *(void *)&long long v172 = v10;
      *((void *)&v172 + 1) = v97;
      v173[0] = 0;
      unint64_t v98 = *(unsigned __int8 *)(v83 + 18);
      if (v97 <= v98) {
        goto LABEL_92;
      }
      char v99 = (4 * v98 + 8) & 0x3C;
      uint64_t v100 = (v97 >> v99) & 0xF;
      *(void *)&v179[0] = v100;
      if (v98)
      {
        swift_unknownObjectRetain();
        char v101 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v83 + 16, v83 + 24, (uint64_t *)v179, (uint64_t)&v172, v98);
        uint64_t result = swift_unknownObjectRelease_n();
        if ((v101 & 1) == 0) {
          goto LABEL_93;
        }
        unint64_t v103 = *((void *)&v172 + 1);
        uint64_t v102 = v172;
        if ((v162 & 0x1000000000000000) != 0) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t result = swift_unknownObjectRelease();
        if (!v100) {
          goto LABEL_93;
        }
        unint64_t v103 = ((v100 - 1) << v99) | ((-15 << v99) - 1) & v97;
        uint64_t v102 = v10;
        if ((v162 & 0x1000000000000000) != 0) {
LABEL_53:
        }
          Swift::Int v76 = String.UTF8View._foreignCount()();
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (v102 != v10) {
        goto LABEL_94;
      }
      uint64_t result = specialized Rope._Node._prepareModify(at:)(v103, (uint64_t)v187);
      *BOOL v157 = *(_OWORD *)v158;
      uint64_t v104 = v187[1];
      *(void *)&long long v172 = v187[0];
      *uint64_t v155 = *(_OWORD *)v156;
      BOOL v105 = __OFADD__(v104, v76);
      Swift::Int v106 = v104 + v76;
      if (v105) {
        goto LABEL_95;
      }
      *((void *)&v172 + 1) = v106;
      specialized Rope._Node._finalizeModify(_:)(v179, &v172);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v10;
      __swift_project_boxed_opaque_existential_1(v184, v185);
      char v107 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
      a1 = v161;
      if (v107) {
        goto LABEL_5;
      }
    }
    else
    {
LABEL_55:
      if ((v162 & 0x1000000000000000) != 0) {
        Swift::Int v76 = String.UTF8View._foreignCount()();
      }
      swift_bridgeObjectRelease();
      if (!v83)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v120 = swift_allocObject();
        *(_WORD *)(v120 + 16) = 0;
        *(unsigned char *)(v120 + 18) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull();
        if (result)
        {
          uint64_t v121 = 0;
          uint64_t v122 = 0;
        }
        else
        {
          uint64_t v123 = specialized Rope._Node.copy()(v120);
          uint64_t v122 = v124;
          uint64_t v121 = v125;
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v120 = v123;
        }
        uint64_t v118 = v122 + 1;
        if (__OFADD__(v122, 1)) {
          goto LABEL_100;
        }
        uint64_t v119 = v121 + v76;
        if (__OFADD__(v121, v76)) {
          goto LABEL_101;
        }
        int v126 = *(unsigned __int16 *)(v120 + 16);
        id v127 = (void *)(v120 + 24 * *(unsigned __int16 *)(v120 + 16));
        v127[3] = v76;
        v127[4] = v75;
        v127[5] = v171;
        if (v126 == 0xFFFF) {
          goto LABEL_102;
        }
        *(_WORD *)(v120 + 16) = v126 + 1;
        a1 = v161;
        goto LABEL_70;
      }
      swift_bridgeObjectRetain();
      uint64_t v108 = v171;
      swift_bridgeObjectRetain();
      uint64_t result = specialized Rope._Node.append(_:)(v76, v75, v108);
      a1 = v161;
      if (result)
      {
        uint64_t v169 = (unsigned char *)v75;
        uint64_t v111 = v181;
        unsigned int v112 = *(unsigned __int8 *)(v181 + 18) + 1;
        if ((v112 >> 8)) {
          goto LABEL_97;
        }
        uint64_t v113 = result;
        uint64_t v114 = v109;
        uint64_t v115 = v110;
        uint64_t v116 = v182;
        uint64_t v117 = v183;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
        uint64_t result = swift_allocObject();
        *(unsigned char *)(result + 18) = v112;
        uint64_t v118 = v116 + v114;
        if (__OFADD__(v116, v114)) {
          goto LABEL_98;
        }
        uint64_t v119 = v117 + v115;
        uint64_t v10 = v164;
        if (__OFADD__(v117, v115)) {
          goto LABEL_99;
        }
        uint64_t v120 = result;
        *(void *)(result + 24) = v111;
        *(void *)(result + 32) = v116;
        *(void *)(result + 40) = v117;
        *(void *)(result + 48) = v113;
        *(void *)(result + 56) = v114;
        *(void *)(result + 64) = v115;
        *(_WORD *)(result + 16) = 2;
        a1 = v161;
        uint64_t v75 = (uint64_t)v169;
LABEL_70:
        uint64_t v181 = v120;
        uint64_t v182 = v118;
        uint64_t v183 = v119;
      }
      if (v152) {
        int v152 = 1;
      }
      else {
        int v152 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v75);
      }
      ++v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v184, v185);
      if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()) {
        goto LABEL_5;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v161;
  __swift_project_boxed_opaque_existential_1(v161, v161[3]);
  uint64_t v147 = type metadata accessor for DecodingError();
  uint64_t v148 = swift_allocError();
  uint64_t v150 = v149;
  dispatch thunk of Decoder.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v147 - 8) + 104))(v150, *MEMORY[0x1E4FBBA78], v147);
  uint64_t v219 = v148;
  swift_willThrow();
  swift_bridgeObjectRelease();
LABEL_84:
  swift_bridgeObjectRelease();
LABEL_85:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  if ((*(unsigned char *)(v0 + 56) & 1) == 0) {
    return *(void *)(v0 + 64) >= *(void *)(v0 + 48);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }
  return result;
}

uint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BigString.UTF8View.startIndex.getter();
  id v5 = (uint64_t *)BigString.UTF8View.endIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
    goto LABEL_67;
  }
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0
    && (static BigString.Index.== infix(_:_:)() & 1) != 0
    && (a1 & 4) == 0)
  {
    uint64_t v10 = BigString.UTF8View.startIndex.getter();
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t result = BigString.UTF8View.endIndex.getter();
    *a3 = v10;
    a3[1] = v12;
    a3[2] = v14;
    a3[3] = v16;
    a3[4] = result;
    a3[5] = v18;
    a3[6] = v19;
    a3[7] = v20;
    a3[8] = 0;
    a3[9] = 0;
    a3[10] = 0;
    a3[11] = 2;
    return result;
  }
  BigString.UTF8View.startIndex.getter();
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_8;
  }
  long long v21 = v3[1];
  v95[0] = *v3;
  v95[1] = v21;
  v95[2] = v3[2];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v95, (uint64_t)v96);
  outlined retain of Locale((uint64_t)v96);
  BigString.UTF8View.endIndex.getter();
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  id v5 = *(uint64_t **)(a2 + 48);
  a2 = *(void *)(a2 + 56);
  char v22 = static BigString.Index.< infix(_:_:)();
  outlined release of Locale((uint64_t)v3);
  if (v22)
  {
LABEL_8:
    uint64_t v23 = BigString.UTF8View.startIndex.getter();
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    uint64_t v30 = BigString.UTF8View.endIndex.getter();
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t result = BigString.UTF8View.endIndex.getter();
    *a3 = v23;
    a3[1] = v25;
    a3[2] = v27;
    a3[3] = v29;
    a3[4] = v30;
    a3[5] = v32;
    a3[6] = v34;
    a3[7] = v36;
    a3[8] = result;
    a3[9] = v37;
    a3[10] = v38;
    a3[11] = v39;
    return result;
  }
  if ((a1 & 8) == 0)
  {
    if (one-time initialization token for paragraphSeparators == -1)
    {
LABEL_11:
      uint64_t v40 = &static String.paragraphSeparators;
      goto LABEL_15;
    }
LABEL_67:
    swift_once();
    goto LABEL_11;
  }
  if (one-time initialization token for lineSeparators != -1) {
    swift_once();
  }
  uint64_t v40 = &static String.lineSeparators;
LABEL_15:
  uint64_t v41 = *v40;
  swift_bridgeObjectRetain();
  if ((a1 & 1) == 0)
  {
    uint64_t v79 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 2;
    goto LABEL_20;
  }
  BigString.UTF8View.startIndex.getter();
  if (static BigString.Index.== infix(_:_:)())
  {
LABEL_18:
    uint64_t v45 = BigString.UTF8View.startIndex.getter();
LABEL_19:
    uint64_t v79 = v45;
    uint64_t v42 = v46;
    uint64_t v43 = v47;
    uint64_t v44 = v48;
    goto LABEL_20;
  }
  uint64_t v78 = v41;
  uint64_t v79 = BigString.UTF8View.index(before:)();
  uint64_t v42 = v64;
  uint64_t v43 = v65;
  uint64_t v44 = v66;
  BigString.UTF8View.endIndex.getter();
  if ((static BigString.Index.< infix(_:_:)() & 1) != 0
    && (outlined retain of Locale((uint64_t)v96),
        int v67 = BigString.UTF8View.subscript.getter(),
        outlined release of Locale((uint64_t)v3),
        v67 == 10)
    && (outlined retain of Locale((uint64_t)v96),
        int v68 = BigString.UTF8View.subscript.getter(),
        outlined release of Locale((uint64_t)v3),
        v68 == 13))
  {
    BigString.UTF8View.startIndex.getter();
    uint64_t v41 = v78;
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v79 = BigString.UTF8View.index(before:)();
      uint64_t v42 = v69;
      uint64_t v43 = v70;
      uint64_t v44 = v71;
    }
    else
    {
      uint64_t v45 = BigString.UTF8View.startIndex.getter();
      if (v48 != 2) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v41 = v78;
  }
  BigString.UTF8View.startIndex.getter();
  while ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
    BigString.UTF8View.endIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      break;
    }
    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v41, v79, v42, v43, v44, 1, &v87);
    if (v90 != 2)
    {
      uint64_t v45 = BigString.UTF8View.index(after:)();
      goto LABEL_19;
    }
    BigString.UTF8View.startIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_18;
    }
    uint64_t v72 = BigString.UTF8View.index(before:)();
    uint64_t v42 = v73;
    uint64_t v43 = v74;
    uint64_t v44 = v75;
    BigString.UTF8View.startIndex.getter();
    uint64_t v79 = v72;
  }
LABEL_20:
  uint64_t v76 = v44;
  uint64_t v77 = v43;
  if ((a1 & 6) != 0)
  {
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v9 = BigString.UTF8View.index(before:)();
      uint64_t v7 = v49;
      id v5 = v50;
      a2 = v51;
    }
    BigString.UTF8View.endIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
    {
LABEL_26:
      uint64_t v85 = v42;
      while (1)
      {
        BigString.UTF8View.endIndex.getter();
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          unint64_t v80 = 0;
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          uint64_t v83 = 0;
          uint64_t v54 = 2;
          uint64_t v63 = 2;
          goto LABEL_46;
        }
        specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v41, v9, v7, v5, a2, 0, &v87);
        uint64_t v54 = v90;
        if (v90 != 2) {
          break;
        }
        uint64_t v9 = BigString.UTF8View.index(after:)();
        uint64_t v7 = v55;
        id v5 = v56;
        a2 = v57;
      }
      uint64_t v63 = v94;
      uint64_t v82 = v92;
      uint64_t v83 = v93;
      unint64_t v80 = v89;
      uint64_t v81 = v91;
      uint64_t v61 = v87;
      uint64_t v62 = v88;
      swift_bridgeObjectRelease();
LABEL_46:
      BigString.UTF8View.endIndex.getter();
      uint64_t result = static BigString.Index.== infix(_:_:)();
      if (result) {
        uint64_t v58 = v9;
      }
      else {
        uint64_t v58 = v61;
      }
      if (result) {
        uint64_t v59 = v7;
      }
      else {
        uint64_t v59 = v62;
      }
      if (result) {
        uint64_t v60 = v5;
      }
      else {
        uint64_t v60 = v80;
      }
      if (result) {
        uint64_t v53 = a2;
      }
      else {
        uint64_t v53 = v54;
      }
      if ((result & 1) == 0)
      {
        uint64_t v9 = v81;
        uint64_t v7 = v82;
      }
      uint64_t v42 = v85;
      if ((result & 1) == 0)
      {
        id v5 = v83;
        a2 = v63;
      }
      goto LABEL_62;
    }
    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v41, v9, v7, v5, a2, 1, &v87);
    uint64_t v52 = v41;
    uint64_t v53 = v90;
    if (v90 == 2)
    {
      uint64_t v41 = v52;
      goto LABEL_26;
    }
    id v5 = v93;
    a2 = v94;
    uint64_t v9 = v91;
    uint64_t v7 = v92;
    uint64_t v59 = v88;
    uint64_t v60 = v89;
    uint64_t v58 = v87;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    id v5 = 0;
    uint64_t v53 = 2;
    a2 = 2;
  }
LABEL_62:
  *a3 = v79;
  a3[1] = v42;
  a3[2] = (uint64_t)v77;
  a3[3] = v76;
  a3[4] = v9;
  a3[5] = v7;
  a3[6] = (uint64_t)v5;
  a3[7] = a2;
  a3[8] = v58;
  a3[9] = v59;
  a3[10] = (uint64_t)v60;
  a3[11] = v53;
  return result;
}

{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;

  BigSubstring.UTF8View.startIndex.getter();
  id v5 = (uint64_t *)BigSubstring.UTF8View.endIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
    goto LABEL_67;
  }
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0
    && (static BigString.Index.== infix(_:_:)() & 1) != 0
    && (a1 & 4) == 0)
  {
    uint64_t v10 = BigSubstring.UTF8View.startIndex.getter();
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t result = BigSubstring.UTF8View.endIndex.getter();
    *a3 = v10;
    a3[1] = v12;
    a3[2] = v14;
    a3[3] = v16;
    a3[4] = result;
    a3[5] = v18;
    a3[6] = v19;
    a3[7] = v20;
    a3[8] = 0;
    a3[9] = 0;
    a3[10] = 0;
    a3[11] = 2;
    return result;
  }
  BigSubstring.UTF8View.startIndex.getter();
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_8;
  }
  outlined retain of Locale(v3);
  BigSubstring.UTF8View.endIndex.getter();
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  id v5 = *(uint64_t **)(a2 + 48);
  a2 = *(void *)(a2 + 56);
  long long v21 = static BigString.Index.< infix(_:_:)();
  outlined release of Locale(v3);
  if (v21)
  {
LABEL_8:
    char v22 = BigSubstring.UTF8View.startIndex.getter();
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v29 = BigSubstring.UTF8View.endIndex.getter();
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t result = BigSubstring.UTF8View.endIndex.getter();
    *a3 = v22;
    a3[1] = v24;
    a3[2] = v26;
    a3[3] = v28;
    a3[4] = v29;
    a3[5] = v31;
    a3[6] = v33;
    a3[7] = v35;
    a3[8] = result;
    a3[9] = v36;
    a3[10] = v37;
    a3[11] = v38;
    return result;
  }
  if ((a1 & 8) == 0)
  {
    if (one-time initialization token for paragraphSeparators == -1)
    {
LABEL_11:
      uint64_t v39 = &static String.paragraphSeparators;
      goto LABEL_15;
    }
LABEL_67:
    swift_once();
    goto LABEL_11;
  }
  if (one-time initialization token for lineSeparators != -1) {
    swift_once();
  }
  uint64_t v39 = &static String.lineSeparators;
LABEL_15:
  uint64_t v40 = *v39;
  swift_bridgeObjectRetain();
  if ((a1 & 1) == 0)
  {
    uint64_t v78 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 2;
    goto LABEL_20;
  }
  BigSubstring.UTF8View.startIndex.getter();
  if (static BigString.Index.== infix(_:_:)())
  {
LABEL_18:
    uint64_t v44 = BigSubstring.UTF8View.startIndex.getter();
LABEL_19:
    uint64_t v78 = v44;
    uint64_t v41 = v45;
    uint64_t v42 = v46;
    uint64_t v43 = v47;
    goto LABEL_20;
  }
  uint64_t v77 = v40;
  uint64_t v78 = BigSubstring.UTF8View.index(before:)();
  uint64_t v41 = v63;
  uint64_t v42 = v64;
  uint64_t v43 = v65;
  BigSubstring.UTF8View.endIndex.getter();
  if ((static BigString.Index.< infix(_:_:)() & 1) != 0
    && (outlined retain of Locale(v3),
        uint64_t v66 = BigSubstring.UTF8View.subscript.getter(),
        outlined release of Locale(v3),
        v66 == 10)
    && (outlined retain of Locale(v3),
        int v67 = BigSubstring.UTF8View.subscript.getter(),
        outlined release of Locale(v3),
        v67 == 13))
  {
    BigSubstring.UTF8View.startIndex.getter();
    uint64_t v40 = v77;
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v78 = BigSubstring.UTF8View.index(before:)();
      uint64_t v41 = v68;
      uint64_t v42 = v69;
      uint64_t v43 = v70;
    }
    else
    {
      uint64_t v44 = BigSubstring.UTF8View.startIndex.getter();
      if (v47 != 2) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v40 = v77;
  }
  BigSubstring.UTF8View.startIndex.getter();
  while ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
    BigSubstring.UTF8View.endIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      break;
    }
    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v40, v78, v41, v42, v43, 1, &v86);
    if (v89 != 2)
    {
      uint64_t v44 = BigSubstring.UTF8View.index(after:)();
      goto LABEL_19;
    }
    BigSubstring.UTF8View.startIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_18;
    }
    uint64_t v71 = BigSubstring.UTF8View.index(before:)();
    uint64_t v41 = v72;
    uint64_t v42 = v73;
    uint64_t v43 = v74;
    BigSubstring.UTF8View.startIndex.getter();
    uint64_t v78 = v71;
  }
LABEL_20:
  uint64_t v75 = v43;
  uint64_t v76 = v42;
  if ((a1 & 6) != 0)
  {
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v9 = BigSubstring.UTF8View.index(before:)();
      uint64_t v7 = v48;
      id v5 = v49;
      a2 = v50;
    }
    BigSubstring.UTF8View.endIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
    {
LABEL_26:
      unint64_t v84 = v41;
      while (1)
      {
        BigSubstring.UTF8View.endIndex.getter();
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v60 = 0;
          uint64_t v61 = 0;
          uint64_t v79 = 0;
          unint64_t v80 = 0;
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          uint64_t v53 = 2;
          uint64_t v62 = 2;
          goto LABEL_46;
        }
        specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v40, v9, v7, v5, a2, 0, &v86);
        uint64_t v53 = v89;
        if (v89 != 2) {
          break;
        }
        uint64_t v9 = BigSubstring.UTF8View.index(after:)();
        uint64_t v7 = v54;
        id v5 = v55;
        a2 = v56;
      }
      uint64_t v62 = v93;
      uint64_t v81 = v91;
      uint64_t v82 = v92;
      uint64_t v79 = v88;
      unint64_t v80 = v90;
      uint64_t v60 = v86;
      uint64_t v61 = v87;
      swift_bridgeObjectRelease();
LABEL_46:
      BigSubstring.UTF8View.endIndex.getter();
      uint64_t result = static BigString.Index.== infix(_:_:)();
      if (result) {
        uint64_t v57 = v9;
      }
      else {
        uint64_t v57 = v60;
      }
      if (result) {
        uint64_t v58 = v7;
      }
      else {
        uint64_t v58 = v61;
      }
      if (result) {
        uint64_t v59 = v5;
      }
      else {
        uint64_t v59 = v79;
      }
      if (result) {
        uint64_t v52 = a2;
      }
      else {
        uint64_t v52 = v53;
      }
      if ((result & 1) == 0)
      {
        uint64_t v9 = v80;
        uint64_t v7 = v81;
      }
      uint64_t v41 = v84;
      if ((result & 1) == 0)
      {
        id v5 = v82;
        a2 = v62;
      }
      goto LABEL_62;
    }
    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v40, v9, v7, v5, a2, 1, &v86);
    uint64_t v51 = v40;
    uint64_t v52 = v89;
    if (v89 == 2)
    {
      uint64_t v40 = v51;
      goto LABEL_26;
    }
    id v5 = v92;
    a2 = v93;
    uint64_t v9 = v90;
    uint64_t v7 = v91;
    uint64_t v58 = v87;
    uint64_t v59 = v88;
    uint64_t v57 = v86;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    id v5 = 0;
    uint64_t v52 = 2;
    a2 = 2;
  }
LABEL_62:
  *a3 = v78;
  a3[1] = v41;
  a3[2] = (uint64_t)v76;
  a3[3] = v75;
  a3[4] = v9;
  a3[5] = v7;
  a3[6] = (uint64_t)v5;
  a3[7] = a2;
  a3[8] = v57;
  a3[9] = v58;
  a3[10] = (uint64_t)v59;
  a3[11] = v52;
  return result;
}

uint64_t specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t result = BigString.UTF8View.subscript.getter();
  if (result == 10) {
    goto LABEL_8;
  }
  if (result == 13)
  {
    BigString.UTF8View.index(after:)();
    BigString.UTF8View.endIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_15;
    }
    long long v15 = v7[1];
    v81[0] = *v7;
    v81[1] = v15;
    v81[2] = v7[2];
    outlined init with take of any PredicateExpression<Self.Output == B1>(v81, (uint64_t)v82);
    outlined retain of Locale((uint64_t)v82);
    uint64_t v16 = a2;
    uint64_t v17 = a3;
    int v18 = BigString.UTF8View.subscript.getter();
    outlined release of Locale((uint64_t)v7);
    BOOL v19 = v18 == 10;
    a3 = v17;
    a2 = v16;
    if (!v19)
    {
LABEL_15:
      uint64_t v20 = BigString.UTF8View.index(after:)();
      uint64_t v22 = v42;
      uint64_t v24 = v43;
      uint64_t v26 = v44;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result)
      {
        __break(1u);
LABEL_17:
        uint64_t v20 = BigString.UTF8View.index(after:)();
        uint64_t v22 = v45;
        uint64_t v24 = v46;
        uint64_t v26 = v47;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_58;
      }
LABEL_18:
      *a7 = a2;
      a7[1] = a3;
      a7[2] = (uint64_t)a4;
      a7[3] = a5;
      a7[4] = v20;
      a7[5] = v22;
      a7[6] = v24;
      a7[7] = v26;
      return result;
    }
    uint64_t v20 = BigString.UTF8View.index(after:)();
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_18;
    }
    __break(1u);
LABEL_8:
    BigString.UTF8View.startIndex.getter();
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v72 = a7;
      uint64_t v27 = BigString.UTF8View.index(before:)();
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      uint64_t v34 = a4;
      int v35 = BigString.UTF8View.subscript.getter();
      uint64_t v7 = (long long *)BigString.UTF8View.index(after:)();
      if (v35 != 13)
      {
LABEL_45:
        uint64_t v66 = v36;
        uint64_t v67 = (uint64_t)v37;
        uint64_t v68 = v38;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          *uint64_t v72 = a2;
          v72[1] = a3;
          v72[2] = (uint64_t)v34;
          v72[3] = a5;
          v72[4] = (uint64_t)v7;
          v72[5] = v66;
          v72[6] = v67;
          v72[7] = v68;
          return result;
        }
        goto LABEL_60;
      }
      uint64_t v39 = v36;
      uint64_t v40 = (uint64_t)v37;
      uint64_t v41 = v38;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        *uint64_t v72 = v27;
        v72[1] = v29;
        v72[2] = v31;
        v72[3] = v33;
        v72[4] = (uint64_t)v7;
        v72[5] = v39;
        v72[6] = v40;
        v72[7] = v41;
        return result;
      }
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      return result;
    }
    goto LABEL_17;
  }
  if (a6)
  {
    if ((result + 86) < 0xDBu) {
      goto LABEL_50;
    }
  }
  else if ((result + 29) < 0xDFu)
  {
LABEL_50:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    a7[3] = 2;
    *((_OWORD *)a7 + 2) = 0u;
    *((_OWORD *)a7 + 3) = 0u;
    return result;
  }
  uint64_t v73 = *(void *)(a1 + 16);
  if (!v73) {
    goto LABEL_50;
  }
  uint64_t v78 = a5;
  uint64_t v72 = a7;
  swift_bridgeObjectRetain();
  uint64_t v48 = 0;
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v77 = a2;
  while (1)
  {
    uint64_t v49 = *(void *)(a1 + 32 + 8 * v48);
    if (a6)
    {
      uint64_t v50 = *(void *)(v49 + 16);
      swift_bridgeObjectRetain();
      uint64_t result = BigString.UTF8View.startIndex.getter();
      if (!v50)
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      unint64_t v79 = 0;
      unint64_t v51 = v50 - 1;
      unint64_t v52 = *(void *)(v49 + 16);
      uint64_t v53 = -1;
    }
    else
    {
      swift_bridgeObjectRetain();
      BigString.UTF8View.endIndex.getter();
      uint64_t result = BigString.UTF8View.index(before:)();
      unint64_t v51 = 0;
      unint64_t v52 = *(void *)(v49 + 16);
      unint64_t v79 = v52 - 1;
      uint64_t v53 = 1;
    }
    if (v51 >= v52) {
      goto LABEL_57;
    }
    uint64_t v76 = v48;
    int v54 = *(unsigned __int8 *)(v49 + 32 + v51);
    uint64_t result = BigString.UTF8View.subscript.getter();
    if (v54 == result) {
      break;
    }
LABEL_22:
    uint64_t v48 = v76 + 1;
    swift_bridgeObjectRelease();
    if (v76 + 1 == v73)
    {
      uint64_t result = swift_bridgeObjectRelease();
      a7 = v72;
      goto LABEL_50;
    }
  }
  uint64_t v55 = v77;
  a3 = v78;
  uint64_t v57 = v74;
  long long v56 = v75;
  while (1)
  {
    uint64_t v58 = v79 - v51;
    if (__OFSUB__(v79, v51))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (a6) {
      break;
    }
    if (!v58) {
      goto LABEL_42;
    }
LABEL_36:
    unint64_t v59 = v51 + v53;
    if (__OFADD__(v51, v53)) {
      goto LABEL_53;
    }
    uint64_t result = BigString.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v62 == 2) {
      goto LABEL_22;
    }
    if ((v59 & 0x8000000000000000) != 0) {
      goto LABEL_54;
    }
    if (v59 >= *(void *)(v49 + 16)) {
      goto LABEL_55;
    }
    uint64_t v55 = result;
    uint64_t v57 = v60;
    long long v56 = v61;
    a3 = v62;
    int v63 = *(unsigned __int8 *)(v49 + 32 + v59);
    uint64_t result = BigString.UTF8View.subscript.getter();
    v51 += v53;
    if (v63 != result) {
      goto LABEL_22;
    }
  }
  if (v58 > 0 || v53 >= v58) {
    goto LABEL_36;
  }
LABEL_42:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a6)
  {
    a5 = v78;
    char v64 = static BigString.Index.< infix(_:_:)();
    uint64_t v37 = v75;
    long long v65 = v56;
    a2 = a3;
    uint64_t v34 = v72;
    if (v64)
    {
      __break(1u);
      goto LABEL_45;
    }
  }
  else
  {
    a2 = v78;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    long long v65 = v75;
    uint64_t v55 = v77;
    uint64_t v57 = v74;
    uint64_t v34 = v72;
    if (result) {
      goto LABEL_61;
    }
  }
  uint64_t result = BigString.UTF8View.index(after:)();
  *uint64_t v34 = v55;
  v34[1] = v57;
  void v34[2] = (uint64_t)v65;
  v34[3] = a2;
  v34[4] = result;
  v34[5] = v69;
  void v34[6] = v70;
  v34[7] = v71;
  return result;
}

{
  uint64_t v7;
  uint64_t result;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;

  uint64_t result = BigSubstring.UTF8View.subscript.getter();
  if (result == 10) {
    goto LABEL_8;
  }
  if (result == 13)
  {
    BigSubstring.UTF8View.index(after:)();
    BigSubstring.UTF8View.endIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_15;
    }
    outlined retain of Locale(v7);
    uint64_t v76 = a2;
    long long v15 = a3;
    uint64_t v16 = BigSubstring.UTF8View.subscript.getter();
    outlined release of Locale(v7);
    uint64_t v17 = v16 == 10;
    a3 = v15;
    a2 = v76;
    if (!v17)
    {
LABEL_15:
      int v18 = BigSubstring.UTF8View.index(after:)();
      uint64_t v20 = v40;
      uint64_t v22 = v41;
      uint64_t v24 = v42;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result)
      {
        __break(1u);
LABEL_17:
        int v18 = BigSubstring.UTF8View.index(after:)();
        uint64_t v20 = v43;
        uint64_t v22 = v44;
        uint64_t v24 = v45;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_57;
      }
LABEL_18:
      *a7 = a2;
      a7[1] = a3;
      a7[2] = (uint64_t)a4;
      a7[3] = a5;
      a7[4] = v18;
      a7[5] = v20;
      a7[6] = v22;
      a7[7] = v24;
      return result;
    }
    int v18 = BigSubstring.UTF8View.index(after:)();
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_18;
    }
    __break(1u);
LABEL_8:
    BigSubstring.UTF8View.startIndex.getter();
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v70 = a7;
      uint64_t v25 = BigSubstring.UTF8View.index(before:)();
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      uint64_t v32 = a4;
      uint64_t v33 = BigSubstring.UTF8View.subscript.getter();
      uint64_t v7 = BigSubstring.UTF8View.index(after:)();
      if (v33 != 13)
      {
LABEL_45:
        char v64 = v34;
        long long v65 = (uint64_t)v35;
        uint64_t v66 = v36;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          *uint64_t v70 = a2;
          v70[1] = a3;
          v70[2] = (uint64_t)v32;
          v70[3] = a5;
          v70[4] = v7;
          v70[5] = v64;
          v70[6] = v65;
          v70[7] = v66;
          return result;
        }
        goto LABEL_59;
      }
      uint64_t v37 = v34;
      uint64_t v38 = (uint64_t)v35;
      uint64_t v39 = v36;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        *uint64_t v70 = v25;
        v70[1] = v27;
        v70[2] = v29;
        v70[3] = v31;
        v70[4] = v7;
        v70[5] = v37;
        v70[6] = v38;
        v70[7] = v39;
        return result;
      }
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      return result;
    }
    goto LABEL_17;
  }
  if (a6)
  {
    if ((result + 86) < 0xDBu) {
      goto LABEL_50;
    }
  }
  else if ((result + 29) < 0xDFu)
  {
LABEL_50:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    a7[3] = 2;
    *((_OWORD *)a7 + 2) = 0u;
    *((_OWORD *)a7 + 3) = 0u;
    return result;
  }
  uint64_t v71 = *(void *)(a1 + 16);
  if (!v71) {
    goto LABEL_50;
  }
  uint64_t v75 = a5;
  uint64_t v70 = a7;
  swift_bridgeObjectRetain();
  uint64_t v46 = 0;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v77 = a2;
  while (1)
  {
    uint64_t v47 = *(void *)(a1 + 32 + 8 * v46);
    if (a6)
    {
      uint64_t v48 = *(void *)(v47 + 16);
      swift_bridgeObjectRetain();
      uint64_t result = BigSubstring.UTF8View.startIndex.getter();
      if (!v48)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v78 = 0;
      uint64_t v49 = v48 - 1;
      uint64_t v50 = *(void *)(v47 + 16);
      unint64_t v51 = -1;
    }
    else
    {
      swift_bridgeObjectRetain();
      BigSubstring.UTF8View.endIndex.getter();
      uint64_t result = BigSubstring.UTF8View.index(before:)();
      uint64_t v49 = 0;
      uint64_t v50 = *(void *)(v47 + 16);
      uint64_t v78 = v50 - 1;
      unint64_t v51 = 1;
    }
    if (v49 >= v50) {
      goto LABEL_56;
    }
    uint64_t v74 = v46;
    unint64_t v52 = *(unsigned __int8 *)(v47 + 32 + v49);
    uint64_t result = BigSubstring.UTF8View.subscript.getter();
    if (v52 == result) {
      break;
    }
LABEL_22:
    uint64_t v46 = v74 + 1;
    swift_bridgeObjectRelease();
    if (v74 + 1 == v71)
    {
      uint64_t result = swift_bridgeObjectRelease();
      a7 = v70;
      goto LABEL_50;
    }
  }
  a3 = v75;
  uint64_t v53 = v77;
  uint64_t v55 = v72;
  int v54 = v73;
  while (1)
  {
    long long v56 = v78 - v49;
    if (__OFSUB__(v78, v49))
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (a6) {
      break;
    }
    if (!v56) {
      goto LABEL_42;
    }
LABEL_36:
    uint64_t v57 = v49 + v51;
    if (__OFADD__(v49, v51)) {
      goto LABEL_52;
    }
    uint64_t result = BigSubstring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v60 == 2) {
      goto LABEL_22;
    }
    if ((v57 & 0x8000000000000000) != 0) {
      goto LABEL_53;
    }
    if (v57 >= *(void *)(v47 + 16)) {
      goto LABEL_54;
    }
    uint64_t v53 = result;
    uint64_t v55 = v58;
    int v54 = v59;
    a3 = v60;
    uint64_t v61 = *(unsigned __int8 *)(v47 + 32 + v57);
    uint64_t result = BigSubstring.UTF8View.subscript.getter();
    v49 += v51;
    if (v61 != result) {
      goto LABEL_22;
    }
  }
  if (v56 > 0 || v51 >= v56) {
    goto LABEL_36;
  }
LABEL_42:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a6)
  {
    a5 = v75;
    uint64_t v62 = static BigString.Index.< infix(_:_:)();
    int v35 = v73;
    int v63 = v54;
    a2 = a3;
    uint64_t v32 = v70;
    if (v62)
    {
      __break(1u);
      goto LABEL_45;
    }
  }
  else
  {
    a2 = v75;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    int v63 = v73;
    uint64_t v53 = v77;
    uint64_t v55 = v72;
    uint64_t v32 = v70;
    if (result) {
      goto LABEL_60;
    }
  }
  uint64_t result = BigSubstring.UTF8View.index(after:)();
  *uint64_t v32 = v53;
  v32[1] = v55;
  void v32[2] = (uint64_t)v63;
  v32[3] = a2;
  v32[4] = result;
  v32[5] = v67;
  void v32[6] = v68;
  v32[7] = v69;
  return result;
}

uint64_t specialized AttributedString._InternalRunsSlice.updateEach(with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = (uint64_t *)(result + 64);
  uint64_t v4 = *(void *)(result + 64);
  if (v4) {
    uint64_t v6 = *(void *)(result + 80);
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 < 0 || v6 < a2)
  {
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
LABEL_412:
    __break(1u);
LABEL_413:
    __break(1u);
    goto LABEL_414;
  }
  uint64_t v7 = a3;
  uint64_t v8 = (void *)result;
  uint64_t v9 = *(void *)(result + 72);
  uint64_t v180 = (void *)result;
  uint64_t v181 = *(void *)(result + 88);
  uint64_t v171 = (uint64_t *)(result + 64);
  if (!v4 || (*(_WORD *)(v4 + 16) ? (BOOL v10 = *(void *)(result + 80) <= a2) : (BOOL v10 = 1), v10))
  {
    unint64_t v11 = swift_unknownObjectRetain_n();
    unint64_t v12 = specialized Rope._endPath.getter(v11);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (!v4) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }
  uint64_t v15 = *(unsigned __int8 *)(v4 + 18);
  if (*(unsigned char *)(v4 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v14 = a2;
    uint64_t v16 = (void *)v4;
    while (1)
    {
      uint64_t v18 = *((unsigned __int16 *)v16 + 8);
      if (!*((_WORD *)v16 + 8)) {
        break;
      }
      uint64_t v19 = v16[5];
      BOOL v20 = __OFSUB__(v14, v19);
      uint64_t v21 = v14 - v19;
      if (v20) {
        goto LABEL_377;
      }
      if (__OFADD__(v21, 1)) {
        goto LABEL_378;
      }
      if (v21 + 1 <= 0)
      {
        uint64_t v18 = 0;
        goto LABEL_18;
      }
      if (v18 == 1)
      {
        uint64_t v14 = v21;
        break;
      }
      uint64_t v22 = v16 + 8;
      uint64_t v23 = 1;
      while (1)
      {
        uint64_t v24 = *v22;
        v22 += 3;
        uint64_t v14 = v21 - v24;
        if (__OFSUB__(v21, v24)) {
          goto LABEL_345;
        }
        if (__OFADD__(v14, 1))
        {
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
          goto LABEL_374;
        }
        if (v14 + 1 < 1) {
          break;
        }
        ++v23;
        uint64_t v21 = v14;
        if (v18 == v23) {
          goto LABEL_17;
        }
      }
      uint64_t v18 = v23;
      uint64_t v14 = v21;
LABEL_18:
      char v17 = (4 * *((unsigned char *)v16 + 18) + 8) & 0x3C;
      uint64_t v15 = ((-15 << v17) - 1) & v15 | (v18 << v17);
      uint64_t v13 = (void *)v16[3 * v18 + 3];
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v16 = v13;
      if (!*((unsigned char *)v13 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_17:
    if (!v14) {
      goto LABEL_18;
    }
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
    goto LABEL_392;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v14 = a2;
  uint64_t v13 = (void *)v4;
LABEL_33:
  uint64_t v25 = *((unsigned __int16 *)v13 + 8);
  if (!*((_WORD *)v13 + 8))
  {
    uint64_t v7 = a3;
    id v5 = v171;
    goto LABEL_46;
  }
  uint64_t v26 = v13[3];
  BOOL v20 = __OFSUB__(v14, v26);
  uint64_t v27 = v14 - v26;
  uint64_t v7 = a3;
  id v5 = v171;
  if (!v20)
  {
    if (__OFADD__(v27, 1)) {
      goto LABEL_416;
    }
    if (v27 + 1 <= 0)
    {
      uint64_t v25 = 0;
      goto LABEL_47;
    }
    if (v25 != 1)
    {
      uint64_t v28 = v13 + 6;
      uint64_t v29 = 1;
      while (1)
      {
        uint64_t v30 = *v28;
        v28 += 3;
        uint64_t v14 = v27 - v30;
        if (__OFSUB__(v27, v30)) {
          goto LABEL_394;
        }
        if (__OFADD__(v14, 1)) {
          goto LABEL_395;
        }
        if (v14 + 1 < 1) {
          goto LABEL_338;
        }
        ++v29;
        uint64_t v27 = v14;
        if (v25 == v29) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v14 = v27;
LABEL_46:
    if (v14)
    {
LABEL_414:
      __break(1u);
      goto LABEL_415;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v12 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v25 << 8);
      uint64_t v8 = v180;
      if (v4)
      {
LABEL_13:
        swift_unknownObjectRetain();
        uint64_t v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v181, v12, (uint64_t)v13, v4, v9);
        uint64_t result = swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        uint64_t v179 = 0;
      }
      uint64_t v9 = a2;
      BOOL v20 = __OFSUB__(a2, v14);
      uint64_t v31 = a2 - v14;
      if (v20) {
        goto LABEL_393;
      }
      unint64_t v178 = v12;
      uint64_t v32 = v181;
      while (1)
      {
        uint64_t v35 = *v5;
        uint64_t v181 = v32;
        if (v9 != v7)
        {
          if (v35) {
            uint64_t v41 = v8[10];
          }
          else {
            uint64_t v41 = 0;
          }
          goto LABEL_104;
        }
        if (!v35)
        {
          if (v9 > 0) {
            goto LABEL_379;
          }
          uint64_t v7 = 0;
          goto LABEL_102;
        }
        uint64_t v36 = v8[10];
        if (v36 < v9) {
          goto LABEL_365;
        }
        uint64_t v37 = v8[9];
        uint64_t v38 = v8[11];
        uint64_t v15 = *(unsigned __int8 *)(v35 + 18);
        BOOL v39 = !*(_WORD *)(v35 + 16) || v36 <= v9;
        uint64_t v173 = v37;
        if (!v39) {
          break;
        }
        unint64_t v40 = ((-15 << ((4 * v15 + 8) & 0x3C)) - 1) & v15 | ((unint64_t)*(unsigned __int16 *)(v35 + 16) << ((4 * v15 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v7 = 0;
        uint64_t v9 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v40, v9, v35, v173);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v9 = a2;
        uint64_t v8 = v180;
        uint64_t v32 = v181;
LABEL_102:
        uint64_t v41 = v9 - v7;
        if (__OFSUB__(v9, v7)) {
          goto LABEL_360;
        }
        uint64_t v7 = a3;
LABEL_104:
        if (v31 >= v41) {
          return result;
        }
        if (v32 != v8[11]) {
          goto LABEL_347;
        }
        if (v13)
        {
          unint64_t v53 = v178;
          int v54 = &v13[3 * ((v178 >> ((4 * *((unsigned char *)v13 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v56 = v54[4];
          uint64_t v55 = v54[5];
          unint64_t v57 = v54[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          uint64_t v58 = v8[8];
          swift_unknownObjectRetain();
          unint64_t v53 = v178;
          specialized Rope._Node.subscript.getter(v178, v58);
          uint64_t v56 = v59;
          uint64_t v55 = v60;
          uint64_t result = swift_unknownObjectRelease();
          if (v181 != v8[11]) {
            goto LABEL_364;
          }
          uint64_t v61 = v8[8];
          swift_unknownObjectRetain();
          unint64_t v57 = specialized Rope._Node.subscript.getter(v178, v61);
          uint64_t v7 = a3;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v62 = v31 + v57;
        if (__OFADD__(v31, v57)) {
          goto LABEL_348;
        }
        *(void *)&long long v189 = v56;
        *((void *)&v189 + 1) = v55;
        if (v31 >= v7) {
          uint64_t v63 = v7;
        }
        else {
          uint64_t v63 = v31;
        }
        uint64_t v9 = a2;
        if (v31 >= a2) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = a2;
        }
        if (v62 <= a2) {
          uint64_t v65 = a2;
        }
        else {
          uint64_t v65 = v62;
        }
        if (v62 <= v7) {
          uint64_t v66 = v65;
        }
        else {
          uint64_t v66 = v7;
        }
        if (v64 == v66) {
          goto LABEL_349;
        }
        if (v64 != v31 || v66 != v62)
        {
          long long v186 = 0uLL;
          uint64_t result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v186);
          if (result)
          {
            if (__OFSUB__(v66, v64)) {
              goto LABEL_368;
            }
            uint64_t v9 = *((void *)&v189 + 1);
            uint64_t v4 = v189;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v64, v66, v66 - v64, v4, v9);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v83 = v180[8];
            if (v83) {
              uint64_t v84 = v180[10];
            }
            else {
              uint64_t v84 = 0;
            }
            if (v31 < 0 || v84 < v31) {
              goto LABEL_370;
            }
            uint64_t v85 = v180[9];
            uint64_t v181 = v180[11];
            if (v83 && *(_WORD *)(v83 + 16) && v31 < v180[10])
            {
              uint64_t v86 = *(unsigned __int8 *)(v83 + 18);
              if (*(unsigned char *)(v83 + 18))
              {
                uint64_t result = swift_unknownObjectRetain_n();
                uint64_t v15 = v31;
                id v5 = (uint64_t *)v83;
                while (1)
                {
                  uint64_t v27 = *((unsigned __int16 *)v5 + 8);
                  if (!*((_WORD *)v5 + 8)) {
                    goto LABEL_150;
                  }
                  uint64_t v88 = v5[5];
                  BOOL v20 = __OFSUB__(v15, v88);
                  uint64_t v29 = v15 - v88;
                  if (v20) {
                    goto LABEL_358;
                  }
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_359;
                  }
                  if (v29 + 1 <= 0)
                  {
                    uint64_t v27 = 0;
                  }
                  else
                  {
                    if (v27 == 1)
                    {
                      uint64_t v15 = v29;
LABEL_150:
                      if (v15) {
                        goto LABEL_355;
                      }
                      goto LABEL_151;
                    }
                    uint64_t v89 = v5 + 8;
                    uint64_t v90 = 1;
                    while (1)
                    {
                      uint64_t v91 = *v89;
                      v89 += 3;
                      uint64_t v15 = v29 - v91;
                      if (__OFSUB__(v29, v91)) {
                        goto LABEL_336;
                      }
                      if (__OFADD__(v15, 1)) {
                        goto LABEL_337;
                      }
                      if (v15 + 1 < 1) {
                        break;
                      }
                      ++v90;
                      uint64_t v29 = v15;
                      if (v27 == v90) {
                        goto LABEL_150;
                      }
                    }
                    uint64_t v27 = v90;
                    uint64_t v15 = v29;
                  }
LABEL_151:
                  char v87 = (4 * *((unsigned char *)v5 + 18) + 8) & 0x3C;
                  uint64_t v86 = ((-15 << v87) - 1) & v86 | (v27 << v87);
                  uint64_t v13 = (void *)v5[3 * v27 + 3];
                  swift_unknownObjectRetain();
                  uint64_t result = swift_unknownObjectRelease();
                  id v5 = v13;
                  if (!*((unsigned char *)v13 + 18)) {
                    goto LABEL_212;
                  }
                }
              }
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v15 = v31;
              uint64_t v13 = (void *)v83;
LABEL_212:
              uint64_t v128 = *((unsigned __int16 *)v13 + 8);
              if (*((_WORD *)v13 + 8))
              {
                uint64_t v129 = v13[3];
                BOOL v20 = __OFSUB__(v15, v129);
                uint64_t v130 = v15 - v129;
                if (v20) {
                  goto LABEL_401;
                }
                if (__OFADD__(v130, 1)) {
                  goto LABEL_402;
                }
                if (v130 + 1 <= 0)
                {
                  uint64_t v94 = v85;
                  uint64_t v128 = 0;
                }
                else
                {
                  if (v128 == 1)
                  {
                    uint64_t v15 = v130;
                    goto LABEL_230;
                  }
                  Swift::String v134 = v13 + 6;
                  uint64_t v135 = 1;
                  while (1)
                  {
                    uint64_t v136 = *v134;
                    v134 += 3;
                    uint64_t v15 = v130 - v136;
                    if (__OFSUB__(v130, v136)) {
                      goto LABEL_375;
                    }
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_376;
                    }
                    if (v15 + 1 < 1) {
                      break;
                    }
                    ++v135;
                    uint64_t v130 = v15;
                    if (v128 == v135) {
                      goto LABEL_230;
                    }
                  }
                  uint64_t v94 = v85;
                  uint64_t v128 = v135;
                  uint64_t v15 = v130;
                }
              }
              else
              {
LABEL_230:
                if (v15) {
                  goto LABEL_397;
                }
                uint64_t v94 = v85;
              }
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v53 = v86 & 0xFFFFFFFFFFFFF0FFLL | (v128 << 8);
              id v5 = v171;
LABEL_171:
              swift_unknownObjectRetain();
              uint64_t v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v181, v53, (uint64_t)v13, v83, v94);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_unknownObjectRelease_n();
            }
            else
            {
              unint64_t v93 = swift_unknownObjectRetain_n();
              uint64_t v94 = v85;
              unint64_t v53 = specialized Rope._endPath.getter(v93);
              swift_unknownObjectRelease();
              uint64_t v13 = 0;
              uint64_t v15 = 0;
              if (v83) {
                goto LABEL_171;
              }
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v179 = 0;
            }
            uint64_t v7 = a3;
            uint64_t v9 = a2;
            BOOL v20 = __OFSUB__(v31, v15);
            v31 -= v15;
            if (v20) {
              goto LABEL_372;
            }
          }
          else
          {
LABEL_210:
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
          }
          uint64_t v67 = v180;
          goto LABEL_236;
        }
        uint64_t v67 = v180;
        if (v181 != v180[11]) {
          goto LABEL_361;
        }
        if (!*v5) {
          goto LABEL_417;
        }
        specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v190);
        v205[0] = v191;
        long long v186 = v190;
        long long v187 = v191;
        long long v188 = v192;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v205);
        uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v205 + 8);
        long long v187 = MEMORY[0x1E4FBC868];
        uint64_t v68 = v181 + 1;
        v180[11] = v181 + 1;
        if (!v180[8]) {
          goto LABEL_418;
        }
        specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v186 = 0uLL;
        uint64_t result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v186);
        if ((result & 1) == 0)
        {
          if (v68 != v180[11]) {
            goto LABEL_371;
          }
          if (!*v5) {
            goto LABEL_421;
          }
          specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v199);
          long long v204 = v200;
          long long v186 = v199;
          long long v187 = v200;
          long long v188 = v201;
          long long v92 = v189;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204);
          uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204 + 8);
          long long v187 = v92;
          v181 += 2;
          v180[11] = v181;
          if (!v180[8]) {
            goto LABEL_422;
          }
          uint64_t v13 = specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_236;
        }
        if (v68 != v180[11]) {
          goto LABEL_369;
        }
        if (!*v5) {
          goto LABEL_419;
        }
        specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v193);
        uint64_t v202 = v194;
        uint64_t v203 = v195;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        long long v186 = v193;
        long long v188 = v196;
        uint64_t v69 = *((void *)&v189 + 1);
        uint64_t result = v189;
        long long v187 = v189;
        unint64_t v70 = v53;
        uint64_t v71 = v181 + 2;
        v180[11] = v181 + 2;
        if (!v180[8]) {
          goto LABEL_420;
        }
        uint64_t v174 = result;
        swift_bridgeObjectRetain_n();
        uint64_t v172 = v69;
        swift_bridgeObjectRetain_n();
        uint64_t v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v72 = v180[8];
        uint64_t v73 = v180[9];
        uint64_t v74 = v180[10];
        uint64_t v75 = v180[11];
        v181 += 2;
        *(void *)&long long v186 = v71;
        *((void *)&v186 + 1) = v70;
        *(void *)&long long v187 = v13;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v186, v72, v73, v74, v75);
        swift_unknownObjectRelease();
        long long v76 = v186;
        uint64_t v77 = v187;
        unint64_t v78 = swift_unknownObjectRetain();
        unint64_t v79 = specialized Rope._endPath.getter(v78);
        uint64_t result = swift_unknownObjectRelease();
        if (*((void *)&v76 + 1) >= v79)
        {
          uint64_t v7 = a3;
          uint64_t v9 = a2;
          id v5 = v171;
          unint64_t v53 = v178;
        }
        else
        {
          uint64_t v7 = a3;
          uint64_t v9 = a2;
          if ((void)v76 != v180[11]) {
            goto LABEL_381;
          }
          if (v77)
          {
            uint64_t v80 = v77 + 24 * ((*((void *)&v76 + 1) >> ((4 * *(unsigned char *)(v77 + 18) + 8) & 0x3C)) & 0xFLL);
            uint64_t v81 = *(void *)(v80 + 32);
            uint64_t v82 = *(void *)(v80 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v95 = v180[8];
            swift_unknownObjectRetain();
            uint64_t v9 = a2;
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v76 + 1), v95);
            uint64_t v81 = v96;
            uint64_t v82 = v97;
            swift_unknownObjectRelease();
          }
          id v5 = v171;
          unint64_t v53 = v178;
          if ((specialized static Dictionary<>.== infix(_:_:)(v81, v174) & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_185:
            uint64_t result = swift_bridgeObjectRelease();
            goto LABEL_186;
          }
          char v98 = specialized static Set.== infix(_:_:)(v82, v172);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v98)
          {
            unint64_t v53 = specialized Rope._remove(at:)((uint64_t)&v186, v181, v178);
            char v99 = v180;
            unint64_t v100 = v180[8];
            uint64_t v101 = v180[11];
            if (v53 < specialized Rope._endPath.getter(v100) && *(unsigned char *)(v100 + 18))
            {
              uint64_t v102 = (v53 >> ((4 * *(unsigned char *)(v100 + 18) + 8) & 0x3C)) & 0xF;
              swift_unknownObjectRetain();
              uint64_t v9 = a2;
              uint64_t v103 = v102;
              char v99 = v180;
              specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v100 + 24, v103, v53);
              swift_unknownObjectRelease();
            }
            uint64_t v104 = v186;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v101 != v99[11]) {
              goto LABEL_403;
            }
            if (!*v171) {
              goto LABEL_423;
            }
            uint64_t result = specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)v197);
            long long v186 = v197[0];
            long long v187 = v197[1];
            long long v188 = v197[2];
            if (__OFADD__(*((void *)&v197[0] + 1), v104)) {
              goto LABEL_404;
            }
            *((void *)&v186 + 1) = *((void *)&v197[0] + 1) + v104;
            uint64_t v181 = v101 + 1;
            v99[11] = v101 + 1;
            if (!v99[8]) {
              goto LABEL_424;
            }
            uint64_t v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
            swift_bridgeObjectRelease();
            goto LABEL_185;
          }
        }
LABEL_186:
        unint64_t v105 = *v5;
        if (*v5) {
          unint64_t v105 = *(unsigned __int8 *)(v105 + 18);
        }
        uint64_t v67 = v180;
        if (v53 <= v105)
        {
          swift_bridgeObjectRelease_n();
          uint64_t result = swift_bridgeObjectRelease_n();
          goto LABEL_236;
        }
        uint64_t v106 = v180[8];
        uint64_t v107 = v180[11];
        *(void *)&long long v186 = v181;
        *((void *)&v186 + 1) = v53;
        *(void *)&long long v187 = v13;
        if (v181 != v107) {
          goto LABEL_382;
        }
        if (v106)
        {
          unint64_t v108 = *(unsigned __int8 *)(v106 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v53 <= v108) {
            goto LABEL_383;
          }
        }
        else if (!v53)
        {
          goto LABEL_383;
        }
        char v109 = (4 * *((unsigned char *)v13 + 18) + 8) & 0x3C;
        if (((v53 >> v109) & 0xF) != 0)
        {
          unint64_t v110 = ((((v53 >> v109) & 0xF) - 1) << v109) | ((-15 << v109) - 1) & v53;
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v111 = v13;
          uint64_t v112 = v181;
          uint64_t v113 = v174;
        }
        else
        {
          swift_unknownObjectRetain();
          char v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v106);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v113 = v174;
          if ((v114 & 1) == 0) {
            goto LABEL_398;
          }
          unint64_t v110 = *((void *)&v186 + 1);
          uint64_t v112 = v186;
          uint64_t v111 = (void *)v187;
        }
        uint64_t v9 = a2;
        if (v112 != v180[11]) {
          goto LABEL_384;
        }
        if (v111)
        {
          uint64_t v115 = &v111[3 * ((v110 >> ((4 * *((unsigned char *)v111 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v116 = v115[4];
          uint64_t v117 = v115[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v118 = v180[8];
          swift_unknownObjectRetain();
          uint64_t v9 = a2;
          specialized Rope._Node.subscript.getter(v110, v118);
          uint64_t v116 = v119;
          uint64_t v117 = v120;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v116, v113) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_210;
        }
        char v121 = specialized static Set.== infix(_:_:)(v117, v172);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v121 & 1) == 0)
        {
          id v5 = v171;
          goto LABEL_210;
        }
        unint64_t v122 = specialized Rope._remove(at:)((uint64_t)&v186, v181, v53);
        uint64_t v123 = v180;
        unint64_t v124 = v180[8];
        uint64_t v125 = v180[11];
        if (v122 >= specialized Rope._endPath.getter(v124))
        {
          unint64_t v124 = 0;
        }
        else if (*(unsigned char *)(v124 + 18))
        {
          uint64_t v126 = (v122 >> ((4 * *(unsigned char *)(v124 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          uint64_t v127 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v124 + 24, v126, v122);
          swift_unknownObjectRelease();
          unint64_t v124 = v127;
          uint64_t v123 = v180;
        }
        uint64_t v183 = v125;
        unint64_t v184 = v122;
        unint64_t v185 = v124;
        uint64_t v131 = v186;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v125 != v123[11]) {
          goto LABEL_405;
        }
        uint64_t v132 = v123[8];
        if (v132)
        {
          unint64_t v133 = *(unsigned __int8 *)(v132 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v122 <= v133) {
            goto LABEL_406;
          }
        }
        else if (!v122)
        {
          goto LABEL_406;
        }
        if (v124 && (char v167 = (4 * *(unsigned char *)(v124 + 18) + 8) & 0x3C, ((v122 >> v167) & 0xF) != 0))
        {
          unint64_t v184 = ((((v122 >> v167) & 0xF) - 1) << v167) | ((-15 << v167) - 1) & v122;
          uint64_t result = swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
          char v168 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v132);
          uint64_t result = swift_unknownObjectRelease_n();
          if ((v168 & 1) == 0) {
            goto LABEL_411;
          }
          uint64_t v125 = v183;
        }
        uint64_t v67 = v180;
        uint64_t v9 = a2;
        id v5 = v171;
        if (v125 != v180[11]) {
          goto LABEL_407;
        }
        if (!*v171) {
          goto LABEL_425;
        }
        unint64_t v53 = v184;
        uint64_t result = specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v198);
        long long v186 = v198[0];
        long long v187 = v198[1];
        long long v188 = v198[2];
        BOOL v20 = __OFSUB__(v31, *((void *)&v198[0] + 1));
        v31 -= *((void *)&v198[0] + 1);
        if (v20) {
          goto LABEL_408;
        }
        if (__OFADD__(*((void *)&v198[0] + 1), v131)) {
          goto LABEL_409;
        }
        *((void *)&v186 + 1) = *((void *)&v198[0] + 1) + v131;
        uint64_t v181 = v125 + 1;
        v180[11] = v125 + 1;
        if (!v180[8]) {
          goto LABEL_426;
        }
        uint64_t v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v20 = __OFSUB__(v179--, 1);
        uint64_t v7 = a3;
        if (v20) {
          goto LABEL_410;
        }
LABEL_236:
        uint64_t v137 = v67[8];
        uint64_t v138 = v67[11];
        *(void *)&long long v186 = v181;
        *((void *)&v186 + 1) = v53;
        *(void *)&long long v187 = v13;
        if (__OFADD__(v179, 1)) {
          goto LABEL_350;
        }
        if (v181 != v138) {
          goto LABEL_351;
        }
        ++v179;
        if (v13)
        {
          unint64_t v139 = v13[3 * ((v53 >> ((4 * *((unsigned char *)v13 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          unint64_t v139 = specialized Rope._Node.subscript.getter(v53, v137);
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v20 = __OFADD__(v31, v139);
        v31 += v139;
        if (v20) {
          goto LABEL_352;
        }
        if (v137)
        {
          unint64_t v140 = ((-15 << ((4 * *(unsigned char *)(v137 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v137 + 18) | ((unint64_t)*(unsigned __int16 *)(v137 + 16) << ((4 * *(unsigned char *)(v137 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v140 = 0;
        }
        uint64_t v8 = v180;
        if (v53 >= v140) {
          goto LABEL_353;
        }
        if (v13
          && (char v141 = (4 * *((unsigned char *)v13 + 18) + 8) & 0x3C,
              unint64_t v142 = ((v53 >> v141) & 0xF) + 1,
              v142 < *((unsigned __int16 *)v13 + 8)))
        {
          unint64_t v178 = (v142 << v141) | ((-15 << v141) - 1) & v53;
          uint64_t result = swift_unknownObjectRelease_n();
        }
        else
        {
          int v143 = *(unsigned __int8 *)(v137 + 18);
          char v144 = (4 * v143 + 8) & 0x3C;
          uint64_t v183 = (v53 >> v144) & 0xF;
          if (v143)
          {
            swift_unknownObjectRetain();
            char v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v137 + 24, &v183, (uint64_t)&v186, v137, v143);
            uint64_t result = swift_unknownObjectRelease();
            if ((v145 & 1) == 0) {
              goto LABEL_254;
            }
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v178 = *((void *)&v186 + 1);
          }
          else
          {
            unint64_t v146 = ((v53 >> v144) & 0xF) + 1;
            if (v146 >= *(unsigned __int16 *)(v137 + 16))
            {
LABEL_254:
              if (v137)
              {
                int v147 = *(unsigned __int8 *)(v137 + 18);
                uint64_t v148 = *(unsigned __int16 *)(v137 + 16);
                uint64_t result = swift_unknownObjectRelease_n();
                unint64_t v149 = ((-15 << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
              }
              else
              {
                unint64_t v149 = 0;
              }
              *(void *)&long long v186 = v181;
              *((void *)&v186 + 1) = v149;
              unint64_t v178 = v149;
              *(void *)&long long v187 = 0;
              goto LABEL_258;
            }
            unint64_t v178 = (v146 << v144) | ((-15 << v144) - 1) & v53;
            *((void *)&v186 + 1) = v178;
            uint64_t result = swift_unknownObjectRelease_n();
            *(void *)&long long v187 = v137;
          }
        }
LABEL_258:
        uint64_t v32 = v186;
        uint64_t v13 = (void *)v187;
        if (v31 >= v7)
        {
          uint64_t v150 = *v5;
          if (v9 == v7)
          {
            uint64_t v32 = v180[11];
            if (v150)
            {
              uint64_t v151 = v180[10];
              if (v151 < v9) {
                goto LABEL_380;
              }
              uint64_t v152 = v180[9];
              uint64_t v153 = *(unsigned __int8 *)(v150 + 18);
              if (*(_WORD *)(v150 + 16) && v151 > a2)
              {
                if (*(unsigned char *)(v150 + 18))
                {
                  uint64_t result = swift_unknownObjectRetain_n();
                  uint64_t v34 = a2;
                  uint64_t v154 = (void *)v150;
                  while (1)
                  {
                    uint64_t v156 = *((unsigned __int16 *)v154 + 8);
                    if (!*((_WORD *)v154 + 8)) {
                      goto LABEL_267;
                    }
                    uint64_t v157 = v154[5];
                    uint64_t v158 = v34 - v157;
                    if (__OFSUB__(v34, v157)) {
                      goto LABEL_356;
                    }
                    if (__OFADD__(v158, 1)) {
                      goto LABEL_357;
                    }
                    if (v158 + 1 <= 0)
                    {
                      uint64_t v156 = 0;
                    }
                    else
                    {
                      if (v156 == 1)
                      {
                        v34 -= v157;
LABEL_267:
                        if (v34) {
                          goto LABEL_354;
                        }
                        goto LABEL_268;
                      }
                      uint64_t v159 = v154[8];
                      BOOL v20 = __OFSUB__(v158, v159);
                      uint64_t v160 = v158 - v159;
                      if (v20) {
                        goto LABEL_366;
                      }
                      if (__OFADD__(v160, 1)) {
                        goto LABEL_367;
                      }
                      if (v160 + 1 >= 1)
                      {
                        if (v156 != 2)
                        {
                          unint64_t v161 = v154 + 11;
                          uint64_t v162 = 2;
                          while (v156 != v162)
                          {
                            uint64_t v34 = v160 - *v161;
                            if (__OFSUB__(v160, *v161)) {
                              goto LABEL_343;
                            }
                            if (__OFADD__(v34, 1)) {
                              goto LABEL_344;
                            }
                            if (v34 + 1 < 1)
                            {
                              uint64_t v156 = v162;
                              uint64_t v34 = v160;
                              goto LABEL_268;
                            }
                            ++v162;
                            v161 += 3;
                            uint64_t v160 = v34;
                            if (v156 == v162) {
                              goto LABEL_267;
                            }
                          }
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
LABEL_344:
                          __break(1u);
LABEL_345:
                          __break(1u);
                          goto LABEL_346;
                        }
                        uint64_t v34 = v160;
                        goto LABEL_267;
                      }
                      uint64_t v156 = 1;
                      uint64_t v34 = v158;
                    }
LABEL_268:
                    char v155 = (4 * *((unsigned char *)v154 + 18) + 8) & 0x3C;
                    uint64_t v153 = ((-15 << v155) - 1) & v153 | (v156 << v155);
                    uint64_t v13 = (void *)v154[3 * v156 + 3];
                    swift_unknownObjectRetain();
                    uint64_t result = swift_unknownObjectRelease();
                    uint64_t v154 = v13;
                    if (!*((unsigned char *)v13 + 18)) {
                      goto LABEL_294;
                    }
                  }
                }
                uint64_t result = swift_unknownObjectRetain_n();
                uint64_t v153 = 0;
                uint64_t v34 = a2;
                uint64_t v13 = (void *)v150;
LABEL_294:
                uint64_t v163 = *((unsigned __int16 *)v13 + 8);
                if (!*((_WORD *)v13 + 8))
                {
                  uint64_t v165 = v34;
                  uint64_t v7 = a3;
                  goto LABEL_305;
                }
                uint64_t v164 = v13[3];
                BOOL v20 = __OFSUB__(v34, v164);
                uint64_t v165 = v34 - v164;
                uint64_t v7 = a3;
                if (v20) {
                  goto LABEL_399;
                }
                if (__OFADD__(v165, 1)) {
                  goto LABEL_400;
                }
                if (v165 + 1 <= 0)
                {
                  uint64_t v163 = 0;
                }
                else
                {
                  if (v163 == 1) {
                    goto LABEL_305;
                  }
                  uint64_t v166 = v13[6];
                  uint64_t v34 = v165 - v166;
                  if (__OFSUB__(v165, v166)) {
                    goto LABEL_412;
                  }
                  if (__OFADD__(v34, 1)) {
                    goto LABEL_413;
                  }
                  if (v34 + 1 < 1)
                  {
                    uint64_t v163 = 1;
                    uint64_t v34 = v165;
                  }
                  else
                  {
                    if (v163 != 2)
                    {
                      uint64_t v169 = v13 + 9;
                      uint64_t v170 = 2;
                      while (v163 != v170)
                      {
                        uint64_t v165 = v34 - *v169;
                        if (__OFSUB__(v34, *v169)) {
                          goto LABEL_390;
                        }
                        if (__OFADD__(v165, 1)) {
                          goto LABEL_391;
                        }
                        if (v165 + 1 < 1)
                        {
                          uint64_t v163 = v170;
                          goto LABEL_332;
                        }
                        ++v170;
                        v169 += 3;
                        uint64_t v34 = v165;
                        if (v163 == v170) {
                          goto LABEL_305;
                        }
                      }
                      goto LABEL_389;
                    }
                    v165 -= v166;
LABEL_305:
                    if (v165) {
                      goto LABEL_396;
                    }
                    uint64_t v34 = 0;
                  }
                }
LABEL_332:
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                unint64_t v33 = v153 & 0xFFFFFFFFFFFFF0FFLL | (v163 << 8);
              }
              else
              {
                unint64_t v33 = ((-15 << ((4 * v153 + 8) & 0x3C)) - 1) & v153 | ((unint64_t)*(unsigned __int16 *)(v150 + 16) << ((4 * v153 + 8) & 0x3C));
                swift_unknownObjectRetain();
                uint64_t v34 = 0;
                uint64_t v13 = 0;
              }
              swift_unknownObjectRetain();
              unint64_t v178 = v33;
              uint64_t v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v32, v33, (uint64_t)v13, v150, v152);
              uint64_t result = swift_unknownObjectRelease_n();
              uint64_t v9 = a2;
              goto LABEL_53;
            }
            if (v9 > 0) {
              goto LABEL_388;
            }
            uint64_t v34 = 0;
            uint64_t v13 = 0;
            unint64_t v178 = 0;
            uint64_t v179 = 0;
LABEL_53:
            BOOL v20 = __OFSUB__(v9, v34);
            uint64_t v31 = v9 - v34;
            uint64_t v8 = v180;
            if (v20) {
              goto LABEL_373;
            }
          }
          else
          {
            uint64_t v31 = 0;
            unint64_t v178 = 0;
            uint64_t v179 = 0;
            uint64_t v13 = 0;
            uint64_t v32 = v180[11];
            if (v150)
            {
              uint64_t v13 = 0;
              uint64_t v31 = v180[10];
              uint64_t v179 = v180[9];
              unint64_t v178 = ((-15 << ((4 * *(unsigned char *)(v150 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v150 + 18) | ((unint64_t)*(unsigned __int16 *)(v150 + 16) << ((4 * *(unsigned char *)(v150 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*(unsigned char *)(v35 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v7 = v9;
        uint64_t v4 = v35;
LABEL_73:
        uint64_t v27 = *(unsigned __int16 *)(v4 + 16);
        if (!*(_WORD *)(v4 + 16)) {
          goto LABEL_71;
        }
        uint64_t v43 = *(void *)(v4 + 40);
        BOOL v20 = __OFSUB__(v7, v43);
        uint64_t v29 = v7 - v43;
        if (v20) {
          goto LABEL_340;
        }
        if (__OFADD__(v29, 1)) {
          goto LABEL_341;
        }
        if (v29 + 1 <= 0)
        {
          uint64_t v27 = 0;
          goto LABEL_72;
        }
        if (v27 == 1)
        {
          uint64_t v7 = v29;
LABEL_71:
          if (!v7) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
          goto LABEL_342;
        }
        uint64_t v44 = (uint64_t *)(v4 + 64);
        uint64_t v45 = 1;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          uint64_t v7 = v29 - v46;
          if (__OFSUB__(v29, v46)) {
            break;
          }
          if (__OFADD__(v7, 1)) {
            goto LABEL_335;
          }
          if (v7 + 1 < 1)
          {
            uint64_t v27 = v45;
            uint64_t v7 = v29;
LABEL_72:
            char v42 = (4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C;
            uint64_t v15 = ((-15 << v42) - 1) & v15 | (v27 << v42);
            uint64_t v9 = *(void *)(v4 + 24 + 24 * v27);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v4 = v9;
            if (!*(unsigned char *)(v9 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }
          ++v45;
          uint64_t v29 = v7;
          if (v27 == v45) {
            goto LABEL_71;
          }
        }
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        uint64_t v25 = v29;
        uint64_t v14 = v27;
        continue;
      }
      break;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v15 = 0;
    uint64_t v7 = v9;
    uint64_t v9 = v35;
LABEL_87:
    uint64_t v47 = *(unsigned __int16 *)(v9 + 16);
    if (!*(_WORD *)(v9 + 16)) {
      goto LABEL_99;
    }
    uint64_t v48 = *(void *)(v9 + 24);
    BOOL v20 = __OFSUB__(v7, v48);
    uint64_t v49 = v7 - v48;
    if (v20) {
      goto LABEL_386;
    }
    if (__OFADD__(v49, 1)) {
      goto LABEL_387;
    }
    if (v49 + 1 <= 0)
    {
      uint64_t v47 = 0;
    }
    else
    {
      if (v47 == 1)
      {
        uint64_t v7 = v49;
LABEL_99:
        if (v7) {
          goto LABEL_385;
        }
        goto LABEL_100;
      }
      uint64_t v50 = (uint64_t *)(v9 + 48);
      uint64_t v51 = 1;
      while (1)
      {
        uint64_t v52 = *v50;
        v50 += 3;
        uint64_t v7 = v49 - v52;
        if (__OFSUB__(v49, v52)) {
          goto LABEL_362;
        }
        if (__OFADD__(v7, 1)) {
          goto LABEL_363;
        }
        if (v7 + 1 < 1) {
          break;
        }
        ++v51;
        uint64_t v49 = v7;
        if (v47 == v51) {
          goto LABEL_99;
        }
      }
      uint64_t v47 = v51;
      uint64_t v7 = v49;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v40 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
  return result;
}